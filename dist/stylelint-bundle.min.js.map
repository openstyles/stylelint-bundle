{"version":3,"file":"stylelint-bundle.min.js","sources":["../node_modules/postcss-value-parser/lib/parse.js","../node_modules/postcss-value-parser/lib/walk.js","../node_modules/postcss-value-parser/lib/stringify.js","../node_modules/postcss-value-parser/lib/unit.js","../node_modules/postcss-value-parser/lib/index.js","../node_modules/stylelint/lib/utils/declarationValueIndex.js","../node_modules/stylelint/lib/utils/getDeclarationValue.js","../node_modules/stylelint/lib/utils/hasLessInterpolation.js","../node_modules/stylelint/lib/utils/hasPsvInterpolation.js","../node_modules/stylelint/lib/utils/hasScssInterpolation.js","../node_modules/stylelint/lib/utils/hasTplInterpolation.js","../node_modules/stylelint/lib/utils/hasInterpolation.js","../node_modules/stylelint/lib/utils/isStandardSyntaxValue.js","../node_modules/stylelint/lib/utils/matchesStringOrRegExp.js","../node_modules/stylelint/lib/utils/optionsMatches.js","../node_modules/stylelint/lib/utils/report.js","../node_modules/stylelint/lib/utils/ruleMessages.js","../node_modules/stylelint/lib/utils/setDeclarationValue.js","../node_modules/stylelint/lib/utils/arrayEqual.js","../node_modules/is-plain-object/dist/is-plain-object.mjs","../node_modules/stylelint/lib/utils/validateTypes.js","../node_modules/stylelint/lib/utils/validateOptions.js","../node_modules/stylelint/lib/rules/alpha-value-notation/index.js","../node_modules/stylelint/lib/utils/addEmptyLineBefore.js","../node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/hasEmptyLine.js","../node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/typeGuards.js","../node_modules/stylelint/lib/utils/isSharedLineComment.js","../node_modules/stylelint/lib/utils/isAfterComment.js","../node_modules/stylelint/lib/utils/hasBlock.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isFirstNested.js","../node_modules/stylelint/lib/utils/isFirstNodeOfRoot.js","../node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.js","../node_modules/stylelint/lib/utils/removeEmptyLinesBefore.js","../node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/vendor.js","../node_modules/stylelint/lib/rules/at-rule-allowed-list/index.js","../node_modules/stylelint/lib/rules/at-rule-disallowed-list/index.js","../node_modules/stylelint/lib/rules/atRuleNameSpaceChecker.js","../node_modules/stylelint/lib/utils/configurationError.js","../node_modules/stylelint/lib/utils/isSingleLineString.js","../node_modules/stylelint/lib/utils/isWhitespace.js","../node_modules/stylelint/lib/utils/whitespaceChecker.js","../node_modules/stylelint/lib/rules/at-rule-name-newline-after/index.js","../node_modules/stylelint/lib/rules/at-rule-name-case/index.js","../node_modules/stylelint/lib/rules/at-rule-name-space-after/index.js","../node_modules/stylelint/lib/utils/rawNodeString.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-space-before/index.js","../node_modules/stylelint/lib/utils/isAutoprefixable.js","../node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js","../node_modules/stylelint/lib/utils/beforeBlockString.js","../node_modules/stylelint/lib/utils/blockString.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-after/index.js","../node_modules/stylelint/lib/utils/hasEmptyBlock.js","../node_modules/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js","../node_modules/stylelint/lib/utils/addEmptyLineAfter.js","../node_modules/stylelint/lib/utils/removeEmptyLinesAfter.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-before/index.js","../node_modules/stylelint/lib/reference/keywordSets.js","../node_modules/stylelint/lib/rules/at-rule-no-unknown/index.js","../node_modules/stylelint/lib/utils/flattenArray.js","../node_modules/stylelint/lib/utils/validateObjectWithArrayProps.js","../node_modules/stylelint/lib/rules/at-rule-property-required-list/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-after/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-before/index.js","../node_modules/stylelint/lib/rules/block-no-empty/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-before/index.js","../node_modules/stylelint/lib/rules/color-no-hex/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-after/index.js","../node_modules/stylelint/lib/rules/color-no-invalid-hex/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxHexColor.js","../node_modules/stylelint/lib/utils/isValidHex.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-after/index.js","../node_modules/stylelint/lib/rules/color-hex-case/index.js","../node_modules/stylelint/lib/rules/color-hex-alpha/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxFunction.js","../node_modules/stylelint/lib/utils/isStandardSyntaxColorFunction.js","../node_modules/stylelint/lib/rules/color-function-notation/index.js","../node_modules/stylelint/lib/reference/propertySets.js","../node_modules/colord/index.mjs","../node_modules/colord/plugins/hwb.mjs","../node_modules/colord/plugins/lab.mjs","../node_modules/colord/plugins/lch.mjs","../node_modules/stylelint/lib/rules/color-named/colordUtils.js","../node_modules/colord/plugins/names.mjs","../node_modules/stylelint/lib/rules/color-named/index.js","../node_modules/stylelint/lib/rules/comment-pattern/index.js","../node_modules/stylelint/lib/utils/nextNonCommentNode.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js","../node_modules/stylelint/lib/utils/containsString.js","../node_modules/stylelint/lib/rules/comment-word-disallowed-list/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxComment.js","../node_modules/stylelint/lib/rules/comment-no-empty/index.js","../node_modules/stylelint/lib/rules/comment-whitespace-inside/index.js","../node_modules/style-search/index.js","../node_modules/stylelint/lib/rules/declarationBangSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-bang-space-after/index.js","../node_modules/stylelint/lib/utils/atRuleParamIndex.js","../node_modules/stylelint/lib/rules/custom-media-pattern/index.js","../node_modules/stylelint/lib/utils/isCustomProperty.js","../node_modules/stylelint/lib/utils/isScssVariable.js","../node_modules/stylelint/lib/utils/isStandardSyntaxProperty.js","../node_modules/stylelint/lib/rules/custom-property-pattern/index.js","../node_modules/stylelint/lib/rules/comment-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.js","../node_modules/stylelint/lib/rules/custom-property-empty-line-before/index.js","../node_modules/stylelint/lib/utils/eachDeclarationBlock.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-custom-properties/index.js","../node_modules/stylelint/lib/rules/custom-property-no-missing-var-function/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js","../node_modules/stylelint/lib/reference/shorthandData.js","../node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js","../node_modules/stylelint/lib/rules/color-hex-length/index.js","../node_modules/stylelint/lib/rules/declarationColonSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-colon-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js","../node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.js","../node_modules/stylelint/lib/rules/declaration-empty-line-before/index.js","../node_modules/stylelint/lib/rules/declaration-colon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js","../node_modules/stylelint/lib/utils/getImportantPosition.js","../node_modules/stylelint/lib/rules/declaration-no-important/index.js","../node_modules/stylelint/lib/utils/getUnitFromValueNode.js","../node_modules/stylelint/lib/utils/blurInterpolation.js","../node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-colon-space-before/index.js","../node_modules/stylelint/lib/utils/isNumbery.js","../node_modules/stylelint/lib/utils/isValidFontSize.js","../node_modules/stylelint/lib/utils/isVariable.js","../node_modules/stylelint/lib/utils/findFontFamily.js","../node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.js","../node_modules/stylelint/lib/rules/declaration-property-unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/font-family-name-quotes/index.js","../node_modules/stylelint/lib/rules/font-weight-notation/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-disallowed-list/index.js","../shim/process.js","../node_modules/picocolors/picocolors.js","../node_modules/postcss/lib/tokenize.js","../node_modules/postcss/lib/terminal-highlight.js","../node_modules/postcss/lib/css-syntax-error.js","../node_modules/postcss/lib/symbols.js","../node_modules/postcss/lib/stringifier.js","../node_modules/postcss/lib/stringify.js","../node_modules/postcss/lib/node.js","../node_modules/postcss/lib/declaration.js","../shim/empty.js","../node_modules/postcss/node_modules/nanoid/non-secure/index.js","../node_modules/postcss/lib/previous-map.js","../node_modules/postcss/lib/input.js","../node_modules/postcss/lib/map-generator.js","../node_modules/postcss/lib/container.js","../node_modules/postcss/lib/document.js","../node_modules/postcss/lib/comment.js","../node_modules/postcss/lib/warn-once.js","../node_modules/postcss/lib/warning.js","../node_modules/postcss/lib/result.js","../node_modules/postcss/lib/at-rule.js","../node_modules/postcss/lib/root.js","../node_modules/postcss/lib/list.js","../node_modules/postcss/lib/rule.js","../node_modules/postcss/lib/parser.js","../node_modules/postcss/lib/parse.js","../node_modules/postcss/lib/lazy-result.js","../node_modules/postcss/lib/no-work-result.js","../node_modules/postcss/lib/processor.js","../node_modules/postcss/lib/fromJSON.js","../node_modules/postcss/lib/postcss.js","../node_modules/postcss/lib/postcss.mjs","../node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.js","../node_modules/stylelint/lib/rules/functionCommaSpaceFix.js","../node_modules/stylelint/lib/rules/functionCommaSpaceChecker.js","../node_modules/stylelint/lib/rules/function-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js","../node_modules/stylelint/lib/rules/function-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-name-case/index.js","../node_modules/stylelint/lib/rules/function-comma-space-after/index.js","../node_modules/stylelint/lib/rules/function-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-bang-space-before/index.js","../node_modules/stylelint/node_modules/balanced-match/index.js","../node_modules/stylelint/lib/utils/functionArgumentsSearch.js","../node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js","../node_modules/stylelint/lib/rules/function-comma-space-before/index.js","../node_modules/stylelint/lib/rules/function-disallowed-list/index.js","../node_modules/stylelint/lib/rules/function-parentheses-newline-inside/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxUrl.js","../node_modules/stylelint/lib/rules/function-url-quotes/index.js","../node_modules/stylelint/lib/rules/function-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/function-url-no-scheme-relative/index.js","../node_modules/stylelint/lib/rules/function-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomFunction.js","../node_modules/stylelint/lib/utils/getSchemeFromUrl.js","../node_modules/stylelint/lib/rules/function-url-scheme-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-whitespace-after/index.js","../node_modules/stylelint/lib/rules/function-url-scheme-disallowed-list/index.js","../node_modules/stylelint/lib/rules/hue-degree-notation/index.js","../node_modules/stylelint/lib/utils/setAtRuleParams.js","../node_modules/stylelint/lib/utils/getAtRuleParams.js","../node_modules/stylelint/lib/rules/import-notation/index.js","../node_modules/stylelint/lib/rules/linebreaks/index.js","../node_modules/stylelint/lib/reference/mathFunctions.js","../node_modules/stylelint/lib/rules/length-zero-no-unit/index.js","../node_modules/stylelint/lib/utils/isMathFunction.js","../node_modules/clone-regexp/index.js","../node_modules/is-regexp/index.js","../node_modules/execall/index.js","../node_modules/stylelint/lib/rules/max-line-length/index.js","../node_modules/stylelint/lib/rules/keyframes-name-pattern/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxSelector.js","../node_modules/stylelint/lib/utils/isStandardSyntaxRule.js","../node_modules/postcss-selector-parser/dist/util/unesc.js","../node_modules/postcss-selector-parser/dist/util/getProp.js","../node_modules/postcss-selector-parser/dist/util/ensureObject.js","../node_modules/postcss-selector-parser/dist/util/stripComments.js","../node_modules/postcss-selector-parser/dist/util/index.js","../node_modules/postcss-selector-parser/dist/selectors/node.js","../node_modules/postcss-selector-parser/dist/selectors/types.js","../node_modules/postcss-selector-parser/dist/selectors/container.js","../node_modules/postcss-selector-parser/dist/selectors/root.js","../node_modules/postcss-selector-parser/dist/selectors/selector.js","../node_modules/cssesc/cssesc.js","../node_modules/postcss-selector-parser/dist/selectors/className.js","../node_modules/postcss-selector-parser/dist/selectors/comment.js","../node_modules/postcss-selector-parser/dist/selectors/id.js","../node_modules/postcss-selector-parser/dist/selectors/namespace.js","../node_modules/postcss-selector-parser/dist/selectors/tag.js","../node_modules/postcss-selector-parser/dist/selectors/string.js","../node_modules/postcss-selector-parser/dist/selectors/pseudo.js","../node_modules/util-deprecate/node.js","../shim/util.js","../node_modules/postcss-selector-parser/dist/selectors/attribute.js","../node_modules/postcss-selector-parser/dist/selectors/universal.js","../node_modules/postcss-selector-parser/dist/selectors/combinator.js","../node_modules/postcss-selector-parser/dist/selectors/nesting.js","../node_modules/postcss-selector-parser/dist/sortAscending.js","../node_modules/postcss-selector-parser/dist/tokenTypes.js","../node_modules/postcss-selector-parser/dist/tokenize.js","../node_modules/postcss-selector-parser/dist/parser.js","../node_modules/postcss-selector-parser/dist/processor.js","../node_modules/postcss-selector-parser/dist/selectors/constructors.js","../node_modules/postcss-selector-parser/dist/selectors/guards.js","../node_modules/postcss-selector-parser/dist/selectors/index.js","../node_modules/postcss-selector-parser/dist/index.js","../node_modules/stylelint/lib/rules/max-nesting-depth/index.js","../node_modules/stylelint/lib/utils/isCustomMediaQuery.js","../node_modules/stylelint/lib/utils/isRangeContextMediaFeature.js","../node_modules/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js","../node_modules/postcss-media-query-parser/dist/nodes/Node.js","../node_modules/postcss-media-query-parser/dist/nodes/Container.js","../node_modules/postcss-media-query-parser/dist/parsers.js","../node_modules/postcss-media-query-parser/dist/index.js","../node_modules/stylelint/lib/rules/rangeContextNodeParser.js","../node_modules/stylelint/lib/rules/media-feature-name-case/index.js","../node_modules/stylelint/lib/rules/keyframe-declaration-no-important/index.js","../node_modules/stylelint/lib/rules/max-empty-lines/index.js","../node_modules/stylelint/lib/rules/keyframe-block-no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-after/index.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-before/index.js","../node_modules/stylelint/lib/rules/media-feature-name-allowed-list/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/media-feature-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/media-feature-name-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.js","../node_modules/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/findMediaOperator.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-after/index.js","../node_modules/postcss-resolve-nested-selector/index.js","../node_modules/@csstools/selector-specificity/dist/index.mjs","../node_modules/stylelint/lib/utils/findAtRuleContext.js","../node_modules/stylelint/lib/utils/nodeContextLookup.js","../node_modules/stylelint/lib/utils/parseSelector.js","../node_modules/stylelint/lib/rules/no-descending-specificity/index.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-before/index.js","../node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.js","../node_modules/stylelint/lib/utils/isOnlyWhitespace.js","../node_modules/stylelint/lib/rules/no-eol-whitespace/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/findNotContiguousOrRectangular.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/isRectangular.js","../node_modules/stylelint/lib/rules/no-empty-first-line/index.js","../node_modules/stylelint/lib/rules/no-extra-semicolons/index.js","../node_modules/stylelint/lib/rules/no-invalid-double-slash-comments/index.js","../node_modules/stylelint/lib/rules/no-invalid-position-at-import-rule/index.js","../node_modules/stylelint/lib/rules/no-irregular-whitespace/index.js","../node_modules/stylelint/lib/utils/isKeyframeRule.js","../node_modules/stylelint/lib/rules/no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/no-empty-source/index.js","../node_modules/stylelint/lib/rules/number-leading-zero/index.js","../node_modules/stylelint/lib/rules/property-allowed-list/index.js","../node_modules/stylelint/lib/rules/number-no-trailing-zeros/index.js","../node_modules/stylelint/lib/rules/number-max-precision/index.js","../node_modules/known-css-properties/index.js","../node_modules/stylelint/lib/rules/property-no-unknown/index.js","../node_modules/stylelint/lib/rules/rule-selector-property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/property-case/index.js","../node_modules/stylelint/lib/rules/no-unknown-animations/index.js","../node_modules/stylelint/lib/utils/findAnimationName.js","../node_modules/stylelint/lib/rules/rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isAfterSingleLineComment.js","../node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-allowed-list/index.js","../node_modules/stylelint/lib/utils/isKeyframeSelector.js","../node_modules/stylelint/lib/rules/selector-class-pattern/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-before/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxCombinator.js","../node_modules/stylelint/lib/rules/selectorCombinatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-combinator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-attribute-quotes/index.js","../node_modules/stylelint/lib/utils/getRuleSelector.js","../node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-combinator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js","../node_modules/stylelint/lib/rules/selector-combinator-space-before/index.js","../node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/selector-id-pattern/index.js","../node_modules/stylelint/lib/rules/selector-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-before/index.js","../node_modules/stylelint/lib/utils/isNonNegativeInteger.js","../node_modules/stylelint/lib/rules/selector-max-combinators/index.js","../node_modules/stylelint/lib/utils/isContextFunctionalPseudoClass.js","../node_modules/stylelint/lib/rules/selector-max-attribute/index.js","../node_modules/stylelint/lib/rules/no-missing-end-of-source-newline/index.js","../node_modules/stylelint/lib/rules/selector-max-class/index.js","../node_modules/stylelint/lib/rules/selector-max-id/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxTypeSelector.js","../node_modules/stylelint/lib/rules/selector-max-type/index.js","../node_modules/stylelint/lib/rules/selector-max-specificity/index.js","../node_modules/stylelint/lib/rules/selector-max-pseudo-class/index.js","../node_modules/stylelint/lib/rules/selector-nested-pattern/index.js","../node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.js","../node_modules/stylelint/lib/rules/selector-not-notation/index.js","../node_modules/stylelint/lib/rules/selector-max-universal/index.js","../node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-case/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomSelector.js","../node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.js","../node_modules/stylelint/lib/rules/selector-type-case/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-allowed-list/index.js","../node_modules/stylelint/lib/rules/unit-no-unknown/index.js","../node_modules/stylelint/lib/rules/string-no-newline/index.js","../node_modules/stylelint/lib/rules/selector-type-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomElement.js","../node_modules/stylelint/lib/rules/time-min-milliseconds/index.js","../node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-case/index.js","../node_modules/stylelint/lib/utils/transformSelector.js","../node_modules/stylelint/lib/rules/unicode-bom/index.js","../node_modules/stylelint/lib/rules/unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/value-keyword-case/index.js","../node_modules/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js","../node_modules/stylelint/lib/utils/isCounterResetCustomIdentValue.js","../node_modules/stylelint/lib/rules/valueListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/indentation/index.js","../node_modules/stylelint/lib/rules/value-list-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/unit-case/index.js","../node_modules/stylelint/lib/rules/unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-property-max-values/index.js","../node_modules/stylelint/lib/utils/validateObjectWithProps.js","../node_modules/stylelint/lib/rules/string-quotes/index.js","../node_modules/stylelint/lib/rules/index.js","../node_modules/stylelint/lib/normalizeRuleSettings.js","../node_modules/stylelint/lib/utils/getModulePath.js","../node_modules/globjoin/index.js","../node_modules/stylelint/lib/normalizeAllRuleSettings.js","../node_modules/stylelint/lib/augmentConfig.js","../node_modules/stylelint/lib/createStylelintResult.js","../node_modules/stylelint/lib/createPartialStylelintResult.js","../shim/getConfigForFile.js","../node_modules/postcss-safe-parser/lib/safe-parser.js","../node_modules/postcss-safe-parser/lib/safe-parse.js","../node_modules/stylelint/lib/getPostcssResult.js","../shim/isPathIgnored.js","../node_modules/stylelint/lib/utils/isPathNotFoundError.js","../node_modules/stylelint/lib/assignDisabledRanges.js","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/stylelint/lib/reportUnknownRuleNames.js","../node_modules/stylelint/lib/lintSource.js","../node_modules/stylelint/lib/lintPostcssResult.js","../shim/os.js","../node_modules/stylelint/lib/createStylelint.js","../node_modules/stylelint/lib/formatters/jsonFormatter.js","../node_modules/strip-ansi/index.js","../node_modules/ansi-regex/index.js","../node_modules/is-fullwidth-code-point/index.js","../node_modules/string-width/index.js","../node_modules/emoji-regex/index.js","../node_modules/supports-hyperlinks/node_modules/has-flag/index.js","../node_modules/supports-hyperlinks/node_modules/supports-color/index.js","../node_modules/supports-hyperlinks/index.js","../shim/tty.js","../node_modules/stylelint/lib/formatters/terminalLink.js","../node_modules/stylelint/lib/formatters/stringFormatter.js","../node_modules/stylelint/lib/formatters/unixFormatter.js","../node_modules/stylelint/lib/formatters/verboseFormatter.js","../node_modules/stylelint/lib/formatters/tapFormatter.js","../node_modules/stylelint/lib/formatters/index.js","../node_modules/stylelint/lib/formatters/compactFormatter.js","../node_modules/stylelint/lib/postcssPlugin.js","../node_modules/imurmurhash/imurmurhash.js","../node_modules/stylelint/lib/utils/hash.js","../node_modules/stylelint/lib/utils/FileCache.js","../node_modules/stylelint/lib/utils/getCacheFile.js","../node_modules/stylelint/lib/utils/filterFilePaths.js","../node_modules/stylelint/lib/utils/noFilesFoundError.js","../node_modules/stylelint/lib/utils/allFilesIgnoredError.js","../node_modules/stylelint/lib/validateDisableSettings.js","../node_modules/stylelint/lib/utils/putIfAbsent.js","../node_modules/stylelint/lib/needlessDisables.js","../node_modules/stylelint/lib/reportDisables.js","../node_modules/stylelint/lib/prepareReturnValue.js","../node_modules/stylelint/lib/invalidScopeDisables.js","../node_modules/stylelint/lib/descriptionlessDisables.js","../node_modules/stylelint/lib/standalone.js","../node_modules/stylelint/lib/index.js","../node_modules/stylelint/lib/utils/getFormatterOptionsText.js","../node_modules/normalize-path/index.js","../node_modules/stylelint/lib/createPlugin.js","../node_modules/stylelint/lib/resolveConfig.js","../node_modules/stylelint/lib/utils/checkAgainstRule.js"],"sourcesContent":["var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n","module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n","function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n","var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n","var parse = require(\"./parse\");\nvar walk = require(\"./walk\");\nvar stringify = require(\"./stringify\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = require(\"./unit\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n","'use strict';\n\n/**\n * Get the index of a declaration's value\n *\n * @param {import('postcss').Declaration} decl\n * @returns {number}\n */\nmodule.exports = function declarationValueIndex(decl) {\n\tconst raws = decl.raws;\n\n\treturn [\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.prefix,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t(raws.prop && raws.prop.raw) || decl.prop,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.suffix,\n\t\traws.between || ':',\n\t\t// @ts-expect-error -- TS2339: Property 'prefix' does not exist on type '{ value: string; raw: string; }'.\n\t\traws.value && raws.value.prefix,\n\t].reduce((count, str) => {\n\t\tif (str) {\n\t\t\treturn count + str.length;\n\t\t}\n\n\t\treturn count;\n\t}, 0);\n};\n","'use strict';\n\n/**\n * @param {import('postcss').Declaration} decl\n * @returns {string}\n */\nmodule.exports = function getDeclarationValue(decl) {\n\tconst raws = decl.raws;\n\n\treturn (raws.value && raws.value.raw) || decl.value;\n};\n","'use strict';\n\n/**\n * Check whether a string has less interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has less interpolation\n */\nmodule.exports = function (string) {\n\treturn /@\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has postcss-simple-vars interpolation\n *\n * @param {string} string\n */\nmodule.exports = function (string) {\n\treturn /\\$\\(.+?\\)/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has scss interpolation\n *\n * @param {string} string\n */\nmodule.exports = function (string) {\n\treturn /#\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has JS template literal interpolation or HTML-like template\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has template literal interpolation\n */\nmodule.exports = function (string) {\n\treturn /\\{.+?\\}/.test(string);\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a string has interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has interpolation\n */\nmodule.exports = function (string) {\n\t// SCSS or Less interpolation\n\tif (\n\t\thasLessInterpolation(string) ||\n\t\thasScssInterpolation(string) ||\n\t\thasTplInterpolation(string) ||\n\t\thasPsvInterpolation(string)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a value is standard\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function (value) {\n\tlet normalizedValue = value;\n\n\t// Ignore operators before variables (example -$variable)\n\tif (/^[-+*/]/.test(value.charAt(0))) {\n\t\tnormalizedValue = normalizedValue.slice(1);\n\t}\n\n\t// SCSS variable (example $variable)\n\tif (normalizedValue.startsWith('$')) {\n\t\treturn false;\n\t}\n\n\t// SCSS namespace (example namespace.$variable)\n\tif (/^.+\\.\\$/.test(value)) {\n\t\treturn false;\n\t}\n\n\t// Less variable\n\tif (normalizedValue.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(normalizedValue)) {\n\t\treturn false;\n\t}\n\n\t// WebExtension replacement keyword used by Chrome/Firefox\n\t// more information: https://developer.chrome.com/extensions/i18n\n\t// and https://github.com/stylelint/stylelint/issues/4707\n\tif (/__MSG_\\S+__/.test(value)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Compares a string to a second value that, if it fits a certain convention,\n * is converted to a regular expression before the comparison.\n * If it doesn't fit the convention, then two strings are compared.\n *\n * Any strings starting and ending with `/` are interpreted\n * as regular expressions.\n *\n * @param {string | Array<string>} input\n * @param {string | RegExp | Array<string | RegExp>} comparison\n *\n * @returns {false | {match: string, pattern: (string | RegExp), substring: string}}\n */\nmodule.exports = function matchesStringOrRegExp(input, comparison) {\n\tif (!Array.isArray(input)) {\n\t\treturn testAgainstStringOrRegExpOrArray(input, comparison);\n\t}\n\n\tfor (const inputItem of input) {\n\t\tconst testResult = testAgainstStringOrRegExpOrArray(inputItem, comparison);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {string | RegExp | Array<string | RegExp>} comparison\n */\nfunction testAgainstStringOrRegExpOrArray(value, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstStringOrRegExp(value, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstStringOrRegExp(value, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} value\n * @param {string | RegExp} comparison\n */\nfunction testAgainstStringOrRegExp(value, comparison) {\n\t// If it's a RegExp, test directly\n\tif (comparison instanceof RegExp) {\n\t\tconst match = value.match(comparison);\n\n\t\treturn match ? { match: value, pattern: comparison, substring: match[0] || '' } : false;\n\t}\n\n\t// Check if it's RegExp in a string\n\tconst firstComparisonChar = comparison[0];\n\tconst lastComparisonChar = comparison[comparison.length - 1];\n\tconst secondToLastComparisonChar = comparison[comparison.length - 2];\n\n\tconst comparisonIsRegex =\n\t\tfirstComparisonChar === '/' &&\n\t\t(lastComparisonChar === '/' ||\n\t\t\t(secondToLastComparisonChar === '/' && lastComparisonChar === 'i'));\n\n\tconst hasCaseInsensitiveFlag = comparisonIsRegex && lastComparisonChar === 'i';\n\n\t// If so, create a new RegExp from it\n\tif (comparisonIsRegex) {\n\t\tconst valueMatch = hasCaseInsensitiveFlag\n\t\t\t? value.match(new RegExp(comparison.slice(1, -2), 'i'))\n\t\t\t: value.match(new RegExp(comparison.slice(1, -1)));\n\n\t\treturn valueMatch\n\t\t\t? { match: value, pattern: comparison, substring: valueMatch[0] || '' }\n\t\t\t: false;\n\t}\n\n\t// Otherwise, it's a string. Do a strict comparison\n\treturn value === comparison ? { match: value, pattern: comparison, substring: value } : false;\n}\n","'use strict';\n\nconst matchesStringOrRegExp = require('./matchesStringOrRegExp');\n\n/**\n * Check if an options object's propertyName contains a user-defined string or\n * regex that matches the passed in input.\n *\n * @param {{ [x: string]: any; }} options\n * @param {string} propertyName\n * @param {unknown} input\n *\n * @returns {boolean}\n */\nmodule.exports = function optionsMatches(options, propertyName, input) {\n\treturn Boolean(\n\t\toptions &&\n\t\t\toptions[propertyName] &&\n\t\t\ttypeof input === 'string' &&\n\t\t\tmatchesStringOrRegExp(input, options[propertyName]),\n\t);\n};\n","'use strict';\n\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\nmodule.exports = function report(problem) {\n\tconst { ruleName, result, message, line, node, index, endIndex, word } = problem;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\tconst { start } = (node && node.rangeBy({ index, endIndex })) || {};\n\n\t// If a line is not passed, use the node.rangeBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || (start && start.line);\n\n\tif (!startLine) {\n\t\tthrow new Error('You must pass either a node or a line number');\n\t}\n\n\tconst { ignoreDisables } = result.stylelint.config || {};\n\n\tif (result.stylelint.disabledRanges) {\n\t\tconst ranges =\n\t\t\tresult.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the problem is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\t// Collect disabled warnings\n\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\tconst disabledWarnings =\n\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\trule: ruleName,\n\t\t\t\t\tline: startLine,\n\t\t\t\t});\n\n\t\t\t\tif (!ignoreDisables) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\t/** @type {import('stylelint').WarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (problem.start) {\n\t\twarningProperties.start = problem.start;\n\t} else if (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (problem.end) {\n\t\twarningProperties.end = problem.end;\n\t} else if (endIndex) {\n\t\twarningProperties.endIndex = endIndex;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst warningMessage =\n\t\t(result.stylelint.customMessages && result.stylelint.customMessages[ruleName]) || message;\n\n\tresult.warn(warningMessage, warningProperties);\n};\n","'use strict';\n\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\nfunction ruleMessages(ruleName, messages) {\n\t/** @typedef {keyof T} K */\n\tconst newMessages = /** @type {R} */ ({});\n\n\tfor (const [messageId, messageText] of /** @type {[K, T[K]][]} */ (Object.entries(messages))) {\n\t\tif (typeof messageText === 'string') {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (`${messageText} (${ruleName})`);\n\t\t} else {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (\n\t\t\t\t(...args) => `${messageText(...args)} (${ruleName})`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn newMessages;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.ruleMessages} */ (ruleMessages);\n","'use strict';\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/**\n * @param {Declaration} decl\n * @param {string} value\n * @returns {Declaration} The declaration that was passed in.\n */\nmodule.exports = function setDeclarationValue(decl, value) {\n\tconst raws = decl.raws;\n\n\tif (raws.value) {\n\t\traws.value.raw = value;\n\t} else {\n\t\tdecl.value = value;\n\t}\n\n\treturn decl;\n};\n","'use strict';\n\n/**\n * Tests if two arrays are equal.\n *\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nmodule.exports = function arrayEqual(a, b) {\n\tif (!Array.isArray(a) || !Array.isArray(b)) return false;\n\n\tif (a.length !== b.length) return false;\n\n\treturn a.every((elem, index) => elem === b[index]);\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","'use strict';\n\nconst { isPlainObject: _isPlainObject } = require('is-plain-object');\n\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\nfunction isBoolean(value) {\n\treturn typeof value === 'boolean' || value instanceof Boolean;\n}\n\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\nfunction isFunction(value) {\n\treturn typeof value === 'function' || value instanceof Function;\n}\n\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\nfunction isNullish(value) {\n\treturn value == null;\n}\n\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\nfunction isNumber(value) {\n\treturn typeof value === 'number' || value instanceof Number;\n}\n\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\nfunction isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\nfunction isString(value) {\n\treturn typeof value === 'string' || value instanceof String;\n}\n\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\nfunction isPlainObject(value) {\n\treturn _isPlainObject(value);\n}\n\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\nfunction assert(value, message = undefined) {\n\tif (message) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value, message);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value);\n\t}\n}\n\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\nfunction assertFunction(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\nfunction assertNumber(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\nfunction assertString(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n\tisBoolean,\n\tisFunction,\n\tisNullish,\n\tisNumber,\n\tisRegExp,\n\tisString,\n\tisPlainObject,\n\n\tassert,\n\tassertFunction,\n\tassertNumber,\n\tassertString,\n};\n","'use strict';\n\nconst arrayEqual = require('./arrayEqual');\nconst { isPlainObject } = require('./validateTypes');\n\nconst IGNORED_OPTIONS = new Set(['severity', 'message', 'reportDisables', 'disableFix']);\n\n/** @typedef {import('stylelint').RuleOptions} RuleOptions */\n/** @typedef {import('stylelint').RuleOptionsPossible} Possible */\n/** @typedef {import('stylelint').RuleOptionsPossibleFunc} PossibleFunc */\n\n/**\n * Validate a rule's options.\n *\n * See existing rules for examples.\n *\n * @param {import('stylelint').PostcssResult} result - postcss result\n * @param {string} ruleName\n * @param {...RuleOptions} optionDescriptions - Each optionDescription can\n *   have the following properties:\n *   - `actual` (required): the actual passed option value or object.\n *   - `possible` (required): a schema representation of what values are\n *      valid for those options. `possible` should be an object if the\n *      options are an object, with corresponding keys; if the options are not an\n *      object, `possible` isn't, either. All `possible` value representations\n *      should be **arrays of either values or functions**. Values are === checked\n *      against `actual`. Functions are fed `actual` as an argument and their\n *      return value is interpreted: truthy = valid, falsy = invalid.\n *    - `optional` (optional): If this is `true`, `actual` can be undefined.\n * @return {boolean} Whether or not the options are valid (true = valid)\n */\nfunction validateOptions(result, ruleName, ...optionDescriptions) {\n\tlet noErrors = true;\n\n\tfor (const optionDescription of optionDescriptions) {\n\t\tvalidate(optionDescription, ruleName, complain);\n\t}\n\n\t/**\n\t * @param {string} message\n\t */\n\tfunction complain(message) {\n\t\tnoErrors = false;\n\t\tresult.warn(message, {\n\t\t\tstylelintType: 'invalidOption',\n\t\t});\n\t\tresult.stylelint = result.stylelint || {\n\t\t\tdisabledRanges: {},\n\t\t\truleSeverities: {},\n\t\t\tcustomMessages: {},\n\t\t\truleMetadata: {},\n\t\t};\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\treturn noErrors;\n}\n\n/**\n * @param {RuleOptions} opts\n * @param {string} ruleName\n * @param {(message: string) => void} complain\n */\nfunction validate(opts, ruleName, complain) {\n\tconst possible = opts.possible;\n\tconst actual = opts.actual;\n\tconst optional = opts.optional;\n\n\tif (actual === null || arrayEqual(actual, [null])) {\n\t\treturn;\n\t}\n\n\tconst nothingPossible =\n\t\tpossible === undefined || (Array.isArray(possible) && possible.length === 0);\n\n\tif (nothingPossible && actual === true) {\n\t\treturn;\n\t}\n\n\tif (actual === undefined) {\n\t\tif (nothingPossible || optional) {\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Expected option value for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (nothingPossible) {\n\t\tif (optional) {\n\t\t\tcomplain(\n\t\t\t\t`Incorrect configuration for rule \"${ruleName}\". Rule should have \"possible\" values for options validation`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Unexpected option value ${stringify(actual)} for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (typeof possible === 'function') {\n\t\tif (!possible(actual)) {\n\t\t\tcomplain(`Invalid option ${stringify(actual)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If `possible` is an array instead of an object ...\n\tif (Array.isArray(possible)) {\n\t\tfor (const a of [actual].flat()) {\n\t\t\tif (isValid(possible, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid option value ${stringify(a)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If actual is NOT an object ...\n\tif (!isPlainObject(actual) || typeof actual !== 'object' || actual == null) {\n\t\tcomplain(\n\t\t\t`Invalid option value ${stringify(actual)} for rule \"${ruleName}\": should be an object`,\n\t\t);\n\n\t\treturn;\n\t}\n\n\tfor (const [optionName, optionValue] of Object.entries(actual)) {\n\t\tif (IGNORED_OPTIONS.has(optionName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst possibleValue = possible && possible[optionName];\n\n\t\tif (!possibleValue) {\n\t\t\tcomplain(`Invalid option name \"${optionName}\" for rule \"${ruleName}\"`);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const a of [optionValue].flat()) {\n\t\t\tif (isValid(possibleValue, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid value ${stringify(a)} for option \"${optionName}\" of rule \"${ruleName}\"`);\n\t\t}\n\t}\n}\n\n/**\n * @param {Possible | Possible[]} possible\n * @param {unknown} actual\n * @returns {boolean}\n */\nfunction isValid(possible, actual) {\n\tfor (const possibility of [possible].flat()) {\n\t\tif (typeof possibility === 'function' && possibility(actual)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (actual === possibility) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nfunction stringify(value) {\n\tif (typeof value === 'string') {\n\t\treturn `\"${value}\"`;\n\t}\n\n\treturn `\"${JSON.stringify(value)}\"`;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.validateOptions} */ (validateOptions);\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'alpha-value-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/alpha-value-notation',\n};\n\nconst ALPHA_PROPS = new Set(['opacity', 'shape-image-threshold']);\nconst ALPHA_FUNCS = new Set(['hsl', 'hsla', 'hwb', 'lab', 'lch', 'rgb', 'rgba']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['number', 'percentage'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texceptProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tnumber: {\n\t\t\t\texpFunc: isNumber,\n\t\t\t\tfixFunc: asNumber,\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: isPercentage,\n\t\t\t\tfixFunc: asPercentage,\n\t\t\t},\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\t/** @type {import('postcss-value-parser').Node | undefined} */\n\t\t\t\tlet alpha;\n\n\t\t\t\tif (ALPHA_PROPS.has(decl.prop.toLowerCase())) {\n\t\t\t\t\talpha = findAlphaInValue(node);\n\t\t\t\t} else {\n\t\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\t\tif (!ALPHA_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\t\talpha = findAlphaInFunction(node);\n\t\t\t\t}\n\n\t\t\t\tif (!alpha) return;\n\n\t\t\t\tconst { value } = alpha;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isNumber(value) && !isPercentage(value)) return;\n\n\t\t\t\t/** @type {'number' | 'percentage'} */\n\t\t\t\tlet expectation = primary;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'exceptProperties', decl.prop)) {\n\t\t\t\t\tif (expectation === 'number') {\n\t\t\t\t\t\texpectation = 'percentage';\n\t\t\t\t\t} else if (expectation === 'percentage') {\n\t\t\t\t\t\texpectation = 'number';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (optionFuncs[expectation].expFunc(value)) return;\n\n\t\t\t\tconst fixed = optionFuncs[expectation].fixFunc(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\talpha.value = String(fixed);\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + alpha.sourceIndex;\n\t\t\t\tconst endIndex = index + alpha.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asPercentage(value) {\n\tconst number = Number(value);\n\n\treturn `${Number((number * 100).toPrecision(3))}%`;\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tassert(dimension);\n\n\tconst number = Number(dimension.number);\n\n\treturn Number((number / 100).toPrecision(3)).toString();\n}\n\n/**\n * @template {import('postcss-value-parser').Node} T\n * @param {T} node\n * @returns {T | undefined}\n */\nfunction findAlphaInValue(node) {\n\treturn node.type === 'word' || node.type === 'function' ? node : undefined;\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {import('postcss-value-parser').Node | undefined}\n */\nfunction findAlphaInFunction(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\n\tif (args.length === 4) return args[3];\n\n\tconst slashNodeIndex = node.nodes.findIndex(({ type, value }) => type === 'div' && value === '/');\n\n\tif (slashNodeIndex !== -1) {\n\t\tconst nodesAfterSlash = node.nodes.slice(slashNodeIndex + 1, node.nodes.length);\n\n\t\treturn nodesAfterSlash.find(({ type }) => type === 'word');\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isPercentage(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '%';\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line before a node. Mutates the node.\n *\n * @template {import('postcss').ChildNode} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineBefore(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.before !== 'string') {\n\t\treturn node;\n\t}\n\n\traws.before = !/\\r?\\n/.test(raws.before)\n\t\t? newline.repeat(2) + raws.before\n\t\t: raws.before.replace(/(\\r?\\n)/, `${newline}$1`);\n\n\treturn node;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node} node\n */\nfunction getNodeLine(node) {\n\treturn node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | undefined} node\n * @returns {Node | undefined}\n */\nmodule.exports = function getPreviousNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn previousNode;\n\t}\n\n\tif (getNodeLine(node) === getNodeLine(previousNode)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\tconst previousNode2 = previousNode.prev();\n\n\tif (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\treturn previousNode;\n};\n","'use strict';\n\n/**\n * Check if a string contains at least one empty line\n *\n * @param {string | undefined} string\n * @returns {boolean}\n */\nmodule.exports = function (string) {\n\tif (string === '' || string === undefined) return false;\n\n\treturn /\\n[\\r\\t ]*\\n/.test(string);\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node | void} node\n */\nfunction getNodeLine(node) {\n\treturn node && node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | void} node\n * @returns {Node | void}\n */\nmodule.exports = function getNextNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/** @type {Node | void} */\n\tconst nextNode = node.next();\n\n\tif (!nextNode || nextNode.type !== 'comment') {\n\t\treturn nextNode;\n\t}\n\n\tif (\n\t\tgetNodeLine(node) === getNodeLine(nextNode) ||\n\t\tgetNodeLine(nextNode) === getNodeLine(nextNode.next())\n\t) {\n\t\treturn getNextNonSharedLineCommentNode(nextNode);\n\t}\n\n\treturn nextNode;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n/** @typedef {import('postcss').Node} NodeSource */\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Root}\n */\nmodule.exports.isRoot = function isRoot(node) {\n\treturn node.type === 'root';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Rule}\n */\nmodule.exports.isRule = function isRule(node) {\n\treturn node.type === 'rule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').AtRule}\n */\nmodule.exports.isAtRule = function isAtRule(node) {\n\treturn node.type === 'atrule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Comment}\n */\nmodule.exports.isComment = function isComment(node) {\n\treturn node.type === 'comment';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Declaration}\n */\nmodule.exports.isDeclaration = function isDeclaration(node) {\n\treturn node.type === 'decl';\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').FunctionNode}\n */\nmodule.exports.isValueFunction = function isValueFunction(node) {\n\treturn node.type === 'function';\n};\n\n/**\n * @param {Node} node\n * @returns {node is (Node & {source: NodeSource})}\n */\nmodule.exports.hasSource = function hasSource(node) {\n\treturn Boolean(node.source);\n};\n","'use strict';\n\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst { isRoot, isComment } = require('./typeGuards');\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\tconst aLine = a && a.source && a.source.end && a.source.end.line;\n\tconst bLine = b && b.source && b.source.start && b.source.start.line;\n\n\treturn aLine === bLine;\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nmodule.exports = function isSharedLineComment(node) {\n\tif (!isComment(node)) {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\t!isRoot(parentNode) &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function (node) {\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\treturn !isSharedLineComment(previousNode);\n};\n","'use strict';\n\n/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @return {boolean} True if `statement` has a block (empty or otherwise)\n */\nmodule.exports = function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst hasBlock = require('./hasBlock');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function (atRule) {\n\tif (atRule.type !== 'atrule') {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode === undefined) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(previousNode) && !hasBlock(previousNode) && !hasBlock(atRule);\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('./isBlocklessAtRuleAfterBlocklessAtRule');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function (atRule) {\n\tif (!isBlocklessAtRuleAfterBlocklessAtRule(atRule)) {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode && isAtRule(previousNode)) {\n\t\treturn previousNode.name === atRule.name;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst { isComment, hasSource } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} statement\n * @returns {boolean}\n */\nmodule.exports = function (statement) {\n\tconst parentNode = statement.parent;\n\n\tif (parentNode === undefined || parentNode.type === 'root') {\n\t\treturn false;\n\t}\n\n\tif (statement === parentNode.first) {\n\t\treturn true;\n\t}\n\n\t/*\n\t * Search for the statement in the parent's nodes, ignoring comment\n\t * nodes on the same line as the parent's opening brace.\n\t */\n\n\tconst parentNodes = parentNode.nodes;\n\n\tif (!parentNodes) {\n\t\treturn false;\n\t}\n\n\tconst firstNode = parentNodes[0];\n\n\tif (!firstNode) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!isComment(firstNode) ||\n\t\t(typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\\n'))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (!hasSource(firstNode) || !firstNode.source.start) {\n\t\treturn false;\n\t}\n\n\tconst openingBraceLine = firstNode.source.start.line;\n\n\tif (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, node] of parentNodes.entries()) {\n\t\tif (index === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === statement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t!isComment(node) ||\n\t\t\t(hasSource(node) && node.source.end && node.source.end.line !== openingBraceLine)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* istanbul ignore next: Should always return in the loop */\n\treturn false;\n};\n","'use strict';\n\nconst { isRoot } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nmodule.exports = function (node) {\n\tif (isRoot(node)) return false;\n\n\tconst parentNode = node.parent;\n\n\tif (!parentNode) {\n\t\treturn false;\n\t}\n\n\treturn isRoot(parentNode) && node === parentNode.first;\n};\n","'use strict';\n\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\nmodule.exports = function (atRule) {\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesBefore(node, newline) {\n\tnode.raws.before = node.raws.before ? node.raws.before.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterBlocklessAtRule');\nconst isBlocklessAtRuleAfterSameNameBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before at-rule',\n\trejected: 'Unexpected empty line before at-rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-same-name',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t],\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'always' | 'never'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst isNested = atRule.parent && atRule.parent.type !== 'root';\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\t// and following another blockless at-rule with the same name\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-same-name-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(atRule.raws.before);\n\t\t\tlet expectEmptyLineBefore = expectation === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-same-name') &&\n\t\t\t\t\tisAtRuleAfterSameNameAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-same-name-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix && context.newline) {\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(atRule, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(atRule, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: atRule, result, ruleName });\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').AtRule} atRule\n */\nfunction isAtRuleAfterSameNameAtRule(atRule) {\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\t// @ts-expect-error -- TS2339: Property 'name' does not exist on type 'Node'.\n\treturn previousNode && previousNode.type === 'atrule' && previousNode.name === atRule.name;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Contains helpers for working with vendor prefixes.\n *\n * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2\n *\n * @namespace vendor\n */\nmodule.exports = {\n\t/**\n\t * Returns the vendor prefix extracted from an input string.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} vendor prefix or empty string\n\t *\n\t * @example\n\t * vendor.prefix('-moz-tab-size') //=> '-moz-'\n\t * vendor.prefix('tab-size')      //=> ''\n\t */\n\tprefix(prop) {\n\t\tconst match = prop.match(/^(-\\w+-)/);\n\n\t\tif (match) {\n\t\t\treturn match[0] || '';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\t/**\n\t * Returns the input string stripped of its vendor prefix.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} String name without vendor prefixes.\n\t *\n\t * @example\n\t * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n\t */\n\tunprefixed(prop) {\n\t\treturn prop.replace(/^-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${atRule.name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../utils/isStandardSyntaxAtRule');\nconst report = require('../utils/report');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void, errTarget: string }) => void,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule) => void) | null,\n * }} options\n */\nmodule.exports = function atRuleNameSpaceChecker(options) {\n\toptions.root.walkAtRules((atRule) => {\n\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckColon(\n\t\t\t`@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`,\n\t\t\tatRule.name.length,\n\t\t\tatRule,\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\toptions.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (m) => {\n\t\t\t\tif (options.fix) {\n\t\t\t\t\toptions.fix(node);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: m,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: options.result,\n\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t\terrTarget: `@${node.name}`,\n\t\t});\n\t}\n};\n","'use strict';\n\n/** @typedef {import('stylelint').ConfigurationError} ConfigurationError */\n\n/**\n * Create configurationError from text and set CLI exit code\n * @param {string} text\n * @returns {ConfigurationError}\n */\nmodule.exports = function (text) {\n\tconst err = /** @type {ConfigurationError} */ (new Error(text));\n\n\terr.code = 78;\n\n\treturn err;\n};\n","'use strict';\n\n/**\n * Check if a string is a single line (i.e. does not contain\n * any newline characters).\n *\n * @param {string} input\n * @return {boolean}\n */\nmodule.exports = function (input) {\n\treturn !/[\\n\\r]/.test(input);\n};\n","'use strict';\n\n/**\n * Check if a character is whitespace.\n *\n * @param {string} char\n * @returns {boolean}\n */\nmodule.exports = function (char) {\n\treturn [' ', '\\n', '\\t', '\\r', '\\f'].includes(char);\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst isSingleLineString = require('./isSingleLineString');\nconst isWhitespace = require('./isWhitespace');\nconst { assertFunction, isNullish } = require('./validateTypes');\n\n/**\n * @typedef {(message: string) => string} MessageFunction\n */\n\n/**\n * @typedef {Object} Messages\n * @property {MessageFunction} [expectedBefore]\n * @property {MessageFunction} [rejectedBefore]\n * @property {MessageFunction} [expectedAfter]\n * @property {MessageFunction} [rejectedAfter]\n * @property {MessageFunction} [expectedBeforeSingleLine]\n * @property {MessageFunction} [rejectedBeforeSingleLine]\n * @property {MessageFunction} [expectedBeforeMultiLine]\n * @property {MessageFunction} [rejectedBeforeMultiLine]\n * @property {MessageFunction} [expectedAfterSingleLine]\n * @property {MessageFunction} [rejectedAfterSingleLine]\n * @property {MessageFunction} [expectedAfterMultiLine]\n * @property {MessageFunction} [rejectedAfterMultiLine]\n */\n\n/**\n * @typedef {Object} WhitespaceCheckerArgs\n * @property {string} source - The source string\n * @property {number} index - The index of the character to check before\n * @property {(message: string) => void} err - If a problem is found, this callback\n *   will be invoked with the relevant warning message.\n *   Typically this callback will report() the problem.\n * @property {string} [errTarget] - If a problem is found, this string\n *   will be sent to the relevant warning message.\n * @property {string} [lineCheckStr] - Single- and multi-line checkers\n *   will use this string to determine whether they should proceed,\n *   i.e. if this string is one line only, single-line checkers will check,\n *   multi-line checkers will ignore.\n *   If none is passed, they will use `source`.\n * @property {boolean} [onlyOneChar=false] - Only check *one* character before.\n *   By default, \"always-*\" checks will look for the `targetWhitespace` one\n *   before and then ensure there is no whitespace two before. This option\n *   bypasses that second check.\n * @property {boolean} [allowIndentation=false] - Allow arbitrary indentation\n *   between the `targetWhitespace` (almost definitely a newline) and the `index`.\n *   With this option, the checker will see if a newline *begins* the whitespace before\n *   the `index`.\n */\n\n/**\n * @typedef {(args: WhitespaceCheckerArgs) => void} WhitespaceChecker\n */\n\n/**\n * @typedef {{\n *   before: WhitespaceChecker,\n *   beforeAllowingIndentation: WhitespaceChecker,\n *   after: WhitespaceChecker,\n *   afterOneOnly: WhitespaceChecker,\n * }} WhitespaceCheckers\n */\n\n/**\n * Create a whitespaceChecker, which exposes the following functions:\n * - `before()`\n * - `beforeAllowingIndentation()`\n * - `after()`\n * - `afterOneOnly()`\n *\n * @param {\"space\" | \"newline\"} targetWhitespace - This is a keyword instead\n *   of the actual character (e.g. \" \") in order to accommodate\n *   different styles of newline (\"\\n\" vs \"\\r\\n\")\n * @param {\"always\" | \"never\" | \"always-single-line\" | \"always-multi-line\" | \"never-single-line\" | \"never-multi-line\"} expectation\n * @param {Messages} messages - An object of message functions;\n *   calling `before*()` or `after*()` and the `expectation` that is passed\n *   determines which message functions are required\n *\n * @returns {WhitespaceCheckers} The checker, with its exposed checking functions\n */\nmodule.exports = function whitespaceChecker(targetWhitespace, expectation, messages) {\n\t// Keep track of active arguments in order to avoid passing\n\t// too much stuff around, making signatures long and confusing.\n\t// This variable gets reset anytime a checking function is called.\n\t/** @type {WhitespaceCheckerArgs} */\n\tlet activeArgs;\n\n\t/**\n\t * Check for whitespace *before* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction before({\n\t\tsource,\n\t\tindex,\n\t\terr,\n\t\terrTarget,\n\t\tlineCheckStr,\n\t\tonlyOneChar = false,\n\t\tallowIndentation = false,\n\t}) {\n\t\tactiveArgs = {\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr,\n\t\t\terrTarget,\n\t\t\tonlyOneChar,\n\t\t\tallowIndentation,\n\t\t};\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * Check for whitespace *after* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction after({ source, index, err, errTarget, lineCheckStr, onlyOneChar = false }) {\n\t\tactiveArgs = { source, index, err, errTarget, onlyOneChar };\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction beforeAllowingIndentation(obj) {\n\t\tbefore({ ...obj, allowIndentation: true });\n\t}\n\n\tfunction expectBefore(messageFunc = messages.expectedBefore) {\n\t\tif (activeArgs.allowIndentation) {\n\t\t\texpectBeforeAllowingIndentation(messageFunc);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst _activeArgs = activeArgs;\n\t\tconst source = _activeArgs.source;\n\t\tconst index = _activeArgs.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\t\tconst twoCharsBefore = source[index - 2];\n\n\t\tif (isNullish(oneCharBefore)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharBefore === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsBefore) || !isWhitespace(twoCharsBefore))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction expectBeforeAllowingIndentation(messageFunc = messages.expectedBefore) {\n\t\tconst _activeArgs2 = activeArgs;\n\t\tconst source = _activeArgs2.source;\n\t\tconst index = _activeArgs2.index;\n\t\tconst err = _activeArgs2.err;\n\n\t\tconst expectedChar = targetWhitespace === 'newline' ? '\\n' : undefined;\n\t\tlet i = index - 1;\n\n\t\twhile (source[i] !== expectedChar) {\n\t\t\tif (source[i] === '\\t' || source[i] === ' ') {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tassertFunction(messageFunc);\n\t\t\terr(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction rejectBefore(messageFunc = messages.rejectedBefore) {\n\t\tconst _activeArgs3 = activeArgs;\n\t\tconst source = _activeArgs3.source;\n\t\tconst index = _activeArgs3.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\n\t\tif (!isNullish(oneCharBefore) && isWhitespace(oneCharBefore)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction afterOneOnly(obj) {\n\t\tafter({ ...obj, onlyOneChar: true });\n\t}\n\n\tfunction expectAfter(messageFunc = messages.expectedAfter) {\n\t\tconst _activeArgs4 = activeArgs;\n\t\tconst source = _activeArgs4.source;\n\t\tconst index = _activeArgs4.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\t\tconst twoCharsAfter = source[index + 2];\n\t\tconst threeCharsAfter = source[index + 3];\n\n\t\tif (isNullish(oneCharAfter)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (targetWhitespace === 'newline') {\n\t\t\t// If index is followed by a Windows CR-LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\r' &&\n\t\t\t\ttwoCharsAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(threeCharsAfter) || !isWhitespace(threeCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If index is followed by a Unix LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharAfter === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction rejectAfter(messageFunc = messages.rejectedAfter) {\n\t\tconst _activeArgs5 = activeArgs;\n\t\tconst source = _activeArgs5.source;\n\t\tconst index = _activeArgs5.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\n\t\tif (!isNullish(oneCharAfter) && isWhitespace(oneCharAfter)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\treturn {\n\t\tbefore,\n\t\tbeforeAllowingIndentation,\n\t\tafter,\n\t\tafterOneOnly,\n\t};\n};\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected newline after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'lower' | 'upper'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tconst expectedName = expectation === 'lower' ? name.toLowerCase() : name.toUpperCase();\n\n\t\t\tif (name === expectedName) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = expectedName;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(name, expectedName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected single space after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule) => {\n\t\t\t\t\t\tif (typeof atRule.raws.afterName === 'string') {\n\t\t\t\t\t\t\tatRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Stringify PostCSS node including its raw \"before\" string.\n *\n * @param {import('postcss').Node} node\n *\n * @returns {string}\n */\nmodule.exports = function (node) {\n\tlet result = '';\n\n\tif (node.raws.before) {\n\t\tresult += node.raws.before;\n\t}\n\n\tresult += node.toString();\n\n\treturn result;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeString = rawNodeString(atRule);\n\n\t\t\tchecker.before({\n\t\t\t\tsource: nodeString,\n\t\t\t\tindex: nodeString.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: nodeString.length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst vendor = require('./vendor');\n\n/**\n * Extract each list using the internal API of Autoprefixer 10.2.5.\n *\n * @see https://github.com/postcss/autoprefixer/tree/10.2.5\n *\n * @example\n * const autoprefixer = require('autoprefixer');\n * const Browsers = require('autoprefixer/lib/browsers');\n * const Prefixes = require('autoprefixer/lib/prefixes');\n * const utils = require('autoprefixer/lib/utils');\n *\n * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));\n */\n\n/**\n * @example\n * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));\n */\nconst AT_RULES = new Set([\n\t'@-khtml-keyframes',\n\t'@-moz-keyframes',\n\t'@-ms-keyframes',\n\t'@-ms-viewport',\n\t'@-o-keyframes',\n\t'@-o-viewport',\n\t'@-webkit-keyframes',\n\t'@resolution',\n]);\n\n/**\n * @example\n * prefixes.remove.selectors.map((s) => s.prefixed);\n */\nconst SELECTORS = new Set([\n\t':-moz-any-link',\n\t':-moz-full-screen',\n\t':-moz-placeholder',\n\t':-moz-placeholder-shown',\n\t':-moz-read-only',\n\t':-moz-read-write',\n\t':-ms-fullscreen',\n\t':-ms-input-placeholder',\n\t':-webkit-any-link',\n\t':-webkit-full-screen',\n\t'::-moz-placeholder',\n\t'::-moz-selection',\n\t'::-ms-input-placeholder',\n\t'::-webkit-backdrop',\n\t'::-webkit-input-placeholder',\n]);\n\n/**\n * @example\n * Object.entries(autoprefixer.data.prefixes)\n *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))\n *   .map(([key, value]) => key);\n */\nconst PROPERTIES = new Set([\n\t'align-content',\n\t'align-items',\n\t'align-self',\n\t'animation',\n\t'animation-delay',\n\t'animation-direction',\n\t'animation-duration',\n\t'animation-fill-mode',\n\t'animation-iteration-count',\n\t'animation-name',\n\t'animation-play-state',\n\t'animation-timing-function',\n\t'appearance',\n\t'backdrop-filter',\n\t'backface-visibility',\n\t'background-clip',\n\t'background-origin',\n\t'background-size',\n\t'border-block-end',\n\t'border-block-start',\n\t'border-bottom-left-radius',\n\t'border-bottom-right-radius',\n\t'border-image',\n\t'border-inline-end',\n\t'border-inline-start',\n\t'border-radius',\n\t'border-top-left-radius',\n\t'border-top-right-radius',\n\t'box-decoration-break',\n\t'box-shadow',\n\t'box-sizing',\n\t'break-after',\n\t'break-before',\n\t'break-inside',\n\t'clip-path',\n\t'color-adjust',\n\t'column-count',\n\t'column-fill',\n\t'column-gap',\n\t'column-rule',\n\t'column-rule-color',\n\t'column-rule-style',\n\t'column-rule-width',\n\t'column-span',\n\t'column-width',\n\t'columns',\n\t'filter',\n\t'flex',\n\t'flex-basis',\n\t'flex-direction',\n\t'flex-flow',\n\t'flex-grow',\n\t'flex-shrink',\n\t'flex-wrap',\n\t'flow-from',\n\t'flow-into',\n\t'font-feature-settings',\n\t'font-kerning',\n\t'font-language-override',\n\t'font-variant-ligatures',\n\t'grid-area',\n\t'grid-column',\n\t'grid-column-align',\n\t'grid-column-end',\n\t'grid-column-start',\n\t'grid-row',\n\t'grid-row-align',\n\t'grid-row-end',\n\t'grid-row-start',\n\t'grid-template',\n\t'grid-template-areas',\n\t'grid-template-columns',\n\t'grid-template-rows',\n\t'hyphens',\n\t'image-rendering',\n\t'justify-content',\n\t'margin-block-end',\n\t'margin-block-start',\n\t'margin-inline-end',\n\t'margin-inline-start',\n\t'mask',\n\t'mask-border',\n\t'mask-border-outset',\n\t'mask-border-repeat',\n\t'mask-border-slice',\n\t'mask-border-source',\n\t'mask-border-width',\n\t'mask-clip',\n\t'mask-composite',\n\t'mask-image',\n\t'mask-origin',\n\t'mask-position',\n\t'mask-repeat',\n\t'mask-size',\n\t'object-fit',\n\t'object-position',\n\t'order',\n\t'overscroll-behavior',\n\t'padding-block-end',\n\t'padding-block-start',\n\t'padding-inline-end',\n\t'padding-inline-start',\n\t'perspective',\n\t'perspective-origin',\n\t'place-self',\n\t'region-fragment',\n\t'scroll-snap-coordinate',\n\t'scroll-snap-destination',\n\t'scroll-snap-points-x',\n\t'scroll-snap-points-y',\n\t'scroll-snap-type',\n\t'shape-image-threshold',\n\t'shape-margin',\n\t'shape-outside',\n\t'tab-size',\n\t'text-align-last',\n\t'text-decoration',\n\t'text-decoration-color',\n\t'text-decoration-line',\n\t'text-decoration-skip',\n\t'text-decoration-skip-ink',\n\t'text-decoration-style',\n\t'text-emphasis',\n\t'text-emphasis-color',\n\t'text-emphasis-position',\n\t'text-emphasis-style',\n\t'text-orientation',\n\t'text-overflow',\n\t'text-size-adjust',\n\t'text-spacing',\n\t'touch-action',\n\t'transform',\n\t'transform-origin',\n\t'transform-style',\n\t'transition',\n\t'transition-delay',\n\t'transition-duration',\n\t'transition-property',\n\t'transition-timing-function',\n\t'user-select',\n\t'writing-mode',\n]);\n\n/**\n * @example\n * Object.values(prefixes.remove)\n *   .filter((p) => Array.isArray(p.values))\n *   .flatMap((p) => p.values)\n *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'\n *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only\n *\n * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013\n */\nconst PROPERTY_VALUES = new Set([\n\t'-moz-available',\n\t'-moz-box',\n\t'-moz-calc',\n\t'-moz-crisp-edges',\n\t'-moz-element',\n\t'-moz-fit-content',\n\t'-moz-grab',\n\t'-moz-grabbing',\n\t'-moz-inline-box',\n\t'-moz-isolate',\n\t'-moz-isolate-override',\n\t'-moz-linear-gradient',\n\t'-moz-max-content',\n\t'-moz-min-content',\n\t'-moz-plaintext',\n\t'-moz-radial-gradient',\n\t'-moz-repeating-linear-gradient',\n\t'-moz-repeating-radial-gradient',\n\t'-moz-zoom-in',\n\t'-moz-zoom-out',\n\t'-ms-flexbox',\n\t'-ms-grid',\n\t'-ms-inline-flexbox',\n\t'-ms-inline-grid',\n\t'-ms-linear-gradient',\n\t'-ms-radial-gradient',\n\t'-ms-repeating-linear-gradient',\n\t'-ms-repeating-radial-gradient',\n\t'-o-linear-gradient',\n\t'-o-pixelated',\n\t'-o-radial-gradient',\n\t'-o-repeating-linear-gradient',\n\t'-o-repeating-radial-gradient',\n\t'-webkit-box',\n\t'-webkit-calc',\n\t'-webkit-cross-fade',\n\t'-webkit-fill-available',\n\t'-webkit-filter',\n\t'-webkit-fit-content',\n\t'-webkit-flex',\n\t'-webkit-grab',\n\t'-webkit-grabbing',\n\t'-webkit-image-set',\n\t'-webkit-inline-box',\n\t'-webkit-inline-flex',\n\t'-webkit-isolate',\n\t'-webkit-linear-gradient',\n\t'-webkit-max-content',\n\t'-webkit-min-content',\n\t'-webkit-optimize-contrast',\n\t'-webkit-radial-gradient',\n\t'-webkit-repeating-linear-gradient',\n\t'-webkit-repeating-radial-gradient',\n\t'-webkit-sticky',\n\t'-webkit-zoom-in',\n\t'-webkit-zoom-out',\n]);\n\n/**\n * Most identifier types have to be looked up in a unique way,\n * so we're exposing special functions for each.\n */\nmodule.exports = {\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tatRuleName(identifier) {\n\t\treturn AT_RULES.has(`@${identifier.toLowerCase()}`);\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tselector(identifier) {\n\t\treturn SELECTORS.has(identifier.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tmediaFeatureName(identifier) {\n\t\treturn identifier.toLowerCase().includes('device-pixel-ratio');\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tproperty(identifier) {\n\t\tconst ident = identifier.toLowerCase();\n\n\t\t// HACK: `interpolation-mode` does not exist. This is an IE extension for `image-rendering`.\n\t\t//       See <https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#examples>\n\t\tif (ident === '-ms-interpolation-mode') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (vendor.prefix(ident).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn PROPERTIES.has(vendor.unprefixed(ident));\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {boolean}\n\t */\n\tpropertyValue(value) {\n\t\treturn PROPERTY_VALUES.has(value.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {string}\n\t */\n\tunprefix(value) {\n\t\treturn value.replace(/-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (p) => `Unexpected vendor-prefixed at-rule \"@${p}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!name.startsWith('-')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.atRuleName(name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = isAutoprefixable.unprefix(atRule.name);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function beforeBlockString(statement, { noRawBefore } = { noRawBefore: false }) {\n\tlet result = '';\n\n\tconst before = statement.raws.before || '';\n\n\tif (!noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (isRule(statement)) {\n\t\tresult += statement.selector;\n\t} else if (isAtRule(statement)) {\n\t\tresult += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;\n\t} else {\n\t\treturn '';\n\t}\n\n\tresult += statement.raws.between || '';\n\n\treturn result;\n};\n","'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\nconst hasBlock = require('./hasBlock');\nconst rawNodeString = require('./rawNodeString');\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`), returns an empty string.\n *\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function blockString(statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn '';\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-closing-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected newline after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected newline after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment x spaces after the brace\n\t\t\tconst nextNodeIsSingleLineComment =\n\t\t\t\tnextNode.type === 'comment' &&\n\t\t\t\t!/[^ ]/.test(nextNode.raws.before || '') &&\n\t\t\t\t!nextNode.toString().includes('\\n');\n\n\t\t\tconst nodeToCheck = nextNodeIsSingleLineComment ? nextNode.next() : nextNode;\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nodeToCheck);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\t// Only check one after, because there might be other\n\t\t\t// spaces handled by the indentation rule\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check if a statement has an empty block.\n *\n * @param {import('postcss').Rule | import('postcss').AtRule} statement - postcss rule or at-rule node\n * @return {boolean} True if the statement has a block and it is empty\n */\nmodule.exports = function (statement) {\n\treturn (\n\t\tstatement.nodes !== undefined && statement.nodes.length === 0 // has block\n\t); // and is empty\n};\n","'use strict';\n\nconst addEmptyLineAfter = require('../../utils/addEmptyLineAfter');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesAfter = require('../../utils/removeEmptyLinesAfter');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before closing brace',\n\trejected: 'Unexpected empty line before closing brace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always-multi-line', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['after-closing-brace'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get whitespace after \"\"}\", ignoring extra semicolon\n\t\t\tconst before = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\t// Calculate index\n\t\t\tconst statementString = statement.toString();\n\t\t\tlet index = statementString.length - 1;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// Set expectation\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tconst childNodeTypes = statement.nodes.map((item) => item.type);\n\n\t\t\t\t// Reverse the primary options if `after-closing-brace` is set\n\t\t\t\tif (\n\t\t\t\t\toptionsMatches(secondaryOptions, 'except', 'after-closing-brace') &&\n\t\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\t\t!childNodeTypes.includes('decl')\n\t\t\t\t) {\n\t\t\t\t\treturn primary === 'never';\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always-multi-line' && !isSingleLineString(blockString(statement));\n\t\t\t})();\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst { newline } = context;\n\n\t\t\t\tif (typeof newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineAfter(statement, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesAfter(statement, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tnode: statement,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineAfter(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.after !== 'string') {\n\t\treturn node;\n\t}\n\n\tconst spaces = raws.after.split(';');\n\tconst after = spaces[spaces.length - 1] || '';\n\n\tif (!/\\r?\\n/.test(after)) {\n\t\traws.after += newline.repeat(2);\n\t} else {\n\t\traws.after = raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n\t}\n\n\treturn node;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesAfter(node, newline) {\n\tnode.raws.after = node.raws.after ? node.raws.after.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: 'Expected newline before \"}\"',\n\texpectedBeforeMultiLine: 'Expected newline before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore extra semicolon\n\t\t\tconst after = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\tif (after === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockIsMultiLine = !isSingleLineString(blockString(statement));\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// We're really just checking whether a\n\t\t\t// newline *starts* the block's final space -- between\n\t\t\t// the last declaration and the closing brace. We can\n\t\t\t// ignore any other whitespace between them, because that\n\t\t\t// will be checked by the indentation rule.\n\t\t\tif (!after.startsWith('\\n') && !after.startsWith('\\r\\n')) {\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tcomplain(messages.expectedBefore);\n\t\t\t\t} else if (blockIsMultiLine && primary === 'always-multi-line') {\n\t\t\t\t\tcomplain(messages.expectedBeforeMultiLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (after !== '' && blockIsMultiLine && primary === 'never-multi-line') {\n\t\t\t\tcomplain(messages.rejectedBeforeMultiLine);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t */\n\t\t\tfunction complain(message) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst firstWhitespaceIndex = statementRaws.after.search(/\\s/);\n\t\t\t\t\t\tconst newlineBefore =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0\n\t\t\t\t\t\t\t\t? statementRaws.after.slice(0, firstWhitespaceIndex)\n\t\t\t\t\t\t\t\t: statementRaws.after;\n\t\t\t\t\t\tconst newlineAfter =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0 ? statementRaws.after.slice(firstWhitespaceIndex) : '';\n\t\t\t\t\t\tconst newlineIndex = newlineAfter.search(/\\r?\\n/);\n\n\t\t\t\t\t\tstatementRaws.after =\n\t\t\t\t\t\t\tnewlineIndex >= 0\n\t\t\t\t\t\t\t\t? newlineBefore + newlineAfter.slice(newlineIndex)\n\t\t\t\t\t\t\t\t: newlineBefore + context.newline + newlineAfter;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s/g, '');\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst htmlTags = require('html-tags');\n\nconst keywordSets = {};\n\nkeywordSets.nonLengthUnits = new Set([\n\t// Relative length units\n\t'%',\n\t// Time length units\n\t's',\n\t'ms',\n\t// Angle\n\t'deg',\n\t'grad',\n\t'turn',\n\t'rad',\n\t// Frequency\n\t'Hz',\n\t'kHz',\n\t// Resolution\n\t'dpi',\n\t'dpcm',\n\t'dppx',\n]);\n\nkeywordSets.lengthUnits = new Set([\n\t// Relative length units\n\t'em',\n\t'ex',\n\t'ch',\n\t'rem',\n\t'rlh',\n\t'lh',\n\t// Viewport-percentage lengths\n\t'dvh',\n\t'dvmax',\n\t'dvmin',\n\t'dvw',\n\t'lvh',\n\t'lvmax',\n\t'lvmin',\n\t'lvw',\n\t'svh',\n\t'svmax',\n\t'svmin',\n\t'svw',\n\t'vh',\n\t'vw',\n\t'vmin',\n\t'vmax',\n\t'vm',\n\t// Absolute length units\n\t'px',\n\t'mm',\n\t'cm',\n\t'in',\n\t'pt',\n\t'pc',\n\t'q',\n\t'mozmm',\n\t// Flexible length units\n\t'fr',\n]);\n\nkeywordSets.units = uniteSets(keywordSets.nonLengthUnits, keywordSets.lengthUnits);\n\nkeywordSets.camelCaseFunctionNames = new Set([\n\t'translateX',\n\t'translateY',\n\t'translateZ',\n\t'scaleX',\n\t'scaleY',\n\t'scaleZ',\n\t'rotateX',\n\t'rotateY',\n\t'rotateZ',\n\t'skewX',\n\t'skewY',\n]);\n\nkeywordSets.basicKeywords = new Set(['initial', 'inherit', 'revert', 'revert-layer', 'unset']);\n\nkeywordSets.systemFontValues = uniteSets(keywordSets.basicKeywords, [\n\t'caption',\n\t'icon',\n\t'menu',\n\t'message-box',\n\t'small-caption',\n\t'status-bar',\n]);\n\nkeywordSets.fontFamilyKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'serif',\n\t'sans-serif',\n\t'cursive',\n\t'fantasy',\n\t'monospace',\n\t'system-ui',\n\t'ui-serif',\n\t'ui-sans-serif',\n\t'ui-monospace',\n\t'ui-rounded',\n]);\n\nkeywordSets.fontWeightRelativeKeywords = new Set(['bolder', 'lighter']);\n\nkeywordSets.fontWeightAbsoluteKeywords = new Set(['bold']);\n\nkeywordSets.fontWeightNumericKeywords = new Set([\n\t'100',\n\t'200',\n\t'300',\n\t'400',\n\t'500',\n\t'600',\n\t'700',\n\t'800',\n\t'900',\n]);\n\nkeywordSets.fontWeightKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.fontWeightRelativeKeywords,\n\tkeywordSets.fontWeightAbsoluteKeywords,\n\tkeywordSets.fontWeightNumericKeywords,\n);\n\nkeywordSets.animationNameKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.animationTimingFunctionKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'linear',\n\t'ease',\n\t'ease-in',\n\t'ease-in-out',\n\t'ease-out',\n\t'step-start',\n\t'step-end',\n\t'steps',\n\t'cubic-bezier',\n]);\n\nkeywordSets.animationIterationCountKeywords = new Set(['infinite']);\n\nkeywordSets.animationDirectionKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'reverse',\n\t'alternate',\n\t'alternate-reverse',\n]);\n\nkeywordSets.animationFillModeKeywords = new Set(['none', 'forwards', 'backwards', 'both']);\n\nkeywordSets.animationPlayStateKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'running',\n\t'paused',\n]);\n\n// cf. https://developer.mozilla.org/en-US/docs/Web/CSS/animation\nkeywordSets.animationShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.animationNameKeywords,\n\tkeywordSets.animationTimingFunctionKeywords,\n\tkeywordSets.animationIterationCountKeywords,\n\tkeywordSets.animationDirectionKeywords,\n\tkeywordSets.animationFillModeKeywords,\n\tkeywordSets.animationPlayStateKeywords,\n);\n\n// These are the ones that can have single-colon notation\nkeywordSets.levelOneAndTwoPseudoElements = new Set([\n\t'before',\n\t'after',\n\t'first-line',\n\t'first-letter',\n]);\n\nkeywordSets.levelThreeAndUpPseudoElements = new Set([\n\t'before',\n\t'after',\n\t'first-line',\n\t'first-letter',\n\t// These are the ones that require double-colon notation\n\t'backdrop',\n\t'content',\n\t'cue',\n\t'file-selector-button',\n\t'grammar-error',\n\t'marker',\n\t'placeholder',\n\t'selection',\n\t'shadow',\n\t'slotted',\n\t'spelling-error',\n\t'target-text',\n]);\n\nkeywordSets.shadowTreePseudoElements = new Set(['part']);\n\nkeywordSets.webkitScrollbarPseudoElements = new Set([\n\t'-webkit-resizer',\n\t'-webkit-scrollbar',\n\t'-webkit-scrollbar-button',\n\t'-webkit-scrollbar-corner',\n\t'-webkit-scrollbar-thumb',\n\t'-webkit-scrollbar-track',\n\t'-webkit-scrollbar-track-piece',\n]);\n\nkeywordSets.vendorSpecificPseudoElements = new Set([\n\t'-moz-focus-inner',\n\t'-moz-focus-outer',\n\t'-moz-list-bullet',\n\t'-moz-meter-bar',\n\t'-moz-placeholder',\n\t'-moz-progress-bar',\n\t'-moz-range-progress',\n\t'-moz-range-thumb',\n\t'-moz-range-track',\n\t'-ms-browse',\n\t'-ms-check',\n\t'-ms-clear',\n\t'-ms-expand',\n\t'-ms-fill',\n\t'-ms-fill-lower',\n\t'-ms-fill-upper',\n\t'-ms-reveal',\n\t'-ms-thumb',\n\t'-ms-ticks-after',\n\t'-ms-ticks-before',\n\t'-ms-tooltip',\n\t'-ms-track',\n\t'-ms-value',\n\t'-webkit-color-swatch',\n\t'-webkit-color-swatch-wrapper',\n\t'-webkit-calendar-picker-indicator',\n\t'-webkit-clear-button',\n\t'-webkit-date-and-time-value',\n\t'-webkit-datetime-edit',\n\t'-webkit-datetime-edit-ampm-field',\n\t'-webkit-datetime-edit-day-field',\n\t'-webkit-datetime-edit-fields-wrapper',\n\t'-webkit-datetime-edit-hour-field',\n\t'-webkit-datetime-edit-millisecond-field',\n\t'-webkit-datetime-edit-minute-field',\n\t'-webkit-datetime-edit-month-field',\n\t'-webkit-datetime-edit-second-field',\n\t'-webkit-datetime-edit-text',\n\t'-webkit-datetime-edit-week-field',\n\t'-webkit-datetime-edit-year-field',\n\t'-webkit-details-marker',\n\t'-webkit-distributed',\n\t'-webkit-file-upload-button',\n\t'-webkit-input-placeholder',\n\t'-webkit-keygen-select',\n\t'-webkit-meter-bar',\n\t'-webkit-meter-even-less-good-value',\n\t'-webkit-meter-inner-element',\n\t'-webkit-meter-optimum-value',\n\t'-webkit-meter-suboptimum-value',\n\t'-webkit-progress-bar',\n\t'-webkit-progress-inner-element',\n\t'-webkit-progress-value',\n\t'-webkit-search-cancel-button',\n\t'-webkit-search-decoration',\n\t'-webkit-search-results-button',\n\t'-webkit-search-results-decoration',\n\t'-webkit-slider-runnable-track',\n\t'-webkit-slider-thumb',\n\t'-webkit-textfield-decoration-container',\n\t'-webkit-validation-bubble',\n\t'-webkit-validation-bubble-arrow',\n\t'-webkit-validation-bubble-arrow-clipper',\n\t'-webkit-validation-bubble-heading',\n\t'-webkit-validation-bubble-message',\n\t'-webkit-validation-bubble-text-block',\n\t...keywordSets.webkitScrollbarPseudoElements,\n]);\n\nkeywordSets.pseudoElements = uniteSets(\n\tkeywordSets.levelOneAndTwoPseudoElements,\n\tkeywordSets.levelThreeAndUpPseudoElements,\n\tkeywordSets.vendorSpecificPseudoElements,\n\tkeywordSets.shadowTreePseudoElements,\n);\n\nkeywordSets.aNPlusBNotationPseudoClasses = new Set([\n\t'nth-column',\n\t'nth-last-column',\n\t'nth-last-of-type',\n\t'nth-of-type',\n]);\n\nkeywordSets.linguisticPseudoClasses = new Set(['dir', 'lang']);\n\nkeywordSets.atRulePagePseudoClasses = new Set(['first', 'right', 'left', 'blank']);\n\nkeywordSets.logicalCombinationsPseudoClasses = new Set(['has', 'is', 'matches', 'not', 'where']);\n\nkeywordSets.aNPlusBOfSNotationPseudoClasses = new Set(['nth-child', 'nth-last-child']);\n\nkeywordSets.otherPseudoClasses = new Set([\n\t'active',\n\t'any-link',\n\t'autofill',\n\t'blank',\n\t'checked',\n\t'current',\n\t'default',\n\t'defined',\n\t'disabled',\n\t'empty',\n\t'enabled',\n\t'first-child',\n\t'first-of-type',\n\t'focus',\n\t'focus-within',\n\t'focus-visible',\n\t'fullscreen',\n\t'fullscreen-ancestor',\n\t'future',\n\t'host',\n\t'host-context',\n\t'hover',\n\t'indeterminate',\n\t'in-range',\n\t'invalid',\n\t'last-child',\n\t'last-of-type',\n\t'link',\n\t'only-child',\n\t'only-of-type',\n\t'optional',\n\t'out-of-range',\n\t'past',\n\t'placeholder-shown',\n\t'playing',\n\t'picture-in-picture',\n\t'paused',\n\t'read-only',\n\t'read-write',\n\t'required',\n\t'root',\n\t'scope',\n\t'state',\n\t'target',\n\t'unresolved',\n\t'user-invalid',\n\t'user-valid',\n\t'valid',\n\t'visited',\n\t'window-inactive', // for ::selection (chrome)\n]);\n\nkeywordSets.vendorSpecificPseudoClasses = new Set([\n\t'-khtml-drag',\n\t'-moz-any',\n\t'-moz-any-link',\n\t'-moz-broken',\n\t'-moz-drag-over',\n\t'-moz-first-node',\n\t'-moz-focusring',\n\t'-moz-full-screen',\n\t'-moz-full-screen-ancestor',\n\t'-moz-last-node',\n\t'-moz-loading',\n\t'-moz-meter-optimum',\n\t'-moz-meter-sub-optimum',\n\t'-moz-meter-sub-sub-optimum',\n\t'-moz-placeholder',\n\t'-moz-submit-invalid',\n\t'-moz-suppressed',\n\t'-moz-ui-invalid',\n\t'-moz-ui-valid',\n\t'-moz-user-disabled',\n\t'-moz-window-inactive',\n\t'-ms-fullscreen',\n\t'-ms-input-placeholder',\n\t'-webkit-drag',\n\t'-webkit-any',\n\t'-webkit-any-link',\n\t'-webkit-autofill',\n\t'-webkit-full-screen',\n\t'-webkit-full-screen-ancestor',\n]);\n\n// https://webkit.org/blog/363/styling-scrollbars/\nkeywordSets.webkitScrollbarPseudoClasses = new Set([\n\t'horizontal',\n\t'vertical',\n\t'decrement',\n\t'increment',\n\t'start',\n\t'end',\n\t'double-button',\n\t'single-button',\n\t'no-button',\n\t'corner-present',\n\t'window-inactive',\n]);\n\nkeywordSets.pseudoClasses = uniteSets(\n\tkeywordSets.aNPlusBNotationPseudoClasses,\n\tkeywordSets.linguisticPseudoClasses,\n\tkeywordSets.logicalCombinationsPseudoClasses,\n\tkeywordSets.aNPlusBOfSNotationPseudoClasses,\n\tkeywordSets.otherPseudoClasses,\n\tkeywordSets.vendorSpecificPseudoClasses,\n);\n\nkeywordSets.shorthandTimeProperties = new Set(['transition', 'animation']);\n\nkeywordSets.longhandTimeProperties = new Set([\n\t'transition-duration',\n\t'transition-delay',\n\t'animation-duration',\n\t'animation-delay',\n]);\n\nkeywordSets.timeProperties = uniteSets(\n\tkeywordSets.shorthandTimeProperties,\n\tkeywordSets.longhandTimeProperties,\n);\n\nkeywordSets.camelCaseKeywords = new Set([\n\t'optimizeSpeed',\n\t'optimizeQuality',\n\t'optimizeLegibility',\n\t'geometricPrecision',\n\t'currentColor',\n\t'crispEdges',\n\t'visiblePainted',\n\t'visibleFill',\n\t'visibleStroke',\n\t'sRGB',\n\t'linearRGB',\n]);\n\n// https://developer.mozilla.org/docs/Web/CSS/counter-increment\nkeywordSets.counterIncrementKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.counterResetKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.gridRowKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\nkeywordSets.gridColumnKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\nkeywordSets.gridAreaKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\n// https://developer.mozilla.org/ru/docs/Web/CSS/list-style-type\nkeywordSets.listStyleTypeKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'none',\n\t'disc',\n\t'circle',\n\t'square',\n\t'decimal',\n\t'cjk-decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-greek',\n\t'lower-alpha',\n\t'lower-latin',\n\t'upper-alpha',\n\t'upper-latin',\n\t'arabic-indic',\n\t'armenian',\n\t'bengali',\n\t'cambodian',\n\t'cjk-earthly-branch',\n\t'cjk-ideographic',\n\t'devanagari',\n\t'ethiopic-numeric',\n\t'georgian',\n\t'gujarati',\n\t'gurmukhi',\n\t'hebrew',\n\t'hiragana',\n\t'hiragana-iroha',\n\t'japanese-formal',\n\t'japanese-informal',\n\t'kannada',\n\t'katakana',\n\t'katakana-iroha',\n\t'khmer',\n\t'korean-hangul-formal',\n\t'korean-hanja-formal',\n\t'korean-hanja-informal',\n\t'lao',\n\t'lower-armenian',\n\t'malayalam',\n\t'mongolian',\n\t'myanmar',\n\t'oriya',\n\t'persian',\n\t'simp-chinese-formal',\n\t'simp-chinese-informal',\n\t'tamil',\n\t'telugu',\n\t'thai',\n\t'tibetan',\n\t'trad-chinese-formal',\n\t'trad-chinese-informal',\n\t'upper-armenian',\n\t'disclosure-open',\n\t'disclosure-closed',\n\t// Non-standard extensions (without prefixe)\n\t'ethiopic-halehame',\n\t'ethiopic-halehame-am',\n\t'ethiopic-halehame-ti-er',\n\t'ethiopic-halehame-ti-et',\n\t'hangul',\n\t'hangul-consonant',\n\t'urdu',\n]);\n\nkeywordSets.listStylePositionKeywords = uniteSets(keywordSets.basicKeywords, ['inside', 'outside']);\n\nkeywordSets.listStyleImageKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.listStyleShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.listStyleTypeKeywords,\n\tkeywordSets.listStylePositionKeywords,\n\tkeywordSets.listStyleImageKeywords,\n);\n\nkeywordSets.fontStyleKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'italic',\n\t'oblique',\n]);\n\nkeywordSets.fontVariantKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'none',\n\t'historical-forms',\n\t'none',\n\t'common-ligatures',\n\t'no-common-ligatures',\n\t'discretionary-ligatures',\n\t'no-discretionary-ligatures',\n\t'historical-ligatures',\n\t'no-historical-ligatures',\n\t'contextual',\n\t'no-contextual',\n\t'small-caps',\n\t'small-caps',\n\t'all-small-caps',\n\t'petite-caps',\n\t'all-petite-caps',\n\t'unicase',\n\t'titling-caps',\n\t'lining-nums',\n\t'oldstyle-nums',\n\t'proportional-nums',\n\t'tabular-nums',\n\t'diagonal-fractions',\n\t'stacked-fractions',\n\t'ordinal',\n\t'slashed-zero',\n\t'jis78',\n\t'jis83',\n\t'jis90',\n\t'jis04',\n\t'simplified',\n\t'traditional',\n\t'full-width',\n\t'proportional-width',\n\t'ruby',\n]);\n\nkeywordSets.fontStretchKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'semi-condensed',\n\t'condensed',\n\t'extra-condensed',\n\t'ultra-condensed',\n\t'semi-expanded',\n\t'expanded',\n\t'extra-expanded',\n\t'ultra-expanded',\n]);\n\nkeywordSets.fontSizeKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'xx-small',\n\t'x-small',\n\t'small',\n\t'medium',\n\t'large',\n\t'x-large',\n\t'xx-large',\n\t'larger',\n\t'smaller',\n]);\n\nkeywordSets.lineHeightKeywords = uniteSets(keywordSets.basicKeywords, ['normal']);\n\nkeywordSets.fontShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.fontStyleKeywords,\n\tkeywordSets.fontVariantKeywords,\n\tkeywordSets.fontWeightKeywords,\n\tkeywordSets.fontStretchKeywords,\n\tkeywordSets.fontSizeKeywords,\n\tkeywordSets.lineHeightKeywords,\n\tkeywordSets.fontFamilyKeywords,\n);\n\nkeywordSets.keyframeSelectorKeywords = new Set(['from', 'to']);\n\n// https://www.w3.org/TR/css-page-3/#syntax-page-selector\nkeywordSets.pageMarginAtRules = new Set([\n\t'top-left-corner',\n\t'top-left',\n\t'top-center',\n\t'top-right',\n\t'top-right-corner',\n\t'bottom-left-corner',\n\t'bottom-left',\n\t'bottom-center',\n\t'bottom-right',\n\t'bottom-right-corner',\n\t'left-top',\n\t'left-middle',\n\t'left-bottom',\n\t'right-top',\n\t'right-middle',\n\t'right-bottom',\n]);\n\n// https://developer.mozilla.org/en/docs/Web/CSS/At-rule\nkeywordSets.atRules = uniteSets(keywordSets.pageMarginAtRules, [\n\t'annotation',\n\t'apply',\n\t'character-variant',\n\t'charset',\n\t'counter-style',\n\t'custom-media',\n\t'custom-selector',\n\t'document',\n\t'font-face',\n\t'font-feature-values',\n\t'import',\n\t'keyframes',\n\t'layer',\n\t'media',\n\t'namespace',\n\t'nest',\n\t'ornaments',\n\t'page',\n\t'property',\n\t'styleset',\n\t'stylistic',\n\t'supports',\n\t'swash',\n\t'viewport',\n]);\n\n// https://drafts.csswg.org/mediaqueries/#descdef-media-update\nkeywordSets.deprecatedMediaFeatureNames = new Set([\n\t'device-aspect-ratio',\n\t'device-height',\n\t'device-width',\n\t'max-device-aspect-ratio',\n\t'max-device-height',\n\t'max-device-width',\n\t'min-device-aspect-ratio',\n\t'min-device-height',\n\t'min-device-width',\n]);\n\n// https://drafts.csswg.org/mediaqueries/#descdef-media-update\nkeywordSets.mediaFeatureNames = uniteSets(keywordSets.deprecatedMediaFeatureNames, [\n\t'any-hover',\n\t'any-pointer',\n\t'aspect-ratio',\n\t'color',\n\t'color-gamut',\n\t'color-index',\n\t'display-mode',\n\t'dynamic-range',\n\t'forced-colors',\n\t'grid',\n\t'height',\n\t'hover',\n\t'inverted-colors',\n\t'light-level',\n\t'max-aspect-ratio',\n\t'max-color',\n\t'max-color-index',\n\t'max-height',\n\t'max-monochrome',\n\t'max-resolution',\n\t'max-width',\n\t'min-aspect-ratio',\n\t'min-color',\n\t'min-color-index',\n\t'min-height',\n\t'min-monochrome',\n\t'min-resolution',\n\t'min-width',\n\t'monochrome',\n\t'orientation',\n\t'overflow-block',\n\t'overflow-inline',\n\t'pointer',\n\t'prefers-color-scheme',\n\t'prefers-contrast',\n\t'prefers-reduced-motion',\n\t'prefers-reduced-transparency',\n\t'resolution',\n\t'scan',\n\t'scripting',\n\t'update',\n\t'video-dynamic-range',\n\t'width',\n]);\n\n// https://www.w3.org/TR/CSS22/ui.html#system-colors\nkeywordSets.systemColors = new Set([\n\t'activeborder',\n\t'activecaption',\n\t'appworkspace',\n\t'background',\n\t'buttonface',\n\t'buttonhighlight',\n\t'buttonshadow',\n\t'buttontext',\n\t'captiontext',\n\t'graytext',\n\t'highlight',\n\t'highlighttext',\n\t'inactiveborder',\n\t'inactivecaption',\n\t'inactivecaptiontext',\n\t'infobackground',\n\t'infotext',\n\t'menu',\n\t'menutext',\n\t'scrollbar',\n\t'threeddarkshadow',\n\t'threedface',\n\t'threedhighlight',\n\t'threedlightshadow',\n\t'threedshadow',\n\t'window',\n\t'windowframe',\n\t'windowtext',\n]);\n\n// typecasting htmlTags to be more generic; see https://github.com/stylelint/stylelint/pull/6013 for discussion\n/** @type {Set<string>} */\nkeywordSets.standardHtmlTags = new Set(htmlTags);\n\n// htmlTags includes only \"standard\" tags. So we augment it with older tags etc.\nkeywordSets.nonStandardHtmlTags = new Set([\n\t'acronym',\n\t'applet',\n\t'basefont',\n\t'big',\n\t'blink',\n\t'center',\n\t'content',\n\t'dir',\n\t'font',\n\t'frame',\n\t'frameset',\n\t'hgroup',\n\t'isindex',\n\t'keygen',\n\t'listing',\n\t'marquee',\n\t'nobr',\n\t'noembed',\n\t'plaintext',\n\t'spacer',\n\t'strike',\n\t'tt',\n\t'xmp',\n]);\n\nkeywordSets.validMixedCaseSvgElements = new Set([\n\t'altGlyph',\n\t'altGlyphDef',\n\t'altGlyphItem',\n\t'animateColor',\n\t'animateMotion',\n\t'animateTransform',\n\t'clipPath',\n\t'feBlend',\n\t'feColorMatrix',\n\t'feComponentTransfer',\n\t'feComposite',\n\t'feConvolveMatrix',\n\t'feDiffuseLighting',\n\t'feDisplacementMap',\n\t'feDistantLight',\n\t'feDropShadow',\n\t'feFlood',\n\t'feFuncA',\n\t'feFuncB',\n\t'feFuncG',\n\t'feFuncR',\n\t'feGaussianBlur',\n\t'feImage',\n\t'feMerge',\n\t'feMergeNode',\n\t'feMorphology',\n\t'feOffset',\n\t'fePointLight',\n\t'feSpecularLighting',\n\t'feSpotLight',\n\t'feTile',\n\t'feTurbulence',\n\t'foreignObject',\n\t'glyphRef',\n\t'linearGradient',\n\t'radialGradient',\n\t'textPath',\n]);\n\n/**\n * @param {(string[] | Set<string>)[]} args\n */\nfunction uniteSets(...args) {\n\treturn new Set([...args].reduce((result, set) => [...result, ...set], []));\n}\n\nmodule.exports = keywordSets;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atRule) => `Unexpected unknown at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (vendor.prefix(name) || keywordSets.atRules.has(name.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst atName = `@${name}`;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(atName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t\tword: atName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Convert the specified value to an array. If an array is specified, the array is returned as-is.\n *\n * @template T\n * @param {T | T[] | undefined | null} value\n * @returns {T[] | undefined}\n */\nmodule.exports = function flattenArray(value) {\n\tif (value == null) {\n\t\treturn;\n\t}\n\n\treturn Array.isArray(value) ? value : [value];\n};\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties are one or more values\n * that satisfy the specified validator(s):\n *\n * @example\n * ignoreProperties = {\n *   value1: [\"item11\", \"item12\", \"item13\"],\n *   value2: \"item2\",\n * };\n * validateObjectWithArrayProps(isString)(ignoreProperties);\n * //=> true\n *\n * @typedef {(value: unknown) => boolean} Validator\n * @param {...Validator} validators\n * @returns {Validator}\n */\nmodule.exports = function validateObjectWithArrayProps(...validators) {\n\treturn (value) => {\n\t\tif (!isPlainObject(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.values(value)\n\t\t\t.flat()\n\t\t\t.every((item) => validators.some((v) => v(item)));\n\t};\n};\n","'use strict';\n\nconst flattenArray = require('../../utils/flattenArray');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-property-required-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\t\t\tconst propList = flattenArray(primary[atRuleName]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const property of propList) {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t(node) => node.type === 'decl' && node.prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.between !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst spaceIndex = statementRaws.between.search(/\\s+$/);\n\n\t\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\t\tstatement.raws.between =\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(spaceIndex);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatementRaws.between += context.newline;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.between = statementRaws.between.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"}\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nextNode);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"}\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"}\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = blockString(statement);\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length - 1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, ' ');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isBoolean,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasEmptyBlock(statement) && !ignoreComments) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasCommentsOnly = statement.nodes.every((node) => node.type === 'comment');\n\n\t\t\tif (!hasCommentsOnly) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet index = beforeBlockString(statement, { noRawBefore: true }).length;\n\n\t\t\t// For empty blocks when using SugarSS parser\n\t\t\tif (statement.raws.between === undefined) {\n\t\t\t\tindex--;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: statement,\n\t\t\t\tstart: statement.positionBy({ index }),\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-opening-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"{\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if selector is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'rule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', statement.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.raws.between = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.between = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-no-hex',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"{\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"{\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['at-rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'at-rules')) {\n\t\t\troot.walkAtRules(check);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: blockString(statement),\n\t\t\t\tindex: 0,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementFirst = statement.first;\n\n\t\t\t\t\t\tif (statementFirst == null) return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxHexColor = require('../../utils/isStandardSyntaxHexColor');\nconst isValidHex = require('../../utils/isValidHex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected invalid hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-no-invalid-hex',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxHexColor(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk(({ value, type, sourceIndex }) => {\n\t\t\t\tif (type === 'function' && value.endsWith('url')) return false;\n\n\t\t\t\tif (type !== 'word') return;\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n\n\t\t\t\tif (!hexMatch) return;\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\tif (!hexValue || isValidHex(hexValue)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + hexValue.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a hex color is standard\n *\n * @param {string} hex\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxHexColor(hex) {\n\t// Less map usage (e.g. .myclass { color: #colors[somecolor]; })\n\tif (hex.includes('[')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Check if a value is a valid 3, 4, 6 or 8 digit hex\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function (value) {\n\treturn /^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(value);\n};\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"{\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'rules', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'rules')) {\n\t\t\troot.walkRules(check);\n\t\t}\n\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst backupCommentNextBefores = new Map();\n\n\t\t\t/**\n\t\t\t * next node with checking newlines after comment\n\t\t\t *\n\t\t\t * @param {import('postcss').ChildNode | undefined} startNode\n\t\t\t * @returns {import('postcss').ChildNode | undefined}\n\t\t\t */\n\t\t\tfunction nextNode(startNode) {\n\t\t\t\tif (!startNode || !startNode.next) return;\n\n\t\t\t\tif (startNode.type === 'comment') {\n\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\tconst newLineMatch = reNewLine.test(startNode.raws.before || '');\n\n\t\t\t\t\tconst next = startNode.next();\n\n\t\t\t\t\tif (next && newLineMatch && !reNewLine.test(next.raws.before || '')) {\n\t\t\t\t\t\tbackupCommentNextBefores.set(next, next.raws.before);\n\t\t\t\t\t\tnext.raws.before = startNode.raws.before;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextNode(next);\n\t\t\t\t}\n\n\t\t\t\treturn startNode;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNode(statement.first);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.delete(nodeToCheck);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\t\t\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\t\t\t\t\tnode.raws.before = before;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.clear();\n\n\t\t\t\t\t\t\t// Fix\n\t\t\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\t\t\tlet fixTarget = statement.first;\n\n\t\t\t\t\t\t\twhile (fixTarget) {\n\t\t\t\t\t\t\t\tconst fixTargetRaws = fixTarget.raws;\n\n\t\t\t\t\t\t\t\tif (typeof fixTargetRaws.before !== 'string') continue;\n\n\t\t\t\t\t\t\t\tif (reNewLine.test(fixTargetRaws.before || '')) {\n\t\t\t\t\t\t\t\t\tfixTargetRaws.before = fixTargetRaws.before.replace(/\\r?\\n/g, '');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (fixTarget.type !== 'comment') {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfixTarget = fixTarget.next();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\tnode.raws.before = before;\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-case',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst expected = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expected) return;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expected;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(value, expected),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-hex-alpha';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (hex) => `Expected alpha channel in \"${hex}\"`,\n\tunexpected: (hex) => `Unexpected alpha channel in \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-alpha',\n};\n\nconst HEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(decl.value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isUrlFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (primary === 'always' && hasAlphaChannel(value)) return;\n\n\t\t\t\tif (primary === 'never' && !hasAlphaChannel(value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: primary === 'never' ? messages.unexpected(value) : messages.expected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isUrlFunction({ type, value }) {\n\treturn type === 'function' && value === 'url';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\n/**\n * @param {string} hex\n */\nfunction hasAlphaChannel(hex) {\n\treturn hex.length === 5 || hex.length === 9;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is standard\n *\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nmodule.exports = function (node) {\n\t// Function nodes without names are things in parentheses like Sass lists\n\tif (!node.value) {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('#{')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxFunction = require('./isStandardSyntaxFunction');\n\n/**\n * Check whether a function is standard syntax color function\n *\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxColorFunction(node) {\n\tif (!isStandardSyntaxFunction(node)) return false;\n\n\t// scss can accept a #hex, or $var variables and we need to check all nested fn nodes\n\tfor (const fnNode of node.nodes) {\n\t\tif (fnNode.type === 'function') return isStandardSyntaxColorFunction(fnNode);\n\n\t\tif (fnNode.type === 'word' && (fnNode.value.startsWith('#') || fnNode.value.startsWith('$')))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxColorFunction = require('../../utils/isStandardSyntaxColorFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (primary) => `Expected ${primary} color-function notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-function-notation',\n};\n\nconst LEGACY_FUNCS = new Set(['rgba', 'hsla']);\nconst LEGACY_NOTATION_FUNCS = new Set(['rgb', 'rgba', 'hsl', 'hsla']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['modern', 'legacy'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (!isStandardSyntaxColorFunction(node)) return;\n\n\t\t\t\tconst { value, sourceIndex, sourceEndIndex, nodes } = node;\n\n\t\t\t\tif (!LEGACY_NOTATION_FUNCS.has(value.toLowerCase())) return;\n\n\t\t\t\tif (primary === 'modern' && !hasCommas(node)) return;\n\n\t\t\t\tif (primary === 'legacy' && hasCommas(node)) return;\n\n\t\t\t\tif (context.fix && primary === 'modern') {\n\t\t\t\t\tlet commaCount = 0;\n\n\t\t\t\t\t// Convert punctuation\n\t\t\t\t\tnode.nodes = nodes.map((childNode) => {\n\t\t\t\t\t\tif (isComma(childNode)) {\n\t\t\t\t\t\t\t// Non-alpha commas to space and alpha commas to slashes\n\t\t\t\t\t\t\tif (commaCount < 2) {\n\t\t\t\t\t\t\t\t// @ts-expect-error -- TS2322: Type '\"space\"' is not assignable to type '\"div\"'.\n\t\t\t\t\t\t\t\tchildNode.type = 'space';\n\t\t\t\t\t\t\t\tchildNode.value = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t\tcommaCount++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchildNode.value = '/';\n\t\t\t\t\t\t\t\tchildNode.before = atLeastOneSpace(childNode.before);\n\t\t\t\t\t\t\t\tchildNode.after = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove trailing 'a' from legacy function name\n\t\t\t\t\tif (LEGACY_FUNCS.has(node.value.toLowerCase())) {\n\t\t\t\t\t\tnode.value = node.value.slice(0, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + (sourceEndIndex - sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} whitespace\n */\nfunction atLeastOneSpace(whitespace) {\n\treturn whitespace !== '' ? whitespace : ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').DivNode}\n */\nfunction isComma(node) {\n\treturn node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction hasCommas(node) {\n\treturn node.nodes && node.nodes.some((childNode) => isComma(childNode));\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst propertySets = {};\n\npropertySets.acceptCustomIdents = new Set([\n\t'animation',\n\t'animation-name',\n\t'font',\n\t'font-family',\n\t'counter-increment',\n\t'grid-row',\n\t'grid-column',\n\t'grid-area',\n\t'list-style',\n\t'list-style-type',\n]);\n\nmodule.exports = propertySets;\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},u=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},a=function(r){return{h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),w:u(r.w,0,100),b:u(r.b,0,100),a:u(r.a)};var t},e=function(r){return{h:n(r.h),w:n(r.w),b:n(r.b),a:n(r.a,3)}},b=function(r){return{h:function(r){var t=r.r,n=r.g,u=r.b,a=r.a,e=Math.max(t,n,u),b=e-Math.min(t,n,u),o=b?e===t?(n-u)/b:e===n?2+(u-t)/b:4+(t-n)/b:0;return{h:60*(o<0?o+6:o),s:e?b/e*100:0,v:e/255*100,a:a}}(r).h,w:Math.min(r.r,r.g,r.b)/255*100,b:100-Math.max(r.r,r.g,r.b)/255*100,a:r.a}},o=function(r){return function(r){var t=r.h,n=r.s,u=r.v,a=r.a;t=t/360*6,n/=100,u/=100;var e=Math.floor(t),b=u*(1-n),o=u*(1-(t-e)*n),i=u*(1-(1-t+e)*n),h=e%6;return{r:255*[u,o,b,b,i,u][h],g:255*[i,u,u,o,b,b][h],b:255*[b,b,i,u,u,o][h],a:a}}({h:r.h,s:100===r.b?0:100-r.w/(100-r.b)*100,v:100-r.b,a:r.a})},i=function(r){var n=r.h,u=r.w,e=r.b,b=r.a,i=void 0===b?1:b;if(!t(n)||!t(u)||!t(e))return null;var h=a({h:Number(n),w:Number(u),b:Number(e),a:Number(i)});return o(h)},h=/^hwb\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,d=function(t){var n=h.exec(t);if(!n)return null;var u,e,b=a({h:(u=n[1],e=n[2],void 0===e&&(e=\"deg\"),Number(u)*(r[e]||1)),w:Number(n[3]),b:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return o(b)};export default function(r,t){r.prototype.toHwb=function(){return e(b(this.rgba))},r.prototype.toHwbString=function(){return r=e(b(this.rgba)),t=r.h,n=r.w,u=r.b,(a=r.a)<1?\"hwb(\"+t+\" \"+n+\"% \"+u+\"% / \"+a+\")\":\"hwb(\"+t+\" \"+n+\"% \"+u+\"%)\";var r,t,n,u,a},t.string.push([d,\"hwb\"]),t.object.push([i,\"hwb\"])}\n","var a=function(a){return\"string\"==typeof a?a.length>0:\"number\"==typeof a},t=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=Math.pow(10,t)),Math.round(o*a)/o+0},o=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=1),a>o?o:a>t?a:t},r=function(a){var t=a/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(a){return 255*(a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a)},n=96.422,p=100,M=82.521,u=function(a){var t,r,n={x:.9555766*(t=a).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return r={r:h(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:h(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:h(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:a.a},{r:o(r.r,0,255),g:o(r.g,0,255),b:o(r.b,0,255),a:o(r.a)}},e=function(a){var t=r(a.r),h=r(a.g),u=r(a.b);return function(a){return{x:o(a.x,0,n),y:o(a.y,0,p),z:o(a.z,0,M),a:o(a.a)}}(function(a){return{x:1.0478112*a.x+.0228866*a.y+-.050127*a.z,y:.0295424*a.x+.9904844*a.y+-.0170491*a.z,z:-.0092345*a.x+.0150436*a.y+.7521316*a.z,a:a.a}}({x:100*(.4124564*t+.3575761*h+.1804375*u),y:100*(.2126729*t+.7151522*h+.072175*u),z:100*(.0193339*t+.119192*h+.9503041*u),a:a.a}))},w=216/24389,b=24389/27,i=function(t){var r=t.l,h=t.a,n=t.b,p=t.alpha,M=void 0===p?1:p;if(!a(r)||!a(h)||!a(n))return null;var u=function(a){return{l:o(a.l,0,400),a:a.a,b:a.b,alpha:o(a.alpha)}}({l:Number(r),a:Number(h),b:Number(n),alpha:Number(M)});return l(u)},l=function(a){var t=(a.l+16)/116,o=a.a/500+t,r=t-a.b/200;return u({x:(Math.pow(o,3)>w?Math.pow(o,3):(116*o-16)/b)*n,y:(a.l>8?Math.pow((a.l+16)/116,3):a.l/b)*p,z:(Math.pow(r,3)>w?Math.pow(r,3):(116*r-16)/b)*M,a:a.alpha})};export default function(a,r){a.prototype.toLab=function(){return o=e(this.rgba),h=o.y/p,u=o.z/M,r=(r=o.x/n)>w?Math.cbrt(r):(b*r+16)/116,a={l:116*(h=h>w?Math.cbrt(h):(b*h+16)/116)-16,a:500*(r-h),b:200*(h-(u=u>w?Math.cbrt(u):(b*u+16)/116)),alpha:o.a},{l:t(a.l,2),a:t(a.a,2),b:t(a.b,2),alpha:t(a.alpha,3)};var a,o,r,h,u},a.prototype.delta=function(r){void 0===r&&(r=\"#FFF\");var h=r instanceof a?r:new a(r),n=function(a,t){var o=a.l,r=a.a,h=a.b,n=t.l,p=t.a,M=t.b,u=180/Math.PI,e=Math.PI/180,w=Math.pow(Math.pow(r,2)+Math.pow(h,2),.5),b=Math.pow(Math.pow(p,2)+Math.pow(M,2),.5),i=(o+n)/2,l=Math.pow((w+b)/2,7),c=.5*(1-Math.pow(l/(l+Math.pow(25,7)),.5)),f=r*(1+c),y=p*(1+c),v=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),x=Math.pow(Math.pow(y,2)+Math.pow(M,2),.5),z=(v+x)/2,s=0===f&&0===h?0:Math.atan2(h,f)*u,d=0===y&&0===M?0:Math.atan2(M,y)*u;s<0&&(s+=360),d<0&&(d+=360);var g=d-s,m=Math.abs(d-s);m>180&&d<=s?g+=360:m>180&&d>s&&(g-=360);var N=s+d;m<=180?N/=2:N=(s+d<360?N+360:N-360)/2;var F=1-.17*Math.cos(e*(N-30))+.24*Math.cos(2*e*N)+.32*Math.cos(e*(3*N+6))-.2*Math.cos(e*(4*N-63)),L=n-o,I=x-v,P=2*Math.sin(e*g/2)*Math.pow(v*x,.5),j=1+.015*Math.pow(i-50,2)/Math.pow(20+Math.pow(i-50,2),.5),k=1+.045*z,q=1+.015*z*F,A=30*Math.exp(-1*Math.pow((N-275)/25,2)),B=-2*Math.pow(l/(l+Math.pow(25,7)),.5)*Math.sin(2*e*A);return Math.pow(Math.pow(L/1/j,2)+Math.pow(I/1/k,2)+Math.pow(P/1/q,2)+B*I*P/(1*k*1*q),.5)}(this.toLab(),h.toLab())/100;return o(t(n,3))},r.object.push([i,\"lab\"])}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},a=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=Math.pow(10,t)),Math.round(a*r)/a+0},n=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=1),r>a?a:r>t?r:t},u=function(r){var t=r/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(r){return 255*(r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r)},o=96.422,e=100,c=82.521,i=function(r){var t,a,u={x:.9555766*(t=r).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return a={r:h(.032404542*u.x-.015371385*u.y-.004985314*u.z),g:h(-.00969266*u.x+.018760108*u.y+41556e-8*u.z),b:h(556434e-9*u.x-.002040259*u.y+.010572252*u.z),a:r.a},{r:n(a.r,0,255),g:n(a.g,0,255),b:n(a.b,0,255),a:n(a.a)}},l=function(r){var t=u(r.r),a=u(r.g),h=u(r.b);return function(r){return{x:n(r.x,0,o),y:n(r.y,0,e),z:n(r.z,0,c),a:n(r.a)}}(function(r){return{x:1.0478112*r.x+.0228866*r.y+-.050127*r.z,y:.0295424*r.x+.9904844*r.y+-.0170491*r.z,z:-.0092345*r.x+.0150436*r.y+.7521316*r.z,a:r.a}}({x:100*(.4124564*t+.3575761*a+.1804375*h),y:100*(.2126729*t+.7151522*a+.072175*h),z:100*(.0193339*t+.119192*a+.9503041*h),a:r.a}))},f=216/24389,b=24389/27,d=function(r){return{l:n(r.l,0,100),c:r.c,h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),a:r.a};var t},p=function(r){return{l:a(r.l,2),c:a(r.c,2),h:a(r.h,2),a:a(r.a,3)}},v=function(r){var a=r.l,n=r.c,u=r.h,h=r.a,o=void 0===h?1:h;if(!t(a)||!t(n)||!t(u))return null;var e=d({l:Number(a),c:Number(n),h:Number(u),a:Number(o)});return M(e)},y=function(r){var t=function(r){var t=l(r),a=t.x/o,n=t.y/e,u=t.z/c;return a=a>f?Math.cbrt(a):(b*a+16)/116,{l:116*(n=n>f?Math.cbrt(n):(b*n+16)/116)-16,a:500*(a-n),b:200*(n-(u=u>f?Math.cbrt(u):(b*u+16)/116)),alpha:t.a}}(r),n=a(t.a,3),u=a(t.b,3),h=Math.atan2(u,n)/Math.PI*180;return{l:t.l,c:Math.sqrt(n*n+u*u),h:h<0?h+360:h,a:t.alpha}},M=function(r){return t={l:r.l,a:r.c*Math.cos(r.h*Math.PI/180),b:r.c*Math.sin(r.h*Math.PI/180),alpha:r.a},n=t.a/500+(a=(t.l+16)/116),u=a-t.b/200,i({x:(Math.pow(n,3)>f?Math.pow(n,3):(116*n-16)/b)*o,y:(t.l>8?Math.pow((t.l+16)/116,3):t.l/b)*e,z:(Math.pow(u,3)>f?Math.pow(u,3):(116*u-16)/b)*c,a:t.alpha});var t,a,n,u},x=/^lch\\(\\s*([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,s=function(t){var a=x.exec(t);if(!a)return null;var n,u,h=d({l:Number(a[1]),c:Number(a[2]),h:(n=a[3],u=a[4],void 0===u&&(u=\"deg\"),Number(n)*(r[u]||1)),a:void 0===a[5]?1:Number(a[5])/(a[6]?100:1)});return M(h)};export default function(r,t){r.prototype.toLch=function(){return p(y(this.rgba))},r.prototype.toLchString=function(){return r=p(y(this.rgba)),t=r.l,a=r.c,n=r.h,(u=r.a)<1?\"lch(\"+t+\"% \"+a+\" \"+n+\" / \"+u+\")\":\"lch(\"+t+\"% \"+a+\" \"+n+\")\";var r,t,a,n,u},t.string.push([s,\"lch\"]),t.object.push([v,\"lch\"])}\n","const { colord, extend } = require('colord');\nconst valueParser = require('postcss-value-parser');\n\nconst namesPlugin = require('colord/plugins/names');\nconst hwbPlugin = require('colord/plugins/hwb');\nconst labPlugin = require('colord/plugins/lab');\nconst lchPlugin = require('colord/plugins/lch');\n\nextend([\n\t// Type definitions are not compatible with commonjs.\n\t/** @type {any} */ (namesPlugin),\n\t/** @type {any} */ (hwbPlugin),\n\t/** @type {any} */ (labPlugin),\n\t/** @type {any} */ (lchPlugin),\n\n\t/* Syntaxes that is removed in Color Module Level 4 specification. */\n\n\t// hwb() with comma\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseHwbWithCommaString, /** @type {any} */ ('hwb-with-comma')]);\n\t},\n\t// gray()\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseGrayString, /** @type {any} */ ('gray')]);\n\t},\n]);\n\nmodule.exports = {\n\tcolord,\n};\n\n/**\n * Parses a valid hwb with comma CSS color function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()#syntax\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseHwbWithCommaString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('hwb(') || !input.endsWith(')') || input.includes('/')) {\n\t\treturn null;\n\t}\n\n\tconst [hue, whiteness = '', blackness = '', alpha, ...extraArgs] = input.slice(4, -1).split(',');\n\n\tif (!hue || !hue.trim() || !whiteness.trim() || !blackness.trim() || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\t// Change the delimiter and parse with colord.\n\tconst colordInstance = colord(\n\t\t`hwb(${hue} ${whiteness} ${blackness}${alpha ? ` / ${alpha}` : ''})`,\n\t);\n\n\tif (!colordInstance.isValid()) {\n\t\treturn null;\n\t}\n\n\treturn colordInstance.rgba;\n}\n\n/**\n * Parses a valid gray() CSS color function\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseGrayString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('gray(') || !input.endsWith(')')) {\n\t\treturn null;\n\t}\n\n\tconst [lightness, alpha, ...extraArgs] = input.slice(5, -1).split(',');\n\n\tif (!lightness || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\tconst lightnessWithUnit = valueParser.unit(lightness.trim());\n\n\tif (!lightnessWithUnit || !['', '%'].includes(lightnessWithUnit.unit)) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {import('colord/types').LabColor | import('colord/types').LabaColor}\n\t */\n\tlet colorObject = {\n\t\tl: Number(lightnessWithUnit.number),\n\t\ta: 0,\n\t\tb: 0,\n\t};\n\n\tif (alpha) {\n\t\tconst alphaWithUnit = valueParser.unit(alpha.trim());\n\n\t\tif (!alphaWithUnit || !['', '%'].includes(alphaWithUnit.unit)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tcolorObject = {\n\t\t\t...colorObject,\n\t\t\talpha: Number(alphaWithUnit.number) / (alphaWithUnit.unit ? 100 : 1),\n\t\t};\n\t}\n\n\treturn colord(colorObject).rgba;\n}\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst propertySets = require('../../reference/propertySets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { colord } = require('./colordUtils');\n\nconst ruleName = 'color-named';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (named, original) => `Expected \"${original}\" to be \"${named}\"`,\n\trejected: (named) => `Unexpected named color \"${named}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-named',\n};\n\n// Todo tested on case insensitivity\nconst NODE_TYPES = new Set(['word', 'function']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['never', 'always-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (propertySets.acceptCustomIdents.has(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if the property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst type = node.type;\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function') && type === 'function') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if neither a word nor a function\n\t\t\t\tif (!NODE_TYPES.has(type)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for named colors for \"never\" option\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'never' &&\n\t\t\t\t\ttype === 'word' &&\n\t\t\t\t\t/^[a-z]+$/iu.test(value) &&\n\t\t\t\t\tvalue.toLowerCase() !== 'transparent' &&\n\t\t\t\t\tcolord(value).isValid()\n\t\t\t\t) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(value),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\tvalue.length,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check \"always-where-possible\" option ...\n\t\t\t\tif (primary !== 'always-where-possible') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet rawColorString = null;\n\t\t\t\tlet colorString = null;\n\n\t\t\t\tif (type === 'function') {\n\t\t\t\t\trawColorString = valueParser.stringify(node);\n\n\t\t\t\t\t// First by checking for alternative color function representations ...\n\t\t\t\t\t// Remove all spaces to match what's in `representations`\n\t\t\t\t\tcolorString = rawColorString.replace(/\\s*([,/()])\\s*/g, '$1').replace(/\\s{2,}/g, ' ');\n\t\t\t\t} else if (type === 'word' && value.startsWith('#')) {\n\t\t\t\t\t// Then by checking for alternative hex representations\n\t\t\t\t\trawColorString = colorString = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst color = colord(colorString);\n\n\t\t\t\tif (!color.isValid()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst namedColor = color.toName();\n\n\t\t\t\tif (namedColor && namedColor.toLowerCase() !== 'transparent') {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.expected(namedColor, colorString),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\trawColorString.length,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t */\n\t\tfunction complain(message, node, index, length) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected comment to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\n\t\t\tif (normalizedPattern.test(text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n * Get the next non-comment node in a PostCSS AST\n * at or after a given node.\n *\n * @param {PostcssNode | void} startNode\n * @returns {PostcssNode | null}\n */\nmodule.exports = function nextNonCommentNode(startNode) {\n\tif (!startNode || !startNode.next) return null;\n\n\tif (startNode.type === 'comment') {\n\t\treturn nextNonCommentNode(startNode.next());\n\t}\n\n\treturn startNode;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-semicolon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst nextNode = atRule.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tnodeToCheck.raws.before = context.newline + nodeToCheck.raws.before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\t\tindex: atRule.toString().length + 1,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isString } = require('./validateTypes');\n\n/** @typedef {false | { match: string, pattern: string, substring: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @template {unknown} T\n * @param {string} input\n * @param {T | T[]} comparison\n * @returns {ReturnValue}\n */\nmodule.exports = function containsString(input, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstString(input, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstString(input, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {unknown} comparison\n * @returns {ReturnValue}\n */\nfunction testAgainstString(value, comparison) {\n\tif (!comparison) return false;\n\n\tif (!isString(comparison)) return false;\n\n\tif (comparison.startsWith('/') && comparison.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\tif (value.includes(comparison)) {\n\t\treturn { match: value, pattern: comparison, substring: comparison };\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nconst containsString = require('../../utils/containsString');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-word-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (pattern) => `Unexpected word matching pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-word-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap\n\t\t\tif (firstFourChars === '/*# ') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchesWord = matchesStringOrRegExp(text, primary) || containsString(text, primary);\n\n\t\t\tif (!matchesWord) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(matchesWord.pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tword: matchesWord.substring,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Comment} comment\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxComment(comment) {\n\t// We check both here because the Sass parser uses `raws.inline` to indicate\n\t// inline comments, while the Less parser uses `inline`.\n\tif ('inline' in comment) return false;\n\n\tif ('inline' in comment.raws) return false;\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// To ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// To ignore comments that are not empty\n\t\t\tif (comment.text && comment.text.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-whitespace-inside',\n};\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceBefore(comment) {\n\tif (comment.text.startsWith('*')) {\n\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t} else {\n\t\tcomment.raws.left = ' ';\n\t}\n}\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceAfter(comment) {\n\tif (comment.text[comment.text.length - 1] === '*') {\n\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t} else {\n\t\tcomment.raws.right = ' ';\n\t}\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n\n\t\t\tif (leftMatches == null || leftMatches[1] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n\n\t\t\tif (rightMatches == null || rightMatches[2] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftSpace = leftMatches[2] || '';\n\t\t\tconst rightSpace = rightMatches[1] || '';\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (primary === 'never' && leftSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'never' && rightSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!leftSpace) {\n\t\t\t\t\t\t\taddWhitespaceBefore(comment);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rightSpace) {\n\t\t\t\t\t\t\taddWhitespaceAfter(comment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var SKIP = 'skip';\nvar CHECK = 'check';\nvar ONLY = 'only';\n\nmodule.exports = function (options, callback) {\n  var source = options.source;\n  var target = options.target;\n\n  var skipComments = (options.comments) ? options.comments === SKIP : true;\n  var skipStrings = (options.strings) ? options.strings === SKIP : true;\n  var skipFunctionNames = (options.functionNames) ? options.functionNames === SKIP : true;\n  var skipFunctionArguments = options.functionArguments === SKIP;\n  var skipParentheticals = options.parentheticals === SKIP;\n\n  var onceOptionUsed = false;\n  Object.keys(options).forEach(function(key) {\n    if (options[key] !== ONLY) return;\n    if (!onceOptionUsed) {\n      onceOptionUsed = true;\n    } else {\n      throw new Error('Only one syntax feature option can be the \"only\" one to check');\n    }\n  });\n\n  var onlyComments = options.comments === ONLY;\n  var onlyStrings = options.strings === ONLY;\n  var onlyFunctionNames = options.functionNames === ONLY;\n  var onlyFunctionArguments = options.functionArguments === ONLY;\n  var onlyParentheticals = options.parentheticals === ONLY;\n\n  var insideString = false;\n  var insideComment = false;\n  var insideSingleLineComment = false;\n  var insideParens = false;\n  var insideFunctionArguments = false;\n  var openingParenCount = 0;\n  var matchCount = 0;\n  var openingQuote;\n\n  var targetIsArray = Array.isArray(target);\n\n  // If the target is just a string, it is easy to check whether\n  // some index of the source matches it.\n  // If the target is an array of strings, though, we have to\n  // check whether some index of the source matches *any* of\n  // those target strings (stopping after the first match).\n  var getMatch = (function () {\n    if (!targetIsArray) {\n      return getMatchBase.bind(null, target);\n    }\n    return function(index) {\n      for (var ti = 0, tl = target.length; ti < tl; ti++) {\n        var checkResult = getMatchBase(target[ti], index);\n        if (checkResult) return checkResult;\n      }\n      return false;\n    }\n  })();\n\n  function getMatchBase(targetString, index) {\n    var targetStringLength = targetString.length;\n\n    // Target is a single character\n    if (targetStringLength === 1 && source[index] !== targetString) return false;\n\n    // Target is multiple characters\n    if (source.substr(index, targetStringLength) !== targetString) return false;\n\n    return {\n      insideParens: insideParens,\n      insideFunctionArguments: insideFunctionArguments,\n      insideComment: insideComment,\n      insideString: insideString,\n      startIndex: index,\n      endIndex: index + targetStringLength,\n      target: targetString,\n    };\n  }\n\n  for (var i = 0, l = source.length; i < l; i++) {\n    var currentChar = source[i];\n\n    // Register the beginning of a comment\n    if (\n      !insideString && !insideComment\n      && currentChar === \"/\"\n      && source[i - 1] !== \"\\\\\" // escaping\n    ) {\n      // standard comments\n      if (source[i + 1] === \"*\") {\n        insideComment = true;\n        continue;\n      }\n      // single-line comments\n      if (source[i + 1] === \"/\") {\n        insideComment = true;\n        insideSingleLineComment = true;\n        continue;\n      }\n    }\n\n    if (insideComment) {\n      // Register the end of a standard comment\n      if (\n        !insideSingleLineComment\n        && currentChar === \"*\"\n        && source[i - 1] !== \"\\\\\" // escaping\n        && source[i + 1] === \"/\"\n        && source[i - 1] !== \"/\" // don't end if it's /*/\n      ) {\n        insideComment = false;\n        continue;\n      }\n\n      // Register the end of a single-line comment\n      if (\n        insideSingleLineComment\n        && currentChar === \"\\n\"\n      ) {\n        insideComment = false;\n        insideSingleLineComment = false;\n      }\n\n      if (skipComments) continue;\n    }\n\n    // Register the beginning of a string\n    if (!insideComment && !insideString && (currentChar === \"\\\"\" || currentChar === \"'\")) {\n      if (source[i - 1] === \"\\\\\") continue; // escaping\n\n      openingQuote = currentChar;\n      insideString = true;\n\n      // For string-quotes rule\n      if (target === currentChar) handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideString) {\n      // Register the end of a string\n      if (currentChar === openingQuote) {\n        if (source[i - 1] === \"\\\\\") continue; // escaping\n        insideString = false;\n        continue;\n      }\n\n      if (skipStrings) continue;\n    }\n\n    // Register the beginning of parens/functions\n    if (!insideString && !insideComment && currentChar === \"(\") {\n      // Keep track of opening parentheticals so that we\n      // know when the outermost function (possibly\n      // containing nested functions) is closing\n      openingParenCount++;\n\n      insideParens = true;\n      // Only inside a function if there is a function name\n      // before the opening paren\n      if (/[a-zA-Z]/.test(source[i - 1])) {\n        insideFunctionArguments = true;\n      }\n\n      if (target === \"(\") handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideParens) {\n      // Register the end of a function\n      if (currentChar === \")\") {\n        openingParenCount--;\n        // Do this here so the match is still technically inside a function\n        if (target === \")\") handleMatch(getMatch(i));\n        if (openingParenCount === 0) {\n          insideParens = false;\n          insideFunctionArguments = false;\n        }\n        continue;\n      }\n    }\n\n    var isFunctionName = /^[a-zA-Z]*\\(/.test(source.slice(i));\n    if (skipFunctionNames && isFunctionName) continue;\n    if (onlyFunctionNames && !isFunctionName) continue;\n\n    var match = getMatch(i);\n\n    if (!match) continue;\n    handleMatch(match);\n    if (options.once) return;\n  }\n\n  function handleMatch(match) {\n    if (onlyParentheticals && !insideParens) return;\n    if (skipParentheticals && insideParens) return;\n    if (onlyFunctionArguments && !insideFunctionArguments) return;\n    if (skipFunctionArguments && insideFunctionArguments) return;\n    if (onlyStrings && !insideString) return;\n    if (onlyComments && !insideComment) return;\n    matchCount++;\n    callback(match, matchCount);\n  }\n}\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix: ((decl: Declaration, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function declarationBangSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst indexOffset = declarationValueIndex(decl);\n\t\tconst declString = decl.toString();\n\t\tconst valueString = decl.toString().slice(indexOffset);\n\n\t\tif (!valueString.includes('!')) {\n\t\t\treturn;\n\t\t}\n\n\t\tstyleSearch({ source: valueString, target: '!' }, (match) => {\n\t\t\tcheck(declString, match.startIndex + indexOffset, decl);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {Declaration} decl\n\t */\n\tfunction check(source, index, decl) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(decl, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"!\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-bang-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(value: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < declValue.length) {\n\t\t\t\t\t\t\ttarget = declValue;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= declValue.length;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex + 1);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex + 1);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {number}\n */\nmodule.exports = function (atRule) {\n\t// Initial 1 is for the `@`\n\tlet index = 1 + atRule.name.length;\n\n\tif (atRule.raws.afterName) {\n\t\tindex += atRule.raws.afterName.length;\n\t}\n\n\treturn index;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'custom-media-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected custom media query name to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-media-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() !== 'custom-media') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst match = atRule.params.match(/^--(\\S+)\\b/);\n\n\t\t\tif (match == null || match[0] == null) {\n\t\t\t\tthrow new Error(`Unexpected at-rule params: \"${atRule.params}\"`);\n\t\t\t}\n\n\t\t\tconst customMediaName = match[1];\n\n\t\t\tif (regexpPattern.test(customMediaName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(atRule);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: atRule,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + match[0].length,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a property is a custom one\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\treturn property.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a property is SCSS variable\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\t// SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))\n\tif (property.startsWith('$')) {\n\t\treturn true;\n\t}\n\n\t// SCSS var within a namespace (e.g. namespace.$var: x)\n\tif (property.includes('.$')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\nconst isScssVariable = require('./isScssVariable');\n\n/**\n * Check whether a property is standard\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\t// SCSS var\n\tif (isScssVariable(property)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x)\n\tif (property.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// Less append property value with space (e.g. transform+_: scale(2))\n\tif (property.endsWith('+') || property.endsWith('+_')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(property)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst ruleName = 'custom-property-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected custom property name to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\t/**\n\t\t * @param {string} property\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction check(property) {\n\t\t\treturn (\n\t\t\t\t!isStandardSyntaxProperty(property) ||\n\t\t\t\t!isCustomProperty(property) ||\n\t\t\t\tregexpPattern.test(property.slice(2))\n\t\t\t);\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (node.value.toLowerCase() !== 'var') return;\n\n\t\t\t\tconst { nodes } = node;\n\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tif (!firstNode || check(firstNode.value)) return;\n\n\t\t\t\tcomplain(declarationValueIndex(decl) + firstNode.sourceIndex, firstNode.value.length, decl);\n\t\t\t});\n\n\t\t\tif (check(prop)) return;\n\n\t\t\tcomplain(0, prop.length, decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSharedLineComment = require('../../utils/isSharedLineComment');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before comment',\n\trejected: 'Unexpected empty line before comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-empty-line-before',\n};\n\nconst stylelintCommandPrefix = 'stylelint-';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested'],\n\t\t\t\t\tignore: ['stylelint-commands', 'after-comment'],\n\t\t\t\t\tignoreComments: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore stylelint commands\n\t\t\tif (\n\t\t\t\tcomment.text.startsWith(stylelintCommandPrefix) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'stylelint-commands')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore newlines between comments\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore comments matching the ignoreComments option.\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreComments', comment.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore shared-line comments\n\t\t\tif (isSharedLineComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(comment)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always';\n\t\t\t})();\n\n\t\t\tconst before = comment.raws.before || '';\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (typeof context.newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(comment, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(comment, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isScssVariable = require('./isScssVariable');\nconst { isRoot, isRule } = require('./typeGuards');\n\n/**\n * @param {string} [lang]\n */\nfunction isStandardSyntaxLang(lang) {\n\treturn lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\nmodule.exports = function (decl) {\n\tconst prop = decl.prop;\n\tconst parent = decl.parent;\n\n\t// Declarations belong in a declaration block or standard CSS source\n\tif (\n\t\tparent &&\n\t\tisRoot(parent) &&\n\t\tparent.source &&\n\t\t!isStandardSyntaxLang(\n\t\t\t/** @type {import('postcss').Source & {lang?: string}} */ (parent.source).lang,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// SCSS var; covers map and list declarations\n\tif (isScssVariable(prop)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\tif (prop[0] === '@' && prop[1] !== '{') {\n\t\treturn false;\n\t}\n\n\t// Less map declaration\n\tif (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {\n\t\treturn false;\n\t}\n\n\t// Less map (e.g. #my-map() { myprop: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector.startsWith('#') &&\n\t\tparent.selector.endsWith('()')\n\t) {\n\t\treturn false;\n\t}\n\n\t// Sass nested properties (e.g. border: { style: solid; color: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector[parent.selector.length - 1] === ':' &&\n\t\tparent.selector.substring(0, 2) !== '--'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Less &:extend\n\tif ('extend' in decl && decl.extend) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'custom-property-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before custom property',\n\trejected: 'Unexpected empty line before custom property',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-custom-property'],\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-single-line-block'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tparent != null &&\n\t\t\t\t(isAtRule(parent) || isRule(parent)) &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-custom-property') &&\n\t\t\t\t\tisAfterCustomProperty(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction isAfterCustomProperty(decl) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(decl);\n\n\treturn prevNode != null && isDeclaration(prevNode) && isCustomProperty(prevNode.prop);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isRoot, isAtRule, isRule } = require('./typeGuards');\n\n/** @typedef {import('postcss').Root} Root */\n/** @typedef {import('postcss').Root} Document */\n/** @typedef {import('postcss').Node} PostcssNode */\n/** @typedef {import('postcss').Container} PostcssContainerNode */\n/** @typedef {import('postcss').Declaration} Declaration */\n/** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */\n\n/**\n * @param {PostcssNode} node\n * @returns {node is PostcssContainerNode}\n */\nfunction isContainerNode(node) {\n\treturn isRule(node) || isAtRule(node) || isRoot(node);\n}\n\n/**\n * In order to accommodate nested blocks (postcss-nested),\n * we need to run a shallow loop (instead of eachDecl() or eachRule(),\n * which loop recursively) and allow each nested block to accumulate\n * its own list of properties -- so that a property in a nested rule\n * does not conflict with the same property in the parent rule\n * executes a provided function once for each declaration block.\n *\n * @param {Root | Document} root - root element of file.\n * @param {(eachDecl: EachDeclaration) => void} callback - Function to execute for each declaration block\n *\n * @returns {void}\n */\nmodule.exports = function eachDeclarationBlock(root, callback) {\n\t/**\n\t * @param {PostcssNode} statement\n\t *\n\t * @returns {void}\n\t */\n\tfunction each(statement) {\n\t\tif (!isContainerNode(statement)) return;\n\n\t\tif (statement.nodes && statement.nodes.length) {\n\t\t\t/** @type {Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\tfor (const node of statement.nodes) {\n\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\tdecls.push(node);\n\t\t\t\t}\n\n\t\t\t\teach(node);\n\t\t\t}\n\n\t\t\tif (decls.length) {\n\t\t\t\tcallback(decls.forEach.bind(decls));\n\t\t\t}\n\t\t}\n\t}\n\n\teach(root);\n};\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-no-duplicate-custom-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-duplicate-custom-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst decls = new Set();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isDuplicate = decls.has(prop);\n\n\t\t\t\tif (isDuplicate) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdecls.add(prop);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-property-no-missing-var-function';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (customProperty) => `Unexpected missing var function for \"${customProperty}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-no-missing-var-function',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/** @type {Set<string>} */\n\t\tconst knownCustomProperties = new Set();\n\n\t\troot.walkAtRules(/^property$/i, (atRule) => {\n\t\t\tknownCustomProperties.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls(({ prop }) => {\n\t\t\tif (isCustomProperty(prop)) knownCustomProperties.add(prop);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isVarFunction(node)) return false;\n\n\t\t\t\tif (!isDashedIdent(node)) return;\n\n\t\t\t\tif (!knownCustomProperties.has(node.value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isDashedIdent({ type, value }) {\n\treturn type === 'word' && value.startsWith('--');\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isVarFunction({ type, value }) {\n\treturn type === 'function' && value === 'var';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-duplicate-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-duplicate-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'consecutive-duplicates',\n\t\t\t\t\t\t'consecutive-duplicates-with-different-values',\n\t\t\t\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t\t\t\t],\n\t\t\t\t\tignoreProperties: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDuplicates = optionsMatches(secondaryOptions, 'ignore', 'consecutive-duplicates');\n\t\tconst ignoreDiffValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-different-values',\n\t\t);\n\t\tconst ignorePrefixlessSameValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {string[]} */\n\t\t\tconst decls = [];\n\t\t\t/** @type {string[]} */\n\t\t\tconst values = [];\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst value = decl.value;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if the property is to be ignored\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore the src property as commonly duplicated in at-fontface\n\t\t\t\tif (prop.toLowerCase() === 'src') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst indexDuplicate = decls.indexOf(prop.toLowerCase());\n\n\t\t\t\tif (indexDuplicate !== -1) {\n\t\t\t\t\tif (ignoreDiffValues || ignorePrefixlessSameValues) {\n\t\t\t\t\t\t// fails if duplicates are not consecutive\n\t\t\t\t\t\tif (indexDuplicate !== decls.length - 1) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst duplicateValue = values[indexDuplicate] || '';\n\n\t\t\t\t\t\tif (ignorePrefixlessSameValues) {\n\t\t\t\t\t\t\t// fails if values of consecutive, unprefixed duplicates are equal\n\t\t\t\t\t\t\tif (vendor.unprefixed(value) !== vendor.unprefixed(duplicateValue)) {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fails if values of consecutive duplicates are equal\n\t\t\t\t\t\tif (value === duplicateValue) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ignoreDuplicates && indexDuplicate === decls.length - 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdecls.push(prop.toLowerCase());\n\t\t\t\tvalues.push(value.toLowerCase());\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \";\" in a multi-line declaration block',\n\trejectedAfterMultiLine: () => 'Unexpected newline after \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = decl.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheck.raws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheck.raws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheck.raws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheck.raws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\tnodeToCheck.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @type {Record<string, string[]>} */\nmodule.exports = {\n\tmargin: ['margin-top', 'margin-bottom', 'margin-left', 'margin-right'],\n\tpadding: ['padding-top', 'padding-bottom', 'padding-left', 'padding-right'],\n\tbackground: [\n\t\t'background-image',\n\t\t'background-size',\n\t\t'background-position',\n\t\t'background-repeat',\n\t\t'background-origin',\n\t\t'background-clip',\n\t\t'background-attachment',\n\t\t'background-color',\n\t],\n\tfont: [\n\t\t'font-style',\n\t\t'font-variant',\n\t\t'font-weight',\n\t\t'font-stretch',\n\t\t'font-size',\n\t\t'font-family',\n\t\t'line-height',\n\t],\n\tborder: [\n\t\t'border-top-width',\n\t\t'border-bottom-width',\n\t\t'border-left-width',\n\t\t'border-right-width',\n\t\t'border-top-style',\n\t\t'border-bottom-style',\n\t\t'border-left-style',\n\t\t'border-right-style',\n\t\t'border-top-color',\n\t\t'border-bottom-color',\n\t\t'border-left-color',\n\t\t'border-right-color',\n\t],\n\t'border-top': ['border-top-width', 'border-top-style', 'border-top-color'],\n\t'border-bottom': ['border-bottom-width', 'border-bottom-style', 'border-bottom-color'],\n\t'border-left': ['border-left-width', 'border-left-style', 'border-left-color'],\n\t'border-right': ['border-right-width', 'border-right-style', 'border-right-color'],\n\t'border-width': [\n\t\t'border-top-width',\n\t\t'border-bottom-width',\n\t\t'border-left-width',\n\t\t'border-right-width',\n\t],\n\t'border-style': [\n\t\t'border-top-style',\n\t\t'border-bottom-style',\n\t\t'border-left-style',\n\t\t'border-right-style',\n\t],\n\t'border-color': [\n\t\t'border-top-color',\n\t\t'border-bottom-color',\n\t\t'border-left-color',\n\t\t'border-right-color',\n\t],\n\t'list-style': ['list-style-type', 'list-style-position', 'list-style-image'],\n\t'border-radius': [\n\t\t'border-top-right-radius',\n\t\t'border-top-left-radius',\n\t\t'border-bottom-right-radius',\n\t\t'border-bottom-left-radius',\n\t],\n\ttransition: [\n\t\t'transition-delay',\n\t\t'transition-duration',\n\t\t'transition-property',\n\t\t'transition-timing-function',\n\t],\n\tanimation: [\n\t\t'animation-name',\n\t\t'animation-duration',\n\t\t'animation-timing-function',\n\t\t'animation-delay',\n\t\t'animation-iteration-count',\n\t\t'animation-direction',\n\t\t'animation-fill-mode',\n\t\t'animation-play-state',\n\t],\n\t'border-block-end': [\n\t\t'border-block-end-width',\n\t\t'border-block-end-style',\n\t\t'border-block-end-color',\n\t],\n\t'border-block-start': [\n\t\t'border-block-start-width',\n\t\t'border-block-start-style',\n\t\t'border-block-start-color',\n\t],\n\t'border-image': [\n\t\t'border-image-source',\n\t\t'border-image-slice',\n\t\t'border-image-width',\n\t\t'border-image-outset',\n\t\t'border-image-repeat',\n\t],\n\t'border-inline-end': [\n\t\t'border-inline-end-width',\n\t\t'border-inline-end-style',\n\t\t'border-inline-end-color',\n\t],\n\t'border-inline-start': [\n\t\t'border-inline-start-width',\n\t\t'border-inline-start-style',\n\t\t'border-inline-start-color',\n\t],\n\t'column-rule': ['column-rule-width', 'column-rule-style', 'column-rule-color'],\n\tcolumns: ['column-width', 'column-count'],\n\tflex: ['flex-grow', 'flex-shrink', 'flex-basis'],\n\t'flex-flow': ['flex-direction', 'flex-wrap'],\n\tgrid: [\n\t\t'grid-template-rows',\n\t\t'grid-template-columns',\n\t\t'grid-template-areas',\n\t\t'grid-auto-rows',\n\t\t'grid-auto-columns',\n\t\t'grid-auto-flow',\n\t\t'grid-column-gap',\n\t\t'grid-row-gap',\n\t],\n\t'grid-area': ['grid-row-start', 'grid-column-start', 'grid-row-end', 'grid-column-end'],\n\t'grid-column': ['grid-column-start', 'grid-column-end'],\n\t'grid-gap': ['grid-row-gap', 'grid-column-gap'],\n\t'grid-row': ['grid-row-start', 'grid-row-end'],\n\t'grid-template': ['grid-template-columns', 'grid-template-rows', 'grid-template-areas'],\n\toutline: ['outline-color', 'outline-style', 'outline-width'],\n\t'text-decoration': ['text-decoration-color', 'text-decoration-style', 'text-decoration-line'],\n\t'text-emphasis': ['text-emphasis-style', 'text-emphasis-color'],\n\tmask: [\n\t\t'mask-image',\n\t\t'mask-mode',\n\t\t'mask-position',\n\t\t'mask-size',\n\t\t'mask-repeat',\n\t\t'mask-origin',\n\t\t'mask-clip',\n\t\t'mask-composite',\n\t],\n};\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-shorthand-property-overrides',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Record<string, string>} */\n\t\t\tconst declarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop).toLowerCase();\n\n\t\t\t\tconst overrideables = shorthandData[unprefixedProp.toLowerCase()];\n\n\t\t\t\tif (!overrideables) {\n\t\t\t\t\tdeclarations[prop.toLowerCase()] = prop;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const longhandProp of overrideables) {\n\t\t\t\t\tif (!Object.prototype.hasOwnProperty.call(declarations, prefix + longhandProp)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.rejected(prop, declarations[prefix + longhandProp] || ''),\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n\texpectedBeforeSingleLine: () =>\n\t\t'Expected single space before \";\" in a single-line declaration block',\n\trejectedBeforeSingleLine: () =>\n\t\t'Unexpected whitespace before \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.before({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = ' !important ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ' '));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tif (decl.raws.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ''));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../utils/arrayEqual');\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (props) => `Expected shorthand property \"${props}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-redundant-longhand-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreShorthands: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst longhandProperties = Object.entries(shorthandData).reduce(\n\t\t\t(/** @type {Record<string, string[]>} */ longhandProps, [key, values]) => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreShorthands', key)) {\n\t\t\t\t\treturn longhandProps;\n\t\t\t\t}\n\n\t\t\t\tfor (const value of values) {\n\t\t\t\t\t(longhandProps[value] || (longhandProps[value] = [])).push(key);\n\t\t\t\t}\n\n\t\t\t\treturn longhandProps;\n\t\t\t},\n\t\t\t{},\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Record<string, string[]>} */\n\t\t\tconst longhandDeclarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop.toLowerCase();\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop);\n\n\t\t\t\tconst shorthandProperties = longhandProperties[unprefixedProp];\n\n\t\t\t\tif (!shorthandProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const shorthandProperty of shorthandProperties) {\n\t\t\t\t\tconst prefixedShorthandProperty = prefix + shorthandProperty;\n\t\t\t\t\tlet longhandDeclaration = longhandDeclarations[prefixedShorthandProperty];\n\n\t\t\t\t\tif (!longhandDeclaration) {\n\t\t\t\t\t\tlonghandDeclaration = longhandDeclarations[prefixedShorthandProperty] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tlonghandDeclaration.push(prop);\n\n\t\t\t\t\tconst prefixedShorthandData = (shorthandData[shorthandProperty] || []).map(\n\t\t\t\t\t\t(item) => prefix + item,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!arrayEqual(prefixedShorthandData.sort(), longhandDeclaration.sort())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.expected(prefixedShorthandProperty),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-length',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['short', 'long'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value: hexValue } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tif (primary === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst variant = primary === 'long' ? longer : shorter;\n\t\t\t\tconst expectedHex = variant(hexValue);\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expectedHex;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(hexValue, expectedHex),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} hex\n */\nfunction canShrink(hex) {\n\thex = hex.toLowerCase();\n\n\treturn (\n\t\thex[1] === hex[2] &&\n\t\thex[3] === hex[4] &&\n\t\thex[5] === hex[6] &&\n\t\t(hex.length === 7 || (hex.length === 9 && hex[7] === hex[8]))\n\t);\n}\n\n/**\n * @param {string} hex\n */\nfunction shorter(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i += 2) {\n\t\thexVariant += hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {string} hex\n */\nfunction longer(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i++) {\n\t\thexVariant += hex.charAt(i).repeat(2);\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst report = require('../utils/report');\n\n/** @typedef {(args: { source: string, index: number, lineCheckStr: string, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((decl: import('postcss').Declaration, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function declarationColonSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the raw prop, and only the prop\n\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\topts.locationChecker({\n\t\t\t\tsource: propPlusColon,\n\t\t\t\tindex: i,\n\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\terr: (message) => {\n\t\t\t\t\tif (opts.fix && opts.fix(decl, i)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.prop.toString().length + 1,\n\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t});\n};\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \":\" with a single-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ': ');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ':');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-single-line-max-declarations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst block = blockString(ruleNode);\n\n\t\t\tif (!isSingleLineString(block)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = ruleNode.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: block,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \";\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n\trejectedBeforeMultiLine: () =>\n\t\t'Unexpected whitespace before \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \";\"',\n\trejectedAfter: () => 'Unexpected whitespace after \";\"',\n\texpectedAfterSingleLine: () =>\n\t\t'Expected single space after \";\" in a single-line declaration block',\n\trejectedAfterSingleLine: () =>\n\t\t'Unexpected whitespace after \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextDecl = decl.next();\n\n\t\t\tif (!nextDecl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: rawNodeString(nextDecl),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isCustomProperty = require('./isCustomProperty');\nconst isStandardSyntaxDeclaration = require('./isStandardSyntaxDeclaration');\nconst { isDeclaration } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function (node) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(node);\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tisDeclaration(prevNode) &&\n\t\tisStandardSyntaxDeclaration(prevNode) &&\n\t\t!isCustomProperty(prevNode.prop || '')\n\t);\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isAfterStandardPropertyDeclaration = require('../../utils/isAfterStandardPropertyDeclaration');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isRule, isRoot } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before declaration',\n\trejected: 'Unexpected empty line before declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-declaration'],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'after-declaration',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-single-line-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAtRule(parent) && !isRule(parent) && !isRoot(parent)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a declaration precedes it\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'after-declaration') &&\n\t\t\t\tisAfterStandardPropertyDeclaration(decl)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-declaration') &&\n\t\t\t\t\tisAfterStandardPropertyDeclaration(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: decl, result, ruleName });\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \":\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \":\" with a multi-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the raw prop, and only the prop\n\t\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst indexToCheck = /^[^\\S\\r\\n]*\\/\\*/.test(propPlusColon.slice(i + 1))\n\t\t\t\t\t? propPlusColon.indexOf('*/', i) + 1\n\t\t\t\t\t: i;\n\n\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\tsource: propPlusColon,\n\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\t\tconst betweenStart = declarationValueIndex(decl) - between.length;\n\t\t\t\t\t\t\tconst sliceIndex = indexToCheck - betweenStart + 1;\n\t\t\t\t\t\t\tconst betweenBefore = between.slice(0, sliceIndex);\n\t\t\t\t\t\t\tconst betweenAfter = between.slice(sliceIndex);\n\n\t\t\t\t\t\t\tdecl.raws.between = /^\\s*\\n/.test(betweenAfter)\n\t\t\t\t\t\t\t\t? betweenBefore + betweenAfter.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t\t: betweenBefore + context.newline + betweenAfter;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-trailing-semicolon';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a trailing semicolon',\n\trejected: 'Unexpected trailing semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-trailing-semicolon',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['single-declaration'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!atRule.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (atRule.parent === root) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (atRule !== atRule.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(atRule);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (decl.parent.type === 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl !== decl.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkLastNode(node) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tconst hasSemicolon = node.parent.raws.semicolon;\n\t\t\tconst ignoreSingleDeclaration = optionsMatches(\n\t\t\t\tsecondaryOptions,\n\t\t\t\t'ignore',\n\t\t\t\t'single-declaration',\n\t\t\t);\n\n\t\t\tif (ignoreSingleDeclaration && node.parent.first === node) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet message;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tif (hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = true;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.raws.between = '';\n\t\t\t\t\t\tnode.parent.raws.after = ' ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.expected;\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tif (!hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.rejected;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected primary option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex: node.toString().trim().length - 1,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Returns a position of `!important` (or `! important` including whitespaces)\n * from the specified CSS source code. If not found, returns `undefined`.\n *\n * @param {string} source\n * @returns {{ index: number, endIndex: number } | undefined}\n */\nmodule.exports = function getImportantPosition(source) {\n\tconst pattern = /!\\s*important\\b/gi;\n\tconst match = pattern.exec(source);\n\n\tif (!match) return;\n\n\treturn { index: match.index, endIndex: pattern.lastIndex };\n};\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.important) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\tassert(pos);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex: pos.index,\n\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blurInterpolation = require('./blurInterpolation');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {import('postcss-value-parser').Node} node\n *\n * @returns {string | null}\n */\nmodule.exports = function (node) {\n\tif (!node || !node.value) {\n\t\treturn null;\n\t}\n\n\t// Ignore non-word nodes\n\tif (node.type !== 'word') {\n\t\treturn null;\n\t}\n\n\t// Ignore non standard syntax\n\tif (!isStandardSyntaxValue(node.value)) {\n\t\treturn null;\n\t}\n\n\t// Ignore HEX\n\tif (node.value.startsWith('#')) {\n\t\treturn null;\n\t}\n\n\t// Remove non standard stuff\n\tconst value = blurInterpolation(node.value, '')\n\t\t// ignore hack unit\n\t\t.replace('\\\\0', '')\n\t\t.replace('\\\\9', '');\n\n\tconst parsedUnit = valueParser.unit(value);\n\n\tif (!parsedUnit) {\n\t\treturn null;\n\t}\n\n\treturn parsedUnit.unit;\n};\n","'use strict';\n\n/**\n * @param {string} source\n *\n * @returns {string}\n */\nmodule.exports = function (source, blurChar = ' ') {\n\treturn source.replace(/[#@{}]+/g, blurChar);\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-unit-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(node);\n\n\t\t\t\tif (!unit || (unit && !propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether it's a number or a number-like string:\n * i.e. when coerced to a number it == itself.\n *\n * @param {string | number} value\n */\nmodule.exports = function (value) {\n\t/* eslint-disable eqeqeq */\n\treturn value.toString().trim().length !== 0 && Number(value) == value;\n\t/* eslint-enable eqeqeq */\n};\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Check if a word is a font-size value.\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function (word) {\n\tif (!word) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.fontSizeKeywords.has(word)) {\n\t\treturn true;\n\t}\n\n\tconst numberUnit = valueParser.unit(word);\n\n\tif (!numberUnit) {\n\t\treturn false;\n\t}\n\n\tconst unit = numberUnit.unit;\n\n\tif (unit === '%') {\n\t\treturn true;\n\t}\n\n\tif (keywordSets.lengthUnits.has(unit.toLowerCase())) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * Check whether a word is a variable i.e var(--custom-property).\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function (word) {\n\treturn word.toLowerCase().startsWith('var(');\n};\n","'use strict';\n\nconst postcssValueParser = require('postcss-value-parser');\n\nconst isNumbery = require('./isNumbery');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isValidFontSize = require('./isValidFontSize');\nconst isVariable = require('./isVariable');\nconst { assert } = require('./validateTypes');\nconst keywordSets = require('../reference/keywordSets');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n\tfirstNode.value = firstNode.value + charactersBetween + secondNode.value;\n\n\treturn firstNode;\n}\n\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @returns {Node[]} Collection font-family nodes\n */\nmodule.exports = function findFontFamily(value) {\n\t/** @type {Node[]} */\n\tconst fontFamilies = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes: children } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tchildren.length === 1 &&\n\t\tchildren[0] &&\n\t\tkeywordSets.basicKeywords.has(children[0].value.toLowerCase())\n\t) {\n\t\treturn [children[0]];\n\t}\n\n\tlet needMergeNodesByValue = false;\n\t/** @type {string | null} */\n\tlet mergeCharacters = null;\n\n\tvalueNodes.walk((valueNode, index, nodes) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!nodeTypesToCheck.has(valueNode.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other font parts\n\t\tif (\n\t\t\tkeywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore font-sizes\n\t\tif (isValidFontSize(valueNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst prevPrevNode = nodes[index - 2];\n\n\t\t// Ignore anything come after a <font-size>/, because it's a line-height\n\t\tif (prevNode && prevNode.value === '/' && prevPrevNode && isValidFontSize(prevPrevNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore number values\n\t\tif (isNumbery(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\t\tif (\n\t\t\t(valueNode.type === 'space' || (valueNode.type === 'div' && valueNode.value !== ',')) &&\n\t\t\tfontFamilies.length !== 0\n\t\t) {\n\t\t\tneedMergeNodesByValue = true;\n\t\t\tmergeCharacters = valueNode.value;\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (valueNode.type === 'space' || valueNode.type === 'div') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontFamily = valueNode;\n\n\t\tif (needMergeNodesByValue) {\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\t\t\tjoinValueNodes(lastFontFamily, fontFamily, mergeCharacters);\n\t\t\tneedMergeNodesByValue = false;\n\t\t\tmergeCharacters = null;\n\t\t} else {\n\t\t\tfontFamilies.push(fontFamily);\n\t\t}\n\t});\n\n\treturn fontFamilies;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-duplicate-names';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected duplicate name ${name}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-no-duplicate-names',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilyNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst keywords = new Set();\n\t\t\tconst familyNames = new Set();\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilies) {\n\t\t\t\tconst family = fontFamilyNode.value.trim();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFontFamilyNames', family)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rawFamily =\n\t\t\t\t\t'quote' in fontFamilyNode ? fontFamilyNode.quote + family + fontFamilyNode.quote : family;\n\n\t\t\t\tif (isFamilyNameKeyword(fontFamilyNode)) {\n\t\t\t\t\tif (keywords.has(family.toLowerCase())) {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tkeywords.add(family);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (familyNames.has(family)) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfamilyNames.add(family);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tif (node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function')) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(node);\n\n\t\t\t\tif (!unit || (unit && propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(primary, propKey, value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (family) => `Expected quotes around \"${family}\"`,\n\trejected: (family) => `Unexpected quotes around \"${family}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-name-quotes',\n};\n\n/**\n * @param {string} font\n * @returns {boolean}\n */\nfunction isSystemFontKeyword(font) {\n\tif (font.startsWith('-apple-')) {\n\t\treturn true;\n\t}\n\n\tif (font === 'BlinkMacSystemFont') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * \"To avoid mistakes in escaping, it is recommended to quote font family names\n * that contain white space, digits, or punctuation characters other than hyphens\"\n * (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRecommended(family) {\n\treturn !/^[-a-zA-Z]+$/.test(family);\n}\n\n/**\n * Quotes are required if the family is not a valid CSS identifier\n * (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRequired(family) {\n\treturn family\n\t\t.split(/\\s+/)\n\t\t.some((word) => /^(?:-?\\d|--)/.test(word) || !/^[-\\w\\u{00A0}-\\u{10FFFF}]+$/u.test(word));\n}\n\n/**\n * @typedef {{\n *   name: string,\n *   rawName: string,\n *   hasQuotes: boolean,\n *   sourceIndex: number,\n *   resetIndexes: (offset: number) => void,\n *   removeQuotes: () => void,\n *   addQuotes: () => void,\n * }} MutableNode\n */\n\n/**\n *\n * @param {import('postcss-value-parser').Node[]} fontFamilies\n * @param {import('postcss').Declaration} decl\n * @returns {MutableNode[]}\n */\nconst makeMutableFontFamilies = (fontFamilies, decl) => {\n\t/**\n\t * @type {MutableNode[]}\n\t */\n\tconst mutableNodes = [];\n\n\tfontFamilies.forEach((fontFamily, idx) => {\n\t\tconst quote = 'quote' in fontFamily && fontFamily.quote;\n\t\tconst name = fontFamily.value;\n\n\t\t/** @type {MutableNode} */\n\t\tconst newNode = {\n\t\t\tname,\n\t\t\trawName: quote ? `${quote}${name}${quote}` : name,\n\t\t\tsourceIndex: fontFamily.sourceIndex,\n\t\t\thasQuotes: Boolean(quote),\n\t\t\tresetIndexes(offset) {\n\t\t\t\tmutableNodes.slice(idx + 1).forEach((n) => (n.sourceIndex += offset));\n\t\t\t},\n\t\t\tremoveQuotes() {\n\t\t\t\tif (this.hasQuotes === false) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length + 2;\n\n\t\t\t\tthis.hasQuotes = false;\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + this.name + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(-2);\n\t\t\t},\n\t\t\taddQuotes() {\n\t\t\t\tif (this.hasQuotes === true) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length;\n\n\t\t\t\tthis.hasQuotes = true;\n\t\t\t\tconst fixedName = `\"${this.name}\"`;\n\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + fixedName + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(2);\n\t\t\t},\n\t\t};\n\n\t\tmutableNodes.push(newNode);\n\t});\n\n\treturn mutableNodes;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tlet fontFamilyNodes = makeMutableFontFamilies(findFontFamily(decl.value), decl);\n\n\t\t\tif (fontFamilyNodes.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilyNodes) {\n\t\t\t\tcheckFamilyName(fontFamilyNode, decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {MutableNode} fontFamilyNode\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFamilyName(fontFamilyNode, decl) {\n\t\t\tconst { name: family, rawName: rawFamily, hasQuotes } = fontFamilyNode;\n\n\t\t\tif (!isStandardSyntaxValue(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Disallow quotes around (case-insensitive) keywords\n\t\t\t// and system font keywords in all cases\n\t\t\tif (keywordSets.fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst required = quotesRequired(family);\n\t\t\tconst recommended = quotesRecommended(family);\n\n\t\t\tswitch (primary) {\n\t\t\t\tcase 'always-unless-keyword':\n\t\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-recommended':\n\t\t\t\t\tif (!recommended && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recommended && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-required':\n\t\t\t\t\tif (!required && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (required && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {string} family\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, family, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tword: family,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isNumbery = require('../../utils/isNumbery');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'font-weight-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} font-weight notation`,\n\tinvalidNamed: (name) => `Unexpected invalid font-weight name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-weight-notation',\n};\n\nconst INHERIT_KEYWORD = 'inherit';\nconst INITIAL_KEYWORD = 'initial';\nconst NORMAL_KEYWORD = 'normal';\nconst WEIGHTS_WITH_KEYWORD_EQUIVALENTS = new Set(['400', '700']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['numeric', 'named-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['relative'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-weight)?$/i, (decl) => {\n\t\t\tconst prop = decl.prop.toLowerCase();\n\n\t\t\tif (prop === 'font-weight') {\n\t\t\t\tcheckWeight(decl, decl.value);\n\t\t\t} else if (prop === 'font') {\n\t\t\t\tcheckFont(decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFont(decl) {\n\t\t\tconst valueNodes = findFontWeights(decl.value);\n\n\t\t\t// We do not need to more carefully distinguish font-weight\n\t\t\t// numbers from unitless line-heights because line-heights in\n\t\t\t// `font` values need to be part of a font-size/line-height pair\n\t\t\tconst hasNumericFontWeight = valueNodes.some(({ value }) => isNumbery(value));\n\n\t\t\tfor (const valueNode of valueNodes) {\n\t\t\t\tconst value = valueNode.value;\n\t\t\t\tconst lowerValue = value.toLowerCase();\n\n\t\t\t\tif (\n\t\t\t\t\t(lowerValue === NORMAL_KEYWORD && !hasNumericFontWeight) ||\n\t\t\t\t\tisNumbery(value) ||\n\t\t\t\t\t(lowerValue !== NORMAL_KEYWORD && keywordSets.fontWeightKeywords.has(lowerValue))\n\t\t\t\t) {\n\t\t\t\t\tcheckWeight(decl, value, valueNode);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {string} weightValue\n\t\t * @param {import('postcss-value-parser').Node} [weightValueNode]\n\t\t */\n\t\tfunction checkWeight(decl, weightValue, weightValueNode) {\n\t\t\tif (!isStandardSyntaxValue(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (includesOnlyFunction(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lowerWeightValue = weightValue.toLowerCase();\n\n\t\t\tif (lowerWeightValue === INHERIT_KEYWORD || lowerWeightValue === INITIAL_KEYWORD) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'relative') &&\n\t\t\t\tkeywordSets.fontWeightRelativeKeywords.has(lowerWeightValue)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primary === 'numeric') {\n\t\t\t\tconst parent = decl.parent;\n\n\t\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\t\t// @font-face allows multiple values.\n\t\t\t\t\tfor (const valueNode of findFontWeights(weightValue)) {\n\t\t\t\t\t\tif (!isNumbery(valueNode.value)) {\n\t\t\t\t\t\t\treturn complain(messages.expected('numeric'), valueNode.value, valueNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isNumbery(weightValue)) {\n\t\t\t\t\treturn complain(messages.expected('numeric'), weightValue, weightValueNode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (primary === 'named-where-possible') {\n\t\t\t\tif (isNumbery(weightValue)) {\n\t\t\t\t\tif (WEIGHTS_WITH_KEYWORD_EQUIVALENTS.has(weightValue)) {\n\t\t\t\t\t\tcomplain(messages.expected('named'), weightValue, weightValueNode);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!keywordSets.fontWeightKeywords.has(lowerWeightValue) &&\n\t\t\t\t\tlowerWeightValue !== NORMAL_KEYWORD\n\t\t\t\t) {\n\t\t\t\t\treturn complain(messages.invalidNamed(weightValue), weightValue, weightValueNode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {string} value\n\t\t\t * @param {import('postcss-value-parser').Node | undefined} valueNode\n\t\t\t */\n\t\t\tfunction complain(message, value, valueNode) {\n\t\t\t\tconst index = declarationValueIndex(decl) + (valueNode ? valueNode.sourceIndex : 0);\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {import('postcss-value-parser').Node[]}\n */\nfunction findFontWeights(value) {\n\treturn valueParser(value).nodes.filter((node, index, nodes) => {\n\t\tif (node.type !== 'word') return false;\n\n\t\t// Exclude `<font-size>/<line-height>` format like `16px/3`.\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst nextNode = nodes[index + 1];\n\n\t\tif (prevNode && prevNode.type === 'div') return false;\n\n\t\tif (nextNode && nextNode.type === 'div') return false;\n\n\t\treturn true;\n\t});\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction includesOnlyFunction(value) {\n\treturn valueParser(value).nodes.every(({ type }) => {\n\t\treturn type === 'function' || type === 'comment' || type === 'space';\n\t});\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-value-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!optionsMatches(primary, propKey, value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","export default {\n  cwd: () => \"/\",\n  env: {\n    NO_COLOR: \"true\",\n    FORCE_COLOR: \"false\"\n  },\n  argv: []\n};\n","let tty = require(\"tty\")\n\nlet isColorSupported =\n\t!(\"NO_COLOR\" in process.env || process.argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in process.env ||\n\t\tprocess.argv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(tty.isatty(1) && process.env.TERM !== \"dumb\") ||\n\t\t\"CI\" in process.env)\n\nlet formatter =\n\t(open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input\n\t\tlet index = string.indexOf(close, open.length)\n\t\treturn ~index\n\t\t\t? open + replaceClose(string, close, replace, index) + close\n\t\t\t: open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet start = string.substring(0, index) + replace\n\tlet end = string.substring(index + close.length)\n\tlet nextIndex = end.indexOf(close)\n\treturn ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end\n}\n\nlet createColors = (enabled = isColorSupported) => ({\n\tisColorSupported: enabled,\n\treset: enabled ? s => `\\x1b[0m${s}\\x1b[0m` : String,\n\tbold: enabled ? formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\") : String,\n\tdim: enabled ? formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\") : String,\n\titalic: enabled ? formatter(\"\\x1b[3m\", \"\\x1b[23m\") : String,\n\tunderline: enabled ? formatter(\"\\x1b[4m\", \"\\x1b[24m\") : String,\n\tinverse: enabled ? formatter(\"\\x1b[7m\", \"\\x1b[27m\") : String,\n\thidden: enabled ? formatter(\"\\x1b[8m\", \"\\x1b[28m\") : String,\n\tstrikethrough: enabled ? formatter(\"\\x1b[9m\", \"\\x1b[29m\") : String,\n\tblack: enabled ? formatter(\"\\x1b[30m\", \"\\x1b[39m\") : String,\n\tred: enabled ? formatter(\"\\x1b[31m\", \"\\x1b[39m\") : String,\n\tgreen: enabled ? formatter(\"\\x1b[32m\", \"\\x1b[39m\") : String,\n\tyellow: enabled ? formatter(\"\\x1b[33m\", \"\\x1b[39m\") : String,\n\tblue: enabled ? formatter(\"\\x1b[34m\", \"\\x1b[39m\") : String,\n\tmagenta: enabled ? formatter(\"\\x1b[35m\", \"\\x1b[39m\") : String,\n\tcyan: enabled ? formatter(\"\\x1b[36m\", \"\\x1b[39m\") : String,\n\twhite: enabled ? formatter(\"\\x1b[37m\", \"\\x1b[39m\") : String,\n\tgray: enabled ? formatter(\"\\x1b[90m\", \"\\x1b[39m\") : String,\n\tbgBlack: enabled ? formatter(\"\\x1b[40m\", \"\\x1b[49m\") : String,\n\tbgRed: enabled ? formatter(\"\\x1b[41m\", \"\\x1b[49m\") : String,\n\tbgGreen: enabled ? formatter(\"\\x1b[42m\", \"\\x1b[49m\") : String,\n\tbgYellow: enabled ? formatter(\"\\x1b[43m\", \"\\x1b[49m\") : String,\n\tbgBlue: enabled ? formatter(\"\\x1b[44m\", \"\\x1b[49m\") : String,\n\tbgMagenta: enabled ? formatter(\"\\x1b[45m\", \"\\x1b[49m\") : String,\n\tbgCyan: enabled ? formatter(\"\\x1b[46m\", \"\\x1b[49m\") : String,\n\tbgWhite: enabled ? formatter(\"\\x1b[47m\", \"\\x1b[49m\") : String,\n})\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n","'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput(dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': pico.cyan,\n  'at-word': pico.cyan,\n  'comment': pico.gray,\n  'string': pico.green,\n  'class': pico.yellow,\n  'hash': pico.magenta,\n  'call': pico.cyan,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n","'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n","'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","const noop = () => noop;\nnoop.default = noop.cosmiconfig = noop.catch = noop;\nexport default noop;\n\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            this.map.setSourceContent(\n              this.toUrl(this.path(from)),\n              node.source.input.css\n            )\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString()\n      } else {\n        throw new Error(\n          '`map.absolute` option is not available in this PostCSS build'\n        )\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n","'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n","'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n","'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n","'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n","'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.16'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n","'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing generic font family',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-no-missing-generic-family-keyword',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst isLastFontFamilyVariable = (value) => {\n\tconst lastValue = postcss.list.comma(value).pop();\n\n\treturn lastValue != null && (isVariable(lastValue) || !isStandardSyntaxValue(lastValue));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilies: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\t// Ignore @font-face\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl.prop === 'font' && keywordSets.systemFontValues.has(decl.value.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isLastFontFamilyVariable(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some((node) => isFamilyNameKeyword(node))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tfontFamilies.some((node) =>\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFontFamilies', node.value),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst index = valueIndex + lastFontFamily.sourceIndex;\n\t\t\tconst endIndex = valueIndex + lastFontFamily.sourceEndIndex;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {{\n *   div: import('postcss-value-parser').DivNode,\n *   index: number,\n *   nodes: import('postcss-value-parser').Node[],\n *   expectation: string,\n *   position: 'before' | 'after',\n *   symb: string,\n * }} params\n * @returns {boolean}\n */\nmodule.exports = function functionCommaSpaceFix(params) {\n\tconst { div, index, nodes, expectation, position, symb } = params;\n\n\tif (expectation.startsWith('always')) {\n\t\tdiv[position] = symb;\n\n\t\treturn true;\n\t}\n\n\tif (expectation.startsWith('never')) {\n\t\tdiv[position] = '';\n\n\t\tfor (let i = index + 1; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tif (node === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'comment') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'space') {\n\t\t\t\tnode.value = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst getDeclarationValue = require('../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../utils/isStandardSyntaxFunction');\nconst report = require('../utils/report');\nconst setDeclarationValue = require('../utils/setDeclarationValue');\nconst valueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} ValueParserNode */\n/** @typedef {import('postcss-value-parser').DivNode} ValueParserDivNode */\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((node: ValueParserDivNode, index: number, nodes: ValueParserNode[]) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function functionCommaSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst declValue = getDeclarationValue(decl);\n\n\t\tlet hasFixed;\n\t\tconst parsedValue = valueParser(declValue);\n\n\t\tparsedValue.walk((valueNode) => {\n\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore `url()` arguments, which may contain data URIs or other funky stuff\n\t\t\tif (valueNode.value.toLowerCase() === 'url') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst argumentStrings = valueNode.nodes.map((node) => valueParser.stringify(node));\n\n\t\t\tconst functionArguments = (() => {\n\t\t\t\t// Remove function name and parens\n\t\t\t\tlet result = valueNode.before + argumentStrings.join('') + valueNode.after;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tresult = result.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn result;\n\t\t\t})();\n\n\t\t\t/**\n\t\t\t * Gets the index of the comma for checking.\n\t\t\t * @param {ValueParserDivNode} commaNode The comma node\n\t\t\t * @param {number} nodeIndex The index of the comma node\n\t\t\t * @returns {number} The index of the comma for checking\n\t\t\t */\n\t\t\tconst getCommaCheckIndex = (commaNode, nodeIndex) => {\n\t\t\t\tlet commaBefore =\n\t\t\t\t\tvalueNode.before + argumentStrings.slice(0, nodeIndex).join('') + commaNode.before;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tcommaBefore = commaBefore.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn commaBefore.length;\n\t\t\t};\n\n\t\t\t/** @type {{ commaNode: ValueParserDivNode, checkIndex: number, nodeIndex: number }[]} */\n\t\t\tconst commaDataList = [];\n\n\t\t\tfor (const [nodeIndex, node] of valueNode.nodes.entries()) {\n\t\t\t\tif (node.type !== 'div' || node.value !== ',') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst checkIndex = getCommaCheckIndex(node, nodeIndex);\n\n\t\t\t\tcommaDataList.push({\n\t\t\t\t\tcommaNode: node,\n\t\t\t\t\tcheckIndex,\n\t\t\t\t\tnodeIndex,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const { commaNode, checkIndex, nodeIndex } of commaDataList) {\n\t\t\t\topts.locationChecker({\n\t\t\t\t\tsource: functionArguments,\n\t\t\t\t\tindex: checkIndex,\n\t\t\t\t\terr: (message) => {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + commaNode.sourceIndex + commaNode.before.length;\n\n\t\t\t\t\t\tif (opts.fix && opts.fix(commaNode, nodeIndex, valueNode.nodes)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasFixed) {\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t}\n\t});\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line function',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-calc-no-unspaced-operator';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\" operator`,\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\" operator`,\n\texpectedOperatorBeforeSign: (operator) => `Expected an operator before sign \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-calc-no-unspaced-operator',\n};\n\nconst OPERATORS = new Set(['+', '-']);\nconst OPERATOR_REGEX = /[+-]/;\nconst ALL_OPERATORS = new Set([...OPERATORS, '*', '/']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction complain(message, node, index, operator) {\n\t\t\tconst endIndex = index + operator.length;\n\n\t\t\treport({ message, node, index, endIndex, result, ruleName });\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} operatorNode\n\t\t\t * @param {import('postcss-value-parser').Node} currentNode\n\t\t\t * @param {boolean} isBeforeOp\n\t\t\t */\n\t\t\tfunction checkAroundOperator(operatorNode, currentNode, isBeforeOp) {\n\t\t\t\tconst operator = operatorNode.value;\n\t\t\t\tconst operatorSourceIndex = operatorNode.sourceIndex;\n\n\t\t\t\tif (currentNode && !isSingleSpace(currentNode)) {\n\t\t\t\t\tif (currentNode.type === 'word') {\n\t\t\t\t\t\tif (isBeforeOp) {\n\t\t\t\t\t\t\tconst lastChar = currentNode.value.slice(-1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${currentNode.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\t\toperatorSourceIndex,\n\t\t\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst firstChar = currentNode.value.slice(0, 1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${firstChar} ${currentNode.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(messages.expectedAfter(operator), decl, operatorSourceIndex, operator);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tisBeforeOp ? messages.expectedBefore(operator) : messages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + operatorSourceIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'space') {\n\t\t\t\t\t\tconst indexOfFirstNewLine = currentNode.value.search(/(\\n|\\r\\n)/);\n\n\t\t\t\t\t\tif (indexOfFirstNewLine === 0) return;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value =\n\t\t\t\t\t\t\t\tindexOfFirstNewLine === -1 ? ' ' : currentNode.value.slice(indexOfFirstNewLine);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'function') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInFirstNode(nodes) {\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tassert(firstNode);\n\n\t\t\t\tif (firstNode.type !== 'word') return false;\n\n\t\t\t\tif (!isStandardSyntaxValue(firstNode.value)) return false;\n\n\t\t\t\tconst operatorIndex = firstNode.value.search(OPERATOR_REGEX);\n\t\t\t\tconst operator = firstNode.value.slice(operatorIndex, operatorIndex + 1);\n\n\t\t\t\tif (operatorIndex <= 0) return false;\n\n\t\t\t\tconst charBefore = firstNode.value.charAt(operatorIndex - 1);\n\t\t\t\tconst charAfter = firstNode.value.charAt(operatorIndex + 1);\n\n\t\t\t\tif (charBefore && charBefore !== ' ' && charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex + 1, ' ');\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charBefore && charBefore !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInLastNode(nodes) {\n\t\t\t\tif (nodes.length === 1) return false;\n\n\t\t\t\tconst lastNode = nodes[nodes.length - 1];\n\n\t\t\t\tassert(lastNode);\n\n\t\t\t\tif (lastNode.type !== 'word') return false;\n\n\t\t\t\tconst operatorIndex = lastNode.value.search(OPERATOR_REGEX);\n\n\t\t\t\tif (operatorIndex === -1) return false;\n\n\t\t\t\tif (lastNode.value.charAt(operatorIndex - 1) === ' ') return false;\n\n\t\t\t\t// E.g. \"10px * -2\" when the last node is \"-2\"\n\t\t\t\tif (\n\t\t\t\t\tisOperator(nodes[nodes.length - 3], ALL_OPERATORS) &&\n\t\t\t\t\tisSingleSpace(nodes[nodes.length - 2])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedsFix = true;\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex + 1, ' ').trim();\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex, ' ').trim();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst operator = lastNode.value.charAt(operatorIndex);\n\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\tdecl,\n\t\t\t\t\tvalueIndex + lastNode.sourceIndex + operatorIndex,\n\t\t\t\t\toperator,\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkWords(nodes) {\n\t\t\t\tif (checkForOperatorInFirstNode(nodes) || checkForOperatorInLastNode(nodes)) return;\n\n\t\t\t\tfor (const [index, node] of nodes.entries()) {\n\t\t\t\t\tconst lastChar = node.value.slice(-1);\n\t\t\t\t\tconst firstChar = node.value.slice(0, 1);\n\n\t\t\t\t\tif (node.type === 'word') {\n\t\t\t\t\t\tif (index === 0 && OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${node.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedBefore(lastChar), decl, node.sourceIndex, lastChar);\n\t\t\t\t\t\t} else if (index === nodes.length && OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${firstChar} ${node.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(firstChar),\n\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\tnode.sourceIndex,\n\t\t\t\t\t\t\t\tfirstChar,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || node.value.toLowerCase() !== 'calc') return;\n\n\t\t\t\tconst { nodes } = node;\n\t\t\t\tlet foundOperatorNode = false;\n\n\t\t\t\tfor (const [nodeIndex, currNode] of nodes.entries()) {\n\t\t\t\t\tif (!isOperator(currNode)) continue;\n\n\t\t\t\t\tfoundOperatorNode = true;\n\n\t\t\t\t\tconst nodeBefore = nodes[nodeIndex - 1];\n\t\t\t\t\tconst nodeAfter = nodes[nodeIndex + 1];\n\n\t\t\t\t\tif (isSingleSpace(nodeBefore) && isSingleSpace(nodeAfter)) continue;\n\n\t\t\t\t\tif (nodeAfter && checkAroundOperator(currNode, nodeAfter, false)) continue;\n\n\t\t\t\t\tnodeBefore && checkAroundOperator(currNode, nodeBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (!foundOperatorNode) {\n\t\t\t\t\tcheckWords(nodes);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} str\n * @param {number} index\n * @param {string} char\n */\nfunction insertCharAtIndex(str, index, char) {\n\treturn str.slice(0, index) + char + str.slice(index, str.length);\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {node is import('postcss-value-parser').SpaceNode & { value: ' ' } }\n */\nfunction isSingleSpace(node) {\n\treturn node != null && node.type === 'space' && node.value === ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @param {Set<string>} [operators]\n * @returns {node is import('postcss-value-parser').WordNode}\n */\nfunction isOperator(node, operators = OPERATORS) {\n\treturn node != null && node.type === 'word' && operators.has(node.value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-name-case',\n};\n\nconst mapLowercaseFunctionNamesToCamelCase = new Map();\n\nfor (const func of keywordSets.camelCaseFunctionNames) {\n\tmapLowercaseFunctionNamesToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needFix = false;\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || !isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionName = node.value;\n\t\t\t\tconst functionNameLowerCase = functionName.toLowerCase();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', functionName)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet expectedFunctionName = null;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseFunctionNamesToCamelCase.has(functionNameLowerCase)\n\t\t\t\t) {\n\t\t\t\t\texpectedFunctionName = mapLowercaseFunctionNamesToCamelCase.get(functionNameLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedFunctionName = functionNameLowerCase;\n\t\t\t\t} else {\n\t\t\t\t\texpectedFunctionName = functionName.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (functionName === expectedFunctionName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedFunctionName;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(functionName, expectedFunctionName),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tsetDeclarationValue(decl, parsed.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line function',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line function',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"!\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-bang-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(val: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < value.length) {\n\t\t\t\t\t\t\ttarget = value;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, val);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= value.length;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = val;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + ' ' + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict'\nmodule.exports = balanced\nfunction balanced (a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str)\n  if (b instanceof RegExp) b = maybeMatch(b, str)\n\n  const r = range(a, b, str)\n\n  return (\n    r && {\n      start: r[0],\n      end: r[1],\n      pre: str.slice(0, r[0]),\n      body: str.slice(r[0] + a.length, r[1]),\n      post: str.slice(r[1] + b.length)\n    }\n  )\n}\n\nfunction maybeMatch (reg, str) {\n  const m = str.match(reg)\n  return m ? m[0] : null\n}\n\nbalanced.range = range\nfunction range (a, b, str) {\n  let begs, beg, left, right, result\n  let ai = str.indexOf(a)\n  let bi = str.indexOf(b, ai + 1)\n  let i = ai\n\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi]\n    }\n    begs = []\n    left = str.length\n\n    while (i >= 0 && !result) {\n      if (i === ai) {\n        begs.push(i)\n        ai = str.indexOf(a, i + 1)\n      } else if (begs.length === 1) {\n        result = [begs.pop(), bi]\n      } else {\n        beg = begs.pop()\n        if (beg < left) {\n          left = beg\n          right = bi\n        }\n\n        bi = str.indexOf(b, i + 1)\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi\n    }\n\n    if (begs.length) {\n      result = [left, right]\n    }\n  }\n\n  return result\n}\n","'use strict';\n\nconst balancedMatch = require('balanced-match');\nconst valueParser = require('postcss-value-parser');\n\nconst { assert, isString, isRegExp } = require('./validateTypes');\n\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string | RegExp} functionName\n * @param {(expression: string, expressionIndex: number) => void} callback\n * @returns {void}\n */\nmodule.exports = function functionArgumentsSearch(source, functionName, callback) {\n\tvalueParser(source).walk((node) => {\n\t\tif (node.type !== 'function') return;\n\n\t\tconst { value } = node;\n\n\t\tif (isString(functionName) && value !== functionName) return;\n\n\t\tif (isRegExp(functionName) && !functionName.test(node.value)) return;\n\n\t\tconst parensMatch = balancedMatch('(', ')', source.slice(node.sourceIndex));\n\n\t\tassert(parensMatch);\n\n\t\tconst expression = parensMatch.body;\n\t\tconst parenLength = 1; // == '('\n\t\tconst expressionIndex = node.sourceIndex + value.length + parenLength;\n\n\t\tcallback(expression, expressionIndex);\n\t});\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected nonstandard direction',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-linear-gradient-no-nonstandard-direction',\n};\n\n/**\n * @param {string} source\n * @param {boolean} withToPrefix\n */\nfunction isStandardDirection(source, withToPrefix) {\n\tconst regexp = withToPrefix\n\t\t? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/\n\t\t: /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n\n\tconst matches = source.match(regexp);\n\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\tif (matches.length === 2) {\n\t\treturn true;\n\t}\n\n\t// Cannot repeat side-or-corner, e.g. \"to top top\"\n\tif (matches.length === 3 && matches[1] !== matches[2]) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunctionArgumentsSearch(\n\t\t\t\t\tvalueParser.stringify(valueNode).toLowerCase(),\n\t\t\t\t\t/^(-webkit-|-moz-|-o-|-ms-)?linear-gradient$/i,\n\t\t\t\t\t(expression, expressionIndex) => {\n\t\t\t\t\t\tconst args = expression.split(',');\n\t\t\t\t\t\tconst firstArg = (args[0] || '').trim();\n\n\t\t\t\t\t\t// If the first arg is not standard, return early\n\t\t\t\t\t\tif (!isStandardSyntaxValue(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first character is a number, we can assume the user intends an angle\n\t\t\t\t\t\tif (/[\\d.]/.test(firstArg.charAt(0))) {\n\t\t\t\t\t\t\tif (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The first argument may not be a direction: it may be an angle,\n\t\t\t\t\t\t// or a color stop (in which case user gets default direction, \"to bottom\")\n\t\t\t\t\t\t// cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\t\t\t\t\t\tif (!/left|right|top|bottom/.test(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst withToPrefix = !vendor.prefix(valueNode.value);\n\n\t\t\t\t\t\tif (!isStandardDirection(firstArg, withToPrefix)) {\n\t\t\t\t\t\t\tcomplain();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfunction complain() {\n\t\t\t\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex;\n\t\t\t\t\t\t\tconst endIndex = index + (args[0] || '').trimEnd().length;\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-newline-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected newline after \"(\"',\n\texpectedClosing: 'Expected newline before \")\"',\n\texpectedOpeningMultiLine: 'Expected newline after \"(\" in a multi-line function',\n\trejectedOpeningMultiLine: 'Unexpected whitespace after \"(\" in a multi-line function',\n\texpectedClosingMultiLine: 'Expected newline before \")\" in a multi-line function',\n\trejectedClosingMultiLine: 'Unexpected whitespace before \")\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-parentheses-newline-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isMultiLine = !isSingleLineString(functionString);\n\t\t\t\tconst containsNewline = (/** @type {string} */ str) => str.includes('\\n');\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\t\t\t\tconst checkBefore = getCheckBefore(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkBefore !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\t\t\t\tconst checkAfter = getCheckAfter(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkAfter !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-value-parser').FunctionNode} FunctionNode */\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckBefore(valueNode) {\n\tlet before = valueNode.before;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tbefore += node.value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\treturn before;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckAfter(valueNode) {\n\tlet after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tafter = node.value + after;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tafter += valueNode.after;\n\n\treturn after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixBeforeForAlways(valueNode, newline) {\n\tlet target;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\ttarget = node;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tif (target) {\n\t\ttarget.value = newline + target.value;\n\t} else {\n\t\tvalueNode.before = newline + valueNode.before;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixBeforeForNever(valueNode) {\n\tvalueNode.before = '';\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixAfterForAlways(valueNode, newline) {\n\tvalueNode.after = newline + valueNode.after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixAfterForNever(valueNode) {\n\tvalueNode.after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\nmodule.exports = function (url) {\n\tif (url.length === 0) {\n\t\treturn true;\n\t}\n\n\t// Sass interpolation works anywhere\n\tif (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n\t\treturn false;\n\t}\n\n\t// Inside `'` and `\"` work only LESS interpolation\n\tif ((url.startsWith(`'`) && url.endsWith(`'`)) || (url.startsWith(`\"`) && url.endsWith(`\"`))) {\n\t\tif (hasLessInterpolation(url)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Less variable works only at the beginning\n\t// Check is less variable, allow use '@url/some/path'\n\t// https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\tif (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n\t\treturn false;\n\t}\n\n\t// In url without quotes scss variable can be everywhere\n\t// But in this case it is allowed to use only specific characters\n\t// Also forbidden \"/\" at the end of url\n\tif (url.includes('$') && /^[$\\s\\w+\\-,./*'\"]+$/.test(url) && !url.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (functionName) => `Expected quotes around \"${functionName}\" function argument`,\n\trejected: (functionName) => `Unexpected quotes around \"${functionName}\" function argument`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-quotes',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['empty'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(checkAtRuleParams);\n\t\troot.walkDecls(checkDeclParams);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkDeclParams(decl) {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, decl, index, 'url');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleParams(atRule) {\n\t\t\tconst atRuleParamsLowerCase = atRule.params.toLowerCase();\n\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} args\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} functionName\n\t\t */\n\t\tfunction checkArgs(args, node, index, functionName) {\n\t\t\tlet shouldHasQuotes = primary === 'always';\n\n\t\t\tconst leftTrimmedArgs = args.trimStart();\n\n\t\t\tif (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = index + args.length - leftTrimmedArgs.length;\n\t\t\tconst complaintEndIndex = index + args.length;\n\t\t\tconst hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n\n\t\t\tconst trimmedArg = args.trim();\n\t\t\tconst isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n\t\t\tif (optionsMatches(secondaryOptions, 'except', 'empty') && isEmptyArgument) {\n\t\t\t\tshouldHasQuotes = !shouldHasQuotes;\n\t\t\t}\n\n\t\t\tif (shouldHasQuotes) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.expected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t} else {\n\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.rejected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-max-empty-lines',\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction placeIndexOnValueStart(decl) {\n\tif (decl.raws.between == null) throw new Error('`between` must be present');\n\n\treturn decl.prop.length + decl.raws.between.length - 1;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst stringValue = getDeclarationValue(decl);\n\t\t\t/** @type {Array<[string, string]>} */\n\t\t\tconst splittedValue = [];\n\t\t\tlet sourceIndexStart = 0;\n\n\t\t\tvalueParser(stringValue).walk((node) => {\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'function' /* ignore non functions */ ||\n\t\t\t\t\tnode.value.length === 0 /* ignore sass lists */\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stringifiedNode = valueParser.stringify(node);\n\n\t\t\t\tif (\n\t\t\t\t\t!violatedLFNewLinesRegex.test(stringifiedNode) &&\n\t\t\t\t\t!violatedCRLFNewLinesRegex.test(stringifiedNode)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst newNodeString = stringifiedNode\n\t\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\t\tsplittedValue.push([\n\t\t\t\t\t\tstringValue.slice(sourceIndexStart, node.sourceIndex),\n\t\t\t\t\t\tnewNodeString,\n\t\t\t\t\t]);\n\t\t\t\t\tsourceIndexStart = node.sourceIndex + stringifiedNode.length;\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: placeIndexOnValueStart(decl) + node.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (context.fix && splittedValue.length > 0) {\n\t\t\t\tconst updatedValue =\n\t\t\t\t\tsplittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') +\n\t\t\t\t\tstringValue.slice(sourceIndexStart);\n\n\t\t\t\tsetDeclarationValue(decl, updatedValue);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-no-scheme-relative';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected scheme-relative url',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-no-scheme-relative',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst url = args.trim().replace(/^['\"]+|['\"]+$/g, '');\n\n\t\t\t\tif (!isStandardSyntaxUrl(url) || !url.startsWith('//')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fs = require('fs');\nconst valueParser = require('postcss-value-parser');\nconst functionsListPath = require('css-functions-list');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isCustomFunction = require('../../utils/isCustomFunction');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected unknown function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst functionsList = JSON.parse(fs.readFileSync(functionsListPath.toString(), 'utf8'));\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\tconst name = node.value;\n\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomFunction(name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (functionsList.includes(name.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: name,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is custom / user-defined\n * https://github.com/w3c/css-houdini-drafts/issues/1007\n * @param {string} func\n * @returns {boolean}\n */\nmodule.exports = function (func) {\n\treturn func.startsWith('--');\n};\n","'use strict';\n\nconst { URL } = require('url');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\nmodule.exports = function (urlString) {\n\tlet protocol = null;\n\n\ttry {\n\t\tprotocol = new URL(urlString).protocol;\n\t} catch {\n\t\treturn null;\n\t}\n\n\tif (protocol === null || typeof protocol === 'undefined') {\n\t\treturn null;\n\t}\n\n\tconst scheme = protocol.slice(0, -1); // strip trailing `:`\n\n\t// The URL spec does not require a scheme to be followed by `//`, but checking\n\t// for it allows this rule to differentiate <scheme>:<hostname> urls from\n\t// <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\tconst slashIndex = protocol.length;\n\tconst expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n\tconst isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n\tif (isSchemeLessUrl) {\n\t\treturn null;\n\t}\n\n\treturn scheme;\n};\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-scheme-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-whitespace-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected whitespace after \")\"',\n\trejected: 'Unexpected whitespace after \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-whitespace-after',\n};\n\nconst ACCEPTABLE_AFTER_CLOSING_PAREN = new Set([')', ',', '}', ':', '/', undefined]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string} value\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction check(node, value, nodeIndex, fix) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: value,\n\t\t\t\t\ttarget: ')',\n\t\t\t\t\tfunctionArguments: 'only',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tcheckClosingParen(value, match.startIndex + 1, node, nodeIndex, fix);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction checkClosingParen(source, index, node, nodeIndex, fix) {\n\t\t\tconst nextChar = source.charAt(index);\n\n\t\t\tif (!nextChar) return;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\t// Allow for the next character to be a single empty space,\n\t\t\t\t// another closing parenthesis, a comma, or the end of the value\n\t\t\t\tif (nextChar === ' ') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (nextChar === '\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (source.slice(index, index + 2) === '\\r\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ACCEPTABLE_AFTER_CLOSING_PAREN.has(nextChar)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t} else if (primary === 'never' && isWhitespace(nextChar)) {\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} value\n\t\t */\n\t\tfunction createFixer(value) {\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\t\t\t/** @type {(index: number) => void} */\n\t\t\tlet applyFix;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\tfixed += value.slice(lastIndex, index) + ' ';\n\t\t\t\t\tlastIndex = index;\n\t\t\t\t};\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\tlet whitespaceEndIndex = index + 1;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\twhitespaceEndIndex < value.length &&\n\t\t\t\t\t\tisWhitespace(value.charAt(whitespaceEndIndex))\n\t\t\t\t\t) {\n\t\t\t\t\t\twhitespaceEndIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tfixed += value.slice(lastIndex, index);\n\t\t\t\t\tlastIndex = whitespaceEndIndex;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tapplyFix,\n\t\t\t\tget hasFixed() {\n\t\t\t\t\treturn Boolean(lastIndex);\n\t\t\t\t},\n\t\t\t\tget fixed() {\n\t\t\t\t\treturn fixed + value.slice(lastIndex);\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst param = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst fixer = context.fix && createFixer(param);\n\n\t\t\tcheck(atRule, param, atRuleParamIndex(atRule), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = fixer.fixed;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = fixer.fixed;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\t\t\tconst fixer = context.fix && createFixer(value);\n\n\t\t\tcheck(decl, value, declarationValueIndex(decl), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, fixer.fixed);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-scheme-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'hue-degree-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/hue-degree-notation',\n};\n\nconst HUE_FIRST_ARG_FUNCS = ['hsl', 'hsla', 'hwb'];\nconst HUE_THIRD_ARG_FUNCS = ['lch'];\nconst HUE_FUNCS = new Set([...HUE_FIRST_ARG_FUNCS, ...HUE_THIRD_ARG_FUNCS]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['angle', 'number'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\tif (!HUE_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\tconst hue = findHue(node);\n\n\t\t\t\tif (!hue) return;\n\n\t\t\t\tconst { value } = hue;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isDegree(value) && !isNumber(value)) return;\n\n\t\t\t\tif (primary === 'angle' && isDegree(value)) return;\n\n\t\t\t\tif (primary === 'number' && isNumber(value)) return;\n\n\t\t\t\tconst fixed = primary === 'angle' ? asDegree(value) : asNumber(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\thue.value = fixed;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst valueIndex = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: valueIndex + hue.sourceIndex,\n\t\t\t\t\tendIndex: valueIndex + hue.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n */\nfunction asDegree(value) {\n\treturn `${value}deg`;\n}\n\n/**\n * @param {string} value\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tif (dimension) return dimension.number;\n\n\tthrow new TypeError(`The \"${value}\" value must have a unit`);\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction findHue(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\tconst value = node.value.toLowerCase();\n\n\tif (HUE_FIRST_ARG_FUNCS.includes(value)) {\n\t\treturn args[0];\n\t}\n\n\tif (HUE_THIRD_ARG_FUNCS.includes(value)) {\n\t\treturn args[2];\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n */\nfunction isDegree(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit.toLowerCase() === 'deg';\n}\n\n/**\n * @param {string} value\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {AtRule} atRule\n * @param {string} params\n * @returns {AtRule} The atRulearation that was passed in.\n */\nmodule.exports = function setAtRuleParams(atRule, params) {\n\tconst raws = atRule.raws;\n\n\tif (raws.params) {\n\t\traws.params.raw = params;\n\t} else {\n\t\tatRule.params = params;\n\t}\n\n\treturn atRule;\n};\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string}\n */\nmodule.exports = function getAtRuleParams(atRule) {\n\tconst raws = atRule.raws;\n\n\treturn (raws.params && raws.params.raw) || atRule.params;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst ruleName = 'import-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/import-notation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['string', 'url'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, checkAtRuleImportParams);\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleImportParams(atRule) {\n\t\t\tconst params = getAtRuleParams(atRule);\n\t\t\tconst parsed = valueParser(params);\n\n\t\t\tfor (const node of parsed.nodes) {\n\t\t\t\tconst start = atRuleParamIndex(atRule);\n\t\t\t\tconst end = start + node.sourceEndIndex;\n\n\t\t\t\tif (primary === 'string') {\n\t\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\tconst urlFunctionFull = valueParser.stringify(node);\n\t\t\t\t\t\tconst urlFunctionArguments = valueParser.stringify(node.nodes);\n\n\t\t\t\t\t\tconst quotedUrlFunctionFirstArgument =\n\t\t\t\t\t\t\tnode.nodes[0] && node.nodes[0].type === 'word'\n\t\t\t\t\t\t\t\t? `\"${urlFunctionArguments}\"`\n\t\t\t\t\t\t\t\t: urlFunctionArguments;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${quotedUrlFunctionFirstArgument}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expected(urlFunctionFull, quotedUrlFunctionFirstArgument),\n\t\t\t\t\t\t\tatRule,\n\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'url') {\n\t\t\t\t\tif (node.type === 'space') return;\n\n\t\t\t\t\tif (node.type === 'word' || node.type === 'string') {\n\t\t\t\t\t\tconst path = valueParser.stringify(node);\n\n\t\t\t\t\t\tconst urlFunctionFull = `url(${path})`;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${urlFunctionFull}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst quotedNodeValue =\n\t\t\t\t\t\t\tnode.type === 'word' ? `\"${node.value}\"` : `${node.quote}${node.value}${node.quote}`;\n\n\t\t\t\t\t\tcomplain(messages.expected(quotedNodeValue, urlFunctionFull), atRule, start, end);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'linebreaks';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (linebreak) => `Expected linebreak to be ${linebreak}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/linebreaks',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['unix', 'windows'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldHaveCR = primary === 'windows';\n\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif ('selector' in node) {\n\t\t\t\t\tnode.selector = fixData(node.selector);\n\t\t\t\t}\n\n\t\t\t\tif ('value' in node) {\n\t\t\t\t\tnode.value = fixData(node.value);\n\t\t\t\t}\n\n\t\t\t\tif ('text' in node) {\n\t\t\t\t\tnode.text = fixData(node.text);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = fixData(node.raws.before);\n\t\t\t\t}\n\n\t\t\t\tif (typeof node.raws.after === 'string') {\n\t\t\t\t\tnode.raws.after = fixData(node.raws.after);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (typeof root.raws.after === 'string') {\n\t\t\t\troot.raws.after = fixData(root.raws.after);\n\t\t\t}\n\t\t} else {\n\t\t\tif (root.source == null) throw new Error('The root node must have a source');\n\n\t\t\tconst lines = root.source.input.css.split('\\n');\n\n\t\t\tfor (let [i, line] of lines.entries()) {\n\t\t\t\tif (i < lines.length - 1 && !line.includes('\\r')) {\n\t\t\t\t\tline += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (hasError(line)) {\n\t\t\t\t\tconst lineNum = i + 1;\n\t\t\t\t\tconst colNum = line.length;\n\n\t\t\t\t\treportNewlineError(lineNum, colNum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} dataToCheck\n\t\t */\n\t\tfunction hasError(dataToCheck) {\n\t\t\tconst hasNewlineToVerify = /[\\r\\n]/.test(dataToCheck);\n\t\t\tconst hasCR = hasNewlineToVerify ? /\\r/.test(dataToCheck) : false;\n\n\t\t\treturn hasNewlineToVerify && hasCR !== shouldHaveCR;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} data\n\t\t */\n\t\tfunction fixData(data) {\n\t\t\tif (data) {\n\t\t\t\tlet res = data.replace(/\\r/g, '');\n\n\t\t\t\tif (shouldHaveCR) {\n\t\t\t\t\tres = res.replace(/\\n/g, '\\r\\n');\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\n\t\t * @param {number} line\n\t\t * @param {number} column\n\t\t */\n\t\tfunction reportNewlineError(line, column) {\n\t\t\t// Creating a node manually helps us to point to empty lines.\n\t\t\tconst node = postcss.rule({\n\t\t\t\tsource: {\n\t\t\t\t\tstart: { line, column, offset: 0 },\n\t\t\t\t\tinput: new postcss.Input(''),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nmodule.exports = ['calc', 'clamp', 'max', 'min'];\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isMathFunction = require('../../utils/isMathFunction');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'length-zero-no-unit';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected unit',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/length-zero-no-unit',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-properties'],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tlet needsFix;\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode) {\n\t\t\tconst { value, sourceIndex } = valueNode;\n\n\t\t\tif (isMathFunction(valueNode)) return false;\n\n\t\t\tif (isFunction(valueNode) && optionsMatches(secondaryOptions, 'ignoreFunctions', value))\n\t\t\t\treturn false;\n\n\t\t\tif (!isWord(valueNode)) return;\n\n\t\t\tconst numberUnit = valueParser.unit(value);\n\n\t\t\tif (numberUnit === false) return;\n\n\t\t\tconst { number, unit } = numberUnit;\n\n\t\t\tif (unit === '') return;\n\n\t\t\tif (!isLength(unit)) return;\n\n\t\t\tif (isFraction(unit)) return;\n\n\t\t\tif (!isZero(number)) return;\n\n\t\t\tif (context.fix) {\n\t\t\t\tlet regularNumber = number;\n\n\t\t\t\tif (regularNumber.startsWith('.')) {\n\t\t\t\t\tregularNumber = number.slice(1);\n\t\t\t\t}\n\n\t\t\t\tvalueNode.value = regularNumber;\n\t\t\t\tneedsFix = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = nodeIndex + sourceIndex + number.length;\n\t\t\tconst endIndex = index + unit.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} node\n\t\t */\n\t\tfunction checkAtRule(node) {\n\t\t\tif (!isStandardSyntaxAtRule(node)) return;\n\n\t\t\tneedsFix = false;\n\n\t\t\tconst index = atRuleParamIndex(node);\n\t\t\tconst parsedValue = valueParser(getAtRuleParams(node));\n\n\t\t\tparsedValue.walk((valueNode) => check(node, index, valueNode));\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetAtRuleParams(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} node\n\t\t */\n\t\tfunction checkDecl(node) {\n\t\t\tneedsFix = false;\n\n\t\t\tconst { prop } = node;\n\n\t\t\tif (isLineHeight(prop)) return;\n\n\t\t\tif (isFlex(prop)) return;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'custom-properties') && isCustomProperty(prop))\n\t\t\t\treturn;\n\n\t\t\tconst index = declarationValueIndex(node);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(node));\n\n\t\t\tparsedValue.walk((valueNode, valueNodeIndex, valueNodes) => {\n\t\t\t\tif (isLineHeightValue(node, valueNodes, valueNodeIndex)) return;\n\n\t\t\t\treturn check(node, index, valueNode);\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules(checkAtRule);\n\t\troot.walkDecls(checkDecl);\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {import('postcss-value-parser').Node[]} nodes\n * @param {number} index\n */\nfunction isLineHeightValue({ prop }, nodes, index) {\n\tconst lastNode = nodes[index - 1];\n\n\treturn (\n\t\tprop.toLowerCase() === 'font' && lastNode && lastNode.type === 'div' && lastNode.value === '/'\n\t);\n}\n\n/**\n * @param {string} prop\n */\nfunction isLineHeight(prop) {\n\treturn prop.toLowerCase() === 'line-height';\n}\n\n/**\n * @param {string} prop\n */\nfunction isFlex(prop) {\n\treturn prop.toLowerCase() === 'flex';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isWord({ type }) {\n\treturn type === 'word';\n}\n\n/**\n * @param {string} unit\n */\nfunction isLength(unit) {\n\treturn keywordSets.lengthUnits.has(unit.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isFunction({ type }) {\n\treturn type === 'function';\n}\n\n/**\n * @param {string} unit\n */\nfunction isFraction(unit) {\n\treturn unit.toLowerCase() === 'fr';\n}\n\n/**\n * @param {string} number\n */\nfunction isZero(number) {\n\treturn Number.parseFloat(number) === 0;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst MATH_FUNCTIONS = require('../reference/mathFunctions');\n\n/**\n * Check whether a node is math function\n *\n * @param {import('postcss-value-parser').Node} node postcss-value-parser node\n * @return {boolean} If `true`, the node is math function\n */\nmodule.exports = function isMathFunction(node) {\n\treturn node.type === 'function' && MATH_FUNCTIONS.includes(node.value.toLowerCase());\n};\n","'use strict';\nconst isRegexp = require('is-regexp');\n\nconst flagMap = {\n\tglobal: 'g',\n\tignoreCase: 'i',\n\tmultiline: 'm',\n\tdotAll: 's',\n\tsticky: 'y',\n\tunicode: 'u'\n};\n\nmodule.exports = (regexp, options = {}) => {\n\tif (!isRegexp(regexp)) {\n\t\tthrow new TypeError('Expected a RegExp instance');\n\t}\n\n\tconst flags = Object.keys(flagMap).map(flag => (\n\t\t(typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : ''\n\t)).join('');\n\n\tconst clonedRegexp = new RegExp(options.source || regexp.source, flags);\n\n\tclonedRegexp.lastIndex = typeof options.lastIndex === 'number' ?\n\t\toptions.lastIndex :\n\t\tregexp.lastIndex;\n\n\treturn clonedRegexp;\n};\n","'use strict';\n\nmodule.exports = input => Object.prototype.toString.call(input) === '[object RegExp]';\n","'use strict';\nconst cloneRegexp = require('clone-regexp');\n\nmodule.exports = (regexp, string) => {\n\tlet match;\n\tconst matches = [];\n\tconst clonedRegexp = cloneRegexp(regexp, {lastIndex: 0});\n\tconst isGlobal = clonedRegexp.global;\n\n\t// eslint-disable-next-line no-cond-assign\n\twhile (match = clonedRegexp.exec(string)) {\n\t\tmatches.push({\n\t\t\tmatch: match[0],\n\t\t\tsubMatches: match.slice(1),\n\t\t\tindex: match.index\n\t\t});\n\n\t\tif (!isGlobal) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn matches;\n};\n","'use strict';\n\nconst execall = require('execall');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-line-length';\nconst EXCLUDED_PATTERNS = [\n\t/url\\(\\s*(\\S.*\\S)\\s*\\)/gi, // allow tab, whitespace in url content\n\t/@import\\s+(['\"].*['\"])/gi,\n];\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) =>\n\t\t`Expected line length to be no more than ${max} ${max === 1 ? 'character' : 'characters'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-line-length',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['non-comments', 'comments'],\n\t\t\t\t\tignorePattern: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source');\n\t\t}\n\n\t\tconst ignoreNonComments = optionsMatches(secondaryOptions, 'ignore', 'non-comments');\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\t\t// Array of skipped sub strings, i.e `url(...)`, `@import \"...\"`\n\t\t/** @type {Array<[number, number]>} */\n\t\tlet skippedSubStrings = [];\n\t\tlet skippedSubStringsIndex = 0;\n\n\t\tfor (const pattern of EXCLUDED_PATTERNS)\n\t\t\tfor (const match of execall(pattern, rootString)) {\n\t\t\t\tconst subMatch = match.subMatches[0] || '';\n\t\t\t\tconst startOfSubString = match.index + match.match.indexOf(subMatch);\n\n\t\t\t\tskippedSubStrings.push([startOfSubString, startOfSubString + subMatch.length]);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\tskippedSubStrings = skippedSubStrings.sort((a, b) => a[0] - b[0]);\n\n\t\t// Check first line\n\t\tcheckNewline({ endIndex: 0 });\n\t\t// Check subsequent lines\n\t\tstyleSearch({ source: rootString, target: ['\\n'], comments: 'check' }, (match) =>\n\t\t\tcheckNewline(match),\n\t\t);\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: root,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {number} start\n\t\t * @param {number} end\n\t\t */\n\t\tfunction tryToPopSubString(start, end) {\n\t\t\tconst skippedSubString = skippedSubStrings[skippedSubStringsIndex];\n\n\t\t\tassert(skippedSubString);\n\t\t\tconst [startSubString, endSubString] = skippedSubString;\n\n\t\t\t// Excluded substring does not presented in current line\n\t\t\tif (end < startSubString) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// Compute excluded substring size regarding to current line indexes\n\t\t\tconst excluded = Math.min(end, endSubString) - Math.max(start, startSubString);\n\n\t\t\t// Current substring is out of range for next lines\n\t\t\tif (endSubString <= end) {\n\t\t\t\tskippedSubStringsIndex++;\n\t\t\t}\n\n\t\t\treturn excluded;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch | { endIndex: number }} match\n\t\t */\n\t\tfunction checkNewline(match) {\n\t\t\tlet nextNewlineIndex = rootString.indexOf('\\n', match.endIndex);\n\n\t\t\tif (rootString[nextNewlineIndex - 1] === '\\r') {\n\t\t\t\tnextNewlineIndex -= 1;\n\t\t\t}\n\n\t\t\t// Accommodate last line\n\t\t\tif (nextNewlineIndex === -1) {\n\t\t\t\tnextNewlineIndex = rootString.length;\n\t\t\t}\n\n\t\t\tconst rawLineLength = nextNewlineIndex - match.endIndex;\n\t\t\tconst excludedLength = skippedSubStrings[skippedSubStringsIndex]\n\t\t\t\t? tryToPopSubString(match.endIndex, nextNewlineIndex)\n\t\t\t\t: 0;\n\t\t\tconst lineText = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\t// Case sensitive ignorePattern match\n\t\t\tif (optionsMatches(secondaryOptions, 'ignorePattern', lineText)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the line's length is less than or equal to the specified\n\t\t\t// max, ignore it ... So anything below is liable to be complained about.\n\t\t\t// **Note that the length of any url arguments or import urls\n\t\t\t// are excluded from the calculation.**\n\t\t\tif (rawLineLength - excludedLength <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = nextNewlineIndex - 1;\n\n\t\t\tif (ignoreComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars === '/*' || nextTwoChars === '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignoreNonComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn complain(complaintIndex);\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars !== '/*' && nextTwoChars !== '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn complain(complaintIndex);\n\t\t\t}\n\n\t\t\t// If there are no spaces besides initial (indent) spaces, ignore it\n\t\t\tconst lineString = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\tif (!lineString.replace(/^\\s+/, '').includes(' ')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn complain(complaintIndex);\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframes-name-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (keyframeName, pattern) =>\n\t\t`Expected keyframe name \"${keyframeName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframes-name-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regex = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules(/keyframes/i, (keyframesNode) => {\n\t\t\tconst value = keyframesNode.params;\n\n\t\t\tif (regex.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(keyframesNode);\n\t\t\tconst endIndex = index + value.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\tnode: keyframesNode,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a selector is standard\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(selector)) {\n\t\treturn false;\n\t}\n\n\t// SCSS placeholder selectors\n\tif (selector.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// SCSS nested properties\n\tif (selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\t// Less :extend()\n\tif (/:extend(?:\\(.*?\\))?/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less mixin with resolved nested selectors (e.g. .foo().bar or .foo(@a, @b)[bar])\n\tif (/\\.[\\w-]+\\(.*\\).+/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less non-outputting mixin definition (e.g. .mixin() {})\n\tif (selector.endsWith(')') && !selector.includes(':')) {\n\t\treturn false;\n\t}\n\n\t// Less Parametric mixins (e.g. .mixin(@variable: x) {})\n\tif (/\\(@.*\\)$/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// ERB template tags\n\tif (selector.includes('<%') || selector.includes('%>')) {\n\t\treturn false;\n\t}\n\n\t//  SCSS and Less comments\n\tif (selector.includes('//')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function (rule) {\n\tif (rule.type !== 'rule') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less &:extend rule\n\tif ('extend' in rule && rule.extend) {\n\t\treturn false;\n\t}\n\n\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc;\n\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = getProp;\n\nfunction getProp(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      return undefined;\n    }\n\n    obj = obj[prop];\n  }\n\n  return obj;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = ensureObject;\n\nfunction ensureObject(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      obj[prop] = {};\n    }\n\n    obj = obj[prop];\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = stripComments;\n\nfunction stripComments(str) {\n  var s = \"\";\n  var commentStart = str.indexOf(\"/*\");\n  var lastEnd = 0;\n\n  while (commentStart >= 0) {\n    s = s + str.slice(lastEnd, commentStart);\n    var commentEnd = str.indexOf(\"*/\", commentStart + 2);\n\n    if (commentEnd < 0) {\n      return s;\n    }\n\n    lastEnd = commentEnd + 2;\n    commentStart = str.indexOf(\"/*\", lastEnd);\n  }\n\n  s = s + str.slice(lastEnd);\n  return s;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.stripComments = exports.ensureObject = exports.getProp = exports.unesc = void 0;\n\nvar _unesc = _interopRequireDefault(require(\"./unesc\"));\n\nexports.unesc = _unesc[\"default\"];\n\nvar _getProp = _interopRequireDefault(require(\"./getProp\"));\n\nexports.getProp = _getProp[\"default\"];\n\nvar _ensureObject = _interopRequireDefault(require(\"./ensureObject\"));\n\nexports.ensureObject = _ensureObject[\"default\"];\n\nvar _stripComments = _interopRequireDefault(require(\"./stripComments\"));\n\nexports.stripComments = _stripComments[\"default\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _util = require(\"../util\");\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar cloneNode = function cloneNode(obj, parent) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var value = obj[i];\n    var type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n\n  return cloned;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || '';\n    this.spaces.after = this.spaces.after || '';\n  }\n\n  var _proto = Node.prototype;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  };\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  };\n\n  _proto.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n\n  _proto.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */\n  ;\n\n  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */\n  ;\n\n  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    this.raws[name] = valueEscaped;\n  }\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */\n  ;\n\n  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  }\n  /**\n   *\n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */\n  ;\n\n  _proto.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n\n      if (this.source.end.line < line) {\n        return false;\n      }\n\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return undefined;\n  };\n\n  _proto.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n\n  _proto.valueToString = function valueToString() {\n    return String(this.stringifyProperty(\"value\"));\n  };\n\n  _proto.toString = function toString() {\n    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');\n  };\n\n  _createClass(Node, [{\n    key: \"rawSpaceBefore\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: \"rawSpaceAfter\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports[\"default\"] = Node;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.UNIVERSAL = exports.ATTRIBUTE = exports.CLASS = exports.COMBINATOR = exports.COMMENT = exports.ID = exports.NESTING = exports.PSEUDO = exports.ROOT = exports.SELECTOR = exports.STRING = exports.TAG = void 0;\nvar TAG = 'tag';\nexports.TAG = TAG;\nvar STRING = 'string';\nexports.STRING = STRING;\nvar SELECTOR = 'selector';\nexports.SELECTOR = SELECTOR;\nvar ROOT = 'root';\nexports.ROOT = ROOT;\nvar PSEUDO = 'pseudo';\nexports.PSEUDO = PSEUDO;\nvar NESTING = 'nesting';\nexports.NESTING = NESTING;\nvar ID = 'id';\nexports.ID = ID;\nvar COMMENT = 'comment';\nexports.COMMENT = COMMENT;\nvar COMBINATOR = 'combinator';\nexports.COMBINATOR = COMBINATOR;\nvar CLASS = 'class';\nexports.CLASS = CLASS;\nvar ATTRIBUTE = 'attribute';\nexports.ATTRIBUTE = ATTRIBUTE;\nvar UNIVERSAL = 'universal';\nexports.UNIVERSAL = UNIVERSAL;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar types = _interopRequireWildcard(require(\"./types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n\n  function Container(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n\n    return _this;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.append = function append(selector) {\n    selector.parent = this;\n    this.nodes.push(selector);\n    return this;\n  };\n\n  _proto.prepend = function prepend(selector) {\n    selector.parent = this;\n    this.nodes.unshift(selector);\n    return this;\n  };\n\n  _proto.at = function at(index) {\n    return this.nodes[index];\n  };\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n\n    return this.nodes.indexOf(child);\n  };\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.at(child).parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n      var node = _step.value;\n      node.parent = undefined;\n    }\n\n    this.nodes = [];\n    return this;\n  };\n\n  _proto.empty = function empty() {\n    return this.removeAll();\n  };\n\n  _proto.insertAfter = function insertAfter(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex + 1, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (oldIndex <= index) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.insertBefore = function insertBefore(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index <= oldIndex) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {\n    var found = undefined;\n    this.each(function (node) {\n      if (node.atPosition) {\n        var foundChild = node.atPosition(line, col);\n\n        if (foundChild) {\n          found = foundChild;\n          return false;\n        }\n      } else if (node.isAtPosition(line, col)) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n  /**\n   * Return the most specific node at the line and column number given.\n   * The source location is based on the original parsed location, locations aren't\n   * updated as selector nodes are mutated.\n   * \n   * Note that this location is relative to the location of the first character\n   * of the selector, and not the location of the selector in the overall document\n   * when used in conjunction with postcss.\n   *\n   * If not found, returns undefined.\n   * @param {number} line The line number of the node to find. (1-based index)\n   * @param {number} col  The column number of the node to find. (1-based index)\n   */\n  ;\n\n  _proto.atPosition = function atPosition(line, col) {\n    if (this.isAtPosition(line, col)) {\n      return this._findChildAtPosition(line, col) || this;\n    } else {\n      return undefined;\n    }\n  };\n\n  _proto._inferEndPosition = function _inferEndPosition() {\n    if (this.last && this.last.source && this.last.source.end) {\n      this.source = this.source || {};\n      this.source.end = this.source.end || {};\n      Object.assign(this.source.end, this.last.source.end);\n    }\n  };\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) {\n      this.lastEach = 0;\n    }\n\n    if (!this.indexes) {\n      this.indexes = {};\n    }\n\n    this.lastEach++;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n\n    if (!this.length) {\n      return undefined;\n    }\n\n    var index, result;\n\n    while (this.indexes[id] < this.length) {\n      index = this.indexes[id];\n      result = callback(this.at(index), index);\n\n      if (result === false) {\n        break;\n      }\n\n      this.indexes[id] += 1;\n    }\n\n    delete this.indexes[id];\n\n    if (result === false) {\n      return false;\n    }\n  };\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (node, i) {\n      var result = callback(node, i);\n\n      if (result !== false && node.length) {\n        result = node.walk(callback);\n      }\n\n      if (result === false) {\n        return false;\n      }\n    });\n  };\n\n  _proto.walkAttributes = function walkAttributes(callback) {\n    var _this2 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ATTRIBUTE) {\n        return callback.call(_this2, selector);\n      }\n    });\n  };\n\n  _proto.walkClasses = function walkClasses(callback) {\n    var _this3 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.CLASS) {\n        return callback.call(_this3, selector);\n      }\n    });\n  };\n\n  _proto.walkCombinators = function walkCombinators(callback) {\n    var _this4 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMBINATOR) {\n        return callback.call(_this4, selector);\n      }\n    });\n  };\n\n  _proto.walkComments = function walkComments(callback) {\n    var _this5 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMMENT) {\n        return callback.call(_this5, selector);\n      }\n    });\n  };\n\n  _proto.walkIds = function walkIds(callback) {\n    var _this6 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ID) {\n        return callback.call(_this6, selector);\n      }\n    });\n  };\n\n  _proto.walkNesting = function walkNesting(callback) {\n    var _this7 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.NESTING) {\n        return callback.call(_this7, selector);\n      }\n    });\n  };\n\n  _proto.walkPseudos = function walkPseudos(callback) {\n    var _this8 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.PSEUDO) {\n        return callback.call(_this8, selector);\n      }\n    });\n  };\n\n  _proto.walkTags = function walkTags(callback) {\n    var _this9 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.TAG) {\n        return callback.call(_this9, selector);\n      }\n    });\n  };\n\n  _proto.walkUniversals = function walkUniversals(callback) {\n    var _this10 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.UNIVERSAL) {\n        return callback.call(_this10, selector);\n      }\n    });\n  };\n\n  _proto.split = function split(callback) {\n    var _this11 = this;\n\n    var current = [];\n    return this.reduce(function (memo, node, index) {\n      var split = callback.call(_this11, node);\n      current.push(node);\n\n      if (split) {\n        memo.push(current);\n        current = [];\n      } else if (index === _this11.length - 1) {\n        memo.push(current);\n      }\n\n      return memo;\n    }, []);\n  };\n\n  _proto.map = function map(callback) {\n    return this.nodes.map(callback);\n  };\n\n  _proto.reduce = function reduce(callback, memo) {\n    return this.nodes.reduce(callback, memo);\n  };\n\n  _proto.every = function every(callback) {\n    return this.nodes.every(callback);\n  };\n\n  _proto.some = function some(callback) {\n    return this.nodes.some(callback);\n  };\n\n  _proto.filter = function filter(callback) {\n    return this.nodes.filter(callback);\n  };\n\n  _proto.sort = function sort(callback) {\n    return this.nodes.sort(callback);\n  };\n\n  _proto.toString = function toString() {\n    return this.map(String).join('');\n  };\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      return this.at(0);\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      return this.at(this.length - 1);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.nodes.length;\n    }\n  }]);\n\n  return Container;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Container;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n\n  function Root(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.ROOT;\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.toString = function toString() {\n    var str = this.reduce(function (memo, selector) {\n      memo.push(String(selector));\n      return memo;\n    }, []).join(',');\n    return this.trailingComma ? str + ',' : str;\n  };\n\n  _proto.error = function error(message, options) {\n    if (this._error) {\n      return this._error(message, options);\n    } else {\n      return new Error(message);\n    }\n  };\n\n  _createClass(Root, [{\n    key: \"errorGenerator\",\n    set: function set(handler) {\n      this._error = handler;\n    }\n  }]);\n\n  return Root;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Root;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Selector = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Selector, _Container);\n\n  function Selector(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.SELECTOR;\n    return _this;\n  }\n\n  return Selector;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Selector;\nmodule.exports = exports.default;","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClassName = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ClassName, _Node);\n\n  function ClassName(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.CLASS;\n    _this._constructed = true;\n    return _this;\n  }\n\n  var _proto = ClassName.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '.' + _Node.prototype.valueToString.call(this);\n  };\n\n  _createClass(ClassName, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      if (this._constructed) {\n        var escaped = (0, _cssesc[\"default\"])(v, {\n          isIdentifier: true\n        });\n\n        if (escaped !== v) {\n          (0, _util.ensureObject)(this, \"raws\");\n          this.raws.value = escaped;\n        } else if (this.raws) {\n          delete this.raws.value;\n        }\n      }\n\n      this._value = v;\n    }\n  }]);\n\n  return ClassName;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ClassName;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n\n  function Comment(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMMENT;\n    return _this;\n  }\n\n  return Comment;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Comment;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ID = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ID, _Node);\n\n  function ID(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.ID;\n    return _this;\n  }\n\n  var _proto = ID.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '#' + _Node.prototype.valueToString.call(this);\n  };\n\n  return ID;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ID;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Namespace = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Namespace, _Node);\n\n  function Namespace() {\n    return _Node.apply(this, arguments) || this;\n  }\n\n  var _proto = Namespace.prototype;\n\n  _proto.qualifiedName = function qualifiedName(value) {\n    if (this.namespace) {\n      return this.namespaceString + \"|\" + value;\n    } else {\n      return value;\n    }\n  };\n\n  _proto.valueToString = function valueToString() {\n    return this.qualifiedName(_Node.prototype.valueToString.call(this));\n  };\n\n  _createClass(Namespace, [{\n    key: \"namespace\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      if (namespace === true || namespace === \"*\" || namespace === \"&\") {\n        this._namespace = namespace;\n\n        if (this.raws) {\n          delete this.raws.namespace;\n        }\n\n        return;\n      }\n\n      var escaped = (0, _cssesc[\"default\"])(namespace, {\n        isIdentifier: true\n      });\n      this._namespace = namespace;\n\n      if (escaped !== namespace) {\n        (0, _util.ensureObject)(this, \"raws\");\n        this.raws.namespace = escaped;\n      } else if (this.raws) {\n        delete this.raws.namespace;\n      }\n    }\n  }, {\n    key: \"ns\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      this.namespace = namespace;\n    }\n  }, {\n    key: \"namespaceString\",\n    get: function get() {\n      if (this.namespace) {\n        var ns = this.stringifyProperty(\"namespace\");\n\n        if (ns === true) {\n          return '';\n        } else {\n          return ns;\n        }\n      } else {\n        return '';\n      }\n    }\n  }]);\n\n  return Namespace;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Namespace;\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Tag = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Tag, _Namespace);\n\n  function Tag(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.TAG;\n    return _this;\n  }\n\n  return Tag;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Tag;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar String = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(String, _Node);\n\n  function String(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.STRING;\n    return _this;\n  }\n\n  return String;\n}(_node[\"default\"]);\n\nexports[\"default\"] = String;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Pseudo = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Pseudo, _Container);\n\n  function Pseudo(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.PSEUDO;\n    return _this;\n  }\n\n  var _proto = Pseudo.prototype;\n\n  _proto.toString = function toString() {\n    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n    return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), params, this.rawSpaceAfter].join('');\n  };\n\n  return Pseudo;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Pseudo;\nmodule.exports = exports.default;","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","export const deprecate = fn => fn;\nexport const types = {\n  isNativeError: () => true\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports.unescapeValue = unescapeValue;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _unesc = _interopRequireDefault(require(\"../util/unesc\"));\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nvar _CSSESC_QUOTE_OPTIONS;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar deprecate = require(\"util-deprecate\");\n\nvar WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n\n  unescaped = (0, _unesc[\"default\"])(unescaped);\n\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\n\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n\n  if (opts.value === undefined) {\n    return opts;\n  }\n\n  warnOfDeprecatedConstructor();\n\n  var _unescapeValue = unescapeValue(opts.value),\n      quoteMark = _unescapeValue.quoteMark,\n      unescaped = _unescapeValue.unescaped;\n\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\n\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n\n  function Attribute(opts) {\n    var _this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n\n\n  var _proto = Attribute.prototype;\n\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var quoteMark = this._determineQuoteMark(options);\n\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc[\"default\"])(this._value, cssescopts);\n    return escaped;\n  };\n\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */\n  ;\n\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n\n    this._syncRawValue();\n  }\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */\n  ;\n\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc[\"default\"])(v, {\n        isIdentifier: true\n      });\n\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc[\"default\"])(v, opts);\n\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */\n  ;\n\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n\n    return quoteMark;\n  };\n\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc[\"default\"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc[\"default\"])(value, {\n        isIdentifier: true\n      });\n\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n\n    var attrSpaces = this._spacesFor(spaceName);\n\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */\n  ;\n\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n\n    var attributeSpaces = this._spacesFor(\"attribute\");\n\n    count += attributeSpaces.before.length;\n\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n\n    if (name === \"attributeNS\") {\n      return count;\n    }\n\n    count += this.namespaceString.length;\n\n    if (this.namespace) {\n      count += 1;\n    }\n\n    if (name === \"attribute\") {\n      return count;\n    }\n\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n\n    var operatorSpaces = this._spacesFor(\"operator\");\n\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n\n    count += operator.length;\n    count += operatorSpaces.after.length;\n\n    var valueSpaces = this._spacesFor(\"value\");\n\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n\n    count += value.length;\n    count += valueSpaces.after.length;\n\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n\n    count += insensitiveSpaces.before.length;\n\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n\n    return -1;\n  };\n\n  _proto.toString = function toString() {\n    var _this2 = this;\n\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n    if (this.operator && (this.value || this.value === '')) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */\n    ,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    ,\n    set: function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n            deprecatedUsage = _unescapeValue2.deprecatedUsage,\n            unescaped = _unescapeValue2.unescaped,\n            quoteMark = _unescapeValue2.quoteMark;\n\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n\n      this._attribute = name;\n    }\n  }]);\n\n  return Attribute;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Universal = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Universal, _Namespace);\n\n  function Universal(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.UNIVERSAL;\n    _this.value = '*';\n    return _this;\n  }\n\n  return Universal;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Universal;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Combinator = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Combinator, _Node);\n\n  function Combinator(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMBINATOR;\n    return _this;\n  }\n\n  return Combinator;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Combinator;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Nesting = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Nesting, _Node);\n\n  function Nesting(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.NESTING;\n    _this.value = '&';\n    return _this;\n  }\n\n  return Nesting;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Nesting;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = sortAscending;\n\nfunction sortAscending(list) {\n  return list.sort(function (a, b) {\n    return a - b;\n  });\n}\n\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.combinator = exports.word = exports.comment = exports.str = exports.tab = exports.newline = exports.feed = exports.cr = exports.backslash = exports.bang = exports.slash = exports.doubleQuote = exports.singleQuote = exports.space = exports.greaterThan = exports.pipe = exports.equals = exports.plus = exports.caret = exports.tilde = exports.dollar = exports.closeSquare = exports.openSquare = exports.closeParenthesis = exports.openParenthesis = exports.semicolon = exports.colon = exports.comma = exports.at = exports.asterisk = exports.ampersand = void 0;\nvar ampersand = 38; // `&`.charCodeAt(0);\n\nexports.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\n\nexports.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\n\nexports.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\n\nexports.comma = comma;\nvar colon = 58; // `:`.charCodeAt(0);\n\nexports.colon = colon;\nvar semicolon = 59; // `;`.charCodeAt(0);\n\nexports.semicolon = semicolon;\nvar openParenthesis = 40; // `(`.charCodeAt(0);\n\nexports.openParenthesis = openParenthesis;\nvar closeParenthesis = 41; // `)`.charCodeAt(0);\n\nexports.closeParenthesis = closeParenthesis;\nvar openSquare = 91; // `[`.charCodeAt(0);\n\nexports.openSquare = openSquare;\nvar closeSquare = 93; // `]`.charCodeAt(0);\n\nexports.closeSquare = closeSquare;\nvar dollar = 36; // `$`.charCodeAt(0);\n\nexports.dollar = dollar;\nvar tilde = 126; // `~`.charCodeAt(0);\n\nexports.tilde = tilde;\nvar caret = 94; // `^`.charCodeAt(0);\n\nexports.caret = caret;\nvar plus = 43; // `+`.charCodeAt(0);\n\nexports.plus = plus;\nvar equals = 61; // `=`.charCodeAt(0);\n\nexports.equals = equals;\nvar pipe = 124; // `|`.charCodeAt(0);\n\nexports.pipe = pipe;\nvar greaterThan = 62; // `>`.charCodeAt(0);\n\nexports.greaterThan = greaterThan;\nvar space = 32; // ` `.charCodeAt(0);\n\nexports.space = space;\nvar singleQuote = 39; // `'`.charCodeAt(0);\n\nexports.singleQuote = singleQuote;\nvar doubleQuote = 34; // `\"`.charCodeAt(0);\n\nexports.doubleQuote = doubleQuote;\nvar slash = 47; // `/`.charCodeAt(0);\n\nexports.slash = slash;\nvar bang = 33; // `!`.charCodeAt(0);\n\nexports.bang = bang;\nvar backslash = 92; // '\\\\'.charCodeAt(0);\n\nexports.backslash = backslash;\nvar cr = 13; // '\\r'.charCodeAt(0);\n\nexports.cr = cr;\nvar feed = 12; // '\\f'.charCodeAt(0);\n\nexports.feed = feed;\nvar newline = 10; // '\\n'.charCodeAt(0);\n\nexports.newline = newline;\nvar tab = 9; // '\\t'.charCodeAt(0);\n// Expose aliases primarily for readability.\n\nexports.tab = tab;\nvar str = singleQuote; // No good single character representation!\n\nexports.str = str;\nvar comment = -1;\nexports.comment = comment;\nvar word = -2;\nexports.word = word;\nvar combinator = -3;\nexports.combinator = combinator;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = tokenize;\nexports.FIELDS = void 0;\n\nvar t = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar _unescapable, _wordDelimiters;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);\nvar wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);\nvar hex = {};\nvar hexChars = \"0123456789abcdefABCDEF\";\n\nfor (var i = 0; i < hexChars.length; i++) {\n  hex[hexChars.charCodeAt(i)] = true;\n}\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word's first letter occurs\n */\n\n\nfunction consumeWord(css, start) {\n  var next = start;\n  var code;\n\n  do {\n    code = css.charCodeAt(next);\n\n    if (wordDelimiters[code]) {\n      return next - 1;\n    } else if (code === t.backslash) {\n      next = consumeEscape(css, next) + 1;\n    } else {\n      // All other characters are part of the word\n      next++;\n    }\n  } while (next < css.length);\n\n  return next - 1;\n}\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\n\n\nfunction consumeEscape(css, start) {\n  var next = start;\n  var code = css.charCodeAt(next + 1);\n\n  if (unescapable[code]) {// just consume the escape char\n  } else if (hex[code]) {\n    var hexDigits = 0; // consume up to 6 hex chars\n\n    do {\n      next++;\n      hexDigits++;\n      code = css.charCodeAt(next + 1);\n    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape\n\n\n    if (hexDigits < 6 && code === t.space) {\n      next++;\n    }\n  } else {\n    // the next char is part of the current word\n    next++;\n  }\n\n  return next;\n}\n\nvar FIELDS = {\n  TYPE: 0,\n  START_LINE: 1,\n  START_COL: 2,\n  END_LINE: 3,\n  END_COL: 4,\n  START_POS: 5,\n  END_POS: 6\n};\nexports.FIELDS = FIELDS;\n\nfunction tokenize(input) {\n  var tokens = [];\n  var css = input.css.valueOf();\n  var _css = css,\n      length = _css.length;\n  var offset = -1;\n  var line = 1;\n  var start = 0;\n  var end = 0;\n  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;\n\n  function unclosed(what, fix) {\n    if (input.safe) {\n      // fyi: this is never set to true.\n      css += fix;\n      next = css.length - 1;\n    } else {\n      throw input.error('Unclosed ' + what, line, start - offset, start);\n    }\n  }\n\n  while (start < length) {\n    code = css.charCodeAt(start);\n\n    if (code === t.newline) {\n      offset = start;\n      line += 1;\n    }\n\n    switch (code) {\n      case t.space:\n      case t.tab:\n      case t.newline:\n      case t.cr:\n      case t.feed:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n\n          if (code === t.newline) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n\n        tokenType = t.space;\n        endLine = line;\n        endColumn = next - offset - 1;\n        end = next;\n        break;\n\n      case t.plus:\n      case t.greaterThan:\n      case t.tilde:\n      case t.pipe:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n\n        tokenType = t.combinator;\n        endLine = line;\n        endColumn = start - offset;\n        end = next;\n        break;\n      // Consume these characters as single tokens.\n\n      case t.asterisk:\n      case t.ampersand:\n      case t.bang:\n      case t.comma:\n      case t.equals:\n      case t.dollar:\n      case t.caret:\n      case t.openSquare:\n      case t.closeSquare:\n      case t.colon:\n      case t.semicolon:\n      case t.openParenthesis:\n      case t.closeParenthesis:\n        next = start;\n        tokenType = code;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      case t.singleQuote:\n      case t.doubleQuote:\n        quote = code === t.singleQuote ? \"'\" : '\"';\n        next = start;\n\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n\n          if (next === -1) {\n            unclosed('quote', quote);\n          }\n\n          escapePos = next;\n\n          while (css.charCodeAt(escapePos - 1) === t.backslash) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n\n        tokenType = t.str;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      default:\n        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n          next = css.indexOf('*/', start + 2) + 1;\n\n          if (next === 0) {\n            unclosed('comment', '*/');\n          }\n\n          content = css.slice(start, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n\n          tokenType = t.comment;\n          line = nextLine;\n          endLine = nextLine;\n          endColumn = next - nextOffset;\n        } else if (code === t.slash) {\n          next = start;\n          tokenType = code;\n          endLine = line;\n          endColumn = start - offset;\n          end = next + 1;\n        } else {\n          next = consumeWord(css, start);\n          tokenType = t.word;\n          endLine = line;\n          endColumn = next - offset;\n        }\n\n        end = next + 1;\n        break;\n    } // Ensure that the token structure remains consistent\n\n\n    tokens.push([tokenType, // [0] Token type\n    line, // [1] Starting line\n    start - offset, // [2] Starting column\n    endLine, // [3] Ending line\n    endColumn, // [4] Ending column\n    start, // [5] Start position / Source index\n    end // [6] End position\n    ]); // Reset offset for the next token\n\n    if (nextOffset) {\n      offset = nextOffset;\n      nextOffset = null;\n    }\n\n    start = end;\n  }\n\n  return tokens;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _root = _interopRequireDefault(require(\"./selectors/root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selectors/selector\"));\n\nvar _className = _interopRequireDefault(require(\"./selectors/className\"));\n\nvar _comment = _interopRequireDefault(require(\"./selectors/comment\"));\n\nvar _id = _interopRequireDefault(require(\"./selectors/id\"));\n\nvar _tag = _interopRequireDefault(require(\"./selectors/tag\"));\n\nvar _string = _interopRequireDefault(require(\"./selectors/string\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./selectors/pseudo\"));\n\nvar _attribute = _interopRequireWildcard(require(\"./selectors/attribute\"));\n\nvar _universal = _interopRequireDefault(require(\"./selectors/universal\"));\n\nvar _combinator = _interopRequireDefault(require(\"./selectors/combinator\"));\n\nvar _nesting = _interopRequireDefault(require(\"./selectors/nesting\"));\n\nvar _sortAscending = _interopRequireDefault(require(\"./sortAscending\"));\n\nvar _tokenize = _interopRequireWildcard(require(\"./tokenize\"));\n\nvar tokens = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar types = _interopRequireWildcard(require(\"./selectors/types\"));\n\nvar _util = require(\"./util\");\n\nvar _WHITESPACE_TOKENS, _Object$assign;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);\nvar WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));\n\nfunction tokenStart(token) {\n  return {\n    line: token[_tokenize.FIELDS.START_LINE],\n    column: token[_tokenize.FIELDS.START_COL]\n  };\n}\n\nfunction tokenEnd(token) {\n  return {\n    line: token[_tokenize.FIELDS.END_LINE],\n    column: token[_tokenize.FIELDS.END_COL]\n  };\n}\n\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n}\n\nfunction getTokenSource(token) {\n  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);\n}\n\nfunction getTokenSourceSpan(startToken, endToken) {\n  if (!startToken) {\n    return undefined;\n  }\n\n  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);\n}\n\nfunction unescapeProp(node, prop) {\n  var value = node[prop];\n\n  if (typeof value !== \"string\") {\n    return;\n  }\n\n  if (value.indexOf(\"\\\\\") !== -1) {\n    (0, _util.ensureObject)(node, 'raws');\n    node[prop] = (0, _util.unesc)(value);\n\n    if (node.raws[prop] === undefined) {\n      node.raws[prop] = value;\n    }\n  }\n\n  return node;\n}\n\nfunction indexesOf(array, item) {\n  var i = -1;\n  var indexes = [];\n\n  while ((i = array.indexOf(item, i + 1)) !== -1) {\n    indexes.push(i);\n  }\n\n  return indexes;\n}\n\nfunction uniqs() {\n  var list = Array.prototype.concat.apply([], arguments);\n  return list.filter(function (item, i) {\n    return i === list.indexOf(item);\n  });\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.rule = rule;\n    this.options = Object.assign({\n      lossy: false,\n      safe: false\n    }, options);\n    this.position = 0;\n    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n    this.tokens = (0, _tokenize[\"default\"])({\n      css: this.css,\n      error: this._errorGenerator(),\n      safe: this.options.safe\n    });\n    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n    this.root = new _root[\"default\"]({\n      source: rootSource\n    });\n    this.root.errorGenerator = this._errorGenerator();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: {\n          line: 1,\n          column: 1\n        }\n      }\n    });\n    this.root.append(selector);\n    this.current = selector;\n    this.loop();\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto._errorGenerator = function _errorGenerator() {\n    var _this = this;\n\n    return function (message, errorOptions) {\n      if (typeof _this.rule === 'string') {\n        return new Error(message);\n      }\n\n      return _this.rule.error(message, errorOptions);\n    };\n  };\n\n  _proto.attribute = function attribute() {\n    var attr = [];\n    var startingToken = this.currToken;\n    this.position++;\n\n    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      attr.push(this.currToken);\n      this.position++;\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n\n    var len = attr.length;\n    var node = {\n      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n    };\n\n    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {\n      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);\n    }\n\n    var pos = 0;\n    var spaceBefore = '';\n    var commentBefore = '';\n    var lastAdded = null;\n    var spaceAfterMeaningfulToken = false;\n\n    while (pos < len) {\n      var token = attr[pos];\n      var content = this.content(token);\n      var next = attr[pos + 1];\n\n      switch (token[_tokenize.FIELDS.TYPE]) {\n        case tokens.space:\n          // if (\n          //     len === 1 ||\n          //     pos === 0 && this.content(next) === '|'\n          // ) {\n          //     return this.expected('attribute', token[TOKEN.START_POS], content);\n          // }\n          spaceAfterMeaningfulToken = true;\n\n          if (this.options.lossy) {\n            break;\n          }\n\n          if (lastAdded) {\n            (0, _util.ensureObject)(node, 'spaces', lastAdded);\n            var prevContent = node.spaces[lastAdded].after || '';\n            node.spaces[lastAdded].after = prevContent + content;\n            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;\n\n            if (existingComment) {\n              node.raws.spaces[lastAdded].after = existingComment + content;\n            }\n          } else {\n            spaceBefore = spaceBefore + content;\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        case tokens.asterisk:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = spaceBefore;\n              commentBefore = '';\n            }\n\n            node.namespace = (node.namespace || \"\") + content;\n            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;\n\n            if (rawValue) {\n              node.raws.namespace += content;\n            }\n\n            lastAdded = 'namespace';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.dollar:\n          if (lastAdded === \"value\") {\n            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');\n            node.value += \"$\";\n\n            if (oldRawValue) {\n              node.raws.value = oldRawValue + \"$\";\n            }\n\n            break;\n          }\n\n        // Falls through\n\n        case tokens.caret:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.combinator:\n          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          if (content !== '|') {\n            spaceAfterMeaningfulToken = false;\n            break;\n          }\n\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if (!node.namespace && !node.attribute) {\n            node.namespace = true;\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.word:\n          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.\n          !node.operator && !node.namespace) {\n            node.namespace = content;\n            lastAdded = 'namespace';\n          } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = commentBefore;\n              commentBefore = '';\n            }\n\n            node.attribute = (node.attribute || \"\") + content;\n\n            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;\n\n            if (_rawValue) {\n              node.raws.attribute += content;\n            }\n\n            lastAdded = 'attribute';\n          } else if (!node.value && node.value !== \"\" || lastAdded === \"value\" && !spaceAfterMeaningfulToken) {\n            var _unescaped = (0, _util.unesc)(content);\n\n            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';\n\n            var oldValue = node.value || '';\n            node.value = oldValue + _unescaped;\n            node.quoteMark = null;\n\n            if (_unescaped !== content || _oldRawValue) {\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws.value = (_oldRawValue || oldValue) + content;\n            }\n\n            lastAdded = 'value';\n          } else {\n            var insensitive = content === 'i' || content === \"I\";\n\n            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n              node.insensitive = insensitive;\n\n              if (!insensitive || content === \"I\") {\n                (0, _util.ensureObject)(node, 'raws');\n                node.raws.insensitiveFlag = content;\n              }\n\n              lastAdded = 'insensitive';\n\n              if (spaceBefore) {\n                (0, _util.ensureObject)(node, 'spaces', 'insensitive');\n                node.spaces.insensitive.before = spaceBefore;\n                spaceBefore = '';\n              }\n\n              if (commentBefore) {\n                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');\n                node.raws.spaces.insensitive.before = commentBefore;\n                commentBefore = '';\n              }\n            } else if (node.value || node.value === '') {\n              lastAdded = 'value';\n              node.value += content;\n\n              if (node.raws.value) {\n                node.raws.value += content;\n              }\n            }\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.str:\n          if (!node.attribute || !node.operator) {\n            return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          var _unescapeValue = (0, _attribute.unescapeValue)(content),\n              unescaped = _unescapeValue.unescaped,\n              quoteMark = _unescapeValue.quoteMark;\n\n          node.value = unescaped;\n          node.quoteMark = quoteMark;\n          lastAdded = 'value';\n          (0, _util.ensureObject)(node, 'raws');\n          node.raws.value = content;\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.equals:\n          if (!node.attribute) {\n            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);\n          }\n\n          if (node.value) {\n            return this.error('Unexpected \"=\" found; an operator was already defined.', {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          node.operator = node.operator ? node.operator + content : content;\n          lastAdded = 'operator';\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.comment:\n          if (lastAdded) {\n            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {\n              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';\n              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);\n              node.raws.spaces[lastAdded].after = rawLastComment + content;\n            } else {\n              var lastValue = node[lastAdded] || '';\n              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws[lastAdded] = rawLastValue + content;\n            }\n          } else {\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        default:\n          return this.error(\"Unexpected \\\"\" + content + \"\\\" found.\", {\n            index: token[_tokenize.FIELDS.START_POS]\n          });\n      }\n\n      pos++;\n    }\n\n    unescapeProp(node, \"attribute\");\n    unescapeProp(node, \"namespace\");\n    this.newNode(new _attribute[\"default\"](node));\n    this.position++;\n  }\n  /**\n   * return a node containing meaningless garbage up to (but not including) the specified token position.\n   * if the token position is negative, all remaining tokens are consumed.\n   *\n   * This returns an array containing a single string node if all whitespace,\n   * otherwise an array of comment nodes with space before and after.\n   *\n   * These tokens are not added to the current selector, the caller can add them or use them to amend\n   * a previous node's space metadata.\n   *\n   * In lossy mode, this returns only comments.\n   */\n  ;\n\n  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {\n    if (stopPosition < 0) {\n      stopPosition = this.tokens.length;\n    }\n\n    var startPosition = this.position;\n    var nodes = [];\n    var space = \"\";\n    var lastComment = undefined;\n\n    do {\n      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n        if (!this.options.lossy) {\n          space += this.content();\n        }\n      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {\n        var spaces = {};\n\n        if (space) {\n          spaces.before = space;\n          space = \"\";\n        }\n\n        lastComment = new _comment[\"default\"]({\n          value: this.content(),\n          source: getTokenSource(this.currToken),\n          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n          spaces: spaces\n        });\n        nodes.push(lastComment);\n      }\n    } while (++this.position < stopPosition);\n\n    if (space) {\n      if (lastComment) {\n        lastComment.spaces.after = space;\n      } else if (!this.options.lossy) {\n        var firstToken = this.tokens[startPosition];\n        var lastToken = this.tokens[this.position - 1];\n        nodes.push(new _string[\"default\"]({\n          value: '',\n          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),\n          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n          spaces: {\n            before: space,\n            after: ''\n          }\n        }));\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * \n   * @param {*} nodes \n   */\n  ;\n\n  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {\n    var _this2 = this;\n\n    if (requiredSpace === void 0) {\n      requiredSpace = false;\n    }\n\n    var space = \"\";\n    var rawSpace = \"\";\n    nodes.forEach(function (n) {\n      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);\n\n      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);\n\n      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n    });\n\n    if (rawSpace === space) {\n      rawSpace = undefined;\n    }\n\n    var result = {\n      space: space,\n      rawSpace: rawSpace\n    };\n    return result;\n  };\n\n  _proto.isNamedCombinator = function isNamedCombinator(position) {\n    if (position === void 0) {\n      position = this.position;\n    }\n\n    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;\n  };\n\n  _proto.namedCombinator = function namedCombinator() {\n    if (this.isNamedCombinator()) {\n      var nameRaw = this.content(this.tokens[this.position + 1]);\n      var name = (0, _util.unesc)(nameRaw).toLowerCase();\n      var raws = {};\n\n      if (name !== nameRaw) {\n        raws.value = \"/\" + nameRaw + \"/\";\n      }\n\n      var node = new _combinator[\"default\"]({\n        value: \"/\" + name + \"/\",\n        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n        raws: raws\n      });\n      this.position = this.position + 3;\n      return node;\n    } else {\n      this.unexpected();\n    }\n  };\n\n  _proto.combinator = function combinator() {\n    var _this3 = this;\n\n    if (this.content() === '|') {\n      return this.namespace();\n    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n\n\n    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n\n    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {\n      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n\n      if (nodes.length > 0) {\n        var last = this.current.last;\n\n        if (last) {\n          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),\n              space = _this$convertWhitespa.space,\n              rawSpace = _this$convertWhitespa.rawSpace;\n\n          if (rawSpace !== undefined) {\n            last.rawSpaceAfter += rawSpace;\n          }\n\n          last.spaces.after += space;\n        } else {\n          nodes.forEach(function (n) {\n            return _this3.newNode(n);\n          });\n        }\n      }\n\n      return;\n    }\n\n    var firstToken = this.currToken;\n    var spaceOrDescendantSelectorNodes = undefined;\n\n    if (nextSigTokenPos > this.position) {\n      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n    }\n\n    var node;\n\n    if (this.isNamedCombinator()) {\n      node = this.namedCombinator();\n    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n      node = new _combinator[\"default\"]({\n        value: this.content(),\n        source: getTokenSource(this.currToken),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n      });\n      this.position++;\n    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {// pass\n    } else if (!spaceOrDescendantSelectorNodes) {\n      this.unexpected();\n    }\n\n    if (node) {\n      if (spaceOrDescendantSelectorNodes) {\n        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),\n            _space = _this$convertWhitespa2.space,\n            _rawSpace = _this$convertWhitespa2.rawSpace;\n\n        node.spaces.before = _space;\n        node.rawSpaceBefore = _rawSpace;\n      }\n    } else {\n      // descendant combinator\n      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),\n          _space2 = _this$convertWhitespa3.space,\n          _rawSpace2 = _this$convertWhitespa3.rawSpace;\n\n      if (!_rawSpace2) {\n        _rawSpace2 = _space2;\n      }\n\n      var spaces = {};\n      var raws = {\n        spaces: {}\n      };\n\n      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {\n        spaces.before = _space2.slice(0, _space2.length - 1);\n        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);\n      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {\n        spaces.after = _space2.slice(1);\n        raws.spaces.after = _rawSpace2.slice(1);\n      } else {\n        raws.value = _rawSpace2;\n      }\n\n      node = new _combinator[\"default\"]({\n        value: ' ',\n        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n        spaces: spaces,\n        raws: raws\n      });\n    }\n\n    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {\n      node.spaces.after = this.optionalSpace(this.content());\n      this.position++;\n    }\n\n    return this.newNode(node);\n  };\n\n  _proto.comma = function comma() {\n    if (this.position === this.tokens.length - 1) {\n      this.root.trailingComma = true;\n      this.position++;\n      return;\n    }\n\n    this.current._inferEndPosition();\n\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: tokenStart(this.tokens[this.position + 1])\n      }\n    });\n    this.current.parent.append(selector);\n    this.current = selector;\n    this.position++;\n  };\n\n  _proto.comment = function comment() {\n    var current = this.currToken;\n    this.newNode(new _comment[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.error = function error(message, opts) {\n    throw this.root.error(message, opts);\n  };\n\n  _proto.missingBackslash = function missingBackslash() {\n    return this.error('Expected a backslash preceding the semicolon.', {\n      index: this.currToken[_tokenize.FIELDS.START_POS]\n    });\n  };\n\n  _proto.missingParenthesis = function missingParenthesis() {\n    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.missingSquareBracket = function missingSquareBracket() {\n    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.unexpected = function unexpected() {\n    return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.namespace = function namespace() {\n    var before = this.prevToken && this.content(this.prevToken) || true;\n\n    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.position++;\n      return this.word(before);\n    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {\n      this.position++;\n      return this.universal(before);\n    }\n  };\n\n  _proto.nesting = function nesting() {\n    if (this.nextToken) {\n      var nextContent = this.content(this.nextToken);\n\n      if (nextContent === \"|\") {\n        this.position++;\n        return;\n      }\n    }\n\n    var current = this.currToken;\n    this.newNode(new _nesting[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.parentheses = function parentheses() {\n    var last = this.current.last;\n    var unbalanced = 1;\n    this.position++;\n\n    if (last && last.type === types.PSEUDO) {\n      var selector = new _selector[\"default\"]({\n        source: {\n          start: tokenStart(this.tokens[this.position - 1])\n        }\n      });\n      var cache = this.current;\n      last.append(selector);\n      this.current = selector;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        if (unbalanced) {\n          this.parse();\n        } else {\n          this.current.source.end = tokenEnd(this.currToken);\n          this.current.parent.source.end = tokenEnd(this.currToken);\n          this.position++;\n        }\n      }\n\n      this.current = cache;\n    } else {\n      // I think this case should be an error. It's used to implement a basic parse of media queries\n      // but I don't think it's a good idea.\n      var parenStart = this.currToken;\n      var parenValue = \"(\";\n      var parenEnd;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        parenEnd = this.currToken;\n        parenValue += this.parseParenthesisToken(this.currToken);\n        this.position++;\n      }\n\n      if (last) {\n        last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n      } else {\n        this.newNode(new _string[\"default\"]({\n          value: parenValue,\n          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),\n          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]\n        }));\n      }\n    }\n\n    if (unbalanced) {\n      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.pseudo = function pseudo() {\n    var _this4 = this;\n\n    var pseudoStr = '';\n    var startingToken = this.currToken;\n\n    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {\n      pseudoStr += this.content();\n      this.position++;\n    }\n\n    if (!this.currToken) {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.splitWord(false, function (first, length) {\n        pseudoStr += first;\n\n        _this4.newNode(new _pseudo[\"default\"]({\n          value: pseudoStr,\n          source: getTokenSourceSpan(startingToken, _this4.currToken),\n          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n        }));\n\n        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          _this4.error('Misplaced parenthesis.', {\n            index: _this4.nextToken[_tokenize.FIELDS.START_POS]\n          });\n        }\n      });\n    } else {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.space = function space() {\n    var content = this.content(); // Handle space before and after the selector\n\n    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {\n      return node.type === 'comment';\n    })) {\n      this.spaces = this.optionalSpace(content);\n      this.position++;\n    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      this.current.last.spaces.after = this.optionalSpace(content);\n      this.position++;\n    } else {\n      this.combinator();\n    }\n  };\n\n  _proto.string = function string() {\n    var current = this.currToken;\n    this.newNode(new _string[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.universal = function universal(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    var current = this.currToken;\n    this.newNode(new _universal[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }), namespace);\n    this.position++;\n  };\n\n  _proto.splitWord = function splitWord(namespace, firstCallback) {\n    var _this5 = this;\n\n    var nextToken = this.nextToken;\n    var word = this.content();\n\n    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {\n      this.position++;\n      var current = this.content();\n      word += current;\n\n      if (current.lastIndexOf('\\\\') === current.length - 1) {\n        var next = this.nextToken;\n\n        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {\n          word += this.requiredSpace(this.content(next));\n          this.position++;\n        }\n      }\n\n      nextToken = this.nextToken;\n    }\n\n    var hasClass = indexesOf(word, '.').filter(function (i) {\n      // Allow escaped dot within class name\n      var escapedDot = word[i - 1] === '\\\\'; // Allow decimal numbers percent in @keyframes\n\n      var isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n      return !escapedDot && !isKeyframesPercent;\n    });\n    var hasId = indexesOf(word, '#').filter(function (i) {\n      return word[i - 1] !== '\\\\';\n    }); // Eliminate Sass interpolations from the list of id indexes\n\n    var interpolations = indexesOf(word, '#{');\n\n    if (interpolations.length) {\n      hasId = hasId.filter(function (hashIndex) {\n        return !~interpolations.indexOf(hashIndex);\n      });\n    }\n\n    var indices = (0, _sortAscending[\"default\"])(uniqs([0].concat(hasClass, hasId)));\n    indices.forEach(function (ind, i) {\n      var index = indices[i + 1] || word.length;\n      var value = word.slice(ind, index);\n\n      if (i === 0 && firstCallback) {\n        return firstCallback.call(_this5, value, indices.length);\n      }\n\n      var node;\n      var current = _this5.currToken;\n      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];\n      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n\n      if (~hasClass.indexOf(ind)) {\n        var classNameOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n      } else if (~hasId.indexOf(ind)) {\n        var idOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n      } else {\n        var tagOpts = {\n          value: value,\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        unescapeProp(tagOpts, \"value\");\n        node = new _tag[\"default\"](tagOpts);\n      }\n\n      _this5.newNode(node, namespace); // Ensure that the namespace is used only once\n\n\n      namespace = null;\n    });\n    this.position++;\n  };\n\n  _proto.word = function word(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    return this.splitWord(namespace);\n  };\n\n  _proto.loop = function loop() {\n    while (this.position < this.tokens.length) {\n      this.parse(true);\n    }\n\n    this.current._inferEndPosition();\n\n    return this.root;\n  };\n\n  _proto.parse = function parse(throwOnParenthesis) {\n    switch (this.currToken[_tokenize.FIELDS.TYPE]) {\n      case tokens.space:\n        this.space();\n        break;\n\n      case tokens.comment:\n        this.comment();\n        break;\n\n      case tokens.openParenthesis:\n        this.parentheses();\n        break;\n\n      case tokens.closeParenthesis:\n        if (throwOnParenthesis) {\n          this.missingParenthesis();\n        }\n\n        break;\n\n      case tokens.openSquare:\n        this.attribute();\n        break;\n\n      case tokens.dollar:\n      case tokens.caret:\n      case tokens.equals:\n      case tokens.word:\n        this.word();\n        break;\n\n      case tokens.colon:\n        this.pseudo();\n        break;\n\n      case tokens.comma:\n        this.comma();\n        break;\n\n      case tokens.asterisk:\n        this.universal();\n        break;\n\n      case tokens.ampersand:\n        this.nesting();\n        break;\n\n      case tokens.slash:\n      case tokens.combinator:\n        this.combinator();\n        break;\n\n      case tokens.str:\n        this.string();\n        break;\n      // These cases throw; no break needed.\n\n      case tokens.closeSquare:\n        this.missingSquareBracket();\n\n      case tokens.semicolon:\n        this.missingBackslash();\n\n      default:\n        this.unexpected();\n    }\n  }\n  /**\n   * Helpers\n   */\n  ;\n\n  _proto.expected = function expected(description, index, found) {\n    if (Array.isArray(description)) {\n      var last = description.pop();\n      description = description.join(', ') + \" or \" + last;\n    }\n\n    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n\n    if (!found) {\n      return this.error(\"Expected \" + an + \" \" + description + \".\", {\n        index: index\n      });\n    }\n\n    return this.error(\"Expected \" + an + \" \" + description + \", found \\\"\" + found + \"\\\" instead.\", {\n      index: index\n    });\n  };\n\n  _proto.requiredSpace = function requiredSpace(space) {\n    return this.options.lossy ? ' ' : space;\n  };\n\n  _proto.optionalSpace = function optionalSpace(space) {\n    return this.options.lossy ? '' : space;\n  };\n\n  _proto.lossySpace = function lossySpace(space, required) {\n    if (this.options.lossy) {\n      return required ? ' ' : '';\n    } else {\n      return space;\n    }\n  };\n\n  _proto.parseParenthesisToken = function parseParenthesisToken(token) {\n    var content = this.content(token);\n\n    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {\n      return this.requiredSpace(content);\n    } else {\n      return content;\n    }\n  };\n\n  _proto.newNode = function newNode(node, namespace) {\n    if (namespace) {\n      if (/^ +$/.test(namespace)) {\n        if (!this.options.lossy) {\n          this.spaces = (this.spaces || '') + namespace;\n        }\n\n        namespace = true;\n      }\n\n      node.namespace = namespace;\n      unescapeProp(node, \"namespace\");\n    }\n\n    if (this.spaces) {\n      node.spaces.before = this.spaces;\n      this.spaces = '';\n    }\n\n    return this.current.append(node);\n  };\n\n  _proto.content = function content(token) {\n    if (token === void 0) {\n      token = this.currToken;\n    }\n\n    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);\n  };\n\n  /**\n   * returns the index of the next non-whitespace, non-comment token.\n   * returns -1 if no meaningful token is found.\n   */\n  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = this.position + 1;\n    }\n\n    var searchPosition = startPosition;\n\n    while (searchPosition < this.tokens.length) {\n      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {\n        searchPosition++;\n        continue;\n      } else {\n        return searchPosition;\n      }\n    }\n\n    return -1;\n  };\n\n  _createClass(Parser, [{\n    key: \"currToken\",\n    get: function get() {\n      return this.tokens[this.position];\n    }\n  }, {\n    key: \"nextToken\",\n    get: function get() {\n      return this.tokens[this.position + 1];\n    }\n  }, {\n    key: \"prevToken\",\n    get: function get() {\n      return this.tokens[this.position - 1];\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports[\"default\"] = Parser;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;\n\nvar _attribute = _interopRequireDefault(require(\"./attribute\"));\n\nvar _className = _interopRequireDefault(require(\"./className\"));\n\nvar _combinator = _interopRequireDefault(require(\"./combinator\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _id = _interopRequireDefault(require(\"./id\"));\n\nvar _nesting = _interopRequireDefault(require(\"./nesting\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./pseudo\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selector\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _tag = _interopRequireDefault(require(\"./tag\"));\n\nvar _universal = _interopRequireDefault(require(\"./universal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar attribute = function attribute(opts) {\n  return new _attribute[\"default\"](opts);\n};\n\nexports.attribute = attribute;\n\nvar className = function className(opts) {\n  return new _className[\"default\"](opts);\n};\n\nexports.className = className;\n\nvar combinator = function combinator(opts) {\n  return new _combinator[\"default\"](opts);\n};\n\nexports.combinator = combinator;\n\nvar comment = function comment(opts) {\n  return new _comment[\"default\"](opts);\n};\n\nexports.comment = comment;\n\nvar id = function id(opts) {\n  return new _id[\"default\"](opts);\n};\n\nexports.id = id;\n\nvar nesting = function nesting(opts) {\n  return new _nesting[\"default\"](opts);\n};\n\nexports.nesting = nesting;\n\nvar pseudo = function pseudo(opts) {\n  return new _pseudo[\"default\"](opts);\n};\n\nexports.pseudo = pseudo;\n\nvar root = function root(opts) {\n  return new _root[\"default\"](opts);\n};\n\nexports.root = root;\n\nvar selector = function selector(opts) {\n  return new _selector[\"default\"](opts);\n};\n\nexports.selector = selector;\n\nvar string = function string(opts) {\n  return new _string[\"default\"](opts);\n};\n\nexports.string = string;\n\nvar tag = function tag(opts) {\n  return new _tag[\"default\"](opts);\n};\n\nexports.tag = tag;\n\nvar universal = function universal(opts) {\n  return new _universal[\"default\"](opts);\n};\n\nexports.universal = universal;","\"use strict\";\n\nexports.__esModule = true;\nexports.isNode = isNode;\nexports.isPseudoElement = isPseudoElement;\nexports.isPseudoClass = isPseudoClass;\nexports.isContainer = isContainer;\nexports.isNamespace = isNamespace;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;\n\nvar _types = require(\"./types\");\n\nvar _IS_TYPE;\n\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\n\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\n\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n}\n\nvar isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nexports.isAttribute = isAttribute;\nvar isClassName = isNodeType.bind(null, _types.CLASS);\nexports.isClassName = isClassName;\nvar isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nexports.isCombinator = isCombinator;\nvar isComment = isNodeType.bind(null, _types.COMMENT);\nexports.isComment = isComment;\nvar isIdentifier = isNodeType.bind(null, _types.ID);\nexports.isIdentifier = isIdentifier;\nvar isNesting = isNodeType.bind(null, _types.NESTING);\nexports.isNesting = isNesting;\nvar isPseudo = isNodeType.bind(null, _types.PSEUDO);\nexports.isPseudo = isPseudo;\nvar isRoot = isNodeType.bind(null, _types.ROOT);\nexports.isRoot = isRoot;\nvar isSelector = isNodeType.bind(null, _types.SELECTOR);\nexports.isSelector = isSelector;\nvar isString = isNodeType.bind(null, _types.STRING);\nexports.isString = isString;\nvar isTag = isNodeType.bind(null, _types.TAG);\nexports.isTag = isTag;\nvar isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\nexports.isUniversal = isUniversal;\n\nfunction isPseudoElement(node) {\n  return isPseudo(node) && node.value && (node.value.startsWith(\"::\") || node.value.toLowerCase() === \":before\" || node.value.toLowerCase() === \":after\" || node.value.toLowerCase() === \":first-letter\" || node.value.toLowerCase() === \":first-line\");\n}\n\nfunction isPseudoClass(node) {\n  return isPseudo(node) && !isPseudoElement(node);\n}\n\nfunction isContainer(node) {\n  return !!(isNode(node) && node.walk);\n}\n\nfunction isNamespace(node) {\n  return isAttribute(node) || isTag(node);\n}","\"use strict\";\n\nexports.__esModule = true;\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\n\nvar _constructors = require(\"./constructors\");\n\nObject.keys(_constructors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _constructors[key]) return;\n  exports[key] = _constructors[key];\n});\n\nvar _guards = require(\"./guards\");\n\nObject.keys(_guards).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _guards[key]) return;\n  exports[key] = _guards[key];\n});","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar selectors = _interopRequireWildcard(require(\"./selectors\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parser = function parser(processor) {\n  return new _processor[\"default\"](processor);\n};\n\nObject.assign(parser, selectors);\ndelete parser.__esModule;\nvar _default = parser;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parser = require('postcss-selector-parser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-nesting-depth';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (depth) => `Expected nesting depth to be no more than ${depth}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-nesting-depth',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\t/**\n\t * @param {import('postcss').Node} node\n\t */\n\tconst isIgnoreAtRule = (node) =>\n\t\tisAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['blockless-at-rules', 'pseudo-classes'],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules(checkStatement);\n\t\troot.walkAtRules(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction checkStatement(statement) {\n\t\t\tif (isIgnoreAtRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isRule(statement) && !isStandardSyntaxRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst depth = nestingDepth(statement, 0);\n\n\t\t\tif (depth > primary) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {import('postcss').Node} node\n\t * @param {number} level\n\t * @returns {number}\n\t */\n\tfunction nestingDepth(node, level) {\n\t\tconst parent = node.parent;\n\n\t\tif (parent == null) {\n\t\t\tthrow new Error('The parent node must exist');\n\t\t}\n\n\t\tif (isIgnoreAtRule(parent)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// The nesting depth level's computation has finished\n\t\t// when this function, recursively called, receives\n\t\t// a node that is not nested -- a direct child of the\n\t\t// root node\n\t\tif (isRoot(parent) || (isAtRule(parent) && parent.parent && isRoot(parent.parent))) {\n\t\t\treturn level;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t */\n\t\tfunction containsPseudoClassesOnly(selector) {\n\t\t\tconst normalized = parser().processSync(selector, { lossless: false });\n\t\t\tconst selectors = normalized.split(',');\n\n\t\t\treturn selectors.every((sel) => extractPseudoRule(sel));\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} selectors\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction containsIgnoredPseudoClassesOnly(selectors) {\n\t\t\tif (!(secondaryOptions && secondaryOptions.ignorePseudoClasses)) return false;\n\n\t\t\treturn selectors.every((selector) => {\n\t\t\t\tconst pseudoRule = extractPseudoRule(selector);\n\n\t\t\t\tif (!pseudoRule) return false;\n\n\t\t\t\treturn optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoRule);\n\t\t\t});\n\t\t}\n\n\t\tif (\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'blockless-at-rules') &&\n\t\t\t\tisAtRule(node) &&\n\t\t\t\tnode.every((child) => !isDeclaration(child))) ||\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'pseudo-classes') &&\n\t\t\t\tisRule(node) &&\n\t\t\t\tcontainsPseudoClassesOnly(node.selector)) ||\n\t\t\t(isRule(node) && containsIgnoredPseudoClassesOnly(node.selectors))\n\t\t) {\n\t\t\treturn nestingDepth(parent, level);\n\t\t}\n\n\t\t// Unless any of the conditions above apply, we want to\n\t\t// add 1 to the nesting depth level and then check the parent,\n\t\t// continuing to add and move up the hierarchy\n\t\t// until we hit the root node\n\t\treturn nestingDepth(parent, level + 1);\n\t}\n};\n\n/**\n * @param {string} selector\n * @returns {string | undefined}\n */\nfunction extractPseudoRule(selector) {\n\treturn selector.startsWith('&:') && selector[2] !== ':' ? selector.slice(2) : undefined;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a media query is a custom\n * @param {string} mediaQuery\n * @returns {boolean}\n */\nmodule.exports = function (mediaQuery) {\n\treturn mediaQuery.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a media feature is a range context one\n *\n * @param {string} mediaFeature feature\n * @return {boolean} If `true`, media feature is a range context one\n */\nmodule.exports = function (mediaFeature) {\n\treturn mediaFeature.includes('=') || mediaFeature.includes('<') || mediaFeature.includes('>');\n};\n","'use strict';\n\n/**\n * Check whether a media feature name is standard\n *\n * @param {string} mediaFeatureName\n * @returns {boolean}\n */\nmodule.exports = function (mediaFeatureName) {\n\t// SCSS interpolation\n\tif (/#\\{.+?\\}|\\$.+/.test(mediaFeatureName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * A very generic node. Pretty much any element of a media query\r\n */\n\nfunction Node(opts) {\n  this.after = opts.after;\n  this.before = opts.before;\n  this.type = opts.type;\n  this.value = opts.value;\n  this.sourceIndex = opts.sourceIndex;\n}\n\nexports.default = Node;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Node = require('./Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Container(opts) {\n  var _this = this;\n\n  this.constructor(opts);\n\n  this.nodes = opts.nodes;\n\n  if (this.after === undefined) {\n    this.after = this.nodes.length > 0 ? this.nodes[this.nodes.length - 1].after : '';\n  }\n\n  if (this.before === undefined) {\n    this.before = this.nodes.length > 0 ? this.nodes[0].before : '';\n  }\n\n  if (this.sourceIndex === undefined) {\n    this.sourceIndex = this.before.length;\n  }\n\n  this.nodes.forEach(function (node) {\n    node.parent = _this; // eslint-disable-line no-param-reassign\n  });\n} /**\r\n   * A node that contains other nodes and support traversing over them\r\n   */\n\nContainer.prototype = Object.create(_Node2.default.prototype);\nContainer.constructor = _Node2.default;\n\n/**\r\n * Iterate over descendant nodes of the node\r\n *\r\n * @param {RegExp|string} filter - Optional. Only nodes with node.type that\r\n *    satisfies the filter will be traversed over\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.walk = function walk(filter, cb) {\n  var hasFilter = typeof filter === 'string' || filter instanceof RegExp;\n  var callback = hasFilter ? cb : filter;\n  var filterReg = typeof filter === 'string' ? new RegExp(filter) : filter;\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    var filtered = hasFilter ? filterReg.test(node.type) : true;\n    if (filtered && callback && callback(node, i, this.nodes) === false) {\n      return false;\n    }\n    if (node.nodes && node.walk(filter, cb) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Iterate over immediate children of the node\r\n *\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.each = function each() {\n  var cb = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    if (cb(node, i, this.nodes) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.default = Container;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMediaFeature = parseMediaFeature;\nexports.parseMediaQuery = parseMediaQuery;\nexports.parseMediaList = parseMediaList;\n\nvar _Node = require('./nodes/Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media feature expression, e.g. `max-width: 10px`, `(color)`\r\n *\r\n * @param {string} string - the source expression string, can be inside parens\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes, the first element being a media feature,\r\n *    the secont - its value (may be missing)\r\n */\n\nfunction parseMediaFeature(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var modesEntered = [{\n    mode: 'normal',\n    character: null\n  }];\n  var result = [];\n  var lastModeIndex = 0;\n  var mediaFeature = '';\n  var colon = null;\n  var mediaFeatureValue = null;\n  var indexLocal = index;\n\n  var stringNormalized = string;\n  // Strip trailing parens (if any), and correct the starting index\n  if (string[0] === '(' && string[string.length - 1] === ')') {\n    stringNormalized = string.substring(1, string.length - 1);\n    indexLocal++;\n  }\n\n  for (var i = 0; i < stringNormalized.length; i++) {\n    var character = stringNormalized[i];\n\n    // If entering/exiting a string\n    if (character === '\\'' || character === '\"') {\n      if (modesEntered[lastModeIndex].isCalculationEnabled === true) {\n        modesEntered.push({\n          mode: 'string',\n          isCalculationEnabled: false,\n          character: character\n        });\n        lastModeIndex++;\n      } else if (modesEntered[lastModeIndex].mode === 'string' && modesEntered[lastModeIndex].character === character && stringNormalized[i - 1] !== '\\\\') {\n        modesEntered.pop();\n        lastModeIndex--;\n      }\n    }\n\n    // If entering/exiting interpolation\n    if (character === '{') {\n      modesEntered.push({\n        mode: 'interpolation',\n        isCalculationEnabled: true\n      });\n      lastModeIndex++;\n    } else if (character === '}') {\n      modesEntered.pop();\n      lastModeIndex--;\n    }\n\n    // If a : is met outside of a string, function call or interpolation, than\n    // this : separates a media feature and a value\n    if (modesEntered[lastModeIndex].mode === 'normal' && character === ':') {\n      var mediaFeatureValueStr = stringNormalized.substring(i + 1);\n      mediaFeatureValue = {\n        type: 'value',\n        before: /^(\\s*)/.exec(mediaFeatureValueStr)[1],\n        after: /(\\s*)$/.exec(mediaFeatureValueStr)[1],\n        value: mediaFeatureValueStr.trim()\n      };\n      // +1 for the colon\n      mediaFeatureValue.sourceIndex = mediaFeatureValue.before.length + i + 1 + indexLocal;\n      colon = {\n        type: 'colon',\n        sourceIndex: i + indexLocal,\n        after: mediaFeatureValue.before,\n        value: ':' };\n      break;\n    }\n\n    mediaFeature += character;\n  }\n\n  // Forming a media feature node\n  mediaFeature = {\n    type: 'media-feature',\n    before: /^(\\s*)/.exec(mediaFeature)[1],\n    after: /(\\s*)$/.exec(mediaFeature)[1],\n    value: mediaFeature.trim()\n  };\n  mediaFeature.sourceIndex = mediaFeature.before.length + indexLocal;\n  result.push(mediaFeature);\n\n  if (colon !== null) {\n    colon.before = mediaFeature.after;\n    result.push(colon);\n  }\n\n  if (mediaFeatureValue !== null) {\n    result.push(mediaFeatureValue);\n  }\n\n  return result;\n}\n\n/**\r\n * Parses a media query, e.g. `screen and (color)`, `only tv`\r\n *\r\n * @param {string} string - the source media query string\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes and Containers\r\n */\n\nfunction parseMediaQuery(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var result = [];\n\n  // How many timies the parser entered parens/curly braces\n  var localLevel = 0;\n  // Has any keyword, media type, media feature expression or interpolation\n  // ('element' hereafter) started\n  var insideSomeValue = false;\n  var node = void 0;\n\n  function resetNode() {\n    return {\n      before: '',\n      after: '',\n      value: ''\n    };\n  }\n\n  node = resetNode();\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    // If not yet entered any element\n    if (!insideSomeValue) {\n      if (character.search(/\\s/) !== -1) {\n        // A whitespace\n        // Don't form 'after' yet; will do it later\n        node.before += character;\n      } else {\n        // Not a whitespace - entering an element\n        // Expression start\n        if (character === '(') {\n          node.type = 'media-feature-expression';\n          localLevel++;\n        }\n        node.value = character;\n        node.sourceIndex = index + i;\n        insideSomeValue = true;\n      }\n    } else {\n      // Already in the middle of some alement\n      node.value += character;\n\n      // Here parens just increase localLevel and don't trigger a start of\n      // a media feature expression (since they can't be nested)\n      // Interpolation start\n      if (character === '{' || character === '(') {\n        localLevel++;\n      }\n      // Interpolation/function call/media feature expression end\n      if (character === ')' || character === '}') {\n        localLevel--;\n      }\n    }\n\n    // If exited all parens/curlies and the next symbol\n    if (insideSomeValue && localLevel === 0 && (character === ')' || i === string.length - 1 || string[i + 1].search(/\\s/) !== -1)) {\n      if (['not', 'only', 'and'].indexOf(node.value) !== -1) {\n        node.type = 'keyword';\n      }\n      // if it's an expression, parse its contents\n      if (node.type === 'media-feature-expression') {\n        node.nodes = parseMediaFeature(node.value, node.sourceIndex);\n      }\n      result.push(Array.isArray(node.nodes) ? new _Container2.default(node) : new _Node2.default(node));\n      node = resetNode();\n      insideSomeValue = false;\n    }\n  }\n\n  // Now process the result array - to specify undefined types of the nodes\n  // and specify the `after` prop\n  for (var _i = 0; _i < result.length; _i++) {\n    node = result[_i];\n    if (_i > 0) {\n      result[_i - 1].after = node.before;\n    }\n\n    // Node types. Might not be set because contains interpolation/function\n    // calls or fully consists of them\n    if (node.type === undefined) {\n      if (_i > 0) {\n        // only `and` can follow an expression\n        if (result[_i - 1].type === 'media-feature-expression') {\n          node.type = 'keyword';\n          continue;\n        }\n        // Anything after 'only|not' is a media type\n        if (result[_i - 1].value === 'not' || result[_i - 1].value === 'only') {\n          node.type = 'media-type';\n          continue;\n        }\n        // Anything after 'and' is an expression\n        if (result[_i - 1].value === 'and') {\n          node.type = 'media-feature-expression';\n          continue;\n        }\n\n        if (result[_i - 1].type === 'media-type') {\n          // if it is the last element - it might be an expression\n          // or 'and' depending on what is after it\n          if (!result[_i + 1]) {\n            node.type = 'media-feature-expression';\n          } else {\n            node.type = result[_i + 1].type === 'media-feature-expression' ? 'keyword' : 'media-feature-expression';\n          }\n        }\n      }\n\n      if (_i === 0) {\n        // `screen`, `fn( ... )`, `#{ ... }`. Not an expression, since then\n        // its type would have been set by now\n        if (!result[_i + 1]) {\n          node.type = 'media-type';\n          continue;\n        }\n\n        // `screen and` or `#{...} (max-width: 10px)`\n        if (result[_i + 1] && (result[_i + 1].type === 'media-feature-expression' || result[_i + 1].type === 'keyword')) {\n          node.type = 'media-type';\n          continue;\n        }\n        if (result[_i + 2]) {\n          // `screen and (color) ...`\n          if (result[_i + 2].type === 'media-feature-expression') {\n            node.type = 'media-type';\n            result[_i + 1].type = 'keyword';\n            continue;\n          }\n          // `only screen and ...`\n          if (result[_i + 2].type === 'keyword') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            continue;\n          }\n        }\n        if (result[_i + 3]) {\n          // `screen and (color) ...`\n          if (result[_i + 3].type === 'media-feature-expression') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            result[_i + 2].type = 'keyword';\n            continue;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query list. Takes a possible `url()` at the start into\r\n * account, and divides the list into media queries that are parsed separately\r\n *\r\n * @param {string} string - the source media query list string\r\n *\r\n * @return {Array} an array of Nodes/Containers\r\n */\n\nfunction parseMediaList(string) {\n  var result = [];\n  var interimIndex = 0;\n  var levelLocal = 0;\n\n  // Check for a `url(...)` part (if it is contents of an @import rule)\n  var doesHaveUrl = /^(\\s*)url\\s*\\(/.exec(string);\n  if (doesHaveUrl !== null) {\n    var i = doesHaveUrl[0].length;\n    var parenthesesLv = 1;\n    while (parenthesesLv > 0) {\n      var character = string[i];\n      if (character === '(') {\n        parenthesesLv++;\n      }\n      if (character === ')') {\n        parenthesesLv--;\n      }\n      i++;\n    }\n    result.unshift(new _Node2.default({\n      type: 'url',\n      value: string.substring(0, i).trim(),\n      sourceIndex: doesHaveUrl[1].length,\n      before: doesHaveUrl[1],\n      after: /^(\\s*)/.exec(string.substring(i))[1]\n    }));\n    interimIndex = i;\n  }\n\n  // Start processing the media query list\n  for (var _i2 = interimIndex; _i2 < string.length; _i2++) {\n    var _character = string[_i2];\n\n    // Dividing the media query list into comma-separated media queries\n    // Only count commas that are outside of any parens\n    // (i.e., not part of function call params list, etc.)\n    if (_character === '(') {\n      levelLocal++;\n    }\n    if (_character === ')') {\n      levelLocal--;\n    }\n    if (levelLocal === 0 && _character === ',') {\n      var _mediaQueryString = string.substring(interimIndex, _i2);\n      var _spaceBefore = /^(\\s*)/.exec(_mediaQueryString)[1];\n      result.push(new _Container2.default({\n        type: 'media-query',\n        value: _mediaQueryString.trim(),\n        sourceIndex: interimIndex + _spaceBefore.length,\n        nodes: parseMediaQuery(_mediaQueryString, interimIndex),\n        before: _spaceBefore,\n        after: /(\\s*)$/.exec(_mediaQueryString)[1]\n      }));\n      interimIndex = _i2 + 1;\n    }\n  }\n\n  var mediaQueryString = string.substring(interimIndex);\n  var spaceBefore = /^(\\s*)/.exec(mediaQueryString)[1];\n  result.push(new _Container2.default({\n    type: 'media-query',\n    value: mediaQueryString.trim(),\n    sourceIndex: interimIndex + spaceBefore.length,\n    nodes: parseMediaQuery(mediaQueryString, interimIndex),\n    before: spaceBefore,\n    after: /(\\s*)$/.exec(mediaQueryString)[1]\n  }));\n\n  return result;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseMedia;\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _parsers = require('./parsers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media query list into an array of nodes. A typical node signature:\r\n *  {string} node.type -- one of: 'media-query', 'media-type', 'keyword',\r\n *    'media-feature-expression', 'media-feature', 'colon', 'value'\r\n *  {string} node.value -- the contents of a particular element, trimmed\r\n *    e.g.: `screen`, `max-width`, `1024px`\r\n *  {string} node.after -- whitespaces that follow the element\r\n *  {string} node.before -- whitespaces that precede the element\r\n *  {string} node.sourceIndex -- the index of the element in a source media\r\n *    query list, 0-based\r\n *  {object} node.parent -- a link to the parent node (a container)\r\n *\r\n * Some nodes (media queries, media feature expressions) contain other nodes.\r\n * They additionally have:\r\n *  {array} node.nodes -- an array of nodes of the type described here\r\n *  {funciton} node.each -- traverses direct children of the node, calling\r\n *    a callback for each one\r\n *  {funciton} node.walk -- traverses ALL descendants of the node, calling\r\n *    a callback for each one\r\n */\n\nfunction parseMedia(value) {\n  return new _Container2.default({\n    nodes: (0, _parsers.parseMediaList)(value),\n    type: 'media-query-list',\n    value: value.trim()\n  });\n}","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst { assert } = require('../utils/validateTypes');\n\nconst rangeOperators = new Set(['>=', '<=', '>', '<', '=']);\n\n/**\n * @param {string} name\n * @returns {boolean}\n */\nfunction isRangeContextName(name) {\n\t// When the node is like \"(width > 10em)\" or \"(10em < width)\"\n\t// Regex is needed because the name can either be in the first or second position\n\treturn /^(?!--)\\D/.test(name) || /^--./.test(name);\n}\n\n/**\n * @typedef {{ value: string, sourceIndex: number }} RangeContextNode\n *\n * @param {import('postcss-media-query-parser').Node} node\n * @returns {{ name: RangeContextNode, values: RangeContextNode[] }}\n */\nmodule.exports = function rangeContextNodeParser(node) {\n\t/** @type {import('postcss-value-parser').WordNode | undefined} */\n\tlet nameNode;\n\n\t/** @type {import('postcss-value-parser').WordNode[]} */\n\tconst valueNodes = [];\n\n\tvalueParser(node.value).walk((valueNode) => {\n\t\tif (valueNode.type !== 'word') return;\n\n\t\tif (rangeOperators.has(valueNode.value)) return;\n\n\t\tif (nameNode == null && isRangeContextName(valueNode.value)) {\n\t\t\tnameNode = valueNode;\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueNodes.push(valueNode);\n\t});\n\n\tassert(nameNode);\n\n\treturn {\n\t\tname: {\n\t\t\tvalue: nameNode.value,\n\t\t\tsourceIndex: node.sourceIndex + nameNode.sourceIndex,\n\t\t},\n\n\t\tvalues: valueNodes.map((valueNode) => ({\n\t\t\tvalue: valueNode.value,\n\t\t\tsourceIndex: node.sourceIndex + valueNode.sourceIndex,\n\t\t})),\n\t};\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tlet hasComments = atRule.raws.params && atRule.raws.params.raw;\n\t\t\tconst mediaRule = hasComments ? hasComments : atRule.params;\n\n\t\t\tmediaParser(mediaRule).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst expectedFeatureName = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expectedFeatureName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\thasComments.slice(sourceIndex + expectedFeatureName.length);\n\n\t\t\t\t\t\tif (atRule.raws.params == null) {\n\t\t\t\t\t\t\tthrow new Error('The `AtRuleRaws` node must have a `params` property');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tatRule.raws.params.raw = hasComments;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tatRule.params =\n\t\t\t\t\t\t\tatRule.params.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\tatRule.params.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.expected(value, expectedFeatureName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframe-declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tatRuleKeyframes.walkDecls((decl) => {\n\t\t\t\tif (!decl.important) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\t\tassert(pos);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: pos.index,\n\t\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tlet emptyLines = 0;\n\tlet lastIndex = -1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst getChars = replaceEmptyLines.bind(null, primary);\n\n\t\t/**\n\t\t * 1. walk nodes & replace enterchar\n\t\t * 2. deal with special case.\n\t\t */\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif (node.type === 'comment' && !ignoreComments) {\n\t\t\t\t\tnode.raws.left = getChars(node.raws.left);\n\t\t\t\t\tnode.raws.right = getChars(node.raws.right);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = getChars(node.raws.before);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// first node\n\t\t\tconst firstNodeRawsBefore = root.first && root.first.raws.before;\n\t\t\t// root raws\n\t\t\tconst rootRawsAfter = root.raws.after;\n\n\t\t\t// not document node\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tif ((root.document && root.document.constructor.name) !== 'Document') {\n\t\t\t\tif (firstNodeRawsBefore) {\n\t\t\t\t\troot.first.raws.before = getChars(firstNodeRawsBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (rootRawsAfter) {\n\t\t\t\t\t// when max setted 0, should be treated as 1 in this situation.\n\t\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter, true);\n\t\t\t\t}\n\t\t\t} else if (rootRawsAfter) {\n\t\t\t\t// `css in js` or `html`\n\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\temptyLines = 0;\n\t\tlastIndex = -1;\n\t\tconst rootString = root.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: rootString,\n\t\t\t\ttarget: /\\r\\n/.test(rootString) ? '\\r\\n' : '\\n',\n\t\t\t\tcomments: ignoreComments ? 'skip' : 'check',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckMatch(rootString, match.startIndex, match.endIndex, root);\n\t\t\t},\n\t\t);\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} matchStartIndex\n\t\t * @param {number} matchEndIndex\n\t\t * @param {import('postcss').Root} node\n\t\t */\n\t\tfunction checkMatch(source, matchStartIndex, matchEndIndex, node) {\n\t\t\tconst eof = matchEndIndex === source.length;\n\t\t\tlet problem = false;\n\n\t\t\t// Additional check for beginning of file\n\t\t\tif (!matchStartIndex || lastIndex === matchStartIndex) {\n\t\t\t\temptyLines++;\n\t\t\t} else {\n\t\t\t\temptyLines = 0;\n\t\t\t}\n\n\t\t\tlastIndex = matchEndIndex;\n\n\t\t\tif (emptyLines > primary) problem = true;\n\n\t\t\tif (!eof && !problem) return;\n\n\t\t\tif (problem) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: matchStartIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Additional check for end of file\n\t\t\tif (eof && primary) {\n\t\t\t\temptyLines++;\n\n\t\t\t\tif (emptyLines > primary && isEofNode(result.root, node)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: matchEndIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} maxLines\n\t\t * @param {unknown} str\n\t\t * @param {boolean?} isSpecialCase\n\t\t */\n\t\tfunction replaceEmptyLines(maxLines, str, isSpecialCase = false) {\n\t\t\tconst repeatTimes = isSpecialCase ? maxLines : maxLines + 1;\n\n\t\t\tif (repeatTimes === 0 || typeof str !== 'string') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst emptyLFLines = '\\n'.repeat(repeatTimes);\n\t\t\tconst emptyCRLFLines = '\\r\\n'.repeat(repeatTimes);\n\n\t\t\treturn /(?:\\r\\n)+/.test(str)\n\t\t\t\t? str.replace(/(\\r\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length / 2 > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyCRLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  })\n\t\t\t\t: str.replace(/(\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  });\n\t\t}\n\t};\n};\n\n/**\n * Checks whether the given node is the last node of file.\n * @param {import('stylelint').PostcssResult['root']} document - the document node with `postcss-html` and `postcss-jsx`.\n * @param {import('postcss').Root} root - the root node of css\n */\nfunction isEofNode(document, root) {\n\tif (!document || document.constructor.name !== 'Document' || !('type' in document)) {\n\t\treturn true;\n\t}\n\n\t// In the `postcss-html` and `postcss-jsx` syntax, checks that there is text after the given node.\n\tlet after;\n\n\tif (root === document.last) {\n\t\tafter = document.raws && document.raws.codeAfter;\n\t} else {\n\t\t// @ts-expect-error -- TS2345: Argument of type 'Root' is not assignable to parameter of type 'number | ChildNode'.\n\t\tconst rootIndex = document.index(root);\n\n\t\tconst nextNode = document.nodes[rootIndex + 1];\n\n\t\tafter = nextNode && nextNode.raws && nextNode.raws.codeBefore;\n\t}\n\n\treturn !String(after).trim();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframe-block-no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected duplicate \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframe-block-no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectors = new Set();\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\tconst ruleSelectors = keyframeRule.selectors;\n\n\t\t\t\truleSelectors.forEach((selector) => {\n\t\t\t\t\tif (!isStandardSyntaxSelector(selector)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tconst isDuplicate = selectors.has(normalizedSelector);\n\n\t\t\t\t\tif (isDuplicate) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectors.add(normalizedSelector);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   fix: ((node: import('postcss').AtRule, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function mediaFeatureColonSpaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ':' }, (match) => {\n\t\t\tcheckColon(params, match.startIndex, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst colonIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, colonIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: colonIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-colon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index + 1);\n\t\t\t\t\tconst afterColon = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-colon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index);\n\t\t\t\t\tconst afterColon = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, ' ') + afterColon;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, '') + afterColon;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected vendor-prefix',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst params = atRule.params;\n\n\t\t\tif (!isAutoprefixable.mediaFeatureName(params)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.params = isAutoprefixable.unprefix(atRule.params);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const match of matches) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: match,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t// If there are comments in the params, the complete string\n\t\t\t// will be at atRule.raws.params.raw\n\t\t\tconst params = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst indexBoost = atRuleParamIndex(atRule);\n\t\t\t/** @type {Array<{ message: string, index: number }>} */\n\t\t\tconst problems = [];\n\n\t\t\tconst parsedParams = valueParser(params).walk((node) => {\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tconst len = valueParser.stringify(node).length;\n\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tif (/[ \\t]/.test(node.before)) {\n\t\t\t\t\t\t\tif (context.fix) node.before = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/[ \\t]/.test(node.after)) {\n\t\t\t\t\t\t\tif (context.fix) node.after = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'always') {\n\t\t\t\t\t\tif (node.before === '') {\n\t\t\t\t\t\t\tif (context.fix) node.before = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.after === '') {\n\t\t\t\t\t\t\tif (context.fix) node.after = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tatRule.params = parsedParams.toString();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const err of problems) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name, value) => `Unexpected value \"${value}\" for name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature-expression$/i, (node) => {\n\t\t\t\tif (!node.nodes) return;\n\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(node.parent.value);\n\n\t\t\t\t// Ignore boolean\n\t\t\t\tif (!node.value.includes(':') && !mediaFeatureRangeContext) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mediaFeatureNode = node.nodes.find((n) => n.type === 'media-feature');\n\n\t\t\t\tif (mediaFeatureNode == null) throw new Error('A `media-feature` node must be present');\n\n\t\t\t\tlet mediaFeatureName;\n\t\t\t\tlet values;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tmediaFeatureName = parsedRangeContext.name.value;\n\t\t\t\t\tvalues = parsedRangeContext.values;\n\t\t\t\t} else {\n\t\t\t\t\tmediaFeatureName = mediaFeatureNode.value;\n\t\t\t\t\tconst valueNode = node.nodes.find((n) => n.type === 'value');\n\n\t\t\t\t\tif (valueNode == null) throw new Error('A `value` node must be present');\n\n\t\t\t\t\tvalues = [valueNode];\n\t\t\t\t}\n\n\t\t\t\tfor (const valueNode of values) {\n\t\t\t\t\tconst value = valueNode.value;\n\t\t\t\t\tconst unprefixedMediaFeatureName = vendor.unprefixed(mediaFeatureName);\n\n\t\t\t\t\tconst allowedValuesKey = Object.keys(primary).find((featureName) =>\n\t\t\t\t\t\tmatchesStringOrRegExp(unprefixedMediaFeatureName, featureName),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (allowedValuesKey == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(primary, allowedValuesKey, value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = atRuleParamIndex(atRule) + valueNode.sourceIndex;\n\t\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tmessage: messages.rejected(mediaFeatureName, value),\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n\texpectedOpeningSingleLine: 'Expected single space after \"(\" in a single-line function',\n\trejectedOpeningSingleLine: 'Unexpected whitespace after \"(\" in a single-line function',\n\texpectedClosingSingleLine: 'Expected single space before \")\" in a single-line function',\n\trejectedClosingSingleLine: 'Unexpected whitespace before \")\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore function without parameters\n\t\t\t\tif (!valueNode.nodes.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isSingleLine = isSingleLineString(functionString);\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\n\t\t\t\tif (primary === 'always' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\n\t\t\t\tif (primary === 'always' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (mediaFeatureName) => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreMediaFeatureNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreMediaFeatureNames', value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (vendor.prefix(value) || keywordSets.mediaFeatureNames.has(value.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst { assertString } = require('../utils/validateTypes');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule, index: number) => boolean) | null | undefined,\n *   allowTrailingComments?: boolean,\n * }} opts\n */\nmodule.exports = function mediaQueryListCommaWhitespaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ',' }, (match) => {\n\t\t\tlet index = match.startIndex;\n\n\t\t\tif (opts.allowTrailingComments) {\n\t\t\t\t// if there is a comment on the same line at after the comma, check the space after the comment.\n\t\t\t\tlet execResult;\n\n\t\t\t\twhile ((execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[0]);\n\t\t\t\t\tindex += execResult[0].length;\n\t\t\t\t}\n\n\t\t\t\tif ((execResult = /^([^\\S\\r\\n]*\\/\\/[\\s\\S]*?)\\r?\\n/.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[1]);\n\t\t\t\t\tindex += execResult[1].length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckComma(params, index, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst commaIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, commaIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: commaIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only check for the newline after the comma, while allowing\n\t\t// arbitrary indentation after the newline\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tallowTrailingComments: primary.startsWith('always'),\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = /^\\s*\\n/.test(afterComma)\n\t\t\t\t\t\t\t? beforeComma + afterComma.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t: beforeComma + context.newline + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst rangeOperators = ['>=', '<=', '>', '<', '='];\n\n/** @typedef {import('style-search').StyleSearchMatch} StyleSearchMatch */\n\n/**\n * @template {import('postcss').AtRule} T\n * @param {T} atRule\n * @param {(match: StyleSearchMatch, params: string, atRule: T) => void} cb\n */\nmodule.exports = function findMediaOperator(atRule, cb) {\n\tif (atRule.name.toLowerCase() !== 'media') {\n\t\treturn;\n\t}\n\n\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\tstyleSearch({ source: params, target: rangeOperators }, (match) => {\n\t\tconst before = params[match.startIndex - 1];\n\n\t\tif (before === '>' || before === '<') {\n\t\t\treturn;\n\t\t}\n\n\t\tcb(match, params, atRule);\n\t});\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after range operator',\n\trejectedAfter: () => 'Unexpected whitespace after range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-range-operator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckAfterOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index + 1);\n\t\t\t\t\tconst afterOperator = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkAfterOperator(match, params, node, fix) {\n\t\t\tconst endIndex = match.startIndex + match.target.length - 1;\n\n\t\t\tchecker.after({\n\t\t\t\tsource: params,\n\t\t\t\tindex: endIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(endIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: endIndex + atRuleParamIndex(node) + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports = function resolveNestedSelector(selector, node) {\n  var parent = node.parent;\n  var parentIsNestAtRule = parent.type === 'atrule' && parent.name === 'nest';\n\n  if (parent.type === 'root') return [selector];\n  if (parent.type !== 'rule' && !parentIsNestAtRule) return resolveNestedSelector(selector, parent);\n\n  var parentSelectors = (parentIsNestAtRule)\n    ? parent.params.split(',').map(function(s) { return s.trim(); })\n    : parent.selectors;\n\n  var resolvedSelectors = parentSelectors.reduce(function(result, parentSelector) {\n    if (selector.indexOf('&') !== -1) {\n      var newlyResolvedSelectors = resolveNestedSelector(parentSelector, parent).map(function(resolvedParentSelector) {\n        return selector.replace(/&/g, resolvedParentSelector);\n      });\n      return result.concat(newlyResolvedSelectors);\n    }\n\n    var combinedSelector = [ parentSelector, selector ].join(' ');\n    return result.concat(resolveNestedSelector(combinedSelector, parent));\n  }, []);\n\n  return resolvedSelectors;\n}\n","import e from\"postcss-selector-parser\";function s(n){if(!n)return{a:0,b:0,c:0};let t=0,c=0,o=0;if(\"universal\"==n.type)return{a:0,b:0,c:0};if(\"id\"===n.type)t+=1;else if(\"tag\"===n.type)o+=1;else if(\"class\"===n.type)c+=1;else if(\"attribute\"===n.type)c+=1;else if(function(s){return e.isPseudoElement(s)}(n))o+=1;else if(e.isPseudoClass(n))switch(n.value.toLowerCase()){case\":-moz-any\":case\":-webkit-any\":case\":any\":case\":has\":case\":is\":case\":matches\":case\":not\":if(n.nodes&&n.nodes.length>0){const e=a(n.nodes);t+=e.a,c+=e.b,o+=e.c}break;case\":where\":break;case\":nth-child\":case\":nth-last-child\":if(c+=1,n.nodes&&n.nodes.length>0){const s=n.nodes[0].nodes.findIndex((e=>\"tag\"===e.type&&\"of\"===e.value.toLowerCase()));if(s>-1){const l=[e.selector({nodes:n.nodes[0].nodes.slice(s+1),value:\"\"})];n.nodes.length>1&&l.push(...n.nodes.slice(1));const r=a(l);t+=r.a,c+=r.b,o+=r.c}}break;case\":local\":case\":global\":n.nodes&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));break;default:c+=1}else e.isContainer(n)&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));return{a:t,b:c,c:o}}function a(e){let a={a:0,b:0,c:0};return e.forEach((e=>{const n=s(e);n.a>a.a?a=n:n.a<a.a||(n.b>a.b?a=n:n.b<a.b||n.c>a.c&&(a=n))})),a}function n(e,s){return e.a===s.a?e.b===s.b?e.c-s.c:e.b-s.b:e.a-s.a}export{n as compare,s as selectorSpecificity};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * Find the at-rule in which a rule is nested.\n *\n * Returns `null` if the rule is not nested within an at-rule.\n *\n * @param {import('postcss').Rule} rule\n * @returns {null | import('postcss').AtRule}\n */\nmodule.exports = function findAtRuleContext(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn null;\n\t}\n\n\tif (isAtRule(parent)) {\n\t\treturn parent;\n\t}\n\n\tif (isRule(parent)) {\n\t\treturn findAtRuleContext(parent);\n\t}\n\n\treturn null;\n};\n","'use strict';\n\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\nmodule.exports = function nodeContextLookup() {\n\tconst contextMap = new Map();\n\n\treturn {\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {any[]} subContexts\n\t\t * @returns {Map<any, any>}\n\t\t */\n\t\tgetContext(node, ...subContexts) {\n\t\t\tif (!node.source) throw new Error('The node source must be present');\n\n\t\t\tconst nodeSource = node.source.input.from;\n\t\t\tconst baseContext = creativeGetMap(contextMap, nodeSource);\n\n\t\t\treturn subContexts.reduce((result, context) => creativeGetMap(result, context), baseContext);\n\t\t},\n\t};\n};\n\n/**\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\nfunction creativeGetMap(someMap, someThing) {\n\tif (!someMap.has(someThing)) {\n\t\tsomeMap.set(someThing, new Map());\n\t}\n\n\treturn someMap.get(someThing);\n}\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selector\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Node} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function parseSelector(selector, result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(selector);\n\t} catch (err) {\n\t\tresult.warn(`Cannot parse selector (${err})`, { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity: calculate, compare } = require('@csstools/selector-specificity');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-descending-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-descending-specificity',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['selectors-within-list'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\t// Ignore nested property `foo: {};`\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignores selectors within list of selectors\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'selectors-within-list') &&\n\t\t\t\truleNode.selectors.length > 1\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst comparisonContext = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst trimSelector = selector.trim();\n\n\t\t\t\t// Ignore `.selector, { }`\n\t\t\t\tif (trimSelector === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Resolve any nested selectors before checking\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => {\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcheckSelector(s, ruleNode, comparisonContext);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {Map<any, any>} comparisonContext\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode, comparisonContext) {\n\t\t\tconst selector = selectorNode.toString();\n\t\t\tconst referenceSelectorNode = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n\t\t\tconst selectorSpecificity = calculate(selectorNode);\n\t\t\tconst entry = { selector, specificity: selectorSpecificity };\n\n\t\t\tif (!comparisonContext.has(referenceSelectorNode)) {\n\t\t\t\tcomparisonContext.set(referenceSelectorNode, [entry]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {Array<typeof entry>} */\n\t\t\tconst priorComparableSelectors = comparisonContext.get(referenceSelectorNode);\n\n\t\t\tfor (const priorEntry of priorComparableSelectors) {\n\t\t\t\tif (compare(selectorSpecificity, priorEntry.specificity) < 0) {\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, priorEntry.selector),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpriorComparableSelectors.push(entry);\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Root} selectorNode\n */\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n\tconst firstChild = selectorNode.nodes[0];\n\n\tassert(firstChild);\n\tconst nodesByCombinator = firstChild.split((node) => node.type === 'combinator');\n\tconst nodesAfterLastCombinator = nodesByCombinator[nodesByCombinator.length - 1];\n\n\tassert(nodesAfterLastCombinator);\n\tconst nodesWithoutPseudoClasses = nodesAfterLastCombinator\n\t\t.filter((node) => {\n\t\t\treturn (\n\t\t\t\tnode.type !== 'pseudo' ||\n\t\t\t\tnode.value.startsWith('::') ||\n\t\t\t\tkeywordSets.pseudoElements.has(node.value.replace(/:/g, ''))\n\t\t\t);\n\t\t})\n\t\t.join('');\n\n\treturn nodesWithoutPseudoClasses.toString();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before range operator',\n\trejectedBefore: () => 'Unexpected whitespace before range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-range-operator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckBeforeOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index);\n\t\t\t\t\tconst afterOperator = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkBeforeOperator(match, params, node, fix) {\n\t\t\t// The extra `+ 1` is because the match itself contains\n\t\t\t// the character before the operator\n\t\t\tchecker.before({\n\t\t\t\tsource: params,\n\t\t\t\tindex: match.startIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: match.startIndex - 1 + atRuleParamIndex(node),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atImport) => `Unexpected duplicate @import rule ${atImport}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-duplicate-at-import-rules',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Record<string, string[]>} */\n\t\tconst imports = {};\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst [firstParam, ...restParams] = valueParser(atRule.params).nodes;\n\n\t\t\tif (!firstParam) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// extract uri from url() if exists\n\t\t\tconst uri =\n\t\t\t\tfirstParam.type === 'function' && firstParam.value === 'url' && firstParam.nodes[0]\n\t\t\t\t\t? firstParam.nodes[0].value\n\t\t\t\t\t: firstParam.value;\n\n\t\t\t// extract media queries if any\n\t\t\tconst media = (mediaParser(valueParser.stringify(restParams)).nodes || [])\n\t\t\t\t.map((n) => n.value.replace(/\\s/g, ''))\n\t\t\t\t.filter((n) => n.length);\n\n\t\t\tlet importedUris = imports[uri];\n\t\t\tconst isDuplicate = media.length\n\t\t\t\t? media.some((q) => importedUris && importedUris.includes(q))\n\t\t\t\t: importedUris;\n\n\t\t\tif (isDuplicate) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(uri),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: atRule.toString(),\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!importedUris) {\n\t\t\t\timportedUris = imports[uri] = [];\n\t\t\t}\n\n\t\t\timportedUris.push(...media);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isWhitespace = require('./isWhitespace');\n\n/**\n * Returns a Boolean indicating whether the the input string is only whitespace.\n *\n * @param {string} input\n * @returns {boolean}\n */\nmodule.exports = function (input) {\n\tlet isOnlyWhitespace = true;\n\n\tfor (const element of input) {\n\t\tif (!isWhitespace(element)) {\n\t\t\tisOnlyWhitespace = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn isOnlyWhitespace;\n};\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isComment, isDeclaration, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-eol-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected whitespace at end of line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-eol-whitespace',\n};\n\nconst whitespacesToReject = new Set([' ', '\\t']);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction fixString(str) {\n\treturn str.replace(/[ \\t]+$/, '');\n}\n\n/**\n * @param {number} lastEOLIndex\n * @param {string} string\n * @param {{ ignoreEmptyLines?: boolean, isRootFirst?: boolean }} [options]\n * @returns {number}\n */\nfunction findErrorStartIndex(\n\tlastEOLIndex,\n\tstring,\n\t{ ignoreEmptyLines, isRootFirst } = {\n\t\tignoreEmptyLines: false,\n\t\tisRootFirst: false,\n\t},\n) {\n\tconst eolWhitespaceIndex = lastEOLIndex - 1;\n\n\t// If the character before newline is not whitespace, ignore\n\tif (!whitespacesToReject.has(string.charAt(eolWhitespaceIndex))) {\n\t\treturn -1;\n\t}\n\n\tif (ignoreEmptyLines) {\n\t\t// If there is only whitespace between the previous newline and\n\t\t// this newline, ignore\n\t\tconst beforeNewlineIndex = string.lastIndexOf('\\n', eolWhitespaceIndex);\n\n\t\tif (beforeNewlineIndex >= 0 || isRootFirst) {\n\t\t\tconst line = string.substring(beforeNewlineIndex, eolWhitespaceIndex);\n\n\t\t\tif (isOnlyWhitespace(line)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn eolWhitespaceIndex;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['empty-lines'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreEmptyLines = optionsMatches(secondaryOptions, 'ignore', 'empty-lines');\n\n\t\tif (context.fix) {\n\t\t\tfix(root);\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tconst reportFromIndex = (index) => {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t};\n\n\t\teachEolWhitespace(rootString, reportFromIndex, true);\n\n\t\tconst errorIndex = findErrorStartIndex(rootString.length, rootString, {\n\t\t\tignoreEmptyLines,\n\t\t\tisRootFirst: true,\n\t\t});\n\n\t\tif (errorIndex > -1) {\n\t\t\treportFromIndex(errorIndex);\n\t\t}\n\n\t\t/**\n\t\t * Iterate each whitespace at the end of each line of the given string.\n\t\t * @param {string} string - the source code string\n\t\t * @param {(index: number) => void} callback - callback the whitespace index at the end of each line.\n\t\t * @param {boolean} isRootFirst - set `true` if the given string is the first token of the root.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction eachEolWhitespace(string, callback, isRootFirst) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: string,\n\t\t\t\t\ttarget: ['\\n', '\\r'],\n\t\t\t\t\tcomments: 'check',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst index = findErrorStartIndex(match.startIndex, string, {\n\t\t\t\t\t\tignoreEmptyLines,\n\t\t\t\t\t\tisRootFirst,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tcallback(index);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Root} rootNode\n\t\t */\n\t\tfunction fix(rootNode) {\n\t\t\tlet isRootFirst = true;\n\n\t\t\trootNode.walk((node) => {\n\t\t\t\tfixText(\n\t\t\t\t\tnode.raws.before,\n\t\t\t\t\t(fixed) => {\n\t\t\t\t\t\tnode.raws.before = fixed;\n\t\t\t\t\t},\n\t\t\t\t\tisRootFirst,\n\t\t\t\t);\n\t\t\t\tisRootFirst = false;\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tfixText(node.raws.afterName, (fixed) => {\n\t\t\t\t\t\tnode.raws.afterName = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rawsParams = node.raws.params;\n\n\t\t\t\t\tif (rawsParams) {\n\t\t\t\t\t\tfixText(rawsParams.raw, (fixed) => {\n\t\t\t\t\t\t\trawsParams.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.params, (fixed) => {\n\t\t\t\t\t\t\tnode.params = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tconst rawsSelector = node.raws.selector;\n\n\t\t\t\t\tif (rawsSelector) {\n\t\t\t\t\t\tfixText(rawsSelector.raw, (fixed) => {\n\t\t\t\t\t\t\trawsSelector.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.selector, (fixed) => {\n\t\t\t\t\t\t\tnode.selector = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node) || isDeclaration(node)) {\n\t\t\t\t\tfixText(node.raws.between, (fixed) => {\n\t\t\t\t\t\tnode.raws.between = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst rawsValue = node.raws.value;\n\n\t\t\t\t\tif (rawsValue) {\n\t\t\t\t\t\tfixText(rawsValue.raw, (fixed) => {\n\t\t\t\t\t\t\trawsValue.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.value, (fixed) => {\n\t\t\t\t\t\t\tnode.value = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isComment(node)) {\n\t\t\t\t\tfixText(node.raws.left, (fixed) => {\n\t\t\t\t\t\tnode.raws.left = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!isStandardSyntaxComment(node)) {\n\t\t\t\t\t\tnode.raws.right = node.raws.right && fixString(node.raws.right);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.raws.right, (fixed) => {\n\t\t\t\t\t\t\tnode.raws.right = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tfixText(node.text, (fixed) => {\n\t\t\t\t\t\tnode.text = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node)) {\n\t\t\t\t\tfixText(node.raws.after, (fixed) => {\n\t\t\t\t\t\tnode.raws.after = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfixText(\n\t\t\t\trootNode.raws.after,\n\t\t\t\t(fixed) => {\n\t\t\t\t\trootNode.raws.after = fixed;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (typeof rootNode.raws.after === 'string') {\n\t\t\t\tconst lastEOL = Math.max(\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\n'),\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\r'),\n\t\t\t\t);\n\n\t\t\t\tif (lastEOL !== rootNode.raws.after.length - 1) {\n\t\t\t\t\trootNode.raws.after =\n\t\t\t\t\t\trootNode.raws.after.slice(0, lastEOL + 1) +\n\t\t\t\t\t\tfixString(rootNode.raws.after.slice(lastEOL + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string | undefined} value\n\t\t * @param {(text: string) => void} fixFn\n\t\t * @param {boolean} isRootFirst\n\t\t */\n\t\tfunction fixText(value, fixFn, isRootFirst = false) {\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\n\t\t\teachEolWhitespace(\n\t\t\t\tvalue,\n\t\t\t\t(index) => {\n\t\t\t\t\tconst newlineIndex = index + 1;\n\n\t\t\t\t\tfixed += fixString(value.slice(lastIndex, newlineIndex));\n\t\t\t\t\tlastIndex = newlineIndex;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (lastIndex) {\n\t\t\t\tfixed += value.slice(lastIndex);\n\t\t\t\tfixFn(fixed);\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../../utils/arrayEqual');\n\n/**\n *\n * @param {string[][]} areas\n * @param {string} name\n * @returns {boolean}\n */\nfunction isContiguousAndRectangular(areas, name) {\n\tconst indicesByRow = areas.map((row) => {\n\t\tconst indices = [];\n\t\tlet idx = row.indexOf(name);\n\n\t\twhile (idx !== -1) {\n\t\t\tindices.push(idx);\n\t\t\tidx = row.indexOf(name, idx + 1);\n\t\t}\n\n\t\treturn indices;\n\t});\n\n\tfor (let i = 0; i < indicesByRow.length; i++) {\n\t\tfor (let j = i + 1; j < indicesByRow.length; j++) {\n\t\t\tconst x = indicesByRow[i];\n\t\t\tconst y = indicesByRow[j];\n\n\t\t\tif ((x && x.length === 0) || (y && y.length === 0)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!arrayEqual(x, y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction namedAreas(areas) {\n\tconst names = new Set(areas.flat());\n\n\tnames.delete('.');\n\n\treturn [...names];\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction findNotContiguousOrRectangular(areas) {\n\treturn namedAreas(areas).filter((name) => !isContiguousAndRectangular(areas, name));\n}\n\nmodule.exports = findNotContiguousOrRectangular;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findNotContiguousOrRectangular = require('./utils/findNotContiguousOrRectangular');\nconst isRectangular = require('./utils/isRectangular');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'named-grid-areas-no-invalid';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedToken: () => 'Expected cell token within string',\n\texpectedSameNumber: () => 'Expected same number of cell tokens in each string',\n\texpectedRectangle: (name) => `Expected single filled-in rectangle for \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/named-grid-areas-no-invalid',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^(?:grid|grid-template|grid-template-areas)$/i, (decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (value.toLowerCase().trim() === 'none') return;\n\n\t\t\t/** @type {string[][]} */\n\t\t\tconst areas = [];\n\t\t\tlet reportSent = false;\n\n\t\t\tvalueParser(value).walk(({ sourceIndex, type, value: tokenValue }) => {\n\t\t\t\tif (type !== 'string') return;\n\n\t\t\t\tif (tokenValue === '') {\n\t\t\t\t\tcomplain(messages.expectedToken(), sourceIndex);\n\t\t\t\t\treportSent = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tareas.push(\n\t\t\t\t\ttokenValue\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(' ')\n\t\t\t\t\t\t.filter((s) => s.length > 0),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tif (reportSent) return;\n\n\t\t\tif (areas.length === 0) return;\n\n\t\t\tif (!isRectangular(areas)) {\n\t\t\t\tcomplain(messages.expectedSameNumber());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notContiguousOrRectangular = findNotContiguousOrRectangular(areas);\n\n\t\t\tfor (const name of notContiguousOrRectangular.sort()) {\n\t\t\t\tcomplain(messages.expectedRectangle(name));\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} [sourceIndex=0]\n\t\t\t */\n\t\t\tfunction complain(message, sourceIndex = 0) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n *\n * @param {string[][]} areas\n * @returns {boolean}\n */\nfunction isRectangular(areas) {\n\tconst firstArea = areas[0];\n\n\tif (firstArea === undefined) return false;\n\n\treturn areas.every((row) => row.length === firstArea.length);\n}\n\nmodule.exports = isRectangular;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-first-line';\nconst noEmptyFirstLineTest = /^\\s*[\\r\\n]/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-empty-first-line',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'. Property 'lang' does not exist on type 'Source'.\n\t\tif (!validOptions || root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (!rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (noEmptyFirstLineTest.test(rootString)) {\n\t\t\tif (context.fix) {\n\t\t\t\tif (root.first == null) {\n\t\t\t\t\tthrow new Error('The root node must have the first node.');\n\t\t\t\t}\n\n\t\t\t\tif (root.first.raws.before == null) {\n\t\t\t\t\tthrow new Error('The first node must have spaces before.');\n\t\t\t\t}\n\n\t\t\t\troot.first.raws.before = root.first.raws.before.trimStart();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-extra-semicolons';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected extra semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-extra-semicolons',\n};\n\n/**\n * @param {import('postcss').Node} node\n * @returns {number}\n */\nfunction getOffsetByNode(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Document | Container<ChildNode>'\n\tif (node.parent && node.parent.document) {\n\t\treturn 0;\n\t}\n\n\tconst root = node.root();\n\n\tif (!root.source) throw new Error('The root node must have a source');\n\n\tif (!node.source) throw new Error('The node must have a source');\n\n\tif (!node.source.start) throw new Error('The source must have a start position');\n\n\tconst string = root.source.input.css;\n\tconst nodeColumn = node.source.start.column;\n\tconst nodeLine = node.source.start.line;\n\tlet line = 1;\n\tlet column = 1;\n\tlet index = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (column === nodeColumn && nodeLine === line) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (string[i] === '\\n') {\n\t\t\tcolumn = 1;\n\t\t\tline += 1;\n\t\t} else {\n\t\t\tcolumn += 1;\n\t\t}\n\t}\n\n\treturn index;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.raws.after && root.raws.after.trim().length !== 0) {\n\t\t\tconst rawAfterRoot = root.raws.after;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixSemiIndices = [];\n\n\t\t\tstyleSearch({ source: rawAfterRoot, target: ';' }, (match) => {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\t\t\tcomplain(root.source.input.css.length - rawAfterRoot.length + match.startIndex);\n\t\t\t});\n\n\t\t\t// fix\n\t\t\tif (fixSemiIndices.length) {\n\t\t\t\troot.raws.after = removeIndices(rawAfterRoot, fixSemiIndices);\n\t\t\t}\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tif (node.type === 'atrule' && !isStandardSyntaxAtRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'rule' && !isStandardSyntaxRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.raws.before && node.raws.before.trim().length !== 0) {\n\t\t\t\tconst rawBeforeNode = node.raws.before;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\tconst rawBeforeIndexStart = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawBeforeNode, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex - rawBeforeIndexStart);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(getOffsetByNode(node) - rawBeforeNode.length + match.startIndex);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.before = removeIndices(rawBeforeNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.after === 'string' && node.raws.after.trim().length !== 0) {\n\t\t\t\tconst rawAfterNode = node.raws.after;\n\n\t\t\t\t/**\n\t\t\t\t * If the last child is a Less mixin followed by more than one semicolon,\n\t\t\t\t * node.raws.after will be populated with that semicolon.\n\t\t\t\t * Since we ignore Less mixins, exit here\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\t'last' in node &&\n\t\t\t\t\tnode.last &&\n\t\t\t\t\tnode.last.type === 'atrule' &&\n\t\t\t\t\t!isStandardSyntaxAtRule(node.last)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawAfterNode, target: ';' }, (match) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\t1 -\n\t\t\t\t\t\trawAfterNode.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.after = removeIndices(rawAfterNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.ownSemicolon === 'string') {\n\t\t\t\tconst rawOwnSemicolon = node.raws.ownSemicolon;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawOwnSemicolon, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\trawOwnSemicolon.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.ownSemicolon = removeIndices(rawOwnSemicolon, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} str\n\t\t * @param {number[]} indices\n\t\t * @returns {string}\n\t\t */\n\t\tfunction removeIndices(str, indices) {\n\t\t\tfor (const index of indices.reverse()) {\n\t\t\t\tstr = str.slice(0, index) + str.slice(index + 1);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-invalid-double-slash-comments';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected double-slash CSS comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-invalid-double-slash-comments',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.startsWith('//')) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: decl.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tif (selector.startsWith('//')) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: ruleNode.toString(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-invalid-position-at-import-rule';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected invalid position @import rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-invalid-position-at-import-rule',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, options) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet invalidPosition = false;\n\n\t\troot.walk((node) => {\n\t\t\tconst nodeName = ('name' in node && node.name && node.name.toLowerCase()) || '';\n\n\t\t\tif (\n\t\t\t\t(node.type === 'atrule' &&\n\t\t\t\t\tnodeName !== 'charset' &&\n\t\t\t\t\tnodeName !== 'import' &&\n\t\t\t\t\tnodeName !== 'layer' &&\n\t\t\t\t\t!optionsMatches(options, 'ignoreAtRules', node.name) &&\n\t\t\t\t\tisStandardSyntaxAtRule(node)) ||\n\t\t\t\t(node.type === 'rule' && isStandardSyntaxRule(node))\n\t\t\t) {\n\t\t\t\tinvalidPosition = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'atrule' && nodeName === 'import' && invalidPosition) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: node.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-irregular-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\tunexpected: 'Unexpected irregular whitespace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-irregular-whitespace',\n};\n\nconst IRREGULAR_WHITESPACES = [\n\t'\\u000B', // Line Tabulation (\\v) - <VT>\n\t'\\u000C', // Form Feed (\\f) - <FF>\n\t'\\u00A0', // No-Break Space - <NBSP>\n\t'\\u0085', // Next Line\n\t'\\u1680', // Ogham Space Mark\n\t'\\u180E', // Mongolian Vowel Separator - <MVS>\n\t'\\uFEFF', // Zero Width No-Break Space - <BOM>\n\t'\\u2000', // En Quad\n\t'\\u2001', // Em Quad\n\t'\\u2002', // En Space - <ENSP>\n\t'\\u2003', // Em Space - <EMSP>\n\t'\\u2004', // Tree-Per-Em\n\t'\\u2005', // Four-Per-Em\n\t'\\u2006', // Six-Per-Em\n\t'\\u2007', // Figure Space\n\t'\\u2008', // Punctuation Space - <PUNCSP>\n\t'\\u2009', // Thin Space\n\t'\\u200A', // Hair Space\n\t'\\u200B', // Zero Width Space - <ZWSP>\n\t'\\u2028', // Line Separator\n\t'\\u2029', // Paragraph Separator\n\t'\\u202F', // Narrow No-Break Space\n\t'\\u205F', // Medium Mathematical Space\n\t'\\u3000', // Ideographic Space\n];\n\nconst IRREGULAR_WHITESPACES_PATTERN = new RegExp(`([${IRREGULAR_WHITESPACES.join('')}])`);\n\n/**\n * @param {string} str\n * @returns {string | null}\n */\nconst findIrregularWhitespace = (str) => {\n\tconst result = IRREGULAR_WHITESPACES_PATTERN.exec(str);\n\n\treturn (result && result[1]) || null;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string | undefined} value\n\t\t */\n\t\tconst validate = (node, value) => {\n\t\t\tconst issue = value && findIrregularWhitespace(value);\n\n\t\t\tif (issue) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage: messages.unexpected,\n\t\t\t\t\tnode,\n\t\t\t\t\tword: issue,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tvalidate(atRule, atRule.name);\n\t\t\tvalidate(atRule, atRule.params);\n\t\t\tvalidate(atRule, atRule.raws.before);\n\t\t\tvalidate(atRule, atRule.raws.after);\n\t\t\tvalidate(atRule, atRule.raws.afterName);\n\t\t\tvalidate(atRule, atRule.raws.between);\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tvalidate(ruleNode, ruleNode.selector);\n\t\t\tvalidate(ruleNode, ruleNode.raws.before);\n\t\t\tvalidate(ruleNode, ruleNode.raws.after);\n\t\t\tvalidate(ruleNode, ruleNode.raws.between);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalidate(decl, decl.prop);\n\t\t\tvalidate(decl, decl.value);\n\t\t\tvalidate(decl, decl.raws.before);\n\t\t\tvalidate(decl, decl.raws.between);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * Check if a rule is a keyframe one\n *\n * @param {import('postcss').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function (rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(parent) && parent.name.toLowerCase() === 'keyframes';\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst selectorParser = require('postcss-selector-parser');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector, firstDuplicateLine) =>\n\t\t`Unexpected duplicate selector \"${selector}\", first used at line ${firstDuplicateLine}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tdisallowInList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldDisallowDuplicateInList = secondaryOptions && secondaryOptions.disallowInList;\n\n\t\t// The top level of this map will be rule sources.\n\t\t// Each source maps to another map, which maps rule parents to a set of selectors.\n\t\t// This ensures that selectors are only checked against selectors\n\t\t// from other rules that share the same parent and the same source.\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contextSelectorSet = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\t\t\tconst resolvedSelectorList = [\n\t\t\t\t...new Set(\n\t\t\t\t\truleNode.selectors.flatMap((selector) => resolvedNestedSelector(selector, ruleNode)),\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tconst normalizedSelectorList = resolvedSelectorList.map(normalize);\n\n\t\t\t// Sort the selectors list so that the order of the constituents\n\t\t\t// doesn't matter\n\t\t\tconst sortedSelectorList = [...normalizedSelectorList].sort().join(',');\n\n\t\t\tif (!ruleNode.source) throw new Error('The rule node must have a source');\n\n\t\t\tif (!ruleNode.source.start) throw new Error('The rule source must have a start position');\n\n\t\t\tconst selectorLine = ruleNode.source.start.line;\n\n\t\t\t// Complain if the same selector list occurs twice\n\n\t\t\tlet previousDuplicatePosition;\n\t\t\t// When `disallowInList` is true, we must parse `sortedSelectorList` into\n\t\t\t// list items.\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectorListParsed = [];\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tparseSelector(sortedSelectorList, result, ruleNode, (selectors) => {\n\t\t\t\t\tselectors.each((s) => {\n\t\t\t\t\t\tconst selector = String(s);\n\n\t\t\t\t\t\tselectorListParsed.push(selector);\n\n\t\t\t\t\t\tif (contextSelectorSet.get(selector)) {\n\t\t\t\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(sortedSelectorList);\n\t\t\t}\n\n\t\t\tif (previousDuplicatePosition) {\n\t\t\t\t// If the selector isn't nested we can use its raw value; otherwise,\n\t\t\t\t// we have to approximate something for the message -- which is close enough\n\t\t\t\tconst isNestedSelector = resolvedSelectorList.join(',') !== ruleNode.selectors.join(',');\n\t\t\t\tconst selectorForMessage = isNestedSelector\n\t\t\t\t\t? resolvedSelectorList.join(', ')\n\t\t\t\t\t: ruleNode.selector;\n\n\t\t\t\treturn report({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selectorForMessage, previousDuplicatePosition),\n\t\t\t\t\tword: selectorForMessage,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst presentedSelectors = new Set();\n\t\t\tconst reportedSelectors = new Set();\n\n\t\t\t// Or complain if one selector list contains the same selector more than once\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst normalized = normalize(selector);\n\n\t\t\t\tif (presentedSelectors.has(normalized)) {\n\t\t\t\t\tif (reportedSelectors.has(normalized)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, selectorLine),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t\treportedSelectors.add(normalized);\n\t\t\t\t} else {\n\t\t\t\t\tpresentedSelectors.add(normalized);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tfor (const selector of selectorListParsed) {\n\t\t\t\t\t// [selectorLine] will not really be accurate for multi-line\n\t\t\t\t\t// selectors, such as \"bar\" in \"foo,\\nbar {}\".\n\t\t\t\t\tcontextSelectorSet.set(selector, selectorLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontextSelectorSet.set(sortedSelectorList, selectorLine);\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} selector\n * @returns {string}\n */\nfunction normalize(selector) {\n\tif (!isStandardSyntaxSelector(selector)) {\n\t\treturn selector;\n\t}\n\n\treturn selectorParser().processSync(selector, { lossless: false });\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-source';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty source',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-empty-source',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-leading-zero';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a leading zero',\n\trejected: 'Unexpected leading zero',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-leading-zero',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst neverFixPositions = [];\n\t\t\t/** @type {Array<{ index: number }>} */\n\t\t\tconst alwaysFixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check leading zero\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tconst match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 2 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n\t\t\t\t\t// for regex. And we need the index of \".5\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - match[1].length;\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\talwaysFixPositions.unshift({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex =\n\t\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.expected, node, baseIndex + index);\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never') {\n\t\t\t\t\tconst match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null || match[2] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 3 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-00.5\"\n\t\t\t\t\t// as an input for regex. And we need the index of \"00\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneverFixPositions.unshift({\n\t\t\t\t\t\t\tstartIndex: index,\n\t\t\t\t\t\t\t// match[1].length is the length of our matched zero(s)\n\t\t\t\t\t\t\tendIndex: index + match[1].length,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex =\n\t\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.rejected, node, baseIndex + index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (alwaysFixPositions.length) {\n\t\t\t\tfor (const fixPosition of alwaysFixPositions) {\n\t\t\t\t\tconst index = fixPosition.index;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = addLeadingZero(node.params, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = addLeadingZero(node.value, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (neverFixPositions.length) {\n\t\t\t\tfor (const fixPosition of neverFixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = removeLeadingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeLeadingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} index\n * @returns {string}\n */\nfunction addLeadingZero(input, index) {\n\t// eslint-disable-next-line prefer-template\n\treturn input.slice(0, index) + '0' + input.slice(index);\n}\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-no-trailing-zeros';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected trailing zero(s)',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-no-trailing-zeros',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\.(\\d{0,100}?)(0+)(?:\\D|$)/.exec(valueNode.value);\n\n\t\t\t\t// match[1] is any numbers between the decimal and our trailing zero, could be empty\n\t\t\t\t// match[2] is our trailing zero(s)\n\t\t\t\tif (match == null || match[1] == null || match[2] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// our index is:\n\t\t\t\t//  the index of our valueNode +\n\t\t\t\t//  the index of our match +\n\t\t\t\t//  1 for our decimal +\n\t\t\t\t//  the length of our potential non-zero number match (match[1])\n\t\t\t\tconst index = valueNode.sourceIndex + match.index + 1 + match[1].length;\n\n\t\t\t\t// our startIndex is identical to our index except when we have only\n\t\t\t\t// trailing zeros after our decimal. in that case we don't need the decimal\n\t\t\t\t// either so we move our index back by 1.\n\t\t\t\tconst startIndex = match[1].length > 0 ? index : index - 1;\n\n\t\t\t\t// our end index is our original index + the length of our trailing zeros\n\t\t\t\tconst endIndex = index + match[2].length;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex =\n\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\t// this is the index of the _first_ trailing zero\n\t\t\t\t\tindex: baseIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = removeTrailingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeTrailingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeTrailingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'number-max-precision';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-max-precision',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = 'prop' in node ? node.prop : undefined;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\d*\\.(\\d+)/.exec(valueNode.value);\n\n\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (match[1].length <= primary) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex =\n\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\t\t\t\tconst actual = Number.parseFloat(match[0]);\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: baseIndex + valueNode.sourceIndex + match.index,\n\t\t\t\t\tmessage: messages.expected(actual, actual.toFixed(primary)),\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports.all = require('./data/all.json').properties;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst properties = require('known-css-properties').all;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected unknown property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\tconst allValidProperties = new Set(properties);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tcheckPrefixed: [isBoolean],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldCheckPrefixed = secondaryOptions && secondaryOptions.checkPrefixed;\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!shouldCheckPrefixed && vendor.prefix(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (\n\t\t\t\tparent &&\n\t\t\t\tisRule(parent) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', parent.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {import('postcss').Node | undefined} */\n\t\t\tlet node = parent;\n\n\t\t\twhile (node && node.type !== 'root') {\n\t\t\t\tif (isAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\n\t\t\tif (allValidProperties.has(prop.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: prop,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'rule-selector-property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, selector) => `Unexpected property \"${property}\" for selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/rule-selector-property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectors = Object.keys(primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectorKey = selectors.find((selector) =>\n\t\t\t\tmatchesStringOrRegExp(ruleNode.selector, selector),\n\t\t\t);\n\n\t\t\tif (!selectorKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst disallowedProperties = primary[selectorKey];\n\n\t\t\tif (!disallowedProperties) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const node of ruleNode.nodes) {\n\t\t\t\tconst isDisallowedProperty =\n\t\t\t\t\tnode.type === 'decl' && matchesStringOrRegExp(node.prop, disallowedProperties);\n\n\t\t\t\tif (isDisallowedProperty) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(node.prop, ruleNode.selector),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'property-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { parent } = decl;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRule(parent)) {\n\t\t\t\tconst { selector } = parent;\n\n\t\t\t\tif (selector && optionsMatches(secondaryOptions, 'ignoreSelectors', selector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst expectedProp = primary === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n\t\t\tif (prop === expectedProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = expectedProp;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(prop, expectedProp),\n\t\t\t\tnode: decl,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findAnimationName = require('../../utils/findAnimationName');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-unknown-animations';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (animationName) => `Unexpected unknown animation name \"${animationName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-unknown-animations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declaredAnimations = new Set();\n\n\t\troot.walkAtRules(/(-(moz|webkit)-)?keyframes/i, (atRule) => {\n\t\t\tdeclaredAnimations.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'animation' || decl.prop.toLowerCase() === 'animation-name') {\n\t\t\t\tconst animationNames = findAnimationName(decl.value);\n\n\t\t\t\tif (animationNames.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const animationNameNode of animationNames) {\n\t\t\t\t\tif (keywordSets.animationNameKeywords.has(animationNameNode.value.toLowerCase())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declaredAnimations.has(animationNameNode.value)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(animationNameNode.value),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: declarationValueIndex(decl) + animationNameNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getUnitFromValueNode = require('./getUnitFromValueNode');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isVariable = require('./isVariable');\nconst keywordSets = require('../reference/keywordSets');\nconst postcssValueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\nmodule.exports = function findAnimationName(value) {\n\t/** @type {Node[]} */\n\tconst animationNames = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tnodes.length === 1 &&\n\t\tnodes[0] &&\n\t\tkeywordSets.basicKeywords.has(nodes[0].value.toLowerCase())\n\t) {\n\t\treturn [nodes[0]];\n\t}\n\n\tvalueNodes.walk((valueNode) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (valueNode.type !== 'word') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non-standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other animation parts\n\t\tif (keywordSets.animationShorthandKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore numbers with units\n\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\tif (unit || unit === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tanimationNames.push(valueNode);\n\t});\n\n\treturn animationNames;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterSingleLineComment = require('../../utils/isAfterSingleLineComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before rule',\n\trejected: 'Unexpected empty line before rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/rule-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-block'],\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-rule',\n\t\t\t\t\t\t'after-single-line-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block-and-after-rule',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst expectation = /** @type {string} */ (primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment')) {\n\t\t\t\tconst prevNode = ruleNode.prev();\n\n\t\t\t\tif (prevNode && prevNode.type === 'comment') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isNested = ruleNode.parent && ruleNode.parent.type !== 'root';\n\n\t\t\t// Optionally ignore the expectation if inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore if the expectation is for multiple and the rule is single-line\n\t\t\tif (expectation.includes('multi-line') && isSingleLineString(ruleNode.toString())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = expectation.includes('always');\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-rule') && isAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block-and-after-rule') &&\n\t\t\t\t\tisNested &&\n\t\t\t\t\tisAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-single-line-comment') &&\n\t\t\t\t\tisAfterSingleLineComment(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested)\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(ruleNode.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tconst newline = context.newline;\n\n\t\t\t\tif (typeof newline !== 'string') {\n\t\t\t\t\tthrow new Error(`The \"newline\" property must be a string: ${newline}`);\n\t\t\t\t}\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(ruleNode, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(ruleNode, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: ruleNode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {boolean}\n */\nfunction isAfterRule(ruleNode) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(ruleNode);\n\n\treturn prevNode != null && prevNode.type === 'rule';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction isAfterSingleLineComment(node) {\n\tconst prevNode = node.prev();\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tprevNode.type === 'comment' &&\n\t\t!isSharedLineComment(prevNode) &&\n\t\tprevNode.source &&\n\t\tprevNode.source.start &&\n\t\tprevNode.source.end &&\n\t\tprevNode.source.start.line === prevNode.source.end.line\n\t);\n}\n\nmodule.exports = isAfterSingleLineComment;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected vendor-prefix \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\t//return early if property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', unprefixedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure there's a vendor prefix,\n\t\t\t// but this isn't a custom property\n\n\t\t\tif (prop[0] !== '-' || prop[1] === '-') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.property(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = isAutoprefixable.unprefix(decl.prop);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index);\n\t\t\t\t\tconst afterComma = params.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, ' ') + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, '') + afterComma;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (!matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\t\tif (!operator || (operator && !primaryValues.includes(operator))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   checkBeforeOperator: boolean,\n *   fix: ((attributeNode: import('postcss-selector-parser').Attribute) => boolean) | null,\n * }} options\n * @returns {void}\n */\nmodule.exports = function selectorAttributeOperatorSpaceChecker(options) {\n\toptions.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, options.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\tif (!operator) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst attributeNodeString = attributeNode.toString();\n\n\t\t\t\tstyleSearch({ source: attributeNodeString, target: operator }, (match) => {\n\t\t\t\t\tconst index = options.checkBeforeOperator ? match.startIndex : match.endIndex - 1;\n\n\t\t\t\t\tcheckOperator(attributeNodeString, index, rule, attributeNode, operator);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction checkOperator(source, index, node, attributeNode, operator) {\n\t\t\toptions.locationChecker({\n\t\t\t\tsource,\n\t\t\t\tindex,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (options.fix && options.fix(attributeNode)) {\n\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg.replace(\n\t\t\t\t\t\t\toptions.checkBeforeOperator\n\t\t\t\t\t\t\t\t? operator.charAt(0)\n\t\t\t\t\t\t\t\t: operator.charAt(operator.length - 1),\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + index,\n\t\t\t\t\t\tresult: options.result,\n\t\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\"`,\n\trejectedAfter: (operator) => `Unexpected whitespace after \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst checker = whitespaceChecker('space', primary, messages);\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: false,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\t/** @type {{ operatorAfter: string, setOperatorAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { operatorAfter, setOperatorAfter } = (() => {\n\t\t\t\t\t\t\tconst rawOperator = attributeNode.raws.operator;\n\n\t\t\t\t\t\t\tif (rawOperator) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperator.slice(\n\t\t\t\t\t\t\t\t\t\tattributeNode.operator ? attributeNode.operator.length : 0,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tdelete attributeNode.raws.operator;\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces) attributeNode.raws.spaces = {};\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces.operator)\n\t\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rawSpacesOperator =\n\t\t\t\t\t\t\t\tattributeNode.raws.spaces && attributeNode.raws.spaces.operator;\n\t\t\t\t\t\t\tconst rawOperatorAfter = rawSpacesOperator && rawSpacesOperator.after;\n\n\t\t\t\t\t\t\tif (rawOperatorAfter) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawSpacesOperator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperatorAfter:\n\t\t\t\t\t\t\t\t\t(attributeNode.spaces.operator && attributeNode.spaces.operator.after) || '',\n\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.operator) attributeNode.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\tattributeNode.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-brackets-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"[\"',\n\trejectedOpening: 'Unexpected whitespace after \"[\"',\n\texpectedClosing: 'Expected single space before \"]\"',\n\trejectedClosing: 'Unexpected whitespace before \"]\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-brackets-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tlet hasFixed;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeSelectorString = attributeNode.toString();\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: '[' }, (match) => {\n\t\t\t\t\t\tconst nextCharIsSpace = attributeSelectorString[match.startIndex + 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex + 1;\n\n\t\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: ']' }, (match) => {\n\t\t\t\t\t\tconst prevCharIsSpace = attributeSelectorString[match.startIndex - 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex - 1;\n\n\t\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixBefore(attributeNode) {\n\t\tconst spacesAttribute = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\tconst rawAttrBefore = spacesAttribute && spacesAttribute.before;\n\n\t\t/** @type {{ attrBefore: string, setAttrBefore: (fixed: string) => void }} */\n\t\tconst { attrBefore, setAttrBefore } = rawAttrBefore\n\t\t\t? {\n\t\t\t\t\tattrBefore: rawAttrBefore,\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tspacesAttribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tattrBefore:\n\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.before) || '',\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\tattributeNode.spaces.attribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ''));\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixAfter(attributeNode) {\n\t\tconst key = attributeNode.operator\n\t\t\t? attributeNode.insensitive\n\t\t\t\t? 'insensitive'\n\t\t\t\t: 'value'\n\t\t\t: 'attribute';\n\n\t\tconst rawSpaces = attributeNode.raws.spaces && attributeNode.raws.spaces[key];\n\t\tconst rawAfter = rawSpaces && rawSpaces.after;\n\n\t\tconst spaces = attributeNode.spaces[key];\n\n\t\t/** @type {{ after: string, setAfter: (fixed: string) => void }} */\n\t\tconst { after, setAfter } = rawAfter\n\t\t\t? {\n\t\t\t\t\tafter: rawAfter,\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\trawSpaces.after = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tafter: (spaces && spaces.after) || '',\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces[key]) attributeNode.spaces[key] = {};\n\n\t\t\t\t\t\t// @ts-expect-error -- TS2532: Object is possibly 'undefined'.\n\t\t\t\t\t\tattributeNode.spaces[key].after = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ''));\n\t\t}\n\t}\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\t\tif (!operator || (operator && primaryValues.includes(operator))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a string is a keyframe selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\tif (keywordSets.keyframeSelectorKeywords.has(selector)) {\n\t\treturn true;\n\t}\n\n\t// Percentages\n\tif (/^(?:\\d+|\\d*\\.\\d+)%$/.test(selector)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolveNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-class-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selectorValue, pattern) =>\n\t\t`Expected class selector \".${selectorValue}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-class-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isRegExp, isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tresolveNestedSelectors: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {boolean} */\n\t\tconst shouldResolveNestedSelectors =\n\t\t\tsecondaryOptions && secondaryOptions.resolveNestedSelectors;\n\t\t/** @type {RegExp} */\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only bother resolving selectors that have an interpolating &\n\t\t\tif (shouldResolveNestedSelectors && hasInterpolatingAmpersand(selector)) {\n\t\t\t\tfor (const nestedSelector of resolveNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(nestedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(nestedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparseSelector(selector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} fullSelector\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(fullSelector, ruleNode) {\n\t\t\tfullSelector.walkClasses((classNode) => {\n\t\t\t\tconst value = classNode.value;\n\t\t\t\tconst sourceIndex = classNode.sourceIndex;\n\n\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * An \"interpolating ampersand\" means an \"&\" used to interpolate\n * within another simple selector, rather than an \"&\" that\n * stands on its own as a simple selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nfunction hasInterpolatingAmpersand(selector) {\n\tfor (const [i, char] of Array.from(selector).entries()) {\n\t\tif (char !== '&') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst prevChar = selector.charAt(i - 1);\n\n\t\tif (prevChar && !isCombinator(prevChar)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst nextChar = selector.charAt(i + 1);\n\n\t\tif (nextChar && !isCombinator(nextChar)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} x\n * @returns {boolean}\n */\nfunction isCombinator(x) {\n\treturn /[\\s+>~]/.test(x);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\"`,\n\trejectedBefore: (operator) => `Unexpected whitespace before \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: true,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\tconst rawAttr = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\t\t\t\t\tconst rawAttrAfter = rawAttr && rawAttr.after;\n\n\t\t\t\t\t\t/** @type {{ attrAfter: string, setAttrAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { attrAfter, setAttrAfter } = rawAttrAfter\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tattrAfter: rawAttrAfter,\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawAttr.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\tattrAfter:\n\t\t\t\t\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.after) || '',\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.spaces.attribute.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  };\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\nmodule.exports = function (node) {\n\t// if it's not a combinator, then it's not a standard combinator\n\tif (node.type !== 'combinator') {\n\t\treturn false;\n\t}\n\n\t// Ignore reference combinators like `/deep/`\n\tif (node.value.startsWith('/') || node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\t// ignore the combinators that are the first or last node in their container\n\tif (node.parent !== undefined && node.parent !== null) {\n\t\tconst parent = node.parent;\n\n\t\tif (node === parent.first) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node === parent.last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\n\n/**\n * @typedef {(args: { source: string, index: number, errTarget: string, err: (message: string) => void }) => void} LocationChecker\n *\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: LocationChecker,\n *   locationType: 'before' | 'after',\n *   checkedRuleName: string,\n *   fix: ((combinator: import('postcss-selector-parser').Combinator) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorCombinatorSpaceChecker(opts) {\n\tlet hasFixed;\n\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\thasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, opts.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkCombinators((node) => {\n\t\t\t\t// Ignore non-standard combinators\n\t\t\t\tif (!isStandardSyntaxCombinator(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore spaced descendant combinator\n\t\t\t\tif (/\\s/.test(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check the exist of node in prev of the combinator.\n\t\t\t\t// in case some that aren't the first begin with combinators (nesting syntax)\n\t\t\t\tif (opts.locationType === 'before' && !node.prev()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parentParentNode = node.parent && node.parent.parent;\n\n\t\t\t\t// Ignore pseudo-classes selector like `.foo:nth-child(2n + 1) {}`\n\t\t\t\tif (parentParentNode && parentParentNode.type === 'pseudo') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\t\t\t\tconst index =\n\t\t\t\t\tnode.value.length > 1 && opts.locationType === 'before'\n\t\t\t\t\t\t? sourceIndex\n\t\t\t\t\t\t: sourceIndex + node.value.length - 1;\n\n\t\t\t\tcheck(selector, node, index, rule, sourceIndex);\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {import('postcss-selector-parser').Combinator} combinator\n\t * @param {number} index\n\t * @param {import('postcss').Node} node\n\t * @param {number} sourceIndex\n\t */\n\tfunction check(source, combinator, index, node, sourceIndex) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terrTarget: combinator.value,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(combinator)) {\n\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (combinator) => `Expected single space after \"${combinator}\"`,\n\trejectedAfter: (combinator) => `Unexpected whitespace after \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tlocationType: 'after',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.after = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.after = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getRuleSelector = require('../../utils/getRuleSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (value) => `Expected quotes around \"${value}\"`,\n\trejected: (value) => `Unexpected quotes around \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-quotes',\n};\n\nconst acceptedQuoteMark = '\"';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(getRuleSelector(ruleNode), result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.operator) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!attributeNode.quoted && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = acceptedQuoteMark;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expected(attributeNode.value),\n\t\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoted && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.rejected(attributeNode.value),\n\t\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {string}\n */\nmodule.exports = function getRuleSelector(ruleNode) {\n\tconst raws = ruleNode.raws;\n\n\treturn (raws.selector && raws.selector.raw) || ruleNode.selector;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = normalizeCombinator(combinatorNode.value);\n\n\t\t\t\t\tif (primary.includes(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = normalizeCombinator(combinatorNode.value);\n\n\t\t\t\t\tif (!primary.includes(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (nonSpaceCharacter) => `Unexpected \"${nonSpaceCharacter}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-descendant-combinator-no-non-space',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t// Return early for selectors containing comments\n\t\t\t// TODO: renable when parser and stylelint are compatible\n\t\t\tif (selector.includes('/*')) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (combinatorNode.value !== ' ') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = combinatorNode.toString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue.includes('  ') ||\n\t\t\t\t\t\tvalue.includes('\\t') ||\n\t\t\t\t\t\tvalue.includes('\\n') ||\n\t\t\t\t\t\tvalue.includes('\\r')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (context.fix && /^\\s+$/.test(value)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\tif (!combinatorNode.raws) combinatorNode.raws = {};\n\n\t\t\t\t\t\t\tcombinatorNode.raws.value = ' ';\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (combinator) => `Expected single space before \"${combinator}\"`,\n\trejectedBefore: (combinator) => `Unexpected whitespace before \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tlocationType: 'before',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.before = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.before = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeName = attributeNode.qualifiedAttribute;\n\n\t\t\t\t\tif (!matchesStringOrRegExp(attributeName, primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(attributeName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('attribute'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix: ((rule: import('postcss').Rule, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorListCommaWhitespaceChecker(opts) {\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: selector,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckDelimiter(selector, match.startIndex, rule);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Rule} node\n\t */\n\tfunction checkDelimiter(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = selector.slice(0, index + 1);\n\t\t\t\t\tlet afterSelector = selector.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-id-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selectorValue, pattern) =>\n\t\t`Expected ID selector \"#${selectorValue}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-id-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {RegExp} */\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walk((selectorNode) => {\n\t\t\t\t\tif (selectorNode.type !== 'id') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = selectorNode.value;\n\t\t\t\t\tconst sourceIndex = selectorNode.sourceIndex;\n\n\t\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!matchesStringOrRegExp(selector, primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\tnode: ruleNode,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst spaceIndex = beforeSelector.search(/\\s+$/);\n\n\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\tbeforeSelector =\n\t\t\t\t\t\t\t\tbeforeSelector.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\tbeforeSelector.slice(spaceIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbeforeSelector += context.newline;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'never-multi-line') {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.includes('always')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.includes('never')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {unknown} value\n */\nmodule.exports = function isNonNegativeInteger(value) {\n\treturn Number.isInteger(value) && typeof value === 'number' && value >= 0;\n};\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-combinators';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${\n\t\t\tmax === 1 ? 'combinator' : 'combinators'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-combinators',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'combinator') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Node} node - postcss-selector-parser node (of type pseudo)\n * @return {node is import('postcss-selector-parser').Pseudo} If `true`, the node is a context-functional pseudo-class\n */\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n\tif (node.type === 'pseudo') {\n\t\tconst normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n\n\t\treturn (\n\t\t\tkeywordSets.logicalCombinationsPseudoClasses.has(normalisedParentName) ||\n\t\t\tkeywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName)\n\t\t);\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-attribute';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} attribute ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-attribute',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAttributes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type !== 'attribute') {\n\t\t\t\t\t// Not an attribute node -> ignore\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAttributes', childNode.attribute)) {\n\t\t\t\t\t// it's an attribute that is supposed to be ignored\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\ttotal += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-missing-end-of-source-newline';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing end-of-source newline',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-missing-end-of-source-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source property');\n\t\t}\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\tif (root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\n\t\tif (!rootString.trim() || rootString.endsWith('\\n')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fix\n\t\tif (context.fix) {\n\t\t\troot.raws.after = context.newline;\n\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tindex: rootString.length - 1,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *  @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t *  @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'class') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-id';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-id',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreContextFunctionalPseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'selector' ||\n\t\t\t\t\t(isContextFunctionalPseudoClass(childNode) &&\n\t\t\t\t\t\t!isIgnoredContextFunctionalPseudoClass(childNode))\n\t\t\t\t) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'id') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredContextFunctionalPseudoClass(node) {\n\t\t\treturn (\n\t\t\t\tnode.type === 'pseudo' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreContextFunctionalPseudoClasses', node.value)\n\t\t\t);\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a type selector is standard\n *\n * @param {import('postcss-selector-parser').Tag} node postcss-selector-parser node (of type tag)\n * @return {boolean} If `true`, the type selector is standard\n */\nmodule.exports = function (node) {\n\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t// as \"tags\", so we need to ignore them ourselves.\n\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t// should be the :nth-child pseudo node.\n\tif (!node.parent || !node.parent.parent) {\n\t\treturn false;\n\t}\n\n\tconst _node$parent$parent = node.parent.parent;\n\tconst parentType = _node$parent$parent.type;\n\tconst parentValue = _node$parent$parent.value;\n\n\tif (parentValue) {\n\t\tconst normalisedParentName = parentValue.toLowerCase().replace(/:+/, '');\n\n\t\tif (\n\t\t\tparentType === 'pseudo' &&\n\t\t\t(keywordSets.aNPlusBNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.linguisticPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.shadowTreePseudoElements.has(normalisedParentName))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// &-bar is a nesting selector combined with a suffix\n\tif (node.prev() && node.prev().type === 'nesting') {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// Reference combinators like `/deep/`\n\tif (node.value.startsWith('/') && node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-type';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} type ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-type',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDescendant = optionsMatches(secondaryOptions, 'ignore', 'descendant');\n\t\tconst ignoreChild = optionsMatches(secondaryOptions, 'ignore', 'child');\n\t\tconst ignoreCompounded = optionsMatches(secondaryOptions, 'ignore', 'compounded');\n\t\tconst ignoreNextSibling = optionsMatches(secondaryOptions, 'ignore', 'next-sibling');\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', childNode.value)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreChild && hasChildCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreCompounded && hasCompoundSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\treturn childNode.type === 'tag' ? total + 1 : total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-selector-parser').Node} SelectorNode */\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasDescendantCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isDescendantCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasChildCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isChildCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasCompoundSelector(node) {\n\tif (node.prev() && !isCombinator(node.prev())) {\n\t\treturn true;\n\t}\n\n\treturn node.next() && !isCombinator(node.next());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasNextSiblingCombinator(node) {\n\treturn node.prev() && isNextSiblingCombinator(node.prev());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isCombinator(node) {\n\tif (!node) return false;\n\n\treturn node.type === 'combinator';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isDescendantCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && isString(node.value) && isOnlyWhitespace(node.value);\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isChildCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && node.value === '>';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isNextSiblingCombinator(node) {\n\treturn isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity, compare } = require('@csstools/selector-specificity');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assertNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) => `Expected \"${selector}\" to have a specificity no more than \"${max}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-specificity',\n};\n\n/** @typedef {import('@csstools/selector-specificity').Specificity} Specificity */\n\n/**\n * Return a zero specificity. We need a new instance each time so that it can mutated.\n *\n * @returns {Specificity}\n */\nconst zeroSpecificity = () => ({ a: 0, b: 0, c: 0 });\n\n/**\n * Calculate the sum of given specificiies.\n *\n * @param {Specificity[]} specificities\n * @returns {Specificity}\n */\nconst specificitySum = (specificities) => {\n\tconst sum = zeroSpecificity();\n\n\tfor (const { a, b, c } of specificities) {\n\t\tsum.a += a;\n\t\tsum.b += b;\n\t\tsum.c += c;\n\t}\n\n\treturn sum;\n};\n\n/** @type {import('stylelint').Rule<string>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t// Check that the max specificity is in the form \"a,b,c\"\n\t\t\t\t\t(spec) => isString(spec) && /^\\d+,\\d+,\\d+$/.test(spec),\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Calculate the specificity of a simple selector (type, attribute, class, ID, or pseudos's own value).\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst simpleSpecificity = (node) => {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', node.toString())) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\treturn selectorSpecificity(node);\n\t\t};\n\n\t\t/**\n\t\t * Calculate the the specificity of the most specific direct child.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst maxChildSpecificity = (node) =>\n\t\t\tnode.reduce((maxSpec, child) => {\n\t\t\t\tconst childSpecificity = nodeSpecificity(child); // eslint-disable-line no-use-before-define\n\n\t\t\t\treturn compare(childSpecificity, maxSpec) > 0 ? childSpecificity : maxSpec;\n\t\t\t}, zeroSpecificity());\n\n\t\t/**\n\t\t * Calculate the specificity of a pseudo selector including own value and children.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Pseudo} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst pseudoSpecificity = (node) => {\n\t\t\t// `node.toString()` includes children which should be processed separately,\n\t\t\t// so use `node.value` instead\n\t\t\tconst ownValue = node.value.toLowerCase();\n\n\t\t\tif (ownValue === ':where') {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tlet ownSpecificity;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', ownValue)) {\n\t\t\t\townSpecificity = zeroSpecificity();\n\t\t\t} else if (keywordSets.aNPlusBOfSNotationPseudoClasses.has(ownValue.replace(/^:/, ''))) {\n\t\t\t\t// TODO: We need to support `<complex-selector-list>` in `ignoreSelectors`. E.g. `:nth-child(even of .foo)`.\n\t\t\t\treturn selectorSpecificity(node);\n\t\t\t} else {\n\t\t\t\townSpecificity = selectorSpecificity(node.clone({ nodes: [] }));\n\t\t\t}\n\n\t\t\treturn specificitySum([ownSpecificity, maxChildSpecificity(node)]);\n\t\t};\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tconst shouldSkipPseudoClassArgument = (node) => {\n\t\t\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t\t\t// as \"tags\", so we need to ignore them ourselves.\n\t\t\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t\t\t// should be the :nth-child pseudo node.\n\t\t\tconst parentNode = node.parent && node.parent.parent;\n\n\t\t\tif (parentNode && parentNode.type === 'pseudo' && parentNode.value) {\n\t\t\t\tconst pseudoClass = parentNode.value.toLowerCase().replace(/^:/, '');\n\n\t\t\t\treturn (\n\t\t\t\t\tkeywordSets.aNPlusBNotationPseudoClasses.has(pseudoClass) ||\n\t\t\t\t\tkeywordSets.linguisticPseudoClasses.has(pseudoClass)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of a node parsed by `postcss-selector-parser`.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst nodeSpecificity = (node) => {\n\t\t\tif (shouldSkipPseudoClassArgument(node)) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'attribute':\n\t\t\t\tcase 'class':\n\t\t\t\tcase 'id':\n\t\t\t\tcase 'tag':\n\t\t\t\t\treturn simpleSpecificity(node);\n\t\t\t\tcase 'pseudo':\n\t\t\t\t\treturn pseudoSpecificity(node);\n\t\t\t\tcase 'selector':\n\t\t\t\t\t// Calculate the sum of all the direct children\n\t\t\t\t\treturn specificitySum(node.map((n) => nodeSpecificity(n)));\n\t\t\t\tdefault:\n\t\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\t\t};\n\n\t\tconst [a, b, c] = primary.split(',').map((s) => Number.parseFloat(s));\n\n\t\tassertNumber(a);\n\t\tassertNumber(b);\n\t\tassertNumber(c);\n\n\t\tconst maxSpecificity = { a, b, c };\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector in the eventuality we have a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Skip non-standard syntax selectors\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\t// Check if the selector specificity exceeds the allowed maximum\n\t\t\t\t\t\tif (compare(maxChildSpecificity(selectorTree), maxSpecificity) > 0) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tmessage: messages.expected(resolvedSelector, primary),\n\t\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-pseudo-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} pseudo-${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-pseudo-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Exclude pseudo elements from the count\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'pseudo' &&\n\t\t\t\t\t(childNode.value.includes('::') ||\n\t\t\t\t\t\tkeywordSets.levelOneAndTwoPseudoElements.has(childNode.value.toLowerCase().slice(1)))\n\t\t\t\t) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'pseudo') {\n\t\t\t\t\ttotal += 1;\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\tcheckSelector(selectorTree, ruleNode);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-nested-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) =>\n\t\t`Expected nested selector \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-nested-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (ruleNode.parent && ruleNode.parent.type !== 'rule') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (normalizedPattern.test(selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected qualifying type selector',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-no-qualifying-type',\n};\n\nconst selectorCharacters = ['#', '.', '['];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isSelectorCharacters(value) {\n\treturn selectorCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {import('postcss-selector-parser').Tag} node\n * @returns {Array<import('postcss-selector-parser').Node>}\n */\nfunction getRightNodes(node) {\n\tconst result = [];\n\n\t/** @type {import('postcss-selector-parser').Node} */\n\tlet rightNode = node;\n\n\twhile ((rightNode = rightNode.next())) {\n\t\tif (rightNode.type === 'combinator') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(rightNode);\n\t}\n\n\treturn result;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [true, false],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['attribute', 'class', 'id'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isSelectorCharacters(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-selector-parser').Root} selectorAST\n\t\t\t */\n\t\t\tfunction checkSelector(selectorAST) {\n\t\t\t\tselectorAST.walkTags((selector) => {\n\t\t\t\t\tconst selectorParent = selector.parent;\n\n\t\t\t\t\tif (selectorParent && selectorParent.nodes.length === 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectorNodes = getRightNodes(selector);\n\t\t\t\t\tconst index = selector.sourceIndex;\n\n\t\t\t\t\tfor (const selectorNode of selectorNodes) {\n\t\t\t\t\t\tif (selectorNode.type === 'id' && !optionsMatches(secondaryOptions, 'ignore', 'id')) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselectorNode.type === 'class' &&\n\t\t\t\t\t\t\t!optionsMatches(secondaryOptions, 'ignore', 'class')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselectorNode.type === 'attribute' &&\n\t\t\t\t\t\t\t!optionsMatches(secondaryOptions, 'ignore', 'attribute')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const resolvedSelector of resolvedNestedSelector(ruleNode.selector, ruleNode)) {\n\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, checkSelector);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(index) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst {\n\tisPseudoClass,\n\tisAttribute,\n\tisClassName,\n\tisUniversal,\n\tisIdentifier,\n\tisTag,\n} = require('postcss-selector-parser');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-not-notation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} :not() pseudo-class notation`,\n});\nconst meta = { url: 'https://stylelint.io/user-guide/rules/list/selector-not-notation' };\n\n/** @typedef {import('postcss-selector-parser').Node} Node */\n/** @typedef {import('postcss-selector-parser').Selector} Selector */\n/** @typedef {import('postcss-selector-parser').Pseudo} Pseudo */\n\n/**\n * @param {Node} node\n * @returns {boolean}\n */\nconst isSimpleSelector = (node) =>\n\tisPseudoClass(node) ||\n\tisAttribute(node) ||\n\tisClassName(node) ||\n\tisUniversal(node) ||\n\tisIdentifier(node) ||\n\tisTag(node);\n\n/**\n * @param {Node} node\n * @returns {node is Pseudo}\n */\nconst isNot = (node) =>\n\tisPseudoClass(node) && node.value !== undefined && node.value.toLowerCase() === ':not';\n\n/**\n * @param {Selector[]} list\n * @returns {boolean}\n */\nconst isSimple = (list) => {\n\tif (list.length > 1) return false;\n\n\tassert(list[0], 'list is never empty');\n\tconst [first, second] = list[0].nodes;\n\n\tif (!first) return true;\n\n\tif (second) return false;\n\n\treturn isSimpleSelector(first) && !isNot(first);\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['simple', 'complex'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) return;\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':not(')) return;\n\n\t\t\tif (!isStandardSyntaxSelector(selector)) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (container) => {\n\t\t\t\tcontainer.walkPseudos((pseudo) => {\n\t\t\t\t\tif (!isNot(pseudo)) return;\n\n\t\t\t\t\tif (primary === 'complex') {\n\t\t\t\t\t\tconst prev = pseudo.prev();\n\t\t\t\t\t\tconst hasConsecutiveNot = prev && isNot(prev);\n\n\t\t\t\t\t\tif (!hasConsecutiveNot) return;\n\n\t\t\t\t\t\tif (context.fix) return fixComplex(prev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst selectors = pseudo.nodes;\n\n\t\t\t\t\t\tif (isSimple(selectors)) return;\n\n\t\t\t\t\t\tconst mustFix =\n\t\t\t\t\t\t\tcontext.fix &&\n\t\t\t\t\t\t\tselectors.length > 1 &&\n\t\t\t\t\t\t\tselectors[1] &&\n\t\t\t\t\t\t\t(selectors[1].nodes.length === 0 ||\n\t\t\t\t\t\t\t\tselectors.every(({ nodes }) => nodes.length === 1));\n\n\t\t\t\t\t\tif (mustFix) return fixSimple(pseudo);\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {Pseudo} not\n */\nfunction fixSimple(not) {\n\tconst simpleSelectors = not.nodes\n\t\t.filter(({ nodes }) => nodes[0] && isSimpleSelector(nodes[0]))\n\t\t.map((s) => {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = '';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\n\t\t\treturn s;\n\t\t});\n\tconst firstSelector = simpleSelectors.shift();\n\n\tassert(firstSelector);\n\tassert(not.parent);\n\n\tnot.empty();\n\tnot.nodes.push(firstSelector);\n\n\tfor (const s of simpleSelectors) {\n\t\tconst last = not.parent.last;\n\n\t\tnot.parent.insertAfter(last, last.clone({ nodes: [s] }));\n\t}\n}\n\n/**\n * @param {Pseudo} previousNot\n */\nfunction fixComplex(previousNot) {\n\tconst indentAndTrimRight = (/** @type {Selector[]} */ selectors) => {\n\t\tfor (const s of selectors) {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = ' ';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\t\t}\n\t};\n\tconst [head, ...tail] = previousNot.nodes;\n\tlet node = previousNot.next();\n\n\tif (head == null || head.nodes.length === 0) return;\n\n\tassert(head.nodes[0]);\n\thead.nodes[0].rawSpaceBefore = '';\n\thead.nodes[0].rawSpaceAfter = '';\n\tindentAndTrimRight(tail);\n\n\twhile (isNot(node)) {\n\t\tconst selectors = node.nodes;\n\t\tconst prev = node;\n\n\t\tindentAndTrimRight(selectors);\n\t\tpreviousNot.nodes = previousNot.nodes.concat(selectors);\n\t\tnode = node.next();\n\t\tprev.remove();\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorParser = require('postcss-selector-parser');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-universal';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} universal ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-universal',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\t// All logical combinations will be resolved as nested selector in `postcss-resolve-nested-selector`\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'universal') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectors = [];\n\n\t\t\tselectorParser()\n\t\t\t\t.astSync(ruleNode.selector)\n\t\t\t\t.walk((node) => {\n\t\t\t\t\tif (node.type === 'selector') {\n\t\t\t\t\t\tselectors.push(String(node).trim());\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tfor (const selector of selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected vendor-prefix \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (isAutoprefixable.selector(pseudoNode.value)) {\n\t\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', pseudoNode.value)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\truleNode.selector = isAutoprefixable.unprefix(ruleNode.selector);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(pseudoNode.value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: (ruleNode.raws.before || '').length + pseudoNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(\n\t\t\t\truleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector,\n\t\t\t\tresult,\n\t\t\t\truleNode,\n\t\t\t\t(selectorTree) => {\n\t\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\t\tconst pseudo = pseudoNode.value;\n\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(pseudo)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpseudo.includes('::') ||\n\t\t\t\t\t\t\tkeywordSets.levelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expectedPseudo =\n\t\t\t\t\t\t\tprimary === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n\t\t\t\t\t\tif (pseudo === expectedPseudo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tpseudoNode.value = expectedPseudo;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(pseudo, expectedPseudo),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value[1] !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (!pseudoNode.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paramString = pseudoNode.map((node) => String(node)).join(',');\n\t\t\t\t\tconst nextCharIsSpace = paramString.startsWith(' ');\n\t\t\t\t\tconst openIndex = pseudoNode.sourceIndex + pseudoNode.value.length + 1;\n\n\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst prevCharIsSpace = paramString.endsWith(' ');\n\t\t\t\t\tconst closeIndex = openIndex + paramString.length - 1;\n\n\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setFirstNodeSpaceBefore(node, value) {\n\tconst target = node.first;\n\n\tif (target.type === 'selector') {\n\t\tsetFirstNodeSpaceBefore(target, value);\n\t} else {\n\t\ttarget.spaces.before = value;\n\t}\n}\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setLastNodeSpaceAfter(node, value) {\n\tconst target = node.last;\n\n\tif (target.type === 'selector') {\n\t\tsetLastNodeSpaceAfter(target, value);\n\t} else {\n\t\ttarget.spaces.after = value;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value[1] !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-colon-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} colon pseudo-element notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-colon-notation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['single', 'double'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixedColon = '';\n\n\t\tif (primary === 'single') {\n\t\t\tfixedColon = ':';\n\t\t} else if (primary === 'double') {\n\t\t\tfixedColon = '::';\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// get out early if no pseudo elements or classes\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectors) => {\n\t\t\t\tselectors.walkPseudos((pseudo) => {\n\t\t\t\t\tconst pseudoElement = pseudo.value.replace(/:/g, '');\n\n\t\t\t\t\tif (!keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isDouble = pseudo.value.startsWith('::');\n\n\t\t\t\t\tif (primary === 'single' && !isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'double' && isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudo.replaceWith(pseudo.clone({ value: fixedColon + pseudoElement }));\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomSelector = require('../../utils/isCustomSelector');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-class selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoClasses: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t * @param {import('postcss').ChildNode} node\n\t\t */\n\t\tfunction check(selector, node) {\n\t\t\tparseSelector(selector, result, node, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isCustomSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet index = null;\n\t\t\t\t\tconst name = value.slice(1).toLowerCase();\n\n\t\t\t\t\tif (node.type === 'atrule' && node.name === 'page') {\n\t\t\t\t\t\tif (keywordSets.atRulePagePseudoClasses.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvendor.prefix(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoClasses.has(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoElements.has(name)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {import('postcss-selector-parser').Base} */\n\t\t\t\t\t\tlet prevPseudoElement = pseudoNode;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevPseudoElement = /** @type {import('postcss-selector-parser').Base} */ (\n\t\t\t\t\t\t\t\tprevPseudoElement.prev()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (prevPseudoElement);\n\n\t\t\t\t\t\tif (prevPseudoElement) {\n\t\t\t\t\t\t\tconst prevPseudoElementValue = prevPseudoElement.value.toLowerCase().slice(2);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tkeywordSets.webkitScrollbarPseudoElements.has(prevPseudoElementValue) &&\n\t\t\t\t\t\t\t\tkeywordSets.webkitScrollbarPseudoClasses.has(name)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = pseudoNode.sourceIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tlet selector = null;\n\n\t\t\tif (node.type === 'rule') {\n\t\t\t\tif (!isStandardSyntaxRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.selector;\n\t\t\t} else if (node.type === 'atrule' && node.name === 'page' && node.params) {\n\t\t\t\tif (!isStandardSyntaxAtRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.params;\n\t\t\t}\n\n\t\t\t// Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\t\t\tif (!selector) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(selector, node);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a selector is a custom one\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\treturn selector.startsWith(':--');\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} compound ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-compound-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Finds actual selectors in selectorNode object and checks them.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tlet compoundCount = 1;\n\n\t\t\tselectorNode.each((childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Compound selectors are separated by combinators, so increase count when meeting one\n\t\t\t\tif (childNode.type === 'combinator') {\n\t\t\t\t\tcompoundCount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tselectorNode.type !== 'root' &&\n\t\t\t\tselectorNode.type !== 'pseudo' &&\n\t\t\t\tcompoundCount > primary\n\t\t\t) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector if there is a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Process each resolved selector with `checkSelector` via postcss-selector-parser\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst keywordSets = require('../../reference/keywordSets');\n\nconst ruleName = 'selector-type-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-type-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreTypes: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tlet hasComments = ruleNode.raws.selector && ruleNode.raws.selector.raw;\n\t\t\tconst selector = hasComments ? hasComments : ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorAST) => {\n\t\t\t\tselectorAST.walkTags((tag) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tag)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keywordSets.validMixedCaseSvgElements.has(tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sourceIndex = tag.sourceIndex;\n\t\t\t\t\tconst value = tag.value;\n\n\t\t\t\t\tconst expectedValue = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\t\tif (value === expectedValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\thasComments.slice(sourceIndex + value.length);\n\n\t\t\t\t\t\t\tif (ruleNode.raws.selector == null) {\n\t\t\t\t\t\t\t\tthrow new Error('The `raw` property must be present');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\truleNode.raws.selector.raw = hasComments;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\truleNode.selector =\n\t\t\t\t\t\t\t\truleNode.selector.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\truleNode.selector.slice(sourceIndex + value.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(value, expectedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-element selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoElements: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.slice(0, 2) !== '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (vendor.prefix(name) || keywordSets.pseudoElements.has(name.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unknown unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t// and within functions listed in the `ignoreFunctions` option\n\t\t\t\tif (\n\t\t\t\t\tvalueNode.type === 'function' &&\n\t\t\t\t\t(valueNode.value.toLowerCase() === 'url' ||\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueNode.value))\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (keywordSets.units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (unit.toLowerCase() === 'x') {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.type === 'atrule' &&\n\t\t\t\t\t\tnode.name === 'media' &&\n\t\t\t\t\t\tnode.params.toLowerCase().includes('resolution')\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet ignoreUnit = false;\n\n\t\t\t\t\t\tmediaParser(node.params).walk((mediaNode, _i, mediaNodes) => {\n\t\t\t\t\t\t\tconst lastMediaNode = mediaNodes[mediaNodes.length - 1];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmediaNode.value.toLowerCase().includes('resolution') &&\n\t\t\t\t\t\t\t\tlastMediaNode &&\n\t\t\t\t\t\t\t\tlastMediaNode.sourceIndex === valueNode.sourceIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tignoreUnit = true;\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (ignoreUnit) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\t\tif (node.prop.toLowerCase() === 'image-resolution') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n\t\t\t\t\t\t\tconst imageSet = parsedValue.nodes.find(\n\t\t\t\t\t\t\t\t(n) => vendor.unprefixed(n.value) === 'image-set',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tassert(imageSet);\n\t\t\t\t\t\t\tassert('nodes' in imageSet);\n\t\t\t\t\t\t\tconst imageSetLastNode = imageSet.nodes[imageSet.nodes.length - 1];\n\n\t\t\t\t\t\t\tassert(imageSetLastNode);\n\t\t\t\t\t\t\tconst imageSetValueLastIndex = imageSetLastNode.sourceIndex;\n\n\t\t\t\t\t\t\tif (imageSetValueLastIndex >= valueNode.sourceIndex) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(decl, decl.value, declarationValueIndex);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /\\r?\\n/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected newline in string',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/string-no-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxSelector(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst match = reNewLine.exec(attributeNode.value || '');\n\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = [\n\t\t\t\t\t\t// length of our attribute\n\t\t\t\t\t\tattributeNode.attribute,\n\t\t\t\t\t\t// length of our operator , ie '='\n\t\t\t\t\t\tattributeNode.operator || '',\n\t\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\t\tmatch.input.slice(0, match.index),\n\t\t\t\t\t].reduce(\n\t\t\t\t\t\t(index, str) => index + str.length,\n\t\t\t\t\t\t// index of the start of our attribute node in our source\n\t\t\t\t\t\t// plus 1 for the opening quotation mark\n\t\t\t\t\t\tattributeNode.sourceIndex + 1,\n\t\t\t\t\t);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: openIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = reNewLine.exec(valueNode.value);\n\n\t\t\t\tif (!match) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst openIndex = [\n\t\t\t\t\t// length of the quote\n\t\t\t\t\tvalueNode.quote,\n\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\tmatch.input.slice(0, match.index),\n\t\t\t\t].reduce((index, str) => index + str.length, valueNode.sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomElement = require('../../utils/isCustomElement');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst mathMLTags = require('mathml-tag-names');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst svgTags = require('svg-tags');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-type-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-type-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-elements', 'default-namespace'],\n\t\t\t\t\tignoreNamespaces: [isString, isRegExp],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'custom-elements') &&\n\t\t\t\t\t\tisCustomElement(tagNode.value)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'default-namespace') &&\n\t\t\t\t\t\t!(typeof tagNode.namespace === 'string')\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreNamespaces', tagNode.namespace)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tagNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tagName = tagNode.value;\n\t\t\t\t\tconst tagNameLowerCase = tagName.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tkeywordSets.standardHtmlTags.has(tagNameLowerCase) ||\n\t\t\t\t\t\t// SVG tags are case-sensitive\n\t\t\t\t\t\tsvgTags.includes(tagName) ||\n\t\t\t\t\t\tkeywordSets.nonStandardHtmlTags.has(tagNameLowerCase) ||\n\t\t\t\t\t\tmathMLTags.includes(tagNameLowerCase)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(tagName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: tagNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: tagName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\nconst mathMLTags = require('mathml-tag-names');\nconst svgTags = require('svg-tags');\n\n/**\n * Check whether a type selector is a custom element\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\tif (!/^[a-z]/.test(selector)) {\n\t\treturn false;\n\t}\n\n\tif (!selector.includes('-')) {\n\t\treturn false;\n\t}\n\n\tconst selectorLowerCase = selector.toLowerCase();\n\n\tif (selectorLowerCase !== selector) {\n\t\treturn false;\n\t}\n\n\tif (svgTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.standardHtmlTags.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.nonStandardHtmlTags.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (mathMLTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'time-min-milliseconds';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (time) => `Expected a minimum of ${time} milliseconds`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/time-min-milliseconds',\n};\n\nconst DELAY_PROPERTIES = new Set(['animation-delay', 'transition-delay']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['delay'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst minimum = /** @type {number} */ (primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst propertyName = vendor.unprefixed(decl.prop.toLowerCase());\n\n\t\t\tif (\n\t\t\t\tkeywordSets.longhandTimeProperties.has(propertyName) &&\n\t\t\t\t!isIgnoredProperty(propertyName) &&\n\t\t\t\t!isAcceptableTime(decl.value)\n\t\t\t) {\n\t\t\t\tcomplain(decl);\n\t\t\t}\n\n\t\t\tif (keywordSets.shorthandTimeProperties.has(propertyName)) {\n\t\t\t\tconst valueListList = postcss.list.comma(decl.value);\n\n\t\t\t\tfor (const valueListString of valueListList) {\n\t\t\t\t\tconst valueList = postcss.list.space(valueListString);\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'delay')) {\n\t\t\t\t\t\t// Check only duration time values\n\t\t\t\t\t\tconst duration = getDuration(valueList);\n\n\t\t\t\t\t\tif (duration && !isAcceptableTime(duration)) {\n\t\t\t\t\t\t\tcomplain(decl, decl.value.indexOf(duration));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Check all time values\n\t\t\t\t\t\tfor (const value of valueList) {\n\t\t\t\t\t\t\tif (!isAcceptableTime(value)) {\n\t\t\t\t\t\t\t\tcomplain(decl, decl.value.indexOf(value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Get the duration within an `animation` or `transition` shorthand property value.\n\t\t *\n\t\t * @param {string[]} valueList\n\t\t * @returns {string | undefined}\n\t\t */\n\t\tfunction getDuration(valueList) {\n\t\t\tfor (const value of valueList) {\n\t\t\t\tconst parsedTime = valueParser.unit(value);\n\n\t\t\t\tif (!parsedTime) continue;\n\n\t\t\t\t// The first numeric value in an animation shorthand is the duration.\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} propertyName\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredProperty(propertyName) {\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'delay') &&\n\t\t\t\tDELAY_PROPERTIES.has(propertyName)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} time\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isAcceptableTime(time) {\n\t\t\tconst parsedTime = valueParser.unit(time);\n\n\t\t\tif (!parsedTime) return true;\n\n\t\t\tconst numTime = Number(parsedTime.number);\n\n\t\t\tif (numTime <= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst unit = parsedTime.unit.toLowerCase();\n\n\t\t\tif (unit === 'ms' && numTime < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (unit === 's' && numTime * 1000 < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} [offset]\n\t\t * @returns {void}\n\t\t */\n\t\tfunction complain(decl, offset = 0) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(minimum),\n\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\tnode: decl,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unexpected, expected) =>\n\t\t`Unexpected longhand value '${unexpected}' instead of '${expected}'`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/shorthand-property-no-redundant-values',\n};\n\nconst propertiesWithShorthandNotation = new Set([\n\t'margin',\n\t'padding',\n\t'border-color',\n\t'border-radius',\n\t'border-style',\n\t'border-width',\n\t'grid-gap',\n]);\n\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction hasIgnoredCharacters(value) {\n\treturn ignoredCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {string} property\n * @returns {boolean}\n */\nfunction isShorthandProperty(property) {\n\treturn propertiesWithShorthandNotation.has(property);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {string[]}\n */\nfunction canCondense(top, right, bottom, left) {\n\tconst lowerTop = top.toLowerCase();\n\tconst lowerRight = right.toLowerCase();\n\tconst lowerBottom = bottom && bottom.toLowerCase();\n\tconst lowerLeft = left && left.toLowerCase();\n\n\tif (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top];\n\t}\n\n\tif (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right];\n\t}\n\n\tif (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right, bottom];\n\t}\n\n\treturn [top, right, bottom, left];\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToOneValue(top, right, bottom, left) {\n\tif (top !== right) {\n\t\treturn false;\n\t}\n\n\treturn (top === bottom && (bottom === left || !left)) || (!bottom && !left);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n\treturn (top === bottom && right === left) || (top === bottom && !left && top !== right);\n}\n\n/**\n * @param {string} _top\n * @param {string} right\n * @param {string} _bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToThreeValues(_top, right, _bottom, left) {\n\treturn right === left;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n\t\t\tif (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst valuesToShorthand = [];\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvaluesToShorthand.push(valueParser.stringify(valueNode));\n\t\t\t});\n\n\t\t\tif (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst shortestForm = canCondense(\n\t\t\t\tvaluesToShorthand[0] || '',\n\t\t\t\tvaluesToShorthand[1] || '',\n\t\t\t\tvaluesToShorthand[2] || '',\n\t\t\t\tvaluesToShorthand[3] || '',\n\t\t\t);\n\t\t\tconst shortestFormString = shortestForm.filter(Boolean).join(' ');\n\t\t\tconst valuesFormString = valuesToShorthand.join(' ');\n\n\t\t\tif (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.value = decl.value.replace(value, shortestFormString);\n\t\t\t} else {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value, shortestFormString),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransformSelector(result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst pseudoElement = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(pseudoElement)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!pseudoElement.includes('::') &&\n\t\t\t\t\t\t!keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst expectedPseudoElement =\n\t\t\t\t\t\tprimary === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n\t\t\t\t\tif (pseudoElement === expectedPseudoElement) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudoNode.value = expectedPseudoElement;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(pseudoElement, expectedPseudoElement),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Rule} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function transformSelector(result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(node, { updateSelector: true });\n\t} catch {\n\t\tresult.warn('Cannot parse selector', { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'unicode-bom';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected Unicode BOM',\n\trejected: 'Unexpected Unicode BOM',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unicode-bom',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (\n\t\t\t!validOptions ||\n\t\t\t!root.source ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\t\troot.source.inline ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'lang' does not exist on type 'Source'.\n\t\t\troot.source.lang === 'object-literal' ||\n\t\t\t// Ignore HTML documents\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\troot.document !== undefined\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { hasBOM } = root.source.input;\n\n\t\tif (primary === 'always' && !hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (primary === 'never' && hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'function') {\n\t\t\t\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t\tif (valueLowerCase === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit || (unit && primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t'prop' in node &&\n\t\t\t\t\tsecondaryOptions &&\n\t\t\t\t\toptionsMatches(secondaryOptions.ignoreProperties, unit.toLowerCase(), node.prop)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => check(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-keyword-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-keyword-case',\n};\n\n// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\n\nconst mapLowercaseKeywordsToCamelCase = new Map();\n\nfor (const func of keywordSets.camelCaseKeywords) {\n\tmapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreKeywords: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tcamelCaseSvgKeywords: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst propLowerCase = decl.prop.toLowerCase();\n\t\t\tconst value = decl.value;\n\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tlet needFix = false;\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tconst valueLowerCase = node.value.toLowerCase();\n\n\t\t\t\t// Ignore system colors\n\t\t\t\tif (keywordSets.systemColors.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore keywords within `url` and `var` function\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\t(valueLowerCase === 'url' ||\n\t\t\t\t\t\tvalueLowerCase === 'var' ||\n\t\t\t\t\t\tvalueLowerCase === 'counter' ||\n\t\t\t\t\t\tvalueLowerCase === 'counters' ||\n\t\t\t\t\t\tvalueLowerCase === 'attr')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// ignore keywords within ignoreFunctions functions\n\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst keyword = node.value;\n\n\t\t\t\t// Ignore css variables, and hex values, and math operators, and sass interpolation\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'word' ||\n\t\t\t\t\t!isStandardSyntaxValue(node.value) ||\n\t\t\t\t\tvalue.includes('#') ||\n\t\t\t\t\tignoredCharacters.has(keyword) ||\n\t\t\t\t\tgetUnitFromValueNode(node)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation' &&\n\t\t\t\t\t!keywordSets.animationShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation-name' &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font' &&\n\t\t\t\t\t!keywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font-family' &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'counter-increment' &&\n\t\t\t\t\tisCounterIncrementCustomIdentValue(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridRowProps.has(propLowerCase) && !keywordSets.gridRowKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tgridColumnProps.has(propLowerCase) &&\n\t\t\t\t\t!keywordSets.gridColumnKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'grid-area' && !keywordSets.gridAreaKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style' &&\n\t\t\t\t\t!keywordSets.listStyleShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style-type' &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreKeywords', keyword)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst keywordLowerCase = keyword.toLocaleLowerCase();\n\t\t\t\tlet expectedKeyword = null;\n\n\t\t\t\t/** @type {boolean} */\n\t\t\t\tconst camelCaseSvgKeywords =\n\t\t\t\t\t(secondaryOptions && secondaryOptions.camelCaseSvgKeywords) || false;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseKeywordsToCamelCase.has(keywordLowerCase) &&\n\t\t\t\t\tcamelCaseSvgKeywords\n\t\t\t\t) {\n\t\t\t\t\texpectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedKeyword = keyword.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\texpectedKeyword = keyword.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (keyword === expectedKeyword) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedKeyword;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(keyword, expectedKeyword),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tdecl.value = parsed.toString();\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function (value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tkeywordSets.counterIncrementKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function (value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tkeywordSets.counterResetKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../utils/isStandardSyntaxProperty');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((node: import('postcss').Declaration, index: number) => boolean) | null,\n *   determineIndex?: (declString: string, match: import('style-search').StyleSearchMatch) => number | false,\n * }} opts\n */\nmodule.exports = function valueListCommaWhitespaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declString = decl.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: declString,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tconst indexToCheckAfter = opts.determineIndex\n\t\t\t\t\t? opts.determineIndex(declString, match)\n\t\t\t\t\t: match.startIndex;\n\n\t\t\t\tif (indexToCheckAfter === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcheckComma(declString, indexToCheckAfter, decl);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Declaration} node\n\t * @returns {void}\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tdetermineIndex: (declString, match) => {\n\t\t\t\tconst nextChars = declString.substring(match.endIndex, declString.length);\n\n\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t// ending the comment so we're fine\n\t\t\t\tif (/^[ \\t]*\\/\\//.test(nextChars)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\treturn /^[ \\t]*\\/\\*/.test(nextChars)\n\t\t\t\t\t? declString.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t: match.startIndex;\n\t\t\t},\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => a - b).reverse()) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = context.newline + afterValue;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (value) => `Unexpected vendor-prefix \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-no-vendor-prefix',\n};\n\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst hasPrefix = (value) => {\n\tconst lowerValue = value.toLowerCase();\n\n\treturn valuePrefixes.some((prefix) => lowerValue.startsWith(prefix));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreValues: [isString],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (\n\t\t\t\t!isStandardSyntaxDeclaration(decl) ||\n\t\t\t\t!isStandardSyntaxProperty(decl.prop) ||\n\t\t\t\t!value.startsWith('-')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreValues', vendor.unprefixed(value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!hasPrefix(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isAutoprefixable.propertyValue(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = isAutoprefixable.unprefix(node.value);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: decl.prop.length + (decl.raws.between || '').length + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newSelectorString = selector\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = newSelectorString;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = newSelectorString;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tviolatedLFNewLinesRegex.test(selector) ||\n\t\t\t\tviolatedCRLFNewLinesRegex.test(selector)\n\t\t\t) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tlet beforeValue = value.slice(0, valueIndex);\n\t\t\t\t\tconst afterValue = value.slice(valueIndex);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isBoolean, isNumber, isString, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'indentation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (x) => `Expected indentation of ${x}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/indentation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions = {}, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber, 'tab'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tbaseIndentLevel: [isNumber, 'auto'],\n\t\t\t\t\texcept: ['block', 'value', 'param'],\n\t\t\t\t\tignore: ['value', 'param', 'inside-parens'],\n\t\t\t\t\tindentInsideParens: ['twice', 'once-at-root-twice-in-block'],\n\t\t\t\t\tindentClosingBrace: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst spaceCount = isNumber(primary) ? primary : null;\n\t\tconst indentChar = spaceCount == null ? '\\t' : ' '.repeat(spaceCount);\n\t\tconst warningWord = primary === 'tab' ? 'tab' : 'space';\n\n\t\t/** @type {number | 'auto'} */\n\t\tconst baseIndentLevel = secondaryOptions.baseIndentLevel;\n\t\t/** @type {boolean} */\n\t\tconst indentClosingBrace = secondaryOptions.indentClosingBrace;\n\n\t\t/**\n\t\t * @param {number} level\n\t\t */\n\t\tconst legibleExpectation = (level) => {\n\t\t\tconst count = spaceCount == null ? level : level * spaceCount;\n\t\t\tconst quantifiedWarningWord = count === 1 ? warningWord : `${warningWord}s`;\n\n\t\t\treturn `${count} ${quantifiedWarningWord}`;\n\t\t};\n\n\t\t// Cycle through all nodes using walk.\n\t\troot.walk((node) => {\n\t\t\tif (isRoot(node)) {\n\t\t\t\t// Ignore nested template literals root in css-in-js lang\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeLevel = indentationLevel(node);\n\n\t\t\t// Cut out any * and _ hacks from `before`\n\t\t\tconst before = (node.raws.before || '').replace(/[*_]$/, '');\n\t\t\tconst after = typeof node.raws.after === 'string' ? node.raws.after : '';\n\t\t\tconst parent = node.parent;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tconst expectedOpeningBraceIndentation = indentChar.repeat(nodeLevel);\n\n\t\t\t// Only inspect the spaces before the node\n\t\t\t// if this is the first node in root\n\t\t\t// or there is a newline in the `before` string.\n\t\t\t// (If there is no newline before a node,\n\t\t\t// there is no \"indentation\" to check.)\n\t\t\tconst isFirstChild = parent.type === 'root' && parent.first === node;\n\t\t\tconst lastIndexOfNewline = before.lastIndexOf('\\n');\n\n\t\t\t// Inspect whitespace in the `before` string that is\n\t\t\t// *after* the *last* newline character,\n\t\t\t// because anything besides that is not indentation for this node:\n\t\t\t// it is some other kind of separation, checked by some separate rule\n\t\t\tif (\n\t\t\t\t(lastIndexOfNewline !== -1 ||\n\t\t\t\t\t(isFirstChild &&\n\t\t\t\t\t\t(!getDocument(parent) ||\n\t\t\t\t\t\t\t(parent.raws.codeBefore && parent.raws.codeBefore.endsWith('\\n'))))) &&\n\t\t\t\tbefore.slice(lastIndexOfNewline + 1) !== expectedOpeningBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (isFirstChild && isString(node.raws.before)) {\n\t\t\t\t\t\tnode.raws.before = node.raws.before.replace(\n\t\t\t\t\t\t\t/^[ \\t]*(?=\\S|$)/,\n\t\t\t\t\t\t\texpectedOpeningBraceIndentation,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.raws.before = fixIndentation(node.raws.before, expectedOpeningBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(nodeLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Only blocks have the `after` string to check.\n\t\t\t// Only inspect `after` strings that start with a newline;\n\t\t\t// otherwise there's no indentation involved.\n\t\t\t// And check `indentClosingBrace` to see if it should be indented an extra level.\n\t\t\tconst closingBraceLevel = indentClosingBrace ? nodeLevel + 1 : nodeLevel;\n\t\t\tconst expectedClosingBraceIndentation = indentChar.repeat(closingBraceLevel);\n\n\t\t\tif (\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node) &&\n\t\t\t\tafter &&\n\t\t\t\tafter.includes('\\n') &&\n\t\t\t\tafter.slice(after.lastIndexOf('\\n') + 1) !== expectedClosingBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.raws.after = fixIndentation(node.raws.after, expectedClosingBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(closingBraceLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: node.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a declaration, check the value\n\t\t\tif (isDeclaration(node)) {\n\t\t\t\tcheckValue(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is a rule, check the selector\n\t\t\tif (isRule(node)) {\n\t\t\t\tcheckSelector(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is an at rule, check the params\n\t\t\tif (isAtRule(node)) {\n\t\t\t\tcheckAtRuleParams(node, nodeLevel);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} level\n\t\t * @returns {number}\n\t\t */\n\t\tfunction indentationLevel(node, level = 0) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRoot(node.parent)) {\n\t\t\t\treturn level + getRootBaseIndentLevel(node.parent, baseIndentLevel, primary);\n\t\t\t}\n\n\t\t\tlet calculatedLevel;\n\n\t\t\t// Indentation level equals the ancestor nodes\n\t\t\t// separating this node from root; so recursively\n\t\t\t// run this operation\n\t\t\tcalculatedLevel = indentationLevel(node.parent, level + 1);\n\n\t\t\t// If `secondaryOptions.except` includes \"block\",\n\t\t\t// blocks are taken down one from their calculated level\n\t\t\t// (all blocks are the same level as their parents)\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'block') &&\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node)\n\t\t\t) {\n\t\t\t\tcalculatedLevel--;\n\t\t\t}\n\n\t\t\treturn calculatedLevel;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} declLevel\n\t\t */\n\t\tfunction checkValue(decl, declLevel) {\n\t\t\tif (!decl.value.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'value')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\t\t\tconst valueLevel = optionsMatches(secondaryOptions, 'except', 'value')\n\t\t\t\t? declLevel\n\t\t\t\t: declLevel + 1;\n\n\t\t\tcheckMultilineBit(declString, valueLevel, decl);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkSelector(ruleNode, ruleLevel) {\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Less mixins have params, and they should be indented extra\n\t\t\t// @ts-expect-error -- TS2339: Property 'params' does not exist on type 'Rule'.\n\t\t\tif (ruleNode.params) {\n\t\t\t\truleLevel += 1;\n\t\t\t}\n\n\t\t\tcheckMultilineBit(selector, ruleLevel, ruleNode);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkAtRuleParams(atRule, ruleLevel) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'param')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @nest and SCSS's @at-root rules should be treated like regular rules, not expected\n\t\t\t// to have their params (selectors) indented\n\t\t\tconst paramLevel =\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'param') ||\n\t\t\t\tatRule.name === 'nest' ||\n\t\t\t\tatRule.name === 'at-root'\n\t\t\t\t\t? ruleLevel\n\t\t\t\t\t: ruleLevel + 1;\n\n\t\t\tcheckMultilineBit(beforeBlockString(atRule).trim(), paramLevel, atRule);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} newlineIndentLevel\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkMultilineBit(source, newlineIndentLevel, node) {\n\t\t\tif (!source.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Data for current node fixing\n\t\t\t/** @type {Array<{ expectedIndentation: string, currentIndentation: string, startIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// `outsideParens` because function arguments and also non-standard parenthesized stuff like\n\t\t\t// Sass maps are ignored to allow for arbitrary indentation\n\t\t\tlet parentheticalDepth = 0;\n\n\t\t\tconst ignoreInsideParans = optionsMatches(secondaryOptions, 'ignore', 'inside-parens');\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource,\n\t\t\t\t\ttarget: '\\n',\n\t\t\t\t\t// @ts-expect-error -- The `outsideParens` option is unsupported. Why?\n\t\t\t\t\toutsideParens: ignoreInsideParans,\n\t\t\t\t},\n\t\t\t\t(match, matchCount) => {\n\t\t\t\t\tconst precedesClosingParenthesis = /^[ \\t]*\\)/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (ignoreInsideParans && (precedesClosingParenthesis || match.insideParens)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet expectedIndentLevel = newlineIndentLevel;\n\n\t\t\t\t\t// Modififications for parenthetical content\n\t\t\t\t\tif (!ignoreInsideParans && match.insideParens) {\n\t\t\t\t\t\t// If the first match in is within parentheses, reduce the parenthesis penalty\n\t\t\t\t\t\tif (matchCount === 1) parentheticalDepth -= 1;\n\n\t\t\t\t\t\t// Account for windows line endings\n\t\t\t\t\t\tlet newlineIndex = match.startIndex;\n\n\t\t\t\t\t\tif (source[match.startIndex - 1] === '\\r') {\n\t\t\t\t\t\t\tnewlineIndex--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningParenthesis = /\\([ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningBrace = /\\{[ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningBrace) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst startingClosingBrace = /^[ \\t]*\\}/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\t\tif (startingClosingBrace) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpectedIndentLevel += parentheticalDepth;\n\n\t\t\t\t\t\t// Past this point, adjustments to parentheticalDepth affect next line\n\n\t\t\t\t\t\tif (precedesClosingParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (secondaryOptions.indentInsideParens) {\n\t\t\t\t\t\t\tcase 'twice':\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'once-at-root-twice-in-block':\n\t\t\t\t\t\t\t\tif (node.parent === node.root()) {\n\t\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Starting at the index after the newline, we want to\n\t\t\t\t\t// check that the whitespace characters (excluding newlines) before the first\n\t\t\t\t\t// non-whitespace character equal the expected indentation\n\t\t\t\t\tconst afterNewlineSpaceMatches = /^([ \\t]*)\\S/.exec(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (!afterNewlineSpaceMatches) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst afterNewlineSpace = afterNewlineSpaceMatches[1] || '';\n\t\t\t\t\tconst expectedIndentation = indentChar.repeat(\n\t\t\t\t\t\texpectedIndentLevel > 0 ? expectedIndentLevel : 0,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (afterNewlineSpace !== expectedIndentation) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t// Adding fixes position in reverse order, because if we change indent in the beginning of the string it will break all following fixes for that string\n\t\t\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\t\t\texpectedIndentation,\n\t\t\t\t\t\t\t\tcurrentIndentation: afterNewlineSpace,\n\t\t\t\t\t\t\t\tstartIndex: match.startIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(expectedIndentLevel)),\n\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\tindex: match.startIndex + afterNewlineSpace.length + 1,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tnode.selector = replaceIndentation(\n\t\t\t\t\t\t\tnode.selector,\n\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\tfixPosition.startIndex,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst declProp = node.prop;\n\t\t\t\t\tconst declBetween = node.raws.between;\n\n\t\t\t\t\tif (!isString(declBetween)) {\n\t\t\t\t\t\tthrow new TypeError('The `between` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tif (fixPosition.startIndex < declProp.length + declBetween.length) {\n\t\t\t\t\t\t\tnode.raws.between = replaceIndentation(\n\t\t\t\t\t\t\t\tdeclBetween,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.value = replaceIndentation(\n\t\t\t\t\t\t\t\tnode.value,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length - declBetween.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tconst atRuleName = node.name;\n\t\t\t\t\tconst atRuleAfterName = node.raws.afterName;\n\t\t\t\t\tconst atRuleParams = node.params;\n\n\t\t\t\t\tif (!isString(atRuleAfterName)) {\n\t\t\t\t\t\tthrow new TypeError('The `afterName` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\t// 1 — it's a @ length\n\t\t\t\t\t\tif (fixPosition.startIndex < 1 + atRuleName.length + atRuleAfterName.length) {\n\t\t\t\t\t\t\tnode.raws.afterName = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleAfterName,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.params = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleParams,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - atRuleAfterName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {string} space\n * @returns {number}\n */\nfunction getRootBaseIndentLevel(root, baseIndentLevel, space) {\n\tconst document = getDocument(root);\n\n\tif (!document) {\n\t\treturn 0;\n\t}\n\n\tif (!root.source) {\n\t\tthrow new Error('The root node must have a source');\n\t}\n\n\t/** @type {import('postcss').Source & { baseIndentLevel?: number }} */\n\tconst source = root.source;\n\n\tconst indentLevel = source.baseIndentLevel;\n\n\tif (isNumber(indentLevel) && Number.isSafeInteger(indentLevel)) {\n\t\treturn indentLevel;\n\t}\n\n\tconst newIndentLevel = inferRootIndentLevel(root, baseIndentLevel, () =>\n\t\tinferDocIndentSize(document, space),\n\t);\n\n\tsource.baseIndentLevel = newIndentLevel;\n\n\treturn newIndentLevel;\n}\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction getDocument(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\tconst document = node.document;\n\n\tif (document) {\n\t\treturn document;\n\t}\n\n\tconst root = node.root();\n\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\treturn root && root.document;\n}\n\n/**\n * @param {import('postcss').Document} document\n * @param {string} space\n * returns {number}\n */\nfunction inferDocIndentSize(document, space) {\n\tif (!document.source) throw new Error('The document node must have a source');\n\n\t/** @type {import('postcss').Source & { indentSize?: number }} */\n\tconst docSource = document.source;\n\n\tlet indentSize = docSource.indentSize;\n\n\tif (isNumber(indentSize) && Number.isSafeInteger(indentSize)) {\n\t\treturn indentSize;\n\t}\n\n\tconst source = document.source.input.css;\n\tconst indents = source.match(/^ *(?=\\S)/gm);\n\n\tif (indents) {\n\t\t/** @type {Map<number, number>} */\n\t\tconst scores = new Map();\n\t\tlet lastIndentSize = 0;\n\t\tlet lastLeadingSpacesLength = 0;\n\n\t\t/**\n\t\t * @param {number} leadingSpacesLength\n\t\t */\n\t\tconst vote = (leadingSpacesLength) => {\n\t\t\tif (leadingSpacesLength) {\n\t\t\t\tlastIndentSize = Math.abs(leadingSpacesLength - lastLeadingSpacesLength) || lastIndentSize;\n\n\t\t\t\tif (lastIndentSize > 1) {\n\t\t\t\t\tconst score = scores.get(lastIndentSize);\n\n\t\t\t\t\tif (score) {\n\t\t\t\t\t\tscores.set(lastIndentSize, score + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscores.set(lastIndentSize, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastIndentSize = 0;\n\t\t\t}\n\n\t\t\tlastLeadingSpacesLength = leadingSpacesLength;\n\t\t};\n\n\t\tfor (const leadingSpaces of indents) {\n\t\t\tvote(leadingSpaces.length);\n\t\t}\n\n\t\tlet bestScore = 0;\n\n\t\tfor (const [indentSizeDate, score] of scores.entries()) {\n\t\t\tif (score > bestScore) {\n\t\t\t\tbestScore = score;\n\t\t\t\tindentSize = indentSizeDate;\n\t\t\t}\n\t\t}\n\t}\n\n\tindentSize =\n\t\tNumber(indentSize) || (indents && indents[0] && indents[0].length) || Number(space) || 2;\n\tdocSource.indentSize = indentSize;\n\n\treturn indentSize;\n}\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {() => number} indentSize\n * @returns {number}\n */\nfunction inferRootIndentLevel(root, baseIndentLevel, indentSize) {\n\t/**\n\t * @param {string} indent\n\t */\n\tfunction getIndentLevel(indent) {\n\t\tconst tabMatch = indent.match(/\\t/g);\n\t\tconst tabCount = tabMatch ? tabMatch.length : 0;\n\n\t\tconst spaceMatch = indent.match(/ /g);\n\t\tconst spaceCount = spaceMatch ? Math.round(spaceMatch.length / indentSize()) : 0;\n\n\t\treturn tabCount + spaceCount;\n\t}\n\n\tlet newBaseIndentLevel = 0;\n\n\tif (!isNumber(baseIndentLevel) || !Number.isSafeInteger(baseIndentLevel)) {\n\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\tlet source = root.source.input.css;\n\n\t\tsource = source.replace(/^[^\\r\\n]+/, (firstLine) => {\n\t\t\tconst match = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)$/.exec(root.raws.codeBefore);\n\n\t\t\tif (match) {\n\t\t\t\treturn match[1] + firstLine;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t});\n\n\t\tconst indents = source.match(/^[ \\t]*(?=\\S)/gm);\n\n\t\tif (indents) {\n\t\t\treturn Math.min(...indents.map((indent) => getIndentLevel(indent)));\n\t\t}\n\n\t\tnewBaseIndentLevel = 1;\n\t} else {\n\t\tnewBaseIndentLevel = baseIndentLevel;\n\t}\n\n\tconst indents = [];\n\tconst foundIndents = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)\\S/m.exec(root.raws.codeBefore);\n\n\t// The indent level of the CSS code block in non-CSS-like files is determined by the shortest indent of non-empty line.\n\tif (foundIndents) {\n\t\tlet shortest = Number.MAX_SAFE_INTEGER;\n\t\tlet i = 0;\n\n\t\twhile (++i < foundIndents.length) {\n\t\t\tconst foundIndent = foundIndents[i];\n\n\t\t\tassertString(foundIndent);\n\t\t\tconst current = getIndentLevel(foundIndent);\n\n\t\t\tif (current < shortest) {\n\t\t\t\tshortest = current;\n\n\t\t\t\tif (shortest === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shortest !== Number.MAX_SAFE_INTEGER) {\n\t\t\tindents.push(new Array(shortest).fill(' ').join(''));\n\t\t}\n\t}\n\n\tconst after = root.raws.after;\n\n\tif (after) {\n\t\tlet afterEnd;\n\n\t\tif (after.endsWith('\\n')) {\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tconst document = root.document;\n\n\t\t\tif (document) {\n\t\t\t\tconst nextRoot = document.nodes[document.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : document.raws.codeAfter;\n\t\t\t} else {\n\t\t\t\t// Nested root node in css-in-js lang\n\t\t\t\tconst parent = root.parent;\n\n\t\t\t\tif (!parent) throw new Error('The root node must have a parent');\n\n\t\t\t\tconst nextRoot = parent.nodes[parent.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : root.raws.codeAfter;\n\t\t\t}\n\t\t} else {\n\t\t\tafterEnd = after;\n\t\t}\n\n\t\tif (afterEnd) indents.push(afterEnd.match(/^[ \\t]*/)[0]);\n\t}\n\n\tif (indents.length) {\n\t\treturn Math.max(...indents.map((indent) => getIndentLevel(indent))) + newBaseIndentLevel;\n\t}\n\n\treturn newBaseIndentLevel;\n}\n\n/**\n * @param {string | undefined} str\n * @param {string} whitespace\n */\nfunction fixIndentation(str, whitespace) {\n\tif (!isString(str)) {\n\t\treturn str;\n\t}\n\n\treturn str.replace(/\\n[ \\t]*(?=\\S|$)/g, `\\n${whitespace}`);\n}\n\n/**\n * @param {string} input\n * @param {string} searchString\n * @param {string} replaceString\n * @param {number} startIndex\n */\nfunction replaceIndentation(input, searchString, replaceString, startIndex) {\n\tconst offset = startIndex + 1;\n\tconst stringStart = input.slice(0, offset);\n\tconst stringEnd = input.slice(offset + searchString.length);\n\n\treturn stringStart + replaceString + stringEnd;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-list-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newValueString = value\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tsetDeclarationValue(decl, newValueString);\n\t\t\t} else if (violatedLFNewLinesRegex.test(value) || violatedCRLFNewLinesRegex.test(value)) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} checkedValue\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, checkedValue, getIndex) {\n\t\t\t/** @type {Array<{ index: number, message: string }>} */\n\t\t\tconst problems = [];\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tfunction processValue(valueNode) {\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst expectedUnit = primary === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n\t\t\t\tif (unit === expectedUnit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tproblems.push({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.expected(unit, expectedUnit),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(checkedValue).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tlet needFix = false;\n\t\t\t\tconst value = valueNode.value;\n\n\t\t\t\tif (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (value.includes('*')) {\n\t\t\t\t\tvalue.split('*').some((val) => {\n\t\t\t\t\t\treturn processValue({\n\t\t\t\t\t\t\t...valueNode,\n\t\t\t\t\t\t\tsourceIndex: value.indexOf(val) + val.length + 1,\n\t\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tneedFix = processValue(valueNode);\n\n\t\t\t\tif (needFix && context.fix) {\n\t\t\t\t\tvalueNode.value = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif ('name' in node && node.name === 'media') {\n\t\t\t\t\t\tnode.params = parsedValue.toString();\n\t\t\t\t\t} else if ('value' in node) {\n\t\t\t\t\t\tnode.value = parsedValue.toString();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const err of problems) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !('variable' in atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-disallowed-list',\n};\n\n/**\n * a function to retrieve only the media feature name\n * could be externalized in an utils function if needed in other code\n *\n * @param {import('postcss-media-query-parser').Child} mediaFeatureNode\n * @returns {string | undefined}\n */\nconst getMediaFeatureName = (mediaFeatureNode) => {\n\tconst value = mediaFeatureNode.value.toLowerCase();\n\n\tconst match = /((?:-?\\w*)*)/.exec(value);\n\n\treturn match ? match[1] : undefined;\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t\tignoreMediaFeatureNames: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t * @param {string | undefined} input\n\t\t * @param {Record<string, unknown>} options\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode, input, options) {\n\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t// There is not unit or it is not configured as a problem\n\t\t\tif (!unit || (unit && !primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The unit has an ignore option for the specific input\n\t\t\tif (optionsMatches(options, unit.toLowerCase(), input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: nodeIndex + valueNode.sourceIndex,\n\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkMedia(node, value, getIndex) {\n\t\t\tmediaParser(node.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst mediaName = getMediaFeatureName(mediaFeatureNode);\n\t\t\t\tconst parentValue = mediaFeatureNode.parent.value;\n\n\t\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t\t// Ignore all non-word valueNode and\n\t\t\t\t\t// the values not included in the parentValue string\n\t\t\t\t\tif (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcheck(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tgetIndex(node),\n\t\t\t\t\t\tvalueNode,\n\t\t\t\t\t\tmediaName,\n\t\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreMediaFeatureNames : {},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDecl(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcheck(\n\t\t\t\t\tnode,\n\t\t\t\t\tgetIndex(node),\n\t\t\t\t\tvalueNode,\n\t\t\t\t\tnode.prop,\n\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreProperties : {},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => checkMedia(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => checkDecl(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get raw selector so we can allow end-of-line comments, e.g.\n\t\t\t// a, /* comment */\n\t\t\t// b {}\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixIndices = [];\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: selector,\n\t\t\t\t\ttarget: ',',\n\t\t\t\t\tfunctionArguments: 'skip',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst nextChars = selector.slice(match.endIndex);\n\n\t\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t\t// ending the comment so we're fine\n\t\t\t\t\tif (/^\\s+\\/\\//.test(nextChars)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\t\tconst indextoCheckAfter = /^\\s+\\/\\*/.test(nextChars)\n\t\t\t\t\t\t? selector.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t\t: match.startIndex;\n\n\t\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\t\tsource: selector,\n\t\t\t\t\t\tindex: indextoCheckAfter,\n\t\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tfixIndices.push(indextoCheckAfter + 1);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: match.startIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixIndices.length) {\n\t\t\t\tlet fixedSelector = selector;\n\n\t\t\t\tfor (const index of fixIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = fixedSelector.slice(0, index);\n\t\t\t\t\tlet afterSelector = fixedSelector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = context.newline + afterSelector;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tfixedSelector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst vendor = require('../../utils/vendor');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, assertNumber } = require('../../utils/validateTypes');\nconst validateObjectWithProps = require('../../utils/validateObjectWithProps');\n\nconst ruleName = 'declaration-property-max-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, max) =>\n\t\t`Expected \"${property}\" to have no more than ${max} ${max === 1 ? 'value' : 'values'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-max-values',\n};\n\n/**\n * @param {valueParser.Node} node\n */\nconst isValueNode = (node) => {\n\treturn node.type === 'word' || node.type === 'function' || node.type === 'string';\n};\n\n/** @type {import('stylelint').Rule<Record<string, number>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithProps(isNumber)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\t\t\tconst propLength = valueParser(value).nodes.filter(isValueNode).length;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max = primary[propKey];\n\n\t\t\tassertNumber(max);\n\n\t\t\tif (propLength <= max) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, max),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties agree with the provided validator.\n *\n * @example\n * config = {\n *   value1: 1,\n *   value2: 2,\n *   value3: 3,\n * };\n * validateObjectWithProps(isNumber)(config);\n * //=> true\n *\n * @param {(value: unknown) => boolean} validator\n * @returns {(value: unknown) => boolean}\n */\nmodule.exports = (validator) => (value) => {\n\tif (!isPlainObject(value)) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(value).every((item) => {\n\t\treturn validator(item);\n\t});\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'string-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} quotes`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/string-quotes',\n};\n\nconst singleQuote = `'`;\nconst doubleQuote = `\"`;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst correctQuote = primary === 'single' ? singleQuote : doubleQuote;\n\tconst erroneousQuote = primary === 'single' ? doubleQuote : singleQuote;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['single', 'double'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tavoidEscape: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst avoidEscape =\n\t\t\tsecondaryOptions && secondaryOptions.avoidEscape !== undefined\n\t\t\t\t? secondaryOptions.avoidEscape\n\t\t\t\t: true;\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.quoted) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === correctQuote && avoidEscape) {\n\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\tattributeNode.quoteMark = erroneousQuote;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary === 'single' ? 'double' : primary),\n\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === erroneousQuote) {\n\t\t\t\t\t\tif (avoidEscape) {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\truleNode.selector = replaceQuote(ruleNode.selector, fixIndex, correctQuote);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no erroneous quotes\n\t\t\tif (!value.includes(erroneousQuote)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'atrule' && node.name === 'charset') {\n\t\t\t\t// allow @charset rules to have double quotes, in spite of the configuration\n\t\t\t\t// TODO: @charset should always use double-quotes, see https://github.com/stylelint/stylelint/issues/2788\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'string' && valueNode.quote === erroneousQuote) {\n\t\t\t\t\tconst needsEscape = valueNode.value.includes(correctQuote);\n\n\t\t\t\t\tif (avoidEscape && needsEscape) {\n\t\t\t\t\t\t// don't consider this an error\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = valueNode.sourceIndex;\n\n\t\t\t\t\t// we currently don't fix escapes\n\t\t\t\t\tif (context.fix && !needsEscape) {\n\t\t\t\t\t\tconst closeIndex = openIndex + valueNode.value.length + erroneousQuote.length;\n\n\t\t\t\t\t\tfixPositions.push(openIndex, closeIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\tnode.params = replaceQuote(node.params, fixIndex, correctQuote);\n\t\t\t\t} else {\n\t\t\t\t\tnode.value = replaceQuote(node.value, fixIndex, correctQuote);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} string\n * @param {number} index\n * @param {string} replace\n * @returns {string}\n */\nfunction replaceQuote(string, index, replace) {\n\treturn string.substring(0, index) + replace + string.substring(index + replace.length);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').rules} */\nconst rules = {\n\t'alpha-value-notation': importLazy('./alpha-value-notation'),\n\t'at-rule-allowed-list': importLazy('./at-rule-allowed-list'),\n\t'at-rule-disallowed-list': importLazy('./at-rule-disallowed-list'),\n\t'at-rule-empty-line-before': importLazy('./at-rule-empty-line-before'),\n\t'at-rule-name-case': importLazy('./at-rule-name-case'),\n\t'at-rule-name-newline-after': importLazy('./at-rule-name-newline-after'),\n\t'at-rule-semicolon-space-before': importLazy('./at-rule-semicolon-space-before'),\n\t'at-rule-name-space-after': importLazy('./at-rule-name-space-after'),\n\t'at-rule-no-unknown': importLazy('./at-rule-no-unknown'),\n\t'at-rule-no-vendor-prefix': importLazy('./at-rule-no-vendor-prefix'),\n\t'at-rule-property-required-list': importLazy('./at-rule-property-required-list'),\n\t'at-rule-semicolon-newline-after': importLazy('./at-rule-semicolon-newline-after'),\n\t'block-closing-brace-empty-line-before': importLazy('./block-closing-brace-empty-line-before'),\n\t'block-closing-brace-newline-after': importLazy('./block-closing-brace-newline-after'),\n\t'block-closing-brace-newline-before': importLazy('./block-closing-brace-newline-before'),\n\t'block-closing-brace-space-after': importLazy('./block-closing-brace-space-after'),\n\t'block-closing-brace-space-before': importLazy('./block-closing-brace-space-before'),\n\t'block-no-empty': importLazy('./block-no-empty'),\n\t'block-opening-brace-newline-after': importLazy('./block-opening-brace-newline-after'),\n\t'block-opening-brace-newline-before': importLazy('./block-opening-brace-newline-before'),\n\t'block-opening-brace-space-after': importLazy('./block-opening-brace-space-after'),\n\t'block-opening-brace-space-before': importLazy('./block-opening-brace-space-before'),\n\t'color-function-notation': importLazy('./color-function-notation'),\n\t'color-hex-alpha': importLazy('./color-hex-alpha'),\n\t'color-hex-case': importLazy('./color-hex-case'),\n\t'color-hex-length': importLazy('./color-hex-length'),\n\t'color-named': importLazy('./color-named'),\n\t'color-no-hex': importLazy('./color-no-hex'),\n\t'color-no-invalid-hex': importLazy('./color-no-invalid-hex'),\n\t'comment-empty-line-before': importLazy('./comment-empty-line-before'),\n\t'comment-no-empty': importLazy('./comment-no-empty'),\n\t'comment-pattern': importLazy('./comment-pattern'),\n\t'comment-whitespace-inside': importLazy('./comment-whitespace-inside'),\n\t'comment-word-disallowed-list': importLazy('./comment-word-disallowed-list'),\n\t'custom-media-pattern': importLazy('./custom-media-pattern'),\n\t'custom-property-empty-line-before': importLazy('./custom-property-empty-line-before'),\n\t'custom-property-no-missing-var-function': importLazy(\n\t\t'./custom-property-no-missing-var-function',\n\t),\n\t'custom-property-pattern': importLazy('./custom-property-pattern'),\n\t'declaration-bang-space-after': importLazy('./declaration-bang-space-after'),\n\t'declaration-bang-space-before': importLazy('./declaration-bang-space-before'),\n\t'declaration-block-no-duplicate-custom-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-custom-properties',\n\t),\n\t'declaration-block-no-duplicate-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-properties',\n\t),\n\t'declaration-block-no-redundant-longhand-properties': importLazy(\n\t\t'./declaration-block-no-redundant-longhand-properties',\n\t),\n\t'declaration-block-no-shorthand-property-overrides': importLazy(\n\t\t'./declaration-block-no-shorthand-property-overrides',\n\t),\n\t'declaration-block-semicolon-newline-after': importLazy(\n\t\t'./declaration-block-semicolon-newline-after',\n\t),\n\t'declaration-block-semicolon-newline-before': importLazy(\n\t\t'./declaration-block-semicolon-newline-before',\n\t),\n\t'declaration-block-semicolon-space-after': importLazy(\n\t\t'./declaration-block-semicolon-space-after',\n\t),\n\t'declaration-block-semicolon-space-before': importLazy(\n\t\t'./declaration-block-semicolon-space-before',\n\t),\n\t'declaration-block-single-line-max-declarations': importLazy(\n\t\t'./declaration-block-single-line-max-declarations',\n\t),\n\t'declaration-block-trailing-semicolon': importLazy('./declaration-block-trailing-semicolon'),\n\t'declaration-colon-newline-after': importLazy('./declaration-colon-newline-after'),\n\t'declaration-colon-space-after': importLazy('./declaration-colon-space-after'),\n\t'declaration-colon-space-before': importLazy('./declaration-colon-space-before'),\n\t'declaration-empty-line-before': importLazy('./declaration-empty-line-before'),\n\t'declaration-no-important': importLazy('./declaration-no-important'),\n\t'declaration-property-max-values': importLazy('./declaration-property-max-values'),\n\t'declaration-property-unit-allowed-list': importLazy('./declaration-property-unit-allowed-list'),\n\t'declaration-property-unit-disallowed-list': importLazy(\n\t\t'./declaration-property-unit-disallowed-list',\n\t),\n\t'declaration-property-value-allowed-list': importLazy(\n\t\t'./declaration-property-value-allowed-list',\n\t),\n\t'declaration-property-value-disallowed-list': importLazy(\n\t\t'./declaration-property-value-disallowed-list',\n\t),\n\t'font-family-no-missing-generic-family-keyword': importLazy(\n\t\t'./font-family-no-missing-generic-family-keyword',\n\t),\n\t'font-family-name-quotes': importLazy('./font-family-name-quotes'),\n\t'font-family-no-duplicate-names': importLazy('./font-family-no-duplicate-names'),\n\t'font-weight-notation': importLazy('./font-weight-notation'),\n\t'function-allowed-list': importLazy('./function-allowed-list'),\n\t'function-calc-no-unspaced-operator': importLazy('./function-calc-no-unspaced-operator'),\n\t'function-comma-newline-after': importLazy('./function-comma-newline-after'),\n\t'function-comma-newline-before': importLazy('./function-comma-newline-before'),\n\t'function-comma-space-after': importLazy('./function-comma-space-after'),\n\t'function-comma-space-before': importLazy('./function-comma-space-before'),\n\t'function-disallowed-list': importLazy('./function-disallowed-list'),\n\t'function-linear-gradient-no-nonstandard-direction': importLazy(\n\t\t'./function-linear-gradient-no-nonstandard-direction',\n\t),\n\t'function-max-empty-lines': importLazy('./function-max-empty-lines'),\n\t'function-name-case': importLazy('./function-name-case'),\n\t'function-no-unknown': importLazy('./function-no-unknown'),\n\t'function-parentheses-newline-inside': importLazy('./function-parentheses-newline-inside'),\n\t'function-parentheses-space-inside': importLazy('./function-parentheses-space-inside'),\n\t'function-url-no-scheme-relative': importLazy('./function-url-no-scheme-relative'),\n\t'function-url-quotes': importLazy('./function-url-quotes'),\n\t'function-url-scheme-allowed-list': importLazy('./function-url-scheme-allowed-list'),\n\t'function-url-scheme-disallowed-list': importLazy('./function-url-scheme-disallowed-list'),\n\t'function-whitespace-after': importLazy('./function-whitespace-after'),\n\t'hue-degree-notation': importLazy('./hue-degree-notation'),\n\t'import-notation': importLazy('./import-notation'),\n\t'keyframe-block-no-duplicate-selectors': importLazy('./keyframe-block-no-duplicate-selectors'),\n\t'keyframe-declaration-no-important': importLazy('./keyframe-declaration-no-important'),\n\t'keyframes-name-pattern': importLazy('./keyframes-name-pattern'),\n\t'length-zero-no-unit': importLazy('./length-zero-no-unit'),\n\tlinebreaks: importLazy('./linebreaks'),\n\t'max-empty-lines': importLazy('./max-empty-lines'),\n\t'max-line-length': importLazy('./max-line-length'),\n\t'max-nesting-depth': importLazy('./max-nesting-depth'),\n\t'media-feature-colon-space-after': importLazy('./media-feature-colon-space-after'),\n\t'media-feature-colon-space-before': importLazy('./media-feature-colon-space-before'),\n\t'media-feature-name-allowed-list': importLazy('./media-feature-name-allowed-list'),\n\t'media-feature-name-case': importLazy('./media-feature-name-case'),\n\t'media-feature-name-disallowed-list': importLazy('./media-feature-name-disallowed-list'),\n\t'media-feature-name-no-unknown': importLazy('./media-feature-name-no-unknown'),\n\t'media-feature-name-no-vendor-prefix': importLazy('./media-feature-name-no-vendor-prefix'),\n\t'media-feature-name-value-allowed-list': importLazy('./media-feature-name-value-allowed-list'),\n\t'media-feature-parentheses-space-inside': importLazy('./media-feature-parentheses-space-inside'),\n\t'media-feature-range-operator-space-after': importLazy(\n\t\t'./media-feature-range-operator-space-after',\n\t),\n\t'media-feature-range-operator-space-before': importLazy(\n\t\t'./media-feature-range-operator-space-before',\n\t),\n\t'media-query-list-comma-newline-after': importLazy('./media-query-list-comma-newline-after'),\n\t'media-query-list-comma-newline-before': importLazy('./media-query-list-comma-newline-before'),\n\t'media-query-list-comma-space-after': importLazy('./media-query-list-comma-space-after'),\n\t'media-query-list-comma-space-before': importLazy('./media-query-list-comma-space-before'),\n\t'named-grid-areas-no-invalid': importLazy('./named-grid-areas-no-invalid'),\n\t'no-descending-specificity': importLazy('./no-descending-specificity'),\n\t'no-duplicate-at-import-rules': importLazy('./no-duplicate-at-import-rules'),\n\t'no-duplicate-selectors': importLazy('./no-duplicate-selectors'),\n\t'no-empty-source': importLazy('./no-empty-source'),\n\t'no-empty-first-line': importLazy('./no-empty-first-line'),\n\t'no-eol-whitespace': importLazy('./no-eol-whitespace'),\n\t'no-extra-semicolons': importLazy('./no-extra-semicolons'),\n\t'no-invalid-double-slash-comments': importLazy('./no-invalid-double-slash-comments'),\n\t'no-invalid-position-at-import-rule': importLazy('./no-invalid-position-at-import-rule'),\n\t'no-irregular-whitespace': importLazy('./no-irregular-whitespace'),\n\t'no-missing-end-of-source-newline': importLazy('./no-missing-end-of-source-newline'),\n\t'no-unknown-animations': importLazy('./no-unknown-animations'),\n\t'number-leading-zero': importLazy('./number-leading-zero'),\n\t'number-max-precision': importLazy('./number-max-precision'),\n\t'number-no-trailing-zeros': importLazy('./number-no-trailing-zeros'),\n\t'property-allowed-list': importLazy('./property-allowed-list'),\n\t'property-case': importLazy('./property-case'),\n\t'property-disallowed-list': importLazy('./property-disallowed-list'),\n\t'property-no-unknown': importLazy('./property-no-unknown'),\n\t'property-no-vendor-prefix': importLazy('./property-no-vendor-prefix'),\n\t'rule-empty-line-before': importLazy('./rule-empty-line-before'),\n\t'rule-selector-property-disallowed-list': importLazy('./rule-selector-property-disallowed-list'),\n\t'selector-attribute-brackets-space-inside': importLazy(\n\t\t'./selector-attribute-brackets-space-inside',\n\t),\n\t'selector-attribute-name-disallowed-list': importLazy(\n\t\t'./selector-attribute-name-disallowed-list',\n\t),\n\t'selector-attribute-operator-allowed-list': importLazy(\n\t\t'./selector-attribute-operator-allowed-list',\n\t),\n\t'selector-attribute-operator-disallowed-list': importLazy(\n\t\t'./selector-attribute-operator-disallowed-list',\n\t),\n\t'selector-attribute-operator-space-after': importLazy(\n\t\t'./selector-attribute-operator-space-after',\n\t),\n\t'selector-attribute-operator-space-before': importLazy(\n\t\t'./selector-attribute-operator-space-before',\n\t),\n\t'selector-attribute-quotes': importLazy('./selector-attribute-quotes'),\n\t'selector-class-pattern': importLazy('./selector-class-pattern'),\n\t'selector-combinator-allowed-list': importLazy('./selector-combinator-allowed-list'),\n\t'selector-combinator-disallowed-list': importLazy('./selector-combinator-disallowed-list'),\n\t'selector-combinator-space-after': importLazy('./selector-combinator-space-after'),\n\t'selector-combinator-space-before': importLazy('./selector-combinator-space-before'),\n\t'selector-descendant-combinator-no-non-space': importLazy(\n\t\t'./selector-descendant-combinator-no-non-space',\n\t),\n\t'selector-disallowed-list': importLazy('./selector-disallowed-list'),\n\t'selector-id-pattern': importLazy('./selector-id-pattern'),\n\t'selector-list-comma-newline-after': importLazy('./selector-list-comma-newline-after'),\n\t'selector-list-comma-newline-before': importLazy('./selector-list-comma-newline-before'),\n\t'selector-list-comma-space-after': importLazy('./selector-list-comma-space-after'),\n\t'selector-list-comma-space-before': importLazy('./selector-list-comma-space-before'),\n\t'selector-max-attribute': importLazy('./selector-max-attribute'),\n\t'selector-max-class': importLazy('./selector-max-class'),\n\t'selector-max-combinators': importLazy('./selector-max-combinators'),\n\t'selector-max-compound-selectors': importLazy('./selector-max-compound-selectors'),\n\t'selector-max-empty-lines': importLazy('./selector-max-empty-lines'),\n\t'selector-max-id': importLazy('./selector-max-id'),\n\t'selector-max-pseudo-class': importLazy('./selector-max-pseudo-class'),\n\t'selector-max-specificity': importLazy('./selector-max-specificity'),\n\t'selector-max-type': importLazy('./selector-max-type'),\n\t'selector-max-universal': importLazy('./selector-max-universal'),\n\t'selector-nested-pattern': importLazy('./selector-nested-pattern'),\n\t'selector-no-qualifying-type': importLazy('./selector-no-qualifying-type'),\n\t'selector-no-vendor-prefix': importLazy('./selector-no-vendor-prefix'),\n\t'selector-not-notation': importLazy('./selector-not-notation'),\n\t'selector-pseudo-class-allowed-list': importLazy('./selector-pseudo-class-allowed-list'),\n\t'selector-pseudo-class-case': importLazy('./selector-pseudo-class-case'),\n\t'selector-pseudo-class-disallowed-list': importLazy('./selector-pseudo-class-disallowed-list'),\n\t'selector-pseudo-class-no-unknown': importLazy('./selector-pseudo-class-no-unknown'),\n\t'selector-pseudo-class-parentheses-space-inside': importLazy(\n\t\t'./selector-pseudo-class-parentheses-space-inside',\n\t),\n\t'selector-pseudo-element-allowed-list': importLazy('./selector-pseudo-element-allowed-list'),\n\t'selector-pseudo-element-case': importLazy('./selector-pseudo-element-case'),\n\t'selector-pseudo-element-colon-notation': importLazy('./selector-pseudo-element-colon-notation'),\n\t'selector-pseudo-element-disallowed-list': importLazy(\n\t\t'./selector-pseudo-element-disallowed-list',\n\t),\n\t'selector-pseudo-element-no-unknown': importLazy('./selector-pseudo-element-no-unknown'),\n\t'selector-type-case': importLazy('./selector-type-case'),\n\t'selector-type-no-unknown': importLazy('./selector-type-no-unknown'),\n\t'shorthand-property-no-redundant-values': importLazy('./shorthand-property-no-redundant-values'),\n\t'string-no-newline': importLazy('./string-no-newline'),\n\t'string-quotes': importLazy('./string-quotes'),\n\t'time-min-milliseconds': importLazy('./time-min-milliseconds'),\n\t'unicode-bom': importLazy('./unicode-bom'),\n\t'unit-allowed-list': importLazy('./unit-allowed-list'),\n\t'unit-case': importLazy('./unit-case'),\n\t'unit-disallowed-list': importLazy('./unit-disallowed-list'),\n\t'unit-no-unknown': importLazy('./unit-no-unknown'),\n\t'value-keyword-case': importLazy('./value-keyword-case'),\n\t'value-list-comma-newline-after': importLazy('./value-list-comma-newline-after'),\n\t'value-list-comma-newline-before': importLazy('./value-list-comma-newline-before'),\n\t'value-list-comma-space-after': importLazy('./value-list-comma-space-after'),\n\t'value-list-comma-space-before': importLazy('./value-list-comma-space-before'),\n\t'value-list-max-empty-lines': importLazy('./value-list-max-empty-lines'),\n\t'value-no-vendor-prefix': importLazy('./value-no-vendor-prefix'),\n\tindentation: importLazy('./indentation'),\n};\n\nmodule.exports = rules;\n","'use strict';\n\nconst rules = require('./rules');\nconst { isPlainObject } = require('./utils/validateTypes');\n\n// Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @template T\n * @template {Object} O\n * @param {import('stylelint').ConfigRuleSettings<T, O>} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the rules themselves, which will not work for plugins\n * @return {[T] | [T, O] | null}\n */\nmodule.exports = function normalizeRuleSettings(\n\trawSettings,\n\truleName,\n\t// If primaryOptionArray is not provided, we try to get it from the\n\t// rules themselves, which will not work for plugins\n\tprimaryOptionArray,\n) {\n\tif (rawSettings === null || rawSettings === undefined) {\n\t\treturn null;\n\t}\n\n\tif (!Array.isArray(rawSettings)) {\n\t\treturn [rawSettings];\n\t}\n\t// Everything below is an array ...\n\n\tif (rawSettings.length > 0 && (rawSettings[0] === null || rawSettings[0] === undefined)) {\n\t\treturn null;\n\t}\n\n\tif (primaryOptionArray === undefined) {\n\t\tconst rule = rules[ruleName];\n\n\t\tif (rule && 'primaryOptionArray' in rule) {\n\t\t\tprimaryOptionArray = rule.primaryOptionArray;\n\t\t}\n\t}\n\n\tif (!primaryOptionArray) {\n\t\treturn rawSettings;\n\t}\n\t// Everything below is a rule that CAN have an array for a primary option ...\n\t// (they might also have something else, e.g. rule-properties-order can\n\t// have the string \"alphabetical\")\n\n\tif (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n\t\treturn rawSettings;\n\t}\n\n\tif (rawSettings.length === 2 && !isPlainObject(rawSettings[0]) && isPlainObject(rawSettings[1])) {\n\t\treturn rawSettings;\n\t}\n\n\t// `T` must be an array type, but TSC thinks it's probably invalid to\n\t// cast `[T]` to `T` so we cast through `any` first.\n\treturn [/** @type {T} */ (/** @type {any} */ (rawSettings))];\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst globalModules = require('global-modules');\nconst resolveFrom = require('resolve-from');\n\n/**\n * @param {string} basedir\n * @param {string} lookup\n * @param {string} [cwd]\n * @return {string}\n */\nmodule.exports = function getModulePath(basedir, lookup, cwd = process.cwd()) {\n\t// 1. Try to resolve from the provided directory\n\t// 2. Try to resolve from `cwd` or `process.cwd()`\n\t// 3. Try to resolve from global `node_modules` directory\n\tlet path = resolveFrom.silent(basedir, lookup);\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(cwd, lookup);\n\t}\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(globalModules, lookup);\n\t}\n\n\tif (!path) {\n\t\tthrow configurationError(`Could not find \"${lookup}\". Do you need a \\`configBasedir\\`?`);\n\t}\n\n\treturn path;\n};\n","'use strict';\n\nvar Path = require('path');\nvar slice = Array.prototype.slice;\n\nfunction join(/* globs */) {\n\tvar args;\n\n\targs = slice.call(arguments, 0);\n\treturn args.reduce(function (result, globs) {\n\t\treturn _apply(result, function (path) {\n\t\t\treturn _apply(globs, function (glob) {\n\t\t\t\treturn _join(path, glob);\n\t\t\t});\n\t\t});\n\t}, '');\n}\n\nfunction _apply(values, fn) {\n\tif (Array.isArray(values)) {\n\t\treturn values.reduce(function (result, value) {\n\t\t\treturn result.concat(fn(value));\n\t\t}, []);\n\t}\n\treturn fn(values);\n}\n\nfunction _join(path, glob) {\n\tvar negative, positive;\n\n\tif (glob[0] === '!') {\n\t\tpositive = glob.substr(1);\n\t\tif (path[0] === '!') {\n\t\t\tnegative = '';\n\t\t} else {\n\t\t\tnegative = '!';\n\t\t}\n\t\treturn negative + Path.join(path, positive);\n\t}\n\treturn Path.join(path, glob);\n}\n\nmodule.exports = join;\n","'use strict';\n\nconst normalizeRuleSettings = require('./normalizeRuleSettings');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction normalizeAllRuleSettings(config) {\n\tif (!config.rules) return config;\n\n\t/** @type {StylelintConfigRules} */\n\tconst normalizedRules = {};\n\n\tfor (const [ruleName, rawRuleSettings] of Object.entries(config.rules)) {\n\t\tconst rule = rules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (rule) {\n\t\t\tnormalizedRules[ruleName] = normalizeRuleSettings(\n\t\t\t\trawRuleSettings,\n\t\t\t\truleName,\n\t\t\t\trule.primaryOptionArray,\n\t\t\t);\n\t\t} else {\n\t\t\tnormalizedRules[ruleName] = [];\n\t\t}\n\t}\n\n\tconfig.rules = normalizedRules;\n\n\treturn config;\n}\n\nmodule.exports = normalizeAllRuleSettings;\n","'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst micromatch = require('micromatch');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\nasync function augmentConfigBasic(\n\tstylelint,\n\tconfig,\n\tconfigDir,\n\tallowOverrides,\n\trootConfigDir,\n\tfilePath,\n) {\n\tlet augmentedConfig = config;\n\n\tif (allowOverrides) {\n\t\taugmentedConfig = addOptions(stylelint, augmentedConfig);\n\t}\n\n\tif (filePath) {\n\t\taugmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n\t}\n\n\taugmentedConfig = await extendConfig(\n\t\tstylelint,\n\t\taugmentedConfig,\n\t\tconfigDir,\n\t\trootConfigDir,\n\t\tfilePath,\n\t);\n\n\tconst cwd = stylelint._options.cwd;\n\n\treturn absolutizePaths(augmentedConfig, configDir, cwd);\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\nfunction augmentConfigExtended(cwd) {\n\treturn async (cosmiconfigResult) => {\n\t\tif (!cosmiconfigResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\t\tconst { config } = cosmiconfigResult;\n\n\t\tconst augmentedConfig = absolutizePaths(config, configDir, cwd);\n\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t};\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n\tif (!cosmiconfigResult) {\n\t\treturn null;\n\t}\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\tlet augmentedConfig = await augmentConfigBasic(\n\t\tstylelint,\n\t\tconfig,\n\t\tconfigDir,\n\t\ttrue,\n\t\tconfigDir,\n\t\tfilePath,\n\t);\n\n\taugmentedConfig = addPluginFunctions(augmentedConfig);\n\taugmentedConfig = addProcessorFunctions(augmentedConfig);\n\n\tif (!augmentedConfig.rules) {\n\t\tthrow configurationError(\n\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t);\n\t}\n\n\taugmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n\n\treturn {\n\t\tconfig: augmentedConfig,\n\t\tfilepath: cosmiconfigResult.filepath,\n\t};\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir, cwd) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = [config.ignoreFiles].flat().map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = [config.plugins].flat().map((lookup) => getModulePath(configDir, lookup, cwd));\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n\tif (config.extends === undefined) {\n\t\treturn config;\n\t}\n\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\tconst normalizedExtends = [configExtends].flat();\n\n\tlet resultConfig = originalWithoutExtends;\n\n\tfor (const extendLookup of normalizedExtends) {\n\t\tconst extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n\t\tif (extendResult) {\n\t\t\tlet extendResultConfig = extendResult.config;\n\t\t\tconst extendConfigDir = path.dirname(extendResult.filepath || '');\n\n\t\t\textendResultConfig = await augmentConfigBasic(\n\t\t\t\tstylelint,\n\t\t\t\textendResultConfig,\n\t\t\t\textendConfigDir,\n\t\t\t\tfalse,\n\t\t\t\trootConfigDir,\n\t\t\t\tfilePath,\n\t\t\t);\n\n\t\t\tresultConfig = mergeConfigs(resultConfig, extendResultConfig);\n\t\t}\n\t}\n\n\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\t/** @type {{overrides: StylelintConfigOverride[]}} */\n\tconst overridesMerger = {};\n\n\tif (a.overrides || b.overrides) {\n\t\toverridesMerger.overrides = [];\n\n\t\tif (a.overrides) {\n\t\t\toverridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n\t\t}\n\n\t\tif (b.overrides) {\n\t\t\toverridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = {\n\t\t...a,\n\t\t...b,\n\t\t...processorMerger,\n\t\t...pluginMerger,\n\t\t...overridesMerger,\n\t\t...rulesMerger,\n\t};\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) {\n\t\treturn config;\n\t}\n\n\tconst normalizedPlugins = [config.plugins].flat();\n\n\t/** @type {StylelintConfig['pluginFunctions']} */\n\tconst pluginFunctions = {};\n\n\tfor (const pluginLookup of normalizedPlugins) {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = [pluginImport].flat();\n\n\t\tfor (const pluginRuleDefinition of normalizedPluginImport) {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t}\n\t}\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {StylelintCodeProcessor[]} */\n\tconst codeProcessors = [];\n\t/** @type {StylelintResultProcessor[]} */\n\tconst resultProcessors = [];\n\n\tfor (const processorConfig of [config.processors].flat()) {\n\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\tlet initializedProcessor;\n\n\t\tif (processorCache.has(processorKey)) {\n\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t} else {\n\t\t\tconst processorLookup =\n\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\tconst processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\tlet processor = require(processorLookup);\n\n\t\t\tprocessor = processor.default || processor;\n\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t}\n\t}\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n\tlet { overrides, ...config } = fullConfig;\n\n\tif (!overrides) {\n\t\treturn config;\n\t}\n\n\tif (!Array.isArray(overrides)) {\n\t\tthrow new TypeError(\n\t\t\t'The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t);\n\t}\n\n\tfor (const override of overrides) {\n\t\tconst { files, ...configOverrides } = override;\n\n\t\tif (!files) {\n\t\t\tthrow new Error(\n\t\t\t\t'Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t\t);\n\t\t}\n\n\t\tconst filesGlobs = [files]\n\t\t\t.flat()\n\t\t\t.map((glob) => {\n\t\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) {\n\t\t\t\t\treturn glob;\n\t\t\t\t}\n\n\t\t\t\treturn globjoin(rootConfigDir, glob);\n\t\t\t})\n\t\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\t\t.map((s) => normalizePath(s));\n\n\t\tif (micromatch.isMatch(filePath, filesGlobs, { dot: true })) {\n\t\t\tconfig = mergeConfigs(config, configOverrides);\n\t\t}\n\t}\n\n\treturn config;\n}\n\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\nfunction addOptions(stylelint, config) {\n\tconst augmentedConfig = {\n\t\t...config,\n\t};\n\n\tif (stylelint._options.ignoreDisables) {\n\t\taugmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n\t}\n\n\tif (stylelint._options.quiet) {\n\t\taugmentedConfig.quiet = stylelint._options.quiet;\n\t}\n\n\tif (stylelint._options.reportNeedlessDisables) {\n\t\taugmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n\t}\n\n\tif (stylelint._options.reportInvalidScopeDisables) {\n\t\taugmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n\t}\n\n\tif (stylelint._options.reportDescriptionlessDisables) {\n\t\taugmentedConfig.reportDescriptionlessDisables =\n\t\t\tstylelint._options.reportDescriptionlessDisables;\n\t}\n\n\tif (stylelint._options.customSyntax) {\n\t\taugmentedConfig.customSyntax = stylelint._options.customSyntax;\n\t}\n\n\treturn augmentedConfig;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull, applyOverrides };\n","'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = async function createStylelintResult(\n\tstylelint,\n\tpostcssResult,\n\tfilePath,\n\tcssSyntaxError,\n) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\tconst configForFile = await stylelint.getConfigForFile(filePath, filePath);\n\n\tconst config = configForFile === null ? {} : configForFile.config;\n\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\tif (config.resultProcessors) {\n\t\tfor (const resultProcessor of config.resultProcessors) {\n\t\t\t// Result processors might just mutate the result object,\n\t\t\t// or might return a new one\n\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\tif (returned) {\n\t\t\t\tstylelintResult = returned;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function (postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\tconst deprecationMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'deprecation',\n\t\t);\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\tconst invalidOptionMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'invalidOption',\n\t\t);\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'parseError',\n\t\t);\n\n\t\t// Remove deprecation warnings, invalid options, and parse errors from the messages\n\t\tpostcssResult.messages = postcssResult.messages.filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.stylelintType !== 'deprecation' &&\n\t\t\t\tmessage.stylelintType !== 'invalidOption' &&\n\t\t\t\tmessage.stylelintType !== 'parseError',\n\t\t);\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n\t\t\tparseErrors,\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\tendLine: message.endLine,\n\t\t\t\t\tendColumn: message.endColumn,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\tendLine: cssSyntaxError.endLine,\n\t\t\t\t\tendColumn: cssSyntaxError.endColumn,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n","import normalize from \"stylelint/lib/normalizeAllRuleSettings\";\n\nexport default async stylelint => ({\n  config: normalize(stylelint._options.config)\n});\n","let tokenizer = require('postcss/lib/tokenize')\nlet Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n  }\n}\n\nmodule.exports = SafeParser\n","let { Input } = require('postcss')\n\nlet SafeParser = require('./safe-parser')\n\nmodule.exports = function safeParse(css, opts) {\n  let input = new Input(css, opts)\n\n  let parser = new SafeParser(input)\n  parser.parse()\n\n  return parser.root\n}\n","'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\nconst path = require('path');\nconst { default: postcss } = require('postcss');\nconst { promises: fs } = require('fs');\n\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('postcss').Syntax} Syntax */\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\nconst postcssProcessor = postcss();\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\nmodule.exports = async function getPostcssResult(stylelint, options = {}) {\n\tconst cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tif (stylelint._options.syntax) {\n\t\tlet error = 'The \"syntax\" option is no longer available. ';\n\n\t\terror +=\n\t\t\tstylelint._options.syntax === 'css'\n\t\t\t\t? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default'\n\t\t\t\t: `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n\n\t\treturn Promise.reject(new Error(error));\n\t}\n\n\tconst syntax = options.customSyntax\n\t\t? getCustomSyntax(options.customSyntax)\n\t\t: cssSyntax(stylelint, options.filePath);\n\n\tconst postcssOptions = {\n\t\tfrom: options.filePath,\n\t\tsyntax,\n\t};\n\n\t/** @type {string | undefined} */\n\tlet getCode;\n\n\tif (options.code !== undefined) {\n\t\tgetCode = options.code;\n\t} else if (options.filePath) {\n\t\tgetCode = await fs.readFile(options.filePath, 'utf8');\n\t}\n\n\tif (getCode === undefined) {\n\t\treturn Promise.reject(new Error('code or filePath required'));\n\t}\n\n\tif (options.codeProcessors && options.codeProcessors.length) {\n\t\tif (stylelint._options.fix) {\n\t\t\tconsole.warn(\n\t\t\t\t'Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?',\n\t\t\t);\n\t\t\tstylelint._options.fix = false;\n\t\t}\n\n\t\tconst sourceName = options.code ? options.codeFilename : options.filePath;\n\n\t\tfor (const codeProcessor of options.codeProcessors) {\n\t\t\tgetCode = codeProcessor(getCode, sourceName);\n\t\t}\n\t}\n\n\tconst postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n\tif (options.filePath) {\n\t\tstylelint._postcssResultCache.set(options.filePath, postcssResult);\n\t}\n\n\treturn postcssResult;\n};\n\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\nfunction getCustomSyntax(customSyntax) {\n\tlet resolved;\n\n\tif (typeof customSyntax === 'string') {\n\t\ttry {\n\t\t\tresolved = require(customSyntax);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror &&\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.code === 'MODULE_NOT_FOUND' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.message.includes(customSyntax)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/*\n\t\t * PostCSS allows for syntaxes that only contain a parser, however,\n\t\t * it then expects the syntax to be set as the `parse` option.\n\t\t */\n\t\tif (!resolved.parse) {\n\t\t\tresolved = {\n\t\t\t\tparse: resolved,\n\t\t\t\tstringify: postcss.stringify,\n\t\t\t};\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tif (typeof customSyntax === 'object') {\n\t\tif (typeof customSyntax.parse === 'function') {\n\t\t\tresolved = { ...customSyntax };\n\t\t} else {\n\t\t\tthrow new TypeError(\n\t\t\t\t`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`,\n\t\t\t);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tthrow new Error(`Custom syntax must be a string or a Syntax object`);\n}\n\n/** @type {{ [key: string]: string }} */\nconst previouslyInferredExtensions = {\n\thtml: 'postcss-html',\n\tjs: '@stylelint/postcss-css-in-js',\n\tjsx: '@stylelint/postcss-css-in-js',\n\tless: 'postcss-less',\n\tmd: 'postcss-markdown',\n\tsass: 'postcss-sass',\n\tsss: 'sugarss',\n\tscss: 'postcss-scss',\n\tsvelte: 'postcss-html',\n\tts: '@stylelint/postcss-css-in-js',\n\ttsx: '@stylelint/postcss-css-in-js',\n\tvue: 'postcss-html',\n\txml: 'postcss-html',\n\txst: 'postcss-html',\n};\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\nfunction cssSyntax(stylelint, filePath) {\n\tconst fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n\tconst extensions = ['css', 'pcss', 'postcss'];\n\n\tif (previouslyInferredExtensions[fileExtension]) {\n\t\tconsole.warn(\n\t\t\t`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`,\n\t\t);\n\t}\n\n\treturn {\n\t\tparse:\n\t\t\tstylelint._options.fix && extensions.includes(fileExtension)\n\t\t\t\t? require('postcss-safe-parser')\n\t\t\t\t: postcss.parse,\n\t\tstringify: postcss.stringify,\n\t};\n}\n","export default async () => false;\n","'use strict';\n\nconst util = require('util');\n\n/**\n * @param {unknown} error\n * @returns {error is NodeJS.ErrnoException}\n */\nmodule.exports = function isPathNotFoundError(error) {\n\t// @ts-expect-error -- TS2339: Property 'code' does not exist on type 'Error'.\n\treturn util.types.isNativeError(error) && error.code === 'ENOENT';\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\nconst { assert, assertNumber, assertString } = require('./utils/validateTypes');\n\nconst COMMAND_PREFIX = 'stylelint-';\nconst disableCommand = `${COMMAND_PREFIX}disable`;\nconst enableCommand = `${COMMAND_PREFIX}enable`;\nconst disableLineCommand = `${COMMAND_PREFIX}disable-line`;\nconst disableNextLineCommand = `${COMMAND_PREFIX}disable-next-line`;\nconst ALL_RULES = 'all';\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('postcss').Root} PostcssRoot */\n/** @typedef {import('postcss').Document} PostcssDocument */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n\treturn {\n\t\tcomment,\n\t\tstart,\n\t\tend: end || undefined,\n\t\tstrictStart,\n\t\tstrictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n\t\tdescription,\n\t};\n}\n\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\nmodule.exports = function assignDisabledRanges(root, result) {\n\tresult.stylelint = result.stylelint || {\n\t\tdisabledRanges: {},\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t/**\n\t * Most of the functions below work via side effects mutating this object\n\t * @type {DisabledRangeObject & { all: DisabledRange[] }}\n\t */\n\tconst disabledRanges = {\n\t\t[ALL_RULES]: [],\n\t};\n\n\tresult.stylelint.disabledRanges = disabledRanges;\n\n\t// Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n\t// into a single node before passing to `checkComment`.\n\n\t/** @type {PostcssComment?} */\n\tlet inlineEnd;\n\n\troot.walkComments((comment) => {\n\t\tif (inlineEnd) {\n\t\t\t// Ignore comments already processed by grouping with a previous one.\n\t\t\tif (inlineEnd === comment) inlineEnd = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextComment = comment.next();\n\n\t\t// If any of these conditions are not met, do not merge comments.\n\t\tif (\n\t\t\t!(\n\t\t\t\t!isStandardSyntaxComment(comment) &&\n\t\t\t\tisStylelintCommand(comment) &&\n\t\t\t\tnextComment &&\n\t\t\t\tnextComment.type === 'comment' &&\n\t\t\t\t(comment.text.includes('--') || nextComment.text.startsWith('--'))\n\t\t\t)\n\t\t) {\n\t\t\tcheckComment(comment);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastLine = (comment.source && comment.source.end && comment.source.end.line) || 0;\n\t\tconst fullComment = comment.clone();\n\n\t\tlet current = nextComment;\n\n\t\twhile (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n\t\t\tconst currentLine = (current.source && current.source.end && current.source.end.line) || 0;\n\n\t\t\tif (lastLine + 1 !== currentLine) break;\n\n\t\t\tfullComment.text += `\\n${current.text}`;\n\n\t\t\tif (fullComment.source && current.source) {\n\t\t\t\tfullComment.source.end = current.source.end;\n\t\t\t}\n\n\t\t\tinlineEnd = current;\n\t\t\tconst next = current.next();\n\n\t\t\tif (!next || next.type !== 'comment') break;\n\n\t\t\tcurrent = next;\n\t\t\tlastLine = currentLine;\n\t\t}\n\n\t\tcheckComment(fullComment);\n\t});\n\n\treturn result;\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction isStylelintCommand(comment) {\n\t\treturn comment.text.startsWith(disableCommand) || comment.text.startsWith(enableCommand);\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableLineCommand(comment) {\n\t\tif (comment.source && comment.source.start) {\n\t\t\tconst line = comment.source.start.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableNextLineCommand(comment) {\n\t\tif (comment.source && comment.source.end) {\n\t\t\tconst line = comment.source.end.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableNextLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line + 1, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {string|undefined} description\n\t */\n\tfunction disableLine(comment, line, ruleName, description) {\n\t\tif (ruleIsDisabled(ALL_RULES)) {\n\t\t\tthrow comment.error('All rules have already been disabled', {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\n\t\tif (ruleName === ALL_RULES) {\n\t\t\tfor (const disabledRuleName of Object.keys(disabledRanges)) {\n\t\t\t\tif (ruleIsDisabled(disabledRuleName)) continue;\n\n\t\t\t\tconst strict = disabledRuleName === ALL_RULES;\n\n\t\t\t\tstartDisabledRange(comment, line, disabledRuleName, strict, description);\n\t\t\t\tendDisabledRange(line, disabledRuleName, strict);\n\t\t\t}\n\t\t} else {\n\t\t\tif (ruleIsDisabled(ruleName)) {\n\t\t\t\tthrow comment.error(`\"${ruleName}\" has already been disabled`, {\n\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstartDisabledRange(comment, line, ruleName, true, description);\n\t\t\tendDisabledRange(line, ruleName, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableCommand(comment) {\n\t\tconst description = getDescription(comment.text);\n\n\t\tfor (const ruleToDisable of getCommandRules(disableCommand, comment.text)) {\n\t\t\tconst isAllRules = ruleToDisable === ALL_RULES;\n\n\t\t\tif (ruleIsDisabled(ruleToDisable)) {\n\t\t\t\tthrow comment.error(\n\t\t\t\t\tisAllRules\n\t\t\t\t\t\t? 'All rules have already been disabled'\n\t\t\t\t\t\t: `\"${ruleToDisable}\" has already been disabled`,\n\t\t\t\t\t{\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (comment.source && comment.source.start) {\n\t\t\t\tconst line = comment.source.start.line;\n\n\t\t\t\tif (isAllRules) {\n\t\t\t\t\tfor (const ruleName of Object.keys(disabledRanges)) {\n\t\t\t\t\t\tstartDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartDisabledRange(comment, line, ruleToDisable, true, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processEnableCommand(comment) {\n\t\tfor (const ruleToEnable of getCommandRules(enableCommand, comment.text)) {\n\t\t\t// need fallback if endLine will be undefined\n\t\t\tconst endLine = comment.source && comment.source.end && comment.source.end.line;\n\n\t\t\tassertNumber(endLine);\n\n\t\t\tif (ruleToEnable === ALL_RULES) {\n\t\t\t\tif (\n\t\t\t\t\tObject.values(disabledRanges).every((ranges) => {\n\t\t\t\t\t\tif (ranges.length === 0) return true;\n\n\t\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\t\treturn lastRange && typeof lastRange.end === 'number';\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tthrow comment.error('No rules have been disabled', {\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\tif (!lastRange || !lastRange.end) {\n\t\t\t\t\t\tendDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n\t\t\t\t// Get a starting point from the where all rules were disabled\n\t\t\t\tdisabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(\n\t\t\t\t\t({ start, end, description }) =>\n\t\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t\t);\n\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ruleToEnable)) {\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction checkComment(comment) {\n\t\tconst text = comment.text;\n\n\t\t// Ignore comments that are not relevant commands\n\n\t\tif (text.indexOf(COMMAND_PREFIX) !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (text.startsWith(disableLineCommand)) {\n\t\t\tprocessDisableLineCommand(comment);\n\t\t} else if (text.startsWith(disableNextLineCommand)) {\n\t\t\tprocessDisableNextLineCommand(comment);\n\t\t} else if (text.startsWith(disableCommand)) {\n\t\t\tprocessDisableCommand(comment);\n\t\t} else if (text.startsWith(enableCommand)) {\n\t\t\tprocessEnableCommand(comment);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} command\n\t * @param {string} fullText\n\t * @returns {string[]}\n\t */\n\tfunction getCommandRules(command, fullText) {\n\t\t// Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n\t\tconst splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n\n\t\tassertString(splitted);\n\t\tconst rules = splitted\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.filter(Boolean)\n\t\t\t.map((r) => r.trim());\n\n\t\tif (rules.length === 0) {\n\t\t\treturn [ALL_RULES];\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * @param {string} fullText\n\t * @returns {string|undefined}\n\t */\n\tfunction getDescription(fullText) {\n\t\tconst descriptionStart = fullText.indexOf('--');\n\n\t\tif (descriptionStart === -1) return;\n\n\t\treturn fullText.slice(descriptionStart + 2).trim();\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t * @param {string|undefined} description\n\t */\n\tfunction startDisabledRange(comment, line, ruleName, strict, description) {\n\t\tconst rangeObj = createDisableRange(comment, line, strict, description);\n\n\t\tensureRuleRanges(ruleName);\n\n\t\tconst range = disabledRanges[ruleName];\n\n\t\tassert(range);\n\t\trange.push(rangeObj);\n\t}\n\n\t/**\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t */\n\tfunction endDisabledRange(line, ruleName, strict) {\n\t\tconst ranges = disabledRanges[ruleName];\n\t\tconst lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n\t\tif (!lastRangeForRule) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add an `end` prop to the last range of that rule\n\t\tlastRangeForRule.end = line;\n\t\tlastRangeForRule.strictEnd = strict;\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t */\n\tfunction ensureRuleRanges(ruleName) {\n\t\tif (!disabledRanges[ruleName]) {\n\t\t\tdisabledRanges[ruleName] = disabledRanges[ALL_RULES].map(\n\t\t\t\t({ comment, start, end, description }) =>\n\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t * @returns {boolean}\n\t */\n\tfunction ruleIsDisabled(ruleName) {\n\t\tconst ranges = disabledRanges[ruleName];\n\n\t\tif (!ranges) return false;\n\n\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\tif (!lastRange) return false;\n\n\t\tif (!lastRange.end) return true;\n\n\t\treturn false;\n\t}\n};\n","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = Array.from({ length: MAX_LEVENSHTEIN_DISTANCE });\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tfor (const existRuleName of Object.keys(rules)) {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t}\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (const [i, suggestion] of suggestions.entries()) {\n\t\tif (suggestion.length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestion);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t});\n};\n","'use strict';\n\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\nconst lintPostcssResult = require('./lintPostcssResult');\nconst path = require('path');\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = async function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst isIgnored = await stylelint.isPathIgnored(inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) return false;\n\n\t\tthrow err;\n\t});\n\n\tif (isIgnored) {\n\t\treturn options.existingPostcssResult\n\t\t\t? Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t  })\n\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t}\n\n\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\tconst cwd = stylelint._options.cwd;\n\n\tconst configForFile = await stylelint\n\t\t.getConfigForFile(configSearchPath, inputFilePath)\n\t\t.catch((err) => {\n\t\t\tif (isCodeNotFile && isPathNotFoundError(err)) return stylelint.getConfigForFile(cwd);\n\n\t\t\tthrow err;\n\t\t});\n\n\tif (!configForFile) {\n\t\treturn Promise.reject(new Error('Config file not found'));\n\t}\n\n\tconst config = configForFile.config;\n\tconst existingPostcssResult = options.existingPostcssResult;\n\n\t/** @type {StylelintPostcssResult} */\n\tconst stylelintResult = {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t};\n\n\tconst postcssResult =\n\t\texistingPostcssResult ||\n\t\t(await stylelint._getPostcssResult({\n\t\t\tcode: options.code,\n\t\t\tcodeFilename: options.codeFilename,\n\t\t\tfilePath: inputFilePath,\n\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\tcustomSyntax: config.customSyntax,\n\t\t}));\n\n\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\tstylelint: stylelintResult,\n\t});\n\n\tawait lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n\n\treturn stylelintPostcssResult;\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n","'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.ruleMetadata = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string | undefined} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (\n\t\tpostcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]\n\t);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rulesOrder = Object.keys(rules);\n\tconst ruleNames = config.rules\n\t\t? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b))\n\t\t: [];\n\n\tfor (const ruleName of ruleNames) {\n\t\tconst ruleFunction =\n\t\t\trules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ruleSettings = config.rules && config.rules[ruleName];\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\t\t// disableFix in secondary option\n\t\tconst disableFix = (secondaryOptions && secondaryOptions.disableFix === true) || false;\n\n\t\tif (disableFix) {\n\t\t\tpostcssResult.stylelint.ruleDisableFix = true;\n\t\t}\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] =\n\t\t\t(secondaryOptions && secondaryOptions.severity) || defaultSeverity;\n\t\tpostcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n\t\tpostcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\t!disableFix &&\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n","export const EOL = \"\\n\";\nexport const release = () => \"\";\n","'use strict';\n\nconst augmentConfig = require('./augmentConfig');\nconst createStylelintResult = require('./createStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst lintSource = require('./lintSource');\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @param {import('stylelint').LinterOptions} options\n * @returns {StylelintInternalApi}\n */\nfunction createStylelint(options = {}) {\n\tconst cwd = options.cwd || process.cwd();\n\n\t/** @type {StylelintInternalApi} */\n\t// @ts-expect-error -- TS2740: Type '{ _options: LinterOptions; }' is missing the following properties from type 'InternalApi'\n\tconst stylelint = { _options: { ...options, cwd } };\n\n\tstylelint._extendExplorer = cosmiconfig('', {\n\t\ttransform: augmentConfig.augmentConfigExtended(cwd),\n\t\tstopDir: STOP_DIR,\n\t});\n\n\tstylelint._specifiedConfigCache = new Map();\n\tstylelint._postcssResultCache = new Map();\n\tstylelint._createStylelintResult = createStylelintResult.bind(null, stylelint);\n\tstylelint._getPostcssResult = getPostcssResult.bind(null, stylelint);\n\tstylelint._lintSource = lintSource.bind(null, stylelint);\n\n\tstylelint.getConfigForFile = getConfigForFile.bind(null, stylelint);\n\tstylelint.isPathIgnored = isPathIgnored.bind(null, stylelint);\n\n\treturn stylelint;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').createLinter} */ (createStylelint);\n","'use strict';\n\n/**\n * Omit any properties starting with `_`, which are fake-private\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function jsonFormatter(results) {\n\tconst cleanedResults = results.map((result) =>\n\t\tObject.entries(result)\n\t\t\t.filter(([key]) => !key.startsWith('_'))\n\t\t\t.reduce((/** @type {{ [key: string]: any }} */ obj, [key, value]) => {\n\t\t\t\tobj[key] = value;\n\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t);\n\n\treturn JSON.stringify(cleanedResults);\n};\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n","'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n","/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n\tif (Number.isNaN(codePoint)) {\n\t\treturn false;\n\t}\n\n\t// Code points are derived from:\n\t// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\tif (\n\t\tcodePoint >= 0x1100 && (\n\t\t\tcodePoint <= 0x115F || // Hangul Jamo\n\t\t\tcodePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n\t\t\tcodePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n\t\t\t// CJK Radicals Supplement .. Enclosed CJK Letters and Months\n\t\t\t(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||\n\t\t\t// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n\t\t\t(0x3250 <= codePoint && codePoint <= 0x4DBF) ||\n\t\t\t// CJK Unified Ideographs .. Yi Radicals\n\t\t\t(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||\n\t\t\t// Hangul Jamo Extended-A\n\t\t\t(0xA960 <= codePoint && codePoint <= 0xA97C) ||\n\t\t\t// Hangul Syllables\n\t\t\t(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||\n\t\t\t// CJK Compatibility Ideographs\n\t\t\t(0xF900 <= codePoint && codePoint <= 0xFAFF) ||\n\t\t\t// Vertical Forms\n\t\t\t(0xFE10 <= codePoint && codePoint <= 0xFE19) ||\n\t\t\t// CJK Compatibility Forms .. Small Form Variants\n\t\t\t(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||\n\t\t\t// Halfwidth and Fullwidth Forms\n\t\t\t(0xFF01 <= codePoint && codePoint <= 0xFF60) ||\n\t\t\t(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||\n\t\t\t// Kana Supplement\n\t\t\t(0x1B000 <= codePoint && codePoint <= 0x1B001) ||\n\t\t\t// Enclosed Ideographic Supplement\n\t\t\t(0x1F200 <= codePoint && codePoint <= 0x1F251) ||\n\t\t\t// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n\t\t\t(0x20000 <= codePoint && codePoint <= 0x3FFFD)\n\t\t)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n","'use strict';\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\n\nconst stringWidth = string => {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tlet width = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst code = string.codePointAt(i);\n\n\t\t// Ignore control characters\n\t\tif (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (code >= 0x300 && code <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Surrogates\n\t\tif (code > 0xFFFF) {\n\t\t\ti++;\n\t\t}\n\n\t\twidth += isFullwidthCodePoint(code) ? 2 : 1;\n\t}\n\n\treturn width;\n};\n\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n","\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","'use strict';\nconst supportsColor = require('supports-color');\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n\tif (/^\\d{3,4}$/.test(versionString)) {\n\t\t// Env var doesn't always use dots. example: 4601 => 46.1.0\n\t\tconst m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n\t\treturn {\n\t\t\tmajor: 0,\n\t\t\tminor: parseInt(m[1], 10),\n\t\t\tpatch: parseInt(m[2], 10)\n\t\t};\n\t}\n\n\tconst versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n\treturn {\n\t\tmajor: versions[0],\n\t\tminor: versions[1],\n\t\tpatch: versions[2]\n\t};\n}\n\nfunction supportsHyperlink(stream) {\n\tconst {env} = process;\n\n\tif ('FORCE_HYPERLINK' in env) {\n\t\treturn !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n\t}\n\n\tif (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n\t\treturn true;\n\t}\n\n\t// If they specify no colors, they probably don't want hyperlinks.\n\tif (!supportsColor.supportsColor(stream)) {\n\t\treturn false;\n\t}\n\n\tif (stream && !stream.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn false;\n\t}\n\n\tif ('NETLIFY' in env) {\n\t\treturn true;\n\t}\n\n\tif ('CI' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\tif (version.major === 3) {\n\t\t\t\t\treturn version.minor >= 1;\n\t\t\t\t}\n\n\t\t\t\treturn version.major > 3;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif ('VTE_VERSION' in env) {\n\t\t// 0.50.0 was supposed to support hyperlinks, but throws a segfault\n\t\tif (env.VTE_VERSION === '0.50.0') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst version = parseVersion(env.VTE_VERSION);\n\t\treturn version.major > 0 || version.minor >= 50;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tsupportsHyperlink,\n\tstdout: supportsHyperlink(process.stdout),\n\tstderr: supportsHyperlink(process.stderr)\n};\n","export const isatty = () => false;\n","const supportsHyperlinks = require('supports-hyperlinks');\n\n// ANSI escapes\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\n\n/**\n * @see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n *\n * @param {string} text\n * @param {string} url\n * @returns {string}\n */\nmodule.exports = function terminalLink(text, url) {\n\tif (supportsHyperlinks.stdout) {\n\t\treturn [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n\t}\n\n\treturn text;\n};\n","'use strict';\n\nconst path = require('path');\nconst stringWidth = require('string-width');\nconst table = require('table');\nconst { yellow, dim, underline, blue, red, green } = require('picocolors');\n\nconst { assertNumber } = require('../utils/validateTypes');\nconst terminalLink = require('./terminalLink');\n\nconst MARGIN_WIDTHS = 9;\n\n/**\n * @param {string} s\n * @returns {string}\n */\nfunction nope(s) {\n\treturn s;\n}\n\nconst levelColors = {\n\tinfo: blue,\n\twarning: yellow,\n\terror: red,\n\tsuccess: nope,\n};\n\nconst symbols = {\n\tinfo: blue('ℹ'),\n\twarning: yellow('⚠'),\n\terror: red('✖'),\n\tsuccess: green('✔'),\n};\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @returns {string}\n */\nfunction deprecationsFormatter(results) {\n\tconst allDeprecationWarnings = results.flatMap((result) => result.deprecations);\n\n\tif (allDeprecationWarnings.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst seenText = new Set();\n\n\treturn allDeprecationWarnings.reduce((output, warning) => {\n\t\tif (seenText.has(warning.text)) return output;\n\n\t\tseenText.add(warning.text);\n\n\t\toutput += yellow('Deprecation Warning: ');\n\t\toutput += warning.text;\n\n\t\tif (warning.reference) {\n\t\t\toutput += dim(' See: ');\n\t\t\toutput += dim(underline(warning.reference));\n\t\t}\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @return {string}\n */\nfunction invalidOptionsFormatter(results) {\n\tconst allInvalidOptionWarnings = results.flatMap((result) =>\n\t\tresult.invalidOptionWarnings.map((warning) => warning.text),\n\t);\n\tconst uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n\n\treturn uniqueInvalidOptionWarnings.reduce((output, warning) => {\n\t\toutput += red('Invalid Option: ');\n\t\toutput += warning;\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {string} fromValue\n * @param {string} cwd\n * @return {string}\n */\nfunction logFrom(fromValue, cwd) {\n\tif (fromValue.startsWith('<')) {\n\t\treturn underline(fromValue);\n\t}\n\n\tconst filePath = path.relative(cwd, fromValue).split(path.sep).join('/');\n\n\treturn terminalLink(filePath, `file://${fromValue}`);\n}\n\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\nfunction getMessageWidth(columnWidths) {\n\tconst width = columnWidths[3];\n\n\tassertNumber(width);\n\n\tif (!process.stdout.isTTY) {\n\t\treturn width;\n\t}\n\n\tconst availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n\tconst fullWidth = Object.values(columnWidths).reduce((a, b) => a + b);\n\n\t// If there is no reason to wrap the text, we won't align the last column to the right\n\tif (availableWidth > fullWidth + MARGIN_WIDTHS) {\n\t\treturn width;\n\t}\n\n\treturn availableWidth - (fullWidth - width + MARGIN_WIDTHS);\n}\n\n/**\n * @param {import('stylelint').Warning[]} messages\n * @param {string} source\n * @param {string} cwd\n * @return {string}\n */\nfunction formatter(messages, source, cwd) {\n\tif (!messages.length) return '';\n\n\tconst orderedMessages = [...messages].sort((a, b) => {\n\t\t// positionless first\n\t\tif (!a.line && b.line) return -1;\n\n\t\t// positionless first\n\t\tif (a.line && !b.line) return 1;\n\n\t\tif (a.line < b.line) return -1;\n\n\t\tif (a.line > b.line) return 1;\n\n\t\tif (a.column < b.column) return -1;\n\n\t\tif (a.column > b.column) return 1;\n\n\t\treturn 0;\n\t});\n\n\t/**\n\t * Create a list of column widths, needed to calculate\n\t * the size of the message column and if needed wrap it.\n\t * @type {{[k: string]: number}}\n\t */\n\tconst columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 };\n\n\t/**\n\t * @param {[string, string, string, string, string]} columns\n\t * @return {[string, string, string, string, string]}\n\t */\n\tfunction calculateWidths(columns) {\n\t\tfor (const [key, value] of Object.entries(columns)) {\n\t\t\tconst normalisedValue = value ? value.toString() : value;\n\t\t\tconst width = columnWidths[key];\n\n\t\t\tassertNumber(width);\n\t\t\tcolumnWidths[key] = Math.max(width, stringWidth(normalisedValue));\n\t\t}\n\n\t\treturn columns;\n\t}\n\n\tlet output = '\\n';\n\n\tif (source) {\n\t\toutput += `${logFrom(source, cwd)}\\n`;\n\t}\n\n\t/**\n\t * @param {import('stylelint').Warning} message\n\t * @return {string}\n\t */\n\tfunction formatMessageText(message) {\n\t\tlet result = message.text;\n\n\t\tresult = result\n\t\t\t// Remove all control characters (newline, tab and etc)\n\t\t\t.replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n\t\t\t.replace(/\\.$/, '');\n\n\t\tconst ruleString = ` (${message.rule})`;\n\n\t\tif (result.endsWith(ruleString)) {\n\t\t\tresult = result.slice(0, result.lastIndexOf(ruleString));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tconst cleanedMessages = orderedMessages.map((message) => {\n\t\tconst { line, column, severity } = message;\n\t\t/**\n\t\t * @type {[string, string, string, string, string]}\n\t\t */\n\t\tconst row = [\n\t\t\tline ? line.toString() : '',\n\t\t\tcolumn ? column.toString() : '',\n\t\t\tsymbols[severity] ? levelColors[severity](symbols[severity]) : severity,\n\t\t\tformatMessageText(message),\n\t\t\tdim(message.rule || ''),\n\t\t];\n\n\t\tcalculateWidths(row);\n\n\t\treturn row;\n\t});\n\n\toutput += table\n\t\t.table(cleanedMessages, {\n\t\t\tborder: table.getBorderCharacters('void'),\n\t\t\tcolumns: {\n\t\t\t\t0: { alignment: 'right', width: columnWidths[0], paddingRight: 0 },\n\t\t\t\t1: { alignment: 'left', width: columnWidths[1] },\n\t\t\t\t2: { alignment: 'center', width: columnWidths[2] },\n\t\t\t\t3: {\n\t\t\t\t\talignment: 'left',\n\t\t\t\t\twidth: getMessageWidth(columnWidths),\n\t\t\t\t\twrapWord: getMessageWidth(columnWidths) > 1,\n\t\t\t\t},\n\t\t\t\t4: { alignment: 'left', width: columnWidths[4], paddingRight: 0 },\n\t\t\t},\n\t\t\tdrawHorizontalLine: () => false,\n\t\t})\n\t\t.split('\\n')\n\t\t.map(\n\t\t\t/**\n\t\t\t * @param {string} el\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\t(el) => el.replace(/(\\d+)\\s+(\\d+)/, (_m, p1, p2) => dim(`${p1}:${p2}`)),\n\t\t)\n\t\t.join('\\n');\n\n\treturn output;\n}\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function (results, returnValue) {\n\tlet output = invalidOptionsFormatter(results);\n\n\toutput += deprecationsFormatter(results);\n\n\toutput = results.reduce((accum, result) => {\n\t\t// Treat parseErrors as warnings\n\t\tif (result.parseErrors) {\n\t\t\tfor (const error of result.parseErrors)\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\tline: error.line,\n\t\t\t\t\tcolumn: error.column,\n\t\t\t\t\trule: error.stylelintType,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${error.text} (${error.stylelintType})`,\n\t\t\t\t});\n\t\t}\n\n\t\taccum += formatter(\n\t\t\tresult.warnings,\n\t\t\tresult.source || '',\n\t\t\t(returnValue && returnValue.cwd) || process.cwd(),\n\t\t);\n\n\t\treturn accum;\n\t}, output);\n\n\t// Ensure consistent padding\n\toutput = output.trim();\n\n\tif (output !== '') {\n\t\toutput = `\\n${output}\\n\\n`;\n\t}\n\n\treturn output;\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst unixFormatter = (results) => {\n\tconst lines = results.flatMap((result) =>\n\t\tresult.warnings.map(\n\t\t\t(warning) =>\n\t\t\t\t`${result.source}:${warning.line}:${warning.column}: ` +\n\t\t\t\t`${warning.text} [${warning.severity}]\\n`,\n\t\t),\n\t);\n\tconst total = lines.length;\n\tlet output = lines.join('');\n\n\tif (total > 0) {\n\t\toutput += `\\n${total} problem${total !== 1 ? 's' : ''}\\n`;\n\t}\n\n\treturn output;\n};\n\nmodule.exports = unixFormatter;\n","'use strict';\n\nconst stringFormatter = require('./stringFormatter');\nconst { underline, red, yellow, dim, green } = require('picocolors');\nconst terminalLink = require('./terminalLink');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} LintResult */\n/** @typedef {import('stylelint').Warning} Warning */\n\n/**\n * @type {Formatter}\n */\nmodule.exports = function (results, returnValue) {\n\tlet output = stringFormatter(results, returnValue);\n\n\tif (output === '') {\n\t\toutput = '\\n';\n\t}\n\n\tconst sourceWord = results.length > 1 ? 'sources' : 'source';\n\tconst ignoredCount = results.filter((result) => result.ignored).length;\n\tconst checkedDisplay = ignoredCount\n\t\t? `${results.length - ignoredCount} of ${results.length}`\n\t\t: results.length;\n\n\toutput += underline(`${checkedDisplay} ${sourceWord} checked\\n`);\n\n\tfor (const result of results) {\n\t\tlet formatting = green;\n\n\t\tif (result.errored) {\n\t\t\tformatting = red;\n\t\t} else if (result.warnings.length) {\n\t\t\tformatting = yellow;\n\t\t} else if (result.ignored) {\n\t\t\tformatting = dim;\n\t\t}\n\n\t\tlet sourceText = fileLink(result.source);\n\n\t\tif (result.ignored) {\n\t\t\tsourceText += ' (ignored)';\n\t\t}\n\n\t\toutput += formatting(` ${sourceText}\\n`);\n\t}\n\n\tconst warnings = results.flatMap((r) => r.warnings);\n\tconst warningsBySeverity = groupBy(warnings, (w) => w.severity);\n\tconst problemWord = warnings.length === 1 ? 'problem' : 'problems';\n\n\toutput += underline(`\\n${warnings.length} ${problemWord} found\\n`);\n\n\tconst metadata = ruleMetadata(results);\n\n\tfor (const [severityLevel, warningList] of Object.entries(warningsBySeverity)) {\n\t\tconst warningsByRule = groupBy(warningList, (w) => w.rule);\n\n\t\toutput += ` severity level \"${severityLevel}\": ${warningList.length}\\n`;\n\n\t\tfor (const [rule, list] of Object.entries(warningsByRule)) {\n\t\t\toutput += dim(`  ${ruleLink(rule, metadata[rule])}: ${list.length}\\n`);\n\t\t}\n\t}\n\n\treturn `${output}\\n`;\n};\n\n/**\n * @param {Warning[]} array\n * @param {(w: Warning) => string} keyFn\n * @returns {Record<string, Warning[]>}\n */\nfunction groupBy(array, keyFn) {\n\t/** @type {Record<string, Warning[]>} */\n\tconst result = {};\n\n\tfor (const item of array) {\n\t\tconst key = keyFn(item);\n\t\tlet warnings = result[key];\n\n\t\tif (warnings === undefined) {\n\t\t\tresult[key] = warnings = [];\n\t\t}\n\n\t\twarnings.push(item);\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {string | undefined} source\n * @returns {string}\n */\nfunction fileLink(source) {\n\tif (!source || source.startsWith('<')) {\n\t\treturn `${source}`;\n\t}\n\n\treturn terminalLink(source, `file://${source}`);\n}\n\n/**\n * @param {LintResult[]} results\n * @returns {Record<string, { url?: string }>}\n */\nfunction ruleMetadata(results) {\n\tconst firstResult = results[0];\n\n\treturn (\n\t\t(firstResult &&\n\t\t\tfirstResult._postcssResult &&\n\t\t\tfirstResult._postcssResult.stylelint &&\n\t\t\tfirstResult._postcssResult.stylelint.ruleMetadata) ||\n\t\t{}\n\t);\n}\n\n/**\n * @param {string} rule\n * @param {{ url?: string } | undefined} metadata\n * @returns {string}\n */\nfunction ruleLink(rule, metadata) {\n\tif (metadata && metadata.url) {\n\t\treturn terminalLink(rule, metadata.url);\n\t}\n\n\treturn rule;\n}\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst tapFormatter = (results) => {\n\tconst lines = [`TAP version 13\\n1..${results.length}`];\n\n\tfor (const [index, result] of results.entries()) {\n\t\tlines.push(\n\t\t\t`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${\n\t\t\t\tresult.source\n\t\t\t}`,\n\t\t);\n\n\t\tif (result.warnings.length > 0) {\n\t\t\tlines.push('---', 'messages:');\n\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlines.push(\n\t\t\t\t\t` - message: \"${warning.text}\"`,\n\t\t\t\t\t`   severity: ${warning.severity}`,\n\t\t\t\t\t`   data:`,\n\t\t\t\t\t`     line: ${warning.line}`,\n\t\t\t\t\t`     column: ${warning.column}`,\n\t\t\t\t\t`     endLine: ${warning.endLine}`,\n\t\t\t\t\t`     endColumn: ${warning.endColumn}`,\n\t\t\t\t\t`     ruleId: ${warning.rule}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlines.push('---');\n\t\t}\n\t}\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n};\n\nmodule.exports = tapFormatter;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').formatters} */\nconst formatters = {\n\tcompact: importLazy('./compactFormatter'),\n\tjson: importLazy('./jsonFormatter'),\n\tstring: importLazy('./stringFormatter'),\n\ttap: importLazy('./tapFormatter'),\n\tunix: importLazy('./unixFormatter'),\n\tverbose: importLazy('./verboseFormatter'),\n};\n\nmodule.exports = formatters;\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst formatter = (results) =>\n\tresults\n\t\t.flatMap((result) =>\n\t\t\tresult.warnings.map(\n\t\t\t\t(warning) =>\n\t\t\t\t\t`${result.source}: ` +\n\t\t\t\t\t`line ${warning.line}, ` +\n\t\t\t\t\t`col ${warning.column}, ` +\n\t\t\t\t\t`${warning.severity} - ` +\n\t\t\t\t\t`${warning.text}`,\n\t\t\t),\n\t\t)\n\t\t.join('\\n');\n\nmodule.exports = formatter;\n","'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\nmodule.exports = (options = {}) => {\n\tconst [cwd, tailoredOptions] = isConfig(options)\n\t\t? [process.cwd(), { config: options }]\n\t\t: [options.cwd || process.cwd(), options];\n\tconst stylelint = createStylelint(tailoredOptions);\n\n\treturn {\n\t\tpostcssPlugin: 'stylelint',\n\t\tOnce(root, { result }) {\n\t\t\tlet filePath = root.source && root.source.input.file;\n\n\t\t\tif (filePath && !path.isAbsolute(filePath)) {\n\t\t\t\tfilePath = path.join(cwd, filePath);\n\t\t\t}\n\n\t\t\treturn stylelint._lintSource({\n\t\t\t\tfilePath,\n\t\t\t\texistingPostcssResult: result,\n\t\t\t});\n\t\t},\n\t};\n};\n\nmodule.exports.postcss = true;\n\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\nfunction isConfig(options) {\n\treturn 'rules' in options;\n}\n","/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n","'use strict';\n\nconst murmur = require('imurmurhash');\n\n/**\n * hash the given string\n * @param  {string} str the string to hash\n * @returns {string} the hash\n */\nmodule.exports = function hash(str) {\n\treturn murmur(str).result().toString(36);\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:file-cache');\nconst fileEntryCache = require('file-entry-cache');\nconst getCacheFile = require('./getCacheFile');\nconst path = require('path');\n\nconst DEFAULT_CACHE_LOCATION = './.stylelintcache';\nconst DEFAULT_HASH = '';\n\n/** @typedef {import('file-entry-cache').FileDescriptor[\"meta\"] & { hashOfConfig?: string }} CacheMetadata */\n\n/**\n * @param {string} [cacheLocation]\n * @param {string} [hashOfConfig]\n * @constructor\n */\nclass FileCache {\n\tconstructor(\n\t\tcacheLocation = DEFAULT_CACHE_LOCATION,\n\t\tcwd = process.cwd(),\n\t\thashOfConfig = DEFAULT_HASH,\n\t) {\n\t\tconst cacheFile = path.resolve(getCacheFile(cacheLocation, cwd));\n\n\t\tdebug(`Cache file is created at ${cacheFile}`);\n\t\tthis._fileCache = fileEntryCache.create(cacheFile);\n\t\tthis._hashOfConfig = hashOfConfig;\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t * @return {boolean}\n\t */\n\thasFileChanged(absoluteFilepath) {\n\t\t// Get file descriptor compares current metadata against cached\n\t\t// one and stores the result to \"changed\" prop.w\n\t\tconst descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);\n\t\t/** @type {CacheMetadata} */\n\t\tconst meta = descriptor.meta || {};\n\t\tconst changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig;\n\n\t\tif (!changed) {\n\t\t\tdebug(`Skip linting ${absoluteFilepath}. File hasn't changed.`);\n\t\t}\n\n\t\t// Mutate file descriptor object and store config hash to each file.\n\t\t// Running lint with different config should invalidate the cache.\n\t\tif (meta.hashOfConfig !== this._hashOfConfig) {\n\t\t\tmeta.hashOfConfig = this._hashOfConfig;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\treconcile() {\n\t\tthis._fileCache.reconcile();\n\t}\n\n\tdestroy() {\n\t\tthis._fileCache.destroy();\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t */\n\tremoveEntry(absoluteFilepath) {\n\t\tthis._fileCache.removeEntry(absoluteFilepath);\n\t}\n}\n\nmodule.exports = FileCache;\n","'use strict';\n\nconst fs = require('fs');\nconst hash = require('./hash');\nconst path = require('path');\n\n/**\n * Return the cacheFile to be used by stylelint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be `cacheFile/.cache_hashOfCWD`.\n *\n * If cacheFile points to a file or looks like a file, then it will just use that file.\n *\n * @param {string} cacheFile - The name of file to be used to store the cache\n * @param {string} cwd - Current working directory. Used for tests\n * @returns {string} Resolved path to the cache file\n */\nmodule.exports = function getCacheFile(cacheFile, cwd) {\n\t/*\n\t * Make sure path separators are normalized for environment/os.\n\t * Also, keep trailing path separator if present.\n\t */\n\tcacheFile = path.normalize(cacheFile);\n\n\tconst resolvedCacheFile = path.resolve(cwd, cacheFile);\n\t// If the last character passed is a path separator, we assume is a directory.\n\tconst looksLikeADirectory = cacheFile[cacheFile.length - 1] === path.sep;\n\n\t/**\n\t * Return the default cache file name when provided parameter is a directory.\n\t * @returns {string} - Resolved path to the cacheFile\n\t */\n\tfunction getCacheFileForDirectory() {\n\t\treturn path.join(resolvedCacheFile, `.stylelintcache_${hash(cwd)}`);\n\t}\n\n\tlet fileStats;\n\n\ttry {\n\t\tfileStats = fs.lstatSync(resolvedCacheFile);\n\t} catch {\n\t\tfileStats = null;\n\t}\n\n\tif (looksLikeADirectory || (fileStats && fileStats.isDirectory())) {\n\t\t// Return path to provided directory with generated file name.\n\t\treturn getCacheFileForDirectory();\n\t}\n\n\t// Return normalized path to cache file.\n\treturn resolvedCacheFile;\n};\n","'use strict';\n\nconst { isPathValid } = require('ignore').default;\n\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n\tconst validForIgnore = filePaths.filter(isPathValid);\n\t// Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\tconst notValidForIgnore = new Set(filePaths.filter((p) => !validForIgnore.includes(p)));\n\n\tconst filteredByIgnore = new Set(ignorer.filter(validForIgnore));\n\n\t// Preserving files order, while removing paths which were filtered by `ignore`\n\treturn filePaths.filter((p) => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};\n","'use strict';\n\nclass NoFilesFoundError extends Error {\n\t/**\n\t * @param {string|string[]} fileList\n\t */\n\tconstructor(fileList) {\n\t\tsuper();\n\n\t\tif (typeof fileList === 'string') {\n\t\t\tfileList = [fileList];\n\t\t}\n\n\t\tconst pattern = fileList.filter((i) => !i.startsWith('!')).join(', ');\n\n\t\tthis.message = `No files matching the pattern \"${pattern}\" were found.`;\n\t}\n}\n\nmodule.exports = NoFilesFoundError;\n","'use strict';\n\nclass AllFilesIgnoredError extends Error {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.message = `All input files were ignored because of the ignore pattern. Either change your input, ignore pattern or use \"--allow-empty-input\" to allow no inputs`;\n\t}\n}\n\nmodule.exports = AllFilesIgnoredError;\n","'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\nconst { isRegExp, isString } = require('./utils/validateTypes');\n\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\nmodule.exports = function (result, field) {\n\t// Files with `CssSyntaxError`s don't have `_postcssResult`s.\n\tif (!result) return null;\n\n\tconst stylelintResult = result.stylelint;\n\n\t// Files with linting errors may not have configs associated with them.\n\tif (!stylelintResult.config) return null;\n\n\tconst rawSettings = stylelintResult.config[field];\n\n\t/** @type {boolean} */\n\tlet enabled;\n\t/** @type {DisableOptions} */\n\tlet options;\n\n\tif (Array.isArray(rawSettings)) {\n\t\tenabled = rawSettings[0];\n\t\toptions = rawSettings[1] || {};\n\t} else {\n\t\tenabled = rawSettings || false;\n\t\toptions = {};\n\t}\n\n\tconst validOptions = validateOptions(\n\t\tresult,\n\t\tfield,\n\t\t{\n\t\t\tactual: enabled,\n\t\t\tpossible: [true, false],\n\t\t},\n\t\t{\n\t\t\tactual: options,\n\t\t\tpossible: {\n\t\t\t\texcept: [isString, isRegExp],\n\t\t\t},\n\t\t},\n\t);\n\n\tif (!validOptions) return null;\n\n\t// If the check is disabled with no exceptions, there's no reason to run\n\t// it at all.\n\tif (!enabled && !options.except) return null;\n\n\treturn [\n\t\tenabled,\n\t\t{\n\t\t\texcept: options.except || [],\n\t\t\tseverity: options.severity || stylelintResult.config.defaultSeverity || 'error',\n\t\t},\n\t\tstylelintResult,\n\t];\n};\n","'use strict';\n\n/**\n * If `map` already has the given `key`, returns its value. Otherwise, calls\n * `callback`, adds the result to `map` at `key`, and then returns it.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {() => V} callback\n * @returns {V}\n */\nmodule.exports = function (map, key, callback) {\n\tif (map.has(key)) return /** @type {V} */ (map.get(key));\n\n\tconst value = callback();\n\n\tmap.set(key, value);\n\n\treturn value;\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst putIfAbsent = require('./utils/putIfAbsent');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function needlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst rangeData = stylelintResult.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst disabledWarnings = stylelintResult.disabledWarnings || [];\n\n\t\t// A map from `stylelint-disable` comments to the set of rules that\n\t\t// are usefully disabled by each comment. We track this\n\t\t// comment-by-comment rather than range-by-range because ranges that\n\t\t// disable *all* rules are duplicated for each rule they apply to in\n\t\t// practice.\n\t\t/** @type {Map<PostcssComment, Set<string>>}} */\n\t\tconst usefulDisables = new Map();\n\n\t\tfor (const warning of disabledWarnings) {\n\t\t\tconst rule = warning.rule;\n\t\t\tconst ruleRanges = rangeData[rule];\n\n\t\t\tif (ruleRanges) {\n\t\t\t\tfor (const range of ruleRanges) {\n\t\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const range of rangeData.all || []) {\n\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst allRangeComments = new Set((rangeData.all || []).map((range) => range.comment));\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\t\tconst useful = usefulDisables.get(range.comment) || new Set();\n\n\t\t\t\t// Only emit a warning if this range's comment isn't useful for this rule.\n\t\t\t\t// For the special rule \"all\", only emit a warning if it's not useful for\n\t\t\t\t// *any* rules, because it covers all of them.\n\t\t\t\tif (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Needless disable for \"${rule}\"`,\n\t\t\t\t\trule: '--report-needless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\nfunction isWarningInRange(warning, range) {\n\tconst line = warning.line;\n\n\t// Need to check if range.end exist, because line number type cannot be compared to undefined\n\treturn (\n\t\trange.start <= line &&\n\t\t((range.end !== undefined && range.end >= line) || range.end === undefined)\n\t);\n}\n","'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\nmodule.exports = function (results) {\n\tfor (const result of results) {\n\t\t// File with `CssSyntaxError` don't have `_postcssResult`s.\n\t\tif (!result._postcssResult) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/** @type {{[ruleName: string]: Array<RangeType>}} */\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst config = result._postcssResult.stylelint.config;\n\n\t\tif (!config || !config.rules) continue;\n\n\t\t// If no rules actually disallow disables, don't bother looking for ranges\n\t\t// that correspond to disabled rules.\n\t\tif (!Object.values(config.rules).some((rule) => reportDisablesForRule(rule))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (!reportDisablesForRule(config.rules[rule] || [])) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" may not be disabled`,\n\t\t\t\t\trule: 'reportDisables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\nfunction reportDisablesForRule(options) {\n\tif (!options || !options[1]) return false;\n\n\treturn Boolean(options[1].reportDisables);\n}\n","'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\nconst invalidScopeDisables = require('./invalidScopeDisables');\nconst needlessDisables = require('./needlessDisables');\nconst reportDisables = require('./reportDisables');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').LinterOptions[\"maxWarnings\"]} maxWarnings */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {maxWarnings} maxWarnings\n * @param {Formatter} formatter\n * @param {string} cwd\n *\n * @returns {LinterResult}\n */\nfunction prepareReturnValue(stylelintResults, maxWarnings, formatter, cwd) {\n\treportDisables(stylelintResults);\n\tneedlessDisables(stylelintResults);\n\tinvalidScopeDisables(stylelintResults);\n\tdescriptionlessDisables(stylelintResults);\n\n\tconst errored = stylelintResults.some(\n\t\t(result) =>\n\t\t\tresult.errored ||\n\t\t\tresult.parseErrors.length > 0 ||\n\t\t\tresult.warnings.some((warning) => warning.severity === 'error'),\n\t);\n\n\t/** @type {LinterResult} */\n\tconst returnValue = {\n\t\tcwd,\n\t\terrored,\n\t\tresults: [],\n\t\toutput: '',\n\t\treportedDisables: [],\n\t};\n\n\tif (maxWarnings !== undefined) {\n\t\tconst foundWarnings = stylelintResults.reduce((count, file) => count + file.warnings.length, 0);\n\n\t\tif (foundWarnings > maxWarnings) {\n\t\t\treturnValue.maxWarningsExceeded = { maxWarnings, foundWarnings };\n\t\t}\n\t}\n\n\treturnValue.output = formatter(stylelintResults, returnValue);\n\treturnValue.results = stylelintResults;\n\n\treturn returnValue;\n}\n\nmodule.exports = prepareReturnValue;\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function invalidScopeDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst configRules = (stylelintResult.config || {}).rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tif (usedRules.has(rule)) continue;\n\n\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function descriptionlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(\n\t\t\tresult._postcssResult,\n\t\t\t'reportDescriptionlessDisables',\n\t\t);\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (range.description) continue;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) {\n\t\t\t\t\t// An 'all' rule will get copied for each individual rule. If the\n\t\t\t\t\t// configuration is `[false, {except: ['specific-rule']}]`, we\n\t\t\t\t\t// don't want to report the copies that match except, so we record\n\t\t\t\t\t// the comment as already reported.\n\t\t\t\t\tif (!enabled && rule === 'all') alreadyReported.add(range.comment);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:standalone');\nconst fastGlob = require('fast-glob');\nconst fs = require('fs');\nconst globby = require('globby');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst createStylelintResult = require('./createStylelintResult');\nconst FileCache = require('./utils/FileCache');\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst formatters = require('./formatters');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst getFormatterOptionsText = require('./utils/getFormatterOptionsText');\nconst hash = require('./utils/hash');\nconst NoFilesFoundError = require('./utils/noFilesFoundError');\nconst AllFilesIgnoredError = require('./utils/allFilesIgnoredError');\nconst { assert } = require('./utils/validateTypes');\nconst pkg = require('../package.json');\nconst prepareReturnValue = require('./prepareReturnValue');\n\nconst ALWAYS_IGNORED_GLOBS = ['**/node_modules/**'];\nconst writeFileAtomic = require('write-file-atomic');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').FormatterType} FormatterType */\n\n/**\n *\n * @param {LinterOptions} options\n * @returns {Promise<LinterResult>}\n */\nasync function standalone({\n\tallowEmptyInput = false,\n\tcache: useCache = false,\n\tcacheLocation,\n\tcode,\n\tcodeFilename,\n\tconfig,\n\tconfigBasedir,\n\tconfigFile,\n\tcustomSyntax,\n\tcwd = process.cwd(),\n\tdisableDefaultIgnores,\n\tfiles,\n\tfix,\n\tformatter,\n\tglobbyOptions,\n\tignoreDisables,\n\tignorePath,\n\tignorePattern,\n\tmaxWarnings,\n\tquiet,\n\treportDescriptionlessDisables,\n\treportInvalidScopeDisables,\n\treportNeedlessDisables,\n\tsyntax,\n}) {\n\t/** @type {FileCache} */\n\tlet fileCache;\n\tconst startTime = Date.now();\n\n\tconst isValidCode = typeof code === 'string';\n\n\tif ((!files && !isValidCode) || (files && (code || isValidCode))) {\n\t\treturn Promise.reject(\n\t\t\tnew Error('You must pass stylelint a `files` glob or a `code` string, though not both'),\n\t\t);\n\t}\n\n\t// The ignorer will be used to filter file paths after the glob is checked,\n\t// before any files are actually read\n\n\t/** @type {import('ignore').Ignore} */\n\tlet ignorer;\n\n\ttry {\n\t\tignorer = getFileIgnorer({ cwd, ignorePath, ignorePattern });\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\t/** @type {Formatter} */\n\tlet formatterFunction;\n\n\ttry {\n\t\tformatterFunction = getFormatterFunction(formatter);\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t\tignoreDisables,\n\t\tignorePath,\n\t\treportNeedlessDisables,\n\t\treportInvalidScopeDisables,\n\t\treportDescriptionlessDisables,\n\t\tsyntax,\n\t\tcustomSyntax,\n\t\tfix,\n\t\tquiet,\n\t});\n\n\tif (!files) {\n\t\tconst absoluteCodeFilename =\n\t\t\tcodeFilename !== undefined && !path.isAbsolute(codeFilename)\n\t\t\t\t? path.join(cwd, codeFilename)\n\t\t\t\t: codeFilename;\n\n\t\t// if file is ignored, return nothing\n\t\tif (\n\t\t\tabsoluteCodeFilename &&\n\t\t\t!filterFilePaths(ignorer, [path.relative(cwd, absoluteCodeFilename)]).length\n\t\t) {\n\t\t\treturn prepareReturnValue([], maxWarnings, formatterFunction, cwd);\n\t\t}\n\n\t\tlet stylelintResult;\n\n\t\ttry {\n\t\t\tconst postcssResult = await stylelint._lintSource({\n\t\t\t\tcode,\n\t\t\t\tcodeFilename: absoluteCodeFilename,\n\t\t\t});\n\n\t\t\tstylelintResult = await stylelint._createStylelintResult(postcssResult, absoluteCodeFilename);\n\t\t} catch (error) {\n\t\t\tstylelintResult = await handleError(stylelint, error);\n\t\t}\n\n\t\tconst postcssResult = stylelintResult._postcssResult;\n\t\tconst returnValue = prepareReturnValue([stylelintResult], maxWarnings, formatterFunction, cwd);\n\n\t\tif (\n\t\t\tfix &&\n\t\t\tpostcssResult &&\n\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t!postcssResult.stylelint.ruleDisableFix\n\t\t) {\n\t\t\treturnValue.output =\n\t\t\t\t!postcssResult.stylelint.disableWritingFix && postcssResult.opts\n\t\t\t\t\t? // If we're fixing, the output should be the fixed code\n\t\t\t\t\t  postcssResult.root.toString(postcssResult.opts.syntax)\n\t\t\t\t\t: // If the writing of the fix is disabled, the input code is returned as-is\n\t\t\t\t\t  code;\n\t\t}\n\n\t\treturn returnValue;\n\t}\n\n\tlet fileList = [files].flat().map((entry) => {\n\t\tconst globCWD = (globbyOptions && globbyOptions.cwd) || cwd;\n\t\tconst absolutePath = !path.isAbsolute(entry)\n\t\t\t? path.join(globCWD, entry)\n\t\t\t: path.normalize(entry);\n\n\t\tif (fs.existsSync(absolutePath)) {\n\t\t\t// This path points to a file. Return an escaped path to avoid globbing\n\t\t\treturn fastGlob.escapePath(normalizePath(entry));\n\t\t}\n\n\t\treturn entry;\n\t});\n\n\tif (!disableDefaultIgnores) {\n\t\tfileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map((glob) => `!${glob}`));\n\t}\n\n\tif (useCache) {\n\t\tconst stylelintVersion = pkg.version;\n\t\tconst hashOfConfig = hash(`${stylelintVersion}_${JSON.stringify(config || {})}`);\n\n\t\tfileCache = new FileCache(cacheLocation, cwd, hashOfConfig);\n\t} else {\n\t\t// No need to calculate hash here, we just want to delete cache file.\n\t\tfileCache = new FileCache(cacheLocation, cwd);\n\t\t// Remove cache file if cache option is disabled\n\t\tfileCache.destroy();\n\t}\n\n\tconst effectiveGlobbyOptions = {\n\t\tcwd,\n\t\t...(globbyOptions || {}),\n\t\tabsolute: true,\n\t};\n\n\tconst globCWD = effectiveGlobbyOptions.cwd;\n\n\tlet filePaths = await globby(fileList, effectiveGlobbyOptions);\n\t// Record the length of filePaths before ignore operation\n\t// Prevent prompting \"No files matching the pattern 'xx' were found.\" when .stylelintignore ignore all input files\n\tconst filePathsLengthBeforeIgnore = filePaths.length;\n\n\t// The ignorer filter needs to check paths relative to cwd\n\tfilePaths = filterFilePaths(\n\t\tignorer,\n\t\tfilePaths.map((p) => path.relative(globCWD, p)),\n\t);\n\n\tlet stylelintResults;\n\n\tif (filePaths.length) {\n\t\tlet absoluteFilePaths = filePaths.map((filePath) => {\n\t\t\tconst absoluteFilepath = !path.isAbsolute(filePath)\n\t\t\t\t? path.join(globCWD, filePath)\n\t\t\t\t: path.normalize(filePath);\n\n\t\t\treturn absoluteFilepath;\n\t\t});\n\n\t\tif (useCache) {\n\t\t\tabsoluteFilePaths = absoluteFilePaths.filter(fileCache.hasFileChanged.bind(fileCache));\n\t\t}\n\n\t\tconst getStylelintResults = absoluteFilePaths.map(async (absoluteFilepath) => {\n\t\t\tdebug(`Processing ${absoluteFilepath}`);\n\n\t\t\ttry {\n\t\t\t\tconst postcssResult = await stylelint._lintSource({\n\t\t\t\t\tfilePath: absoluteFilepath,\n\t\t\t\t});\n\n\t\t\t\tif (postcssResult.stylelint.stylelintError && useCache) {\n\t\t\t\t\tdebug(`${absoluteFilepath} contains linting errors and will not be cached.`);\n\t\t\t\t\tfileCache.removeEntry(absoluteFilepath);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * If we're fixing, save the file with changed code\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\tpostcssResult.opts &&\n\t\t\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t\t\tfix &&\n\t\t\t\t\t!postcssResult.stylelint.disableWritingFix\n\t\t\t\t) {\n\t\t\t\t\tconst fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\t\tpostcssResult.root.source &&\n\t\t\t\t\t\tpostcssResult.root.source.input.css !== fixedCss\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait writeFileAtomic(absoluteFilepath, fixedCss);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn stylelint._createStylelintResult(postcssResult, absoluteFilepath);\n\t\t\t} catch (error) {\n\t\t\t\t// On any error, we should not cache the lint result\n\t\t\t\tfileCache.removeEntry(absoluteFilepath);\n\n\t\t\t\treturn handleError(stylelint, error, absoluteFilepath);\n\t\t\t}\n\t\t});\n\n\t\tstylelintResults = await Promise.all(getStylelintResults);\n\t} else if (allowEmptyInput) {\n\t\tstylelintResults = await Promise.all([]);\n\t} else if (filePathsLengthBeforeIgnore) {\n\t\t// All input files ignored\n\t\tstylelintResults = await Promise.reject(new AllFilesIgnoredError());\n\t} else {\n\t\tstylelintResults = await Promise.reject(new NoFilesFoundError(fileList));\n\t}\n\n\tif (useCache) {\n\t\tfileCache.reconcile();\n\t}\n\n\tconst result = prepareReturnValue(stylelintResults, maxWarnings, formatterFunction, cwd);\n\n\tdebug(`Linting complete in ${Date.now() - startTime}ms`);\n\n\treturn result;\n}\n\n/**\n * @param {FormatterType | Formatter | undefined} selected\n * @returns {Formatter}\n */\nfunction getFormatterFunction(selected) {\n\tif (typeof selected === 'string') {\n\t\tconst formatterFunction = formatters[selected];\n\n\t\tif (formatterFunction === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`You must use a valid formatter option: ${getFormatterOptionsText()} or a function`,\n\t\t\t);\n\t\t}\n\n\t\treturn formatterFunction;\n\t}\n\n\tif (typeof selected === 'function') {\n\t\treturn selected;\n\t}\n\n\tassert(formatters.json);\n\n\treturn formatters.json;\n}\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {any} error\n * @param {string} [filePath]\n * @return {Promise<StylelintResult>}\n */\nfunction handleError(stylelint, error, filePath = undefined) {\n\tif (error.name === 'CssSyntaxError') {\n\t\treturn createStylelintResult(stylelint, undefined, filePath, error);\n\t}\n\n\tthrow error;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').lint} */ (standalone);\n","'use strict';\n\nconst checkAgainstRule = require('./utils/checkAgainstRule');\nconst createPlugin = require('./createPlugin');\nconst createStylelint = require('./createStylelint');\nconst formatters = require('./formatters');\nconst postcssPlugin = require('./postcssPlugin');\nconst report = require('./utils/report');\nconst ruleMessages = require('./utils/ruleMessages');\nconst rules = require('./rules');\nconst standalone = require('./standalone');\nconst validateOptions = require('./utils/validateOptions');\nconst resolveConfig = require('./resolveConfig');\n\n/** @type {import('stylelint').PublicApi} */\nconst stylelint = Object.assign(postcssPlugin, {\n\tlint: standalone,\n\trules,\n\tformatters,\n\tcreatePlugin,\n\tresolveConfig,\n\tcreateLinter: createStylelint,\n\tutils: {\n\t\treport,\n\t\truleMessages,\n\t\tvalidateOptions,\n\t\tcheckAgainstRule,\n\t},\n});\n\nmodule.exports = stylelint;\n","'use strict';\n\nconst formatters = require('../formatters');\n\n/**\n * @param {{ useOr?: boolean }} [options={}]\n * @returns {string}\n */\nmodule.exports = function getFormatterOptionsText(options = {}) {\n\tlet output = Object.keys(formatters)\n\t\t.map((name) => `\"${name}\"`)\n\t\t.join(', ');\n\n\tif (options.useOr) {\n\t\toutput = output.replace(/, ([a-z\"]+)$/u, ' or $1');\n\t}\n\n\treturn output;\n};\n","/*!\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(path, stripTrailing) {\n  if (typeof path !== 'string') {\n    throw new TypeError('expected path to be a string');\n  }\n\n  if (path === '\\\\' || path === '/') return '/';\n\n  var len = path.length;\n  if (len <= 1) return path;\n\n  // ensure that win32 namespaces has two leading slashes, so that the path is\n  // handled properly by the win32 version of path.parse() after being normalized\n  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\n  var prefix = '';\n  if (len > 4 && path[3] === '\\\\') {\n    var ch = path[2];\n    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\n      path = path.slice(2);\n      prefix = '//';\n    }\n  }\n\n  var segs = path.split(/[/\\\\]+/);\n  if (stripTrailing !== false && segs[segs.length - 1] === '') {\n    segs.pop();\n  }\n  return prefix + segs.join('/');\n};\n","'use strict';\n\n/** @typedef {import('stylelint').Rule} StylelintRule */\n\n/**\n * @param {string} ruleName\n * @param {StylelintRule} rule\n * @returns {{ruleName: string, rule: StylelintRule}}\n */\nfunction createPlugin(ruleName, rule) {\n\treturn {\n\t\truleName,\n\t\trule,\n\t};\n}\n\nmodule.exports = /** @type {typeof import('stylelint').createPlugin} */ (createPlugin);\n","'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/**\n * Resolves the effective configuation for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} [options] - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\nmodule.exports = async function resolveConfig(\n\tfilePath,\n\t{ cwd = process.cwd(), config, configBasedir, configFile } = {},\n) {\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t});\n\n\tconst absoluteFilePath = !path.isAbsolute(filePath)\n\t\t? path.join(cwd, filePath)\n\t\t: path.normalize(filePath);\n\n\tconst configSearchPath = stylelint._options.configFile || absoluteFilePath;\n\n\tconst resolved = await stylelint.getConfigForFile(configSearchPath, absoluteFilePath);\n\n\tif (!resolved) {\n\t\treturn undefined;\n\t}\n\n\treturn resolved.config;\n};\n","'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\nfunction checkAgainstRule(options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tconst rule = rules[options.ruleName];\n\n\tif (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\t// @ts-expect-error - this error should not occur with PostCSS 8\n\tconst tmpPostcssResult = new Result();\n\n\trule(settings[0], /** @type {O} */ (settings[1]), {})(options.root, tmpPostcssResult);\n\n\tfor (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.checkAgainstRule} */ (\n\tcheckAgainstRule\n);\n"],"names":["openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","uLower","uUpper","plus","isUnicodeRange","walk","nodes","cb","bubble","i","max","node","result","length","type","Array","isArray","stringifyNode","custom","buf","customResult","value","undefined","quote","unclosed","before","after","stringify","minus","dot","exp","EXP","ValueParser","this","input","next","prev","token","escape","escapePos","whitespacePos","parenthesesOpenPos","parent","tokens","pos","code","stack","balanced","name","slice","sourceEndIndex","push","sourceIndex","indexOf","pop","test","parse","prototype","toString","unit","nextCode","nextNextCode","likeNumber","number","declarationValueIndex","decl","raws","prop","prefix","raw","suffix","between","reduce","count","str","getDeclarationValue","hasLessInterpolation","string","hasPsvInterpolation","hasScssInterpolation","hasTplInterpolation","hasInterpolation","isStandardSyntaxValue","normalizedValue","charAt","startsWith","matchesStringOrRegExp","comparison","testAgainstStringOrRegExpOrArray","inputItem","testResult","testAgainstStringOrRegExp","comparisonItem","RegExp","match","pattern","substring","firstComparisonChar","lastComparisonChar","secondToLastComparisonChar","comparisonIsRegex","valueMatch","optionsMatches","options","propertyName","Boolean","report","problem","ruleName","message","line","index","endIndex","word","stylelint","ruleSeverities","customMessages","ruleMetadata","quiet","start","rangeBy","startLine","Error","ignoreDisables","config","disabledRanges","ranges","all","range","end","rules","includes","disabledWarnings","rule","severity","stylelintError","warningProperties","warningMessage","warn","ruleMessages","messages","newMessages","messageId","messageText","Object","entries","args","concat","setDeclarationValue","arrayEqual","a","b","every","elem","isObject","o","call","isBoolean","isNullish","isNumber","Number","isRegExp","isString","String","isPlainObject","ctor","prot","constructor","hasOwnProperty","_isPlainObject","assert","console","assertFunction","Function","isFunction","assertNumber","assertString","IGNORED_OPTIONS","Set","validateOptions","optionDescriptions","noErrors","optionDescription","validate","complain","stylelintType","opts","possible","actual","optional","nothingPossible","flat","isValid","optionName","optionValue","has","possibleValue","possibility","JSON","expected","unfixed","fixed","ALPHA_PROPS","ALPHA_FUNCS","primary","secondaryOptions","context","root","exceptProperties","optionFuncs","freeze","expFunc","fixFunc","asNumber","percentage","isPercentage","asPercentage","walkDecls","needsFix","parsedValue","valueParser","alpha","toLowerCase","findAlphaInValue","filter","slashNodeIndex","findIndex","find","findAlphaInFunction","expectation","fix","toPrecision","dimension","meta","url","addEmptyLineBefore","newline","replace","repeat","getNodeLine","source","getPreviousNonSharedLineCommentNode","previousNode","previousNode2","hasEmptyLine","getNextNonSharedLineCommentNode","nextNode","_export_isRoot_","_export_isRule_","_export_isAtRule_","_export_isComment_","_export_isDeclaration_","_export_isValueFunction_","_export_hasSource_","nodesShareLines","isSharedLineComment","isComment","nextNonSharedLineCommentNode","parentNode","isRoot","isAfterComment","hasBlock","statement","isBlocklessAtRuleAfterBlocklessAtRule","atRule","isAtRule","isBlocklessAtRuleAfterSameNameBlocklessAtRule","isFirstNested","first","parentNodes","firstNode","hasSource","openingBraceLine","isFirstNodeOfRoot","isStandardSyntaxAtRule","params","mixin","variable","afterName","removeEmptyLinesBefore","rejected","except","ignore","ignoreAtRules","walkAtRules","isNested","hasEmptyLineBefore","expectEmptyLineBefore","isAtRuleAfterSameNameAtRule","_export_prefix_","_export_unprefixed_","primaryValues","vendor","primaryOptionArray","atRuleNameSpaceChecker","locationChecker","err","m","checkedRuleName","errTarget","configurationError","text","isSingleLineString","isWhitespace","char","whitespaceChecker","targetWhitespace","activeArgs","lineCheckStr","onlyOneChar","allowIndentation","expectBefore","rejectBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","expectAfter","rejectAfter","expectedAfterSingleLine","rejectedAfterSingleLine","expectedAfterMultiLine","rejectedAfterMultiLine","messageFunc","expectedBefore","_activeArgs2","expectedChar","expectBeforeAllowingIndentation","_activeArgs","oneCharBefore","twoCharsBefore","rejectedBefore","_activeArgs3","expectedAfter","_activeArgs4","oneCharAfter","twoCharsAfter","threeCharsAfter","rejectedAfter","_activeArgs5","beforeAllowingIndentation","obj","afterOneOnly","checker","_secondary","expectedName","toUpperCase","rawNodeString","nodeString","AT_RULES","SELECTORS","PROPERTIES","PROPERTY_VALUES","_export_unprefix_","p","identifier","isAutoprefixable","beforeBlockString","noRawBefore","isRule","selector","blockString","check","nodeToCheck","reportIndex","msg","nodeToCheckRaws","search","walkRules","hasEmptyBlock","statementString","childNodeTypes","map","item","spaces","split","addEmptyLineAfter","removeEmptyLinesAfter","_secondaryOptions","blockIsMultiLine","statementRaws","firstWhitespaceIndex","newlineBefore","newlineAfter","newlineIndex","keywordSets","uniteSets","set","nonLengthUnits","lengthUnits","units","camelCaseFunctionNames","basicKeywords","systemFontValues","fontFamilyKeywords","fontWeightRelativeKeywords","fontWeightAbsoluteKeywords","fontWeightNumericKeywords","fontWeightKeywords","animationNameKeywords","animationTimingFunctionKeywords","animationIterationCountKeywords","animationDirectionKeywords","animationFillModeKeywords","animationPlayStateKeywords","animationShorthandKeywords","levelOneAndTwoPseudoElements","levelThreeAndUpPseudoElements","shadowTreePseudoElements","webkitScrollbarPseudoElements","vendorSpecificPseudoElements","pseudoElements","aNPlusBNotationPseudoClasses","linguisticPseudoClasses","atRulePagePseudoClasses","logicalCombinationsPseudoClasses","aNPlusBOfSNotationPseudoClasses","otherPseudoClasses","vendorSpecificPseudoClasses","webkitScrollbarPseudoClasses","pseudoClasses","shorthandTimeProperties","longhandTimeProperties","timeProperties","camelCaseKeywords","counterIncrementKeywords","counterResetKeywords","gridRowKeywords","gridColumnKeywords","gridAreaKeywords","listStyleTypeKeywords","listStylePositionKeywords","listStyleImageKeywords","listStyleShorthandKeywords","fontStyleKeywords","fontVariantKeywords","fontStretchKeywords","fontSizeKeywords","lineHeightKeywords","fontShorthandKeywords","keyframeSelectorKeywords","pageMarginAtRules","atRules","deprecatedMediaFeatureNames","mediaFeatureNames","systemColors","standardHtmlTags","nonStandardHtmlTags","validMixedCaseSvgElements","atName","flattenArray","validateObjectWithArrayProps","validators","values","some","v","property","atRuleName","propList","beforeBraceNoRaw","spaceIndex","ignoreComments","positionBy","ignoreSelectors","hex","HEX","IGNORED_FUNCTIONS","isIgnoredFunction","isHexColor","statementFirst","isStandardSyntaxHexColor","endsWith","hexMatch","exec","hexValue","isValidHex","backupCommentNextBefores","Map","startNode","reNewLine","newLineMatch","delete","clear","fixTarget","fixTargetRaws","unexpected","isUrlFunction","hasAlphaChannel","isStandardSyntaxFunction","isStandardSyntaxColorFunction","fnNode","LEGACY_FUNCS","LEGACY_NOTATION_FUNCS","isValueFunction","hasCommas","commaCount","childNode","isComma","atLeastOneSpace","whitespace","propertySets","acceptCustomIdents","r","grad","turn","rad","Math","PI","t","n","pow","round","e","u","isFinite","g","s","h","min","floor","l","d","f","c","y","parseInt","substr","object","N","M","H","$","j","parsed","trim","x","rgba","brightness","isDark","isLight","toHex","toRgb","toRgbString","toHsl","toHslString","toHsv","invert","w","saturate","desaturate","grayscale","lighten","darken","rotate","hue","isEqual","S","z","cbrt","atan2","sqrt","cos","sin","parseHwbWithCommaString","whiteness","blackness","extraArgs","colordInstance","colord","parseGrayString","lightness","lightnessWithUnit","colorObject","alphaWithUnit","forEach","extend","white","bisque","blue","cadetblue","chartreuse","chocolate","coral","antiquewhite","aqua","azure","whitesmoke","papayawhip","plum","blanchedalmond","black","gold","goldenrod","gainsboro","cornsilk","cornflowerblue","burlywood","aquamarine","beige","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkkhaki","darkgray","darkgreen","darkgrey","peachpuff","darkmagenta","darkred","darkorchid","darkorange","darkslateblue","gray","darkslategray","darkslategrey","deeppink","deepskyblue","wheat","firebrick","floralwhite","ghostwhite","darkviolet","magenta","green","dodgerblue","grey","honeydew","hotpink","blueviolet","forestgreen","lawngreen","indianred","indigo","fuchsia","brown","maroon","mediumblue","lightcoral","darkturquoise","lightcyan","ivory","lightyellow","lightsalmon","lightseagreen","linen","mediumaquamarine","lemonchiffon","lime","khaki","mediumseagreen","limegreen","mediumspringgreen","lightskyblue","lightblue","midnightblue","lightpink","mistyrose","moccasin","mintcream","lightslategray","lightslategrey","navajowhite","navy","mediumvioletred","powderblue","palegoldenrod","oldlace","paleturquoise","mediumturquoise","mediumorchid","rebeccapurple","lightsteelblue","mediumslateblue","thistle","tan","orchid","mediumpurple","purple","pink","skyblue","springgreen","palegreen","red","yellow","slateblue","lavenderblush","peru","palevioletred","violet","teal","slategray","slategrey","aliceblue","darkseagreen","darkolivegreen","greenyellow","seagreen","seashell","tomato","silver","sienna","lavender","lightgreen","orange","orangered","steelblue","royalblue","turquoise","yellowgreen","salmon","saddlebrown","sandybrown","rosybrown","darksalmon","lightgoldenrodyellow","snow","lightgrey","lightgray","dimgray","dimgrey","olivedrab","olive","toName","closest","toHwb","toHwbString","toLab","delta","abs","F","L","I","P","k","q","A","B","toLch","toLchString","_colordClass","parsers","named","original","NODE_TYPES","ignoreProperties","rawColorString","colorString","color","namedColor","normalizedPattern","walkComments","comment","nextNonCommentNode","testAgainstString","matchesWord","containsString","isStandardSyntaxComment","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","rawComment","firstFourChars","leftMatches","rightMatches","opener","leftSpace","rightSpace","closer","left","right","addWhitespaceBefore","addWhitespaceAfter","SKIP","ONLY","styleSearch","callback","target","skipComments","comments","skipStrings","strings","skipFunctionNames","functionNames","skipFunctionArguments","functionArguments","skipParentheticals","parentheticals","onceOptionUsed","keys","key","openingQuote","onlyComments","onlyStrings","onlyFunctionNames","onlyFunctionArguments","onlyParentheticals","insideString","insideComment","insideSingleLineComment","insideParens","insideFunctionArguments","openingParenCount","matchCount","getMatch","ti","tl","checkResult","getMatchBase","bind","targetString","targetStringLength","startIndex","currentChar","handleMatch","isFunctionName","once","declarationBangSpaceChecker","indexOffset","declString","valueString","bangIndex","declValue","setFixed","important","targetBefore","targetAfter","atRuleParamIndex","regexpPattern","customMediaName","isCustomProperty","isScssVariable","isStandardSyntaxProperty","isStandardSyntaxDeclaration","lang","prevNode","isDeclaration","isAfterCustomProperty","eachDeclarationBlock","each","decls","eachDecl","add","customProperty","knownCustomProperties","isVarFunction","isDashedIdent","ignoreDuplicates","ignoreDiffValues","ignorePrefixlessSameValues","indexDuplicate","duplicateValue","parentRule","semicolon","last","shorthandData","margin","padding","background","font","border","transition","animation","columns","flex","grid","outline","mask","shorthand","declarations","unprefixedProp","overrideables","longhandProp","props","ignoreShorthands","longhandProperties","longhandProps","longhandDeclarations","shorthandProperties","shorthandProperty","prefixedShorthandProperty","longhandDeclaration","prefixedShorthandData","sort","canShrink","expectedHex","longer","shorter","hexVariant","declarationColonSpaceChecker","endOfPropIndex","propPlusColon","colonIndex","ruleNode","block","nextDecl","isAfterStandardPropertyDeclaration","indexToCheck","betweenStart","sliceIndex","betweenBefore","betweenAfter","checkLastNode","hasSemicolon","getImportantPosition","lastIndex","getUnitFromValueNode","blurChar","blurInterpolation","parsedUnit","propKey","propIdentifier","isNumbery","isValidFontSize","numberUnit","isVariable","nodeTypesToCheck","findFontFamily","fontFamilies","valueNodes","postcssValueParser","children","needMergeNodesByValue","mergeCharacters","valueNode","valueLowerCase","prevPrevNode","fontFamily","lastFontFamily","secondNode","charactersBetween","ignoreFontFamilyNames","keywords","familyNames","fontFamilyNode","family","rawFamily","makeMutableFontFamilies","mutableNodes","idx","newNode","rawName","hasQuotes","resetIndexes","offset","removeQuotes","openIndex","closeIndex","addQuotes","fixedName","checkFamilyName","required","quotesRequired","recommended","quotesRecommended","fontFamilyNodes","invalidNamed","NORMAL_KEYWORD","WEIGHTS_WITH_KEYWORD_EQUIVALENTS","checkWeight","weightValue","weightValueNode","lowerWeightValue","findFontWeights","hasNumericFontWeight","lowerValue","checkFont","process$1","cwd","env","NO_COLOR","FORCE_COLOR","argv","isColorSupported","process","platform","formatter","open","close","replaceClose","nextIndex","createColors","enabled","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","_module_exports_","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","tokenizer","content","escaped","currentToken","css","valueOf","ignoreErrors","buffer","returned","what","error","back","nextToken","ignoreUnclosed","controlChar","fromCharCode","endOfFile","position","Input","HIGHLIGHT_THEME","brackets","pico","class","hash","getTokenType","processor","terminalHighlight","join","registerInput","dependant","CssSyntaxError","column","file","plugin","super","reason","endLine","endColumn","setMessage","captureStackTrace","showSourceCode","mark","aside","lines","maxWidth","gutter","spacing","default","_export_isClean_","Symbol","_export_my_","DEFAULT_RAW","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","emptyBody","commentLeft","commentRight","Stringifier","builder","document","body","rawValue","ownSemicolon","atrule","child","own","detect","rawCache","beforeAfter","method","capitalize","rawSemicolon","rawEmptyBody","rawIndent","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","depth","step","cloneNode","cloned","Node","defaults","isClean","my","clone","append","data","remove","removeChild","stringifier","assign","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","bookmark","foundSelf","defaultType","cleanRaws","keepBetween","toJSON","_","inputs","emitInputs","inputsNextIndex","inputId","get","positionInside","getProxyProcessor","markDirty","toProxy","proxyCache","Proxy","addToError","postcssNode","from","proxyOf","Declaration","noop","cosmiconfig","catch","SourceMapConsumer","SourceMapGenerator","_require_source_map_js_","dirname","_require_path_","PreviousMap","loadAnnotation","inline","startWith","annotation","loadMap","mapFile","consumer","consumerCache","withContent","sourcesContent","getAnnotationURL","sourceMapString","lastIndexOf","decodeInline","decodeURIComponent","lastMatch","Buffer","window","atob","fromBase64","encoding","loadFile","path","existsSync","readFileSync","fromSourceMap","isMap","prevPath","mappings","_mappings","sections","resolve","isAbsolute","fromOffsetCache","sourceMapAvailable","pathAvailable","hasBOM","mapResolve","id","size","random","nanoid","fromOffset","lastLine","lineToIndex","prevIndex","mid","col","origin","pathToFileURL","to","fromUrl","originalPositionFor","URL","sourceRoot","protocol","fileURLToPath","sourceContentFor","json","_objectSpread","Rule","AtRule","Root","LazyResult","Processor","relative","sep","MapGenerator","cssString","mapOpts","previous","previousMaps","isInline","isSourcesContent","clearAnnotation","setSourcesContent","already","setSourceContent","toUrl","applyPrevMaps","applySourceMap","isAnnotation","toBase64","btoa","unescape","encodeURIComponent","addAnnotation","outputFile","eol","generateMap","generateString","addMapping","generated","absolute","encodeURI","sourcePath","noSource","mapping","generate","Comment","cleanSource","markDirtyUp","Container","iterator","getIterator","indexes","normalize","prepend","reverse","unshift","exist","splice","removeAll","replaceValues","fast","condition","sample","processed","rebuild","other","lastEach","registerParse","registerRule","registerAtRule","registerRoot","setPrototypeOf","Document","toResult","registerLazyResult","registerProcessor","printed","warnOnce","Warning","opt","Result","lastPlugin","postcssPlugin","warning","warnings","list","separators","array","current","func","inQuote","prevQuote","letter","space","selectors","SAFE_COMMENT_NEIGHBOR","empty","Parser","createTokenizer","freeSemicolon","emptyRule","endFile","init","getPosition","bracket","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","findLastWithPosition","shift","firstSpaces","precheckMissedSemicolon","stringFrom","spacesFromEnd","cache","hasWord","checkMissedSemicolon","unnamedAtrule","spacesAndCommentsFromStart","unexpectedClose","unclosedBlock","clean","lastTokenType","element","doubleColon","founded","parser","NODE_ENV","TYPE_TO_CLASS_NAME","PLUGIN_PROPS","prepare","Once","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","DocumentExit","OnceExit","NOT_VISITORS","isPromise","then","getEvents","toStack","events","eventIndex","visitors","visitorIndex","cleanMarks","postcss","stringified","syntax","helpers","plugins","toStringTag","sync","onFulfilled","onRejected","async","finally","onFinally","Promise","reject","processing","runAsync","getAsyncError","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","subRoot","visitSync","event","visitor","promise","handleError","roots","postcssVersion","pluginName","pluginVer","runtimeVer","version","visitTick","visit","registerPostcss","NoWorkResult","_processor","_css","_opts","_map","self","defineProperty","generatedCSS","generatedMap","_root","use","normalized","fromJSON","ownInputs","_excluded","inputHydrated","__proto__","_defaults$source","_objectWithoutProperties","_excluded2","initializer","warningPrinted","creator","LANG","transformer","processOpts","pluginOpts","ignoreFontFamilies","lastValue","isLastFontFamilyVariable","isFamilyNameKeyword","valueIndex","fixer","div","symb","functionCommaSpaceChecker","hasFixed","argumentStrings","getCommaCheckIndex","commaNode","nodeIndex","commaBefore","commaDataList","checkIndex","operator","expectedOperatorBeforeSign","OPERATORS","OPERATOR_REGEX","ALL_OPERATORS","checkAroundOperator","operatorNode","currentNode","isBeforeOp","operatorSourceIndex","isSingleSpace","lastChar","firstChar","indexOfFirstNewLine","checkWords","operatorIndex","charBefore","charAfter","insertCharAtIndex","checkForOperatorInFirstNode","lastNode","isOperator","checkForOperatorInLastNode","foundOperatorNode","currNode","nodeBefore","nodeAfter","operators","mapLowercaseFunctionNamesToCamelCase","ignoreFunctions","needFix","functionName","functionNameLowerCase","expectedFunctionName","val","maybeMatch","pre","post","reg","begs","beg","ai","bi","functionArgumentsSearch","parensMatch","balancedMatch","expression","expressionIndex","firstArg","trimEnd","withToPrefix","regexp","matches","isStandardDirection","expectedOpeningMultiLine","rejectedOpeningMultiLine","expectedClosingMultiLine","rejectedClosingMultiLine","functionString","isMultiLine","containsNewline","openingIndex","checkBefore","getCheckBefore","fixBeforeForAlways","fixBeforeForNever","closingIndex","checkAfter","getCheckAfter","fixAfterForAlways","fixAfterForNever","isStandardSyntaxUrl","checkArgs","shouldHasQuotes","leftTrimmedArgs","trimStart","complaintIndex","complaintEndIndex","trimmedArg","isEmptyArgument","atRuleParamsLowerCase","placeIndexOnValueStart","maxAdjacentNewlines","violatedCRLFNewLinesRegex","violatedLFNewLinesRegex","allowedLFNewLinesString","allowedCRLFNewLinesString","stringValue","splittedValue","sourceIndexStart","stringifiedNode","newNodeString","updatedValue","acc","curr","functionsList","fs","functionsListPath","getSchemeFromUrl","urlString","_unused","scheme","slashIndex","unspacedUrlString","ACCEPTABLE_AFTER_CLOSING_PAREN","nextChar","checkClosingParen","createFixer","applyFix","whitespaceEndIndex","param","HUE_FIRST_ARG_FUNCS","HUE_THIRD_ARG_FUNCS","HUE_FUNCS","findHue","isDegree","asDegree","TypeError","setAtRuleParams","getAtRuleParams","urlFunctionFull","urlFunctionArguments","quotedUrlFunctionFirstArgument","restAtRuleParams","quotedNodeValue","linebreak","shouldHaveCR","fixData","hasError","reportNewlineError","dataToCheck","hasNewlineToVerify","hasCR","res","MATH_FUNCTIONS","isMathFunction","isWord","isLength","isFraction","parseFloat","isZero","regularNumber","isLineHeight","isFlex","valueNodeIndex","isLineHeightValue","flagMap","global","ignoreCase","multiline","dotAll","sticky","unicode","cloneRegexp","flags","flag","clonedRegexp","execall","isGlobal","subMatches","EXCLUDED_PATTERNS","ignorePattern","ignoreNonComments","rootString","skippedSubStrings","skippedSubStringsIndex","subMatch","startOfSubString","checkNewline","nextNewlineIndex","rawLineLength","excludedLength","skippedSubString","startSubString","endSubString","excluded","tryToPopSubString","lineText","nextTwoChars","keyframeName","regex","keyframesNode","isStandardSyntaxSelector","isStandardSyntaxRule","gobbleHex","lower","spaceTerminated","codePoint","fromCodePoint","__esModule","CONTAINS_ESCAPE","ret","gobbled","_len","arguments","_key","commentStart","lastEnd","commentEnd","_export_ensureObject_","_export_getProp_","_export_unesc_","_unesc","_interopRequireDefault","_require__$unesc_","_getProp","_require__$getProp_","_ensureObject","_require__$ensureObject_","_require__$stripComments_","_defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_proto","at","appendToPropertyAndEscape","valueEscaped","originalValue","originalEscaped","setPropertyAndEscape","setPropertyWithoutEscape","isAtPosition","stringifyProperty","valueToString","rawSpaceBefore","rawSpaceAfter","rawSpace","UNIVERSAL","ATTRIBUTE","CLASS","COMBINATOR","COMMENT","ID","NESTING","PSEUDO","ROOT","SELECTOR","STRING","TAG","_node","_require__$node_","types","_getRequireWildcardCache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","_interopRequireWildcard","_require__$types_","WeakMap","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_arrayLikeToArray","_unsupportedIterableToArray","done","arr","len","arr2","_setPrototypeOf","_Node","subClass","superClass","_this","create","_step","_iterator","oldNode","oldIndex","_findChildAtPosition","found","atPosition","foundChild","_inferEndPosition","walkAttributes","_this2","walkClasses","_this3","walkCombinators","_this4","_this5","walkIds","_this6","walkNesting","_this7","walkPseudos","_this8","walkTags","_this9","walkUniversals","_this10","_this11","memo","_container","_require__$container_","_Container","_types","trailingComma","_error","handler","Selector","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","merge","quotes","isIdentifier","output","counter","character","extra","escapeEverything","$0","$1","$2","wrap","_cssesc","_require_cssesc_","ClassName","_constructed","_value","Namespace","apply","qualifiedName","namespace","namespaceString","_namespace","ns","_require__$namespace_","Tag","_Namespace","Pseudo","deprecate","fn","unescapeValue","_CSSESC_QUOTE_OPTIONS","_require___$util$unesc_","WRAPPED_IN_QUOTES","warnOfDeprecatedValueAssignment","warnOfDeprecatedQuotedAssignment","warnOfDeprecatedConstructor","deprecatedUsage","quoteMark","unescaped","Attribute","_unescapeValue","handleDeprecatedContructorOpts","getQuotedValue","_determineQuoteMark","cssescopts","CSSESC_QUOTE_OPTIONS","smart","smartQuoteMark","preferredQuoteMark","setValue","_quoteMark","_syncRawValue","numSingleQuotes","numDoubleQuotes","NO_QUOTE","pref","preferCurrentQuoteMark","_handleEscapes","_spacesFor","rawSpaces","_stringFor","spaceName","defaultAttrConcat","attrSpaces","offsetOf","attributeSpaces","operatorSpaces","valueSpaces","insensitive","attrValue","quoted","qm","attribute","_unescapeValue2","_attribute","Universal","Combinator","Nesting","_export_combinator_","_export_word_","_export_comment_","_export_str_","_export_tab_","_export_newline_","_export_feed_","_export_cr_","_export_backslash_","_export_bang_","_export_slash_","_export_doubleQuote_","_export_singleQuote_","_export_space_","_export_greaterThan_","_export_pipe_","_export_equals_","_export_plus_","_export_caret_","_export_tilde_","_export_dollar_","_export_closeSquare_","_export_openSquare_","_export_closeParenthesis_","_export_openParenthesis_","_export_semicolon_","_export_colon_","_export_comma_","_export_at_","_export_asterisk_","_export_ampersand_","nextLine","nextOffset","tokenType","safe","tab","cr","feed","greaterThan","tilde","pipe","combinator","asterisk","ampersand","bang","equals","dollar","caret","openSquare","closeSquare","openParenthesis","closeParenthesis","consumeWord","_unescapable","_wordDelimiters","_require__$tokenTypes_","unescapable","wordDelimiters","hexChars","consumeEscape","hexDigits","FIELDS","TYPE","START_LINE","START_COL","END_LINE","END_COL","START_POS","END_POS","_WHITESPACE_TOKENS","_Object$assign","_require__$selectors$root_","_selector","_require__$selectors$selector_","_className","_require__$selectors$className_","_comment","_require__$selectors$comment_","_id","_require__$selectors$id_","_tag","_require__$selectors$tag_","_string","_require__$selectors$string_","_pseudo","_require__$selectors$pseudo_","_require__$selectors$attribute_","_universal","_require__$selectors$universal_","_combinator","_require__$selectors$combinator_","_nesting","_require__$selectors$nesting_","_sortAscending","_require__$sortAscending_","_tokenize","_require__$tokenize_","_require__$selectors$types_","WHITESPACE_TOKENS","WHITESPACE_EQUIV_TOKENS","tokenStart","tokenEnd","getSource","startColumn","getTokenSource","getTokenSourceSpan","startToken","endToken","unescapeProp","indexesOf","lossy","_errorGenerator","rootSource","errorGenerator","loop","errorOptions","attr","startingToken","currToken","spaceBefore","commentBefore","lastAdded","spaceAfterMeaningfulToken","prevContent","existingComment","oldRawValue","_unescaped","_oldRawValue","oldValue","insensitiveFlag","lastComment","_util","rawLastComment","rawLastValue","parseWhitespaceEquivalentTokens","stopPosition","startPosition","firstToken","lastToken","convertWhitespaceNodesToSpace","requiredSpace","lossySpace","isNamedCombinator","namedCombinator","nameRaw","nextSigTokenPos","locateNextMeaningfulToken","spaceOrDescendantSelectorNodes","_this$convertWhitespa2","_space","_rawSpace","_this$convertWhitespa3","_space2","_rawSpace2","optionalSpace","_this$convertWhitespa","missingBackslash","missingParenthesis","missingSquareBracket","prevToken","universal","nesting","parentheses","unbalanced","parenEnd","parenStart","parenValue","parseParenthesisToken","pseudo","pseudoStr","splitWord","firstCallback","hasClass","escapedDot","isKeyframesPercent","hasId","interpolations","hashIndex","indices","uniqs","ind","classNameOpts","idOpts","tagOpts","throwOnParenthesis","description","an","searchPosition","_parser","_require__$parser_","funcRes","_shouldUpdateSelector","updateSelector","_isLossy","lossless","_parseOptions","_run","transform","_runSync","ast","astSync","transformSync","processSync","tag","className","_require__$attribute_","_require__$className_","_require__$combinator_","_require__$comment_","_require__$id_","_require__$nesting_","_require__$pseudo_","_require__$root_","_require__$selector_","_require__$string_","_require__$tag_","_require__$universal_","_IS_TYPE","isNode","isPseudoElement","isPseudoClass","isPseudo","isContainer","isNamespace","isAttribute","isTag","isUniversal","isSelector","isNesting","isCombinator","isClassName","IS_TYPE","isNodeType","_constructors","_guards","_require__$processor_","_require__$selectors_","_default","isIgnoreAtRule","checkStatement","nestingDepth","ignorePseudoClasses","level","sel","extractPseudoRule","containsPseudoClassesOnly","pseudoRule","containsIgnoredPseudoClassesOnly","isCustomMediaQuery","mediaQuery","isRangeContextMediaFeature","mediaFeature","isStandardSyntaxMediaFeatureName","mediaFeatureName","_Node2","hasFilter","filterReg","parseMediaFeature","parseMediaQuery","parseMediaList","interimIndex","levelLocal","doesHaveUrl","parenthesesLv","_i2","_character","_mediaQueryString","_spaceBefore","_Container2","mediaQueryString","modesEntered","mode","lastModeIndex","mediaFeatureValue","indexLocal","stringNormalized","isCalculationEnabled","mediaFeatureValueStr","localLevel","insideSomeValue","_i","_parsers","rangeOperators","rangeContextNodeParser","nameNode","mediaParser","_require_postcss_media_query_parser_","hasComments","mediaRule","mediaFeatureNode","parsedRangeContext","expectedFeatureName","atRuleKeyframes","emptyLines","getChars","replaceEmptyLines","firstNodeRawsBefore","rootRawsAfter","maxLines","isSpecialCase","repeatTimes","emptyLFLines","emptyCRLFLines","matchStartIndex","matchEndIndex","eof","codeAfter","rootIndex","codeBefore","isEofNode","checkMatch","keyframeRule","normalizedSelector","mediaFeatureColonSpaceChecker","paramColonIndex","colonIndices","beforeColon","afterColon","indexBoost","problems","parsedParams","mediaFeatureRangeContext","unprefixedMediaFeatureName","allowedValuesKey","featureName","expectedOpeningSingleLine","rejectedOpeningSingleLine","expectedClosingSingleLine","rejectedClosingSingleLine","isSingleLine","ignoreMediaFeatureNames","mediaQueryListCommaWhitespaceChecker","allowTrailingComments","execResult","commaIndex","checkComma","paramCommaIndex","commaIndices","beforeComma","afterComma","findMediaOperator","fixOperatorIndices","checkAfterOperator","beforeOperator","afterOperator","resolvedNestedSelector","resolveNestedSelector","parentIsNestAtRule","parentSelectors","parentSelector","newlyResolvedSelectors","resolvedParentSelector","combinedSelector","findAtRuleContext","nodeContextLookup","contextMap","getContext","subContexts","nodeSource","baseContext","creativeGetMap","someMap","someThing","parseSelector","selectorParser","selectorContextLookup","checkSelector","selectorNode","comparisonContext","referenceSelectorNode","firstChild","nodesByCombinator","nodesAfterLastCombinator","lastCompoundSelectorWithoutPseudoClasses","selectorSpecificity","calculate","entry","specificity","priorComparableSelectors","priorEntry","compare","resolvedSelector","checkBeforeOperator","atImport","imports","firstParam","restParams","uri","media","importedUris","isOnlyWhitespace","whitespacesToReject","fixString","findErrorStartIndex","lastEOLIndex","ignoreEmptyLines","isRootFirst","eolWhitespaceIndex","beforeNewlineIndex","rootNode","fixText","rawsParams","rawsSelector","rawsValue","lastEOL","reportFromIndex","eachEolWhitespace","errorIndex","fixFn","findNotContiguousOrRectangular","areas","names","namedAreas","indicesByRow","row","isContiguousAndRectangular","expectedToken","expectedSameNumber","expectedRectangle","reportSent","tokenValue","firstArea","isRectangular","notContiguousOrRectangular","noEmptyFirstLineTest","getOffsetByNode","nodeColumn","nodeLine","rawAfterRoot","fixSemiIndices","removeIndices","rawBeforeNode","allowedSemi","rawBeforeIndexStart","rawAfterNode","rawOwnSemicolon","invalidPosition","nodeName","IRREGULAR_WHITESPACES_PATTERN","issue","findIrregularWhitespace","isKeyframeRule","firstDuplicateLine","disallowInList","shouldDisallowDuplicateInList","contextSelectorSet","resolvedSelectorList","flatMap","sortedSelectorList","selectorLine","previousDuplicatePosition","selectorListParsed","selectorForMessage","presentedSelectors","reportedSelectors","neverFixPositions","alwaysFixPositions","capturingGroupIndex","baseIndex","fixPosition","addLeadingZero","removeLeadingZeros","fixPositions","removeTrailingZeros","toFixed","ignoreUnits","_export_all_","allValidProperties","properties","checkPrefixed","shouldCheckPrefixed","selectorKey","disallowedProperties","expectedProp","animationName","declaredAnimations","animationNames","findAnimationName","animationNameNode","isAfterRule","isAfterSingleLineComment","ident","selectorTree","attributeNode","selectorAttributeOperatorSpaceChecker","fixedSelector","attributeNodeString","checkOperator","operatorAfter","setOperatorAfter","rawOperator","rawSpacesOperator","rawOperatorAfter","attributeSelectorString","nextCharIsSpace","fixBefore","prevCharIsSpace","fixAfter","spacesAttribute","rawAttrBefore","attrBefore","setAttrBefore","rawAfter","setAfter","isKeyframeSelector","selectorValue","resolveNestedSelectors","shouldResolveNestedSelectors","fullSelector","classNode","prevChar","hasInterpolatingAmpersand","nestedSelector","rawAttr","rawAttrAfter","attrAfter","setAttrAfter","isStandardSyntaxCombinator","selectorCombinatorSpaceChecker","locationType","parentParentNode","getRuleSelector","selectorFixed","combinatorNode","normalizeCombinator","nonSpaceCharacter","attributeName","qualifiedAttribute","selectorListCommaWhitespaceChecker","beforeSelector","afterSelector","isNonNegativeInteger","isInteger","total","container","isContextFunctionalPseudoClass","normalisedParentName","ignoreAttributes","ignoreContextFunctionalPseudoClasses","isStandardSyntaxTypeSelector","_node$parent$parent","parentType","parentValue","ignoreTypes","ignoreDescendant","ignoreChild","ignoreCompounded","ignoreNextSibling","isDescendantCombinator","hasDescendantCombinatorBefore","isChildCombinator","hasChildCombinatorBefore","hasCompoundSelector","isNextSiblingCombinator","specificitySum","specificities","sum","spec","maxChildSpecificity","maxSpec","childSpecificity","nodeSpecificity","pseudoClass","shouldSkipPseudoClassArgument","simpleSpecificity","ownValue","ownSpecificity","pseudoSpecificity","maxSpecificity","selectorCharacters","selectorAST","selectorParent","selectorNodes","rightNode","getRightNodes","_require_postcss_selector_parser_","isSimpleSelector","isNot","previousNot","indentAndTrimRight","head","tail","fixComplex","second","isSimple","not","simpleSelectors","firstSelector","fixSimple","pseudoNode","expectedPseudo","paramString","setFirstNodeSpaceBefore","setLastNodeSpaceAfter","fixedColon","pseudoElement","isDouble","isCustomSelector","prevPseudoElement","prevPseudoElementValue","compoundCount","expectedValue","ignorePseudoElements","getIndex","ignoreUnit","mediaNode","mediaNodes","lastMediaNode","imageSet","imageSetLastNode","checkDeclOrAtRule","checkRule","ignoreNamespaces","tagNode","selectorLowerCase","svgTags","mathMLTags","isCustomElement","tagName","tagNameLowerCase","time","DELAY_PROPERTIES","minimum","getDuration","valueList","isAcceptableTime","parsedTime","numTime","isIgnoredProperty","valueListList","valueListString","duration","propertiesWithShorthandNotation","ignoredCharacters","normalizedProp","hasIgnoredCharacters","valuesToShorthand","shortestFormString","top","bottom","lowerTop","lowerRight","lowerBottom","lowerLeft","canCondenseToOneValue","canCondenseToTwoValues","_top","_bottom","canCondenseToThreeValues","canCondense","valuesFormString","transformSelector","expectedPseudoElement","gridRowProps","gridColumnProps","mapLowercaseKeywordsToCamelCase","ignoreKeywords","camelCaseSvgKeywords","propLowerCase","keyword","isCounterIncrementCustomIdentValue","isCounterResetCustomIdentValue","keywordLowerCase","toLocaleLowerCase","expectedKeyword","valueListCommaWhitespaceChecker","indexToCheckAfter","determineIndex","declNode","nextChars","beforeValue","afterValue","valuePrefixes","ignoreValues","hasPrefix","newSelectorString","baseIndentLevel","indentInsideParens","indentClosingBrace","spaceCount","indentChar","warningWord","legibleExpectation","quantifiedWarningWord","indentationLevel","getDocument","indentLevel","isSafeInteger","newIndentLevel","indentSize","getIndentLevel","tabMatch","tabCount","spaceMatch","newBaseIndentLevel","firstLine","indents","foundIndents","shortest","MAX_SAFE_INTEGER","foundIndent","fill","afterEnd","nextRoot","inferRootIndentLevel","docSource","scores","lastIndentSize","lastLeadingSpacesLength","vote","leadingSpacesLength","score","leadingSpaces","bestScore","indentSizeDate","inferDocIndentSize","getRootBaseIndentLevel","calculatedLevel","checkMultilineBit","newlineIndentLevel","parentheticalDepth","ignoreInsideParans","outsideParens","precedesClosingParenthesis","expectedIndentLevel","afterNewlineSpaceMatches","afterNewlineSpace","expectedIndentation","currentIndentation","replaceIndentation","declProp","declBetween","atRuleAfterName","atRuleParams","nodeLevel","expectedOpeningBraceIndentation","isFirstChild","lastIndexOfNewline","fixIndentation","closingBraceLevel","expectedClosingBraceIndentation","declLevel","valueLevel","checkValue","ruleLevel","paramLevel","checkAtRuleParams","searchString","replaceString","newValueString","checkedValue","processValue","expectedUnit","checkMedia","mediaName","getMediaFeatureName","checkDecl","fixIndices","indextoCheckAfter","isValueNode","validator","propLength","correctQuote","erroneousQuote","avoidEscape","needsEscape","fixIndex","replaceQuote","needsCorrectEscape","_require__$alpha_value_notation_","_require__$at_rule_allowed_list_","_require__$at_rule_disallowed_list_","_require__$at_rule_empty_line_before_","_require__$at_rule_name_case_","_require__$at_rule_name_newline_after_","_require__$at_rule_semicolon_space_before_","_require__$at_rule_name_space_after_","_require__$at_rule_no_unknown_","_require__$at_rule_no_vendor_prefix_","_require__$at_rule_property_required_list_","_require__$at_rule_semicolon_newline_after_","_require__$block_closing_brace_empty_line_before_","_require__$block_closing_brace_newline_after_","_require__$block_closing_brace_newline_before_","_require__$block_closing_brace_space_after_","_require__$block_closing_brace_space_before_","_require__$block_no_empty_","_require__$block_opening_brace_newline_after_","_require__$block_opening_brace_newline_before_","_require__$block_opening_brace_space_after_","_require__$block_opening_brace_space_before_","_require__$color_function_notation_","_require__$color_hex_alpha_","_require__$color_hex_case_","_require__$color_hex_length_","_require__$color_named_","_require__$color_no_hex_","_require__$color_no_invalid_hex_","_require__$comment_empty_line_before_","_require__$comment_no_empty_","_require__$comment_pattern_","_require__$comment_whitespace_inside_","_require__$comment_word_disallowed_list_","_require__$custom_media_pattern_","_require__$custom_property_empty_line_before_","_require__$custom_property_no_missing_var_function_","_require__$custom_property_pattern_","_require__$declaration_bang_space_after_","_require__$declaration_bang_space_before_","_require__$declaration_block_no_duplicate_custom_properties_","_require__$declaration_block_no_duplicate_properties_","_require__$declaration_block_no_redundant_longhand_properties_","_require__$declaration_block_no_shorthand_property_overrides_","_require__$declaration_block_semicolon_newline_after_","_require__$declaration_block_semicolon_newline_before_","_require__$declaration_block_semicolon_space_after_","_require__$declaration_block_semicolon_space_before_","_require__$declaration_block_single_line_max_declarations_","_require__$declaration_block_trailing_semicolon_","_require__$declaration_colon_newline_after_","_require__$declaration_colon_space_after_","_require__$declaration_colon_space_before_","_require__$declaration_empty_line_before_","_require__$declaration_no_important_","_require__$declaration_property_max_values_","_require__$declaration_property_unit_allowed_list_","_require__$declaration_property_unit_disallowed_list_","_require__$declaration_property_value_allowed_list_","_require__$declaration_property_value_disallowed_list_","_require__$font_family_no_missing_generic_family_keyword_","_require__$font_family_name_quotes_","_require__$font_family_no_duplicate_names_","_require__$font_weight_notation_","_require__$function_allowed_list_","_require__$function_calc_no_unspaced_operator_","_require__$function_comma_newline_after_","_require__$function_comma_newline_before_","_require__$function_comma_space_after_","_require__$function_comma_space_before_","_require__$function_disallowed_list_","_require__$function_linear_gradient_no_nonstandard_direction_","_require__$function_max_empty_lines_","_require__$function_name_case_","_require__$function_no_unknown_","_require__$function_parentheses_newline_inside_","_require__$function_parentheses_space_inside_","_require__$function_url_no_scheme_relative_","_require__$function_url_quotes_","_require__$function_url_scheme_allowed_list_","_require__$function_url_scheme_disallowed_list_","_require__$function_whitespace_after_","_require__$hue_degree_notation_","_require__$import_notation_","_require__$keyframe_block_no_duplicate_selectors_","_require__$keyframe_declaration_no_important_","_require__$keyframes_name_pattern_","_require__$length_zero_no_unit_","linebreaks","_require__$linebreaks_","_require__$max_empty_lines_","_require__$max_line_length_","_require__$max_nesting_depth_","_require__$media_feature_colon_space_after_","_require__$media_feature_colon_space_before_","_require__$media_feature_name_allowed_list_","_require__$media_feature_name_case_","_require__$media_feature_name_disallowed_list_","_require__$media_feature_name_no_unknown_","_require__$media_feature_name_no_vendor_prefix_","_require__$media_feature_name_value_allowed_list_","_require__$media_feature_parentheses_space_inside_","_require__$media_feature_range_operator_space_after_","_require__$media_feature_range_operator_space_before_","_require__$media_query_list_comma_newline_after_","_require__$media_query_list_comma_newline_before_","_require__$media_query_list_comma_space_after_","_require__$media_query_list_comma_space_before_","_require__$named_grid_areas_no_invalid_","_require__$no_descending_specificity_","_require__$no_duplicate_at_import_rules_","_require__$no_duplicate_selectors_","_require__$no_empty_source_","_require__$no_empty_first_line_","_require__$no_eol_whitespace_","_require__$no_extra_semicolons_","_require__$no_invalid_double_slash_comments_","_require__$no_invalid_position_at_import_rule_","_require__$no_irregular_whitespace_","_require__$no_missing_end_of_source_newline_","_require__$no_unknown_animations_","_require__$number_leading_zero_","_require__$number_max_precision_","_require__$number_no_trailing_zeros_","_require__$property_allowed_list_","_require__$property_case_","_require__$property_disallowed_list_","_require__$property_no_unknown_","_require__$property_no_vendor_prefix_","_require__$rule_empty_line_before_","_require__$rule_selector_property_disallowed_list_","_require__$selector_attribute_brackets_space_inside_","_require__$selector_attribute_name_disallowed_list_","_require__$selector_attribute_operator_allowed_list_","_require__$selector_attribute_operator_disallowed_list_","_require__$selector_attribute_operator_space_after_","_require__$selector_attribute_operator_space_before_","_require__$selector_attribute_quotes_","_require__$selector_class_pattern_","_require__$selector_combinator_allowed_list_","_require__$selector_combinator_disallowed_list_","_require__$selector_combinator_space_after_","_require__$selector_combinator_space_before_","_require__$selector_descendant_combinator_no_non_space_","_require__$selector_disallowed_list_","_require__$selector_id_pattern_","_require__$selector_list_comma_newline_after_","_require__$selector_list_comma_newline_before_","_require__$selector_list_comma_space_after_","_require__$selector_list_comma_space_before_","_require__$selector_max_attribute_","_require__$selector_max_class_","_require__$selector_max_combinators_","_require__$selector_max_compound_selectors_","_require__$selector_max_empty_lines_","_require__$selector_max_id_","_require__$selector_max_pseudo_class_","_require__$selector_max_specificity_","_require__$selector_max_type_","_require__$selector_max_universal_","_require__$selector_nested_pattern_","_require__$selector_no_qualifying_type_","_require__$selector_no_vendor_prefix_","_require__$selector_not_notation_","_require__$selector_pseudo_class_allowed_list_","_require__$selector_pseudo_class_case_","_require__$selector_pseudo_class_disallowed_list_","_require__$selector_pseudo_class_no_unknown_","_require__$selector_pseudo_class_parentheses_space_inside_","_require__$selector_pseudo_element_allowed_list_","_require__$selector_pseudo_element_case_","_require__$selector_pseudo_element_colon_notation_","_require__$selector_pseudo_element_disallowed_list_","_require__$selector_pseudo_element_no_unknown_","_require__$selector_type_case_","_require__$selector_type_no_unknown_","_require__$shorthand_property_no_redundant_values_","_require__$string_no_newline_","_require__$string_quotes_","_require__$time_min_milliseconds_","_require__$unicode_bom_","_require__$unit_allowed_list_","_require__$unit_case_","_require__$unit_disallowed_list_","_require__$unit_no_unknown_","_require__$value_keyword_case_","_require__$value_list_comma_newline_after_","_require__$value_list_comma_newline_before_","_require__$value_list_comma_space_after_","_require__$value_list_comma_space_before_","_require__$value_list_max_empty_lines_","_require__$value_no_vendor_prefix_","indentation","_require__$indentation_","normalizeRuleSettings","rawSettings","getModulePath","basedir","lookup","resolveFrom","silent","globalModules","_apply","_join","glob","positive","Path","normalizeAllRuleSettings","normalizedRules","rawRuleSettings","pluginFunctions","augmentConfigExtended","cosmiconfigResult","configDir","filepath","augmentedConfig","ignoreFiles","globs","globjoin","processors","absolutizeProcessors","absolutizePaths","createStylelintResult","postcssResult","filePath","cssSyntaxError","stylelintResult","deprecations","deprecationMessage","reference","stylelintReference","invalidOptionWarnings","invalidOptionMessage","parseErrors","errored","ignored","_postcssResult","createPartialStylelintResult","configForFile","getConfigForFile","resultProcessors","resultProcessor","_options","SafeParser","nextStart","prevEnd","_require_postcss_safe_parser_","_require_postcss$lib$lazy_result_","postcssProcessor","getPostcssResult","cached","_postcssResultCache","customSyntax","resolved","require","getCustomSyntax","fileExtension","extname","extensions","previouslyInferredExtensions","cssSyntax","postcssOptions","getCode","promises","readFile","codeProcessors","sourceName","codeFilename","codeProcessor","html","js","jsx","less","md","sass","sss","scss","svelte","ts","tsx","vue","xml","xst","isPathIgnored","isPathNotFoundError","COMMAND_PREFIX","disableCommand","enableCommand","disableLineCommand","disableNextLineCommand","ALL_RULES","createDisableRange","strictStart","strictEnd","assignDisabledRanges","inlineEnd","nextComment","isStylelintCommand","checkComment","fullComment","currentLine","disableLine","ruleIsDisabled","disabledRuleName","strict","startDisabledRange","endDisabledRange","getDescription","getCommandRules","processDisableLineCommand","processDisableNextLineCommand","ruleToDisable","isAllRules","processDisableCommand","ruleToEnable","lastRange","processEnableCommand","command","fullText","splitted","descriptionStart","rangeObj","ensureRuleRanges","lastRangeForRule","peq","Uint32Array","distance","tmp","lst","pv","mv","sc","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","vlen","pb","mb","xh","ph","mh","myers_x","reportUnknownRuleNames","unknownRuleName","postcssRoot","suggestions","existRuleName","levenshtein","suggestion","extractSuggestions","rejectMessage","lintSource","existingPostcssResult","isCodeNotFile","inputFilePath","configSearchPath","configFile","_getPostcssResult","stylelintPostcssResult","stylelintOptions","postcssDoc","newlineMatch","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","performRules","rulesOrder","ruleNames","ruleFunction","ruleSettings","primaryOption","defaultSeverity","disableFix","ruleDisableFix","lintPostcssResult","_require_cosmiconfig_","STOP_DIR","createStylelint","_extendExplorer","augmentConfig","stopDir","_specifiedConfigCache","_createStylelintResult","_lintSource","stripAnsi","onlyFirst","ansiRegex","isFullwidthCodePoint","isNaN","stringWidth","width","codePointAt","hasFlag","terminatorPosition","forceColor","translateLevel","hasBasic","has256","has16m","supportsColor","haveStream","streamIsTTY","TERM","osRelease","sign","CI_NAME","TEAMCITY_VERSION","COLORTERM","TERM_PROGRAM_VERSION","TERM_PROGRAM","parseVersion","versionString","major","minor","patch","versions","supportsHyperlink","stream","FORCE_HYPERLINK","isTTY","VTE_VERSION","_export_stdout_","stdout","stderr","OSC","BEL","SEP","terminalLink","supportsHyperlinks","_require_picocolors_","levelColors","info","success","symbols","getMessageWidth","columnWidths","availableWidth","fullWidth","orderedMessages","formatMessageText","ruleString","fromValue","logFrom","cleanedMessages","normalisedValue","calculateWidths","table","getBorderCharacters","alignment","paddingRight","wrapWord","drawHorizontalLine","el","_m","p1","p2","_require__$stringFormatter_","results","returnValue","allInvalidOptionWarnings","invalidOptionsFormatter","allDeprecationWarnings","seenText","deprecationsFormatter","accum","groupBy","keyFn","fileLink","ruleLink","metadata","formatters","compact","cleanedResults","tap","unix","verbose","stringFormatter","sourceWord","ignoredCount","checkedDisplay","formatting","sourceText","warningsBySeverity","problemWord","firstResult","severityLevel","warningList","warningsByRule","tailoredOptions","isConfig","MurmurHash3","seed","h1","k1","rem","_module_","exports","murmur","FileCache","cacheLocation","hashOfConfig","cacheFile","resolvedCacheFile","looksLikeADirectory","fileStats","lstatSync","isDirectory","getCacheFile","_fileCache","fileEntryCache","_hashOfConfig","hasFileChanged","absoluteFilepath","getFileDescriptor","changed","reconcile","destroy","removeEntry","isPathValid","_require_ignore_","filterFilePaths","ignorer","filePaths","validForIgnore","notValidForIgnore","filteredByIgnore","NoFilesFoundError","fileList","AllFilesIgnoredError","validateDisableSettings","field","putIfAbsent","isWarningInRange","reportDisablesForRule","reportDisables","prepareReturnValue","stylelintResults","maxWarnings","rangeData","settings","usefulDisables","ruleRanges","allRangeComments","useful","needlessDisables","configRules","usedRules","invalidScopeDisables","alreadyReported","descriptionlessDisables","reportedDisables","foundWarnings","maxWarningsExceeded","debug","_require_debug_","ALWAYS_IGNORED_GLOBS","lint","allowEmptyInput","useCache","configBasedir","disableDefaultIgnores","files","globbyOptions","ignorePath","reportDescriptionlessDisables","reportInvalidScopeDisables","reportNeedlessDisables","fileCache","isValidCode","formatterFunction","getFileIgnorer","selected","getFormatterOptionsText","useOr","getFormatterFunction","absoluteCodeFilename","globCWD","absolutePath","fastGlob","escapePath","stripTrailing","ch","segs","normalizePath","globby","filePathsLengthBeforeIgnore","absoluteFilePaths","getStylelintResults","fixedCss","writeFileAtomic","createPlugin","resolveConfig","absoluteFilePath","createLinter","utils","checkAgainstRule","tmpPostcssResult"],"mappings":"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A,kBACA,iBACA,gBACA,gBACA,eACA,qBACA,gBAOK4K,GAAY,IAAI5K,IAAI,CACzB,iBACA,oBACA,oBACA,0BACA,kBACA,mBACA,kBACA,yBACA,oBACA,uBACA,qBACA,mBACA,0BACA,qBACA,gCASK6K,GAAa,IAAI7K,IAAI,CAC1B,gBACA,cACA,aACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,aACA,kBACA,sBACA,kBACA,oBACA,kBACA,mBACA,qBACA,4BACA,6BACA,eACA,oBACA,sBACA,gBACA,yBACA,0BACA,uBACA,aACA,aACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,aACA,cACA,oBACA,oBACA,oBACA,cACA,eACA,UACA,SACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,YACA,wBACA,eACA,yBACA,yBACA,YACA,cACA,oBACA,kBACA,oBACA,WACA,iBACA,eACA,iBACA,gBACA,sBACA,wBACA,qBACA,UACA,kBACA,kBACA,mBACA,qBACA,oBACA,sBACA,OACA,cACA,qBACA,qBACA,oBACA,qBACA,oBACA,YACA,iBACA,aACA,cACA,gBACA,cACA,YACA,aACA,kBACA,QACA,sBACA,oBACA,sBACA,qBACA,uBACA,cACA,qBACA,aACA,kBACA,yBACA,0BACA,uBACA,uBACA,mBACA,wBACA,eACA,gBACA,WACA,kBACA,kBACA,wBACA,uBACA,uBACA,2BACA,wBACA,gBACA,sBACA,yBACA,sBACA,mBACA,gBACA,mBACA,eACA,eACA,YACA,mBACA,kBACA,aACA,mBACA,sBACA,sBACA,6BACA,cACA,iBAaK8K,GAAkB,IAAI9K,IAAI,CAC/B,iBACA,WACA,YACA,mBACA,eACA,mBACA,YACA,gBACA,kBACA,eACA,wBACA,uBACA,mBACA,mBACA,iBACA,uBACA,iCACA,iCACA,eACA,gBACA,cACA,WACA,qBACA,kBACA,sBACA,sBACA,gCACA,gCACA,qBACA,eACA,qBACA,+BACA,+BACA,cACA,eAC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BACA,mBACA,oBACA,sBACA,mBACA,mBACA,aACA,YACA,YACA,aACA,WACA,iBACA,iBACA,aACA,YACA,kBACA,mBACA,cACA,YACA,YACA,uBACA,+BACA,oCACA,uBACA,8BACA,wBACA,mCACA,kCACA,uCACA,mCACA,0CACA,qCACA,oCACA,qCACA,6BACA,mCACA,mCACA,yBACA,sBACA,6BACA,4BACA,wBACA,oBACA,qCACA,8BACA,8BACA,iCACA,uBACA,iCACA,yBACA,+BACA,4BACA,gCACA,oCACA,gCACA,uBACA,yCACA,4BACA,kCACA,0CACA,oCACA,oCACA,0CACG+M,GAAYwB,gCAGhBxB,GAAY0B,eAAiBzB,GAC5BD,GAAYqB,6BACZrB,GAAYsB,8BACZtB,GAAYyB,6BACZzB,GAAYuB,0BAGbvB,GAAY2B,6BAA+B,IAAI1O,IAAI,CAClD,aACA,kBACA,mBACA,gBAGD+M,GAAY4B,wBAA0B,IAAI3O,IAAI,CAAC,MAAO,SAEtD+M,GAAY6B,wBAA0B,IAAI5O,IAAI,CAAC,QAAS,QAAS,OAAQ,UAEzE+M,GAAY8B,iCAAmC,IAAI7O,IAAI,CAAC,MAAO,KAAM,UAAW,MAAO,UAEvF+M,GAAY+B,gCAAkC,IAAI9O,IAAI,CAAC,YAAa,mBAEpE+M,GAAYgC,mBAAqB,IAAI/O,IAAI,CACxC,SACA,WACA,WACA,QACA,UACA,UACA,UACA,UACA,WACA,QACA,UACA,cACA,gBACA,QACA,eACA,gBACA,aACA,sBACA,SACA,OACA,eACA,QACA,gBACA,WACA,UACA,aACA,eACA,OACA,aACA,eACA,WACA,eACA,OACA,oBACA,UACA,qBACA,SACA,YACA,aACA,WACA,OACA,QACA,QACA,SACA,aACA,eACA,aACA,QACA,UACA,oBAGD+M,GAAYiC,4BAA8B,IAAIhP,IAAI,CACjD,cACA,WACA,gBACA,cACA,iBACA,kBACA,iBACA,mBACA,4BACA,iBACA,eACA,qBACA,yBACA,6BACA,mBACA,sBACA,kBACA,kBACA,gBACA,qBACA,uBACA,iBACA,wBACA,eACA,cACA,mBACA,mBACA,sBACA,iCAID+M,GAAYkC,6BAA+B,IAAIjP,IAAI,CAClD,aACA,WACA,YACA,YACA,QACA,MACA,gBACA,gBACA,YACA,iBACA,oBAGD+M,GAAYmC,cAAgBlC,GAC3BD,GAAY2B,6BACZ3B,GAAY4B,wBACZ5B,GAAY8B,iCACZ9B,GAAY+B,gCACZ/B,GAAYgC,mBACZhC,GAAYiC,6BAGbjC,GAAYoC,wBAA0B,IAAInP,IAAI,CAAC,aAAc,cAE7D+M,GAAYqC,uBAAyB,IAAIpP,IAAI,CAC5C,sBACA,mBACA,qBACA,oBAGD+M,GAAYsC,eAAiBrC,GAC5BD,GAAYoC,wBACZpC,GAAYqC,wBAGbrC,GAAYuC,kBAAoB,IAAItP,IAAI,CACvC,gBACA,kBACA,qBACA,qBACA,eACA,aACA,iBACA,cACA,gBACA,OACA,cAID+M,GAAYwC,yBAA2BvC,GAAUD,GAAYO,cAAe,CAAC,SAE7EP,GAAYyC,qBAAuBxC,GAAUD,GAAYO,cAAe,CAAC,SAEzEP,GAAY0C,gBAAkBzC,GAAUD,GAAYO,cAAe,CAAC,OAAQ,SAE5EP,GAAY2C,mBAAqB1C,GAAUD,GAAYO,cAAe,CAAC,OAAQ,SAE/EP,GAAY4C,iBAAmB3C,GAAUD,GAAYO,cAAe,CAAC,OAAQ,SAG7EP,GAAY6C,sBAAwB5C,GAAUD,GAAYO,cAAe,CACxE,OACA,OACA,SACA,SACA,UACA,cACA,uBACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eACA,WACA,UACA,YACA,qBACA,kBACA,aACA,mBACA,WACA,WACA,WACA,SACA,WACA,iBACA,kBACA,oBACA,UACA,WACA,iBACA,QACA,uBACA,sBACA,wBACA,MACA,iBACA,YACA,YACA,UACA,QACA,UACA,sBACA,wBACA,QACA,SACA,OACA,UACA,sBACA,wBACA,iBACA,kBACA,oBAEA,oBACA,uBACA,0BACA,0BACA,SACA,mBACA,SAGDP,GAAY8C,0BAA4B7C,GAAUD,GAAYO,cAAe,CAAC,SAAU,YAExFP,GAAY+C,uBAAyB9C,GAAUD,GAAYO,cAAe,CAAC,SAE3EP,GAAYgD,2BAA6B/C,GACxCD,GAAYO,cACZP,GAAY6C,sBACZ7C,GAAY8C,0BACZ9C,GAAY+C,wBAGb/C,GAAYiD,kBAAoBhD,GAAUD,GAAYO,cAAe,CACpE,SACA,SACA,YAGDP,GAAYkD,oBAAsBjD,GAAUD,GAAYO,cAAe,CACtE,SACA,OACA,mBACA,OACA,mBACA,sBACA,0BACA,6BACA,uBACA,0BACA,aACA,gBACA,aACA,aACA,iBACA,cACA,kBACA,UACA,eACA,cACA,gBACA,oBACA,eACA,qBACA,oBACA,UACA,eACA,QACA,QACA,QACA,QACA,aACA,cACA,aACA,qBACA,SAGDP,GAAYmD,oBAAsBlD,GAAUD,GAAYO,cAAe,CACtE,iBACA,YACA,kBACA,kBACA,gBACA,WACA,iBACA,mBAGDP,GAAYoD,iBAAmBnD,GAAUD,GAAYO,cAAe,CACnE,WACA,UACA,QACA,SACA,QACA,UACA,WACA,SACA,YAGDP,GAAYqD,mBAAqBpD,GAAUD,GAAYO,cAAe,CAAC,WAEvEP,GAAYsD,sBAAwBrD,GACnCD,GAAYO,cACZP,GAAYiD,kBACZjD,GAAYkD,oBACZlD,GAAYa,mBACZb,GAAYmD,oBACZnD,GAAYoD,iBACZpD,GAAYqD,mBACZrD,GAAYS,oBAGbT,GAAYuD,yBAA2B,IAAItQ,IAAI,CAAC,OAAQ,OAGxD+M,GAAYwD,kBAAoB,IAAIvQ,IAAI,CACvC,kBACA,WACA,aACA,YACA,mBACA,qBACA,cACA,gBACA,eACA,sBACA,WACA,cACA,cACA,YACA,eACA,iBAID+M,GAAYyD,QAAUxD,GAAUD,GAAYwD,kBAAmB,CAC9D,aACA,QACA,oBACA,UACA,gBACA,eACA,kBACA,WACA,YACA,sBACA,SACA,YACA,QACA,QACA,YACA,OACA,YACA,OACA,WACA,WACA,YACA,WACA,QACA,aAIDxD,GAAY0D,4BAA8B,IAAIzQ,IAAI,CACjD,sBACA,gBACA,eACA,0BACA,oBACA,mBACA,0BACA,oBACA,qBAID+M,GAAY2D,kBAAoB1D,GAAUD,GAAY0D,4BAA6B,CAClF,YACA,cACA,eACA,QACA,cACA,cACA,eACA,gBACA,gBACA,OACA,SACA,QACA,kBACA,cACA,mBACA,YACA,kBACA,aACA,iBACA,iBACA,YACA,mBACA,YACA,kBACA,aACA,iBACA,iBACA,YACA,aACA,cACA,iBACA,kBACA,UACA,uBACA,mBACA,yBACA,+BACA,aACA,OACA,YACA,SACA,sBACA,UAID1D,GAAY4D,aAAe,IAAI3Q,IAAI,CAClC,eACA,gBACA,eACA,aACA,aACA,kBACA,eACA,aACA,cACA,WACA,YACA,gBACA,iBACA,kBACA,sBACA,iBACA,WACA,OACA,WACA,YACA,mBACA,aACA,kBACA,oBACA,eACA,SACA,cACA,eAKD+M,GAAY6D,iBAAmB,IAAI5Q,81BAGnC+M,GAAY8D,oBAAsB,IAAI7Q,IAAI,CACzC,UACA,SACA,WACA,MACA,QACA,SACA,UACA,MACA,OACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,OACA,UACA,YACA,SACA,SACA,KACA,QAGD+M,GAAY+D,0BAA4B,IAAI9Q,IAAI,CAC/C,WACA,cACA,eACA,eACA,gBACA,mBACA,WACA,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,iBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,eACA,gBACA,WACA,iBACA,iBACA,aCvyBD,MAAMtE,GAAW,qBAEXgC,GAAWD,EAAa/B,GAAU,CACvC4K,SAAWhB,GAAD,+BAAArH,OAA2CqH,EAA3C,OAQLnI,GAAO,CAACuE,EAASC,IACf,CAACE,EAAMnM,KACQuK,EACpBvK,EACAgG,GACA,CAAEgF,OAAQgB,GACV,CACChB,OAAQiB,EACRlB,SAAU,CACTgG,cAAe,CAACzH,EAAUD,IAE3B4B,UAAU,KAQZkB,EAAK6E,aAAapB,IACjB,IAAKU,GAAuBV,GAC3B,OAGD,MAAMxN,EAAOwN,EAAOxN,KAGpB,GAAIsD,EAAeuG,EAAkB,gBAAiB2D,EAAOxN,MAC5D,OAGD,GAAIoP,GAAcpP,IAASiV,GAAYyD,QAAQvP,IAAInJ,EAAK8K,e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"}