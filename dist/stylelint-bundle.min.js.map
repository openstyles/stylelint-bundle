{"version":3,"file":"stylelint-bundle.min.js","sources":["../node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.js","../node_modules/stylelint/lib/utils/report.js","../node_modules/stylelint/lib/utils/ruleMessages.js","../node_modules/stylelint/lib/utils/arrayEqual.js","../node_modules/is-plain-object/dist/is-plain-object.mjs","../node_modules/stylelint/lib/utils/validateTypes.js","../node_modules/stylelint/lib/utils/validateOptions.js","../node_modules/stylelint/lib/utils/vendor.js","../node_modules/stylelint/lib/rules/at-rule-allowed-list/index.js","../node_modules/postcss-value-parser/lib/parse.js","../node_modules/postcss-value-parser/lib/walk.js","../node_modules/postcss-value-parser/lib/stringify.js","../node_modules/postcss-value-parser/lib/unit.js","../node_modules/postcss-value-parser/lib/index.js","../node_modules/stylelint/lib/utils/declarationValueIndex.js","../node_modules/stylelint/lib/utils/getDeclarationValue.js","../node_modules/stylelint/lib/utils/hasLessInterpolation.js","../node_modules/stylelint/lib/utils/hasPsvInterpolation.js","../node_modules/stylelint/lib/utils/hasScssInterpolation.js","../node_modules/stylelint/lib/utils/hasTplInterpolation.js","../node_modules/stylelint/lib/utils/hasInterpolation.js","../node_modules/stylelint/lib/utils/isStandardSyntaxValue.js","../node_modules/stylelint/lib/utils/matchesStringOrRegExp.js","../node_modules/stylelint/lib/utils/optionsMatches.js","../node_modules/stylelint/lib/utils/setDeclarationValue.js","../node_modules/stylelint/lib/rules/alpha-value-notation/index.js","../node_modules/stylelint/lib/rules/at-rule-disallowed-list/index.js","../node_modules/stylelint/lib/rules/atRuleNameSpaceChecker.js","../node_modules/stylelint/lib/utils/configurationError.js","../node_modules/stylelint/lib/utils/isSingleLineString.js","../node_modules/stylelint/lib/utils/isWhitespace.js","../node_modules/stylelint/lib/utils/whitespaceChecker.js","../node_modules/stylelint/lib/rules/at-rule-name-newline-after/index.js","../node_modules/stylelint/lib/utils/hasBlock.js","../node_modules/stylelint/lib/utils/rawNodeString.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-space-before/index.js","../node_modules/stylelint/lib/utils/nextNonCommentNode.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js","../node_modules/stylelint/lib/utils/typeGuards.js","../node_modules/stylelint/lib/utils/beforeBlockString.js","../node_modules/stylelint/lib/utils/blockString.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-after/index.js","../node_modules/stylelint/lib/utils/hasEmptyBlock.js","../node_modules/stylelint/lib/utils/hasEmptyLine.js","../node_modules/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js","../node_modules/stylelint/lib/utils/addEmptyLineAfter.js","../node_modules/stylelint/lib/utils/removeEmptyLinesAfter.js","../node_modules/stylelint/lib/rules/at-rule-name-space-after/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/block-no-empty/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-after/index.js","../node_modules/stylelint/lib/utils/isAutoprefixable.js","../node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/at-rule-name-case/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-after/index.js","../node_modules/stylelint/lib/rules/color-hex-alpha/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-after/index.js","../node_modules/stylelint/lib/rules/color-no-invalid-hex/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxHexColor.js","../node_modules/stylelint/lib/utils/isValidHex.js","../node_modules/stylelint/lib/utils/isStandardSyntaxFunction.js","../node_modules/stylelint/lib/utils/isStandardSyntaxColorFunction.js","../node_modules/stylelint/lib/rules/color-function-notation/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-before/index.js","../node_modules/stylelint/lib/utils/flattenArray.js","../node_modules/stylelint/lib/utils/validateObjectWithArrayProps.js","../node_modules/stylelint/lib/rules/at-rule-property-required-list/index.js","../node_modules/stylelint/lib/utils/addEmptyLineBefore.js","../node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/isSharedLineComment.js","../node_modules/stylelint/lib/utils/isAfterComment.js","../node_modules/stylelint/lib/utils/isFirstNested.js","../node_modules/stylelint/lib/utils/isFirstNodeOfRoot.js","../node_modules/stylelint/lib/utils/isStandardSyntaxComment.js","../node_modules/stylelint/lib/utils/removeEmptyLinesBefore.js","../node_modules/stylelint/lib/rules/comment-empty-line-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-before/index.js","../node_modules/stylelint/lib/rules/color-hex-length/index.js","../node_modules/stylelint/lib/rules/comment-pattern/index.js","../node_modules/stylelint/lib/rules/comment-whitespace-inside/index.js","../node_modules/stylelint/lib/reference/propertySets.js","../node_modules/colord/index.mjs","../node_modules/colord/plugins/hwb.mjs","../node_modules/colord/plugins/lab.mjs","../node_modules/colord/plugins/lch.mjs","../node_modules/stylelint/lib/rules/color-named/colordUtils.js","../node_modules/colord/plugins/names.mjs","../node_modules/stylelint/lib/rules/color-named/index.js","../node_modules/stylelint/lib/utils/isCustomProperty.js","../node_modules/stylelint/lib/utils/isScssVariable.js","../node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.js","../node_modules/stylelint/lib/rules/custom-property-empty-line-before/index.js","../node_modules/style-search/index.js","../node_modules/stylelint/lib/rules/declarationBangSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-bang-space-after/index.js","../node_modules/stylelint/lib/rules/comment-no-empty/index.js","../node_modules/stylelint/lib/reference/keywordSets.js","../node_modules/stylelint/lib/rules/at-rule-no-unknown/index.js","../node_modules/stylelint/lib/utils/atRuleParamIndex.js","../node_modules/stylelint/lib/rules/custom-media-pattern/index.js","../node_modules/stylelint/lib/rules/custom-property-no-missing-var-function/index.js","../node_modules/stylelint/lib/rules/color-no-hex/index.js","../node_modules/stylelint/lib/utils/containsString.js","../node_modules/stylelint/lib/rules/comment-word-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-bang-space-before/index.js","../node_modules/stylelint/lib/utils/eachDeclarationBlock.js","../node_modules/stylelint/lib/utils/isStandardSyntaxProperty.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-custom-properties/index.js","../node_modules/stylelint/lib/reference/shorthandData.js","../node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/declarationColonSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-colon-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js","../node_modules/stylelint/lib/rules/custom-property-pattern/index.js","../node_modules/stylelint/lib/rules/declaration-colon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js","../node_modules/stylelint/lib/rules/declaration-property-max-values/index.js","../node_modules/stylelint/lib/utils/validateObjectWithProps.js","../node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js","../node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.js","../node_modules/stylelint/lib/rules/declaration-empty-line-before/index.js","../node_modules/stylelint/lib/utils/getImportantPosition.js","../node_modules/stylelint/lib/rules/declaration-no-important/index.js","../node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js","../node_modules/stylelint/lib/utils/isNumbery.js","../node_modules/stylelint/lib/utils/isVariable.js","../node_modules/stylelint/lib/rules/font-weight-notation/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-allowed-list/index.js","../node_modules/stylelint/lib/utils/isValidFontSize.js","../node_modules/stylelint/lib/utils/findFontFamily.js","../shim/process.js","../node_modules/picocolors/picocolors.js","../node_modules/postcss/lib/tokenize.js","../node_modules/postcss/lib/terminal-highlight.js","../node_modules/postcss/lib/css-syntax-error.js","../node_modules/postcss/lib/symbols.js","../node_modules/postcss/lib/stringifier.js","../node_modules/postcss/lib/stringify.js","../node_modules/postcss/lib/node.js","../node_modules/postcss/lib/declaration.js","../shim/empty.js","../node_modules/postcss/node_modules/nanoid/non-secure/index.js","../node_modules/postcss/lib/previous-map.js","../node_modules/postcss/lib/input.js","../node_modules/postcss/lib/map-generator.js","../node_modules/postcss/lib/container.js","../node_modules/postcss/lib/document.js","../node_modules/postcss/lib/comment.js","../node_modules/postcss/lib/warn-once.js","../node_modules/postcss/lib/warning.js","../node_modules/postcss/lib/result.js","../node_modules/postcss/lib/at-rule.js","../node_modules/postcss/lib/root.js","../node_modules/postcss/lib/list.js","../node_modules/postcss/lib/rule.js","../node_modules/postcss/lib/parser.js","../node_modules/postcss/lib/parse.js","../node_modules/postcss/lib/lazy-result.js","../node_modules/postcss/lib/no-work-result.js","../node_modules/postcss/lib/processor.js","../node_modules/postcss/lib/fromJSON.js","../node_modules/postcss/lib/postcss.js","../node_modules/postcss/lib/postcss.mjs","../node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.js","../node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/getUnitFromValueNode.js","../node_modules/stylelint/lib/utils/blurInterpolation.js","../node_modules/stylelint/lib/rules/declaration-property-unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/font-family-name-quotes/index.js","../node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.js","../node_modules/stylelint/lib/rules/function-disallowed-list/index.js","../node_modules/stylelint/lib/rules/functionCommaSpaceFix.js","../node_modules/stylelint/lib/rules/functionCommaSpaceChecker.js","../node_modules/stylelint/lib/rules/function-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/function-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-comma-space-after/index.js","../node_modules/stylelint/lib/rules/function-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomFunction.js","../node_modules/stylelint/lib/rules/function-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-colon-space-before/index.js","../node_modules/stylelint/lib/rules/function-comma-space-before/index.js","../node_modules/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js","../node_modules/stylelint/node_modules/balanced-match/index.js","../node_modules/stylelint/lib/utils/functionArgumentsSearch.js","../node_modules/stylelint/lib/utils/getSchemeFromUrl.js","../node_modules/stylelint/lib/utils/isStandardSyntaxUrl.js","../node_modules/stylelint/lib/rules/function-url-scheme-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-url-no-scheme-relative/index.js","../node_modules/stylelint/lib/rules/function-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/function-parentheses-newline-inside/index.js","../node_modules/stylelint/lib/rules/keyframe-declaration-no-important/index.js","../node_modules/stylelint/lib/utils/setAtRuleParams.js","../node_modules/stylelint/lib/utils/getAtRuleParams.js","../node_modules/stylelint/lib/rules/import-notation/index.js","../node_modules/stylelint/lib/rules/function-whitespace-after/index.js","../node_modules/stylelint/lib/rules/function-url-scheme-disallowed-list/index.js","../node_modules/stylelint/lib/rules/function-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js","../node_modules/stylelint/lib/rules/keyframes-name-pattern/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxSelector.js","../node_modules/stylelint/lib/utils/isStandardSyntaxRule.js","../node_modules/postcss-selector-parser/dist/util/unesc.js","../node_modules/postcss-selector-parser/dist/util/getProp.js","../node_modules/postcss-selector-parser/dist/util/ensureObject.js","../node_modules/postcss-selector-parser/dist/util/stripComments.js","../node_modules/postcss-selector-parser/dist/util/index.js","../node_modules/postcss-selector-parser/dist/selectors/node.js","../node_modules/postcss-selector-parser/dist/selectors/types.js","../node_modules/postcss-selector-parser/dist/selectors/container.js","../node_modules/postcss-selector-parser/dist/selectors/root.js","../node_modules/postcss-selector-parser/dist/selectors/selector.js","../node_modules/cssesc/cssesc.js","../node_modules/postcss-selector-parser/dist/selectors/className.js","../node_modules/postcss-selector-parser/dist/selectors/comment.js","../node_modules/postcss-selector-parser/dist/selectors/id.js","../node_modules/postcss-selector-parser/dist/selectors/namespace.js","../node_modules/postcss-selector-parser/dist/selectors/tag.js","../node_modules/postcss-selector-parser/dist/selectors/string.js","../node_modules/postcss-selector-parser/dist/selectors/pseudo.js","../node_modules/util-deprecate/node.js","../shim/util.js","../node_modules/postcss-selector-parser/dist/selectors/attribute.js","../node_modules/postcss-selector-parser/dist/selectors/universal.js","../node_modules/postcss-selector-parser/dist/selectors/combinator.js","../node_modules/postcss-selector-parser/dist/selectors/nesting.js","../node_modules/postcss-selector-parser/dist/sortAscending.js","../node_modules/postcss-selector-parser/dist/tokenTypes.js","../node_modules/postcss-selector-parser/dist/tokenize.js","../node_modules/postcss-selector-parser/dist/parser.js","../node_modules/postcss-selector-parser/dist/processor.js","../node_modules/postcss-selector-parser/dist/selectors/constructors.js","../node_modules/postcss-selector-parser/dist/selectors/guards.js","../node_modules/postcss-selector-parser/dist/selectors/index.js","../node_modules/postcss-selector-parser/dist/index.js","../node_modules/stylelint/lib/rules/max-nesting-depth/index.js","../node_modules/stylelint/lib/rules/max-empty-lines/index.js","../node_modules/clone-regexp/index.js","../node_modules/is-regexp/index.js","../node_modules/execall/index.js","../node_modules/stylelint/lib/rules/max-line-length/index.js","../node_modules/stylelint/lib/rules/keyframe-block-no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/linebreaks/index.js","../node_modules/stylelint/lib/reference/mathFunctions.js","../node_modules/stylelint/lib/rules/length-zero-no-unit/index.js","../node_modules/stylelint/lib/utils/isMathFunction.js","../node_modules/stylelint/lib/rules/function-url-quotes/index.js","../node_modules/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-after/index.js","../node_modules/postcss-media-query-parser/dist/nodes/Node.js","../node_modules/postcss-media-query-parser/dist/nodes/Container.js","../node_modules/postcss-media-query-parser/dist/parsers.js","../node_modules/postcss-media-query-parser/dist/index.js","../node_modules/stylelint/lib/utils/isRangeContextMediaFeature.js","../node_modules/stylelint/lib/rules/rangeContextNodeParser.js","../node_modules/stylelint/lib/rules/media-feature-name-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/color-hex-case/index.js","../node_modules/stylelint/lib/rules/hue-degree-notation/index.js","../node_modules/stylelint/lib/utils/isCustomMediaQuery.js","../node_modules/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js","../node_modules/stylelint/lib/rules/media-feature-name-case/index.js","../node_modules/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.js","../node_modules/stylelint/lib/rules/findMediaOperator.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-before/index.js","../node_modules/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-before/index.js","../node_modules/postcss-resolve-nested-selector/index.js","../node_modules/@csstools/selector-specificity/dist/index.mjs","../node_modules/stylelint/lib/utils/findAtRuleContext.js","../node_modules/stylelint/lib/utils/nodeContextLookup.js","../node_modules/stylelint/lib/utils/parseSelector.js","../node_modules/stylelint/lib/rules/no-descending-specificity/index.js","../node_modules/stylelint/lib/rules/media-feature-name-allowed-list/index.js","../node_modules/stylelint/lib/rules/media-feature-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/findNotContiguousOrRectangular.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/isRectangular.js","../node_modules/stylelint/lib/rules/no-empty-source/index.js","../node_modules/stylelint/lib/rules/no-invalid-position-at-import-rule/index.js","../node_modules/stylelint/lib/rules/no-irregular-whitespace/index.js","../node_modules/stylelint/lib/utils/isKeyframeRule.js","../node_modules/stylelint/lib/rules/no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-disallowed-list/index.js","../node_modules/stylelint/lib/rules/no-missing-end-of-source-newline/index.js","../node_modules/stylelint/lib/rules/no-unknown-animations/index.js","../node_modules/stylelint/lib/utils/findAnimationName.js","../node_modules/stylelint/lib/rules/no-extra-semicolons/index.js","../node_modules/stylelint/lib/rules/property-case/index.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-after/index.js","../node_modules/known-css-properties/index.js","../node_modules/stylelint/lib/rules/property-no-unknown/index.js","../node_modules/stylelint/lib/utils/isOnlyWhitespace.js","../node_modules/stylelint/lib/rules/no-eol-whitespace/index.js","../node_modules/stylelint/lib/rules/no-invalid-double-slash-comments/index.js","../node_modules/stylelint/lib/rules/number-leading-zero/index.js","../node_modules/stylelint/lib/rules/number-no-trailing-zeros/index.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-before/index.js","../node_modules/stylelint/lib/rules/function-name-case/index.js","../node_modules/stylelint/lib/rules/property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js","../node_modules/stylelint/lib/rules/rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isAfterSingleLineComment.js","../node_modules/stylelint/lib/rules/no-empty-first-line/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/property-allowed-list/index.js","../node_modules/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-before/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxCombinator.js","../node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-quotes/index.js","../node_modules/stylelint/lib/utils/getRuleSelector.js","../node_modules/stylelint/lib/rules/selectorCombinatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-combinator-space-before/index.js","../node_modules/stylelint/lib/rules/selector-combinator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-id-pattern/index.js","../node_modules/stylelint/lib/utils/isNonNegativeInteger.js","../node_modules/stylelint/lib/rules/selector-max-combinators/index.js","../node_modules/stylelint/lib/rules/number-max-precision/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/selector-combinator-space-after/index.js","../node_modules/stylelint/lib/utils/isContextFunctionalPseudoClass.js","../node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.js","../node_modules/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-max-pseudo-class/index.js","../node_modules/stylelint/lib/rules/selector-max-attribute/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/selector-max-class/index.js","../node_modules/stylelint/lib/rules/selector-nested-pattern/index.js","../node_modules/stylelint/lib/utils/isKeyframeSelector.js","../node_modules/stylelint/lib/rules/selector-class-pattern/index.js","../node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-max-empty-lines/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxTypeSelector.js","../node_modules/stylelint/lib/rules/selector-max-type/index.js","../node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.js","../node_modules/stylelint/lib/rules/selector-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-max-id/index.js","../node_modules/stylelint/lib/rules/selector-max-universal/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomSelector.js","../node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-not-notation/index.js","../node_modules/stylelint/lib/rules/selector-max-specificity/index.js","../node_modules/stylelint/lib/rules/selector-type-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomElement.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-case/index.js","../node_modules/stylelint/lib/utils/transformSelector.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js","../node_modules/stylelint/lib/rules/selector-type-case/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-case/index.js","../node_modules/stylelint/lib/rules/unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/string-no-newline/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-disallowed-list/index.js","../node_modules/stylelint/lib/rules/unicode-bom/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/time-min-milliseconds/index.js","../node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js","../node_modules/stylelint/lib/rules/unit-case/index.js","../node_modules/stylelint/lib/rules/valueListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/string-quotes/index.js","../node_modules/stylelint/lib/rules/unit-no-unknown/index.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/value-keyword-case/index.js","../node_modules/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js","../node_modules/stylelint/lib/utils/isCounterResetCustomIdentValue.js","../node_modules/stylelint/lib/rules/value-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/rule-selector-property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/value-list-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/indentation/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js","../node_modules/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js","../node_modules/stylelint/lib/rules/index.js","../node_modules/stylelint/lib/normalizeRuleSettings.js","../node_modules/stylelint/lib/utils/getModulePath.js","../node_modules/globjoin/index.js","../node_modules/stylelint/lib/normalizeAllRuleSettings.js","../node_modules/stylelint/lib/augmentConfig.js","../node_modules/stylelint/lib/createStylelintResult.js","../node_modules/stylelint/lib/createPartialStylelintResult.js","../shim/getConfigForFile.js","../node_modules/postcss-safe-parser/lib/safe-parser.js","../node_modules/postcss-safe-parser/lib/safe-parse.js","../node_modules/stylelint/lib/getPostcssResult.js","../shim/isPathIgnored.js","../node_modules/stylelint/lib/utils/isPathNotFoundError.js","../node_modules/stylelint/lib/assignDisabledRanges.js","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/stylelint/lib/reportUnknownRuleNames.js","../node_modules/stylelint/lib/lintSource.js","../node_modules/stylelint/lib/lintPostcssResult.js","../shim/os.js","../node_modules/stylelint/lib/createStylelint.js","../node_modules/ansi-regex/index.js","../node_modules/strip-ansi/index.js","../node_modules/is-fullwidth-code-point/index.js","../node_modules/string-width/index.js","../node_modules/emoji-regex/index.js","../node_modules/supports-hyperlinks/node_modules/has-flag/index.js","../node_modules/supports-hyperlinks/node_modules/supports-color/index.js","../node_modules/supports-hyperlinks/index.js","../shim/tty.js","../node_modules/stylelint/lib/formatters/terminalLink.js","../node_modules/stylelint/lib/formatters/stringFormatter.js","../node_modules/stylelint/lib/formatters/verboseFormatter.js","../node_modules/stylelint/lib/formatters/index.js","../node_modules/stylelint/lib/formatters/compactFormatter.js","../node_modules/stylelint/lib/formatters/jsonFormatter.js","../node_modules/stylelint/lib/formatters/tapFormatter.js","../node_modules/stylelint/lib/formatters/unixFormatter.js","../node_modules/stylelint/lib/postcssPlugin.js","../node_modules/imurmurhash/imurmurhash.js","../node_modules/stylelint/lib/utils/hash.js","../node_modules/stylelint/lib/utils/FileCache.js","../node_modules/stylelint/lib/utils/getCacheFile.js","../node_modules/stylelint/lib/utils/filterFilePaths.js","../node_modules/stylelint/lib/utils/noFilesFoundError.js","../node_modules/stylelint/lib/utils/allFilesIgnoredError.js","../node_modules/stylelint/lib/validateDisableSettings.js","../node_modules/stylelint/lib/utils/putIfAbsent.js","../node_modules/stylelint/lib/needlessDisables.js","../node_modules/stylelint/lib/reportDisables.js","../node_modules/stylelint/lib/prepareReturnValue.js","../node_modules/stylelint/lib/invalidScopeDisables.js","../node_modules/stylelint/lib/descriptionlessDisables.js","../node_modules/stylelint/lib/standalone.js","../node_modules/stylelint/lib/index.js","../node_modules/stylelint/lib/utils/getFormatterOptionsText.js","../node_modules/normalize-path/index.js","../node_modules/stylelint/lib/createPlugin.js","../node_modules/stylelint/lib/resolveConfig.js","../node_modules/stylelint/lib/utils/checkAgainstRule.js"],"sourcesContent":["'use strict';\n\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\nmodule.exports = function (atRule) {\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\nmodule.exports = function report(problem) {\n\tconst { ruleName, result, message, line, node, index, endIndex, word } = problem;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\tconst { start } = (node && node.rangeBy({ index, endIndex })) || {};\n\n\t// If a line is not passed, use the node.rangeBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || (start && start.line);\n\n\tif (!startLine) {\n\t\tthrow new Error('You must pass either a node or a line number');\n\t}\n\n\tconst { ignoreDisables } = result.stylelint.config || {};\n\n\tif (result.stylelint.disabledRanges) {\n\t\tconst ranges =\n\t\t\tresult.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the problem is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\t// Collect disabled warnings\n\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\tconst disabledWarnings =\n\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\trule: ruleName,\n\t\t\t\t\tline: startLine,\n\t\t\t\t});\n\n\t\t\t\tif (!ignoreDisables) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\t/** @type {import('stylelint').WarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (problem.start) {\n\t\twarningProperties.start = problem.start;\n\t} else if (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (problem.end) {\n\t\twarningProperties.end = problem.end;\n\t} else if (endIndex) {\n\t\twarningProperties.endIndex = endIndex;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst warningMessage =\n\t\t(result.stylelint.customMessages && result.stylelint.customMessages[ruleName]) || message;\n\n\tresult.warn(warningMessage, warningProperties);\n};\n","'use strict';\n\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\nfunction ruleMessages(ruleName, messages) {\n\t/** @typedef {keyof T} K */\n\tconst newMessages = /** @type {R} */ ({});\n\n\tfor (const [messageId, messageText] of /** @type {[K, T[K]][]} */ (Object.entries(messages))) {\n\t\tif (typeof messageText === 'string') {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (`${messageText} (${ruleName})`);\n\t\t} else {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (\n\t\t\t\t(...args) => `${messageText(...args)} (${ruleName})`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn newMessages;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.ruleMessages} */ (ruleMessages);\n","'use strict';\n\n/**\n * Tests if two arrays are equal.\n *\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nmodule.exports = function arrayEqual(a, b) {\n\tif (!Array.isArray(a) || !Array.isArray(b)) return false;\n\n\tif (a.length !== b.length) return false;\n\n\treturn a.every((elem, index) => elem === b[index]);\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","'use strict';\n\nconst { isPlainObject: _isPlainObject } = require('is-plain-object');\n\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\nfunction isBoolean(value) {\n\treturn typeof value === 'boolean' || value instanceof Boolean;\n}\n\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\nfunction isFunction(value) {\n\treturn typeof value === 'function' || value instanceof Function;\n}\n\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\nfunction isNullish(value) {\n\treturn value == null;\n}\n\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\nfunction isNumber(value) {\n\treturn typeof value === 'number' || value instanceof Number;\n}\n\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\nfunction isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\nfunction isString(value) {\n\treturn typeof value === 'string' || value instanceof String;\n}\n\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\nfunction isPlainObject(value) {\n\treturn _isPlainObject(value);\n}\n\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\nfunction assert(value, message = undefined) {\n\tif (message) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value, message);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value);\n\t}\n}\n\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\nfunction assertFunction(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\nfunction assertNumber(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\nfunction assertString(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n\tisBoolean,\n\tisFunction,\n\tisNullish,\n\tisNumber,\n\tisRegExp,\n\tisString,\n\tisPlainObject,\n\n\tassert,\n\tassertFunction,\n\tassertNumber,\n\tassertString,\n};\n","'use strict';\n\nconst arrayEqual = require('./arrayEqual');\nconst { isPlainObject } = require('./validateTypes');\n\nconst IGNORED_OPTIONS = new Set(['severity', 'message', 'reportDisables', 'disableFix']);\n\n/** @typedef {import('stylelint').RuleOptions} RuleOptions */\n/** @typedef {import('stylelint').RuleOptionsPossible} Possible */\n/** @typedef {import('stylelint').RuleOptionsPossibleFunc} PossibleFunc */\n\n/**\n * Validate a rule's options.\n *\n * See existing rules for examples.\n *\n * @param {import('stylelint').PostcssResult} result - postcss result\n * @param {string} ruleName\n * @param {...RuleOptions} optionDescriptions - Each optionDescription can\n *   have the following properties:\n *   - `actual` (required): the actual passed option value or object.\n *   - `possible` (required): a schema representation of what values are\n *      valid for those options. `possible` should be an object if the\n *      options are an object, with corresponding keys; if the options are not an\n *      object, `possible` isn't, either. All `possible` value representations\n *      should be **arrays of either values or functions**. Values are === checked\n *      against `actual`. Functions are fed `actual` as an argument and their\n *      return value is interpreted: truthy = valid, falsy = invalid.\n *    - `optional` (optional): If this is `true`, `actual` can be undefined.\n * @return {boolean} Whether or not the options are valid (true = valid)\n */\nfunction validateOptions(result, ruleName, ...optionDescriptions) {\n\tlet noErrors = true;\n\n\tfor (const optionDescription of optionDescriptions) {\n\t\tvalidate(optionDescription, ruleName, complain);\n\t}\n\n\t/**\n\t * @param {string} message\n\t */\n\tfunction complain(message) {\n\t\tnoErrors = false;\n\t\tresult.warn(message, {\n\t\t\tstylelintType: 'invalidOption',\n\t\t});\n\t\tresult.stylelint = result.stylelint || {\n\t\t\tdisabledRanges: {},\n\t\t\truleSeverities: {},\n\t\t\tcustomMessages: {},\n\t\t\truleMetadata: {},\n\t\t};\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\treturn noErrors;\n}\n\n/**\n * @param {RuleOptions} opts\n * @param {string} ruleName\n * @param {(message: string) => void} complain\n */\nfunction validate(opts, ruleName, complain) {\n\tconst possible = opts.possible;\n\tconst actual = opts.actual;\n\tconst optional = opts.optional;\n\n\tif (actual === null || arrayEqual(actual, [null])) {\n\t\treturn;\n\t}\n\n\tconst nothingPossible =\n\t\tpossible === undefined || (Array.isArray(possible) && possible.length === 0);\n\n\tif (nothingPossible && actual === true) {\n\t\treturn;\n\t}\n\n\tif (actual === undefined) {\n\t\tif (nothingPossible || optional) {\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Expected option value for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (nothingPossible) {\n\t\tif (optional) {\n\t\t\tcomplain(\n\t\t\t\t`Incorrect configuration for rule \"${ruleName}\". Rule should have \"possible\" values for options validation`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Unexpected option value ${stringify(actual)} for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (typeof possible === 'function') {\n\t\tif (!possible(actual)) {\n\t\t\tcomplain(`Invalid option ${stringify(actual)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If `possible` is an array instead of an object ...\n\tif (Array.isArray(possible)) {\n\t\tfor (const a of [actual].flat()) {\n\t\t\tif (isValid(possible, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid option value ${stringify(a)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If actual is NOT an object ...\n\tif (!isPlainObject(actual) || typeof actual !== 'object' || actual == null) {\n\t\tcomplain(\n\t\t\t`Invalid option value ${stringify(actual)} for rule \"${ruleName}\": should be an object`,\n\t\t);\n\n\t\treturn;\n\t}\n\n\tfor (const [optionName, optionValue] of Object.entries(actual)) {\n\t\tif (IGNORED_OPTIONS.has(optionName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst possibleValue = possible && possible[optionName];\n\n\t\tif (!possibleValue) {\n\t\t\tcomplain(`Invalid option name \"${optionName}\" for rule \"${ruleName}\"`);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const a of [optionValue].flat()) {\n\t\t\tif (isValid(possibleValue, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid value ${stringify(a)} for option \"${optionName}\" of rule \"${ruleName}\"`);\n\t\t}\n\t}\n}\n\n/**\n * @param {Possible | Possible[]} possible\n * @param {unknown} actual\n * @returns {boolean}\n */\nfunction isValid(possible, actual) {\n\tfor (const possibility of [possible].flat()) {\n\t\tif (typeof possibility === 'function' && possibility(actual)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (actual === possibility) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nfunction stringify(value) {\n\tif (typeof value === 'string') {\n\t\treturn `\"${value}\"`;\n\t}\n\n\treturn `\"${JSON.stringify(value)}\"`;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.validateOptions} */ (validateOptions);\n","'use strict';\n\n/**\n * Contains helpers for working with vendor prefixes.\n *\n * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2\n *\n * @namespace vendor\n */\nmodule.exports = {\n\t/**\n\t * Returns the vendor prefix extracted from an input string.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} vendor prefix or empty string\n\t *\n\t * @example\n\t * vendor.prefix('-moz-tab-size') //=> '-moz-'\n\t * vendor.prefix('tab-size')      //=> ''\n\t */\n\tprefix(prop) {\n\t\tconst match = prop.match(/^(-\\w+-)/);\n\n\t\tif (match) {\n\t\t\treturn match[0] || '';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\t/**\n\t * Returns the input string stripped of its vendor prefix.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} String name without vendor prefixes.\n\t *\n\t * @example\n\t * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n\t */\n\tunprefixed(prop) {\n\t\treturn prop.replace(/^-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n","module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n","function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n","var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n","var parse = require(\"./parse\");\nvar walk = require(\"./walk\");\nvar stringify = require(\"./stringify\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = require(\"./unit\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n","'use strict';\n\n/**\n * Get the index of a declaration's value\n *\n * @param {import('postcss').Declaration} decl\n * @returns {number}\n */\nmodule.exports = function declarationValueIndex(decl) {\n\tconst raws = decl.raws;\n\n\treturn [\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.prefix,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t(raws.prop && raws.prop.raw) || decl.prop,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.suffix,\n\t\traws.between || ':',\n\t\t// @ts-expect-error -- TS2339: Property 'prefix' does not exist on type '{ value: string; raw: string; }'.\n\t\traws.value && raws.value.prefix,\n\t].reduce((count, str) => {\n\t\tif (str) {\n\t\t\treturn count + str.length;\n\t\t}\n\n\t\treturn count;\n\t}, 0);\n};\n","'use strict';\n\n/**\n * @param {import('postcss').Declaration} decl\n * @returns {string}\n */\nmodule.exports = function getDeclarationValue(decl) {\n\tconst raws = decl.raws;\n\n\treturn (raws.value && raws.value.raw) || decl.value;\n};\n","'use strict';\n\n/**\n * Check whether a string has less interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has less interpolation\n */\nmodule.exports = function (string) {\n\treturn /@\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has postcss-simple-vars interpolation\n *\n * @param {string} string\n */\nmodule.exports = function (string) {\n\treturn /\\$\\(.+?\\)/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has scss interpolation\n *\n * @param {string} string\n */\nmodule.exports = function (string) {\n\treturn /#\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has JS template literal interpolation or HTML-like template\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has template literal interpolation\n */\nmodule.exports = function (string) {\n\treturn /\\{.+?\\}/.test(string);\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a string has interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has interpolation\n */\nmodule.exports = function (string) {\n\t// SCSS or Less interpolation\n\tif (\n\t\thasLessInterpolation(string) ||\n\t\thasScssInterpolation(string) ||\n\t\thasTplInterpolation(string) ||\n\t\thasPsvInterpolation(string)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a value is standard\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function (value) {\n\tlet normalizedValue = value;\n\n\t// Ignore operators before variables (example -$variable)\n\tif (/^[-+*/]/.test(value.charAt(0))) {\n\t\tnormalizedValue = normalizedValue.slice(1);\n\t}\n\n\t// SCSS variable (example $variable)\n\tif (normalizedValue.startsWith('$')) {\n\t\treturn false;\n\t}\n\n\t// SCSS namespace (example namespace.$variable)\n\tif (/^.+\\.\\$/.test(value)) {\n\t\treturn false;\n\t}\n\n\t// Less variable\n\tif (normalizedValue.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(normalizedValue)) {\n\t\treturn false;\n\t}\n\n\t// WebExtension replacement keyword used by Chrome/Firefox\n\t// more information: https://developer.chrome.com/extensions/i18n\n\t// and https://github.com/stylelint/stylelint/issues/4707\n\tif (/__MSG_\\S+__/.test(value)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Compares a string to a second value that, if it fits a certain convention,\n * is converted to a regular expression before the comparison.\n * If it doesn't fit the convention, then two strings are compared.\n *\n * Any strings starting and ending with `/` are interpreted\n * as regular expressions.\n *\n * @param {string | Array<string>} input\n * @param {string | RegExp | Array<string | RegExp>} comparison\n *\n * @returns {false | {match: string, pattern: (string | RegExp), substring: string}}\n */\nmodule.exports = function matchesStringOrRegExp(input, comparison) {\n\tif (!Array.isArray(input)) {\n\t\treturn testAgainstStringOrRegExpOrArray(input, comparison);\n\t}\n\n\tfor (const inputItem of input) {\n\t\tconst testResult = testAgainstStringOrRegExpOrArray(inputItem, comparison);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {string | RegExp | Array<string | RegExp>} comparison\n */\nfunction testAgainstStringOrRegExpOrArray(value, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstStringOrRegExp(value, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstStringOrRegExp(value, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} value\n * @param {string | RegExp} comparison\n */\nfunction testAgainstStringOrRegExp(value, comparison) {\n\t// If it's a RegExp, test directly\n\tif (comparison instanceof RegExp) {\n\t\tconst match = value.match(comparison);\n\n\t\treturn match ? { match: value, pattern: comparison, substring: match[0] || '' } : false;\n\t}\n\n\t// Check if it's RegExp in a string\n\tconst firstComparisonChar = comparison[0];\n\tconst lastComparisonChar = comparison[comparison.length - 1];\n\tconst secondToLastComparisonChar = comparison[comparison.length - 2];\n\n\tconst comparisonIsRegex =\n\t\tfirstComparisonChar === '/' &&\n\t\t(lastComparisonChar === '/' ||\n\t\t\t(secondToLastComparisonChar === '/' && lastComparisonChar === 'i'));\n\n\tconst hasCaseInsensitiveFlag = comparisonIsRegex && lastComparisonChar === 'i';\n\n\t// If so, create a new RegExp from it\n\tif (comparisonIsRegex) {\n\t\tconst valueMatch = hasCaseInsensitiveFlag\n\t\t\t? value.match(new RegExp(comparison.slice(1, -2), 'i'))\n\t\t\t: value.match(new RegExp(comparison.slice(1, -1)));\n\n\t\treturn valueMatch\n\t\t\t? { match: value, pattern: comparison, substring: valueMatch[0] || '' }\n\t\t\t: false;\n\t}\n\n\t// Otherwise, it's a string. Do a strict comparison\n\treturn value === comparison ? { match: value, pattern: comparison, substring: value } : false;\n}\n","'use strict';\n\nconst matchesStringOrRegExp = require('./matchesStringOrRegExp');\n\n/**\n * Check if an options object's propertyName contains a user-defined string or\n * regex that matches the passed in input.\n *\n * @param {{ [x: string]: any; }} options\n * @param {string} propertyName\n * @param {unknown} input\n *\n * @returns {boolean}\n */\nmodule.exports = function optionsMatches(options, propertyName, input) {\n\treturn Boolean(\n\t\toptions &&\n\t\t\toptions[propertyName] &&\n\t\t\ttypeof input === 'string' &&\n\t\t\tmatchesStringOrRegExp(input, options[propertyName]),\n\t);\n};\n","'use strict';\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/**\n * @param {Declaration} decl\n * @param {string} value\n * @returns {Declaration} The declaration that was passed in.\n */\nmodule.exports = function setDeclarationValue(decl, value) {\n\tconst raws = decl.raws;\n\n\tif (raws.value) {\n\t\traws.value.raw = value;\n\t} else {\n\t\tdecl.value = value;\n\t}\n\n\treturn decl;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'alpha-value-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/alpha-value-notation',\n};\n\nconst ALPHA_PROPS = new Set(['opacity', 'shape-image-threshold']);\nconst ALPHA_FUNCS = new Set(['hsl', 'hsla', 'hwb', 'lab', 'lch', 'rgb', 'rgba']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['number', 'percentage'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texceptProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tnumber: {\n\t\t\t\texpFunc: isNumber,\n\t\t\t\tfixFunc: asNumber,\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: isPercentage,\n\t\t\t\tfixFunc: asPercentage,\n\t\t\t},\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\t/** @type {import('postcss-value-parser').Node | undefined} */\n\t\t\t\tlet alpha;\n\n\t\t\t\tif (ALPHA_PROPS.has(decl.prop.toLowerCase())) {\n\t\t\t\t\talpha = findAlphaInValue(node);\n\t\t\t\t} else {\n\t\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\t\tif (!ALPHA_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\t\talpha = findAlphaInFunction(node);\n\t\t\t\t}\n\n\t\t\t\tif (!alpha) return;\n\n\t\t\t\tconst { value } = alpha;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isNumber(value) && !isPercentage(value)) return;\n\n\t\t\t\t/** @type {'number' | 'percentage'} */\n\t\t\t\tlet expectation = primary;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'exceptProperties', decl.prop)) {\n\t\t\t\t\tif (expectation === 'number') {\n\t\t\t\t\t\texpectation = 'percentage';\n\t\t\t\t\t} else if (expectation === 'percentage') {\n\t\t\t\t\t\texpectation = 'number';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (optionFuncs[expectation].expFunc(value)) return;\n\n\t\t\t\tconst fixed = optionFuncs[expectation].fixFunc(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\talpha.value = String(fixed);\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + alpha.sourceIndex;\n\t\t\t\tconst endIndex = index + alpha.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asPercentage(value) {\n\tconst number = Number(value);\n\n\treturn `${Number((number * 100).toPrecision(3))}%`;\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tassert(dimension);\n\n\tconst number = Number(dimension.number);\n\n\treturn Number((number / 100).toPrecision(3)).toString();\n}\n\n/**\n * @template {import('postcss-value-parser').Node} T\n * @param {T} node\n * @returns {T | undefined}\n */\nfunction findAlphaInValue(node) {\n\treturn node.type === 'word' || node.type === 'function' ? node : undefined;\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {import('postcss-value-parser').Node | undefined}\n */\nfunction findAlphaInFunction(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\n\tif (args.length === 4) return args[3];\n\n\tconst slashNodeIndex = node.nodes.findIndex(({ type, value }) => type === 'div' && value === '/');\n\n\tif (slashNodeIndex !== -1) {\n\t\tconst nodesAfterSlash = node.nodes.slice(slashNodeIndex + 1, node.nodes.length);\n\n\t\treturn nodesAfterSlash.find(({ type }) => type === 'word');\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isPercentage(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '%';\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${atRule.name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../utils/isStandardSyntaxAtRule');\nconst report = require('../utils/report');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void, errTarget: string }) => void,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule) => void) | null,\n * }} options\n */\nmodule.exports = function atRuleNameSpaceChecker(options) {\n\toptions.root.walkAtRules((atRule) => {\n\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckColon(\n\t\t\t`@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`,\n\t\t\tatRule.name.length,\n\t\t\tatRule,\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\toptions.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (m) => {\n\t\t\t\tif (options.fix) {\n\t\t\t\t\toptions.fix(node);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: m,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: options.result,\n\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t\terrTarget: `@${node.name}`,\n\t\t});\n\t}\n};\n","'use strict';\n\n/** @typedef {import('stylelint').ConfigurationError} ConfigurationError */\n\n/**\n * Create configurationError from text and set CLI exit code\n * @param {string} text\n * @returns {ConfigurationError}\n */\nmodule.exports = function (text) {\n\tconst err = /** @type {ConfigurationError} */ (new Error(text));\n\n\terr.code = 78;\n\n\treturn err;\n};\n","'use strict';\n\n/**\n * Check if a string is a single line (i.e. does not contain\n * any newline characters).\n *\n * @param {string} input\n * @return {boolean}\n */\nmodule.exports = function (input) {\n\treturn !/[\\n\\r]/.test(input);\n};\n","'use strict';\n\n/**\n * Check if a character is whitespace.\n *\n * @param {string} char\n * @returns {boolean}\n */\nmodule.exports = function (char) {\n\treturn [' ', '\\n', '\\t', '\\r', '\\f'].includes(char);\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst isSingleLineString = require('./isSingleLineString');\nconst isWhitespace = require('./isWhitespace');\nconst { assertFunction, isNullish } = require('./validateTypes');\n\n/**\n * @typedef {(message: string) => string} MessageFunction\n */\n\n/**\n * @typedef {Object} Messages\n * @property {MessageFunction} [expectedBefore]\n * @property {MessageFunction} [rejectedBefore]\n * @property {MessageFunction} [expectedAfter]\n * @property {MessageFunction} [rejectedAfter]\n * @property {MessageFunction} [expectedBeforeSingleLine]\n * @property {MessageFunction} [rejectedBeforeSingleLine]\n * @property {MessageFunction} [expectedBeforeMultiLine]\n * @property {MessageFunction} [rejectedBeforeMultiLine]\n * @property {MessageFunction} [expectedAfterSingleLine]\n * @property {MessageFunction} [rejectedAfterSingleLine]\n * @property {MessageFunction} [expectedAfterMultiLine]\n * @property {MessageFunction} [rejectedAfterMultiLine]\n */\n\n/**\n * @typedef {Object} WhitespaceCheckerArgs\n * @property {string} source - The source string\n * @property {number} index - The index of the character to check before\n * @property {(message: string) => void} err - If a problem is found, this callback\n *   will be invoked with the relevant warning message.\n *   Typically this callback will report() the problem.\n * @property {string} [errTarget] - If a problem is found, this string\n *   will be sent to the relevant warning message.\n * @property {string} [lineCheckStr] - Single- and multi-line checkers\n *   will use this string to determine whether they should proceed,\n *   i.e. if this string is one line only, single-line checkers will check,\n *   multi-line checkers will ignore.\n *   If none is passed, they will use `source`.\n * @property {boolean} [onlyOneChar=false] - Only check *one* character before.\n *   By default, \"always-*\" checks will look for the `targetWhitespace` one\n *   before and then ensure there is no whitespace two before. This option\n *   bypasses that second check.\n * @property {boolean} [allowIndentation=false] - Allow arbitrary indentation\n *   between the `targetWhitespace` (almost definitely a newline) and the `index`.\n *   With this option, the checker will see if a newline *begins* the whitespace before\n *   the `index`.\n */\n\n/**\n * @typedef {(args: WhitespaceCheckerArgs) => void} WhitespaceChecker\n */\n\n/**\n * @typedef {{\n *   before: WhitespaceChecker,\n *   beforeAllowingIndentation: WhitespaceChecker,\n *   after: WhitespaceChecker,\n *   afterOneOnly: WhitespaceChecker,\n * }} WhitespaceCheckers\n */\n\n/**\n * Create a whitespaceChecker, which exposes the following functions:\n * - `before()`\n * - `beforeAllowingIndentation()`\n * - `after()`\n * - `afterOneOnly()`\n *\n * @param {\"space\" | \"newline\"} targetWhitespace - This is a keyword instead\n *   of the actual character (e.g. \" \") in order to accommodate\n *   different styles of newline (\"\\n\" vs \"\\r\\n\")\n * @param {\"always\" | \"never\" | \"always-single-line\" | \"always-multi-line\" | \"never-single-line\" | \"never-multi-line\"} expectation\n * @param {Messages} messages - An object of message functions;\n *   calling `before*()` or `after*()` and the `expectation` that is passed\n *   determines which message functions are required\n *\n * @returns {WhitespaceCheckers} The checker, with its exposed checking functions\n */\nmodule.exports = function whitespaceChecker(targetWhitespace, expectation, messages) {\n\t// Keep track of active arguments in order to avoid passing\n\t// too much stuff around, making signatures long and confusing.\n\t// This variable gets reset anytime a checking function is called.\n\t/** @type {WhitespaceCheckerArgs} */\n\tlet activeArgs;\n\n\t/**\n\t * Check for whitespace *before* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction before({\n\t\tsource,\n\t\tindex,\n\t\terr,\n\t\terrTarget,\n\t\tlineCheckStr,\n\t\tonlyOneChar = false,\n\t\tallowIndentation = false,\n\t}) {\n\t\tactiveArgs = {\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr,\n\t\t\terrTarget,\n\t\t\tonlyOneChar,\n\t\t\tallowIndentation,\n\t\t};\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * Check for whitespace *after* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction after({ source, index, err, errTarget, lineCheckStr, onlyOneChar = false }) {\n\t\tactiveArgs = { source, index, err, errTarget, onlyOneChar };\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction beforeAllowingIndentation(obj) {\n\t\tbefore({ ...obj, allowIndentation: true });\n\t}\n\n\tfunction expectBefore(messageFunc = messages.expectedBefore) {\n\t\tif (activeArgs.allowIndentation) {\n\t\t\texpectBeforeAllowingIndentation(messageFunc);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst _activeArgs = activeArgs;\n\t\tconst source = _activeArgs.source;\n\t\tconst index = _activeArgs.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\t\tconst twoCharsBefore = source[index - 2];\n\n\t\tif (isNullish(oneCharBefore)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharBefore === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsBefore) || !isWhitespace(twoCharsBefore))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction expectBeforeAllowingIndentation(messageFunc = messages.expectedBefore) {\n\t\tconst _activeArgs2 = activeArgs;\n\t\tconst source = _activeArgs2.source;\n\t\tconst index = _activeArgs2.index;\n\t\tconst err = _activeArgs2.err;\n\n\t\tconst expectedChar = targetWhitespace === 'newline' ? '\\n' : undefined;\n\t\tlet i = index - 1;\n\n\t\twhile (source[i] !== expectedChar) {\n\t\t\tif (source[i] === '\\t' || source[i] === ' ') {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tassertFunction(messageFunc);\n\t\t\terr(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction rejectBefore(messageFunc = messages.rejectedBefore) {\n\t\tconst _activeArgs3 = activeArgs;\n\t\tconst source = _activeArgs3.source;\n\t\tconst index = _activeArgs3.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\n\t\tif (!isNullish(oneCharBefore) && isWhitespace(oneCharBefore)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction afterOneOnly(obj) {\n\t\tafter({ ...obj, onlyOneChar: true });\n\t}\n\n\tfunction expectAfter(messageFunc = messages.expectedAfter) {\n\t\tconst _activeArgs4 = activeArgs;\n\t\tconst source = _activeArgs4.source;\n\t\tconst index = _activeArgs4.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\t\tconst twoCharsAfter = source[index + 2];\n\t\tconst threeCharsAfter = source[index + 3];\n\n\t\tif (isNullish(oneCharAfter)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (targetWhitespace === 'newline') {\n\t\t\t// If index is followed by a Windows CR-LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\r' &&\n\t\t\t\ttwoCharsAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(threeCharsAfter) || !isWhitespace(threeCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If index is followed by a Unix LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharAfter === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction rejectAfter(messageFunc = messages.rejectedAfter) {\n\t\tconst _activeArgs5 = activeArgs;\n\t\tconst source = _activeArgs5.source;\n\t\tconst index = _activeArgs5.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\n\t\tif (!isNullish(oneCharAfter) && isWhitespace(oneCharAfter)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\treturn {\n\t\tbefore,\n\t\tbeforeAllowingIndentation,\n\t\tafter,\n\t\tafterOneOnly,\n\t};\n};\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected newline after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @return {boolean} True if `statement` has a block (empty or otherwise)\n */\nmodule.exports = function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n};\n","'use strict';\n\n/**\n * Stringify PostCSS node including its raw \"before\" string.\n *\n * @param {import('postcss').Node} node\n *\n * @returns {string}\n */\nmodule.exports = function (node) {\n\tlet result = '';\n\n\tif (node.raws.before) {\n\t\tresult += node.raws.before;\n\t}\n\n\tresult += node.toString();\n\n\treturn result;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeString = rawNodeString(atRule);\n\n\t\t\tchecker.before({\n\t\t\t\tsource: nodeString,\n\t\t\t\tindex: nodeString.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: nodeString.length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n * Get the next non-comment node in a PostCSS AST\n * at or after a given node.\n *\n * @param {PostcssNode | void} startNode\n * @returns {PostcssNode | null}\n */\nmodule.exports = function nextNonCommentNode(startNode) {\n\tif (!startNode || !startNode.next) return null;\n\n\tif (startNode.type === 'comment') {\n\t\treturn nextNonCommentNode(startNode.next());\n\t}\n\n\treturn startNode;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-semicolon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst nextNode = atRule.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tnodeToCheck.raws.before = context.newline + nodeToCheck.raws.before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\t\tindex: atRule.toString().length + 1,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n/** @typedef {import('postcss').Node} NodeSource */\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Root}\n */\nmodule.exports.isRoot = function isRoot(node) {\n\treturn node.type === 'root';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Rule}\n */\nmodule.exports.isRule = function isRule(node) {\n\treturn node.type === 'rule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').AtRule}\n */\nmodule.exports.isAtRule = function isAtRule(node) {\n\treturn node.type === 'atrule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Comment}\n */\nmodule.exports.isComment = function isComment(node) {\n\treturn node.type === 'comment';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Declaration}\n */\nmodule.exports.isDeclaration = function isDeclaration(node) {\n\treturn node.type === 'decl';\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').FunctionNode}\n */\nmodule.exports.isValueFunction = function isValueFunction(node) {\n\treturn node.type === 'function';\n};\n\n/**\n * @param {Node} node\n * @returns {node is (Node & {source: NodeSource})}\n */\nmodule.exports.hasSource = function hasSource(node) {\n\treturn Boolean(node.source);\n};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function beforeBlockString(statement, { noRawBefore } = { noRawBefore: false }) {\n\tlet result = '';\n\n\tconst before = statement.raws.before || '';\n\n\tif (!noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (isRule(statement)) {\n\t\tresult += statement.selector;\n\t} else if (isAtRule(statement)) {\n\t\tresult += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;\n\t} else {\n\t\treturn '';\n\t}\n\n\tresult += statement.raws.between || '';\n\n\treturn result;\n};\n","'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\nconst hasBlock = require('./hasBlock');\nconst rawNodeString = require('./rawNodeString');\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`), returns an empty string.\n *\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function blockString(statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn '';\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-closing-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected newline after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected newline after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment x spaces after the brace\n\t\t\tconst nextNodeIsSingleLineComment =\n\t\t\t\tnextNode.type === 'comment' &&\n\t\t\t\t!/[^ ]/.test(nextNode.raws.before || '') &&\n\t\t\t\t!nextNode.toString().includes('\\n');\n\n\t\t\tconst nodeToCheck = nextNodeIsSingleLineComment ? nextNode.next() : nextNode;\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nodeToCheck);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\t// Only check one after, because there might be other\n\t\t\t// spaces handled by the indentation rule\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check if a statement has an empty block.\n *\n * @param {import('postcss').Rule | import('postcss').AtRule} statement - postcss rule or at-rule node\n * @return {boolean} True if the statement has a block and it is empty\n */\nmodule.exports = function (statement) {\n\treturn (\n\t\tstatement.nodes !== undefined && statement.nodes.length === 0 // has block\n\t); // and is empty\n};\n","'use strict';\n\n/**\n * Check if a string contains at least one empty line\n *\n * @param {string | undefined} string\n * @returns {boolean}\n */\nmodule.exports = function (string) {\n\tif (string === '' || string === undefined) return false;\n\n\treturn /\\n[\\r\\t ]*\\n/.test(string);\n};\n","'use strict';\n\nconst addEmptyLineAfter = require('../../utils/addEmptyLineAfter');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesAfter = require('../../utils/removeEmptyLinesAfter');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before closing brace',\n\trejected: 'Unexpected empty line before closing brace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always-multi-line', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['after-closing-brace'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get whitespace after \"\"}\", ignoring extra semicolon\n\t\t\tconst before = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\t// Calculate index\n\t\t\tconst statementString = statement.toString();\n\t\t\tlet index = statementString.length - 1;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// Set expectation\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tconst childNodeTypes = statement.nodes.map((item) => item.type);\n\n\t\t\t\t// Reverse the primary options if `after-closing-brace` is set\n\t\t\t\tif (\n\t\t\t\t\toptionsMatches(secondaryOptions, 'except', 'after-closing-brace') &&\n\t\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\t\t!childNodeTypes.includes('decl')\n\t\t\t\t) {\n\t\t\t\t\treturn primary === 'never';\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always-multi-line' && !isSingleLineString(blockString(statement));\n\t\t\t})();\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst { newline } = context;\n\n\t\t\t\tif (typeof newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineAfter(statement, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesAfter(statement, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tnode: statement,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineAfter(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.after !== 'string') {\n\t\treturn node;\n\t}\n\n\tconst spaces = raws.after.split(';');\n\tconst after = spaces[spaces.length - 1] || '';\n\n\tif (!/\\r?\\n/.test(after)) {\n\t\traws.after += newline.repeat(2);\n\t} else {\n\t\traws.after = raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n\t}\n\n\treturn node;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesAfter(node, newline) {\n\tnode.raws.after = node.raws.after ? node.raws.after.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected single space after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule) => {\n\t\t\t\t\t\tif (typeof atRule.raws.afterName === 'string') {\n\t\t\t\t\t\t\tatRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: 'Expected newline before \"}\"',\n\texpectedBeforeMultiLine: 'Expected newline before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore extra semicolon\n\t\t\tconst after = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\tif (after === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockIsMultiLine = !isSingleLineString(blockString(statement));\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// We're really just checking whether a\n\t\t\t// newline *starts* the block's final space -- between\n\t\t\t// the last declaration and the closing brace. We can\n\t\t\t// ignore any other whitespace between them, because that\n\t\t\t// will be checked by the indentation rule.\n\t\t\tif (!after.startsWith('\\n') && !after.startsWith('\\r\\n')) {\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tcomplain(messages.expectedBefore);\n\t\t\t\t} else if (blockIsMultiLine && primary === 'always-multi-line') {\n\t\t\t\t\tcomplain(messages.expectedBeforeMultiLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (after !== '' && blockIsMultiLine && primary === 'never-multi-line') {\n\t\t\t\tcomplain(messages.rejectedBeforeMultiLine);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t */\n\t\t\tfunction complain(message) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst firstWhitespaceIndex = statementRaws.after.search(/\\s/);\n\t\t\t\t\t\tconst newlineBefore =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0\n\t\t\t\t\t\t\t\t? statementRaws.after.slice(0, firstWhitespaceIndex)\n\t\t\t\t\t\t\t\t: statementRaws.after;\n\t\t\t\t\t\tconst newlineAfter =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0 ? statementRaws.after.slice(firstWhitespaceIndex) : '';\n\t\t\t\t\t\tconst newlineIndex = newlineAfter.search(/\\r?\\n/);\n\n\t\t\t\t\t\tstatementRaws.after =\n\t\t\t\t\t\t\tnewlineIndex >= 0\n\t\t\t\t\t\t\t\t? newlineBefore + newlineAfter.slice(newlineIndex)\n\t\t\t\t\t\t\t\t: newlineBefore + context.newline + newlineAfter;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s/g, '');\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isBoolean,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasEmptyBlock(statement) && !ignoreComments) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasCommentsOnly = statement.nodes.every((node) => node.type === 'comment');\n\n\t\t\tif (!hasCommentsOnly) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet index = beforeBlockString(statement, { noRawBefore: true }).length;\n\n\t\t\t// For empty blocks when using SugarSS parser\n\t\t\tif (statement.raws.between === undefined) {\n\t\t\t\tindex--;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: statement,\n\t\t\t\tstart: statement.positionBy({ index }),\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"}\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nextNode);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst vendor = require('./vendor');\n\n/**\n * Extract each list using the internal API of Autoprefixer 10.2.5.\n *\n * @see https://github.com/postcss/autoprefixer/tree/10.2.5\n *\n * @example\n * const autoprefixer = require('autoprefixer');\n * const Browsers = require('autoprefixer/lib/browsers');\n * const Prefixes = require('autoprefixer/lib/prefixes');\n * const utils = require('autoprefixer/lib/utils');\n *\n * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));\n */\n\n/**\n * @example\n * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));\n */\nconst AT_RULES = new Set([\n\t'@-khtml-keyframes',\n\t'@-moz-keyframes',\n\t'@-ms-keyframes',\n\t'@-ms-viewport',\n\t'@-o-keyframes',\n\t'@-o-viewport',\n\t'@-webkit-keyframes',\n\t'@resolution',\n]);\n\n/**\n * @example\n * prefixes.remove.selectors.map((s) => s.prefixed);\n */\nconst SELECTORS = new Set([\n\t':-moz-any-link',\n\t':-moz-full-screen',\n\t':-moz-placeholder',\n\t':-moz-placeholder-shown',\n\t':-moz-read-only',\n\t':-moz-read-write',\n\t':-ms-fullscreen',\n\t':-ms-input-placeholder',\n\t':-webkit-any-link',\n\t':-webkit-full-screen',\n\t'::-moz-placeholder',\n\t'::-moz-selection',\n\t'::-ms-input-placeholder',\n\t'::-webkit-backdrop',\n\t'::-webkit-input-placeholder',\n]);\n\n/**\n * @example\n * Object.entries(autoprefixer.data.prefixes)\n *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))\n *   .map(([key, value]) => key);\n */\nconst PROPERTIES = new Set([\n\t'align-content',\n\t'align-items',\n\t'align-self',\n\t'animation',\n\t'animation-delay',\n\t'animation-direction',\n\t'animation-duration',\n\t'animation-fill-mode',\n\t'animation-iteration-count',\n\t'animation-name',\n\t'animation-play-state',\n\t'animation-timing-function',\n\t'appearance',\n\t'backdrop-filter',\n\t'backface-visibility',\n\t'background-clip',\n\t'background-origin',\n\t'background-size',\n\t'border-block-end',\n\t'border-block-start',\n\t'border-bottom-left-radius',\n\t'border-bottom-right-radius',\n\t'border-image',\n\t'border-inline-end',\n\t'border-inline-start',\n\t'border-radius',\n\t'border-top-left-radius',\n\t'border-top-right-radius',\n\t'box-decoration-break',\n\t'box-shadow',\n\t'box-sizing',\n\t'break-after',\n\t'break-before',\n\t'break-inside',\n\t'clip-path',\n\t'color-adjust',\n\t'column-count',\n\t'column-fill',\n\t'column-gap',\n\t'column-rule',\n\t'column-rule-color',\n\t'column-rule-style',\n\t'column-rule-width',\n\t'column-span',\n\t'column-width',\n\t'columns',\n\t'filter',\n\t'flex',\n\t'flex-basis',\n\t'flex-direction',\n\t'flex-flow',\n\t'flex-grow',\n\t'flex-shrink',\n\t'flex-wrap',\n\t'flow-from',\n\t'flow-into',\n\t'font-feature-settings',\n\t'font-kerning',\n\t'font-language-override',\n\t'font-variant-ligatures',\n\t'grid-area',\n\t'grid-column',\n\t'grid-column-align',\n\t'grid-column-end',\n\t'grid-column-start',\n\t'grid-row',\n\t'grid-row-align',\n\t'grid-row-end',\n\t'grid-row-start',\n\t'grid-template',\n\t'grid-template-areas',\n\t'grid-template-columns',\n\t'grid-template-rows',\n\t'hyphens',\n\t'image-rendering',\n\t'justify-content',\n\t'margin-block-end',\n\t'margin-block-start',\n\t'margin-inline-end',\n\t'margin-inline-start',\n\t'mask',\n\t'mask-border',\n\t'mask-border-outset',\n\t'mask-border-repeat',\n\t'mask-border-slice',\n\t'mask-border-source',\n\t'mask-border-width',\n\t'mask-clip',\n\t'mask-composite',\n\t'mask-image',\n\t'mask-origin',\n\t'mask-position',\n\t'mask-repeat',\n\t'mask-size',\n\t'object-fit',\n\t'object-position',\n\t'order',\n\t'overscroll-behavior',\n\t'padding-block-end',\n\t'padding-block-start',\n\t'padding-inline-end',\n\t'padding-inline-start',\n\t'perspective',\n\t'perspective-origin',\n\t'place-self',\n\t'region-fragment',\n\t'scroll-snap-coordinate',\n\t'scroll-snap-destination',\n\t'scroll-snap-points-x',\n\t'scroll-snap-points-y',\n\t'scroll-snap-type',\n\t'shape-image-threshold',\n\t'shape-margin',\n\t'shape-outside',\n\t'tab-size',\n\t'text-align-last',\n\t'text-decoration',\n\t'text-decoration-color',\n\t'text-decoration-line',\n\t'text-decoration-skip',\n\t'text-decoration-skip-ink',\n\t'text-decoration-style',\n\t'text-emphasis',\n\t'text-emphasis-color',\n\t'text-emphasis-position',\n\t'text-emphasis-style',\n\t'text-orientation',\n\t'text-overflow',\n\t'text-size-adjust',\n\t'text-spacing',\n\t'touch-action',\n\t'transform',\n\t'transform-origin',\n\t'transform-style',\n\t'transition',\n\t'transition-delay',\n\t'transition-duration',\n\t'transition-property',\n\t'transition-timing-function',\n\t'user-select',\n\t'writing-mode',\n]);\n\n/**\n * @example\n * Object.values(prefixes.remove)\n *   .filter((p) => Array.isArray(p.values))\n *   .flatMap((p) => p.values)\n *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'\n *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only\n *\n * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013\n */\nconst PROPERTY_VALUES = new Set([\n\t'-moz-available',\n\t'-moz-box',\n\t'-moz-calc',\n\t'-moz-crisp-edges',\n\t'-moz-element',\n\t'-moz-fit-content',\n\t'-moz-grab',\n\t'-moz-grabbing',\n\t'-moz-inline-box',\n\t'-moz-isolate',\n\t'-moz-isolate-override',\n\t'-moz-linear-gradient',\n\t'-moz-max-content',\n\t'-moz-min-content',\n\t'-moz-plaintext',\n\t'-moz-radial-gradient',\n\t'-moz-repeating-linear-gradient',\n\t'-moz-repeating-radial-gradient',\n\t'-moz-zoom-in',\n\t'-moz-zoom-out',\n\t'-ms-flexbox',\n\t'-ms-grid',\n\t'-ms-inline-flexbox',\n\t'-ms-inline-grid',\n\t'-ms-linear-gradient',\n\t'-ms-radial-gradient',\n\t'-ms-repeating-linear-gradient',\n\t'-ms-repeating-radial-gradient',\n\t'-o-linear-gradient',\n\t'-o-pixelated',\n\t'-o-radial-gradient',\n\t'-o-repeating-linear-gradient',\n\t'-o-repeating-radial-gradient',\n\t'-webkit-box',\n\t'-webkit-calc',\n\t'-webkit-cross-fade',\n\t'-webkit-fill-available',\n\t'-webkit-filter',\n\t'-webkit-fit-content',\n\t'-webkit-flex',\n\t'-webkit-grab',\n\t'-webkit-grabbing',\n\t'-webkit-image-set',\n\t'-webkit-inline-box',\n\t'-webkit-inline-flex',\n\t'-webkit-isolate',\n\t'-webkit-linear-gradient',\n\t'-webkit-max-content',\n\t'-webkit-min-content',\n\t'-webkit-optimize-contrast',\n\t'-webkit-radial-gradient',\n\t'-webkit-repeating-linear-gradient',\n\t'-webkit-repeating-radial-gradient',\n\t'-webkit-sticky',\n\t'-webkit-zoom-in',\n\t'-webkit-zoom-out',\n]);\n\n/**\n * Most identifier types have to be looked up in a unique way,\n * so we're exposing special functions for each.\n */\nmodule.exports = {\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tatRuleName(identifier) {\n\t\treturn AT_RULES.has(`@${identifier.toLowerCase()}`);\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tselector(identifier) {\n\t\treturn SELECTORS.has(identifier.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tmediaFeatureName(identifier) {\n\t\treturn identifier.toLowerCase().includes('device-pixel-ratio');\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tproperty(identifier) {\n\t\tconst ident = identifier.toLowerCase();\n\n\t\t// HACK: `interpolation-mode` does not exist. This is an IE extension for `image-rendering`.\n\t\t//       See <https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#examples>\n\t\tif (ident === '-ms-interpolation-mode') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (vendor.prefix(ident).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn PROPERTIES.has(vendor.unprefixed(ident));\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {boolean}\n\t */\n\tpropertyValue(value) {\n\t\treturn PROPERTY_VALUES.has(value.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {string}\n\t */\n\tunprefix(value) {\n\t\treturn value.replace(/-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (p) => `Unexpected vendor-prefixed at-rule \"@${p}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!name.startsWith('-')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.atRuleName(name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = isAutoprefixable.unprefix(atRule.name);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'lower' | 'upper'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tconst expectedName = expectation === 'lower' ? name.toLowerCase() : name.toUpperCase();\n\n\t\t\tif (name === expectedName) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = expectedName;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(name, expectedName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.between !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst spaceIndex = statementRaws.between.search(/\\s+$/);\n\n\t\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\t\tstatement.raws.between =\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(spaceIndex);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatementRaws.between += context.newline;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.between = statementRaws.between.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"{\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'rules', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'rules')) {\n\t\t\troot.walkRules(check);\n\t\t}\n\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst backupCommentNextBefores = new Map();\n\n\t\t\t/**\n\t\t\t * next node with checking newlines after comment\n\t\t\t *\n\t\t\t * @param {import('postcss').ChildNode | undefined} startNode\n\t\t\t * @returns {import('postcss').ChildNode | undefined}\n\t\t\t */\n\t\t\tfunction nextNode(startNode) {\n\t\t\t\tif (!startNode || !startNode.next) return;\n\n\t\t\t\tif (startNode.type === 'comment') {\n\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\tconst newLineMatch = reNewLine.test(startNode.raws.before || '');\n\n\t\t\t\t\tconst next = startNode.next();\n\n\t\t\t\t\tif (next && newLineMatch && !reNewLine.test(next.raws.before || '')) {\n\t\t\t\t\t\tbackupCommentNextBefores.set(next, next.raws.before);\n\t\t\t\t\t\tnext.raws.before = startNode.raws.before;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextNode(next);\n\t\t\t\t}\n\n\t\t\t\treturn startNode;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNode(statement.first);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.delete(nodeToCheck);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\t\t\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\t\t\t\t\tnode.raws.before = before;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.clear();\n\n\t\t\t\t\t\t\t// Fix\n\t\t\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\t\t\tlet fixTarget = statement.first;\n\n\t\t\t\t\t\t\twhile (fixTarget) {\n\t\t\t\t\t\t\t\tconst fixTargetRaws = fixTarget.raws;\n\n\t\t\t\t\t\t\t\tif (typeof fixTargetRaws.before !== 'string') continue;\n\n\t\t\t\t\t\t\t\tif (reNewLine.test(fixTargetRaws.before || '')) {\n\t\t\t\t\t\t\t\t\tfixTargetRaws.before = fixTargetRaws.before.replace(/\\r?\\n/g, '');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (fixTarget.type !== 'comment') {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfixTarget = fixTarget.next();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\tnode.raws.before = before;\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-hex-alpha';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (hex) => `Expected alpha channel in \"${hex}\"`,\n\tunexpected: (hex) => `Unexpected alpha channel in \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-alpha',\n};\n\nconst HEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(decl.value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isUrlFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (primary === 'always' && hasAlphaChannel(value)) return;\n\n\t\t\t\tif (primary === 'never' && !hasAlphaChannel(value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: primary === 'never' ? messages.unexpected(value) : messages.expected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isUrlFunction({ type, value }) {\n\treturn type === 'function' && value === 'url';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\n/**\n * @param {string} hex\n */\nfunction hasAlphaChannel(hex) {\n\treturn hex.length === 5 || hex.length === 9;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"{\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"{\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['at-rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'at-rules')) {\n\t\t\troot.walkAtRules(check);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: blockString(statement),\n\t\t\t\tindex: 0,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementFirst = statement.first;\n\n\t\t\t\t\t\tif (statementFirst == null) return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxHexColor = require('../../utils/isStandardSyntaxHexColor');\nconst isValidHex = require('../../utils/isValidHex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected invalid hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-no-invalid-hex',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxHexColor(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk(({ value, type, sourceIndex }) => {\n\t\t\t\tif (type === 'function' && value.endsWith('url')) return false;\n\n\t\t\t\tif (type !== 'word') return;\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n\n\t\t\t\tif (!hexMatch) return;\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\tif (!hexValue || isValidHex(hexValue)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + hexValue.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a hex color is standard\n *\n * @param {string} hex\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxHexColor(hex) {\n\t// Less map usage (e.g. .myclass { color: #colors[somecolor]; })\n\tif (hex.includes('[')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Check if a value is a valid 3, 4, 6 or 8 digit hex\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function (value) {\n\treturn /^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(value);\n};\n","'use strict';\n\n/**\n * Check whether a function is standard\n *\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nmodule.exports = function (node) {\n\t// Function nodes without names are things in parentheses like Sass lists\n\tif (!node.value) {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('#{')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxFunction = require('./isStandardSyntaxFunction');\n\n/**\n * Check whether a function is standard syntax color function\n *\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxColorFunction(node) {\n\tif (!isStandardSyntaxFunction(node)) return false;\n\n\t// scss can accept a #hex, or $var variables and we need to check all nested fn nodes\n\tfor (const fnNode of node.nodes) {\n\t\tif (fnNode.type === 'function') return isStandardSyntaxColorFunction(fnNode);\n\n\t\tif (fnNode.type === 'word' && (fnNode.value.startsWith('#') || fnNode.value.startsWith('$')))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxColorFunction = require('../../utils/isStandardSyntaxColorFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (primary) => `Expected ${primary} color-function notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-function-notation',\n};\n\nconst LEGACY_FUNCS = new Set(['rgba', 'hsla']);\nconst LEGACY_NOTATION_FUNCS = new Set(['rgb', 'rgba', 'hsl', 'hsla']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['modern', 'legacy'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (!isStandardSyntaxColorFunction(node)) return;\n\n\t\t\t\tconst { value, sourceIndex, sourceEndIndex, nodes } = node;\n\n\t\t\t\tif (!LEGACY_NOTATION_FUNCS.has(value.toLowerCase())) return;\n\n\t\t\t\tif (primary === 'modern' && !hasCommas(node)) return;\n\n\t\t\t\tif (primary === 'legacy' && hasCommas(node)) return;\n\n\t\t\t\tif (context.fix && primary === 'modern') {\n\t\t\t\t\tlet commaCount = 0;\n\n\t\t\t\t\t// Convert punctuation\n\t\t\t\t\tnode.nodes = nodes.map((childNode) => {\n\t\t\t\t\t\tif (isComma(childNode)) {\n\t\t\t\t\t\t\t// Non-alpha commas to space and alpha commas to slashes\n\t\t\t\t\t\t\tif (commaCount < 2) {\n\t\t\t\t\t\t\t\t// @ts-expect-error -- TS2322: Type '\"space\"' is not assignable to type '\"div\"'.\n\t\t\t\t\t\t\t\tchildNode.type = 'space';\n\t\t\t\t\t\t\t\tchildNode.value = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t\tcommaCount++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchildNode.value = '/';\n\t\t\t\t\t\t\t\tchildNode.before = atLeastOneSpace(childNode.before);\n\t\t\t\t\t\t\t\tchildNode.after = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove trailing 'a' from legacy function name\n\t\t\t\t\tif (LEGACY_FUNCS.has(node.value.toLowerCase())) {\n\t\t\t\t\t\tnode.value = node.value.slice(0, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + (sourceEndIndex - sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} whitespace\n */\nfunction atLeastOneSpace(whitespace) {\n\treturn whitespace !== '' ? whitespace : ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').DivNode}\n */\nfunction isComma(node) {\n\treturn node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction hasCommas(node) {\n\treturn node.nodes && node.nodes.some((childNode) => isComma(childNode));\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-opening-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"{\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if selector is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'rule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', statement.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.raws.between = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.between = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Convert the specified value to an array. If an array is specified, the array is returned as-is.\n *\n * @template T\n * @param {T | T[] | undefined | null} value\n * @returns {T[] | undefined}\n */\nmodule.exports = function flattenArray(value) {\n\tif (value == null) {\n\t\treturn;\n\t}\n\n\treturn Array.isArray(value) ? value : [value];\n};\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties are one or more values\n * that satisfy the specified validator(s):\n *\n * @example\n * ignoreProperties = {\n *   value1: [\"item11\", \"item12\", \"item13\"],\n *   value2: \"item2\",\n * };\n * validateObjectWithArrayProps(isString)(ignoreProperties);\n * //=> true\n *\n * @typedef {(value: unknown) => boolean} Validator\n * @param {...Validator} validators\n * @returns {Validator}\n */\nmodule.exports = function validateObjectWithArrayProps(...validators) {\n\treturn (value) => {\n\t\tif (!isPlainObject(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.values(value)\n\t\t\t.flat()\n\t\t\t.every((item) => validators.some((v) => v(item)));\n\t};\n};\n","'use strict';\n\nconst flattenArray = require('../../utils/flattenArray');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-property-required-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\t\t\tconst propList = flattenArray(primary[atRuleName]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const property of propList) {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t(node) => node.type === 'decl' && node.prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line before a node. Mutates the node.\n *\n * @template {import('postcss').ChildNode} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineBefore(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.before !== 'string') {\n\t\treturn node;\n\t}\n\n\traws.before = !/\\r?\\n/.test(raws.before)\n\t\t? newline.repeat(2) + raws.before\n\t\t: raws.before.replace(/(\\r?\\n)/, `${newline}$1`);\n\n\treturn node;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node | void} node\n */\nfunction getNodeLine(node) {\n\treturn node && node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | void} node\n * @returns {Node | void}\n */\nmodule.exports = function getNextNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/** @type {Node | void} */\n\tconst nextNode = node.next();\n\n\tif (!nextNode || nextNode.type !== 'comment') {\n\t\treturn nextNode;\n\t}\n\n\tif (\n\t\tgetNodeLine(node) === getNodeLine(nextNode) ||\n\t\tgetNodeLine(nextNode) === getNodeLine(nextNode.next())\n\t) {\n\t\treturn getNextNonSharedLineCommentNode(nextNode);\n\t}\n\n\treturn nextNode;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node} node\n */\nfunction getNodeLine(node) {\n\treturn node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | undefined} node\n * @returns {Node | undefined}\n */\nmodule.exports = function getPreviousNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn previousNode;\n\t}\n\n\tif (getNodeLine(node) === getNodeLine(previousNode)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\tconst previousNode2 = previousNode.prev();\n\n\tif (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\treturn previousNode;\n};\n","'use strict';\n\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst { isRoot, isComment } = require('./typeGuards');\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\tconst aLine = a && a.source && a.source.end && a.source.end.line;\n\tconst bLine = b && b.source && b.source.start && b.source.start.line;\n\n\treturn aLine === bLine;\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nmodule.exports = function isSharedLineComment(node) {\n\tif (!isComment(node)) {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\t!isRoot(parentNode) &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function (node) {\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\treturn !isSharedLineComment(previousNode);\n};\n","'use strict';\n\nconst { isComment, hasSource } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} statement\n * @returns {boolean}\n */\nmodule.exports = function (statement) {\n\tconst parentNode = statement.parent;\n\n\tif (parentNode === undefined || parentNode.type === 'root') {\n\t\treturn false;\n\t}\n\n\tif (statement === parentNode.first) {\n\t\treturn true;\n\t}\n\n\t/*\n\t * Search for the statement in the parent's nodes, ignoring comment\n\t * nodes on the same line as the parent's opening brace.\n\t */\n\n\tconst parentNodes = parentNode.nodes;\n\n\tif (!parentNodes) {\n\t\treturn false;\n\t}\n\n\tconst firstNode = parentNodes[0];\n\n\tif (!firstNode) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!isComment(firstNode) ||\n\t\t(typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\\n'))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (!hasSource(firstNode) || !firstNode.source.start) {\n\t\treturn false;\n\t}\n\n\tconst openingBraceLine = firstNode.source.start.line;\n\n\tif (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, node] of parentNodes.entries()) {\n\t\tif (index === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === statement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t!isComment(node) ||\n\t\t\t(hasSource(node) && node.source.end && node.source.end.line !== openingBraceLine)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* istanbul ignore next: Should always return in the loop */\n\treturn false;\n};\n","'use strict';\n\nconst { isRoot } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nmodule.exports = function (node) {\n\tif (isRoot(node)) return false;\n\n\tconst parentNode = node.parent;\n\n\tif (!parentNode) {\n\t\treturn false;\n\t}\n\n\treturn isRoot(parentNode) && node === parentNode.first;\n};\n","'use strict';\n\n/**\n * @param {import('postcss').Comment} comment\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxComment(comment) {\n\t// We check both here because the Sass parser uses `raws.inline` to indicate\n\t// inline comments, while the Less parser uses `inline`.\n\tif ('inline' in comment) return false;\n\n\tif ('inline' in comment.raws) return false;\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesBefore(node, newline) {\n\tnode.raws.before = node.raws.before ? node.raws.before.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSharedLineComment = require('../../utils/isSharedLineComment');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before comment',\n\trejected: 'Unexpected empty line before comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-empty-line-before',\n};\n\nconst stylelintCommandPrefix = 'stylelint-';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested'],\n\t\t\t\t\tignore: ['stylelint-commands', 'after-comment'],\n\t\t\t\t\tignoreComments: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore stylelint commands\n\t\t\tif (\n\t\t\t\tcomment.text.startsWith(stylelintCommandPrefix) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'stylelint-commands')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore newlines between comments\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore comments matching the ignoreComments option.\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreComments', comment.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore shared-line comments\n\t\t\tif (isSharedLineComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(comment)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always';\n\t\t\t})();\n\n\t\t\tconst before = comment.raws.before || '';\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (typeof context.newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(comment, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(comment, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"}\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"}\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = blockString(statement);\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length - 1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, ' ');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-length',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['short', 'long'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value: hexValue } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tif (primary === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst variant = primary === 'long' ? longer : shorter;\n\t\t\t\tconst expectedHex = variant(hexValue);\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expectedHex;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(hexValue, expectedHex),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} hex\n */\nfunction canShrink(hex) {\n\thex = hex.toLowerCase();\n\n\treturn (\n\t\thex[1] === hex[2] &&\n\t\thex[3] === hex[4] &&\n\t\thex[5] === hex[6] &&\n\t\t(hex.length === 7 || (hex.length === 9 && hex[7] === hex[8]))\n\t);\n}\n\n/**\n * @param {string} hex\n */\nfunction shorter(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i += 2) {\n\t\thexVariant += hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {string} hex\n */\nfunction longer(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i++) {\n\t\thexVariant += hex.charAt(i).repeat(2);\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected comment to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\n\t\t\tif (normalizedPattern.test(text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-whitespace-inside',\n};\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceBefore(comment) {\n\tif (comment.text.startsWith('*')) {\n\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t} else {\n\t\tcomment.raws.left = ' ';\n\t}\n}\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceAfter(comment) {\n\tif (comment.text[comment.text.length - 1] === '*') {\n\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t} else {\n\t\tcomment.raws.right = ' ';\n\t}\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n\n\t\t\tif (leftMatches == null || leftMatches[1] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n\n\t\t\tif (rightMatches == null || rightMatches[2] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftSpace = leftMatches[2] || '';\n\t\t\tconst rightSpace = rightMatches[1] || '';\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (primary === 'never' && leftSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'never' && rightSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!leftSpace) {\n\t\t\t\t\t\t\taddWhitespaceBefore(comment);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rightSpace) {\n\t\t\t\t\t\t\taddWhitespaceAfter(comment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst propertySets = {};\n\npropertySets.acceptCustomIdents = new Set([\n\t'animation',\n\t'animation-name',\n\t'font',\n\t'font-family',\n\t'counter-increment',\n\t'grid-row',\n\t'grid-column',\n\t'grid-area',\n\t'list-style',\n\t'list-style-type',\n]);\n\nmodule.exports = propertySets;\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},u=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},a=function(r){return{h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),w:u(r.w,0,100),b:u(r.b,0,100),a:u(r.a)};var t},e=function(r){return{h:n(r.h),w:n(r.w),b:n(r.b),a:n(r.a,3)}},b=function(r){return{h:function(r){var t=r.r,n=r.g,u=r.b,a=r.a,e=Math.max(t,n,u),b=e-Math.min(t,n,u),o=b?e===t?(n-u)/b:e===n?2+(u-t)/b:4+(t-n)/b:0;return{h:60*(o<0?o+6:o),s:e?b/e*100:0,v:e/255*100,a:a}}(r).h,w:Math.min(r.r,r.g,r.b)/255*100,b:100-Math.max(r.r,r.g,r.b)/255*100,a:r.a}},o=function(r){return function(r){var t=r.h,n=r.s,u=r.v,a=r.a;t=t/360*6,n/=100,u/=100;var e=Math.floor(t),b=u*(1-n),o=u*(1-(t-e)*n),i=u*(1-(1-t+e)*n),h=e%6;return{r:255*[u,o,b,b,i,u][h],g:255*[i,u,u,o,b,b][h],b:255*[b,b,i,u,u,o][h],a:a}}({h:r.h,s:100===r.b?0:100-r.w/(100-r.b)*100,v:100-r.b,a:r.a})},i=function(r){var n=r.h,u=r.w,e=r.b,b=r.a,i=void 0===b?1:b;if(!t(n)||!t(u)||!t(e))return null;var h=a({h:Number(n),w:Number(u),b:Number(e),a:Number(i)});return o(h)},h=/^hwb\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,d=function(t){var n=h.exec(t);if(!n)return null;var u,e,b=a({h:(u=n[1],e=n[2],void 0===e&&(e=\"deg\"),Number(u)*(r[e]||1)),w:Number(n[3]),b:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return o(b)};export default function(r,t){r.prototype.toHwb=function(){return e(b(this.rgba))},r.prototype.toHwbString=function(){return r=e(b(this.rgba)),t=r.h,n=r.w,u=r.b,(a=r.a)<1?\"hwb(\"+t+\" \"+n+\"% \"+u+\"% / \"+a+\")\":\"hwb(\"+t+\" \"+n+\"% \"+u+\"%)\";var r,t,n,u,a},t.string.push([d,\"hwb\"]),t.object.push([i,\"hwb\"])}\n","var a=function(a){return\"string\"==typeof a?a.length>0:\"number\"==typeof a},t=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=Math.pow(10,t)),Math.round(o*a)/o+0},o=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=1),a>o?o:a>t?a:t},r=function(a){var t=a/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(a){return 255*(a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a)},n=96.422,p=100,M=82.521,u=function(a){var t,r,n={x:.9555766*(t=a).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return r={r:h(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:h(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:h(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:a.a},{r:o(r.r,0,255),g:o(r.g,0,255),b:o(r.b,0,255),a:o(r.a)}},e=function(a){var t=r(a.r),h=r(a.g),u=r(a.b);return function(a){return{x:o(a.x,0,n),y:o(a.y,0,p),z:o(a.z,0,M),a:o(a.a)}}(function(a){return{x:1.0478112*a.x+.0228866*a.y+-.050127*a.z,y:.0295424*a.x+.9904844*a.y+-.0170491*a.z,z:-.0092345*a.x+.0150436*a.y+.7521316*a.z,a:a.a}}({x:100*(.4124564*t+.3575761*h+.1804375*u),y:100*(.2126729*t+.7151522*h+.072175*u),z:100*(.0193339*t+.119192*h+.9503041*u),a:a.a}))},w=216/24389,b=24389/27,i=function(t){var r=t.l,h=t.a,n=t.b,p=t.alpha,M=void 0===p?1:p;if(!a(r)||!a(h)||!a(n))return null;var u=function(a){return{l:o(a.l,0,400),a:a.a,b:a.b,alpha:o(a.alpha)}}({l:Number(r),a:Number(h),b:Number(n),alpha:Number(M)});return l(u)},l=function(a){var t=(a.l+16)/116,o=a.a/500+t,r=t-a.b/200;return u({x:(Math.pow(o,3)>w?Math.pow(o,3):(116*o-16)/b)*n,y:(a.l>8?Math.pow((a.l+16)/116,3):a.l/b)*p,z:(Math.pow(r,3)>w?Math.pow(r,3):(116*r-16)/b)*M,a:a.alpha})};export default function(a,r){a.prototype.toLab=function(){return o=e(this.rgba),h=o.y/p,u=o.z/M,r=(r=o.x/n)>w?Math.cbrt(r):(b*r+16)/116,a={l:116*(h=h>w?Math.cbrt(h):(b*h+16)/116)-16,a:500*(r-h),b:200*(h-(u=u>w?Math.cbrt(u):(b*u+16)/116)),alpha:o.a},{l:t(a.l,2),a:t(a.a,2),b:t(a.b,2),alpha:t(a.alpha,3)};var a,o,r,h,u},a.prototype.delta=function(r){void 0===r&&(r=\"#FFF\");var h=r instanceof a?r:new a(r),n=function(a,t){var o=a.l,r=a.a,h=a.b,n=t.l,p=t.a,M=t.b,u=180/Math.PI,e=Math.PI/180,w=Math.pow(Math.pow(r,2)+Math.pow(h,2),.5),b=Math.pow(Math.pow(p,2)+Math.pow(M,2),.5),i=(o+n)/2,l=Math.pow((w+b)/2,7),c=.5*(1-Math.pow(l/(l+Math.pow(25,7)),.5)),f=r*(1+c),y=p*(1+c),v=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),x=Math.pow(Math.pow(y,2)+Math.pow(M,2),.5),z=(v+x)/2,s=0===f&&0===h?0:Math.atan2(h,f)*u,d=0===y&&0===M?0:Math.atan2(M,y)*u;s<0&&(s+=360),d<0&&(d+=360);var g=d-s,m=Math.abs(d-s);m>180&&d<=s?g+=360:m>180&&d>s&&(g-=360);var N=s+d;m<=180?N/=2:N=(s+d<360?N+360:N-360)/2;var F=1-.17*Math.cos(e*(N-30))+.24*Math.cos(2*e*N)+.32*Math.cos(e*(3*N+6))-.2*Math.cos(e*(4*N-63)),L=n-o,I=x-v,P=2*Math.sin(e*g/2)*Math.pow(v*x,.5),j=1+.015*Math.pow(i-50,2)/Math.pow(20+Math.pow(i-50,2),.5),k=1+.045*z,q=1+.015*z*F,A=30*Math.exp(-1*Math.pow((N-275)/25,2)),B=-2*Math.pow(l/(l+Math.pow(25,7)),.5)*Math.sin(2*e*A);return Math.pow(Math.pow(L/1/j,2)+Math.pow(I/1/k,2)+Math.pow(P/1/q,2)+B*I*P/(1*k*1*q),.5)}(this.toLab(),h.toLab())/100;return o(t(n,3))},r.object.push([i,\"lab\"])}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},a=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=Math.pow(10,t)),Math.round(a*r)/a+0},n=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=1),r>a?a:r>t?r:t},u=function(r){var t=r/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(r){return 255*(r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r)},o=96.422,e=100,c=82.521,i=function(r){var t,a,u={x:.9555766*(t=r).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return a={r:h(.032404542*u.x-.015371385*u.y-.004985314*u.z),g:h(-.00969266*u.x+.018760108*u.y+41556e-8*u.z),b:h(556434e-9*u.x-.002040259*u.y+.010572252*u.z),a:r.a},{r:n(a.r,0,255),g:n(a.g,0,255),b:n(a.b,0,255),a:n(a.a)}},l=function(r){var t=u(r.r),a=u(r.g),h=u(r.b);return function(r){return{x:n(r.x,0,o),y:n(r.y,0,e),z:n(r.z,0,c),a:n(r.a)}}(function(r){return{x:1.0478112*r.x+.0228866*r.y+-.050127*r.z,y:.0295424*r.x+.9904844*r.y+-.0170491*r.z,z:-.0092345*r.x+.0150436*r.y+.7521316*r.z,a:r.a}}({x:100*(.4124564*t+.3575761*a+.1804375*h),y:100*(.2126729*t+.7151522*a+.072175*h),z:100*(.0193339*t+.119192*a+.9503041*h),a:r.a}))},f=216/24389,b=24389/27,d=function(r){return{l:n(r.l,0,100),c:r.c,h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),a:r.a};var t},p=function(r){return{l:a(r.l,2),c:a(r.c,2),h:a(r.h,2),a:a(r.a,3)}},v=function(r){var a=r.l,n=r.c,u=r.h,h=r.a,o=void 0===h?1:h;if(!t(a)||!t(n)||!t(u))return null;var e=d({l:Number(a),c:Number(n),h:Number(u),a:Number(o)});return M(e)},y=function(r){var t=function(r){var t=l(r),a=t.x/o,n=t.y/e,u=t.z/c;return a=a>f?Math.cbrt(a):(b*a+16)/116,{l:116*(n=n>f?Math.cbrt(n):(b*n+16)/116)-16,a:500*(a-n),b:200*(n-(u=u>f?Math.cbrt(u):(b*u+16)/116)),alpha:t.a}}(r),n=a(t.a,3),u=a(t.b,3),h=Math.atan2(u,n)/Math.PI*180;return{l:t.l,c:Math.sqrt(n*n+u*u),h:h<0?h+360:h,a:t.alpha}},M=function(r){return t={l:r.l,a:r.c*Math.cos(r.h*Math.PI/180),b:r.c*Math.sin(r.h*Math.PI/180),alpha:r.a},n=t.a/500+(a=(t.l+16)/116),u=a-t.b/200,i({x:(Math.pow(n,3)>f?Math.pow(n,3):(116*n-16)/b)*o,y:(t.l>8?Math.pow((t.l+16)/116,3):t.l/b)*e,z:(Math.pow(u,3)>f?Math.pow(u,3):(116*u-16)/b)*c,a:t.alpha});var t,a,n,u},x=/^lch\\(\\s*([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,s=function(t){var a=x.exec(t);if(!a)return null;var n,u,h=d({l:Number(a[1]),c:Number(a[2]),h:(n=a[3],u=a[4],void 0===u&&(u=\"deg\"),Number(n)*(r[u]||1)),a:void 0===a[5]?1:Number(a[5])/(a[6]?100:1)});return M(h)};export default function(r,t){r.prototype.toLch=function(){return p(y(this.rgba))},r.prototype.toLchString=function(){return r=p(y(this.rgba)),t=r.l,a=r.c,n=r.h,(u=r.a)<1?\"lch(\"+t+\"% \"+a+\" \"+n+\" / \"+u+\")\":\"lch(\"+t+\"% \"+a+\" \"+n+\")\";var r,t,a,n,u},t.string.push([s,\"lch\"]),t.object.push([v,\"lch\"])}\n","const { colord, extend } = require('colord');\nconst valueParser = require('postcss-value-parser');\n\nconst namesPlugin = require('colord/plugins/names');\nconst hwbPlugin = require('colord/plugins/hwb');\nconst labPlugin = require('colord/plugins/lab');\nconst lchPlugin = require('colord/plugins/lch');\n\nextend([\n\t// Type definitions are not compatible with commonjs.\n\t/** @type {any} */ (namesPlugin),\n\t/** @type {any} */ (hwbPlugin),\n\t/** @type {any} */ (labPlugin),\n\t/** @type {any} */ (lchPlugin),\n\n\t/* Syntaxes that is removed in Color Module Level 4 specification. */\n\n\t// hwb() with comma\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseHwbWithCommaString, /** @type {any} */ ('hwb-with-comma')]);\n\t},\n\t// gray()\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseGrayString, /** @type {any} */ ('gray')]);\n\t},\n]);\n\nmodule.exports = {\n\tcolord,\n};\n\n/**\n * Parses a valid hwb with comma CSS color function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()#syntax\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseHwbWithCommaString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('hwb(') || !input.endsWith(')') || input.includes('/')) {\n\t\treturn null;\n\t}\n\n\tconst [hue, whiteness = '', blackness = '', alpha, ...extraArgs] = input.slice(4, -1).split(',');\n\n\tif (!hue || !hue.trim() || !whiteness.trim() || !blackness.trim() || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\t// Change the delimiter and parse with colord.\n\tconst colordInstance = colord(\n\t\t`hwb(${hue} ${whiteness} ${blackness}${alpha ? ` / ${alpha}` : ''})`,\n\t);\n\n\tif (!colordInstance.isValid()) {\n\t\treturn null;\n\t}\n\n\treturn colordInstance.rgba;\n}\n\n/**\n * Parses a valid gray() CSS color function\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseGrayString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('gray(') || !input.endsWith(')')) {\n\t\treturn null;\n\t}\n\n\tconst [lightness, alpha, ...extraArgs] = input.slice(5, -1).split(',');\n\n\tif (!lightness || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\tconst lightnessWithUnit = valueParser.unit(lightness.trim());\n\n\tif (!lightnessWithUnit || !['', '%'].includes(lightnessWithUnit.unit)) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {import('colord/types').LabColor | import('colord/types').LabaColor}\n\t */\n\tlet colorObject = {\n\t\tl: Number(lightnessWithUnit.number),\n\t\ta: 0,\n\t\tb: 0,\n\t};\n\n\tif (alpha) {\n\t\tconst alphaWithUnit = valueParser.unit(alpha.trim());\n\n\t\tif (!alphaWithUnit || !['', '%'].includes(alphaWithUnit.unit)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tcolorObject = {\n\t\t\t...colorObject,\n\t\t\talpha: Number(alphaWithUnit.number) / (alphaWithUnit.unit ? 100 : 1),\n\t\t};\n\t}\n\n\treturn colord(colorObject).rgba;\n}\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst propertySets = require('../../reference/propertySets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { colord } = require('./colordUtils');\n\nconst ruleName = 'color-named';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (named, original) => `Expected \"${original}\" to be \"${named}\"`,\n\trejected: (named) => `Unexpected named color \"${named}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-named',\n};\n\n// Todo tested on case insensitivity\nconst NODE_TYPES = new Set(['word', 'function']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['never', 'always-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (propertySets.acceptCustomIdents.has(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if the property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst type = node.type;\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function') && type === 'function') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if neither a word nor a function\n\t\t\t\tif (!NODE_TYPES.has(type)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for named colors for \"never\" option\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'never' &&\n\t\t\t\t\ttype === 'word' &&\n\t\t\t\t\t/^[a-z]+$/iu.test(value) &&\n\t\t\t\t\tvalue.toLowerCase() !== 'transparent' &&\n\t\t\t\t\tcolord(value).isValid()\n\t\t\t\t) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(value),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\tvalue.length,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check \"always-where-possible\" option ...\n\t\t\t\tif (primary !== 'always-where-possible') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet rawColorString = null;\n\t\t\t\tlet colorString = null;\n\n\t\t\t\tif (type === 'function') {\n\t\t\t\t\trawColorString = valueParser.stringify(node);\n\n\t\t\t\t\t// First by checking for alternative color function representations ...\n\t\t\t\t\t// Remove all spaces to match what's in `representations`\n\t\t\t\t\tcolorString = rawColorString.replace(/\\s*([,/()])\\s*/g, '$1').replace(/\\s{2,}/g, ' ');\n\t\t\t\t} else if (type === 'word' && value.startsWith('#')) {\n\t\t\t\t\t// Then by checking for alternative hex representations\n\t\t\t\t\trawColorString = colorString = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst color = colord(colorString);\n\n\t\t\t\tif (!color.isValid()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst namedColor = color.toName();\n\n\t\t\t\tif (namedColor && namedColor.toLowerCase() !== 'transparent') {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.expected(namedColor, colorString),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\trawColorString.length,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t */\n\t\tfunction complain(message, node, index, length) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a property is a custom one\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\treturn property.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a property is SCSS variable\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\t// SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))\n\tif (property.startsWith('$')) {\n\t\treturn true;\n\t}\n\n\t// SCSS var within a namespace (e.g. namespace.$var: x)\n\tif (property.includes('.$')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isScssVariable = require('./isScssVariable');\nconst { isRoot, isRule } = require('./typeGuards');\n\n/**\n * @param {string} [lang]\n */\nfunction isStandardSyntaxLang(lang) {\n\treturn lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\nmodule.exports = function (decl) {\n\tconst prop = decl.prop;\n\tconst parent = decl.parent;\n\n\t// Declarations belong in a declaration block or standard CSS source\n\tif (\n\t\tparent &&\n\t\tisRoot(parent) &&\n\t\tparent.source &&\n\t\t!isStandardSyntaxLang(\n\t\t\t/** @type {import('postcss').Source & {lang?: string}} */ (parent.source).lang,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// SCSS var; covers map and list declarations\n\tif (isScssVariable(prop)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\tif (prop[0] === '@' && prop[1] !== '{') {\n\t\treturn false;\n\t}\n\n\t// Less map declaration\n\tif (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {\n\t\treturn false;\n\t}\n\n\t// Less map (e.g. #my-map() { myprop: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector.startsWith('#') &&\n\t\tparent.selector.endsWith('()')\n\t) {\n\t\treturn false;\n\t}\n\n\t// Sass nested properties (e.g. border: { style: solid; color: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector[parent.selector.length - 1] === ':' &&\n\t\tparent.selector.substring(0, 2) !== '--'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Less &:extend\n\tif ('extend' in decl && decl.extend) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'custom-property-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before custom property',\n\trejected: 'Unexpected empty line before custom property',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-custom-property'],\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-single-line-block'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tparent != null &&\n\t\t\t\t(isAtRule(parent) || isRule(parent)) &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-custom-property') &&\n\t\t\t\t\tisAfterCustomProperty(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction isAfterCustomProperty(decl) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(decl);\n\n\treturn prevNode != null && isDeclaration(prevNode) && isCustomProperty(prevNode.prop);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var SKIP = 'skip';\nvar CHECK = 'check';\nvar ONLY = 'only';\n\nmodule.exports = function (options, callback) {\n  var source = options.source;\n  var target = options.target;\n\n  var skipComments = (options.comments) ? options.comments === SKIP : true;\n  var skipStrings = (options.strings) ? options.strings === SKIP : true;\n  var skipFunctionNames = (options.functionNames) ? options.functionNames === SKIP : true;\n  var skipFunctionArguments = options.functionArguments === SKIP;\n  var skipParentheticals = options.parentheticals === SKIP;\n\n  var onceOptionUsed = false;\n  Object.keys(options).forEach(function(key) {\n    if (options[key] !== ONLY) return;\n    if (!onceOptionUsed) {\n      onceOptionUsed = true;\n    } else {\n      throw new Error('Only one syntax feature option can be the \"only\" one to check');\n    }\n  });\n\n  var onlyComments = options.comments === ONLY;\n  var onlyStrings = options.strings === ONLY;\n  var onlyFunctionNames = options.functionNames === ONLY;\n  var onlyFunctionArguments = options.functionArguments === ONLY;\n  var onlyParentheticals = options.parentheticals === ONLY;\n\n  var insideString = false;\n  var insideComment = false;\n  var insideSingleLineComment = false;\n  var insideParens = false;\n  var insideFunctionArguments = false;\n  var openingParenCount = 0;\n  var matchCount = 0;\n  var openingQuote;\n\n  var targetIsArray = Array.isArray(target);\n\n  // If the target is just a string, it is easy to check whether\n  // some index of the source matches it.\n  // If the target is an array of strings, though, we have to\n  // check whether some index of the source matches *any* of\n  // those target strings (stopping after the first match).\n  var getMatch = (function () {\n    if (!targetIsArray) {\n      return getMatchBase.bind(null, target);\n    }\n    return function(index) {\n      for (var ti = 0, tl = target.length; ti < tl; ti++) {\n        var checkResult = getMatchBase(target[ti], index);\n        if (checkResult) return checkResult;\n      }\n      return false;\n    }\n  })();\n\n  function getMatchBase(targetString, index) {\n    var targetStringLength = targetString.length;\n\n    // Target is a single character\n    if (targetStringLength === 1 && source[index] !== targetString) return false;\n\n    // Target is multiple characters\n    if (source.substr(index, targetStringLength) !== targetString) return false;\n\n    return {\n      insideParens: insideParens,\n      insideFunctionArguments: insideFunctionArguments,\n      insideComment: insideComment,\n      insideString: insideString,\n      startIndex: index,\n      endIndex: index + targetStringLength,\n      target: targetString,\n    };\n  }\n\n  for (var i = 0, l = source.length; i < l; i++) {\n    var currentChar = source[i];\n\n    // Register the beginning of a comment\n    if (\n      !insideString && !insideComment\n      && currentChar === \"/\"\n      && source[i - 1] !== \"\\\\\" // escaping\n    ) {\n      // standard comments\n      if (source[i + 1] === \"*\") {\n        insideComment = true;\n        continue;\n      }\n      // single-line comments\n      if (source[i + 1] === \"/\") {\n        insideComment = true;\n        insideSingleLineComment = true;\n        continue;\n      }\n    }\n\n    if (insideComment) {\n      // Register the end of a standard comment\n      if (\n        !insideSingleLineComment\n        && currentChar === \"*\"\n        && source[i - 1] !== \"\\\\\" // escaping\n        && source[i + 1] === \"/\"\n        && source[i - 1] !== \"/\" // don't end if it's /*/\n      ) {\n        insideComment = false;\n        continue;\n      }\n\n      // Register the end of a single-line comment\n      if (\n        insideSingleLineComment\n        && currentChar === \"\\n\"\n      ) {\n        insideComment = false;\n        insideSingleLineComment = false;\n      }\n\n      if (skipComments) continue;\n    }\n\n    // Register the beginning of a string\n    if (!insideComment && !insideString && (currentChar === \"\\\"\" || currentChar === \"'\")) {\n      if (source[i - 1] === \"\\\\\") continue; // escaping\n\n      openingQuote = currentChar;\n      insideString = true;\n\n      // For string-quotes rule\n      if (target === currentChar) handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideString) {\n      // Register the end of a string\n      if (currentChar === openingQuote) {\n        if (source[i - 1] === \"\\\\\") continue; // escaping\n        insideString = false;\n        continue;\n      }\n\n      if (skipStrings) continue;\n    }\n\n    // Register the beginning of parens/functions\n    if (!insideString && !insideComment && currentChar === \"(\") {\n      // Keep track of opening parentheticals so that we\n      // know when the outermost function (possibly\n      // containing nested functions) is closing\n      openingParenCount++;\n\n      insideParens = true;\n      // Only inside a function if there is a function name\n      // before the opening paren\n      if (/[a-zA-Z]/.test(source[i - 1])) {\n        insideFunctionArguments = true;\n      }\n\n      if (target === \"(\") handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideParens) {\n      // Register the end of a function\n      if (currentChar === \")\") {\n        openingParenCount--;\n        // Do this here so the match is still technically inside a function\n        if (target === \")\") handleMatch(getMatch(i));\n        if (openingParenCount === 0) {\n          insideParens = false;\n          insideFunctionArguments = false;\n        }\n        continue;\n      }\n    }\n\n    var isFunctionName = /^[a-zA-Z]*\\(/.test(source.slice(i));\n    if (skipFunctionNames && isFunctionName) continue;\n    if (onlyFunctionNames && !isFunctionName) continue;\n\n    var match = getMatch(i);\n\n    if (!match) continue;\n    handleMatch(match);\n    if (options.once) return;\n  }\n\n  function handleMatch(match) {\n    if (onlyParentheticals && !insideParens) return;\n    if (skipParentheticals && insideParens) return;\n    if (onlyFunctionArguments && !insideFunctionArguments) return;\n    if (skipFunctionArguments && insideFunctionArguments) return;\n    if (onlyStrings && !insideString) return;\n    if (onlyComments && !insideComment) return;\n    matchCount++;\n    callback(match, matchCount);\n  }\n}\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix: ((decl: Declaration, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function declarationBangSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst indexOffset = declarationValueIndex(decl);\n\t\tconst declString = decl.toString();\n\t\tconst valueString = decl.toString().slice(indexOffset);\n\n\t\tif (!valueString.includes('!')) {\n\t\t\treturn;\n\t\t}\n\n\t\tstyleSearch({ source: valueString, target: '!' }, (match) => {\n\t\t\tcheck(declString, match.startIndex + indexOffset, decl);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {Declaration} decl\n\t */\n\tfunction check(source, index, decl) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(decl, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"!\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-bang-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(value: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < declValue.length) {\n\t\t\t\t\t\t\ttarget = declValue;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= declValue.length;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex + 1);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex + 1);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// To ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// To ignore comments that are not empty\n\t\t\tif (comment.text && comment.text.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst htmlTags = require('html-tags');\n\nconst keywordSets = {};\n\nkeywordSets.nonLengthUnits = new Set([\n\t// Relative length units\n\t'%',\n\t// Time length units\n\t's',\n\t'ms',\n\t// Angle\n\t'deg',\n\t'grad',\n\t'turn',\n\t'rad',\n\t// Frequency\n\t'Hz',\n\t'kHz',\n\t// Resolution\n\t'dpi',\n\t'dpcm',\n\t'dppx',\n]);\n\nkeywordSets.lengthUnits = new Set([\n\t// Relative length units\n\t'em',\n\t'ex',\n\t'ch',\n\t'rem',\n\t'rlh',\n\t'lh',\n\t// Viewport-percentage lengths\n\t'dvh',\n\t'dvmax',\n\t'dvmin',\n\t'dvw',\n\t'lvh',\n\t'lvmax',\n\t'lvmin',\n\t'lvw',\n\t'svh',\n\t'svmax',\n\t'svmin',\n\t'svw',\n\t'vh',\n\t'vw',\n\t'vmin',\n\t'vmax',\n\t'vm',\n\t// Absolute length units\n\t'px',\n\t'mm',\n\t'cm',\n\t'in',\n\t'pt',\n\t'pc',\n\t'q',\n\t'mozmm',\n\t// Flexible length units\n\t'fr',\n]);\n\nkeywordSets.units = uniteSets(keywordSets.nonLengthUnits, keywordSets.lengthUnits);\n\nkeywordSets.camelCaseFunctionNames = new Set([\n\t'translateX',\n\t'translateY',\n\t'translateZ',\n\t'scaleX',\n\t'scaleY',\n\t'scaleZ',\n\t'rotateX',\n\t'rotateY',\n\t'rotateZ',\n\t'skewX',\n\t'skewY',\n]);\n\nkeywordSets.basicKeywords = new Set(['initial', 'inherit', 'revert', 'revert-layer', 'unset']);\n\nkeywordSets.systemFontValues = uniteSets(keywordSets.basicKeywords, [\n\t'caption',\n\t'icon',\n\t'menu',\n\t'message-box',\n\t'small-caption',\n\t'status-bar',\n]);\n\nkeywordSets.fontFamilyKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'serif',\n\t'sans-serif',\n\t'cursive',\n\t'fantasy',\n\t'monospace',\n\t'system-ui',\n\t'ui-serif',\n\t'ui-sans-serif',\n\t'ui-monospace',\n\t'ui-rounded',\n]);\n\nkeywordSets.fontWeightRelativeKeywords = new Set(['bolder', 'lighter']);\n\nkeywordSets.fontWeightAbsoluteKeywords = new Set(['bold']);\n\nkeywordSets.fontWeightNumericKeywords = new Set([\n\t'100',\n\t'200',\n\t'300',\n\t'400',\n\t'500',\n\t'600',\n\t'700',\n\t'800',\n\t'900',\n]);\n\nkeywordSets.fontWeightKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.fontWeightRelativeKeywords,\n\tkeywordSets.fontWeightAbsoluteKeywords,\n\tkeywordSets.fontWeightNumericKeywords,\n);\n\nkeywordSets.animationNameKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.animationTimingFunctionKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'linear',\n\t'ease',\n\t'ease-in',\n\t'ease-in-out',\n\t'ease-out',\n\t'step-start',\n\t'step-end',\n\t'steps',\n\t'cubic-bezier',\n]);\n\nkeywordSets.animationIterationCountKeywords = new Set(['infinite']);\n\nkeywordSets.animationDirectionKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'reverse',\n\t'alternate',\n\t'alternate-reverse',\n]);\n\nkeywordSets.animationFillModeKeywords = new Set(['none', 'forwards', 'backwards', 'both']);\n\nkeywordSets.animationPlayStateKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'running',\n\t'paused',\n]);\n\n// cf. https://developer.mozilla.org/en-US/docs/Web/CSS/animation\nkeywordSets.animationShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.animationNameKeywords,\n\tkeywordSets.animationTimingFunctionKeywords,\n\tkeywordSets.animationIterationCountKeywords,\n\tkeywordSets.animationDirectionKeywords,\n\tkeywordSets.animationFillModeKeywords,\n\tkeywordSets.animationPlayStateKeywords,\n);\n\n// These are the ones that can have single-colon notation\nkeywordSets.levelOneAndTwoPseudoElements = new Set([\n\t'before',\n\t'after',\n\t'first-line',\n\t'first-letter',\n]);\n\nkeywordSets.levelThreeAndUpPseudoElements = new Set([\n\t'before',\n\t'after',\n\t'first-line',\n\t'first-letter',\n\t// These are the ones that require double-colon notation\n\t'backdrop',\n\t'content',\n\t'cue',\n\t'file-selector-button',\n\t'grammar-error',\n\t'marker',\n\t'placeholder',\n\t'selection',\n\t'shadow',\n\t'slotted',\n\t'spelling-error',\n\t'target-text',\n]);\n\nkeywordSets.shadowTreePseudoElements = new Set(['part']);\n\nkeywordSets.webkitScrollbarPseudoElements = new Set([\n\t'-webkit-resizer',\n\t'-webkit-scrollbar',\n\t'-webkit-scrollbar-button',\n\t'-webkit-scrollbar-corner',\n\t'-webkit-scrollbar-thumb',\n\t'-webkit-scrollbar-track',\n\t'-webkit-scrollbar-track-piece',\n]);\n\nkeywordSets.vendorSpecificPseudoElements = new Set([\n\t'-moz-focus-inner',\n\t'-moz-focus-outer',\n\t'-moz-list-bullet',\n\t'-moz-meter-bar',\n\t'-moz-placeholder',\n\t'-moz-progress-bar',\n\t'-moz-range-progress',\n\t'-moz-range-thumb',\n\t'-moz-range-track',\n\t'-ms-browse',\n\t'-ms-check',\n\t'-ms-clear',\n\t'-ms-expand',\n\t'-ms-fill',\n\t'-ms-fill-lower',\n\t'-ms-fill-upper',\n\t'-ms-reveal',\n\t'-ms-thumb',\n\t'-ms-ticks-after',\n\t'-ms-ticks-before',\n\t'-ms-tooltip',\n\t'-ms-track',\n\t'-ms-value',\n\t'-webkit-color-swatch',\n\t'-webkit-color-swatch-wrapper',\n\t'-webkit-calendar-picker-indicator',\n\t'-webkit-clear-button',\n\t'-webkit-date-and-time-value',\n\t'-webkit-datetime-edit',\n\t'-webkit-datetime-edit-ampm-field',\n\t'-webkit-datetime-edit-day-field',\n\t'-webkit-datetime-edit-fields-wrapper',\n\t'-webkit-datetime-edit-hour-field',\n\t'-webkit-datetime-edit-millisecond-field',\n\t'-webkit-datetime-edit-minute-field',\n\t'-webkit-datetime-edit-month-field',\n\t'-webkit-datetime-edit-second-field',\n\t'-webkit-datetime-edit-text',\n\t'-webkit-datetime-edit-week-field',\n\t'-webkit-datetime-edit-year-field',\n\t'-webkit-details-marker',\n\t'-webkit-distributed',\n\t'-webkit-file-upload-button',\n\t'-webkit-input-placeholder',\n\t'-webkit-keygen-select',\n\t'-webkit-meter-bar',\n\t'-webkit-meter-even-less-good-value',\n\t'-webkit-meter-inner-element',\n\t'-webkit-meter-optimum-value',\n\t'-webkit-meter-suboptimum-value',\n\t'-webkit-progress-bar',\n\t'-webkit-progress-inner-element',\n\t'-webkit-progress-value',\n\t'-webkit-search-cancel-button',\n\t'-webkit-search-decoration',\n\t'-webkit-search-results-button',\n\t'-webkit-search-results-decoration',\n\t'-webkit-slider-runnable-track',\n\t'-webkit-slider-thumb',\n\t'-webkit-textfield-decoration-container',\n\t'-webkit-validation-bubble',\n\t'-webkit-validation-bubble-arrow',\n\t'-webkit-validation-bubble-arrow-clipper',\n\t'-webkit-validation-bubble-heading',\n\t'-webkit-validation-bubble-message',\n\t'-webkit-validation-bubble-text-block',\n\t...keywordSets.webkitScrollbarPseudoElements,\n]);\n\nkeywordSets.pseudoElements = uniteSets(\n\tkeywordSets.levelOneAndTwoPseudoElements,\n\tkeywordSets.levelThreeAndUpPseudoElements,\n\tkeywordSets.vendorSpecificPseudoElements,\n\tkeywordSets.shadowTreePseudoElements,\n);\n\nkeywordSets.aNPlusBNotationPseudoClasses = new Set([\n\t'nth-column',\n\t'nth-last-column',\n\t'nth-last-of-type',\n\t'nth-of-type',\n]);\n\nkeywordSets.linguisticPseudoClasses = new Set(['dir', 'lang']);\n\nkeywordSets.atRulePagePseudoClasses = new Set(['first', 'right', 'left', 'blank']);\n\nkeywordSets.logicalCombinationsPseudoClasses = new Set(['has', 'is', 'matches', 'not', 'where']);\n\nkeywordSets.aNPlusBOfSNotationPseudoClasses = new Set(['nth-child', 'nth-last-child']);\n\nkeywordSets.otherPseudoClasses = new Set([\n\t'active',\n\t'any-link',\n\t'autofill',\n\t'blank',\n\t'checked',\n\t'current',\n\t'default',\n\t'defined',\n\t'disabled',\n\t'empty',\n\t'enabled',\n\t'first-child',\n\t'first-of-type',\n\t'focus',\n\t'focus-within',\n\t'focus-visible',\n\t'fullscreen',\n\t'fullscreen-ancestor',\n\t'future',\n\t'host',\n\t'host-context',\n\t'hover',\n\t'indeterminate',\n\t'in-range',\n\t'invalid',\n\t'last-child',\n\t'last-of-type',\n\t'link',\n\t'only-child',\n\t'only-of-type',\n\t'optional',\n\t'out-of-range',\n\t'past',\n\t'placeholder-shown',\n\t'playing',\n\t'picture-in-picture',\n\t'paused',\n\t'read-only',\n\t'read-write',\n\t'required',\n\t'root',\n\t'scope',\n\t'state',\n\t'target',\n\t'unresolved',\n\t'user-invalid',\n\t'user-valid',\n\t'valid',\n\t'visited',\n\t'window-inactive', // for ::selection (chrome)\n]);\n\nkeywordSets.vendorSpecificPseudoClasses = new Set([\n\t'-khtml-drag',\n\t'-moz-any',\n\t'-moz-any-link',\n\t'-moz-broken',\n\t'-moz-drag-over',\n\t'-moz-first-node',\n\t'-moz-focusring',\n\t'-moz-full-screen',\n\t'-moz-full-screen-ancestor',\n\t'-moz-last-node',\n\t'-moz-loading',\n\t'-moz-meter-optimum',\n\t'-moz-meter-sub-optimum',\n\t'-moz-meter-sub-sub-optimum',\n\t'-moz-placeholder',\n\t'-moz-submit-invalid',\n\t'-moz-suppressed',\n\t'-moz-ui-invalid',\n\t'-moz-ui-valid',\n\t'-moz-user-disabled',\n\t'-moz-window-inactive',\n\t'-ms-fullscreen',\n\t'-ms-input-placeholder',\n\t'-webkit-drag',\n\t'-webkit-any',\n\t'-webkit-any-link',\n\t'-webkit-autofill',\n\t'-webkit-full-screen',\n\t'-webkit-full-screen-ancestor',\n]);\n\n// https://webkit.org/blog/363/styling-scrollbars/\nkeywordSets.webkitScrollbarPseudoClasses = new Set([\n\t'horizontal',\n\t'vertical',\n\t'decrement',\n\t'increment',\n\t'start',\n\t'end',\n\t'double-button',\n\t'single-button',\n\t'no-button',\n\t'corner-present',\n\t'window-inactive',\n]);\n\nkeywordSets.pseudoClasses = uniteSets(\n\tkeywordSets.aNPlusBNotationPseudoClasses,\n\tkeywordSets.linguisticPseudoClasses,\n\tkeywordSets.logicalCombinationsPseudoClasses,\n\tkeywordSets.aNPlusBOfSNotationPseudoClasses,\n\tkeywordSets.otherPseudoClasses,\n\tkeywordSets.vendorSpecificPseudoClasses,\n);\n\nkeywordSets.shorthandTimeProperties = new Set(['transition', 'animation']);\n\nkeywordSets.longhandTimeProperties = new Set([\n\t'transition-duration',\n\t'transition-delay',\n\t'animation-duration',\n\t'animation-delay',\n]);\n\nkeywordSets.timeProperties = uniteSets(\n\tkeywordSets.shorthandTimeProperties,\n\tkeywordSets.longhandTimeProperties,\n);\n\nkeywordSets.camelCaseKeywords = new Set([\n\t'optimizeSpeed',\n\t'optimizeQuality',\n\t'optimizeLegibility',\n\t'geometricPrecision',\n\t'currentColor',\n\t'crispEdges',\n\t'visiblePainted',\n\t'visibleFill',\n\t'visibleStroke',\n\t'sRGB',\n\t'linearRGB',\n]);\n\n// https://developer.mozilla.org/docs/Web/CSS/counter-increment\nkeywordSets.counterIncrementKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.counterResetKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.gridRowKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\nkeywordSets.gridColumnKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\nkeywordSets.gridAreaKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\n// https://developer.mozilla.org/ru/docs/Web/CSS/list-style-type\nkeywordSets.listStyleTypeKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'none',\n\t'disc',\n\t'circle',\n\t'square',\n\t'decimal',\n\t'cjk-decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-greek',\n\t'lower-alpha',\n\t'lower-latin',\n\t'upper-alpha',\n\t'upper-latin',\n\t'arabic-indic',\n\t'armenian',\n\t'bengali',\n\t'cambodian',\n\t'cjk-earthly-branch',\n\t'cjk-ideographic',\n\t'devanagari',\n\t'ethiopic-numeric',\n\t'georgian',\n\t'gujarati',\n\t'gurmukhi',\n\t'hebrew',\n\t'hiragana',\n\t'hiragana-iroha',\n\t'japanese-formal',\n\t'japanese-informal',\n\t'kannada',\n\t'katakana',\n\t'katakana-iroha',\n\t'khmer',\n\t'korean-hangul-formal',\n\t'korean-hanja-formal',\n\t'korean-hanja-informal',\n\t'lao',\n\t'lower-armenian',\n\t'malayalam',\n\t'mongolian',\n\t'myanmar',\n\t'oriya',\n\t'persian',\n\t'simp-chinese-formal',\n\t'simp-chinese-informal',\n\t'tamil',\n\t'telugu',\n\t'thai',\n\t'tibetan',\n\t'trad-chinese-formal',\n\t'trad-chinese-informal',\n\t'upper-armenian',\n\t'disclosure-open',\n\t'disclosure-closed',\n\t// Non-standard extensions (without prefixe)\n\t'ethiopic-halehame',\n\t'ethiopic-halehame-am',\n\t'ethiopic-halehame-ti-er',\n\t'ethiopic-halehame-ti-et',\n\t'hangul',\n\t'hangul-consonant',\n\t'urdu',\n]);\n\nkeywordSets.listStylePositionKeywords = uniteSets(keywordSets.basicKeywords, ['inside', 'outside']);\n\nkeywordSets.listStyleImageKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.listStyleShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.listStyleTypeKeywords,\n\tkeywordSets.listStylePositionKeywords,\n\tkeywordSets.listStyleImageKeywords,\n);\n\nkeywordSets.fontStyleKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'italic',\n\t'oblique',\n]);\n\nkeywordSets.fontVariantKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'none',\n\t'historical-forms',\n\t'none',\n\t'common-ligatures',\n\t'no-common-ligatures',\n\t'discretionary-ligatures',\n\t'no-discretionary-ligatures',\n\t'historical-ligatures',\n\t'no-historical-ligatures',\n\t'contextual',\n\t'no-contextual',\n\t'small-caps',\n\t'small-caps',\n\t'all-small-caps',\n\t'petite-caps',\n\t'all-petite-caps',\n\t'unicase',\n\t'titling-caps',\n\t'lining-nums',\n\t'oldstyle-nums',\n\t'proportional-nums',\n\t'tabular-nums',\n\t'diagonal-fractions',\n\t'stacked-fractions',\n\t'ordinal',\n\t'slashed-zero',\n\t'jis78',\n\t'jis83',\n\t'jis90',\n\t'jis04',\n\t'simplified',\n\t'traditional',\n\t'full-width',\n\t'proportional-width',\n\t'ruby',\n]);\n\nkeywordSets.fontStretchKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'semi-condensed',\n\t'condensed',\n\t'extra-condensed',\n\t'ultra-condensed',\n\t'semi-expanded',\n\t'expanded',\n\t'extra-expanded',\n\t'ultra-expanded',\n]);\n\nkeywordSets.fontSizeKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'xx-small',\n\t'x-small',\n\t'small',\n\t'medium',\n\t'large',\n\t'x-large',\n\t'xx-large',\n\t'larger',\n\t'smaller',\n]);\n\nkeywordSets.lineHeightKeywords = uniteSets(keywordSets.basicKeywords, ['normal']);\n\nkeywordSets.fontShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.fontStyleKeywords,\n\tkeywordSets.fontVariantKeywords,\n\tkeywordSets.fontWeightKeywords,\n\tkeywordSets.fontStretchKeywords,\n\tkeywordSets.fontSizeKeywords,\n\tkeywordSets.lineHeightKeywords,\n\tkeywordSets.fontFamilyKeywords,\n);\n\nkeywordSets.keyframeSelectorKeywords = new Set(['from', 'to']);\n\n// https://www.w3.org/TR/css-page-3/#syntax-page-selector\nkeywordSets.pageMarginAtRules = new Set([\n\t'top-left-corner',\n\t'top-left',\n\t'top-center',\n\t'top-right',\n\t'top-right-corner',\n\t'bottom-left-corner',\n\t'bottom-left',\n\t'bottom-center',\n\t'bottom-right',\n\t'bottom-right-corner',\n\t'left-top',\n\t'left-middle',\n\t'left-bottom',\n\t'right-top',\n\t'right-middle',\n\t'right-bottom',\n]);\n\n// https://developer.mozilla.org/en/docs/Web/CSS/At-rule\nkeywordSets.atRules = uniteSets(keywordSets.pageMarginAtRules, [\n\t'annotation',\n\t'apply',\n\t'character-variant',\n\t'charset',\n\t'counter-style',\n\t'custom-media',\n\t'custom-selector',\n\t'document',\n\t'font-face',\n\t'font-feature-values',\n\t'import',\n\t'keyframes',\n\t'layer',\n\t'media',\n\t'namespace',\n\t'nest',\n\t'ornaments',\n\t'page',\n\t'property',\n\t'styleset',\n\t'stylistic',\n\t'supports',\n\t'swash',\n\t'viewport',\n]);\n\n// https://drafts.csswg.org/mediaqueries/#descdef-media-update\nkeywordSets.deprecatedMediaFeatureNames = new Set([\n\t'device-aspect-ratio',\n\t'device-height',\n\t'device-width',\n\t'max-device-aspect-ratio',\n\t'max-device-height',\n\t'max-device-width',\n\t'min-device-aspect-ratio',\n\t'min-device-height',\n\t'min-device-width',\n]);\n\n// https://drafts.csswg.org/mediaqueries/#descdef-media-update\nkeywordSets.mediaFeatureNames = uniteSets(keywordSets.deprecatedMediaFeatureNames, [\n\t'any-hover',\n\t'any-pointer',\n\t'aspect-ratio',\n\t'color',\n\t'color-gamut',\n\t'color-index',\n\t'display-mode',\n\t'dynamic-range',\n\t'forced-colors',\n\t'grid',\n\t'height',\n\t'hover',\n\t'inverted-colors',\n\t'light-level',\n\t'max-aspect-ratio',\n\t'max-color',\n\t'max-color-index',\n\t'max-height',\n\t'max-monochrome',\n\t'max-resolution',\n\t'max-width',\n\t'min-aspect-ratio',\n\t'min-color',\n\t'min-color-index',\n\t'min-height',\n\t'min-monochrome',\n\t'min-resolution',\n\t'min-width',\n\t'monochrome',\n\t'orientation',\n\t'overflow-block',\n\t'overflow-inline',\n\t'pointer',\n\t'prefers-color-scheme',\n\t'prefers-contrast',\n\t'prefers-reduced-motion',\n\t'prefers-reduced-transparency',\n\t'resolution',\n\t'scan',\n\t'scripting',\n\t'update',\n\t'video-dynamic-range',\n\t'width',\n]);\n\n// https://www.w3.org/TR/CSS22/ui.html#system-colors\nkeywordSets.systemColors = new Set([\n\t'activeborder',\n\t'activecaption',\n\t'appworkspace',\n\t'background',\n\t'buttonface',\n\t'buttonhighlight',\n\t'buttonshadow',\n\t'buttontext',\n\t'captiontext',\n\t'graytext',\n\t'highlight',\n\t'highlighttext',\n\t'inactiveborder',\n\t'inactivecaption',\n\t'inactivecaptiontext',\n\t'infobackground',\n\t'infotext',\n\t'menu',\n\t'menutext',\n\t'scrollbar',\n\t'threeddarkshadow',\n\t'threedface',\n\t'threedhighlight',\n\t'threedlightshadow',\n\t'threedshadow',\n\t'window',\n\t'windowframe',\n\t'windowtext',\n]);\n\n// typecasting htmlTags to be more generic; see https://github.com/stylelint/stylelint/pull/6013 for discussion\n/** @type {Set<string>} */\nkeywordSets.standardHtmlTags = new Set(htmlTags);\n\n// htmlTags includes only \"standard\" tags. So we augment it with older tags etc.\nkeywordSets.nonStandardHtmlTags = new Set([\n\t'acronym',\n\t'applet',\n\t'basefont',\n\t'big',\n\t'blink',\n\t'center',\n\t'content',\n\t'dir',\n\t'font',\n\t'frame',\n\t'frameset',\n\t'hgroup',\n\t'isindex',\n\t'keygen',\n\t'listing',\n\t'marquee',\n\t'nobr',\n\t'noembed',\n\t'plaintext',\n\t'spacer',\n\t'strike',\n\t'tt',\n\t'xmp',\n]);\n\nkeywordSets.validMixedCaseSvgElements = new Set([\n\t'altGlyph',\n\t'altGlyphDef',\n\t'altGlyphItem',\n\t'animateColor',\n\t'animateMotion',\n\t'animateTransform',\n\t'clipPath',\n\t'feBlend',\n\t'feColorMatrix',\n\t'feComponentTransfer',\n\t'feComposite',\n\t'feConvolveMatrix',\n\t'feDiffuseLighting',\n\t'feDisplacementMap',\n\t'feDistantLight',\n\t'feDropShadow',\n\t'feFlood',\n\t'feFuncA',\n\t'feFuncB',\n\t'feFuncG',\n\t'feFuncR',\n\t'feGaussianBlur',\n\t'feImage',\n\t'feMerge',\n\t'feMergeNode',\n\t'feMorphology',\n\t'feOffset',\n\t'fePointLight',\n\t'feSpecularLighting',\n\t'feSpotLight',\n\t'feTile',\n\t'feTurbulence',\n\t'foreignObject',\n\t'glyphRef',\n\t'linearGradient',\n\t'radialGradient',\n\t'textPath',\n]);\n\n/**\n * @param {(string[] | Set<string>)[]} args\n */\nfunction uniteSets(...args) {\n\treturn new Set([...args].reduce((result, set) => [...result, ...set], []));\n}\n\nmodule.exports = keywordSets;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atRule) => `Unexpected unknown at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (vendor.prefix(name) || keywordSets.atRules.has(name.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst atName = `@${name}`;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(atName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t\tword: atName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {number}\n */\nmodule.exports = function (atRule) {\n\t// Initial 1 is for the `@`\n\tlet index = 1 + atRule.name.length;\n\n\tif (atRule.raws.afterName) {\n\t\tindex += atRule.raws.afterName.length;\n\t}\n\n\treturn index;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'custom-media-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected custom media query name to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-media-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() !== 'custom-media') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst match = atRule.params.match(/^--(\\S+)\\b/);\n\n\t\t\tif (match == null || match[0] == null) {\n\t\t\t\tthrow new Error(`Unexpected at-rule params: \"${atRule.params}\"`);\n\t\t\t}\n\n\t\t\tconst customMediaName = match[1];\n\n\t\t\tif (regexpPattern.test(customMediaName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(atRule);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: atRule,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + match[0].length,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-property-no-missing-var-function';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (customProperty) => `Unexpected missing var function for \"${customProperty}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-no-missing-var-function',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/** @type {Set<string>} */\n\t\tconst knownCustomProperties = new Set();\n\n\t\troot.walkAtRules(/^property$/i, (atRule) => {\n\t\t\tknownCustomProperties.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls(({ prop }) => {\n\t\t\tif (isCustomProperty(prop)) knownCustomProperties.add(prop);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isVarFunction(node)) return false;\n\n\t\t\t\tif (!isDashedIdent(node)) return;\n\n\t\t\t\tif (!knownCustomProperties.has(node.value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isDashedIdent({ type, value }) {\n\treturn type === 'word' && value.startsWith('--');\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isVarFunction({ type, value }) {\n\treturn type === 'function' && value === 'var';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-no-hex',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isString } = require('./validateTypes');\n\n/** @typedef {false | { match: string, pattern: string, substring: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @template {unknown} T\n * @param {string} input\n * @param {T | T[]} comparison\n * @returns {ReturnValue}\n */\nmodule.exports = function containsString(input, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstString(input, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstString(input, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {unknown} comparison\n * @returns {ReturnValue}\n */\nfunction testAgainstString(value, comparison) {\n\tif (!comparison) return false;\n\n\tif (!isString(comparison)) return false;\n\n\tif (comparison.startsWith('/') && comparison.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\tif (value.includes(comparison)) {\n\t\treturn { match: value, pattern: comparison, substring: comparison };\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nconst containsString = require('../../utils/containsString');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-word-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (pattern) => `Unexpected word matching pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-word-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap\n\t\t\tif (firstFourChars === '/*# ') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchesWord = matchesStringOrRegExp(text, primary) || containsString(text, primary);\n\n\t\t\tif (!matchesWord) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(matchesWord.pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tword: matchesWord.substring,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"!\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-bang-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(val: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < value.length) {\n\t\t\t\t\t\t\ttarget = value;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, val);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= value.length;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = val;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + ' ' + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isRoot, isAtRule, isRule } = require('./typeGuards');\n\n/** @typedef {import('postcss').Root} Root */\n/** @typedef {import('postcss').Root} Document */\n/** @typedef {import('postcss').Node} PostcssNode */\n/** @typedef {import('postcss').Container} PostcssContainerNode */\n/** @typedef {import('postcss').Declaration} Declaration */\n/** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */\n\n/**\n * @param {PostcssNode} node\n * @returns {node is PostcssContainerNode}\n */\nfunction isContainerNode(node) {\n\treturn isRule(node) || isAtRule(node) || isRoot(node);\n}\n\n/**\n * In order to accommodate nested blocks (postcss-nested),\n * we need to run a shallow loop (instead of eachDecl() or eachRule(),\n * which loop recursively) and allow each nested block to accumulate\n * its own list of properties -- so that a property in a nested rule\n * does not conflict with the same property in the parent rule\n * executes a provided function once for each declaration block.\n *\n * @param {Root | Document} root - root element of file.\n * @param {(eachDecl: EachDeclaration) => void} callback - Function to execute for each declaration block\n *\n * @returns {void}\n */\nmodule.exports = function eachDeclarationBlock(root, callback) {\n\t/**\n\t * @param {PostcssNode} statement\n\t *\n\t * @returns {void}\n\t */\n\tfunction each(statement) {\n\t\tif (!isContainerNode(statement)) return;\n\n\t\tif (statement.nodes && statement.nodes.length) {\n\t\t\t/** @type {Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\tfor (const node of statement.nodes) {\n\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\tdecls.push(node);\n\t\t\t\t}\n\n\t\t\t\teach(node);\n\t\t\t}\n\n\t\t\tif (decls.length) {\n\t\t\t\tcallback(decls.forEach.bind(decls));\n\t\t\t}\n\t\t}\n\t}\n\n\teach(root);\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\nconst isScssVariable = require('./isScssVariable');\n\n/**\n * Check whether a property is standard\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\t// SCSS var\n\tif (isScssVariable(property)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x)\n\tif (property.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// Less append property value with space (e.g. transform+_: scale(2))\n\tif (property.endsWith('+') || property.endsWith('+_')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(property)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-no-duplicate-custom-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-duplicate-custom-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst decls = new Set();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isDuplicate = decls.has(prop);\n\n\t\t\t\tif (isDuplicate) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdecls.add(prop);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @type {Record<string, string[]>} */\nmodule.exports = {\n\tmargin: ['margin-top', 'margin-bottom', 'margin-left', 'margin-right'],\n\tpadding: ['padding-top', 'padding-bottom', 'padding-left', 'padding-right'],\n\tbackground: [\n\t\t'background-image',\n\t\t'background-size',\n\t\t'background-position',\n\t\t'background-repeat',\n\t\t'background-origin',\n\t\t'background-clip',\n\t\t'background-attachment',\n\t\t'background-color',\n\t],\n\tfont: [\n\t\t'font-style',\n\t\t'font-variant',\n\t\t'font-weight',\n\t\t'font-stretch',\n\t\t'font-size',\n\t\t'font-family',\n\t\t'line-height',\n\t],\n\tborder: [\n\t\t'border-top-width',\n\t\t'border-bottom-width',\n\t\t'border-left-width',\n\t\t'border-right-width',\n\t\t'border-top-style',\n\t\t'border-bottom-style',\n\t\t'border-left-style',\n\t\t'border-right-style',\n\t\t'border-top-color',\n\t\t'border-bottom-color',\n\t\t'border-left-color',\n\t\t'border-right-color',\n\t],\n\t'border-top': ['border-top-width', 'border-top-style', 'border-top-color'],\n\t'border-bottom': ['border-bottom-width', 'border-bottom-style', 'border-bottom-color'],\n\t'border-left': ['border-left-width', 'border-left-style', 'border-left-color'],\n\t'border-right': ['border-right-width', 'border-right-style', 'border-right-color'],\n\t'border-width': [\n\t\t'border-top-width',\n\t\t'border-bottom-width',\n\t\t'border-left-width',\n\t\t'border-right-width',\n\t],\n\t'border-style': [\n\t\t'border-top-style',\n\t\t'border-bottom-style',\n\t\t'border-left-style',\n\t\t'border-right-style',\n\t],\n\t'border-color': [\n\t\t'border-top-color',\n\t\t'border-bottom-color',\n\t\t'border-left-color',\n\t\t'border-right-color',\n\t],\n\t'list-style': ['list-style-type', 'list-style-position', 'list-style-image'],\n\t'border-radius': [\n\t\t'border-top-right-radius',\n\t\t'border-top-left-radius',\n\t\t'border-bottom-right-radius',\n\t\t'border-bottom-left-radius',\n\t],\n\ttransition: [\n\t\t'transition-delay',\n\t\t'transition-duration',\n\t\t'transition-property',\n\t\t'transition-timing-function',\n\t],\n\tanimation: [\n\t\t'animation-name',\n\t\t'animation-duration',\n\t\t'animation-timing-function',\n\t\t'animation-delay',\n\t\t'animation-iteration-count',\n\t\t'animation-direction',\n\t\t'animation-fill-mode',\n\t\t'animation-play-state',\n\t],\n\t'border-block-end': [\n\t\t'border-block-end-width',\n\t\t'border-block-end-style',\n\t\t'border-block-end-color',\n\t],\n\t'border-block-start': [\n\t\t'border-block-start-width',\n\t\t'border-block-start-style',\n\t\t'border-block-start-color',\n\t],\n\t'border-image': [\n\t\t'border-image-source',\n\t\t'border-image-slice',\n\t\t'border-image-width',\n\t\t'border-image-outset',\n\t\t'border-image-repeat',\n\t],\n\t'border-inline-end': [\n\t\t'border-inline-end-width',\n\t\t'border-inline-end-style',\n\t\t'border-inline-end-color',\n\t],\n\t'border-inline-start': [\n\t\t'border-inline-start-width',\n\t\t'border-inline-start-style',\n\t\t'border-inline-start-color',\n\t],\n\t'column-rule': ['column-rule-width', 'column-rule-style', 'column-rule-color'],\n\tcolumns: ['column-width', 'column-count'],\n\tflex: ['flex-grow', 'flex-shrink', 'flex-basis'],\n\t'flex-flow': ['flex-direction', 'flex-wrap'],\n\tgrid: [\n\t\t'grid-template-rows',\n\t\t'grid-template-columns',\n\t\t'grid-template-areas',\n\t\t'grid-auto-rows',\n\t\t'grid-auto-columns',\n\t\t'grid-auto-flow',\n\t\t'grid-column-gap',\n\t\t'grid-row-gap',\n\t],\n\t'grid-area': ['grid-row-start', 'grid-column-start', 'grid-row-end', 'grid-column-end'],\n\t'grid-column': ['grid-column-start', 'grid-column-end'],\n\t'grid-gap': ['grid-row-gap', 'grid-column-gap'],\n\t'grid-row': ['grid-row-start', 'grid-row-end'],\n\t'grid-template': ['grid-template-columns', 'grid-template-rows', 'grid-template-areas'],\n\toutline: ['outline-color', 'outline-style', 'outline-width'],\n\t'text-decoration': ['text-decoration-color', 'text-decoration-style', 'text-decoration-line'],\n\t'text-emphasis': ['text-emphasis-style', 'text-emphasis-color'],\n\tmask: [\n\t\t'mask-image',\n\t\t'mask-mode',\n\t\t'mask-position',\n\t\t'mask-size',\n\t\t'mask-repeat',\n\t\t'mask-origin',\n\t\t'mask-clip',\n\t\t'mask-composite',\n\t],\n};\n","'use strict';\n\nconst arrayEqual = require('../../utils/arrayEqual');\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (props) => `Expected shorthand property \"${props}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-redundant-longhand-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreShorthands: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst longhandProperties = Object.entries(shorthandData).reduce(\n\t\t\t(/** @type {Record<string, string[]>} */ longhandProps, [key, values]) => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreShorthands', key)) {\n\t\t\t\t\treturn longhandProps;\n\t\t\t\t}\n\n\t\t\t\tfor (const value of values) {\n\t\t\t\t\t(longhandProps[value] || (longhandProps[value] = [])).push(key);\n\t\t\t\t}\n\n\t\t\t\treturn longhandProps;\n\t\t\t},\n\t\t\t{},\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Record<string, string[]>} */\n\t\t\tconst longhandDeclarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop.toLowerCase();\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop);\n\n\t\t\t\tconst shorthandProperties = longhandProperties[unprefixedProp];\n\n\t\t\t\tif (!shorthandProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const shorthandProperty of shorthandProperties) {\n\t\t\t\t\tconst prefixedShorthandProperty = prefix + shorthandProperty;\n\t\t\t\t\tlet longhandDeclaration = longhandDeclarations[prefixedShorthandProperty];\n\n\t\t\t\t\tif (!longhandDeclaration) {\n\t\t\t\t\t\tlonghandDeclaration = longhandDeclarations[prefixedShorthandProperty] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tlonghandDeclaration.push(prop);\n\n\t\t\t\t\tconst prefixedShorthandData = (shorthandData[shorthandProperty] || []).map(\n\t\t\t\t\t\t(item) => prefix + item,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!arrayEqual(prefixedShorthandData.sort(), longhandDeclaration.sort())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.expected(prefixedShorthandProperty),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \";\"',\n\trejectedAfter: () => 'Unexpected whitespace after \";\"',\n\texpectedAfterSingleLine: () =>\n\t\t'Expected single space after \";\" in a single-line declaration block',\n\trejectedAfterSingleLine: () =>\n\t\t'Unexpected whitespace after \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextDecl = decl.next();\n\n\t\t\tif (!nextDecl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: rawNodeString(nextDecl),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \";\" in a multi-line declaration block',\n\trejectedAfterMultiLine: () => 'Unexpected newline after \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = decl.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheck.raws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheck.raws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheck.raws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheck.raws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\tnodeToCheck.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst report = require('../utils/report');\n\n/** @typedef {(args: { source: string, index: number, lineCheckStr: string, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((decl: import('postcss').Declaration, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function declarationColonSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the raw prop, and only the prop\n\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\topts.locationChecker({\n\t\t\t\tsource: propPlusColon,\n\t\t\t\tindex: i,\n\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\terr: (message) => {\n\t\t\t\t\tif (opts.fix && opts.fix(decl, i)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.prop.toString().length + 1,\n\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t});\n};\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \":\" with a single-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ': ');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ':');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n\texpectedBeforeSingleLine: () =>\n\t\t'Expected single space before \";\" in a single-line declaration block',\n\trejectedBeforeSingleLine: () =>\n\t\t'Unexpected whitespace before \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.before({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = ' !important ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ' '));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tif (decl.raws.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ''));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst ruleName = 'custom-property-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected custom property name to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\t/**\n\t\t * @param {string} property\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction check(property) {\n\t\t\treturn (\n\t\t\t\t!isStandardSyntaxProperty(property) ||\n\t\t\t\t!isCustomProperty(property) ||\n\t\t\t\tregexpPattern.test(property.slice(2))\n\t\t\t);\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (node.value.toLowerCase() !== 'var') return;\n\n\t\t\t\tconst { nodes } = node;\n\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tif (!firstNode || check(firstNode.value)) return;\n\n\t\t\t\tcomplain(declarationValueIndex(decl) + firstNode.sourceIndex, firstNode.value.length, decl);\n\t\t\t});\n\n\t\t\tif (check(prop)) return;\n\n\t\t\tcomplain(0, prop.length, decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \":\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \":\" with a multi-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the raw prop, and only the prop\n\t\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst indexToCheck = /^[^\\S\\r\\n]*\\/\\*/.test(propPlusColon.slice(i + 1))\n\t\t\t\t\t? propPlusColon.indexOf('*/', i) + 1\n\t\t\t\t\t: i;\n\n\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\tsource: propPlusColon,\n\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\t\tconst betweenStart = declarationValueIndex(decl) - between.length;\n\t\t\t\t\t\t\tconst sliceIndex = indexToCheck - betweenStart + 1;\n\t\t\t\t\t\t\tconst betweenBefore = between.slice(0, sliceIndex);\n\t\t\t\t\t\t\tconst betweenAfter = between.slice(sliceIndex);\n\n\t\t\t\t\t\t\tdecl.raws.between = /^\\s*\\n/.test(betweenAfter)\n\t\t\t\t\t\t\t\t? betweenBefore + betweenAfter.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t\t: betweenBefore + context.newline + betweenAfter;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-trailing-semicolon';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a trailing semicolon',\n\trejected: 'Unexpected trailing semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-trailing-semicolon',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['single-declaration'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!atRule.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (atRule.parent === root) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (atRule !== atRule.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(atRule);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (decl.parent.type === 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl !== decl.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkLastNode(node) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tconst hasSemicolon = node.parent.raws.semicolon;\n\t\t\tconst ignoreSingleDeclaration = optionsMatches(\n\t\t\t\tsecondaryOptions,\n\t\t\t\t'ignore',\n\t\t\t\t'single-declaration',\n\t\t\t);\n\n\t\t\tif (ignoreSingleDeclaration && node.parent.first === node) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet message;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tif (hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = true;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.raws.between = '';\n\t\t\t\t\t\tnode.parent.raws.after = ' ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.expected;\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tif (!hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.rejected;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected primary option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex: node.toString().trim().length - 1,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst vendor = require('../../utils/vendor');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, assertNumber } = require('../../utils/validateTypes');\nconst validateObjectWithProps = require('../../utils/validateObjectWithProps');\n\nconst ruleName = 'declaration-property-max-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, max) =>\n\t\t`Expected \"${property}\" to have no more than ${max} ${max === 1 ? 'value' : 'values'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-max-values',\n};\n\n/**\n * @param {valueParser.Node} node\n */\nconst isValueNode = (node) => {\n\treturn node.type === 'word' || node.type === 'function' || node.type === 'string';\n};\n\n/** @type {import('stylelint').Rule<Record<string, number>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithProps(isNumber)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\t\t\tconst propLength = valueParser(value).nodes.filter(isValueNode).length;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max = primary[propKey];\n\n\t\t\tassertNumber(max);\n\n\t\t\tif (propLength <= max) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, max),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties agree with the provided validator.\n *\n * @example\n * config = {\n *   value1: 1,\n *   value2: 2,\n *   value3: 3,\n * };\n * validateObjectWithProps(isNumber)(config);\n * //=> true\n *\n * @param {(value: unknown) => boolean} validator\n * @returns {(value: unknown) => boolean}\n */\nmodule.exports = (validator) => (value) => {\n\tif (!isPlainObject(value)) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(value).every((item) => {\n\t\treturn validator(item);\n\t});\n};\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-shorthand-property-overrides',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Record<string, string>} */\n\t\t\tconst declarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop).toLowerCase();\n\n\t\t\t\tconst overrideables = shorthandData[unprefixedProp.toLowerCase()];\n\n\t\t\t\tif (!overrideables) {\n\t\t\t\t\tdeclarations[prop.toLowerCase()] = prop;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const longhandProp of overrideables) {\n\t\t\t\t\tif (!Object.prototype.hasOwnProperty.call(declarations, prefix + longhandProp)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.rejected(prop, declarations[prefix + longhandProp] || ''),\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isCustomProperty = require('./isCustomProperty');\nconst isStandardSyntaxDeclaration = require('./isStandardSyntaxDeclaration');\nconst { isDeclaration } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function (node) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(node);\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tisDeclaration(prevNode) &&\n\t\tisStandardSyntaxDeclaration(prevNode) &&\n\t\t!isCustomProperty(prevNode.prop || '')\n\t);\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isAfterStandardPropertyDeclaration = require('../../utils/isAfterStandardPropertyDeclaration');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isRule, isRoot } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before declaration',\n\trejected: 'Unexpected empty line before declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-declaration'],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'after-declaration',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-single-line-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAtRule(parent) && !isRule(parent) && !isRoot(parent)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a declaration precedes it\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'after-declaration') &&\n\t\t\t\tisAfterStandardPropertyDeclaration(decl)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-declaration') &&\n\t\t\t\t\tisAfterStandardPropertyDeclaration(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: decl, result, ruleName });\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Returns a position of `!important` (or `! important` including whitespaces)\n * from the specified CSS source code. If not found, returns `undefined`.\n *\n * @param {string} source\n * @returns {{ index: number, endIndex: number } | undefined}\n */\nmodule.exports = function getImportantPosition(source) {\n\tconst pattern = /!\\s*important\\b/gi;\n\tconst match = pattern.exec(source);\n\n\tif (!match) return;\n\n\treturn { index: match.index, endIndex: pattern.lastIndex };\n};\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.important) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\tassert(pos);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex: pos.index,\n\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-single-line-max-declarations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst block = blockString(ruleNode);\n\n\t\t\tif (!isSingleLineString(block)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = ruleNode.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: block,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether it's a number or a number-like string:\n * i.e. when coerced to a number it == itself.\n *\n * @param {string | number} value\n */\nmodule.exports = function (value) {\n\t/* eslint-disable eqeqeq */\n\treturn value.toString().trim().length !== 0 && Number(value) == value;\n\t/* eslint-enable eqeqeq */\n};\n","'use strict';\n\n/**\n * Check whether a word is a variable i.e var(--custom-property).\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function (word) {\n\treturn word.toLowerCase().startsWith('var(');\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isNumbery = require('../../utils/isNumbery');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'font-weight-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} font-weight notation`,\n\tinvalidNamed: (name) => `Unexpected invalid font-weight name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-weight-notation',\n};\n\nconst INHERIT_KEYWORD = 'inherit';\nconst INITIAL_KEYWORD = 'initial';\nconst NORMAL_KEYWORD = 'normal';\nconst WEIGHTS_WITH_KEYWORD_EQUIVALENTS = new Set(['400', '700']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['numeric', 'named-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['relative'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-weight)?$/i, (decl) => {\n\t\t\tconst prop = decl.prop.toLowerCase();\n\n\t\t\tif (prop === 'font-weight') {\n\t\t\t\tcheckWeight(decl, decl.value);\n\t\t\t} else if (prop === 'font') {\n\t\t\t\tcheckFont(decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFont(decl) {\n\t\t\tconst valueNodes = findFontWeights(decl.value);\n\n\t\t\t// We do not need to more carefully distinguish font-weight\n\t\t\t// numbers from unitless line-heights because line-heights in\n\t\t\t// `font` values need to be part of a font-size/line-height pair\n\t\t\tconst hasNumericFontWeight = valueNodes.some(({ value }) => isNumbery(value));\n\n\t\t\tfor (const valueNode of valueNodes) {\n\t\t\t\tconst value = valueNode.value;\n\t\t\t\tconst lowerValue = value.toLowerCase();\n\n\t\t\t\tif (\n\t\t\t\t\t(lowerValue === NORMAL_KEYWORD && !hasNumericFontWeight) ||\n\t\t\t\t\tisNumbery(value) ||\n\t\t\t\t\t(lowerValue !== NORMAL_KEYWORD && keywordSets.fontWeightKeywords.has(lowerValue))\n\t\t\t\t) {\n\t\t\t\t\tcheckWeight(decl, value, valueNode);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {string} weightValue\n\t\t * @param {import('postcss-value-parser').Node} [weightValueNode]\n\t\t */\n\t\tfunction checkWeight(decl, weightValue, weightValueNode) {\n\t\t\tif (!isStandardSyntaxValue(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (includesOnlyFunction(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lowerWeightValue = weightValue.toLowerCase();\n\n\t\t\tif (lowerWeightValue === INHERIT_KEYWORD || lowerWeightValue === INITIAL_KEYWORD) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'relative') &&\n\t\t\t\tkeywordSets.fontWeightRelativeKeywords.has(lowerWeightValue)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primary === 'numeric') {\n\t\t\t\tconst parent = decl.parent;\n\n\t\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\t\t// @font-face allows multiple values.\n\t\t\t\t\tfor (const valueNode of findFontWeights(weightValue)) {\n\t\t\t\t\t\tif (!isNumbery(valueNode.value)) {\n\t\t\t\t\t\t\treturn complain(messages.expected('numeric'), valueNode.value, valueNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isNumbery(weightValue)) {\n\t\t\t\t\treturn complain(messages.expected('numeric'), weightValue, weightValueNode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (primary === 'named-where-possible') {\n\t\t\t\tif (isNumbery(weightValue)) {\n\t\t\t\t\tif (WEIGHTS_WITH_KEYWORD_EQUIVALENTS.has(weightValue)) {\n\t\t\t\t\t\tcomplain(messages.expected('named'), weightValue, weightValueNode);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!keywordSets.fontWeightKeywords.has(lowerWeightValue) &&\n\t\t\t\t\tlowerWeightValue !== NORMAL_KEYWORD\n\t\t\t\t) {\n\t\t\t\t\treturn complain(messages.invalidNamed(weightValue), weightValue, weightValueNode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {string} value\n\t\t\t * @param {import('postcss-value-parser').Node | undefined} valueNode\n\t\t\t */\n\t\t\tfunction complain(message, value, valueNode) {\n\t\t\t\tconst index = declarationValueIndex(decl) + (valueNode ? valueNode.sourceIndex : 0);\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {import('postcss-value-parser').Node[]}\n */\nfunction findFontWeights(value) {\n\treturn valueParser(value).nodes.filter((node, index, nodes) => {\n\t\tif (node.type !== 'word') return false;\n\n\t\t// Exclude `<font-size>/<line-height>` format like `16px/3`.\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst nextNode = nodes[index + 1];\n\n\t\tif (prevNode && prevNode.type === 'div') return false;\n\n\t\tif (nextNode && nextNode.type === 'div') return false;\n\n\t\treturn true;\n\t});\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction includesOnlyFunction(value) {\n\treturn valueParser(value).nodes.every(({ type }) => {\n\t\treturn type === 'function' || type === 'comment' || type === 'space';\n\t});\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \";\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n\trejectedBeforeMultiLine: () =>\n\t\t'Unexpected whitespace before \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(primary, propKey, value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Check if a word is a font-size value.\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function (word) {\n\tif (!word) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.fontSizeKeywords.has(word)) {\n\t\treturn true;\n\t}\n\n\tconst numberUnit = valueParser.unit(word);\n\n\tif (!numberUnit) {\n\t\treturn false;\n\t}\n\n\tconst unit = numberUnit.unit;\n\n\tif (unit === '%') {\n\t\treturn true;\n\t}\n\n\tif (keywordSets.lengthUnits.has(unit.toLowerCase())) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst postcssValueParser = require('postcss-value-parser');\n\nconst isNumbery = require('./isNumbery');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isValidFontSize = require('./isValidFontSize');\nconst isVariable = require('./isVariable');\nconst { assert } = require('./validateTypes');\nconst keywordSets = require('../reference/keywordSets');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n\tfirstNode.value = firstNode.value + charactersBetween + secondNode.value;\n\n\treturn firstNode;\n}\n\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @returns {Node[]} Collection font-family nodes\n */\nmodule.exports = function findFontFamily(value) {\n\t/** @type {Node[]} */\n\tconst fontFamilies = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes: children } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tchildren.length === 1 &&\n\t\tchildren[0] &&\n\t\tkeywordSets.basicKeywords.has(children[0].value.toLowerCase())\n\t) {\n\t\treturn [children[0]];\n\t}\n\n\tlet needMergeNodesByValue = false;\n\t/** @type {string | null} */\n\tlet mergeCharacters = null;\n\n\tvalueNodes.walk((valueNode, index, nodes) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!nodeTypesToCheck.has(valueNode.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other font parts\n\t\tif (\n\t\t\tkeywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore font-sizes\n\t\tif (isValidFontSize(valueNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst prevPrevNode = nodes[index - 2];\n\n\t\t// Ignore anything come after a <font-size>/, because it's a line-height\n\t\tif (prevNode && prevNode.value === '/' && prevPrevNode && isValidFontSize(prevPrevNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore number values\n\t\tif (isNumbery(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\t\tif (\n\t\t\t(valueNode.type === 'space' || (valueNode.type === 'div' && valueNode.value !== ',')) &&\n\t\t\tfontFamilies.length !== 0\n\t\t) {\n\t\t\tneedMergeNodesByValue = true;\n\t\t\tmergeCharacters = valueNode.value;\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (valueNode.type === 'space' || valueNode.type === 'div') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontFamily = valueNode;\n\n\t\tif (needMergeNodesByValue) {\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\t\t\tjoinValueNodes(lastFontFamily, fontFamily, mergeCharacters);\n\t\t\tneedMergeNodesByValue = false;\n\t\t\tmergeCharacters = null;\n\t\t} else {\n\t\t\tfontFamilies.push(fontFamily);\n\t\t}\n\t});\n\n\treturn fontFamilies;\n};\n","export default {\n  cwd: () => \"/\",\n  env: {\n    NO_COLOR: \"true\",\n    FORCE_COLOR: \"false\"\n  },\n  argv: []\n};\n","let tty = require(\"tty\")\n\nlet isColorSupported =\n\t!(\"NO_COLOR\" in process.env || process.argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in process.env ||\n\t\tprocess.argv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(tty.isatty(1) && process.env.TERM !== \"dumb\") ||\n\t\t\"CI\" in process.env)\n\nlet formatter =\n\t(open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input\n\t\tlet index = string.indexOf(close, open.length)\n\t\treturn ~index\n\t\t\t? open + replaceClose(string, close, replace, index) + close\n\t\t\t: open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet start = string.substring(0, index) + replace\n\tlet end = string.substring(index + close.length)\n\tlet nextIndex = end.indexOf(close)\n\treturn ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end\n}\n\nlet createColors = (enabled = isColorSupported) => ({\n\tisColorSupported: enabled,\n\treset: enabled ? s => `\\x1b[0m${s}\\x1b[0m` : String,\n\tbold: enabled ? formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\") : String,\n\tdim: enabled ? formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\") : String,\n\titalic: enabled ? formatter(\"\\x1b[3m\", \"\\x1b[23m\") : String,\n\tunderline: enabled ? formatter(\"\\x1b[4m\", \"\\x1b[24m\") : String,\n\tinverse: enabled ? formatter(\"\\x1b[7m\", \"\\x1b[27m\") : String,\n\thidden: enabled ? formatter(\"\\x1b[8m\", \"\\x1b[28m\") : String,\n\tstrikethrough: enabled ? formatter(\"\\x1b[9m\", \"\\x1b[29m\") : String,\n\tblack: enabled ? formatter(\"\\x1b[30m\", \"\\x1b[39m\") : String,\n\tred: enabled ? formatter(\"\\x1b[31m\", \"\\x1b[39m\") : String,\n\tgreen: enabled ? formatter(\"\\x1b[32m\", \"\\x1b[39m\") : String,\n\tyellow: enabled ? formatter(\"\\x1b[33m\", \"\\x1b[39m\") : String,\n\tblue: enabled ? formatter(\"\\x1b[34m\", \"\\x1b[39m\") : String,\n\tmagenta: enabled ? formatter(\"\\x1b[35m\", \"\\x1b[39m\") : String,\n\tcyan: enabled ? formatter(\"\\x1b[36m\", \"\\x1b[39m\") : String,\n\twhite: enabled ? formatter(\"\\x1b[37m\", \"\\x1b[39m\") : String,\n\tgray: enabled ? formatter(\"\\x1b[90m\", \"\\x1b[39m\") : String,\n\tbgBlack: enabled ? formatter(\"\\x1b[40m\", \"\\x1b[49m\") : String,\n\tbgRed: enabled ? formatter(\"\\x1b[41m\", \"\\x1b[49m\") : String,\n\tbgGreen: enabled ? formatter(\"\\x1b[42m\", \"\\x1b[49m\") : String,\n\tbgYellow: enabled ? formatter(\"\\x1b[43m\", \"\\x1b[49m\") : String,\n\tbgBlue: enabled ? formatter(\"\\x1b[44m\", \"\\x1b[49m\") : String,\n\tbgMagenta: enabled ? formatter(\"\\x1b[45m\", \"\\x1b[49m\") : String,\n\tbgCyan: enabled ? formatter(\"\\x1b[46m\", \"\\x1b[49m\") : String,\n\tbgWhite: enabled ? formatter(\"\\x1b[47m\", \"\\x1b[49m\") : String,\n})\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n","'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput(dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': pico.cyan,\n  'at-word': pico.cyan,\n  'comment': pico.gray,\n  'string': pico.green,\n  'class': pico.yellow,\n  'hash': pico.magenta,\n  'call': pico.cyan,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n","'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n","'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","const noop = () => noop;\nnoop.default = noop.cosmiconfig = noop.catch = noop;\nexport default noop;\n\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            this.map.setSourceContent(\n              this.toUrl(this.path(from)),\n              node.source.input.css\n            )\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString()\n      } else {\n        throw new Error(\n          '`map.absolute` option is not available in this PostCSS build'\n        )\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n","'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n","'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n","'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n","'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n","'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.16'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n","'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing generic font family',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-no-missing-generic-family-keyword',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst isLastFontFamilyVariable = (value) => {\n\tconst lastValue = postcss.list.comma(value).pop();\n\n\treturn lastValue != null && (isVariable(lastValue) || !isStandardSyntaxValue(lastValue));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilies: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\t// Ignore @font-face\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl.prop === 'font' && keywordSets.systemFontValues.has(decl.value.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isLastFontFamilyVariable(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some((node) => isFamilyNameKeyword(node))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tfontFamilies.some((node) =>\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFontFamilies', node.value),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst index = valueIndex + lastFontFamily.sourceIndex;\n\t\t\tconst endIndex = valueIndex + lastFontFamily.sourceEndIndex;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst hasBlock = require('./hasBlock');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function (atRule) {\n\tif (atRule.type !== 'atrule') {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode === undefined) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(previousNode) && !hasBlock(previousNode) && !hasBlock(atRule);\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('./isBlocklessAtRuleAfterBlocklessAtRule');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function (atRule) {\n\tif (!isBlocklessAtRuleAfterBlocklessAtRule(atRule)) {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode && isAtRule(previousNode)) {\n\t\treturn previousNode.name === atRule.name;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterBlocklessAtRule');\nconst isBlocklessAtRuleAfterSameNameBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before at-rule',\n\trejected: 'Unexpected empty line before at-rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-same-name',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t],\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'always' | 'never'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst isNested = atRule.parent && atRule.parent.type !== 'root';\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\t// and following another blockless at-rule with the same name\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-same-name-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(atRule.raws.before);\n\t\t\tlet expectEmptyLineBefore = expectation === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-same-name') &&\n\t\t\t\t\tisAtRuleAfterSameNameAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-same-name-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix && context.newline) {\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(atRule, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(atRule, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: atRule, result, ruleName });\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').AtRule} atRule\n */\nfunction isAtRuleAfterSameNameAtRule(atRule) {\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\t// @ts-expect-error -- TS2339: Property 'name' does not exist on type 'Node'.\n\treturn previousNode && previousNode.type === 'atrule' && previousNode.name === atRule.name;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blurInterpolation = require('./blurInterpolation');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {import('postcss-value-parser').Node} node\n *\n * @returns {string | null}\n */\nmodule.exports = function (node) {\n\tif (!node || !node.value) {\n\t\treturn null;\n\t}\n\n\t// Ignore non-word nodes\n\tif (node.type !== 'word') {\n\t\treturn null;\n\t}\n\n\t// Ignore non standard syntax\n\tif (!isStandardSyntaxValue(node.value)) {\n\t\treturn null;\n\t}\n\n\t// Ignore HEX\n\tif (node.value.startsWith('#')) {\n\t\treturn null;\n\t}\n\n\t// Remove non standard stuff\n\tconst value = blurInterpolation(node.value, '')\n\t\t// ignore hack unit\n\t\t.replace('\\\\0', '')\n\t\t.replace('\\\\9', '');\n\n\tconst parsedUnit = valueParser.unit(value);\n\n\tif (!parsedUnit) {\n\t\treturn null;\n\t}\n\n\treturn parsedUnit.unit;\n};\n","'use strict';\n\n/**\n * @param {string} source\n *\n * @returns {string}\n */\nmodule.exports = function (source, blurChar = ' ') {\n\treturn source.replace(/[#@{}]+/g, blurChar);\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tif (node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function')) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(node);\n\n\t\t\t\tif (!unit || (unit && propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (family) => `Expected quotes around \"${family}\"`,\n\trejected: (family) => `Unexpected quotes around \"${family}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-name-quotes',\n};\n\n/**\n * @param {string} font\n * @returns {boolean}\n */\nfunction isSystemFontKeyword(font) {\n\tif (font.startsWith('-apple-')) {\n\t\treturn true;\n\t}\n\n\tif (font === 'BlinkMacSystemFont') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * \"To avoid mistakes in escaping, it is recommended to quote font family names\n * that contain white space, digits, or punctuation characters other than hyphens\"\n * (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRecommended(family) {\n\treturn !/^[-a-zA-Z]+$/.test(family);\n}\n\n/**\n * Quotes are required if the family is not a valid CSS identifier\n * (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRequired(family) {\n\treturn family\n\t\t.split(/\\s+/)\n\t\t.some((word) => /^(?:-?\\d|--)/.test(word) || !/^[-\\w\\u{00A0}-\\u{10FFFF}]+$/u.test(word));\n}\n\n/**\n * @typedef {{\n *   name: string,\n *   rawName: string,\n *   hasQuotes: boolean,\n *   sourceIndex: number,\n *   resetIndexes: (offset: number) => void,\n *   removeQuotes: () => void,\n *   addQuotes: () => void,\n * }} MutableNode\n */\n\n/**\n *\n * @param {import('postcss-value-parser').Node[]} fontFamilies\n * @param {import('postcss').Declaration} decl\n * @returns {MutableNode[]}\n */\nconst makeMutableFontFamilies = (fontFamilies, decl) => {\n\t/**\n\t * @type {MutableNode[]}\n\t */\n\tconst mutableNodes = [];\n\n\tfontFamilies.forEach((fontFamily, idx) => {\n\t\tconst quote = 'quote' in fontFamily && fontFamily.quote;\n\t\tconst name = fontFamily.value;\n\n\t\t/** @type {MutableNode} */\n\t\tconst newNode = {\n\t\t\tname,\n\t\t\trawName: quote ? `${quote}${name}${quote}` : name,\n\t\t\tsourceIndex: fontFamily.sourceIndex,\n\t\t\thasQuotes: Boolean(quote),\n\t\t\tresetIndexes(offset) {\n\t\t\t\tmutableNodes.slice(idx + 1).forEach((n) => (n.sourceIndex += offset));\n\t\t\t},\n\t\t\tremoveQuotes() {\n\t\t\t\tif (this.hasQuotes === false) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length + 2;\n\n\t\t\t\tthis.hasQuotes = false;\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + this.name + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(-2);\n\t\t\t},\n\t\t\taddQuotes() {\n\t\t\t\tif (this.hasQuotes === true) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length;\n\n\t\t\t\tthis.hasQuotes = true;\n\t\t\t\tconst fixedName = `\"${this.name}\"`;\n\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + fixedName + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(2);\n\t\t\t},\n\t\t};\n\n\t\tmutableNodes.push(newNode);\n\t});\n\n\treturn mutableNodes;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tlet fontFamilyNodes = makeMutableFontFamilies(findFontFamily(decl.value), decl);\n\n\t\t\tif (fontFamilyNodes.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilyNodes) {\n\t\t\t\tcheckFamilyName(fontFamilyNode, decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {MutableNode} fontFamilyNode\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFamilyName(fontFamilyNode, decl) {\n\t\t\tconst { name: family, rawName: rawFamily, hasQuotes } = fontFamilyNode;\n\n\t\t\tif (!isStandardSyntaxValue(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Disallow quotes around (case-insensitive) keywords\n\t\t\t// and system font keywords in all cases\n\t\t\tif (keywordSets.fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst required = quotesRequired(family);\n\t\t\tconst recommended = quotesRecommended(family);\n\n\t\t\tswitch (primary) {\n\t\t\t\tcase 'always-unless-keyword':\n\t\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-recommended':\n\t\t\t\t\tif (!recommended && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recommended && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-required':\n\t\t\t\t\tif (!required && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (required && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {string} family\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, family, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tword: family,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-duplicate-names';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected duplicate name ${name}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-no-duplicate-names',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilyNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst keywords = new Set();\n\t\t\tconst familyNames = new Set();\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilies) {\n\t\t\t\tconst family = fontFamilyNode.value.trim();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFontFamilyNames', family)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rawFamily =\n\t\t\t\t\t'quote' in fontFamilyNode ? fontFamilyNode.quote + family + fontFamilyNode.quote : family;\n\n\t\t\t\tif (isFamilyNameKeyword(fontFamilyNode)) {\n\t\t\t\t\tif (keywords.has(family.toLowerCase())) {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tkeywords.add(family);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (familyNames.has(family)) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfamilyNames.add(family);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {{\n *   div: import('postcss-value-parser').DivNode,\n *   index: number,\n *   nodes: import('postcss-value-parser').Node[],\n *   expectation: string,\n *   position: 'before' | 'after',\n *   symb: string,\n * }} params\n * @returns {boolean}\n */\nmodule.exports = function functionCommaSpaceFix(params) {\n\tconst { div, index, nodes, expectation, position, symb } = params;\n\n\tif (expectation.startsWith('always')) {\n\t\tdiv[position] = symb;\n\n\t\treturn true;\n\t}\n\n\tif (expectation.startsWith('never')) {\n\t\tdiv[position] = '';\n\n\t\tfor (let i = index + 1; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tif (node === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'comment') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'space') {\n\t\t\t\tnode.value = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst getDeclarationValue = require('../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../utils/isStandardSyntaxFunction');\nconst report = require('../utils/report');\nconst setDeclarationValue = require('../utils/setDeclarationValue');\nconst valueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} ValueParserNode */\n/** @typedef {import('postcss-value-parser').DivNode} ValueParserDivNode */\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((node: ValueParserDivNode, index: number, nodes: ValueParserNode[]) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function functionCommaSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst declValue = getDeclarationValue(decl);\n\n\t\tlet hasFixed;\n\t\tconst parsedValue = valueParser(declValue);\n\n\t\tparsedValue.walk((valueNode) => {\n\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore `url()` arguments, which may contain data URIs or other funky stuff\n\t\t\tif (valueNode.value.toLowerCase() === 'url') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst argumentStrings = valueNode.nodes.map((node) => valueParser.stringify(node));\n\n\t\t\tconst functionArguments = (() => {\n\t\t\t\t// Remove function name and parens\n\t\t\t\tlet result = valueNode.before + argumentStrings.join('') + valueNode.after;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tresult = result.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn result;\n\t\t\t})();\n\n\t\t\t/**\n\t\t\t * Gets the index of the comma for checking.\n\t\t\t * @param {ValueParserDivNode} commaNode The comma node\n\t\t\t * @param {number} nodeIndex The index of the comma node\n\t\t\t * @returns {number} The index of the comma for checking\n\t\t\t */\n\t\t\tconst getCommaCheckIndex = (commaNode, nodeIndex) => {\n\t\t\t\tlet commaBefore =\n\t\t\t\t\tvalueNode.before + argumentStrings.slice(0, nodeIndex).join('') + commaNode.before;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tcommaBefore = commaBefore.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn commaBefore.length;\n\t\t\t};\n\n\t\t\t/** @type {{ commaNode: ValueParserDivNode, checkIndex: number, nodeIndex: number }[]} */\n\t\t\tconst commaDataList = [];\n\n\t\t\tfor (const [nodeIndex, node] of valueNode.nodes.entries()) {\n\t\t\t\tif (node.type !== 'div' || node.value !== ',') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst checkIndex = getCommaCheckIndex(node, nodeIndex);\n\n\t\t\t\tcommaDataList.push({\n\t\t\t\t\tcommaNode: node,\n\t\t\t\t\tcheckIndex,\n\t\t\t\t\tnodeIndex,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const { commaNode, checkIndex, nodeIndex } of commaDataList) {\n\t\t\t\topts.locationChecker({\n\t\t\t\t\tsource: functionArguments,\n\t\t\t\t\tindex: checkIndex,\n\t\t\t\t\terr: (message) => {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + commaNode.sourceIndex + commaNode.before.length;\n\n\t\t\t\t\t\tif (opts.fix && opts.fix(commaNode, nodeIndex, valueNode.nodes)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasFixed) {\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t}\n\t});\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line function',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line function',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fs = require('fs');\nconst valueParser = require('postcss-value-parser');\nconst functionsListPath = require('css-functions-list');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isCustomFunction = require('../../utils/isCustomFunction');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected unknown function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst functionsList = JSON.parse(fs.readFileSync(functionsListPath.toString(), 'utf8'));\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\tconst name = node.value;\n\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomFunction(name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (functionsList.includes(name.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: name,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is custom / user-defined\n * https://github.com/w3c/css-houdini-drafts/issues/1007\n * @param {string} func\n * @returns {boolean}\n */\nmodule.exports = function (func) {\n\treturn func.startsWith('--');\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line function',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-calc-no-unspaced-operator';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\" operator`,\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\" operator`,\n\texpectedOperatorBeforeSign: (operator) => `Expected an operator before sign \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-calc-no-unspaced-operator',\n};\n\nconst OPERATORS = new Set(['+', '-']);\nconst OPERATOR_REGEX = /[+-]/;\nconst ALL_OPERATORS = new Set([...OPERATORS, '*', '/']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction complain(message, node, index, operator) {\n\t\t\tconst endIndex = index + operator.length;\n\n\t\t\treport({ message, node, index, endIndex, result, ruleName });\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} operatorNode\n\t\t\t * @param {import('postcss-value-parser').Node} currentNode\n\t\t\t * @param {boolean} isBeforeOp\n\t\t\t */\n\t\t\tfunction checkAroundOperator(operatorNode, currentNode, isBeforeOp) {\n\t\t\t\tconst operator = operatorNode.value;\n\t\t\t\tconst operatorSourceIndex = operatorNode.sourceIndex;\n\n\t\t\t\tif (currentNode && !isSingleSpace(currentNode)) {\n\t\t\t\t\tif (currentNode.type === 'word') {\n\t\t\t\t\t\tif (isBeforeOp) {\n\t\t\t\t\t\t\tconst lastChar = currentNode.value.slice(-1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${currentNode.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\t\toperatorSourceIndex,\n\t\t\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst firstChar = currentNode.value.slice(0, 1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${firstChar} ${currentNode.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(messages.expectedAfter(operator), decl, operatorSourceIndex, operator);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tisBeforeOp ? messages.expectedBefore(operator) : messages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + operatorSourceIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'space') {\n\t\t\t\t\t\tconst indexOfFirstNewLine = currentNode.value.search(/(\\n|\\r\\n)/);\n\n\t\t\t\t\t\tif (indexOfFirstNewLine === 0) return;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value =\n\t\t\t\t\t\t\t\tindexOfFirstNewLine === -1 ? ' ' : currentNode.value.slice(indexOfFirstNewLine);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'function') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInFirstNode(nodes) {\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tassert(firstNode);\n\n\t\t\t\tif (firstNode.type !== 'word') return false;\n\n\t\t\t\tif (!isStandardSyntaxValue(firstNode.value)) return false;\n\n\t\t\t\tconst operatorIndex = firstNode.value.search(OPERATOR_REGEX);\n\t\t\t\tconst operator = firstNode.value.slice(operatorIndex, operatorIndex + 1);\n\n\t\t\t\tif (operatorIndex <= 0) return false;\n\n\t\t\t\tconst charBefore = firstNode.value.charAt(operatorIndex - 1);\n\t\t\t\tconst charAfter = firstNode.value.charAt(operatorIndex + 1);\n\n\t\t\t\tif (charBefore && charBefore !== ' ' && charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex + 1, ' ');\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charBefore && charBefore !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInLastNode(nodes) {\n\t\t\t\tif (nodes.length === 1) return false;\n\n\t\t\t\tconst lastNode = nodes[nodes.length - 1];\n\n\t\t\t\tassert(lastNode);\n\n\t\t\t\tif (lastNode.type !== 'word') return false;\n\n\t\t\t\tconst operatorIndex = lastNode.value.search(OPERATOR_REGEX);\n\n\t\t\t\tif (operatorIndex === -1) return false;\n\n\t\t\t\tif (lastNode.value.charAt(operatorIndex - 1) === ' ') return false;\n\n\t\t\t\t// E.g. \"10px * -2\" when the last node is \"-2\"\n\t\t\t\tif (\n\t\t\t\t\tisOperator(nodes[nodes.length - 3], ALL_OPERATORS) &&\n\t\t\t\t\tisSingleSpace(nodes[nodes.length - 2])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedsFix = true;\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex + 1, ' ').trim();\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex, ' ').trim();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst operator = lastNode.value.charAt(operatorIndex);\n\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\tdecl,\n\t\t\t\t\tvalueIndex + lastNode.sourceIndex + operatorIndex,\n\t\t\t\t\toperator,\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkWords(nodes) {\n\t\t\t\tif (checkForOperatorInFirstNode(nodes) || checkForOperatorInLastNode(nodes)) return;\n\n\t\t\t\tfor (const [index, node] of nodes.entries()) {\n\t\t\t\t\tconst lastChar = node.value.slice(-1);\n\t\t\t\t\tconst firstChar = node.value.slice(0, 1);\n\n\t\t\t\t\tif (node.type === 'word') {\n\t\t\t\t\t\tif (index === 0 && OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${node.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedBefore(lastChar), decl, node.sourceIndex, lastChar);\n\t\t\t\t\t\t} else if (index === nodes.length && OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${firstChar} ${node.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(firstChar),\n\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\tnode.sourceIndex,\n\t\t\t\t\t\t\t\tfirstChar,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || node.value.toLowerCase() !== 'calc') return;\n\n\t\t\t\tconst { nodes } = node;\n\t\t\t\tlet foundOperatorNode = false;\n\n\t\t\t\tfor (const [nodeIndex, currNode] of nodes.entries()) {\n\t\t\t\t\tif (!isOperator(currNode)) continue;\n\n\t\t\t\t\tfoundOperatorNode = true;\n\n\t\t\t\t\tconst nodeBefore = nodes[nodeIndex - 1];\n\t\t\t\t\tconst nodeAfter = nodes[nodeIndex + 1];\n\n\t\t\t\t\tif (isSingleSpace(nodeBefore) && isSingleSpace(nodeAfter)) continue;\n\n\t\t\t\t\tif (nodeAfter && checkAroundOperator(currNode, nodeAfter, false)) continue;\n\n\t\t\t\t\tnodeBefore && checkAroundOperator(currNode, nodeBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (!foundOperatorNode) {\n\t\t\t\t\tcheckWords(nodes);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} str\n * @param {number} index\n * @param {string} char\n */\nfunction insertCharAtIndex(str, index, char) {\n\treturn str.slice(0, index) + char + str.slice(index, str.length);\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {node is import('postcss-value-parser').SpaceNode & { value: ' ' } }\n */\nfunction isSingleSpace(node) {\n\treturn node != null && node.type === 'space' && node.value === ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @param {Set<string>} [operators]\n * @returns {node is import('postcss-value-parser').WordNode}\n */\nfunction isOperator(node, operators = OPERATORS) {\n\treturn node != null && node.type === 'word' && operators.has(node.value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict'\nmodule.exports = balanced\nfunction balanced (a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str)\n  if (b instanceof RegExp) b = maybeMatch(b, str)\n\n  const r = range(a, b, str)\n\n  return (\n    r && {\n      start: r[0],\n      end: r[1],\n      pre: str.slice(0, r[0]),\n      body: str.slice(r[0] + a.length, r[1]),\n      post: str.slice(r[1] + b.length)\n    }\n  )\n}\n\nfunction maybeMatch (reg, str) {\n  const m = str.match(reg)\n  return m ? m[0] : null\n}\n\nbalanced.range = range\nfunction range (a, b, str) {\n  let begs, beg, left, right, result\n  let ai = str.indexOf(a)\n  let bi = str.indexOf(b, ai + 1)\n  let i = ai\n\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi]\n    }\n    begs = []\n    left = str.length\n\n    while (i >= 0 && !result) {\n      if (i === ai) {\n        begs.push(i)\n        ai = str.indexOf(a, i + 1)\n      } else if (begs.length === 1) {\n        result = [begs.pop(), bi]\n      } else {\n        beg = begs.pop()\n        if (beg < left) {\n          left = beg\n          right = bi\n        }\n\n        bi = str.indexOf(b, i + 1)\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi\n    }\n\n    if (begs.length) {\n      result = [left, right]\n    }\n  }\n\n  return result\n}\n","'use strict';\n\nconst balancedMatch = require('balanced-match');\nconst valueParser = require('postcss-value-parser');\n\nconst { assert, isString, isRegExp } = require('./validateTypes');\n\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string | RegExp} functionName\n * @param {(expression: string, expressionIndex: number) => void} callback\n * @returns {void}\n */\nmodule.exports = function functionArgumentsSearch(source, functionName, callback) {\n\tvalueParser(source).walk((node) => {\n\t\tif (node.type !== 'function') return;\n\n\t\tconst { value } = node;\n\n\t\tif (isString(functionName) && value !== functionName) return;\n\n\t\tif (isRegExp(functionName) && !functionName.test(node.value)) return;\n\n\t\tconst parensMatch = balancedMatch('(', ')', source.slice(node.sourceIndex));\n\n\t\tassert(parensMatch);\n\n\t\tconst expression = parensMatch.body;\n\t\tconst parenLength = 1; // == '('\n\t\tconst expressionIndex = node.sourceIndex + value.length + parenLength;\n\n\t\tcallback(expression, expressionIndex);\n\t});\n};\n","'use strict';\n\nconst { URL } = require('url');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\nmodule.exports = function (urlString) {\n\tlet protocol = null;\n\n\ttry {\n\t\tprotocol = new URL(urlString).protocol;\n\t} catch {\n\t\treturn null;\n\t}\n\n\tif (protocol === null || typeof protocol === 'undefined') {\n\t\treturn null;\n\t}\n\n\tconst scheme = protocol.slice(0, -1); // strip trailing `:`\n\n\t// The URL spec does not require a scheme to be followed by `//`, but checking\n\t// for it allows this rule to differentiate <scheme>:<hostname> urls from\n\t// <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\tconst slashIndex = protocol.length;\n\tconst expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n\tconst isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n\tif (isSchemeLessUrl) {\n\t\treturn null;\n\t}\n\n\treturn scheme;\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\nmodule.exports = function (url) {\n\tif (url.length === 0) {\n\t\treturn true;\n\t}\n\n\t// Sass interpolation works anywhere\n\tif (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n\t\treturn false;\n\t}\n\n\t// Inside `'` and `\"` work only LESS interpolation\n\tif ((url.startsWith(`'`) && url.endsWith(`'`)) || (url.startsWith(`\"`) && url.endsWith(`\"`))) {\n\t\tif (hasLessInterpolation(url)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Less variable works only at the beginning\n\t// Check is less variable, allow use '@url/some/path'\n\t// https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\tif (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n\t\treturn false;\n\t}\n\n\t// In url without quotes scss variable can be everywhere\n\t// But in this case it is allowed to use only specific characters\n\t// Also forbidden \"/\" at the end of url\n\tif (url.includes('$') && /^[$\\s\\w+\\-,./*'\"]+$/.test(url) && !url.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-scheme-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-no-scheme-relative';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected scheme-relative url',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-no-scheme-relative',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst url = args.trim().replace(/^['\"]+|['\"]+$/g, '');\n\n\t\t\t\tif (!isStandardSyntaxUrl(url) || !url.startsWith('//')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n\texpectedOpeningSingleLine: 'Expected single space after \"(\" in a single-line function',\n\trejectedOpeningSingleLine: 'Unexpected whitespace after \"(\" in a single-line function',\n\texpectedClosingSingleLine: 'Expected single space before \")\" in a single-line function',\n\trejectedClosingSingleLine: 'Unexpected whitespace before \")\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore function without parameters\n\t\t\t\tif (!valueNode.nodes.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isSingleLine = isSingleLineString(functionString);\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\n\t\t\t\tif (primary === 'always' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\n\t\t\t\tif (primary === 'always' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-newline-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected newline after \"(\"',\n\texpectedClosing: 'Expected newline before \")\"',\n\texpectedOpeningMultiLine: 'Expected newline after \"(\" in a multi-line function',\n\trejectedOpeningMultiLine: 'Unexpected whitespace after \"(\" in a multi-line function',\n\texpectedClosingMultiLine: 'Expected newline before \")\" in a multi-line function',\n\trejectedClosingMultiLine: 'Unexpected whitespace before \")\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-parentheses-newline-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isMultiLine = !isSingleLineString(functionString);\n\t\t\t\tconst containsNewline = (/** @type {string} */ str) => str.includes('\\n');\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\t\t\t\tconst checkBefore = getCheckBefore(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkBefore !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\t\t\t\tconst checkAfter = getCheckAfter(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkAfter !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-value-parser').FunctionNode} FunctionNode */\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckBefore(valueNode) {\n\tlet before = valueNode.before;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tbefore += node.value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\treturn before;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckAfter(valueNode) {\n\tlet after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tafter = node.value + after;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tafter += valueNode.after;\n\n\treturn after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixBeforeForAlways(valueNode, newline) {\n\tlet target;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\ttarget = node;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tif (target) {\n\t\ttarget.value = newline + target.value;\n\t} else {\n\t\tvalueNode.before = newline + valueNode.before;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixBeforeForNever(valueNode) {\n\tvalueNode.before = '';\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixAfterForAlways(valueNode, newline) {\n\tvalueNode.after = newline + valueNode.after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixAfterForNever(valueNode) {\n\tvalueNode.after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframe-declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tatRuleKeyframes.walkDecls((decl) => {\n\t\t\t\tif (!decl.important) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\t\tassert(pos);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: pos.index,\n\t\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {AtRule} atRule\n * @param {string} params\n * @returns {AtRule} The atRulearation that was passed in.\n */\nmodule.exports = function setAtRuleParams(atRule, params) {\n\tconst raws = atRule.raws;\n\n\tif (raws.params) {\n\t\traws.params.raw = params;\n\t} else {\n\t\tatRule.params = params;\n\t}\n\n\treturn atRule;\n};\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string}\n */\nmodule.exports = function getAtRuleParams(atRule) {\n\tconst raws = atRule.raws;\n\n\treturn (raws.params && raws.params.raw) || atRule.params;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst ruleName = 'import-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/import-notation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['string', 'url'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, checkAtRuleImportParams);\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleImportParams(atRule) {\n\t\t\tconst params = getAtRuleParams(atRule);\n\t\t\tconst parsed = valueParser(params);\n\n\t\t\tfor (const node of parsed.nodes) {\n\t\t\t\tconst start = atRuleParamIndex(atRule);\n\t\t\t\tconst end = start + node.sourceEndIndex;\n\n\t\t\t\tif (primary === 'string') {\n\t\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\tconst urlFunctionFull = valueParser.stringify(node);\n\t\t\t\t\t\tconst urlFunctionArguments = valueParser.stringify(node.nodes);\n\n\t\t\t\t\t\tconst quotedUrlFunctionFirstArgument =\n\t\t\t\t\t\t\tnode.nodes[0] && node.nodes[0].type === 'word'\n\t\t\t\t\t\t\t\t? `\"${urlFunctionArguments}\"`\n\t\t\t\t\t\t\t\t: urlFunctionArguments;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${quotedUrlFunctionFirstArgument}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expected(urlFunctionFull, quotedUrlFunctionFirstArgument),\n\t\t\t\t\t\t\tatRule,\n\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'url') {\n\t\t\t\t\tif (node.type === 'space') return;\n\n\t\t\t\t\tif (node.type === 'word' || node.type === 'string') {\n\t\t\t\t\t\tconst path = valueParser.stringify(node);\n\n\t\t\t\t\t\tconst urlFunctionFull = `url(${path})`;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${urlFunctionFull}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst quotedNodeValue =\n\t\t\t\t\t\t\tnode.type === 'word' ? `\"${node.value}\"` : `${node.quote}${node.value}${node.quote}`;\n\n\t\t\t\t\t\tcomplain(messages.expected(quotedNodeValue, urlFunctionFull), atRule, start, end);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-whitespace-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected whitespace after \")\"',\n\trejected: 'Unexpected whitespace after \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-whitespace-after',\n};\n\nconst ACCEPTABLE_AFTER_CLOSING_PAREN = new Set([')', ',', '}', ':', '/', undefined]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string} value\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction check(node, value, nodeIndex, fix) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: value,\n\t\t\t\t\ttarget: ')',\n\t\t\t\t\tfunctionArguments: 'only',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tcheckClosingParen(value, match.startIndex + 1, node, nodeIndex, fix);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction checkClosingParen(source, index, node, nodeIndex, fix) {\n\t\t\tconst nextChar = source.charAt(index);\n\n\t\t\tif (!nextChar) return;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\t// Allow for the next character to be a single empty space,\n\t\t\t\t// another closing parenthesis, a comma, or the end of the value\n\t\t\t\tif (nextChar === ' ') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (nextChar === '\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (source.slice(index, index + 2) === '\\r\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ACCEPTABLE_AFTER_CLOSING_PAREN.has(nextChar)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t} else if (primary === 'never' && isWhitespace(nextChar)) {\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} value\n\t\t */\n\t\tfunction createFixer(value) {\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\t\t\t/** @type {(index: number) => void} */\n\t\t\tlet applyFix;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\tfixed += value.slice(lastIndex, index) + ' ';\n\t\t\t\t\tlastIndex = index;\n\t\t\t\t};\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\tlet whitespaceEndIndex = index + 1;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\twhitespaceEndIndex < value.length &&\n\t\t\t\t\t\tisWhitespace(value.charAt(whitespaceEndIndex))\n\t\t\t\t\t) {\n\t\t\t\t\t\twhitespaceEndIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tfixed += value.slice(lastIndex, index);\n\t\t\t\t\tlastIndex = whitespaceEndIndex;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tapplyFix,\n\t\t\t\tget hasFixed() {\n\t\t\t\t\treturn Boolean(lastIndex);\n\t\t\t\t},\n\t\t\t\tget fixed() {\n\t\t\t\t\treturn fixed + value.slice(lastIndex);\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst param = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst fixer = context.fix && createFixer(param);\n\n\t\t\tcheck(atRule, param, atRuleParamIndex(atRule), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = fixer.fixed;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = fixer.fixed;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\t\t\tconst fixer = context.fix && createFixer(value);\n\n\t\t\tcheck(decl, value, declarationValueIndex(decl), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, fixer.fixed);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-scheme-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-max-empty-lines',\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction placeIndexOnValueStart(decl) {\n\tif (decl.raws.between == null) throw new Error('`between` must be present');\n\n\treturn decl.prop.length + decl.raws.between.length - 1;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst stringValue = getDeclarationValue(decl);\n\t\t\t/** @type {Array<[string, string]>} */\n\t\t\tconst splittedValue = [];\n\t\t\tlet sourceIndexStart = 0;\n\n\t\t\tvalueParser(stringValue).walk((node) => {\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'function' /* ignore non functions */ ||\n\t\t\t\t\tnode.value.length === 0 /* ignore sass lists */\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stringifiedNode = valueParser.stringify(node);\n\n\t\t\t\tif (\n\t\t\t\t\t!violatedLFNewLinesRegex.test(stringifiedNode) &&\n\t\t\t\t\t!violatedCRLFNewLinesRegex.test(stringifiedNode)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst newNodeString = stringifiedNode\n\t\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\t\tsplittedValue.push([\n\t\t\t\t\t\tstringValue.slice(sourceIndexStart, node.sourceIndex),\n\t\t\t\t\t\tnewNodeString,\n\t\t\t\t\t]);\n\t\t\t\t\tsourceIndexStart = node.sourceIndex + stringifiedNode.length;\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: placeIndexOnValueStart(decl) + node.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (context.fix && splittedValue.length > 0) {\n\t\t\t\tconst updatedValue =\n\t\t\t\t\tsplittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') +\n\t\t\t\t\tstringValue.slice(sourceIndexStart);\n\n\t\t\t\tsetDeclarationValue(decl, updatedValue);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected nonstandard direction',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-linear-gradient-no-nonstandard-direction',\n};\n\n/**\n * @param {string} source\n * @param {boolean} withToPrefix\n */\nfunction isStandardDirection(source, withToPrefix) {\n\tconst regexp = withToPrefix\n\t\t? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/\n\t\t: /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n\n\tconst matches = source.match(regexp);\n\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\tif (matches.length === 2) {\n\t\treturn true;\n\t}\n\n\t// Cannot repeat side-or-corner, e.g. \"to top top\"\n\tif (matches.length === 3 && matches[1] !== matches[2]) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunctionArgumentsSearch(\n\t\t\t\t\tvalueParser.stringify(valueNode).toLowerCase(),\n\t\t\t\t\t/^(-webkit-|-moz-|-o-|-ms-)?linear-gradient$/i,\n\t\t\t\t\t(expression, expressionIndex) => {\n\t\t\t\t\t\tconst args = expression.split(',');\n\t\t\t\t\t\tconst firstArg = (args[0] || '').trim();\n\n\t\t\t\t\t\t// If the first arg is not standard, return early\n\t\t\t\t\t\tif (!isStandardSyntaxValue(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first character is a number, we can assume the user intends an angle\n\t\t\t\t\t\tif (/[\\d.]/.test(firstArg.charAt(0))) {\n\t\t\t\t\t\t\tif (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The first argument may not be a direction: it may be an angle,\n\t\t\t\t\t\t// or a color stop (in which case user gets default direction, \"to bottom\")\n\t\t\t\t\t\t// cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\t\t\t\t\t\tif (!/left|right|top|bottom/.test(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst withToPrefix = !vendor.prefix(valueNode.value);\n\n\t\t\t\t\t\tif (!isStandardDirection(firstArg, withToPrefix)) {\n\t\t\t\t\t\t\tcomplain();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfunction complain() {\n\t\t\t\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex;\n\t\t\t\t\t\t\tconst endIndex = index + (args[0] || '').trimEnd().length;\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframes-name-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (keyframeName, pattern) =>\n\t\t`Expected keyframe name \"${keyframeName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframes-name-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regex = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules(/keyframes/i, (keyframesNode) => {\n\t\t\tconst value = keyframesNode.params;\n\n\t\t\tif (regex.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(keyframesNode);\n\t\t\tconst endIndex = index + value.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\tnode: keyframesNode,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a selector is standard\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(selector)) {\n\t\treturn false;\n\t}\n\n\t// SCSS placeholder selectors\n\tif (selector.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// SCSS nested properties\n\tif (selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\t// Less :extend()\n\tif (/:extend(?:\\(.*?\\))?/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less mixin with resolved nested selectors (e.g. .foo().bar or .foo(@a, @b)[bar])\n\tif (/\\.[\\w-]+\\(.*\\).+/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less non-outputting mixin definition (e.g. .mixin() {})\n\tif (selector.endsWith(')') && !selector.includes(':')) {\n\t\treturn false;\n\t}\n\n\t// Less Parametric mixins (e.g. .mixin(@variable: x) {})\n\tif (/\\(@.*\\)$/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// ERB template tags\n\tif (selector.includes('<%') || selector.includes('%>')) {\n\t\treturn false;\n\t}\n\n\t//  SCSS and Less comments\n\tif (selector.includes('//')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function (rule) {\n\tif (rule.type !== 'rule') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less &:extend rule\n\tif ('extend' in rule && rule.extend) {\n\t\treturn false;\n\t}\n\n\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc;\n\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = getProp;\n\nfunction getProp(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      return undefined;\n    }\n\n    obj = obj[prop];\n  }\n\n  return obj;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = ensureObject;\n\nfunction ensureObject(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      obj[prop] = {};\n    }\n\n    obj = obj[prop];\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = stripComments;\n\nfunction stripComments(str) {\n  var s = \"\";\n  var commentStart = str.indexOf(\"/*\");\n  var lastEnd = 0;\n\n  while (commentStart >= 0) {\n    s = s + str.slice(lastEnd, commentStart);\n    var commentEnd = str.indexOf(\"*/\", commentStart + 2);\n\n    if (commentEnd < 0) {\n      return s;\n    }\n\n    lastEnd = commentEnd + 2;\n    commentStart = str.indexOf(\"/*\", lastEnd);\n  }\n\n  s = s + str.slice(lastEnd);\n  return s;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.stripComments = exports.ensureObject = exports.getProp = exports.unesc = void 0;\n\nvar _unesc = _interopRequireDefault(require(\"./unesc\"));\n\nexports.unesc = _unesc[\"default\"];\n\nvar _getProp = _interopRequireDefault(require(\"./getProp\"));\n\nexports.getProp = _getProp[\"default\"];\n\nvar _ensureObject = _interopRequireDefault(require(\"./ensureObject\"));\n\nexports.ensureObject = _ensureObject[\"default\"];\n\nvar _stripComments = _interopRequireDefault(require(\"./stripComments\"));\n\nexports.stripComments = _stripComments[\"default\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _util = require(\"../util\");\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar cloneNode = function cloneNode(obj, parent) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var value = obj[i];\n    var type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n\n  return cloned;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || '';\n    this.spaces.after = this.spaces.after || '';\n  }\n\n  var _proto = Node.prototype;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  };\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  };\n\n  _proto.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n\n  _proto.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */\n  ;\n\n  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */\n  ;\n\n  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    this.raws[name] = valueEscaped;\n  }\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */\n  ;\n\n  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  }\n  /**\n   *\n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */\n  ;\n\n  _proto.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n\n      if (this.source.end.line < line) {\n        return false;\n      }\n\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return undefined;\n  };\n\n  _proto.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n\n  _proto.valueToString = function valueToString() {\n    return String(this.stringifyProperty(\"value\"));\n  };\n\n  _proto.toString = function toString() {\n    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');\n  };\n\n  _createClass(Node, [{\n    key: \"rawSpaceBefore\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: \"rawSpaceAfter\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports[\"default\"] = Node;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.UNIVERSAL = exports.ATTRIBUTE = exports.CLASS = exports.COMBINATOR = exports.COMMENT = exports.ID = exports.NESTING = exports.PSEUDO = exports.ROOT = exports.SELECTOR = exports.STRING = exports.TAG = void 0;\nvar TAG = 'tag';\nexports.TAG = TAG;\nvar STRING = 'string';\nexports.STRING = STRING;\nvar SELECTOR = 'selector';\nexports.SELECTOR = SELECTOR;\nvar ROOT = 'root';\nexports.ROOT = ROOT;\nvar PSEUDO = 'pseudo';\nexports.PSEUDO = PSEUDO;\nvar NESTING = 'nesting';\nexports.NESTING = NESTING;\nvar ID = 'id';\nexports.ID = ID;\nvar COMMENT = 'comment';\nexports.COMMENT = COMMENT;\nvar COMBINATOR = 'combinator';\nexports.COMBINATOR = COMBINATOR;\nvar CLASS = 'class';\nexports.CLASS = CLASS;\nvar ATTRIBUTE = 'attribute';\nexports.ATTRIBUTE = ATTRIBUTE;\nvar UNIVERSAL = 'universal';\nexports.UNIVERSAL = UNIVERSAL;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar types = _interopRequireWildcard(require(\"./types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n\n  function Container(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n\n    return _this;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.append = function append(selector) {\n    selector.parent = this;\n    this.nodes.push(selector);\n    return this;\n  };\n\n  _proto.prepend = function prepend(selector) {\n    selector.parent = this;\n    this.nodes.unshift(selector);\n    return this;\n  };\n\n  _proto.at = function at(index) {\n    return this.nodes[index];\n  };\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n\n    return this.nodes.indexOf(child);\n  };\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.at(child).parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n      var node = _step.value;\n      node.parent = undefined;\n    }\n\n    this.nodes = [];\n    return this;\n  };\n\n  _proto.empty = function empty() {\n    return this.removeAll();\n  };\n\n  _proto.insertAfter = function insertAfter(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex + 1, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (oldIndex <= index) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.insertBefore = function insertBefore(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index <= oldIndex) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {\n    var found = undefined;\n    this.each(function (node) {\n      if (node.atPosition) {\n        var foundChild = node.atPosition(line, col);\n\n        if (foundChild) {\n          found = foundChild;\n          return false;\n        }\n      } else if (node.isAtPosition(line, col)) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n  /**\n   * Return the most specific node at the line and column number given.\n   * The source location is based on the original parsed location, locations aren't\n   * updated as selector nodes are mutated.\n   * \n   * Note that this location is relative to the location of the first character\n   * of the selector, and not the location of the selector in the overall document\n   * when used in conjunction with postcss.\n   *\n   * If not found, returns undefined.\n   * @param {number} line The line number of the node to find. (1-based index)\n   * @param {number} col  The column number of the node to find. (1-based index)\n   */\n  ;\n\n  _proto.atPosition = function atPosition(line, col) {\n    if (this.isAtPosition(line, col)) {\n      return this._findChildAtPosition(line, col) || this;\n    } else {\n      return undefined;\n    }\n  };\n\n  _proto._inferEndPosition = function _inferEndPosition() {\n    if (this.last && this.last.source && this.last.source.end) {\n      this.source = this.source || {};\n      this.source.end = this.source.end || {};\n      Object.assign(this.source.end, this.last.source.end);\n    }\n  };\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) {\n      this.lastEach = 0;\n    }\n\n    if (!this.indexes) {\n      this.indexes = {};\n    }\n\n    this.lastEach++;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n\n    if (!this.length) {\n      return undefined;\n    }\n\n    var index, result;\n\n    while (this.indexes[id] < this.length) {\n      index = this.indexes[id];\n      result = callback(this.at(index), index);\n\n      if (result === false) {\n        break;\n      }\n\n      this.indexes[id] += 1;\n    }\n\n    delete this.indexes[id];\n\n    if (result === false) {\n      return false;\n    }\n  };\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (node, i) {\n      var result = callback(node, i);\n\n      if (result !== false && node.length) {\n        result = node.walk(callback);\n      }\n\n      if (result === false) {\n        return false;\n      }\n    });\n  };\n\n  _proto.walkAttributes = function walkAttributes(callback) {\n    var _this2 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ATTRIBUTE) {\n        return callback.call(_this2, selector);\n      }\n    });\n  };\n\n  _proto.walkClasses = function walkClasses(callback) {\n    var _this3 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.CLASS) {\n        return callback.call(_this3, selector);\n      }\n    });\n  };\n\n  _proto.walkCombinators = function walkCombinators(callback) {\n    var _this4 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMBINATOR) {\n        return callback.call(_this4, selector);\n      }\n    });\n  };\n\n  _proto.walkComments = function walkComments(callback) {\n    var _this5 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMMENT) {\n        return callback.call(_this5, selector);\n      }\n    });\n  };\n\n  _proto.walkIds = function walkIds(callback) {\n    var _this6 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ID) {\n        return callback.call(_this6, selector);\n      }\n    });\n  };\n\n  _proto.walkNesting = function walkNesting(callback) {\n    var _this7 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.NESTING) {\n        return callback.call(_this7, selector);\n      }\n    });\n  };\n\n  _proto.walkPseudos = function walkPseudos(callback) {\n    var _this8 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.PSEUDO) {\n        return callback.call(_this8, selector);\n      }\n    });\n  };\n\n  _proto.walkTags = function walkTags(callback) {\n    var _this9 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.TAG) {\n        return callback.call(_this9, selector);\n      }\n    });\n  };\n\n  _proto.walkUniversals = function walkUniversals(callback) {\n    var _this10 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.UNIVERSAL) {\n        return callback.call(_this10, selector);\n      }\n    });\n  };\n\n  _proto.split = function split(callback) {\n    var _this11 = this;\n\n    var current = [];\n    return this.reduce(function (memo, node, index) {\n      var split = callback.call(_this11, node);\n      current.push(node);\n\n      if (split) {\n        memo.push(current);\n        current = [];\n      } else if (index === _this11.length - 1) {\n        memo.push(current);\n      }\n\n      return memo;\n    }, []);\n  };\n\n  _proto.map = function map(callback) {\n    return this.nodes.map(callback);\n  };\n\n  _proto.reduce = function reduce(callback, memo) {\n    return this.nodes.reduce(callback, memo);\n  };\n\n  _proto.every = function every(callback) {\n    return this.nodes.every(callback);\n  };\n\n  _proto.some = function some(callback) {\n    return this.nodes.some(callback);\n  };\n\n  _proto.filter = function filter(callback) {\n    return this.nodes.filter(callback);\n  };\n\n  _proto.sort = function sort(callback) {\n    return this.nodes.sort(callback);\n  };\n\n  _proto.toString = function toString() {\n    return this.map(String).join('');\n  };\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      return this.at(0);\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      return this.at(this.length - 1);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.nodes.length;\n    }\n  }]);\n\n  return Container;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Container;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n\n  function Root(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.ROOT;\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.toString = function toString() {\n    var str = this.reduce(function (memo, selector) {\n      memo.push(String(selector));\n      return memo;\n    }, []).join(',');\n    return this.trailingComma ? str + ',' : str;\n  };\n\n  _proto.error = function error(message, options) {\n    if (this._error) {\n      return this._error(message, options);\n    } else {\n      return new Error(message);\n    }\n  };\n\n  _createClass(Root, [{\n    key: \"errorGenerator\",\n    set: function set(handler) {\n      this._error = handler;\n    }\n  }]);\n\n  return Root;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Root;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Selector = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Selector, _Container);\n\n  function Selector(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.SELECTOR;\n    return _this;\n  }\n\n  return Selector;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Selector;\nmodule.exports = exports.default;","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClassName = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ClassName, _Node);\n\n  function ClassName(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.CLASS;\n    _this._constructed = true;\n    return _this;\n  }\n\n  var _proto = ClassName.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '.' + _Node.prototype.valueToString.call(this);\n  };\n\n  _createClass(ClassName, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      if (this._constructed) {\n        var escaped = (0, _cssesc[\"default\"])(v, {\n          isIdentifier: true\n        });\n\n        if (escaped !== v) {\n          (0, _util.ensureObject)(this, \"raws\");\n          this.raws.value = escaped;\n        } else if (this.raws) {\n          delete this.raws.value;\n        }\n      }\n\n      this._value = v;\n    }\n  }]);\n\n  return ClassName;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ClassName;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n\n  function Comment(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMMENT;\n    return _this;\n  }\n\n  return Comment;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Comment;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ID = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ID, _Node);\n\n  function ID(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.ID;\n    return _this;\n  }\n\n  var _proto = ID.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '#' + _Node.prototype.valueToString.call(this);\n  };\n\n  return ID;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ID;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Namespace = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Namespace, _Node);\n\n  function Namespace() {\n    return _Node.apply(this, arguments) || this;\n  }\n\n  var _proto = Namespace.prototype;\n\n  _proto.qualifiedName = function qualifiedName(value) {\n    if (this.namespace) {\n      return this.namespaceString + \"|\" + value;\n    } else {\n      return value;\n    }\n  };\n\n  _proto.valueToString = function valueToString() {\n    return this.qualifiedName(_Node.prototype.valueToString.call(this));\n  };\n\n  _createClass(Namespace, [{\n    key: \"namespace\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      if (namespace === true || namespace === \"*\" || namespace === \"&\") {\n        this._namespace = namespace;\n\n        if (this.raws) {\n          delete this.raws.namespace;\n        }\n\n        return;\n      }\n\n      var escaped = (0, _cssesc[\"default\"])(namespace, {\n        isIdentifier: true\n      });\n      this._namespace = namespace;\n\n      if (escaped !== namespace) {\n        (0, _util.ensureObject)(this, \"raws\");\n        this.raws.namespace = escaped;\n      } else if (this.raws) {\n        delete this.raws.namespace;\n      }\n    }\n  }, {\n    key: \"ns\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      this.namespace = namespace;\n    }\n  }, {\n    key: \"namespaceString\",\n    get: function get() {\n      if (this.namespace) {\n        var ns = this.stringifyProperty(\"namespace\");\n\n        if (ns === true) {\n          return '';\n        } else {\n          return ns;\n        }\n      } else {\n        return '';\n      }\n    }\n  }]);\n\n  return Namespace;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Namespace;\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Tag = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Tag, _Namespace);\n\n  function Tag(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.TAG;\n    return _this;\n  }\n\n  return Tag;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Tag;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar String = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(String, _Node);\n\n  function String(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.STRING;\n    return _this;\n  }\n\n  return String;\n}(_node[\"default\"]);\n\nexports[\"default\"] = String;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Pseudo = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Pseudo, _Container);\n\n  function Pseudo(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.PSEUDO;\n    return _this;\n  }\n\n  var _proto = Pseudo.prototype;\n\n  _proto.toString = function toString() {\n    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n    return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), params, this.rawSpaceAfter].join('');\n  };\n\n  return Pseudo;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Pseudo;\nmodule.exports = exports.default;","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","export const deprecate = fn => fn;\nexport const types = {\n  isNativeError: () => true\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports.unescapeValue = unescapeValue;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _unesc = _interopRequireDefault(require(\"../util/unesc\"));\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nvar _CSSESC_QUOTE_OPTIONS;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar deprecate = require(\"util-deprecate\");\n\nvar WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n\n  unescaped = (0, _unesc[\"default\"])(unescaped);\n\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\n\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n\n  if (opts.value === undefined) {\n    return opts;\n  }\n\n  warnOfDeprecatedConstructor();\n\n  var _unescapeValue = unescapeValue(opts.value),\n      quoteMark = _unescapeValue.quoteMark,\n      unescaped = _unescapeValue.unescaped;\n\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\n\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n\n  function Attribute(opts) {\n    var _this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n\n\n  var _proto = Attribute.prototype;\n\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var quoteMark = this._determineQuoteMark(options);\n\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc[\"default\"])(this._value, cssescopts);\n    return escaped;\n  };\n\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */\n  ;\n\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n\n    this._syncRawValue();\n  }\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */\n  ;\n\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc[\"default\"])(v, {\n        isIdentifier: true\n      });\n\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc[\"default\"])(v, opts);\n\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */\n  ;\n\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n\n    return quoteMark;\n  };\n\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc[\"default\"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc[\"default\"])(value, {\n        isIdentifier: true\n      });\n\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n\n    var attrSpaces = this._spacesFor(spaceName);\n\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */\n  ;\n\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n\n    var attributeSpaces = this._spacesFor(\"attribute\");\n\n    count += attributeSpaces.before.length;\n\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n\n    if (name === \"attributeNS\") {\n      return count;\n    }\n\n    count += this.namespaceString.length;\n\n    if (this.namespace) {\n      count += 1;\n    }\n\n    if (name === \"attribute\") {\n      return count;\n    }\n\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n\n    var operatorSpaces = this._spacesFor(\"operator\");\n\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n\n    count += operator.length;\n    count += operatorSpaces.after.length;\n\n    var valueSpaces = this._spacesFor(\"value\");\n\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n\n    count += value.length;\n    count += valueSpaces.after.length;\n\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n\n    count += insensitiveSpaces.before.length;\n\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n\n    return -1;\n  };\n\n  _proto.toString = function toString() {\n    var _this2 = this;\n\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n    if (this.operator && (this.value || this.value === '')) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */\n    ,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    ,\n    set: function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n            deprecatedUsage = _unescapeValue2.deprecatedUsage,\n            unescaped = _unescapeValue2.unescaped,\n            quoteMark = _unescapeValue2.quoteMark;\n\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n\n      this._attribute = name;\n    }\n  }]);\n\n  return Attribute;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Universal = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Universal, _Namespace);\n\n  function Universal(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.UNIVERSAL;\n    _this.value = '*';\n    return _this;\n  }\n\n  return Universal;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Universal;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Combinator = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Combinator, _Node);\n\n  function Combinator(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMBINATOR;\n    return _this;\n  }\n\n  return Combinator;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Combinator;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Nesting = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Nesting, _Node);\n\n  function Nesting(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.NESTING;\n    _this.value = '&';\n    return _this;\n  }\n\n  return Nesting;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Nesting;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = sortAscending;\n\nfunction sortAscending(list) {\n  return list.sort(function (a, b) {\n    return a - b;\n  });\n}\n\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.combinator = exports.word = exports.comment = exports.str = exports.tab = exports.newline = exports.feed = exports.cr = exports.backslash = exports.bang = exports.slash = exports.doubleQuote = exports.singleQuote = exports.space = exports.greaterThan = exports.pipe = exports.equals = exports.plus = exports.caret = exports.tilde = exports.dollar = exports.closeSquare = exports.openSquare = exports.closeParenthesis = exports.openParenthesis = exports.semicolon = exports.colon = exports.comma = exports.at = exports.asterisk = exports.ampersand = void 0;\nvar ampersand = 38; // `&`.charCodeAt(0);\n\nexports.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\n\nexports.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\n\nexports.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\n\nexports.comma = comma;\nvar colon = 58; // `:`.charCodeAt(0);\n\nexports.colon = colon;\nvar semicolon = 59; // `;`.charCodeAt(0);\n\nexports.semicolon = semicolon;\nvar openParenthesis = 40; // `(`.charCodeAt(0);\n\nexports.openParenthesis = openParenthesis;\nvar closeParenthesis = 41; // `)`.charCodeAt(0);\n\nexports.closeParenthesis = closeParenthesis;\nvar openSquare = 91; // `[`.charCodeAt(0);\n\nexports.openSquare = openSquare;\nvar closeSquare = 93; // `]`.charCodeAt(0);\n\nexports.closeSquare = closeSquare;\nvar dollar = 36; // `$`.charCodeAt(0);\n\nexports.dollar = dollar;\nvar tilde = 126; // `~`.charCodeAt(0);\n\nexports.tilde = tilde;\nvar caret = 94; // `^`.charCodeAt(0);\n\nexports.caret = caret;\nvar plus = 43; // `+`.charCodeAt(0);\n\nexports.plus = plus;\nvar equals = 61; // `=`.charCodeAt(0);\n\nexports.equals = equals;\nvar pipe = 124; // `|`.charCodeAt(0);\n\nexports.pipe = pipe;\nvar greaterThan = 62; // `>`.charCodeAt(0);\n\nexports.greaterThan = greaterThan;\nvar space = 32; // ` `.charCodeAt(0);\n\nexports.space = space;\nvar singleQuote = 39; // `'`.charCodeAt(0);\n\nexports.singleQuote = singleQuote;\nvar doubleQuote = 34; // `\"`.charCodeAt(0);\n\nexports.doubleQuote = doubleQuote;\nvar slash = 47; // `/`.charCodeAt(0);\n\nexports.slash = slash;\nvar bang = 33; // `!`.charCodeAt(0);\n\nexports.bang = bang;\nvar backslash = 92; // '\\\\'.charCodeAt(0);\n\nexports.backslash = backslash;\nvar cr = 13; // '\\r'.charCodeAt(0);\n\nexports.cr = cr;\nvar feed = 12; // '\\f'.charCodeAt(0);\n\nexports.feed = feed;\nvar newline = 10; // '\\n'.charCodeAt(0);\n\nexports.newline = newline;\nvar tab = 9; // '\\t'.charCodeAt(0);\n// Expose aliases primarily for readability.\n\nexports.tab = tab;\nvar str = singleQuote; // No good single character representation!\n\nexports.str = str;\nvar comment = -1;\nexports.comment = comment;\nvar word = -2;\nexports.word = word;\nvar combinator = -3;\nexports.combinator = combinator;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = tokenize;\nexports.FIELDS = void 0;\n\nvar t = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar _unescapable, _wordDelimiters;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);\nvar wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);\nvar hex = {};\nvar hexChars = \"0123456789abcdefABCDEF\";\n\nfor (var i = 0; i < hexChars.length; i++) {\n  hex[hexChars.charCodeAt(i)] = true;\n}\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word's first letter occurs\n */\n\n\nfunction consumeWord(css, start) {\n  var next = start;\n  var code;\n\n  do {\n    code = css.charCodeAt(next);\n\n    if (wordDelimiters[code]) {\n      return next - 1;\n    } else if (code === t.backslash) {\n      next = consumeEscape(css, next) + 1;\n    } else {\n      // All other characters are part of the word\n      next++;\n    }\n  } while (next < css.length);\n\n  return next - 1;\n}\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\n\n\nfunction consumeEscape(css, start) {\n  var next = start;\n  var code = css.charCodeAt(next + 1);\n\n  if (unescapable[code]) {// just consume the escape char\n  } else if (hex[code]) {\n    var hexDigits = 0; // consume up to 6 hex chars\n\n    do {\n      next++;\n      hexDigits++;\n      code = css.charCodeAt(next + 1);\n    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape\n\n\n    if (hexDigits < 6 && code === t.space) {\n      next++;\n    }\n  } else {\n    // the next char is part of the current word\n    next++;\n  }\n\n  return next;\n}\n\nvar FIELDS = {\n  TYPE: 0,\n  START_LINE: 1,\n  START_COL: 2,\n  END_LINE: 3,\n  END_COL: 4,\n  START_POS: 5,\n  END_POS: 6\n};\nexports.FIELDS = FIELDS;\n\nfunction tokenize(input) {\n  var tokens = [];\n  var css = input.css.valueOf();\n  var _css = css,\n      length = _css.length;\n  var offset = -1;\n  var line = 1;\n  var start = 0;\n  var end = 0;\n  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;\n\n  function unclosed(what, fix) {\n    if (input.safe) {\n      // fyi: this is never set to true.\n      css += fix;\n      next = css.length - 1;\n    } else {\n      throw input.error('Unclosed ' + what, line, start - offset, start);\n    }\n  }\n\n  while (start < length) {\n    code = css.charCodeAt(start);\n\n    if (code === t.newline) {\n      offset = start;\n      line += 1;\n    }\n\n    switch (code) {\n      case t.space:\n      case t.tab:\n      case t.newline:\n      case t.cr:\n      case t.feed:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n\n          if (code === t.newline) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n\n        tokenType = t.space;\n        endLine = line;\n        endColumn = next - offset - 1;\n        end = next;\n        break;\n\n      case t.plus:\n      case t.greaterThan:\n      case t.tilde:\n      case t.pipe:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n\n        tokenType = t.combinator;\n        endLine = line;\n        endColumn = start - offset;\n        end = next;\n        break;\n      // Consume these characters as single tokens.\n\n      case t.asterisk:\n      case t.ampersand:\n      case t.bang:\n      case t.comma:\n      case t.equals:\n      case t.dollar:\n      case t.caret:\n      case t.openSquare:\n      case t.closeSquare:\n      case t.colon:\n      case t.semicolon:\n      case t.openParenthesis:\n      case t.closeParenthesis:\n        next = start;\n        tokenType = code;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      case t.singleQuote:\n      case t.doubleQuote:\n        quote = code === t.singleQuote ? \"'\" : '\"';\n        next = start;\n\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n\n          if (next === -1) {\n            unclosed('quote', quote);\n          }\n\n          escapePos = next;\n\n          while (css.charCodeAt(escapePos - 1) === t.backslash) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n\n        tokenType = t.str;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      default:\n        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n          next = css.indexOf('*/', start + 2) + 1;\n\n          if (next === 0) {\n            unclosed('comment', '*/');\n          }\n\n          content = css.slice(start, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n\n          tokenType = t.comment;\n          line = nextLine;\n          endLine = nextLine;\n          endColumn = next - nextOffset;\n        } else if (code === t.slash) {\n          next = start;\n          tokenType = code;\n          endLine = line;\n          endColumn = start - offset;\n          end = next + 1;\n        } else {\n          next = consumeWord(css, start);\n          tokenType = t.word;\n          endLine = line;\n          endColumn = next - offset;\n        }\n\n        end = next + 1;\n        break;\n    } // Ensure that the token structure remains consistent\n\n\n    tokens.push([tokenType, // [0] Token type\n    line, // [1] Starting line\n    start - offset, // [2] Starting column\n    endLine, // [3] Ending line\n    endColumn, // [4] Ending column\n    start, // [5] Start position / Source index\n    end // [6] End position\n    ]); // Reset offset for the next token\n\n    if (nextOffset) {\n      offset = nextOffset;\n      nextOffset = null;\n    }\n\n    start = end;\n  }\n\n  return tokens;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _root = _interopRequireDefault(require(\"./selectors/root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selectors/selector\"));\n\nvar _className = _interopRequireDefault(require(\"./selectors/className\"));\n\nvar _comment = _interopRequireDefault(require(\"./selectors/comment\"));\n\nvar _id = _interopRequireDefault(require(\"./selectors/id\"));\n\nvar _tag = _interopRequireDefault(require(\"./selectors/tag\"));\n\nvar _string = _interopRequireDefault(require(\"./selectors/string\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./selectors/pseudo\"));\n\nvar _attribute = _interopRequireWildcard(require(\"./selectors/attribute\"));\n\nvar _universal = _interopRequireDefault(require(\"./selectors/universal\"));\n\nvar _combinator = _interopRequireDefault(require(\"./selectors/combinator\"));\n\nvar _nesting = _interopRequireDefault(require(\"./selectors/nesting\"));\n\nvar _sortAscending = _interopRequireDefault(require(\"./sortAscending\"));\n\nvar _tokenize = _interopRequireWildcard(require(\"./tokenize\"));\n\nvar tokens = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar types = _interopRequireWildcard(require(\"./selectors/types\"));\n\nvar _util = require(\"./util\");\n\nvar _WHITESPACE_TOKENS, _Object$assign;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);\nvar WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));\n\nfunction tokenStart(token) {\n  return {\n    line: token[_tokenize.FIELDS.START_LINE],\n    column: token[_tokenize.FIELDS.START_COL]\n  };\n}\n\nfunction tokenEnd(token) {\n  return {\n    line: token[_tokenize.FIELDS.END_LINE],\n    column: token[_tokenize.FIELDS.END_COL]\n  };\n}\n\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n}\n\nfunction getTokenSource(token) {\n  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);\n}\n\nfunction getTokenSourceSpan(startToken, endToken) {\n  if (!startToken) {\n    return undefined;\n  }\n\n  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);\n}\n\nfunction unescapeProp(node, prop) {\n  var value = node[prop];\n\n  if (typeof value !== \"string\") {\n    return;\n  }\n\n  if (value.indexOf(\"\\\\\") !== -1) {\n    (0, _util.ensureObject)(node, 'raws');\n    node[prop] = (0, _util.unesc)(value);\n\n    if (node.raws[prop] === undefined) {\n      node.raws[prop] = value;\n    }\n  }\n\n  return node;\n}\n\nfunction indexesOf(array, item) {\n  var i = -1;\n  var indexes = [];\n\n  while ((i = array.indexOf(item, i + 1)) !== -1) {\n    indexes.push(i);\n  }\n\n  return indexes;\n}\n\nfunction uniqs() {\n  var list = Array.prototype.concat.apply([], arguments);\n  return list.filter(function (item, i) {\n    return i === list.indexOf(item);\n  });\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.rule = rule;\n    this.options = Object.assign({\n      lossy: false,\n      safe: false\n    }, options);\n    this.position = 0;\n    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n    this.tokens = (0, _tokenize[\"default\"])({\n      css: this.css,\n      error: this._errorGenerator(),\n      safe: this.options.safe\n    });\n    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n    this.root = new _root[\"default\"]({\n      source: rootSource\n    });\n    this.root.errorGenerator = this._errorGenerator();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: {\n          line: 1,\n          column: 1\n        }\n      }\n    });\n    this.root.append(selector);\n    this.current = selector;\n    this.loop();\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto._errorGenerator = function _errorGenerator() {\n    var _this = this;\n\n    return function (message, errorOptions) {\n      if (typeof _this.rule === 'string') {\n        return new Error(message);\n      }\n\n      return _this.rule.error(message, errorOptions);\n    };\n  };\n\n  _proto.attribute = function attribute() {\n    var attr = [];\n    var startingToken = this.currToken;\n    this.position++;\n\n    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      attr.push(this.currToken);\n      this.position++;\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n\n    var len = attr.length;\n    var node = {\n      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n    };\n\n    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {\n      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);\n    }\n\n    var pos = 0;\n    var spaceBefore = '';\n    var commentBefore = '';\n    var lastAdded = null;\n    var spaceAfterMeaningfulToken = false;\n\n    while (pos < len) {\n      var token = attr[pos];\n      var content = this.content(token);\n      var next = attr[pos + 1];\n\n      switch (token[_tokenize.FIELDS.TYPE]) {\n        case tokens.space:\n          // if (\n          //     len === 1 ||\n          //     pos === 0 && this.content(next) === '|'\n          // ) {\n          //     return this.expected('attribute', token[TOKEN.START_POS], content);\n          // }\n          spaceAfterMeaningfulToken = true;\n\n          if (this.options.lossy) {\n            break;\n          }\n\n          if (lastAdded) {\n            (0, _util.ensureObject)(node, 'spaces', lastAdded);\n            var prevContent = node.spaces[lastAdded].after || '';\n            node.spaces[lastAdded].after = prevContent + content;\n            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;\n\n            if (existingComment) {\n              node.raws.spaces[lastAdded].after = existingComment + content;\n            }\n          } else {\n            spaceBefore = spaceBefore + content;\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        case tokens.asterisk:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = spaceBefore;\n              commentBefore = '';\n            }\n\n            node.namespace = (node.namespace || \"\") + content;\n            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;\n\n            if (rawValue) {\n              node.raws.namespace += content;\n            }\n\n            lastAdded = 'namespace';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.dollar:\n          if (lastAdded === \"value\") {\n            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');\n            node.value += \"$\";\n\n            if (oldRawValue) {\n              node.raws.value = oldRawValue + \"$\";\n            }\n\n            break;\n          }\n\n        // Falls through\n\n        case tokens.caret:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.combinator:\n          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          if (content !== '|') {\n            spaceAfterMeaningfulToken = false;\n            break;\n          }\n\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if (!node.namespace && !node.attribute) {\n            node.namespace = true;\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.word:\n          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.\n          !node.operator && !node.namespace) {\n            node.namespace = content;\n            lastAdded = 'namespace';\n          } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = commentBefore;\n              commentBefore = '';\n            }\n\n            node.attribute = (node.attribute || \"\") + content;\n\n            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;\n\n            if (_rawValue) {\n              node.raws.attribute += content;\n            }\n\n            lastAdded = 'attribute';\n          } else if (!node.value && node.value !== \"\" || lastAdded === \"value\" && !spaceAfterMeaningfulToken) {\n            var _unescaped = (0, _util.unesc)(content);\n\n            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';\n\n            var oldValue = node.value || '';\n            node.value = oldValue + _unescaped;\n            node.quoteMark = null;\n\n            if (_unescaped !== content || _oldRawValue) {\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws.value = (_oldRawValue || oldValue) + content;\n            }\n\n            lastAdded = 'value';\n          } else {\n            var insensitive = content === 'i' || content === \"I\";\n\n            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n              node.insensitive = insensitive;\n\n              if (!insensitive || content === \"I\") {\n                (0, _util.ensureObject)(node, 'raws');\n                node.raws.insensitiveFlag = content;\n              }\n\n              lastAdded = 'insensitive';\n\n              if (spaceBefore) {\n                (0, _util.ensureObject)(node, 'spaces', 'insensitive');\n                node.spaces.insensitive.before = spaceBefore;\n                spaceBefore = '';\n              }\n\n              if (commentBefore) {\n                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');\n                node.raws.spaces.insensitive.before = commentBefore;\n                commentBefore = '';\n              }\n            } else if (node.value || node.value === '') {\n              lastAdded = 'value';\n              node.value += content;\n\n              if (node.raws.value) {\n                node.raws.value += content;\n              }\n            }\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.str:\n          if (!node.attribute || !node.operator) {\n            return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          var _unescapeValue = (0, _attribute.unescapeValue)(content),\n              unescaped = _unescapeValue.unescaped,\n              quoteMark = _unescapeValue.quoteMark;\n\n          node.value = unescaped;\n          node.quoteMark = quoteMark;\n          lastAdded = 'value';\n          (0, _util.ensureObject)(node, 'raws');\n          node.raws.value = content;\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.equals:\n          if (!node.attribute) {\n            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);\n          }\n\n          if (node.value) {\n            return this.error('Unexpected \"=\" found; an operator was already defined.', {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          node.operator = node.operator ? node.operator + content : content;\n          lastAdded = 'operator';\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.comment:\n          if (lastAdded) {\n            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {\n              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';\n              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);\n              node.raws.spaces[lastAdded].after = rawLastComment + content;\n            } else {\n              var lastValue = node[lastAdded] || '';\n              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws[lastAdded] = rawLastValue + content;\n            }\n          } else {\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        default:\n          return this.error(\"Unexpected \\\"\" + content + \"\\\" found.\", {\n            index: token[_tokenize.FIELDS.START_POS]\n          });\n      }\n\n      pos++;\n    }\n\n    unescapeProp(node, \"attribute\");\n    unescapeProp(node, \"namespace\");\n    this.newNode(new _attribute[\"default\"](node));\n    this.position++;\n  }\n  /**\n   * return a node containing meaningless garbage up to (but not including) the specified token position.\n   * if the token position is negative, all remaining tokens are consumed.\n   *\n   * This returns an array containing a single string node if all whitespace,\n   * otherwise an array of comment nodes with space before and after.\n   *\n   * These tokens are not added to the current selector, the caller can add them or use them to amend\n   * a previous node's space metadata.\n   *\n   * In lossy mode, this returns only comments.\n   */\n  ;\n\n  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {\n    if (stopPosition < 0) {\n      stopPosition = this.tokens.length;\n    }\n\n    var startPosition = this.position;\n    var nodes = [];\n    var space = \"\";\n    var lastComment = undefined;\n\n    do {\n      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n        if (!this.options.lossy) {\n          space += this.content();\n        }\n      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {\n        var spaces = {};\n\n        if (space) {\n          spaces.before = space;\n          space = \"\";\n        }\n\n        lastComment = new _comment[\"default\"]({\n          value: this.content(),\n          source: getTokenSource(this.currToken),\n          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n          spaces: spaces\n        });\n        nodes.push(lastComment);\n      }\n    } while (++this.position < stopPosition);\n\n    if (space) {\n      if (lastComment) {\n        lastComment.spaces.after = space;\n      } else if (!this.options.lossy) {\n        var firstToken = this.tokens[startPosition];\n        var lastToken = this.tokens[this.position - 1];\n        nodes.push(new _string[\"default\"]({\n          value: '',\n          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),\n          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n          spaces: {\n            before: space,\n            after: ''\n          }\n        }));\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * \n   * @param {*} nodes \n   */\n  ;\n\n  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {\n    var _this2 = this;\n\n    if (requiredSpace === void 0) {\n      requiredSpace = false;\n    }\n\n    var space = \"\";\n    var rawSpace = \"\";\n    nodes.forEach(function (n) {\n      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);\n\n      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);\n\n      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n    });\n\n    if (rawSpace === space) {\n      rawSpace = undefined;\n    }\n\n    var result = {\n      space: space,\n      rawSpace: rawSpace\n    };\n    return result;\n  };\n\n  _proto.isNamedCombinator = function isNamedCombinator(position) {\n    if (position === void 0) {\n      position = this.position;\n    }\n\n    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;\n  };\n\n  _proto.namedCombinator = function namedCombinator() {\n    if (this.isNamedCombinator()) {\n      var nameRaw = this.content(this.tokens[this.position + 1]);\n      var name = (0, _util.unesc)(nameRaw).toLowerCase();\n      var raws = {};\n\n      if (name !== nameRaw) {\n        raws.value = \"/\" + nameRaw + \"/\";\n      }\n\n      var node = new _combinator[\"default\"]({\n        value: \"/\" + name + \"/\",\n        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n        raws: raws\n      });\n      this.position = this.position + 3;\n      return node;\n    } else {\n      this.unexpected();\n    }\n  };\n\n  _proto.combinator = function combinator() {\n    var _this3 = this;\n\n    if (this.content() === '|') {\n      return this.namespace();\n    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n\n\n    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n\n    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {\n      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n\n      if (nodes.length > 0) {\n        var last = this.current.last;\n\n        if (last) {\n          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),\n              space = _this$convertWhitespa.space,\n              rawSpace = _this$convertWhitespa.rawSpace;\n\n          if (rawSpace !== undefined) {\n            last.rawSpaceAfter += rawSpace;\n          }\n\n          last.spaces.after += space;\n        } else {\n          nodes.forEach(function (n) {\n            return _this3.newNode(n);\n          });\n        }\n      }\n\n      return;\n    }\n\n    var firstToken = this.currToken;\n    var spaceOrDescendantSelectorNodes = undefined;\n\n    if (nextSigTokenPos > this.position) {\n      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n    }\n\n    var node;\n\n    if (this.isNamedCombinator()) {\n      node = this.namedCombinator();\n    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n      node = new _combinator[\"default\"]({\n        value: this.content(),\n        source: getTokenSource(this.currToken),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n      });\n      this.position++;\n    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {// pass\n    } else if (!spaceOrDescendantSelectorNodes) {\n      this.unexpected();\n    }\n\n    if (node) {\n      if (spaceOrDescendantSelectorNodes) {\n        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),\n            _space = _this$convertWhitespa2.space,\n            _rawSpace = _this$convertWhitespa2.rawSpace;\n\n        node.spaces.before = _space;\n        node.rawSpaceBefore = _rawSpace;\n      }\n    } else {\n      // descendant combinator\n      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),\n          _space2 = _this$convertWhitespa3.space,\n          _rawSpace2 = _this$convertWhitespa3.rawSpace;\n\n      if (!_rawSpace2) {\n        _rawSpace2 = _space2;\n      }\n\n      var spaces = {};\n      var raws = {\n        spaces: {}\n      };\n\n      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {\n        spaces.before = _space2.slice(0, _space2.length - 1);\n        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);\n      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {\n        spaces.after = _space2.slice(1);\n        raws.spaces.after = _rawSpace2.slice(1);\n      } else {\n        raws.value = _rawSpace2;\n      }\n\n      node = new _combinator[\"default\"]({\n        value: ' ',\n        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n        spaces: spaces,\n        raws: raws\n      });\n    }\n\n    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {\n      node.spaces.after = this.optionalSpace(this.content());\n      this.position++;\n    }\n\n    return this.newNode(node);\n  };\n\n  _proto.comma = function comma() {\n    if (this.position === this.tokens.length - 1) {\n      this.root.trailingComma = true;\n      this.position++;\n      return;\n    }\n\n    this.current._inferEndPosition();\n\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: tokenStart(this.tokens[this.position + 1])\n      }\n    });\n    this.current.parent.append(selector);\n    this.current = selector;\n    this.position++;\n  };\n\n  _proto.comment = function comment() {\n    var current = this.currToken;\n    this.newNode(new _comment[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.error = function error(message, opts) {\n    throw this.root.error(message, opts);\n  };\n\n  _proto.missingBackslash = function missingBackslash() {\n    return this.error('Expected a backslash preceding the semicolon.', {\n      index: this.currToken[_tokenize.FIELDS.START_POS]\n    });\n  };\n\n  _proto.missingParenthesis = function missingParenthesis() {\n    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.missingSquareBracket = function missingSquareBracket() {\n    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.unexpected = function unexpected() {\n    return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.namespace = function namespace() {\n    var before = this.prevToken && this.content(this.prevToken) || true;\n\n    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.position++;\n      return this.word(before);\n    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {\n      this.position++;\n      return this.universal(before);\n    }\n  };\n\n  _proto.nesting = function nesting() {\n    if (this.nextToken) {\n      var nextContent = this.content(this.nextToken);\n\n      if (nextContent === \"|\") {\n        this.position++;\n        return;\n      }\n    }\n\n    var current = this.currToken;\n    this.newNode(new _nesting[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.parentheses = function parentheses() {\n    var last = this.current.last;\n    var unbalanced = 1;\n    this.position++;\n\n    if (last && last.type === types.PSEUDO) {\n      var selector = new _selector[\"default\"]({\n        source: {\n          start: tokenStart(this.tokens[this.position - 1])\n        }\n      });\n      var cache = this.current;\n      last.append(selector);\n      this.current = selector;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        if (unbalanced) {\n          this.parse();\n        } else {\n          this.current.source.end = tokenEnd(this.currToken);\n          this.current.parent.source.end = tokenEnd(this.currToken);\n          this.position++;\n        }\n      }\n\n      this.current = cache;\n    } else {\n      // I think this case should be an error. It's used to implement a basic parse of media queries\n      // but I don't think it's a good idea.\n      var parenStart = this.currToken;\n      var parenValue = \"(\";\n      var parenEnd;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        parenEnd = this.currToken;\n        parenValue += this.parseParenthesisToken(this.currToken);\n        this.position++;\n      }\n\n      if (last) {\n        last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n      } else {\n        this.newNode(new _string[\"default\"]({\n          value: parenValue,\n          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),\n          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]\n        }));\n      }\n    }\n\n    if (unbalanced) {\n      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.pseudo = function pseudo() {\n    var _this4 = this;\n\n    var pseudoStr = '';\n    var startingToken = this.currToken;\n\n    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {\n      pseudoStr += this.content();\n      this.position++;\n    }\n\n    if (!this.currToken) {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.splitWord(false, function (first, length) {\n        pseudoStr += first;\n\n        _this4.newNode(new _pseudo[\"default\"]({\n          value: pseudoStr,\n          source: getTokenSourceSpan(startingToken, _this4.currToken),\n          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n        }));\n\n        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          _this4.error('Misplaced parenthesis.', {\n            index: _this4.nextToken[_tokenize.FIELDS.START_POS]\n          });\n        }\n      });\n    } else {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.space = function space() {\n    var content = this.content(); // Handle space before and after the selector\n\n    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {\n      return node.type === 'comment';\n    })) {\n      this.spaces = this.optionalSpace(content);\n      this.position++;\n    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      this.current.last.spaces.after = this.optionalSpace(content);\n      this.position++;\n    } else {\n      this.combinator();\n    }\n  };\n\n  _proto.string = function string() {\n    var current = this.currToken;\n    this.newNode(new _string[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.universal = function universal(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    var current = this.currToken;\n    this.newNode(new _universal[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }), namespace);\n    this.position++;\n  };\n\n  _proto.splitWord = function splitWord(namespace, firstCallback) {\n    var _this5 = this;\n\n    var nextToken = this.nextToken;\n    var word = this.content();\n\n    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {\n      this.position++;\n      var current = this.content();\n      word += current;\n\n      if (current.lastIndexOf('\\\\') === current.length - 1) {\n        var next = this.nextToken;\n\n        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {\n          word += this.requiredSpace(this.content(next));\n          this.position++;\n        }\n      }\n\n      nextToken = this.nextToken;\n    }\n\n    var hasClass = indexesOf(word, '.').filter(function (i) {\n      // Allow escaped dot within class name\n      var escapedDot = word[i - 1] === '\\\\'; // Allow decimal numbers percent in @keyframes\n\n      var isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n      return !escapedDot && !isKeyframesPercent;\n    });\n    var hasId = indexesOf(word, '#').filter(function (i) {\n      return word[i - 1] !== '\\\\';\n    }); // Eliminate Sass interpolations from the list of id indexes\n\n    var interpolations = indexesOf(word, '#{');\n\n    if (interpolations.length) {\n      hasId = hasId.filter(function (hashIndex) {\n        return !~interpolations.indexOf(hashIndex);\n      });\n    }\n\n    var indices = (0, _sortAscending[\"default\"])(uniqs([0].concat(hasClass, hasId)));\n    indices.forEach(function (ind, i) {\n      var index = indices[i + 1] || word.length;\n      var value = word.slice(ind, index);\n\n      if (i === 0 && firstCallback) {\n        return firstCallback.call(_this5, value, indices.length);\n      }\n\n      var node;\n      var current = _this5.currToken;\n      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];\n      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n\n      if (~hasClass.indexOf(ind)) {\n        var classNameOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n      } else if (~hasId.indexOf(ind)) {\n        var idOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n      } else {\n        var tagOpts = {\n          value: value,\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        unescapeProp(tagOpts, \"value\");\n        node = new _tag[\"default\"](tagOpts);\n      }\n\n      _this5.newNode(node, namespace); // Ensure that the namespace is used only once\n\n\n      namespace = null;\n    });\n    this.position++;\n  };\n\n  _proto.word = function word(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    return this.splitWord(namespace);\n  };\n\n  _proto.loop = function loop() {\n    while (this.position < this.tokens.length) {\n      this.parse(true);\n    }\n\n    this.current._inferEndPosition();\n\n    return this.root;\n  };\n\n  _proto.parse = function parse(throwOnParenthesis) {\n    switch (this.currToken[_tokenize.FIELDS.TYPE]) {\n      case tokens.space:\n        this.space();\n        break;\n\n      case tokens.comment:\n        this.comment();\n        break;\n\n      case tokens.openParenthesis:\n        this.parentheses();\n        break;\n\n      case tokens.closeParenthesis:\n        if (throwOnParenthesis) {\n          this.missingParenthesis();\n        }\n\n        break;\n\n      case tokens.openSquare:\n        this.attribute();\n        break;\n\n      case tokens.dollar:\n      case tokens.caret:\n      case tokens.equals:\n      case tokens.word:\n        this.word();\n        break;\n\n      case tokens.colon:\n        this.pseudo();\n        break;\n\n      case tokens.comma:\n        this.comma();\n        break;\n\n      case tokens.asterisk:\n        this.universal();\n        break;\n\n      case tokens.ampersand:\n        this.nesting();\n        break;\n\n      case tokens.slash:\n      case tokens.combinator:\n        this.combinator();\n        break;\n\n      case tokens.str:\n        this.string();\n        break;\n      // These cases throw; no break needed.\n\n      case tokens.closeSquare:\n        this.missingSquareBracket();\n\n      case tokens.semicolon:\n        this.missingBackslash();\n\n      default:\n        this.unexpected();\n    }\n  }\n  /**\n   * Helpers\n   */\n  ;\n\n  _proto.expected = function expected(description, index, found) {\n    if (Array.isArray(description)) {\n      var last = description.pop();\n      description = description.join(', ') + \" or \" + last;\n    }\n\n    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n\n    if (!found) {\n      return this.error(\"Expected \" + an + \" \" + description + \".\", {\n        index: index\n      });\n    }\n\n    return this.error(\"Expected \" + an + \" \" + description + \", found \\\"\" + found + \"\\\" instead.\", {\n      index: index\n    });\n  };\n\n  _proto.requiredSpace = function requiredSpace(space) {\n    return this.options.lossy ? ' ' : space;\n  };\n\n  _proto.optionalSpace = function optionalSpace(space) {\n    return this.options.lossy ? '' : space;\n  };\n\n  _proto.lossySpace = function lossySpace(space, required) {\n    if (this.options.lossy) {\n      return required ? ' ' : '';\n    } else {\n      return space;\n    }\n  };\n\n  _proto.parseParenthesisToken = function parseParenthesisToken(token) {\n    var content = this.content(token);\n\n    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {\n      return this.requiredSpace(content);\n    } else {\n      return content;\n    }\n  };\n\n  _proto.newNode = function newNode(node, namespace) {\n    if (namespace) {\n      if (/^ +$/.test(namespace)) {\n        if (!this.options.lossy) {\n          this.spaces = (this.spaces || '') + namespace;\n        }\n\n        namespace = true;\n      }\n\n      node.namespace = namespace;\n      unescapeProp(node, \"namespace\");\n    }\n\n    if (this.spaces) {\n      node.spaces.before = this.spaces;\n      this.spaces = '';\n    }\n\n    return this.current.append(node);\n  };\n\n  _proto.content = function content(token) {\n    if (token === void 0) {\n      token = this.currToken;\n    }\n\n    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);\n  };\n\n  /**\n   * returns the index of the next non-whitespace, non-comment token.\n   * returns -1 if no meaningful token is found.\n   */\n  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = this.position + 1;\n    }\n\n    var searchPosition = startPosition;\n\n    while (searchPosition < this.tokens.length) {\n      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {\n        searchPosition++;\n        continue;\n      } else {\n        return searchPosition;\n      }\n    }\n\n    return -1;\n  };\n\n  _createClass(Parser, [{\n    key: \"currToken\",\n    get: function get() {\n      return this.tokens[this.position];\n    }\n  }, {\n    key: \"nextToken\",\n    get: function get() {\n      return this.tokens[this.position + 1];\n    }\n  }, {\n    key: \"prevToken\",\n    get: function get() {\n      return this.tokens[this.position - 1];\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports[\"default\"] = Parser;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;\n\nvar _attribute = _interopRequireDefault(require(\"./attribute\"));\n\nvar _className = _interopRequireDefault(require(\"./className\"));\n\nvar _combinator = _interopRequireDefault(require(\"./combinator\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _id = _interopRequireDefault(require(\"./id\"));\n\nvar _nesting = _interopRequireDefault(require(\"./nesting\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./pseudo\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selector\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _tag = _interopRequireDefault(require(\"./tag\"));\n\nvar _universal = _interopRequireDefault(require(\"./universal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar attribute = function attribute(opts) {\n  return new _attribute[\"default\"](opts);\n};\n\nexports.attribute = attribute;\n\nvar className = function className(opts) {\n  return new _className[\"default\"](opts);\n};\n\nexports.className = className;\n\nvar combinator = function combinator(opts) {\n  return new _combinator[\"default\"](opts);\n};\n\nexports.combinator = combinator;\n\nvar comment = function comment(opts) {\n  return new _comment[\"default\"](opts);\n};\n\nexports.comment = comment;\n\nvar id = function id(opts) {\n  return new _id[\"default\"](opts);\n};\n\nexports.id = id;\n\nvar nesting = function nesting(opts) {\n  return new _nesting[\"default\"](opts);\n};\n\nexports.nesting = nesting;\n\nvar pseudo = function pseudo(opts) {\n  return new _pseudo[\"default\"](opts);\n};\n\nexports.pseudo = pseudo;\n\nvar root = function root(opts) {\n  return new _root[\"default\"](opts);\n};\n\nexports.root = root;\n\nvar selector = function selector(opts) {\n  return new _selector[\"default\"](opts);\n};\n\nexports.selector = selector;\n\nvar string = function string(opts) {\n  return new _string[\"default\"](opts);\n};\n\nexports.string = string;\n\nvar tag = function tag(opts) {\n  return new _tag[\"default\"](opts);\n};\n\nexports.tag = tag;\n\nvar universal = function universal(opts) {\n  return new _universal[\"default\"](opts);\n};\n\nexports.universal = universal;","\"use strict\";\n\nexports.__esModule = true;\nexports.isNode = isNode;\nexports.isPseudoElement = isPseudoElement;\nexports.isPseudoClass = isPseudoClass;\nexports.isContainer = isContainer;\nexports.isNamespace = isNamespace;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;\n\nvar _types = require(\"./types\");\n\nvar _IS_TYPE;\n\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\n\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\n\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n}\n\nvar isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nexports.isAttribute = isAttribute;\nvar isClassName = isNodeType.bind(null, _types.CLASS);\nexports.isClassName = isClassName;\nvar isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nexports.isCombinator = isCombinator;\nvar isComment = isNodeType.bind(null, _types.COMMENT);\nexports.isComment = isComment;\nvar isIdentifier = isNodeType.bind(null, _types.ID);\nexports.isIdentifier = isIdentifier;\nvar isNesting = isNodeType.bind(null, _types.NESTING);\nexports.isNesting = isNesting;\nvar isPseudo = isNodeType.bind(null, _types.PSEUDO);\nexports.isPseudo = isPseudo;\nvar isRoot = isNodeType.bind(null, _types.ROOT);\nexports.isRoot = isRoot;\nvar isSelector = isNodeType.bind(null, _types.SELECTOR);\nexports.isSelector = isSelector;\nvar isString = isNodeType.bind(null, _types.STRING);\nexports.isString = isString;\nvar isTag = isNodeType.bind(null, _types.TAG);\nexports.isTag = isTag;\nvar isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\nexports.isUniversal = isUniversal;\n\nfunction isPseudoElement(node) {\n  return isPseudo(node) && node.value && (node.value.startsWith(\"::\") || node.value.toLowerCase() === \":before\" || node.value.toLowerCase() === \":after\" || node.value.toLowerCase() === \":first-letter\" || node.value.toLowerCase() === \":first-line\");\n}\n\nfunction isPseudoClass(node) {\n  return isPseudo(node) && !isPseudoElement(node);\n}\n\nfunction isContainer(node) {\n  return !!(isNode(node) && node.walk);\n}\n\nfunction isNamespace(node) {\n  return isAttribute(node) || isTag(node);\n}","\"use strict\";\n\nexports.__esModule = true;\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\n\nvar _constructors = require(\"./constructors\");\n\nObject.keys(_constructors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _constructors[key]) return;\n  exports[key] = _constructors[key];\n});\n\nvar _guards = require(\"./guards\");\n\nObject.keys(_guards).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _guards[key]) return;\n  exports[key] = _guards[key];\n});","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar selectors = _interopRequireWildcard(require(\"./selectors\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parser = function parser(processor) {\n  return new _processor[\"default\"](processor);\n};\n\nObject.assign(parser, selectors);\ndelete parser.__esModule;\nvar _default = parser;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parser = require('postcss-selector-parser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-nesting-depth';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (depth) => `Expected nesting depth to be no more than ${depth}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-nesting-depth',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\t/**\n\t * @param {import('postcss').Node} node\n\t */\n\tconst isIgnoreAtRule = (node) =>\n\t\tisAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['blockless-at-rules', 'pseudo-classes'],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules(checkStatement);\n\t\troot.walkAtRules(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction checkStatement(statement) {\n\t\t\tif (isIgnoreAtRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isRule(statement) && !isStandardSyntaxRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst depth = nestingDepth(statement, 0);\n\n\t\t\tif (depth > primary) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {import('postcss').Node} node\n\t * @param {number} level\n\t * @returns {number}\n\t */\n\tfunction nestingDepth(node, level) {\n\t\tconst parent = node.parent;\n\n\t\tif (parent == null) {\n\t\t\tthrow new Error('The parent node must exist');\n\t\t}\n\n\t\tif (isIgnoreAtRule(parent)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// The nesting depth level's computation has finished\n\t\t// when this function, recursively called, receives\n\t\t// a node that is not nested -- a direct child of the\n\t\t// root node\n\t\tif (isRoot(parent) || (isAtRule(parent) && parent.parent && isRoot(parent.parent))) {\n\t\t\treturn level;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t */\n\t\tfunction containsPseudoClassesOnly(selector) {\n\t\t\tconst normalized = parser().processSync(selector, { lossless: false });\n\t\t\tconst selectors = normalized.split(',');\n\n\t\t\treturn selectors.every((sel) => extractPseudoRule(sel));\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} selectors\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction containsIgnoredPseudoClassesOnly(selectors) {\n\t\t\tif (!(secondaryOptions && secondaryOptions.ignorePseudoClasses)) return false;\n\n\t\t\treturn selectors.every((selector) => {\n\t\t\t\tconst pseudoRule = extractPseudoRule(selector);\n\n\t\t\t\tif (!pseudoRule) return false;\n\n\t\t\t\treturn optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoRule);\n\t\t\t});\n\t\t}\n\n\t\tif (\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'blockless-at-rules') &&\n\t\t\t\tisAtRule(node) &&\n\t\t\t\tnode.every((child) => !isDeclaration(child))) ||\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'pseudo-classes') &&\n\t\t\t\tisRule(node) &&\n\t\t\t\tcontainsPseudoClassesOnly(node.selector)) ||\n\t\t\t(isRule(node) && containsIgnoredPseudoClassesOnly(node.selectors))\n\t\t) {\n\t\t\treturn nestingDepth(parent, level);\n\t\t}\n\n\t\t// Unless any of the conditions above apply, we want to\n\t\t// add 1 to the nesting depth level and then check the parent,\n\t\t// continuing to add and move up the hierarchy\n\t\t// until we hit the root node\n\t\treturn nestingDepth(parent, level + 1);\n\t}\n};\n\n/**\n * @param {string} selector\n * @returns {string | undefined}\n */\nfunction extractPseudoRule(selector) {\n\treturn selector.startsWith('&:') && selector[2] !== ':' ? selector.slice(2) : undefined;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tlet emptyLines = 0;\n\tlet lastIndex = -1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst getChars = replaceEmptyLines.bind(null, primary);\n\n\t\t/**\n\t\t * 1. walk nodes & replace enterchar\n\t\t * 2. deal with special case.\n\t\t */\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif (node.type === 'comment' && !ignoreComments) {\n\t\t\t\t\tnode.raws.left = getChars(node.raws.left);\n\t\t\t\t\tnode.raws.right = getChars(node.raws.right);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = getChars(node.raws.before);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// first node\n\t\t\tconst firstNodeRawsBefore = root.first && root.first.raws.before;\n\t\t\t// root raws\n\t\t\tconst rootRawsAfter = root.raws.after;\n\n\t\t\t// not document node\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tif ((root.document && root.document.constructor.name) !== 'Document') {\n\t\t\t\tif (firstNodeRawsBefore) {\n\t\t\t\t\troot.first.raws.before = getChars(firstNodeRawsBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (rootRawsAfter) {\n\t\t\t\t\t// when max setted 0, should be treated as 1 in this situation.\n\t\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter, true);\n\t\t\t\t}\n\t\t\t} else if (rootRawsAfter) {\n\t\t\t\t// `css in js` or `html`\n\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\temptyLines = 0;\n\t\tlastIndex = -1;\n\t\tconst rootString = root.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: rootString,\n\t\t\t\ttarget: /\\r\\n/.test(rootString) ? '\\r\\n' : '\\n',\n\t\t\t\tcomments: ignoreComments ? 'skip' : 'check',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckMatch(rootString, match.startIndex, match.endIndex, root);\n\t\t\t},\n\t\t);\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} matchStartIndex\n\t\t * @param {number} matchEndIndex\n\t\t * @param {import('postcss').Root} node\n\t\t */\n\t\tfunction checkMatch(source, matchStartIndex, matchEndIndex, node) {\n\t\t\tconst eof = matchEndIndex === source.length;\n\t\t\tlet problem = false;\n\n\t\t\t// Additional check for beginning of file\n\t\t\tif (!matchStartIndex || lastIndex === matchStartIndex) {\n\t\t\t\temptyLines++;\n\t\t\t} else {\n\t\t\t\temptyLines = 0;\n\t\t\t}\n\n\t\t\tlastIndex = matchEndIndex;\n\n\t\t\tif (emptyLines > primary) problem = true;\n\n\t\t\tif (!eof && !problem) return;\n\n\t\t\tif (problem) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: matchStartIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Additional check for end of file\n\t\t\tif (eof && primary) {\n\t\t\t\temptyLines++;\n\n\t\t\t\tif (emptyLines > primary && isEofNode(result.root, node)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: matchEndIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} maxLines\n\t\t * @param {unknown} str\n\t\t * @param {boolean?} isSpecialCase\n\t\t */\n\t\tfunction replaceEmptyLines(maxLines, str, isSpecialCase = false) {\n\t\t\tconst repeatTimes = isSpecialCase ? maxLines : maxLines + 1;\n\n\t\t\tif (repeatTimes === 0 || typeof str !== 'string') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst emptyLFLines = '\\n'.repeat(repeatTimes);\n\t\t\tconst emptyCRLFLines = '\\r\\n'.repeat(repeatTimes);\n\n\t\t\treturn /(?:\\r\\n)+/.test(str)\n\t\t\t\t? str.replace(/(\\r\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length / 2 > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyCRLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  })\n\t\t\t\t: str.replace(/(\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  });\n\t\t}\n\t};\n};\n\n/**\n * Checks whether the given node is the last node of file.\n * @param {import('stylelint').PostcssResult['root']} document - the document node with `postcss-html` and `postcss-jsx`.\n * @param {import('postcss').Root} root - the root node of css\n */\nfunction isEofNode(document, root) {\n\tif (!document || document.constructor.name !== 'Document' || !('type' in document)) {\n\t\treturn true;\n\t}\n\n\t// In the `postcss-html` and `postcss-jsx` syntax, checks that there is text after the given node.\n\tlet after;\n\n\tif (root === document.last) {\n\t\tafter = document.raws && document.raws.codeAfter;\n\t} else {\n\t\t// @ts-expect-error -- TS2345: Argument of type 'Root' is not assignable to parameter of type 'number | ChildNode'.\n\t\tconst rootIndex = document.index(root);\n\n\t\tconst nextNode = document.nodes[rootIndex + 1];\n\n\t\tafter = nextNode && nextNode.raws && nextNode.raws.codeBefore;\n\t}\n\n\treturn !String(after).trim();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\nconst isRegexp = require('is-regexp');\n\nconst flagMap = {\n\tglobal: 'g',\n\tignoreCase: 'i',\n\tmultiline: 'm',\n\tdotAll: 's',\n\tsticky: 'y',\n\tunicode: 'u'\n};\n\nmodule.exports = (regexp, options = {}) => {\n\tif (!isRegexp(regexp)) {\n\t\tthrow new TypeError('Expected a RegExp instance');\n\t}\n\n\tconst flags = Object.keys(flagMap).map(flag => (\n\t\t(typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : ''\n\t)).join('');\n\n\tconst clonedRegexp = new RegExp(options.source || regexp.source, flags);\n\n\tclonedRegexp.lastIndex = typeof options.lastIndex === 'number' ?\n\t\toptions.lastIndex :\n\t\tregexp.lastIndex;\n\n\treturn clonedRegexp;\n};\n","'use strict';\n\nmodule.exports = input => Object.prototype.toString.call(input) === '[object RegExp]';\n","'use strict';\nconst cloneRegexp = require('clone-regexp');\n\nmodule.exports = (regexp, string) => {\n\tlet match;\n\tconst matches = [];\n\tconst clonedRegexp = cloneRegexp(regexp, {lastIndex: 0});\n\tconst isGlobal = clonedRegexp.global;\n\n\t// eslint-disable-next-line no-cond-assign\n\twhile (match = clonedRegexp.exec(string)) {\n\t\tmatches.push({\n\t\t\tmatch: match[0],\n\t\t\tsubMatches: match.slice(1),\n\t\t\tindex: match.index\n\t\t});\n\n\t\tif (!isGlobal) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn matches;\n};\n","'use strict';\n\nconst execall = require('execall');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-line-length';\nconst EXCLUDED_PATTERNS = [\n\t/url\\(\\s*(\\S.*\\S)\\s*\\)/gi, // allow tab, whitespace in url content\n\t/@import\\s+(['\"].*['\"])/gi,\n];\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) =>\n\t\t`Expected line length to be no more than ${max} ${max === 1 ? 'character' : 'characters'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-line-length',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['non-comments', 'comments'],\n\t\t\t\t\tignorePattern: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source');\n\t\t}\n\n\t\tconst ignoreNonComments = optionsMatches(secondaryOptions, 'ignore', 'non-comments');\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\t\t// Array of skipped sub strings, i.e `url(...)`, `@import \"...\"`\n\t\t/** @type {Array<[number, number]>} */\n\t\tlet skippedSubStrings = [];\n\t\tlet skippedSubStringsIndex = 0;\n\n\t\tfor (const pattern of EXCLUDED_PATTERNS)\n\t\t\tfor (const match of execall(pattern, rootString)) {\n\t\t\t\tconst subMatch = match.subMatches[0] || '';\n\t\t\t\tconst startOfSubString = match.index + match.match.indexOf(subMatch);\n\n\t\t\t\tskippedSubStrings.push([startOfSubString, startOfSubString + subMatch.length]);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\tskippedSubStrings = skippedSubStrings.sort((a, b) => a[0] - b[0]);\n\n\t\t// Check first line\n\t\tcheckNewline({ endIndex: 0 });\n\t\t// Check subsequent lines\n\t\tstyleSearch({ source: rootString, target: ['\\n'], comments: 'check' }, (match) =>\n\t\t\tcheckNewline(match),\n\t\t);\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: root,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {number} start\n\t\t * @param {number} end\n\t\t */\n\t\tfunction tryToPopSubString(start, end) {\n\t\t\tconst skippedSubString = skippedSubStrings[skippedSubStringsIndex];\n\n\t\t\tassert(skippedSubString);\n\t\t\tconst [startSubString, endSubString] = skippedSubString;\n\n\t\t\t// Excluded substring does not presented in current line\n\t\t\tif (end < startSubString) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// Compute excluded substring size regarding to current line indexes\n\t\t\tconst excluded = Math.min(end, endSubString) - Math.max(start, startSubString);\n\n\t\t\t// Current substring is out of range for next lines\n\t\t\tif (endSubString <= end) {\n\t\t\t\tskippedSubStringsIndex++;\n\t\t\t}\n\n\t\t\treturn excluded;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch | { endIndex: number }} match\n\t\t */\n\t\tfunction checkNewline(match) {\n\t\t\tlet nextNewlineIndex = rootString.indexOf('\\n', match.endIndex);\n\n\t\t\tif (rootString[nextNewlineIndex - 1] === '\\r') {\n\t\t\t\tnextNewlineIndex -= 1;\n\t\t\t}\n\n\t\t\t// Accommodate last line\n\t\t\tif (nextNewlineIndex === -1) {\n\t\t\t\tnextNewlineIndex = rootString.length;\n\t\t\t}\n\n\t\t\tconst rawLineLength = nextNewlineIndex - match.endIndex;\n\t\t\tconst excludedLength = skippedSubStrings[skippedSubStringsIndex]\n\t\t\t\t? tryToPopSubString(match.endIndex, nextNewlineIndex)\n\t\t\t\t: 0;\n\t\t\tconst lineText = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\t// Case sensitive ignorePattern match\n\t\t\tif (optionsMatches(secondaryOptions, 'ignorePattern', lineText)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the line's length is less than or equal to the specified\n\t\t\t// max, ignore it ... So anything below is liable to be complained about.\n\t\t\t// **Note that the length of any url arguments or import urls\n\t\t\t// are excluded from the calculation.**\n\t\t\tif (rawLineLength - excludedLength <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = nextNewlineIndex - 1;\n\n\t\t\tif (ignoreComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars === '/*' || nextTwoChars === '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignoreNonComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn complain(complaintIndex);\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars !== '/*' && nextTwoChars !== '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn complain(complaintIndex);\n\t\t\t}\n\n\t\t\t// If there are no spaces besides initial (indent) spaces, ignore it\n\t\t\tconst lineString = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\tif (!lineString.replace(/^\\s+/, '').includes(' ')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn complain(complaintIndex);\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframe-block-no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected duplicate \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframe-block-no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectors = new Set();\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\tconst ruleSelectors = keyframeRule.selectors;\n\n\t\t\t\truleSelectors.forEach((selector) => {\n\t\t\t\t\tif (!isStandardSyntaxSelector(selector)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tconst isDuplicate = selectors.has(normalizedSelector);\n\n\t\t\t\t\tif (isDuplicate) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectors.add(normalizedSelector);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'linebreaks';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (linebreak) => `Expected linebreak to be ${linebreak}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/linebreaks',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['unix', 'windows'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldHaveCR = primary === 'windows';\n\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif ('selector' in node) {\n\t\t\t\t\tnode.selector = fixData(node.selector);\n\t\t\t\t}\n\n\t\t\t\tif ('value' in node) {\n\t\t\t\t\tnode.value = fixData(node.value);\n\t\t\t\t}\n\n\t\t\t\tif ('text' in node) {\n\t\t\t\t\tnode.text = fixData(node.text);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = fixData(node.raws.before);\n\t\t\t\t}\n\n\t\t\t\tif (typeof node.raws.after === 'string') {\n\t\t\t\t\tnode.raws.after = fixData(node.raws.after);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (typeof root.raws.after === 'string') {\n\t\t\t\troot.raws.after = fixData(root.raws.after);\n\t\t\t}\n\t\t} else {\n\t\t\tif (root.source == null) throw new Error('The root node must have a source');\n\n\t\t\tconst lines = root.source.input.css.split('\\n');\n\n\t\t\tfor (let [i, line] of lines.entries()) {\n\t\t\t\tif (i < lines.length - 1 && !line.includes('\\r')) {\n\t\t\t\t\tline += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (hasError(line)) {\n\t\t\t\t\tconst lineNum = i + 1;\n\t\t\t\t\tconst colNum = line.length;\n\n\t\t\t\t\treportNewlineError(lineNum, colNum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} dataToCheck\n\t\t */\n\t\tfunction hasError(dataToCheck) {\n\t\t\tconst hasNewlineToVerify = /[\\r\\n]/.test(dataToCheck);\n\t\t\tconst hasCR = hasNewlineToVerify ? /\\r/.test(dataToCheck) : false;\n\n\t\t\treturn hasNewlineToVerify && hasCR !== shouldHaveCR;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} data\n\t\t */\n\t\tfunction fixData(data) {\n\t\t\tif (data) {\n\t\t\t\tlet res = data.replace(/\\r/g, '');\n\n\t\t\t\tif (shouldHaveCR) {\n\t\t\t\t\tres = res.replace(/\\n/g, '\\r\\n');\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\n\t\t * @param {number} line\n\t\t * @param {number} column\n\t\t */\n\t\tfunction reportNewlineError(line, column) {\n\t\t\t// Creating a node manually helps us to point to empty lines.\n\t\t\tconst node = postcss.rule({\n\t\t\t\tsource: {\n\t\t\t\t\tstart: { line, column, offset: 0 },\n\t\t\t\t\tinput: new postcss.Input(''),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nmodule.exports = ['calc', 'clamp', 'max', 'min'];\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isMathFunction = require('../../utils/isMathFunction');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'length-zero-no-unit';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected unit',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/length-zero-no-unit',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-properties'],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tlet needsFix;\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode) {\n\t\t\tconst { value, sourceIndex } = valueNode;\n\n\t\t\tif (isMathFunction(valueNode)) return false;\n\n\t\t\tif (isFunction(valueNode) && optionsMatches(secondaryOptions, 'ignoreFunctions', value))\n\t\t\t\treturn false;\n\n\t\t\tif (!isWord(valueNode)) return;\n\n\t\t\tconst numberUnit = valueParser.unit(value);\n\n\t\t\tif (numberUnit === false) return;\n\n\t\t\tconst { number, unit } = numberUnit;\n\n\t\t\tif (unit === '') return;\n\n\t\t\tif (!isLength(unit)) return;\n\n\t\t\tif (isFraction(unit)) return;\n\n\t\t\tif (!isZero(number)) return;\n\n\t\t\tif (context.fix) {\n\t\t\t\tlet regularNumber = number;\n\n\t\t\t\tif (regularNumber.startsWith('.')) {\n\t\t\t\t\tregularNumber = number.slice(1);\n\t\t\t\t}\n\n\t\t\t\tvalueNode.value = regularNumber;\n\t\t\t\tneedsFix = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = nodeIndex + sourceIndex + number.length;\n\t\t\tconst endIndex = index + unit.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} node\n\t\t */\n\t\tfunction checkAtRule(node) {\n\t\t\tif (!isStandardSyntaxAtRule(node)) return;\n\n\t\t\tneedsFix = false;\n\n\t\t\tconst index = atRuleParamIndex(node);\n\t\t\tconst parsedValue = valueParser(getAtRuleParams(node));\n\n\t\t\tparsedValue.walk((valueNode) => check(node, index, valueNode));\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetAtRuleParams(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} node\n\t\t */\n\t\tfunction checkDecl(node) {\n\t\t\tneedsFix = false;\n\n\t\t\tconst { prop } = node;\n\n\t\t\tif (isLineHeight(prop)) return;\n\n\t\t\tif (isFlex(prop)) return;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'custom-properties') && isCustomProperty(prop))\n\t\t\t\treturn;\n\n\t\t\tconst index = declarationValueIndex(node);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(node));\n\n\t\t\tparsedValue.walk((valueNode, valueNodeIndex, valueNodes) => {\n\t\t\t\tif (isLineHeightValue(node, valueNodes, valueNodeIndex)) return;\n\n\t\t\t\treturn check(node, index, valueNode);\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules(checkAtRule);\n\t\troot.walkDecls(checkDecl);\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {import('postcss-value-parser').Node[]} nodes\n * @param {number} index\n */\nfunction isLineHeightValue({ prop }, nodes, index) {\n\tconst lastNode = nodes[index - 1];\n\n\treturn (\n\t\tprop.toLowerCase() === 'font' && lastNode && lastNode.type === 'div' && lastNode.value === '/'\n\t);\n}\n\n/**\n * @param {string} prop\n */\nfunction isLineHeight(prop) {\n\treturn prop.toLowerCase() === 'line-height';\n}\n\n/**\n * @param {string} prop\n */\nfunction isFlex(prop) {\n\treturn prop.toLowerCase() === 'flex';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isWord({ type }) {\n\treturn type === 'word';\n}\n\n/**\n * @param {string} unit\n */\nfunction isLength(unit) {\n\treturn keywordSets.lengthUnits.has(unit.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isFunction({ type }) {\n\treturn type === 'function';\n}\n\n/**\n * @param {string} unit\n */\nfunction isFraction(unit) {\n\treturn unit.toLowerCase() === 'fr';\n}\n\n/**\n * @param {string} number\n */\nfunction isZero(number) {\n\treturn Number.parseFloat(number) === 0;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst MATH_FUNCTIONS = require('../reference/mathFunctions');\n\n/**\n * Check whether a node is math function\n *\n * @param {import('postcss-value-parser').Node} node postcss-value-parser node\n * @return {boolean} If `true`, the node is math function\n */\nmodule.exports = function isMathFunction(node) {\n\treturn node.type === 'function' && MATH_FUNCTIONS.includes(node.value.toLowerCase());\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (functionName) => `Expected quotes around \"${functionName}\" function argument`,\n\trejected: (functionName) => `Unexpected quotes around \"${functionName}\" function argument`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-quotes',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['empty'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(checkAtRuleParams);\n\t\troot.walkDecls(checkDeclParams);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkDeclParams(decl) {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, decl, index, 'url');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleParams(atRule) {\n\t\t\tconst atRuleParamsLowerCase = atRule.params.toLowerCase();\n\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} args\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} functionName\n\t\t */\n\t\tfunction checkArgs(args, node, index, functionName) {\n\t\t\tlet shouldHasQuotes = primary === 'always';\n\n\t\t\tconst leftTrimmedArgs = args.trimStart();\n\n\t\t\tif (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = index + args.length - leftTrimmedArgs.length;\n\t\t\tconst complaintEndIndex = index + args.length;\n\t\t\tconst hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n\n\t\t\tconst trimmedArg = args.trim();\n\t\t\tconst isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n\t\t\tif (optionsMatches(secondaryOptions, 'except', 'empty') && isEmptyArgument) {\n\t\t\t\tshouldHasQuotes = !shouldHasQuotes;\n\t\t\t}\n\n\t\t\tif (shouldHasQuotes) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.expected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t} else {\n\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.rejected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   fix: ((node: import('postcss').AtRule, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function mediaFeatureColonSpaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ':' }, (match) => {\n\t\t\tcheckColon(params, match.startIndex, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst colonIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, colonIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: colonIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-colon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index + 1);\n\t\t\t\t\tconst afterColon = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * A very generic node. Pretty much any element of a media query\r\n */\n\nfunction Node(opts) {\n  this.after = opts.after;\n  this.before = opts.before;\n  this.type = opts.type;\n  this.value = opts.value;\n  this.sourceIndex = opts.sourceIndex;\n}\n\nexports.default = Node;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Node = require('./Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Container(opts) {\n  var _this = this;\n\n  this.constructor(opts);\n\n  this.nodes = opts.nodes;\n\n  if (this.after === undefined) {\n    this.after = this.nodes.length > 0 ? this.nodes[this.nodes.length - 1].after : '';\n  }\n\n  if (this.before === undefined) {\n    this.before = this.nodes.length > 0 ? this.nodes[0].before : '';\n  }\n\n  if (this.sourceIndex === undefined) {\n    this.sourceIndex = this.before.length;\n  }\n\n  this.nodes.forEach(function (node) {\n    node.parent = _this; // eslint-disable-line no-param-reassign\n  });\n} /**\r\n   * A node that contains other nodes and support traversing over them\r\n   */\n\nContainer.prototype = Object.create(_Node2.default.prototype);\nContainer.constructor = _Node2.default;\n\n/**\r\n * Iterate over descendant nodes of the node\r\n *\r\n * @param {RegExp|string} filter - Optional. Only nodes with node.type that\r\n *    satisfies the filter will be traversed over\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.walk = function walk(filter, cb) {\n  var hasFilter = typeof filter === 'string' || filter instanceof RegExp;\n  var callback = hasFilter ? cb : filter;\n  var filterReg = typeof filter === 'string' ? new RegExp(filter) : filter;\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    var filtered = hasFilter ? filterReg.test(node.type) : true;\n    if (filtered && callback && callback(node, i, this.nodes) === false) {\n      return false;\n    }\n    if (node.nodes && node.walk(filter, cb) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Iterate over immediate children of the node\r\n *\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.each = function each() {\n  var cb = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    if (cb(node, i, this.nodes) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.default = Container;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMediaFeature = parseMediaFeature;\nexports.parseMediaQuery = parseMediaQuery;\nexports.parseMediaList = parseMediaList;\n\nvar _Node = require('./nodes/Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media feature expression, e.g. `max-width: 10px`, `(color)`\r\n *\r\n * @param {string} string - the source expression string, can be inside parens\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes, the first element being a media feature,\r\n *    the secont - its value (may be missing)\r\n */\n\nfunction parseMediaFeature(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var modesEntered = [{\n    mode: 'normal',\n    character: null\n  }];\n  var result = [];\n  var lastModeIndex = 0;\n  var mediaFeature = '';\n  var colon = null;\n  var mediaFeatureValue = null;\n  var indexLocal = index;\n\n  var stringNormalized = string;\n  // Strip trailing parens (if any), and correct the starting index\n  if (string[0] === '(' && string[string.length - 1] === ')') {\n    stringNormalized = string.substring(1, string.length - 1);\n    indexLocal++;\n  }\n\n  for (var i = 0; i < stringNormalized.length; i++) {\n    var character = stringNormalized[i];\n\n    // If entering/exiting a string\n    if (character === '\\'' || character === '\"') {\n      if (modesEntered[lastModeIndex].isCalculationEnabled === true) {\n        modesEntered.push({\n          mode: 'string',\n          isCalculationEnabled: false,\n          character: character\n        });\n        lastModeIndex++;\n      } else if (modesEntered[lastModeIndex].mode === 'string' && modesEntered[lastModeIndex].character === character && stringNormalized[i - 1] !== '\\\\') {\n        modesEntered.pop();\n        lastModeIndex--;\n      }\n    }\n\n    // If entering/exiting interpolation\n    if (character === '{') {\n      modesEntered.push({\n        mode: 'interpolation',\n        isCalculationEnabled: true\n      });\n      lastModeIndex++;\n    } else if (character === '}') {\n      modesEntered.pop();\n      lastModeIndex--;\n    }\n\n    // If a : is met outside of a string, function call or interpolation, than\n    // this : separates a media feature and a value\n    if (modesEntered[lastModeIndex].mode === 'normal' && character === ':') {\n      var mediaFeatureValueStr = stringNormalized.substring(i + 1);\n      mediaFeatureValue = {\n        type: 'value',\n        before: /^(\\s*)/.exec(mediaFeatureValueStr)[1],\n        after: /(\\s*)$/.exec(mediaFeatureValueStr)[1],\n        value: mediaFeatureValueStr.trim()\n      };\n      // +1 for the colon\n      mediaFeatureValue.sourceIndex = mediaFeatureValue.before.length + i + 1 + indexLocal;\n      colon = {\n        type: 'colon',\n        sourceIndex: i + indexLocal,\n        after: mediaFeatureValue.before,\n        value: ':' };\n      break;\n    }\n\n    mediaFeature += character;\n  }\n\n  // Forming a media feature node\n  mediaFeature = {\n    type: 'media-feature',\n    before: /^(\\s*)/.exec(mediaFeature)[1],\n    after: /(\\s*)$/.exec(mediaFeature)[1],\n    value: mediaFeature.trim()\n  };\n  mediaFeature.sourceIndex = mediaFeature.before.length + indexLocal;\n  result.push(mediaFeature);\n\n  if (colon !== null) {\n    colon.before = mediaFeature.after;\n    result.push(colon);\n  }\n\n  if (mediaFeatureValue !== null) {\n    result.push(mediaFeatureValue);\n  }\n\n  return result;\n}\n\n/**\r\n * Parses a media query, e.g. `screen and (color)`, `only tv`\r\n *\r\n * @param {string} string - the source media query string\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes and Containers\r\n */\n\nfunction parseMediaQuery(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var result = [];\n\n  // How many timies the parser entered parens/curly braces\n  var localLevel = 0;\n  // Has any keyword, media type, media feature expression or interpolation\n  // ('element' hereafter) started\n  var insideSomeValue = false;\n  var node = void 0;\n\n  function resetNode() {\n    return {\n      before: '',\n      after: '',\n      value: ''\n    };\n  }\n\n  node = resetNode();\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    // If not yet entered any element\n    if (!insideSomeValue) {\n      if (character.search(/\\s/) !== -1) {\n        // A whitespace\n        // Don't form 'after' yet; will do it later\n        node.before += character;\n      } else {\n        // Not a whitespace - entering an element\n        // Expression start\n        if (character === '(') {\n          node.type = 'media-feature-expression';\n          localLevel++;\n        }\n        node.value = character;\n        node.sourceIndex = index + i;\n        insideSomeValue = true;\n      }\n    } else {\n      // Already in the middle of some alement\n      node.value += character;\n\n      // Here parens just increase localLevel and don't trigger a start of\n      // a media feature expression (since they can't be nested)\n      // Interpolation start\n      if (character === '{' || character === '(') {\n        localLevel++;\n      }\n      // Interpolation/function call/media feature expression end\n      if (character === ')' || character === '}') {\n        localLevel--;\n      }\n    }\n\n    // If exited all parens/curlies and the next symbol\n    if (insideSomeValue && localLevel === 0 && (character === ')' || i === string.length - 1 || string[i + 1].search(/\\s/) !== -1)) {\n      if (['not', 'only', 'and'].indexOf(node.value) !== -1) {\n        node.type = 'keyword';\n      }\n      // if it's an expression, parse its contents\n      if (node.type === 'media-feature-expression') {\n        node.nodes = parseMediaFeature(node.value, node.sourceIndex);\n      }\n      result.push(Array.isArray(node.nodes) ? new _Container2.default(node) : new _Node2.default(node));\n      node = resetNode();\n      insideSomeValue = false;\n    }\n  }\n\n  // Now process the result array - to specify undefined types of the nodes\n  // and specify the `after` prop\n  for (var _i = 0; _i < result.length; _i++) {\n    node = result[_i];\n    if (_i > 0) {\n      result[_i - 1].after = node.before;\n    }\n\n    // Node types. Might not be set because contains interpolation/function\n    // calls or fully consists of them\n    if (node.type === undefined) {\n      if (_i > 0) {\n        // only `and` can follow an expression\n        if (result[_i - 1].type === 'media-feature-expression') {\n          node.type = 'keyword';\n          continue;\n        }\n        // Anything after 'only|not' is a media type\n        if (result[_i - 1].value === 'not' || result[_i - 1].value === 'only') {\n          node.type = 'media-type';\n          continue;\n        }\n        // Anything after 'and' is an expression\n        if (result[_i - 1].value === 'and') {\n          node.type = 'media-feature-expression';\n          continue;\n        }\n\n        if (result[_i - 1].type === 'media-type') {\n          // if it is the last element - it might be an expression\n          // or 'and' depending on what is after it\n          if (!result[_i + 1]) {\n            node.type = 'media-feature-expression';\n          } else {\n            node.type = result[_i + 1].type === 'media-feature-expression' ? 'keyword' : 'media-feature-expression';\n          }\n        }\n      }\n\n      if (_i === 0) {\n        // `screen`, `fn( ... )`, `#{ ... }`. Not an expression, since then\n        // its type would have been set by now\n        if (!result[_i + 1]) {\n          node.type = 'media-type';\n          continue;\n        }\n\n        // `screen and` or `#{...} (max-width: 10px)`\n        if (result[_i + 1] && (result[_i + 1].type === 'media-feature-expression' || result[_i + 1].type === 'keyword')) {\n          node.type = 'media-type';\n          continue;\n        }\n        if (result[_i + 2]) {\n          // `screen and (color) ...`\n          if (result[_i + 2].type === 'media-feature-expression') {\n            node.type = 'media-type';\n            result[_i + 1].type = 'keyword';\n            continue;\n          }\n          // `only screen and ...`\n          if (result[_i + 2].type === 'keyword') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            continue;\n          }\n        }\n        if (result[_i + 3]) {\n          // `screen and (color) ...`\n          if (result[_i + 3].type === 'media-feature-expression') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            result[_i + 2].type = 'keyword';\n            continue;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query list. Takes a possible `url()` at the start into\r\n * account, and divides the list into media queries that are parsed separately\r\n *\r\n * @param {string} string - the source media query list string\r\n *\r\n * @return {Array} an array of Nodes/Containers\r\n */\n\nfunction parseMediaList(string) {\n  var result = [];\n  var interimIndex = 0;\n  var levelLocal = 0;\n\n  // Check for a `url(...)` part (if it is contents of an @import rule)\n  var doesHaveUrl = /^(\\s*)url\\s*\\(/.exec(string);\n  if (doesHaveUrl !== null) {\n    var i = doesHaveUrl[0].length;\n    var parenthesesLv = 1;\n    while (parenthesesLv > 0) {\n      var character = string[i];\n      if (character === '(') {\n        parenthesesLv++;\n      }\n      if (character === ')') {\n        parenthesesLv--;\n      }\n      i++;\n    }\n    result.unshift(new _Node2.default({\n      type: 'url',\n      value: string.substring(0, i).trim(),\n      sourceIndex: doesHaveUrl[1].length,\n      before: doesHaveUrl[1],\n      after: /^(\\s*)/.exec(string.substring(i))[1]\n    }));\n    interimIndex = i;\n  }\n\n  // Start processing the media query list\n  for (var _i2 = interimIndex; _i2 < string.length; _i2++) {\n    var _character = string[_i2];\n\n    // Dividing the media query list into comma-separated media queries\n    // Only count commas that are outside of any parens\n    // (i.e., not part of function call params list, etc.)\n    if (_character === '(') {\n      levelLocal++;\n    }\n    if (_character === ')') {\n      levelLocal--;\n    }\n    if (levelLocal === 0 && _character === ',') {\n      var _mediaQueryString = string.substring(interimIndex, _i2);\n      var _spaceBefore = /^(\\s*)/.exec(_mediaQueryString)[1];\n      result.push(new _Container2.default({\n        type: 'media-query',\n        value: _mediaQueryString.trim(),\n        sourceIndex: interimIndex + _spaceBefore.length,\n        nodes: parseMediaQuery(_mediaQueryString, interimIndex),\n        before: _spaceBefore,\n        after: /(\\s*)$/.exec(_mediaQueryString)[1]\n      }));\n      interimIndex = _i2 + 1;\n    }\n  }\n\n  var mediaQueryString = string.substring(interimIndex);\n  var spaceBefore = /^(\\s*)/.exec(mediaQueryString)[1];\n  result.push(new _Container2.default({\n    type: 'media-query',\n    value: mediaQueryString.trim(),\n    sourceIndex: interimIndex + spaceBefore.length,\n    nodes: parseMediaQuery(mediaQueryString, interimIndex),\n    before: spaceBefore,\n    after: /(\\s*)$/.exec(mediaQueryString)[1]\n  }));\n\n  return result;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseMedia;\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _parsers = require('./parsers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media query list into an array of nodes. A typical node signature:\r\n *  {string} node.type -- one of: 'media-query', 'media-type', 'keyword',\r\n *    'media-feature-expression', 'media-feature', 'colon', 'value'\r\n *  {string} node.value -- the contents of a particular element, trimmed\r\n *    e.g.: `screen`, `max-width`, `1024px`\r\n *  {string} node.after -- whitespaces that follow the element\r\n *  {string} node.before -- whitespaces that precede the element\r\n *  {string} node.sourceIndex -- the index of the element in a source media\r\n *    query list, 0-based\r\n *  {object} node.parent -- a link to the parent node (a container)\r\n *\r\n * Some nodes (media queries, media feature expressions) contain other nodes.\r\n * They additionally have:\r\n *  {array} node.nodes -- an array of nodes of the type described here\r\n *  {funciton} node.each -- traverses direct children of the node, calling\r\n *    a callback for each one\r\n *  {funciton} node.walk -- traverses ALL descendants of the node, calling\r\n *    a callback for each one\r\n */\n\nfunction parseMedia(value) {\n  return new _Container2.default({\n    nodes: (0, _parsers.parseMediaList)(value),\n    type: 'media-query-list',\n    value: value.trim()\n  });\n}","'use strict';\n\n/**\n * Check whether a media feature is a range context one\n *\n * @param {string} mediaFeature feature\n * @return {boolean} If `true`, media feature is a range context one\n */\nmodule.exports = function (mediaFeature) {\n\treturn mediaFeature.includes('=') || mediaFeature.includes('<') || mediaFeature.includes('>');\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst { assert } = require('../utils/validateTypes');\n\nconst rangeOperators = new Set(['>=', '<=', '>', '<', '=']);\n\n/**\n * @param {string} name\n * @returns {boolean}\n */\nfunction isRangeContextName(name) {\n\t// When the node is like \"(width > 10em)\" or \"(10em < width)\"\n\t// Regex is needed because the name can either be in the first or second position\n\treturn /^(?!--)\\D/.test(name) || /^--./.test(name);\n}\n\n/**\n * @typedef {{ value: string, sourceIndex: number }} RangeContextNode\n *\n * @param {import('postcss-media-query-parser').Node} node\n * @returns {{ name: RangeContextNode, values: RangeContextNode[] }}\n */\nmodule.exports = function rangeContextNodeParser(node) {\n\t/** @type {import('postcss-value-parser').WordNode | undefined} */\n\tlet nameNode;\n\n\t/** @type {import('postcss-value-parser').WordNode[]} */\n\tconst valueNodes = [];\n\n\tvalueParser(node.value).walk((valueNode) => {\n\t\tif (valueNode.type !== 'word') return;\n\n\t\tif (rangeOperators.has(valueNode.value)) return;\n\n\t\tif (nameNode == null && isRangeContextName(valueNode.value)) {\n\t\t\tnameNode = valueNode;\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueNodes.push(valueNode);\n\t});\n\n\tassert(nameNode);\n\n\treturn {\n\t\tname: {\n\t\t\tvalue: nameNode.value,\n\t\t\tsourceIndex: node.sourceIndex + nameNode.sourceIndex,\n\t\t},\n\n\t\tvalues: valueNodes.map((valueNode) => ({\n\t\t\tvalue: valueNode.value,\n\t\t\tsourceIndex: node.sourceIndex + valueNode.sourceIndex,\n\t\t})),\n\t};\n};\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name, value) => `Unexpected value \"${value}\" for name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature-expression$/i, (node) => {\n\t\t\t\tif (!node.nodes) return;\n\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(node.parent.value);\n\n\t\t\t\t// Ignore boolean\n\t\t\t\tif (!node.value.includes(':') && !mediaFeatureRangeContext) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mediaFeatureNode = node.nodes.find((n) => n.type === 'media-feature');\n\n\t\t\t\tif (mediaFeatureNode == null) throw new Error('A `media-feature` node must be present');\n\n\t\t\t\tlet mediaFeatureName;\n\t\t\t\tlet values;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tmediaFeatureName = parsedRangeContext.name.value;\n\t\t\t\t\tvalues = parsedRangeContext.values;\n\t\t\t\t} else {\n\t\t\t\t\tmediaFeatureName = mediaFeatureNode.value;\n\t\t\t\t\tconst valueNode = node.nodes.find((n) => n.type === 'value');\n\n\t\t\t\t\tif (valueNode == null) throw new Error('A `value` node must be present');\n\n\t\t\t\t\tvalues = [valueNode];\n\t\t\t\t}\n\n\t\t\t\tfor (const valueNode of values) {\n\t\t\t\t\tconst value = valueNode.value;\n\t\t\t\t\tconst unprefixedMediaFeatureName = vendor.unprefixed(mediaFeatureName);\n\n\t\t\t\t\tconst allowedValuesKey = Object.keys(primary).find((featureName) =>\n\t\t\t\t\t\tmatchesStringOrRegExp(unprefixedMediaFeatureName, featureName),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (allowedValuesKey == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(primary, allowedValuesKey, value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = atRuleParamIndex(atRule) + valueNode.sourceIndex;\n\t\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tmessage: messages.rejected(mediaFeatureName, value),\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-case',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst expected = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expected) return;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expected;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(value, expected),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'hue-degree-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/hue-degree-notation',\n};\n\nconst HUE_FIRST_ARG_FUNCS = ['hsl', 'hsla', 'hwb'];\nconst HUE_THIRD_ARG_FUNCS = ['lch'];\nconst HUE_FUNCS = new Set([...HUE_FIRST_ARG_FUNCS, ...HUE_THIRD_ARG_FUNCS]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['angle', 'number'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\tif (!HUE_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\tconst hue = findHue(node);\n\n\t\t\t\tif (!hue) return;\n\n\t\t\t\tconst { value } = hue;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isDegree(value) && !isNumber(value)) return;\n\n\t\t\t\tif (primary === 'angle' && isDegree(value)) return;\n\n\t\t\t\tif (primary === 'number' && isNumber(value)) return;\n\n\t\t\t\tconst fixed = primary === 'angle' ? asDegree(value) : asNumber(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\thue.value = fixed;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst valueIndex = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: valueIndex + hue.sourceIndex,\n\t\t\t\t\tendIndex: valueIndex + hue.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n */\nfunction asDegree(value) {\n\treturn `${value}deg`;\n}\n\n/**\n * @param {string} value\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tif (dimension) return dimension.number;\n\n\tthrow new TypeError(`The \"${value}\" value must have a unit`);\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction findHue(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\tconst value = node.value.toLowerCase();\n\n\tif (HUE_FIRST_ARG_FUNCS.includes(value)) {\n\t\treturn args[0];\n\t}\n\n\tif (HUE_THIRD_ARG_FUNCS.includes(value)) {\n\t\treturn args[2];\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n */\nfunction isDegree(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit.toLowerCase() === 'deg';\n}\n\n/**\n * @param {string} value\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a media query is a custom\n * @param {string} mediaQuery\n * @returns {boolean}\n */\nmodule.exports = function (mediaQuery) {\n\treturn mediaQuery.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a media feature name is standard\n *\n * @param {string} mediaFeatureName\n * @returns {boolean}\n */\nmodule.exports = function (mediaFeatureName) {\n\t// SCSS interpolation\n\tif (/#\\{.+?\\}|\\$.+/.test(mediaFeatureName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tlet hasComments = atRule.raws.params && atRule.raws.params.raw;\n\t\t\tconst mediaRule = hasComments ? hasComments : atRule.params;\n\n\t\t\tmediaParser(mediaRule).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst expectedFeatureName = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expectedFeatureName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\thasComments.slice(sourceIndex + expectedFeatureName.length);\n\n\t\t\t\t\t\tif (atRule.raws.params == null) {\n\t\t\t\t\t\t\tthrow new Error('The `AtRuleRaws` node must have a `params` property');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tatRule.raws.params.raw = hasComments;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tatRule.params =\n\t\t\t\t\t\t\tatRule.params.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\tatRule.params.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.expected(value, expectedFeatureName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t// If there are comments in the params, the complete string\n\t\t\t// will be at atRule.raws.params.raw\n\t\t\tconst params = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst indexBoost = atRuleParamIndex(atRule);\n\t\t\t/** @type {Array<{ message: string, index: number }>} */\n\t\t\tconst problems = [];\n\n\t\t\tconst parsedParams = valueParser(params).walk((node) => {\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tconst len = valueParser.stringify(node).length;\n\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tif (/[ \\t]/.test(node.before)) {\n\t\t\t\t\t\t\tif (context.fix) node.before = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/[ \\t]/.test(node.after)) {\n\t\t\t\t\t\t\tif (context.fix) node.after = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'always') {\n\t\t\t\t\t\tif (node.before === '') {\n\t\t\t\t\t\t\tif (context.fix) node.before = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.after === '') {\n\t\t\t\t\t\t\tif (context.fix) node.after = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tatRule.params = parsedParams.toString();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const err of problems) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-duplicate-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-duplicate-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'consecutive-duplicates',\n\t\t\t\t\t\t'consecutive-duplicates-with-different-values',\n\t\t\t\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t\t\t\t],\n\t\t\t\t\tignoreProperties: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDuplicates = optionsMatches(secondaryOptions, 'ignore', 'consecutive-duplicates');\n\t\tconst ignoreDiffValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-different-values',\n\t\t);\n\t\tconst ignorePrefixlessSameValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {string[]} */\n\t\t\tconst decls = [];\n\t\t\t/** @type {string[]} */\n\t\t\tconst values = [];\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst value = decl.value;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if the property is to be ignored\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore the src property as commonly duplicated in at-fontface\n\t\t\t\tif (prop.toLowerCase() === 'src') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst indexDuplicate = decls.indexOf(prop.toLowerCase());\n\n\t\t\t\tif (indexDuplicate !== -1) {\n\t\t\t\t\tif (ignoreDiffValues || ignorePrefixlessSameValues) {\n\t\t\t\t\t\t// fails if duplicates are not consecutive\n\t\t\t\t\t\tif (indexDuplicate !== decls.length - 1) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst duplicateValue = values[indexDuplicate] || '';\n\n\t\t\t\t\t\tif (ignorePrefixlessSameValues) {\n\t\t\t\t\t\t\t// fails if values of consecutive, unprefixed duplicates are equal\n\t\t\t\t\t\t\tif (vendor.unprefixed(value) !== vendor.unprefixed(duplicateValue)) {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fails if values of consecutive duplicates are equal\n\t\t\t\t\t\tif (value === duplicateValue) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ignoreDuplicates && indexDuplicate === decls.length - 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdecls.push(prop.toLowerCase());\n\t\t\t\tvalues.push(value.toLowerCase());\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (mediaFeatureName) => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreMediaFeatureNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreMediaFeatureNames', value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (vendor.prefix(value) || keywordSets.mediaFeatureNames.has(value.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst rangeOperators = ['>=', '<=', '>', '<', '='];\n\n/** @typedef {import('style-search').StyleSearchMatch} StyleSearchMatch */\n\n/**\n * @template {import('postcss').AtRule} T\n * @param {T} atRule\n * @param {(match: StyleSearchMatch, params: string, atRule: T) => void} cb\n */\nmodule.exports = function findMediaOperator(atRule, cb) {\n\tif (atRule.name.toLowerCase() !== 'media') {\n\t\treturn;\n\t}\n\n\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\tstyleSearch({ source: params, target: rangeOperators }, (match) => {\n\t\tconst before = params[match.startIndex - 1];\n\n\t\tif (before === '>' || before === '<') {\n\t\t\treturn;\n\t\t}\n\n\t\tcb(match, params, atRule);\n\t});\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before range operator',\n\trejectedBefore: () => 'Unexpected whitespace before range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-range-operator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckBeforeOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index);\n\t\t\t\t\tconst afterOperator = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkBeforeOperator(match, params, node, fix) {\n\t\t\t// The extra `+ 1` is because the match itself contains\n\t\t\t// the character before the operator\n\t\t\tchecker.before({\n\t\t\t\tsource: params,\n\t\t\t\tindex: match.startIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: match.startIndex - 1 + atRuleParamIndex(node),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst { assertString } = require('../utils/validateTypes');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule, index: number) => boolean) | null | undefined,\n *   allowTrailingComments?: boolean,\n * }} opts\n */\nmodule.exports = function mediaQueryListCommaWhitespaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ',' }, (match) => {\n\t\t\tlet index = match.startIndex;\n\n\t\t\tif (opts.allowTrailingComments) {\n\t\t\t\t// if there is a comment on the same line at after the comma, check the space after the comment.\n\t\t\t\tlet execResult;\n\n\t\t\t\twhile ((execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[0]);\n\t\t\t\t\tindex += execResult[0].length;\n\t\t\t\t}\n\n\t\t\t\tif ((execResult = /^([^\\S\\r\\n]*\\/\\/[\\s\\S]*?)\\r?\\n/.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[1]);\n\t\t\t\t\tindex += execResult[1].length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckComma(params, index, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst commaIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, commaIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: commaIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only check for the newline after the comma, while allowing\n\t\t// arbitrary indentation after the newline\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tallowTrailingComments: primary.startsWith('always'),\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = /^\\s*\\n/.test(afterComma)\n\t\t\t\t\t\t\t? beforeComma + afterComma.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t: beforeComma + context.newline + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atImport) => `Unexpected duplicate @import rule ${atImport}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-duplicate-at-import-rules',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Record<string, string[]>} */\n\t\tconst imports = {};\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst [firstParam, ...restParams] = valueParser(atRule.params).nodes;\n\n\t\t\tif (!firstParam) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// extract uri from url() if exists\n\t\t\tconst uri =\n\t\t\t\tfirstParam.type === 'function' && firstParam.value === 'url' && firstParam.nodes[0]\n\t\t\t\t\t? firstParam.nodes[0].value\n\t\t\t\t\t: firstParam.value;\n\n\t\t\t// extract media queries if any\n\t\t\tconst media = (mediaParser(valueParser.stringify(restParams)).nodes || [])\n\t\t\t\t.map((n) => n.value.replace(/\\s/g, ''))\n\t\t\t\t.filter((n) => n.length);\n\n\t\t\tlet importedUris = imports[uri];\n\t\t\tconst isDuplicate = media.length\n\t\t\t\t? media.some((q) => importedUris && importedUris.includes(q))\n\t\t\t\t: importedUris;\n\n\t\t\tif (isDuplicate) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(uri),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: atRule.toString(),\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!importedUris) {\n\t\t\t\timportedUris = imports[uri] = [];\n\t\t\t}\n\n\t\t\timportedUris.push(...media);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected vendor-prefix',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst params = atRule.params;\n\n\t\t\tif (!isAutoprefixable.mediaFeatureName(params)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.params = isAutoprefixable.unprefix(atRule.params);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const match of matches) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: match,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index);\n\t\t\t\t\tconst afterComma = params.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, ' ') + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, '') + afterComma;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports = function resolveNestedSelector(selector, node) {\n  var parent = node.parent;\n  var parentIsNestAtRule = parent.type === 'atrule' && parent.name === 'nest';\n\n  if (parent.type === 'root') return [selector];\n  if (parent.type !== 'rule' && !parentIsNestAtRule) return resolveNestedSelector(selector, parent);\n\n  var parentSelectors = (parentIsNestAtRule)\n    ? parent.params.split(',').map(function(s) { return s.trim(); })\n    : parent.selectors;\n\n  var resolvedSelectors = parentSelectors.reduce(function(result, parentSelector) {\n    if (selector.indexOf('&') !== -1) {\n      var newlyResolvedSelectors = resolveNestedSelector(parentSelector, parent).map(function(resolvedParentSelector) {\n        return selector.replace(/&/g, resolvedParentSelector);\n      });\n      return result.concat(newlyResolvedSelectors);\n    }\n\n    var combinedSelector = [ parentSelector, selector ].join(' ');\n    return result.concat(resolveNestedSelector(combinedSelector, parent));\n  }, []);\n\n  return resolvedSelectors;\n}\n","import e from\"postcss-selector-parser\";function s(n){if(!n)return{a:0,b:0,c:0};let t=0,c=0,o=0;if(\"universal\"==n.type)return{a:0,b:0,c:0};if(\"id\"===n.type)t+=1;else if(\"tag\"===n.type)o+=1;else if(\"class\"===n.type)c+=1;else if(\"attribute\"===n.type)c+=1;else if(function(s){return e.isPseudoElement(s)}(n))o+=1;else if(e.isPseudoClass(n))switch(n.value.toLowerCase()){case\":-moz-any\":case\":-webkit-any\":case\":any\":case\":has\":case\":is\":case\":matches\":case\":not\":if(n.nodes&&n.nodes.length>0){const e=a(n.nodes);t+=e.a,c+=e.b,o+=e.c}break;case\":where\":break;case\":nth-child\":case\":nth-last-child\":if(c+=1,n.nodes&&n.nodes.length>0){const s=n.nodes[0].nodes.findIndex((e=>\"tag\"===e.type&&\"of\"===e.value.toLowerCase()));if(s>-1){const l=[e.selector({nodes:n.nodes[0].nodes.slice(s+1),value:\"\"})];n.nodes.length>1&&l.push(...n.nodes.slice(1));const r=a(l);t+=r.a,c+=r.b,o+=r.c}}break;case\":local\":case\":global\":n.nodes&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));break;default:c+=1}else e.isContainer(n)&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));return{a:t,b:c,c:o}}function a(e){let a={a:0,b:0,c:0};return e.forEach((e=>{const n=s(e);n.a>a.a?a=n:n.a<a.a||(n.b>a.b?a=n:n.b<a.b||n.c>a.c&&(a=n))})),a}function n(e,s){return e.a===s.a?e.b===s.b?e.c-s.c:e.b-s.b:e.a-s.a}export{n as compare,s as selectorSpecificity};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * Find the at-rule in which a rule is nested.\n *\n * Returns `null` if the rule is not nested within an at-rule.\n *\n * @param {import('postcss').Rule} rule\n * @returns {null | import('postcss').AtRule}\n */\nmodule.exports = function findAtRuleContext(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn null;\n\t}\n\n\tif (isAtRule(parent)) {\n\t\treturn parent;\n\t}\n\n\tif (isRule(parent)) {\n\t\treturn findAtRuleContext(parent);\n\t}\n\n\treturn null;\n};\n","'use strict';\n\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\nmodule.exports = function nodeContextLookup() {\n\tconst contextMap = new Map();\n\n\treturn {\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {any[]} subContexts\n\t\t * @returns {Map<any, any>}\n\t\t */\n\t\tgetContext(node, ...subContexts) {\n\t\t\tif (!node.source) throw new Error('The node source must be present');\n\n\t\t\tconst nodeSource = node.source.input.from;\n\t\t\tconst baseContext = creativeGetMap(contextMap, nodeSource);\n\n\t\t\treturn subContexts.reduce((result, context) => creativeGetMap(result, context), baseContext);\n\t\t},\n\t};\n};\n\n/**\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\nfunction creativeGetMap(someMap, someThing) {\n\tif (!someMap.has(someThing)) {\n\t\tsomeMap.set(someThing, new Map());\n\t}\n\n\treturn someMap.get(someThing);\n}\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selector\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Node} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function parseSelector(selector, result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(selector);\n\t} catch (err) {\n\t\tresult.warn(`Cannot parse selector (${err})`, { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity: calculate, compare } = require('@csstools/selector-specificity');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-descending-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-descending-specificity',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['selectors-within-list'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\t// Ignore nested property `foo: {};`\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignores selectors within list of selectors\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'selectors-within-list') &&\n\t\t\t\truleNode.selectors.length > 1\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst comparisonContext = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst trimSelector = selector.trim();\n\n\t\t\t\t// Ignore `.selector, { }`\n\t\t\t\tif (trimSelector === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Resolve any nested selectors before checking\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => {\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcheckSelector(s, ruleNode, comparisonContext);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {Map<any, any>} comparisonContext\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode, comparisonContext) {\n\t\t\tconst selector = selectorNode.toString();\n\t\t\tconst referenceSelectorNode = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n\t\t\tconst selectorSpecificity = calculate(selectorNode);\n\t\t\tconst entry = { selector, specificity: selectorSpecificity };\n\n\t\t\tif (!comparisonContext.has(referenceSelectorNode)) {\n\t\t\t\tcomparisonContext.set(referenceSelectorNode, [entry]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {Array<typeof entry>} */\n\t\t\tconst priorComparableSelectors = comparisonContext.get(referenceSelectorNode);\n\n\t\t\tfor (const priorEntry of priorComparableSelectors) {\n\t\t\t\tif (compare(selectorSpecificity, priorEntry.specificity) < 0) {\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, priorEntry.selector),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpriorComparableSelectors.push(entry);\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Root} selectorNode\n */\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n\tconst firstChild = selectorNode.nodes[0];\n\n\tassert(firstChild);\n\tconst nodesByCombinator = firstChild.split((node) => node.type === 'combinator');\n\tconst nodesAfterLastCombinator = nodesByCombinator[nodesByCombinator.length - 1];\n\n\tassert(nodesAfterLastCombinator);\n\tconst nodesWithoutPseudoClasses = nodesAfterLastCombinator\n\t\t.filter((node) => {\n\t\t\treturn (\n\t\t\t\tnode.type !== 'pseudo' ||\n\t\t\t\tnode.value.startsWith('::') ||\n\t\t\t\tkeywordSets.pseudoElements.has(node.value.replace(/:/g, ''))\n\t\t\t);\n\t\t})\n\t\t.join('');\n\n\treturn nodesWithoutPseudoClasses.toString();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-unit-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(node);\n\n\t\t\t\tif (!unit || (unit && !propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../../utils/arrayEqual');\n\n/**\n *\n * @param {string[][]} areas\n * @param {string} name\n * @returns {boolean}\n */\nfunction isContiguousAndRectangular(areas, name) {\n\tconst indicesByRow = areas.map((row) => {\n\t\tconst indices = [];\n\t\tlet idx = row.indexOf(name);\n\n\t\twhile (idx !== -1) {\n\t\t\tindices.push(idx);\n\t\t\tidx = row.indexOf(name, idx + 1);\n\t\t}\n\n\t\treturn indices;\n\t});\n\n\tfor (let i = 0; i < indicesByRow.length; i++) {\n\t\tfor (let j = i + 1; j < indicesByRow.length; j++) {\n\t\t\tconst x = indicesByRow[i];\n\t\t\tconst y = indicesByRow[j];\n\n\t\t\tif ((x && x.length === 0) || (y && y.length === 0)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!arrayEqual(x, y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction namedAreas(areas) {\n\tconst names = new Set(areas.flat());\n\n\tnames.delete('.');\n\n\treturn [...names];\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction findNotContiguousOrRectangular(areas) {\n\treturn namedAreas(areas).filter((name) => !isContiguousAndRectangular(areas, name));\n}\n\nmodule.exports = findNotContiguousOrRectangular;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findNotContiguousOrRectangular = require('./utils/findNotContiguousOrRectangular');\nconst isRectangular = require('./utils/isRectangular');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'named-grid-areas-no-invalid';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedToken: () => 'Expected cell token within string',\n\texpectedSameNumber: () => 'Expected same number of cell tokens in each string',\n\texpectedRectangle: (name) => `Expected single filled-in rectangle for \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/named-grid-areas-no-invalid',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^(?:grid|grid-template|grid-template-areas)$/i, (decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (value.toLowerCase().trim() === 'none') return;\n\n\t\t\t/** @type {string[][]} */\n\t\t\tconst areas = [];\n\t\t\tlet reportSent = false;\n\n\t\t\tvalueParser(value).walk(({ sourceIndex, type, value: tokenValue }) => {\n\t\t\t\tif (type !== 'string') return;\n\n\t\t\t\tif (tokenValue === '') {\n\t\t\t\t\tcomplain(messages.expectedToken(), sourceIndex);\n\t\t\t\t\treportSent = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tareas.push(\n\t\t\t\t\ttokenValue\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(' ')\n\t\t\t\t\t\t.filter((s) => s.length > 0),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tif (reportSent) return;\n\n\t\t\tif (areas.length === 0) return;\n\n\t\t\tif (!isRectangular(areas)) {\n\t\t\t\tcomplain(messages.expectedSameNumber());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notContiguousOrRectangular = findNotContiguousOrRectangular(areas);\n\n\t\t\tfor (const name of notContiguousOrRectangular.sort()) {\n\t\t\t\tcomplain(messages.expectedRectangle(name));\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} [sourceIndex=0]\n\t\t\t */\n\t\t\tfunction complain(message, sourceIndex = 0) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n *\n * @param {string[][]} areas\n * @returns {boolean}\n */\nfunction isRectangular(areas) {\n\tconst firstArea = areas[0];\n\n\tif (firstArea === undefined) return false;\n\n\treturn areas.every((row) => row.length === firstArea.length);\n}\n\nmodule.exports = isRectangular;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-source';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty source',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-empty-source',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-invalid-position-at-import-rule';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected invalid position @import rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-invalid-position-at-import-rule',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, options) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet invalidPosition = false;\n\n\t\troot.walk((node) => {\n\t\t\tconst nodeName = ('name' in node && node.name && node.name.toLowerCase()) || '';\n\n\t\t\tif (\n\t\t\t\t(node.type === 'atrule' &&\n\t\t\t\t\tnodeName !== 'charset' &&\n\t\t\t\t\tnodeName !== 'import' &&\n\t\t\t\t\tnodeName !== 'layer' &&\n\t\t\t\t\t!optionsMatches(options, 'ignoreAtRules', node.name) &&\n\t\t\t\t\tisStandardSyntaxAtRule(node)) ||\n\t\t\t\t(node.type === 'rule' && isStandardSyntaxRule(node))\n\t\t\t) {\n\t\t\t\tinvalidPosition = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'atrule' && nodeName === 'import' && invalidPosition) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: node.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-irregular-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\tunexpected: 'Unexpected irregular whitespace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-irregular-whitespace',\n};\n\nconst IRREGULAR_WHITESPACES = [\n\t'\\u000B', // Line Tabulation (\\v) - <VT>\n\t'\\u000C', // Form Feed (\\f) - <FF>\n\t'\\u00A0', // No-Break Space - <NBSP>\n\t'\\u0085', // Next Line\n\t'\\u1680', // Ogham Space Mark\n\t'\\u180E', // Mongolian Vowel Separator - <MVS>\n\t'\\uFEFF', // Zero Width No-Break Space - <BOM>\n\t'\\u2000', // En Quad\n\t'\\u2001', // Em Quad\n\t'\\u2002', // En Space - <ENSP>\n\t'\\u2003', // Em Space - <EMSP>\n\t'\\u2004', // Tree-Per-Em\n\t'\\u2005', // Four-Per-Em\n\t'\\u2006', // Six-Per-Em\n\t'\\u2007', // Figure Space\n\t'\\u2008', // Punctuation Space - <PUNCSP>\n\t'\\u2009', // Thin Space\n\t'\\u200A', // Hair Space\n\t'\\u200B', // Zero Width Space - <ZWSP>\n\t'\\u2028', // Line Separator\n\t'\\u2029', // Paragraph Separator\n\t'\\u202F', // Narrow No-Break Space\n\t'\\u205F', // Medium Mathematical Space\n\t'\\u3000', // Ideographic Space\n];\n\nconst IRREGULAR_WHITESPACES_PATTERN = new RegExp(`([${IRREGULAR_WHITESPACES.join('')}])`);\n\n/**\n * @param {string} str\n * @returns {string | null}\n */\nconst findIrregularWhitespace = (str) => {\n\tconst result = IRREGULAR_WHITESPACES_PATTERN.exec(str);\n\n\treturn (result && result[1]) || null;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string | undefined} value\n\t\t */\n\t\tconst validate = (node, value) => {\n\t\t\tconst issue = value && findIrregularWhitespace(value);\n\n\t\t\tif (issue) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage: messages.unexpected,\n\t\t\t\t\tnode,\n\t\t\t\t\tword: issue,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tvalidate(atRule, atRule.name);\n\t\t\tvalidate(atRule, atRule.params);\n\t\t\tvalidate(atRule, atRule.raws.before);\n\t\t\tvalidate(atRule, atRule.raws.after);\n\t\t\tvalidate(atRule, atRule.raws.afterName);\n\t\t\tvalidate(atRule, atRule.raws.between);\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tvalidate(ruleNode, ruleNode.selector);\n\t\t\tvalidate(ruleNode, ruleNode.raws.before);\n\t\t\tvalidate(ruleNode, ruleNode.raws.after);\n\t\t\tvalidate(ruleNode, ruleNode.raws.between);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalidate(decl, decl.prop);\n\t\t\tvalidate(decl, decl.value);\n\t\t\tvalidate(decl, decl.raws.before);\n\t\t\tvalidate(decl, decl.raws.between);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * Check if a rule is a keyframe one\n *\n * @param {import('postcss').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function (rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(parent) && parent.name.toLowerCase() === 'keyframes';\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst selectorParser = require('postcss-selector-parser');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector, firstDuplicateLine) =>\n\t\t`Unexpected duplicate selector \"${selector}\", first used at line ${firstDuplicateLine}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tdisallowInList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldDisallowDuplicateInList = secondaryOptions && secondaryOptions.disallowInList;\n\n\t\t// The top level of this map will be rule sources.\n\t\t// Each source maps to another map, which maps rule parents to a set of selectors.\n\t\t// This ensures that selectors are only checked against selectors\n\t\t// from other rules that share the same parent and the same source.\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contextSelectorSet = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\t\t\tconst resolvedSelectorList = [\n\t\t\t\t...new Set(\n\t\t\t\t\truleNode.selectors.flatMap((selector) => resolvedNestedSelector(selector, ruleNode)),\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tconst normalizedSelectorList = resolvedSelectorList.map(normalize);\n\n\t\t\t// Sort the selectors list so that the order of the constituents\n\t\t\t// doesn't matter\n\t\t\tconst sortedSelectorList = [...normalizedSelectorList].sort().join(',');\n\n\t\t\tif (!ruleNode.source) throw new Error('The rule node must have a source');\n\n\t\t\tif (!ruleNode.source.start) throw new Error('The rule source must have a start position');\n\n\t\t\tconst selectorLine = ruleNode.source.start.line;\n\n\t\t\t// Complain if the same selector list occurs twice\n\n\t\t\tlet previousDuplicatePosition;\n\t\t\t// When `disallowInList` is true, we must parse `sortedSelectorList` into\n\t\t\t// list items.\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectorListParsed = [];\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tparseSelector(sortedSelectorList, result, ruleNode, (selectors) => {\n\t\t\t\t\tselectors.each((s) => {\n\t\t\t\t\t\tconst selector = String(s);\n\n\t\t\t\t\t\tselectorListParsed.push(selector);\n\n\t\t\t\t\t\tif (contextSelectorSet.get(selector)) {\n\t\t\t\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(sortedSelectorList);\n\t\t\t}\n\n\t\t\tif (previousDuplicatePosition) {\n\t\t\t\t// If the selector isn't nested we can use its raw value; otherwise,\n\t\t\t\t// we have to approximate something for the message -- which is close enough\n\t\t\t\tconst isNestedSelector = resolvedSelectorList.join(',') !== ruleNode.selectors.join(',');\n\t\t\t\tconst selectorForMessage = isNestedSelector\n\t\t\t\t\t? resolvedSelectorList.join(', ')\n\t\t\t\t\t: ruleNode.selector;\n\n\t\t\t\treturn report({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selectorForMessage, previousDuplicatePosition),\n\t\t\t\t\tword: selectorForMessage,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst presentedSelectors = new Set();\n\t\t\tconst reportedSelectors = new Set();\n\n\t\t\t// Or complain if one selector list contains the same selector more than once\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst normalized = normalize(selector);\n\n\t\t\t\tif (presentedSelectors.has(normalized)) {\n\t\t\t\t\tif (reportedSelectors.has(normalized)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, selectorLine),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t\treportedSelectors.add(normalized);\n\t\t\t\t} else {\n\t\t\t\t\tpresentedSelectors.add(normalized);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tfor (const selector of selectorListParsed) {\n\t\t\t\t\t// [selectorLine] will not really be accurate for multi-line\n\t\t\t\t\t// selectors, such as \"bar\" in \"foo,\\nbar {}\".\n\t\t\t\t\tcontextSelectorSet.set(selector, selectorLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontextSelectorSet.set(sortedSelectorList, selectorLine);\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} selector\n * @returns {string}\n */\nfunction normalize(selector) {\n\tif (!isStandardSyntaxSelector(selector)) {\n\t\treturn selector;\n\t}\n\n\treturn selectorParser().processSync(selector, { lossless: false });\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-value-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!optionsMatches(primary, propKey, value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-missing-end-of-source-newline';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing end-of-source newline',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-missing-end-of-source-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source property');\n\t\t}\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\tif (root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\n\t\tif (!rootString.trim() || rootString.endsWith('\\n')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fix\n\t\tif (context.fix) {\n\t\t\troot.raws.after = context.newline;\n\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tindex: rootString.length - 1,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findAnimationName = require('../../utils/findAnimationName');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-unknown-animations';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (animationName) => `Unexpected unknown animation name \"${animationName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-unknown-animations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declaredAnimations = new Set();\n\n\t\troot.walkAtRules(/(-(moz|webkit)-)?keyframes/i, (atRule) => {\n\t\t\tdeclaredAnimations.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'animation' || decl.prop.toLowerCase() === 'animation-name') {\n\t\t\t\tconst animationNames = findAnimationName(decl.value);\n\n\t\t\t\tif (animationNames.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const animationNameNode of animationNames) {\n\t\t\t\t\tif (keywordSets.animationNameKeywords.has(animationNameNode.value.toLowerCase())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declaredAnimations.has(animationNameNode.value)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(animationNameNode.value),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: declarationValueIndex(decl) + animationNameNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getUnitFromValueNode = require('./getUnitFromValueNode');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isVariable = require('./isVariable');\nconst keywordSets = require('../reference/keywordSets');\nconst postcssValueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\nmodule.exports = function findAnimationName(value) {\n\t/** @type {Node[]} */\n\tconst animationNames = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tnodes.length === 1 &&\n\t\tnodes[0] &&\n\t\tkeywordSets.basicKeywords.has(nodes[0].value.toLowerCase())\n\t) {\n\t\treturn [nodes[0]];\n\t}\n\n\tvalueNodes.walk((valueNode) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (valueNode.type !== 'word') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non-standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other animation parts\n\t\tif (keywordSets.animationShorthandKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore numbers with units\n\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\tif (unit || unit === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tanimationNames.push(valueNode);\n\t});\n\n\treturn animationNames;\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-extra-semicolons';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected extra semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-extra-semicolons',\n};\n\n/**\n * @param {import('postcss').Node} node\n * @returns {number}\n */\nfunction getOffsetByNode(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Document | Container<ChildNode>'\n\tif (node.parent && node.parent.document) {\n\t\treturn 0;\n\t}\n\n\tconst root = node.root();\n\n\tif (!root.source) throw new Error('The root node must have a source');\n\n\tif (!node.source) throw new Error('The node must have a source');\n\n\tif (!node.source.start) throw new Error('The source must have a start position');\n\n\tconst string = root.source.input.css;\n\tconst nodeColumn = node.source.start.column;\n\tconst nodeLine = node.source.start.line;\n\tlet line = 1;\n\tlet column = 1;\n\tlet index = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (column === nodeColumn && nodeLine === line) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (string[i] === '\\n') {\n\t\t\tcolumn = 1;\n\t\t\tline += 1;\n\t\t} else {\n\t\t\tcolumn += 1;\n\t\t}\n\t}\n\n\treturn index;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.raws.after && root.raws.after.trim().length !== 0) {\n\t\t\tconst rawAfterRoot = root.raws.after;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixSemiIndices = [];\n\n\t\t\tstyleSearch({ source: rawAfterRoot, target: ';' }, (match) => {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\t\t\tcomplain(root.source.input.css.length - rawAfterRoot.length + match.startIndex);\n\t\t\t});\n\n\t\t\t// fix\n\t\t\tif (fixSemiIndices.length) {\n\t\t\t\troot.raws.after = removeIndices(rawAfterRoot, fixSemiIndices);\n\t\t\t}\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tif (node.type === 'atrule' && !isStandardSyntaxAtRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'rule' && !isStandardSyntaxRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.raws.before && node.raws.before.trim().length !== 0) {\n\t\t\t\tconst rawBeforeNode = node.raws.before;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\tconst rawBeforeIndexStart = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawBeforeNode, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex - rawBeforeIndexStart);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(getOffsetByNode(node) - rawBeforeNode.length + match.startIndex);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.before = removeIndices(rawBeforeNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.after === 'string' && node.raws.after.trim().length !== 0) {\n\t\t\t\tconst rawAfterNode = node.raws.after;\n\n\t\t\t\t/**\n\t\t\t\t * If the last child is a Less mixin followed by more than one semicolon,\n\t\t\t\t * node.raws.after will be populated with that semicolon.\n\t\t\t\t * Since we ignore Less mixins, exit here\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\t'last' in node &&\n\t\t\t\t\tnode.last &&\n\t\t\t\t\tnode.last.type === 'atrule' &&\n\t\t\t\t\t!isStandardSyntaxAtRule(node.last)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawAfterNode, target: ';' }, (match) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\t1 -\n\t\t\t\t\t\trawAfterNode.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.after = removeIndices(rawAfterNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.ownSemicolon === 'string') {\n\t\t\t\tconst rawOwnSemicolon = node.raws.ownSemicolon;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawOwnSemicolon, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\trawOwnSemicolon.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.ownSemicolon = removeIndices(rawOwnSemicolon, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} str\n\t\t * @param {number[]} indices\n\t\t * @returns {string}\n\t\t */\n\t\tfunction removeIndices(str, indices) {\n\t\t\tfor (const index of indices.reverse()) {\n\t\t\t\tstr = str.slice(0, index) + str.slice(index + 1);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'property-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { parent } = decl;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRule(parent)) {\n\t\t\t\tconst { selector } = parent;\n\n\t\t\t\tif (selector && optionsMatches(secondaryOptions, 'ignoreSelectors', selector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst expectedProp = primary === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n\t\t\tif (prop === expectedProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = expectedProp;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(prop, expectedProp),\n\t\t\t\tnode: decl,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after range operator',\n\trejectedAfter: () => 'Unexpected whitespace after range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-range-operator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckAfterOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index + 1);\n\t\t\t\t\tconst afterOperator = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkAfterOperator(match, params, node, fix) {\n\t\t\tconst endIndex = match.startIndex + match.target.length - 1;\n\n\t\t\tchecker.after({\n\t\t\t\tsource: params,\n\t\t\t\tindex: endIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(endIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: endIndex + atRuleParamIndex(node) + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports.all = require('./data/all.json').properties;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst properties = require('known-css-properties').all;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected unknown property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\tconst allValidProperties = new Set(properties);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tcheckPrefixed: [isBoolean],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldCheckPrefixed = secondaryOptions && secondaryOptions.checkPrefixed;\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!shouldCheckPrefixed && vendor.prefix(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (\n\t\t\t\tparent &&\n\t\t\t\tisRule(parent) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', parent.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {import('postcss').Node | undefined} */\n\t\t\tlet node = parent;\n\n\t\t\twhile (node && node.type !== 'root') {\n\t\t\t\tif (isAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\n\t\t\tif (allValidProperties.has(prop.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: prop,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isWhitespace = require('./isWhitespace');\n\n/**\n * Returns a Boolean indicating whether the the input string is only whitespace.\n *\n * @param {string} input\n * @returns {boolean}\n */\nmodule.exports = function (input) {\n\tlet isOnlyWhitespace = true;\n\n\tfor (const element of input) {\n\t\tif (!isWhitespace(element)) {\n\t\t\tisOnlyWhitespace = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn isOnlyWhitespace;\n};\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isComment, isDeclaration, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-eol-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected whitespace at end of line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-eol-whitespace',\n};\n\nconst whitespacesToReject = new Set([' ', '\\t']);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction fixString(str) {\n\treturn str.replace(/[ \\t]+$/, '');\n}\n\n/**\n * @param {number} lastEOLIndex\n * @param {string} string\n * @param {{ ignoreEmptyLines?: boolean, isRootFirst?: boolean }} [options]\n * @returns {number}\n */\nfunction findErrorStartIndex(\n\tlastEOLIndex,\n\tstring,\n\t{ ignoreEmptyLines, isRootFirst } = {\n\t\tignoreEmptyLines: false,\n\t\tisRootFirst: false,\n\t},\n) {\n\tconst eolWhitespaceIndex = lastEOLIndex - 1;\n\n\t// If the character before newline is not whitespace, ignore\n\tif (!whitespacesToReject.has(string.charAt(eolWhitespaceIndex))) {\n\t\treturn -1;\n\t}\n\n\tif (ignoreEmptyLines) {\n\t\t// If there is only whitespace between the previous newline and\n\t\t// this newline, ignore\n\t\tconst beforeNewlineIndex = string.lastIndexOf('\\n', eolWhitespaceIndex);\n\n\t\tif (beforeNewlineIndex >= 0 || isRootFirst) {\n\t\t\tconst line = string.substring(beforeNewlineIndex, eolWhitespaceIndex);\n\n\t\t\tif (isOnlyWhitespace(line)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn eolWhitespaceIndex;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['empty-lines'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreEmptyLines = optionsMatches(secondaryOptions, 'ignore', 'empty-lines');\n\n\t\tif (context.fix) {\n\t\t\tfix(root);\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tconst reportFromIndex = (index) => {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t};\n\n\t\teachEolWhitespace(rootString, reportFromIndex, true);\n\n\t\tconst errorIndex = findErrorStartIndex(rootString.length, rootString, {\n\t\t\tignoreEmptyLines,\n\t\t\tisRootFirst: true,\n\t\t});\n\n\t\tif (errorIndex > -1) {\n\t\t\treportFromIndex(errorIndex);\n\t\t}\n\n\t\t/**\n\t\t * Iterate each whitespace at the end of each line of the given string.\n\t\t * @param {string} string - the source code string\n\t\t * @param {(index: number) => void} callback - callback the whitespace index at the end of each line.\n\t\t * @param {boolean} isRootFirst - set `true` if the given string is the first token of the root.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction eachEolWhitespace(string, callback, isRootFirst) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: string,\n\t\t\t\t\ttarget: ['\\n', '\\r'],\n\t\t\t\t\tcomments: 'check',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst index = findErrorStartIndex(match.startIndex, string, {\n\t\t\t\t\t\tignoreEmptyLines,\n\t\t\t\t\t\tisRootFirst,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tcallback(index);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Root} rootNode\n\t\t */\n\t\tfunction fix(rootNode) {\n\t\t\tlet isRootFirst = true;\n\n\t\t\trootNode.walk((node) => {\n\t\t\t\tfixText(\n\t\t\t\t\tnode.raws.before,\n\t\t\t\t\t(fixed) => {\n\t\t\t\t\t\tnode.raws.before = fixed;\n\t\t\t\t\t},\n\t\t\t\t\tisRootFirst,\n\t\t\t\t);\n\t\t\t\tisRootFirst = false;\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tfixText(node.raws.afterName, (fixed) => {\n\t\t\t\t\t\tnode.raws.afterName = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rawsParams = node.raws.params;\n\n\t\t\t\t\tif (rawsParams) {\n\t\t\t\t\t\tfixText(rawsParams.raw, (fixed) => {\n\t\t\t\t\t\t\trawsParams.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.params, (fixed) => {\n\t\t\t\t\t\t\tnode.params = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tconst rawsSelector = node.raws.selector;\n\n\t\t\t\t\tif (rawsSelector) {\n\t\t\t\t\t\tfixText(rawsSelector.raw, (fixed) => {\n\t\t\t\t\t\t\trawsSelector.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.selector, (fixed) => {\n\t\t\t\t\t\t\tnode.selector = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node) || isDeclaration(node)) {\n\t\t\t\t\tfixText(node.raws.between, (fixed) => {\n\t\t\t\t\t\tnode.raws.between = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst rawsValue = node.raws.value;\n\n\t\t\t\t\tif (rawsValue) {\n\t\t\t\t\t\tfixText(rawsValue.raw, (fixed) => {\n\t\t\t\t\t\t\trawsValue.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.value, (fixed) => {\n\t\t\t\t\t\t\tnode.value = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isComment(node)) {\n\t\t\t\t\tfixText(node.raws.left, (fixed) => {\n\t\t\t\t\t\tnode.raws.left = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!isStandardSyntaxComment(node)) {\n\t\t\t\t\t\tnode.raws.right = node.raws.right && fixString(node.raws.right);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.raws.right, (fixed) => {\n\t\t\t\t\t\t\tnode.raws.right = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tfixText(node.text, (fixed) => {\n\t\t\t\t\t\tnode.text = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node)) {\n\t\t\t\t\tfixText(node.raws.after, (fixed) => {\n\t\t\t\t\t\tnode.raws.after = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfixText(\n\t\t\t\trootNode.raws.after,\n\t\t\t\t(fixed) => {\n\t\t\t\t\trootNode.raws.after = fixed;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (typeof rootNode.raws.after === 'string') {\n\t\t\t\tconst lastEOL = Math.max(\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\n'),\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\r'),\n\t\t\t\t);\n\n\t\t\t\tif (lastEOL !== rootNode.raws.after.length - 1) {\n\t\t\t\t\trootNode.raws.after =\n\t\t\t\t\t\trootNode.raws.after.slice(0, lastEOL + 1) +\n\t\t\t\t\t\tfixString(rootNode.raws.after.slice(lastEOL + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string | undefined} value\n\t\t * @param {(text: string) => void} fixFn\n\t\t * @param {boolean} isRootFirst\n\t\t */\n\t\tfunction fixText(value, fixFn, isRootFirst = false) {\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\n\t\t\teachEolWhitespace(\n\t\t\t\tvalue,\n\t\t\t\t(index) => {\n\t\t\t\t\tconst newlineIndex = index + 1;\n\n\t\t\t\t\tfixed += fixString(value.slice(lastIndex, newlineIndex));\n\t\t\t\t\tlastIndex = newlineIndex;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (lastIndex) {\n\t\t\t\tfixed += value.slice(lastIndex);\n\t\t\t\tfixFn(fixed);\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-invalid-double-slash-comments';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected double-slash CSS comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-invalid-double-slash-comments',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.startsWith('//')) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: decl.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tif (selector.startsWith('//')) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: ruleNode.toString(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-leading-zero';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a leading zero',\n\trejected: 'Unexpected leading zero',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-leading-zero',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst neverFixPositions = [];\n\t\t\t/** @type {Array<{ index: number }>} */\n\t\t\tconst alwaysFixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check leading zero\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tconst match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 2 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n\t\t\t\t\t// for regex. And we need the index of \".5\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - match[1].length;\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\talwaysFixPositions.unshift({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex =\n\t\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.expected, node, baseIndex + index);\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never') {\n\t\t\t\t\tconst match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null || match[2] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 3 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-00.5\"\n\t\t\t\t\t// as an input for regex. And we need the index of \"00\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneverFixPositions.unshift({\n\t\t\t\t\t\t\tstartIndex: index,\n\t\t\t\t\t\t\t// match[1].length is the length of our matched zero(s)\n\t\t\t\t\t\t\tendIndex: index + match[1].length,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex =\n\t\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.rejected, node, baseIndex + index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (alwaysFixPositions.length) {\n\t\t\t\tfor (const fixPosition of alwaysFixPositions) {\n\t\t\t\t\tconst index = fixPosition.index;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = addLeadingZero(node.params, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = addLeadingZero(node.value, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (neverFixPositions.length) {\n\t\t\t\tfor (const fixPosition of neverFixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = removeLeadingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeLeadingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} index\n * @returns {string}\n */\nfunction addLeadingZero(input, index) {\n\t// eslint-disable-next-line prefer-template\n\treturn input.slice(0, index) + '0' + input.slice(index);\n}\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-no-trailing-zeros';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected trailing zero(s)',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-no-trailing-zeros',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\.(\\d{0,100}?)(0+)(?:\\D|$)/.exec(valueNode.value);\n\n\t\t\t\t// match[1] is any numbers between the decimal and our trailing zero, could be empty\n\t\t\t\t// match[2] is our trailing zero(s)\n\t\t\t\tif (match == null || match[1] == null || match[2] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// our index is:\n\t\t\t\t//  the index of our valueNode +\n\t\t\t\t//  the index of our match +\n\t\t\t\t//  1 for our decimal +\n\t\t\t\t//  the length of our potential non-zero number match (match[1])\n\t\t\t\tconst index = valueNode.sourceIndex + match.index + 1 + match[1].length;\n\n\t\t\t\t// our startIndex is identical to our index except when we have only\n\t\t\t\t// trailing zeros after our decimal. in that case we don't need the decimal\n\t\t\t\t// either so we move our index back by 1.\n\t\t\t\tconst startIndex = match[1].length > 0 ? index : index - 1;\n\n\t\t\t\t// our end index is our original index + the length of our trailing zeros\n\t\t\t\tconst endIndex = index + match[2].length;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex =\n\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\t// this is the index of the _first_ trailing zero\n\t\t\t\t\tindex: baseIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = removeTrailingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeTrailingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeTrailingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-colon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index);\n\t\t\t\t\tconst afterColon = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, ' ') + afterColon;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, '') + afterColon;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-name-case',\n};\n\nconst mapLowercaseFunctionNamesToCamelCase = new Map();\n\nfor (const func of keywordSets.camelCaseFunctionNames) {\n\tmapLowercaseFunctionNamesToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needFix = false;\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || !isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionName = node.value;\n\t\t\t\tconst functionNameLowerCase = functionName.toLowerCase();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', functionName)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet expectedFunctionName = null;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseFunctionNamesToCamelCase.has(functionNameLowerCase)\n\t\t\t\t) {\n\t\t\t\t\texpectedFunctionName = mapLowercaseFunctionNamesToCamelCase.get(functionNameLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedFunctionName = functionNameLowerCase;\n\t\t\t\t} else {\n\t\t\t\t\texpectedFunctionName = functionName.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (functionName === expectedFunctionName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedFunctionName;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(functionName, expectedFunctionName),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tsetDeclarationValue(decl, parsed.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (!matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-brackets-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"[\"',\n\trejectedOpening: 'Unexpected whitespace after \"[\"',\n\texpectedClosing: 'Expected single space before \"]\"',\n\trejectedClosing: 'Unexpected whitespace before \"]\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-brackets-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tlet hasFixed;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeSelectorString = attributeNode.toString();\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: '[' }, (match) => {\n\t\t\t\t\t\tconst nextCharIsSpace = attributeSelectorString[match.startIndex + 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex + 1;\n\n\t\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: ']' }, (match) => {\n\t\t\t\t\t\tconst prevCharIsSpace = attributeSelectorString[match.startIndex - 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex - 1;\n\n\t\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixBefore(attributeNode) {\n\t\tconst spacesAttribute = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\tconst rawAttrBefore = spacesAttribute && spacesAttribute.before;\n\n\t\t/** @type {{ attrBefore: string, setAttrBefore: (fixed: string) => void }} */\n\t\tconst { attrBefore, setAttrBefore } = rawAttrBefore\n\t\t\t? {\n\t\t\t\t\tattrBefore: rawAttrBefore,\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tspacesAttribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tattrBefore:\n\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.before) || '',\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\tattributeNode.spaces.attribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ''));\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixAfter(attributeNode) {\n\t\tconst key = attributeNode.operator\n\t\t\t? attributeNode.insensitive\n\t\t\t\t? 'insensitive'\n\t\t\t\t: 'value'\n\t\t\t: 'attribute';\n\n\t\tconst rawSpaces = attributeNode.raws.spaces && attributeNode.raws.spaces[key];\n\t\tconst rawAfter = rawSpaces && rawSpaces.after;\n\n\t\tconst spaces = attributeNode.spaces[key];\n\n\t\t/** @type {{ after: string, setAfter: (fixed: string) => void }} */\n\t\tconst { after, setAfter } = rawAfter\n\t\t\t? {\n\t\t\t\t\tafter: rawAfter,\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\trawSpaces.after = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tafter: (spaces && spaces.after) || '',\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces[key]) attributeNode.spaces[key] = {};\n\n\t\t\t\t\t\t// @ts-expect-error -- TS2532: Object is possibly 'undefined'.\n\t\t\t\t\t\tattributeNode.spaces[key].after = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ''));\n\t\t}\n\t}\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterSingleLineComment = require('../../utils/isAfterSingleLineComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before rule',\n\trejected: 'Unexpected empty line before rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/rule-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-block'],\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-rule',\n\t\t\t\t\t\t'after-single-line-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block-and-after-rule',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst expectation = /** @type {string} */ (primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment')) {\n\t\t\t\tconst prevNode = ruleNode.prev();\n\n\t\t\t\tif (prevNode && prevNode.type === 'comment') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isNested = ruleNode.parent && ruleNode.parent.type !== 'root';\n\n\t\t\t// Optionally ignore the expectation if inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore if the expectation is for multiple and the rule is single-line\n\t\t\tif (expectation.includes('multi-line') && isSingleLineString(ruleNode.toString())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = expectation.includes('always');\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-rule') && isAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block-and-after-rule') &&\n\t\t\t\t\tisNested &&\n\t\t\t\t\tisAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-single-line-comment') &&\n\t\t\t\t\tisAfterSingleLineComment(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested)\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(ruleNode.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tconst newline = context.newline;\n\n\t\t\t\tif (typeof newline !== 'string') {\n\t\t\t\t\tthrow new Error(`The \"newline\" property must be a string: ${newline}`);\n\t\t\t\t}\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(ruleNode, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(ruleNode, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: ruleNode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {boolean}\n */\nfunction isAfterRule(ruleNode) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(ruleNode);\n\n\treturn prevNode != null && prevNode.type === 'rule';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction isAfterSingleLineComment(node) {\n\tconst prevNode = node.prev();\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tprevNode.type === 'comment' &&\n\t\t!isSharedLineComment(prevNode) &&\n\t\tprevNode.source &&\n\t\tprevNode.source.start &&\n\t\tprevNode.source.end &&\n\t\tprevNode.source.start.line === prevNode.source.end.line\n\t);\n}\n\nmodule.exports = isAfterSingleLineComment;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-first-line';\nconst noEmptyFirstLineTest = /^\\s*[\\r\\n]/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-empty-first-line',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'. Property 'lang' does not exist on type 'Source'.\n\t\tif (!validOptions || root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (!rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (noEmptyFirstLineTest.test(rootString)) {\n\t\t\tif (context.fix) {\n\t\t\t\tif (root.first == null) {\n\t\t\t\t\tthrow new Error('The root node must have the first node.');\n\t\t\t\t}\n\n\t\t\t\tif (root.first.raws.before == null) {\n\t\t\t\t\tthrow new Error('The first node must have spaces before.');\n\t\t\t\t}\n\n\t\t\t\troot.first.raws.before = root.first.raws.before.trimStart();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\t\tif (!operator || (operator && !primaryValues.includes(operator))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   checkBeforeOperator: boolean,\n *   fix: ((attributeNode: import('postcss-selector-parser').Attribute) => boolean) | null,\n * }} options\n * @returns {void}\n */\nmodule.exports = function selectorAttributeOperatorSpaceChecker(options) {\n\toptions.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, options.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\tif (!operator) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst attributeNodeString = attributeNode.toString();\n\n\t\t\t\tstyleSearch({ source: attributeNodeString, target: operator }, (match) => {\n\t\t\t\t\tconst index = options.checkBeforeOperator ? match.startIndex : match.endIndex - 1;\n\n\t\t\t\t\tcheckOperator(attributeNodeString, index, rule, attributeNode, operator);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction checkOperator(source, index, node, attributeNode, operator) {\n\t\t\toptions.locationChecker({\n\t\t\t\tsource,\n\t\t\t\tindex,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (options.fix && options.fix(attributeNode)) {\n\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg.replace(\n\t\t\t\t\t\t\toptions.checkBeforeOperator\n\t\t\t\t\t\t\t\t? operator.charAt(0)\n\t\t\t\t\t\t\t\t: operator.charAt(operator.length - 1),\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + index,\n\t\t\t\t\t\tresult: options.result,\n\t\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\"`,\n\trejectedBefore: (operator) => `Unexpected whitespace before \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: true,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\tconst rawAttr = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\t\t\t\t\tconst rawAttrAfter = rawAttr && rawAttr.after;\n\n\t\t\t\t\t\t/** @type {{ attrAfter: string, setAttrAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { attrAfter, setAttrAfter } = rawAttrAfter\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tattrAfter: rawAttrAfter,\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawAttr.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\tattrAfter:\n\t\t\t\t\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.after) || '',\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.spaces.attribute.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  };\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\nmodule.exports = function (node) {\n\t// if it's not a combinator, then it's not a standard combinator\n\tif (node.type !== 'combinator') {\n\t\treturn false;\n\t}\n\n\t// Ignore reference combinators like `/deep/`\n\tif (node.value.startsWith('/') || node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\t// ignore the combinators that are the first or last node in their container\n\tif (node.parent !== undefined && node.parent !== null) {\n\t\tconst parent = node.parent;\n\n\t\tif (node === parent.first) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node === parent.last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = normalizeCombinator(combinatorNode.value);\n\n\t\t\t\t\tif (primary.includes(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeName = attributeNode.qualifiedAttribute;\n\n\t\t\t\t\tif (!matchesStringOrRegExp(attributeName, primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(attributeName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('attribute'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\"`,\n\trejectedAfter: (operator) => `Unexpected whitespace after \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst checker = whitespaceChecker('space', primary, messages);\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: false,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\t/** @type {{ operatorAfter: string, setOperatorAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { operatorAfter, setOperatorAfter } = (() => {\n\t\t\t\t\t\t\tconst rawOperator = attributeNode.raws.operator;\n\n\t\t\t\t\t\t\tif (rawOperator) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperator.slice(\n\t\t\t\t\t\t\t\t\t\tattributeNode.operator ? attributeNode.operator.length : 0,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tdelete attributeNode.raws.operator;\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces) attributeNode.raws.spaces = {};\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces.operator)\n\t\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rawSpacesOperator =\n\t\t\t\t\t\t\t\tattributeNode.raws.spaces && attributeNode.raws.spaces.operator;\n\t\t\t\t\t\t\tconst rawOperatorAfter = rawSpacesOperator && rawSpacesOperator.after;\n\n\t\t\t\t\t\t\tif (rawOperatorAfter) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawSpacesOperator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperatorAfter:\n\t\t\t\t\t\t\t\t\t(attributeNode.spaces.operator && attributeNode.spaces.operator.after) || '',\n\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.operator) attributeNode.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\tattributeNode.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\t\tif (!operator || (operator && primaryValues.includes(operator))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getRuleSelector = require('../../utils/getRuleSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (value) => `Expected quotes around \"${value}\"`,\n\trejected: (value) => `Unexpected quotes around \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-quotes',\n};\n\nconst acceptedQuoteMark = '\"';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(getRuleSelector(ruleNode), result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.operator) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!attributeNode.quoted && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = acceptedQuoteMark;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expected(attributeNode.value),\n\t\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoted && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.rejected(attributeNode.value),\n\t\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {string}\n */\nmodule.exports = function getRuleSelector(ruleNode) {\n\tconst raws = ruleNode.raws;\n\n\treturn (raws.selector && raws.selector.raw) || ruleNode.selector;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\n\n/**\n * @typedef {(args: { source: string, index: number, errTarget: string, err: (message: string) => void }) => void} LocationChecker\n *\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: LocationChecker,\n *   locationType: 'before' | 'after',\n *   checkedRuleName: string,\n *   fix: ((combinator: import('postcss-selector-parser').Combinator) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorCombinatorSpaceChecker(opts) {\n\tlet hasFixed;\n\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\thasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, opts.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkCombinators((node) => {\n\t\t\t\t// Ignore non-standard combinators\n\t\t\t\tif (!isStandardSyntaxCombinator(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore spaced descendant combinator\n\t\t\t\tif (/\\s/.test(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check the exist of node in prev of the combinator.\n\t\t\t\t// in case some that aren't the first begin with combinators (nesting syntax)\n\t\t\t\tif (opts.locationType === 'before' && !node.prev()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parentParentNode = node.parent && node.parent.parent;\n\n\t\t\t\t// Ignore pseudo-classes selector like `.foo:nth-child(2n + 1) {}`\n\t\t\t\tif (parentParentNode && parentParentNode.type === 'pseudo') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\t\t\t\tconst index =\n\t\t\t\t\tnode.value.length > 1 && opts.locationType === 'before'\n\t\t\t\t\t\t? sourceIndex\n\t\t\t\t\t\t: sourceIndex + node.value.length - 1;\n\n\t\t\t\tcheck(selector, node, index, rule, sourceIndex);\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {import('postcss-selector-parser').Combinator} combinator\n\t * @param {number} index\n\t * @param {import('postcss').Node} node\n\t * @param {number} sourceIndex\n\t */\n\tfunction check(source, combinator, index, node, sourceIndex) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terrTarget: combinator.value,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(combinator)) {\n\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (combinator) => `Expected single space before \"${combinator}\"`,\n\trejectedBefore: (combinator) => `Unexpected whitespace before \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tlocationType: 'before',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.before = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.before = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = normalizeCombinator(combinatorNode.value);\n\n\t\t\t\t\tif (!primary.includes(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-id-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selectorValue, pattern) =>\n\t\t`Expected ID selector \"#${selectorValue}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-id-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {RegExp} */\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walk((selectorNode) => {\n\t\t\t\t\tif (selectorNode.type !== 'id') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = selectorNode.value;\n\t\t\t\t\tconst sourceIndex = selectorNode.sourceIndex;\n\n\t\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {unknown} value\n */\nmodule.exports = function isNonNegativeInteger(value) {\n\treturn Number.isInteger(value) && typeof value === 'number' && value >= 0;\n};\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-combinators';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${\n\t\t\tmax === 1 ? 'combinator' : 'combinators'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-combinators',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'combinator') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'number-max-precision';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-max-precision',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = 'prop' in node ? node.prop : undefined;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\d*\\.(\\d+)/.exec(valueNode.value);\n\n\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (match[1].length <= primary) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex =\n\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\t\t\t\tconst actual = Number.parseFloat(match[0]);\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: baseIndex + valueNode.sourceIndex + match.index,\n\t\t\t\t\tmessage: messages.expected(actual, actual.toFixed(primary)),\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get raw selector so we can allow end-of-line comments, e.g.\n\t\t\t// a, /* comment */\n\t\t\t// b {}\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixIndices = [];\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: selector,\n\t\t\t\t\ttarget: ',',\n\t\t\t\t\tfunctionArguments: 'skip',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst nextChars = selector.slice(match.endIndex);\n\n\t\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t\t// ending the comment so we're fine\n\t\t\t\t\tif (/^\\s+\\/\\//.test(nextChars)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\t\tconst indextoCheckAfter = /^\\s+\\/\\*/.test(nextChars)\n\t\t\t\t\t\t? selector.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t\t: match.startIndex;\n\n\t\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\t\tsource: selector,\n\t\t\t\t\t\tindex: indextoCheckAfter,\n\t\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tfixIndices.push(indextoCheckAfter + 1);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: match.startIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixIndices.length) {\n\t\t\t\tlet fixedSelector = selector;\n\n\t\t\t\tfor (const index of fixIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = fixedSelector.slice(0, index);\n\t\t\t\t\tlet afterSelector = fixedSelector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = context.newline + afterSelector;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tfixedSelector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (combinator) => `Expected single space after \"${combinator}\"`,\n\trejectedAfter: (combinator) => `Unexpected whitespace after \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tlocationType: 'after',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.after = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.after = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Node} node - postcss-selector-parser node (of type pseudo)\n * @return {node is import('postcss-selector-parser').Pseudo} If `true`, the node is a context-functional pseudo-class\n */\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n\tif (node.type === 'pseudo') {\n\t\tconst normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n\n\t\treturn (\n\t\t\tkeywordSets.logicalCombinationsPseudoClasses.has(normalisedParentName) ||\n\t\t\tkeywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName)\n\t\t);\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} compound ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-compound-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Finds actual selectors in selectorNode object and checks them.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tlet compoundCount = 1;\n\n\t\t\tselectorNode.each((childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Compound selectors are separated by combinators, so increase count when meeting one\n\t\t\t\tif (childNode.type === 'combinator') {\n\t\t\t\t\tcompoundCount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tselectorNode.type !== 'root' &&\n\t\t\t\tselectorNode.type !== 'pseudo' &&\n\t\t\t\tcompoundCount > primary\n\t\t\t) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector if there is a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Process each resolved selector with `checkSelector` via postcss-selector-parser\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix: ((rule: import('postcss').Rule, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorListCommaWhitespaceChecker(opts) {\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: selector,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckDelimiter(selector, match.startIndex, rule);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Rule} node\n\t */\n\tfunction checkDelimiter(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst spaceIndex = beforeSelector.search(/\\s+$/);\n\n\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\tbeforeSelector =\n\t\t\t\t\t\t\t\tbeforeSelector.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\tbeforeSelector.slice(spaceIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbeforeSelector += context.newline;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'never-multi-line') {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-pseudo-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} pseudo-${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-pseudo-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Exclude pseudo elements from the count\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'pseudo' &&\n\t\t\t\t\t(childNode.value.includes('::') ||\n\t\t\t\t\t\tkeywordSets.levelOneAndTwoPseudoElements.has(childNode.value.toLowerCase().slice(1)))\n\t\t\t\t) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'pseudo') {\n\t\t\t\t\ttotal += 1;\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\tcheckSelector(selectorTree, ruleNode);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-attribute';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} attribute ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-attribute',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAttributes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type !== 'attribute') {\n\t\t\t\t\t// Not an attribute node -> ignore\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAttributes', childNode.attribute)) {\n\t\t\t\t\t// it's an attribute that is supposed to be ignored\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\ttotal += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = selector.slice(0, index + 1);\n\t\t\t\t\tlet afterSelector = selector.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *  @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t *  @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'class') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-nested-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) =>\n\t\t`Expected nested selector \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-nested-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (ruleNode.parent && ruleNode.parent.type !== 'rule') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (normalizedPattern.test(selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a string is a keyframe selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\tif (keywordSets.keyframeSelectorKeywords.has(selector)) {\n\t\treturn true;\n\t}\n\n\t// Percentages\n\tif (/^(?:\\d+|\\d*\\.\\d+)%$/.test(selector)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolveNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-class-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selectorValue, pattern) =>\n\t\t`Expected class selector \".${selectorValue}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-class-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isRegExp, isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tresolveNestedSelectors: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {boolean} */\n\t\tconst shouldResolveNestedSelectors =\n\t\t\tsecondaryOptions && secondaryOptions.resolveNestedSelectors;\n\t\t/** @type {RegExp} */\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only bother resolving selectors that have an interpolating &\n\t\t\tif (shouldResolveNestedSelectors && hasInterpolatingAmpersand(selector)) {\n\t\t\t\tfor (const nestedSelector of resolveNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(nestedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(nestedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparseSelector(selector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} fullSelector\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(fullSelector, ruleNode) {\n\t\t\tfullSelector.walkClasses((classNode) => {\n\t\t\t\tconst value = classNode.value;\n\t\t\t\tconst sourceIndex = classNode.sourceIndex;\n\n\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * An \"interpolating ampersand\" means an \"&\" used to interpolate\n * within another simple selector, rather than an \"&\" that\n * stands on its own as a simple selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nfunction hasInterpolatingAmpersand(selector) {\n\tfor (const [i, char] of Array.from(selector).entries()) {\n\t\tif (char !== '&') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst prevChar = selector.charAt(i - 1);\n\n\t\tif (prevChar && !isCombinator(prevChar)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst nextChar = selector.charAt(i + 1);\n\n\t\tif (nextChar && !isCombinator(nextChar)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} x\n * @returns {boolean}\n */\nfunction isCombinator(x) {\n\treturn /[\\s+>~]/.test(x);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected vendor-prefix \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\t//return early if property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', unprefixedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure there's a vendor prefix,\n\t\t\t// but this isn't a custom property\n\n\t\t\tif (prop[0] !== '-' || prop[1] === '-') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.property(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = isAutoprefixable.unprefix(decl.prop);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newSelectorString = selector\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = newSelectorString;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = newSelectorString;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tviolatedLFNewLinesRegex.test(selector) ||\n\t\t\t\tviolatedCRLFNewLinesRegex.test(selector)\n\t\t\t) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a type selector is standard\n *\n * @param {import('postcss-selector-parser').Tag} node postcss-selector-parser node (of type tag)\n * @return {boolean} If `true`, the type selector is standard\n */\nmodule.exports = function (node) {\n\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t// as \"tags\", so we need to ignore them ourselves.\n\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t// should be the :nth-child pseudo node.\n\tif (!node.parent || !node.parent.parent) {\n\t\treturn false;\n\t}\n\n\tconst _node$parent$parent = node.parent.parent;\n\tconst parentType = _node$parent$parent.type;\n\tconst parentValue = _node$parent$parent.value;\n\n\tif (parentValue) {\n\t\tconst normalisedParentName = parentValue.toLowerCase().replace(/:+/, '');\n\n\t\tif (\n\t\t\tparentType === 'pseudo' &&\n\t\t\t(keywordSets.aNPlusBNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.linguisticPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.shadowTreePseudoElements.has(normalisedParentName))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// &-bar is a nesting selector combined with a suffix\n\tif (node.prev() && node.prev().type === 'nesting') {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// Reference combinators like `/deep/`\n\tif (node.value.startsWith('/') && node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-type';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} type ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-type',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDescendant = optionsMatches(secondaryOptions, 'ignore', 'descendant');\n\t\tconst ignoreChild = optionsMatches(secondaryOptions, 'ignore', 'child');\n\t\tconst ignoreCompounded = optionsMatches(secondaryOptions, 'ignore', 'compounded');\n\t\tconst ignoreNextSibling = optionsMatches(secondaryOptions, 'ignore', 'next-sibling');\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', childNode.value)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreChild && hasChildCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreCompounded && hasCompoundSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\treturn childNode.type === 'tag' ? total + 1 : total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-selector-parser').Node} SelectorNode */\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasDescendantCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isDescendantCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasChildCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isChildCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasCompoundSelector(node) {\n\tif (node.prev() && !isCombinator(node.prev())) {\n\t\treturn true;\n\t}\n\n\treturn node.next() && !isCombinator(node.next());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasNextSiblingCombinator(node) {\n\treturn node.prev() && isNextSiblingCombinator(node.prev());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isCombinator(node) {\n\tif (!node) return false;\n\n\treturn node.type === 'combinator';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isDescendantCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && isString(node.value) && isOnlyWhitespace(node.value);\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isChildCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && node.value === '>';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isNextSiblingCombinator(node) {\n\treturn isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected qualifying type selector',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-no-qualifying-type',\n};\n\nconst selectorCharacters = ['#', '.', '['];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isSelectorCharacters(value) {\n\treturn selectorCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {import('postcss-selector-parser').Tag} node\n * @returns {Array<import('postcss-selector-parser').Node>}\n */\nfunction getRightNodes(node) {\n\tconst result = [];\n\n\t/** @type {import('postcss-selector-parser').Node} */\n\tlet rightNode = node;\n\n\twhile ((rightNode = rightNode.next())) {\n\t\tif (rightNode.type === 'combinator') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(rightNode);\n\t}\n\n\treturn result;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [true, false],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['attribute', 'class', 'id'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isSelectorCharacters(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-selector-parser').Root} selectorAST\n\t\t\t */\n\t\t\tfunction checkSelector(selectorAST) {\n\t\t\t\tselectorAST.walkTags((selector) => {\n\t\t\t\t\tconst selectorParent = selector.parent;\n\n\t\t\t\t\tif (selectorParent && selectorParent.nodes.length === 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectorNodes = getRightNodes(selector);\n\t\t\t\t\tconst index = selector.sourceIndex;\n\n\t\t\t\t\tfor (const selectorNode of selectorNodes) {\n\t\t\t\t\t\tif (selectorNode.type === 'id' && !optionsMatches(secondaryOptions, 'ignore', 'id')) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselectorNode.type === 'class' &&\n\t\t\t\t\t\t\t!optionsMatches(secondaryOptions, 'ignore', 'class')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselectorNode.type === 'attribute' &&\n\t\t\t\t\t\t\t!optionsMatches(secondaryOptions, 'ignore', 'attribute')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const resolvedSelector of resolvedNestedSelector(ruleNode.selector, ruleNode)) {\n\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, checkSelector);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(index) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!matchesStringOrRegExp(selector, primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\tnode: ruleNode,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-id';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-id',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreContextFunctionalPseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'selector' ||\n\t\t\t\t\t(isContextFunctionalPseudoClass(childNode) &&\n\t\t\t\t\t\t!isIgnoredContextFunctionalPseudoClass(childNode))\n\t\t\t\t) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'id') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredContextFunctionalPseudoClass(node) {\n\t\t\treturn (\n\t\t\t\tnode.type === 'pseudo' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreContextFunctionalPseudoClasses', node.value)\n\t\t\t);\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorParser = require('postcss-selector-parser');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-universal';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} universal ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-universal',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\t// All logical combinations will be resolved as nested selector in `postcss-resolve-nested-selector`\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'universal') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectors = [];\n\n\t\t\tselectorParser()\n\t\t\t\t.astSync(ruleNode.selector)\n\t\t\t\t.walk((node) => {\n\t\t\t\t\tif (node.type === 'selector') {\n\t\t\t\t\t\tselectors.push(String(node).trim());\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tfor (const selector of selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomSelector = require('../../utils/isCustomSelector');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-class selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoClasses: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t * @param {import('postcss').ChildNode} node\n\t\t */\n\t\tfunction check(selector, node) {\n\t\t\tparseSelector(selector, result, node, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isCustomSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet index = null;\n\t\t\t\t\tconst name = value.slice(1).toLowerCase();\n\n\t\t\t\t\tif (node.type === 'atrule' && node.name === 'page') {\n\t\t\t\t\t\tif (keywordSets.atRulePagePseudoClasses.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvendor.prefix(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoClasses.has(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoElements.has(name)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {import('postcss-selector-parser').Base} */\n\t\t\t\t\t\tlet prevPseudoElement = pseudoNode;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevPseudoElement = /** @type {import('postcss-selector-parser').Base} */ (\n\t\t\t\t\t\t\t\tprevPseudoElement.prev()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (prevPseudoElement);\n\n\t\t\t\t\t\tif (prevPseudoElement) {\n\t\t\t\t\t\t\tconst prevPseudoElementValue = prevPseudoElement.value.toLowerCase().slice(2);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tkeywordSets.webkitScrollbarPseudoElements.has(prevPseudoElementValue) &&\n\t\t\t\t\t\t\t\tkeywordSets.webkitScrollbarPseudoClasses.has(name)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = pseudoNode.sourceIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tlet selector = null;\n\n\t\t\tif (node.type === 'rule') {\n\t\t\t\tif (!isStandardSyntaxRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.selector;\n\t\t\t} else if (node.type === 'atrule' && node.name === 'page' && node.params) {\n\t\t\t\tif (!isStandardSyntaxAtRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.params;\n\t\t\t}\n\n\t\t\t// Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\t\t\tif (!selector) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(selector, node);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a selector is a custom one\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\treturn selector.startsWith(':--');\n};\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected vendor-prefix \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (isAutoprefixable.selector(pseudoNode.value)) {\n\t\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', pseudoNode.value)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\truleNode.selector = isAutoprefixable.unprefix(ruleNode.selector);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(pseudoNode.value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: (ruleNode.raws.before || '').length + pseudoNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst {\n\tisPseudoClass,\n\tisAttribute,\n\tisClassName,\n\tisUniversal,\n\tisIdentifier,\n\tisTag,\n} = require('postcss-selector-parser');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-not-notation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} :not() pseudo-class notation`,\n});\nconst meta = { url: 'https://stylelint.io/user-guide/rules/list/selector-not-notation' };\n\n/** @typedef {import('postcss-selector-parser').Node} Node */\n/** @typedef {import('postcss-selector-parser').Selector} Selector */\n/** @typedef {import('postcss-selector-parser').Pseudo} Pseudo */\n\n/**\n * @param {Node} node\n * @returns {boolean}\n */\nconst isSimpleSelector = (node) =>\n\tisPseudoClass(node) ||\n\tisAttribute(node) ||\n\tisClassName(node) ||\n\tisUniversal(node) ||\n\tisIdentifier(node) ||\n\tisTag(node);\n\n/**\n * @param {Node} node\n * @returns {node is Pseudo}\n */\nconst isNot = (node) =>\n\tisPseudoClass(node) && node.value !== undefined && node.value.toLowerCase() === ':not';\n\n/**\n * @param {Selector[]} list\n * @returns {boolean}\n */\nconst isSimple = (list) => {\n\tif (list.length > 1) return false;\n\n\tassert(list[0], 'list is never empty');\n\tconst [first, second] = list[0].nodes;\n\n\tif (!first) return true;\n\n\tif (second) return false;\n\n\treturn isSimpleSelector(first) && !isNot(first);\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['simple', 'complex'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) return;\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':not(')) return;\n\n\t\t\tif (!isStandardSyntaxSelector(selector)) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (container) => {\n\t\t\t\tcontainer.walkPseudos((pseudo) => {\n\t\t\t\t\tif (!isNot(pseudo)) return;\n\n\t\t\t\t\tif (primary === 'complex') {\n\t\t\t\t\t\tconst prev = pseudo.prev();\n\t\t\t\t\t\tconst hasConsecutiveNot = prev && isNot(prev);\n\n\t\t\t\t\t\tif (!hasConsecutiveNot) return;\n\n\t\t\t\t\t\tif (context.fix) return fixComplex(prev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst selectors = pseudo.nodes;\n\n\t\t\t\t\t\tif (isSimple(selectors)) return;\n\n\t\t\t\t\t\tconst mustFix =\n\t\t\t\t\t\t\tcontext.fix &&\n\t\t\t\t\t\t\tselectors.length > 1 &&\n\t\t\t\t\t\t\tselectors[1] &&\n\t\t\t\t\t\t\t(selectors[1].nodes.length === 0 ||\n\t\t\t\t\t\t\t\tselectors.every(({ nodes }) => nodes.length === 1));\n\n\t\t\t\t\t\tif (mustFix) return fixSimple(pseudo);\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {Pseudo} not\n */\nfunction fixSimple(not) {\n\tconst simpleSelectors = not.nodes\n\t\t.filter(({ nodes }) => nodes[0] && isSimpleSelector(nodes[0]))\n\t\t.map((s) => {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = '';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\n\t\t\treturn s;\n\t\t});\n\tconst firstSelector = simpleSelectors.shift();\n\n\tassert(firstSelector);\n\tassert(not.parent);\n\n\tnot.empty();\n\tnot.nodes.push(firstSelector);\n\n\tfor (const s of simpleSelectors) {\n\t\tconst last = not.parent.last;\n\n\t\tnot.parent.insertAfter(last, last.clone({ nodes: [s] }));\n\t}\n}\n\n/**\n * @param {Pseudo} previousNot\n */\nfunction fixComplex(previousNot) {\n\tconst indentAndTrimRight = (/** @type {Selector[]} */ selectors) => {\n\t\tfor (const s of selectors) {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = ' ';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\t\t}\n\t};\n\tconst [head, ...tail] = previousNot.nodes;\n\tlet node = previousNot.next();\n\n\tif (head == null || head.nodes.length === 0) return;\n\n\tassert(head.nodes[0]);\n\thead.nodes[0].rawSpaceBefore = '';\n\thead.nodes[0].rawSpaceAfter = '';\n\tindentAndTrimRight(tail);\n\n\twhile (isNot(node)) {\n\t\tconst selectors = node.nodes;\n\t\tconst prev = node;\n\n\t\tindentAndTrimRight(selectors);\n\t\tpreviousNot.nodes = previousNot.nodes.concat(selectors);\n\t\tnode = node.next();\n\t\tprev.remove();\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity, compare } = require('@csstools/selector-specificity');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assertNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) => `Expected \"${selector}\" to have a specificity no more than \"${max}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-specificity',\n};\n\n/** @typedef {import('@csstools/selector-specificity').Specificity} Specificity */\n\n/**\n * Return a zero specificity. We need a new instance each time so that it can mutated.\n *\n * @returns {Specificity}\n */\nconst zeroSpecificity = () => ({ a: 0, b: 0, c: 0 });\n\n/**\n * Calculate the sum of given specificiies.\n *\n * @param {Specificity[]} specificities\n * @returns {Specificity}\n */\nconst specificitySum = (specificities) => {\n\tconst sum = zeroSpecificity();\n\n\tfor (const { a, b, c } of specificities) {\n\t\tsum.a += a;\n\t\tsum.b += b;\n\t\tsum.c += c;\n\t}\n\n\treturn sum;\n};\n\n/** @type {import('stylelint').Rule<string>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t// Check that the max specificity is in the form \"a,b,c\"\n\t\t\t\t\t(spec) => isString(spec) && /^\\d+,\\d+,\\d+$/.test(spec),\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Calculate the specificity of a simple selector (type, attribute, class, ID, or pseudos's own value).\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst simpleSpecificity = (node) => {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', node.toString())) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\treturn selectorSpecificity(node);\n\t\t};\n\n\t\t/**\n\t\t * Calculate the the specificity of the most specific direct child.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst maxChildSpecificity = (node) =>\n\t\t\tnode.reduce((maxSpec, child) => {\n\t\t\t\tconst childSpecificity = nodeSpecificity(child); // eslint-disable-line no-use-before-define\n\n\t\t\t\treturn compare(childSpecificity, maxSpec) > 0 ? childSpecificity : maxSpec;\n\t\t\t}, zeroSpecificity());\n\n\t\t/**\n\t\t * Calculate the specificity of a pseudo selector including own value and children.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Pseudo} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst pseudoSpecificity = (node) => {\n\t\t\t// `node.toString()` includes children which should be processed separately,\n\t\t\t// so use `node.value` instead\n\t\t\tconst ownValue = node.value.toLowerCase();\n\n\t\t\tif (ownValue === ':where') {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tlet ownSpecificity;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', ownValue)) {\n\t\t\t\townSpecificity = zeroSpecificity();\n\t\t\t} else if (keywordSets.aNPlusBOfSNotationPseudoClasses.has(ownValue.replace(/^:/, ''))) {\n\t\t\t\t// TODO: We need to support `<complex-selector-list>` in `ignoreSelectors`. E.g. `:nth-child(even of .foo)`.\n\t\t\t\treturn selectorSpecificity(node);\n\t\t\t} else {\n\t\t\t\townSpecificity = selectorSpecificity(node.clone({ nodes: [] }));\n\t\t\t}\n\n\t\t\treturn specificitySum([ownSpecificity, maxChildSpecificity(node)]);\n\t\t};\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tconst shouldSkipPseudoClassArgument = (node) => {\n\t\t\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t\t\t// as \"tags\", so we need to ignore them ourselves.\n\t\t\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t\t\t// should be the :nth-child pseudo node.\n\t\t\tconst parentNode = node.parent && node.parent.parent;\n\n\t\t\tif (parentNode && parentNode.type === 'pseudo' && parentNode.value) {\n\t\t\t\tconst pseudoClass = parentNode.value.toLowerCase().replace(/^:/, '');\n\n\t\t\t\treturn (\n\t\t\t\t\tkeywordSets.aNPlusBNotationPseudoClasses.has(pseudoClass) ||\n\t\t\t\t\tkeywordSets.linguisticPseudoClasses.has(pseudoClass)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of a node parsed by `postcss-selector-parser`.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst nodeSpecificity = (node) => {\n\t\t\tif (shouldSkipPseudoClassArgument(node)) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'attribute':\n\t\t\t\tcase 'class':\n\t\t\t\tcase 'id':\n\t\t\t\tcase 'tag':\n\t\t\t\t\treturn simpleSpecificity(node);\n\t\t\t\tcase 'pseudo':\n\t\t\t\t\treturn pseudoSpecificity(node);\n\t\t\t\tcase 'selector':\n\t\t\t\t\t// Calculate the sum of all the direct children\n\t\t\t\t\treturn specificitySum(node.map((n) => nodeSpecificity(n)));\n\t\t\t\tdefault:\n\t\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\t\t};\n\n\t\tconst [a, b, c] = primary.split(',').map((s) => Number.parseFloat(s));\n\n\t\tassertNumber(a);\n\t\tassertNumber(b);\n\t\tassertNumber(c);\n\n\t\tconst maxSpecificity = { a, b, c };\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector in the eventuality we have a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Skip non-standard syntax selectors\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\t// Check if the selector specificity exceeds the allowed maximum\n\t\t\t\t\t\tif (compare(maxChildSpecificity(selectorTree), maxSpecificity) > 0) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tmessage: messages.expected(resolvedSelector, primary),\n\t\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomElement = require('../../utils/isCustomElement');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst mathMLTags = require('mathml-tag-names');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst svgTags = require('svg-tags');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-type-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-type-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-elements', 'default-namespace'],\n\t\t\t\t\tignoreNamespaces: [isString, isRegExp],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'custom-elements') &&\n\t\t\t\t\t\tisCustomElement(tagNode.value)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'default-namespace') &&\n\t\t\t\t\t\t!(typeof tagNode.namespace === 'string')\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreNamespaces', tagNode.namespace)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tagNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tagName = tagNode.value;\n\t\t\t\t\tconst tagNameLowerCase = tagName.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tkeywordSets.standardHtmlTags.has(tagNameLowerCase) ||\n\t\t\t\t\t\t// SVG tags are case-sensitive\n\t\t\t\t\t\tsvgTags.includes(tagName) ||\n\t\t\t\t\t\tkeywordSets.nonStandardHtmlTags.has(tagNameLowerCase) ||\n\t\t\t\t\t\tmathMLTags.includes(tagNameLowerCase)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(tagName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: tagNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: tagName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\nconst mathMLTags = require('mathml-tag-names');\nconst svgTags = require('svg-tags');\n\n/**\n * Check whether a type selector is a custom element\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\tif (!/^[a-z]/.test(selector)) {\n\t\treturn false;\n\t}\n\n\tif (!selector.includes('-')) {\n\t\treturn false;\n\t}\n\n\tconst selectorLowerCase = selector.toLowerCase();\n\n\tif (selectorLowerCase !== selector) {\n\t\treturn false;\n\t}\n\n\tif (svgTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.standardHtmlTags.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.nonStandardHtmlTags.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (mathMLTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransformSelector(result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst pseudoElement = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(pseudoElement)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!pseudoElement.includes('::') &&\n\t\t\t\t\t\t!keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst expectedPseudoElement =\n\t\t\t\t\t\tprimary === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n\t\t\t\t\tif (pseudoElement === expectedPseudoElement) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudoNode.value = expectedPseudoElement;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(pseudoElement, expectedPseudoElement),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Rule} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function transformSelector(result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(node, { updateSelector: true });\n\t} catch {\n\t\tresult.warn('Cannot parse selector', { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-colon-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} colon pseudo-element notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-colon-notation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['single', 'double'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixedColon = '';\n\n\t\tif (primary === 'single') {\n\t\t\tfixedColon = ':';\n\t\t} else if (primary === 'double') {\n\t\t\tfixedColon = '::';\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// get out early if no pseudo elements or classes\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectors) => {\n\t\t\t\tselectors.walkPseudos((pseudo) => {\n\t\t\t\t\tconst pseudoElement = pseudo.value.replace(/:/g, '');\n\n\t\t\t\t\tif (!keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isDouble = pseudo.value.startsWith('::');\n\n\t\t\t\t\tif (primary === 'single' && !isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'double' && isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudo.replaceWith(pseudo.clone({ value: fixedColon + pseudoElement }));\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst keywordSets = require('../../reference/keywordSets');\n\nconst ruleName = 'selector-type-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-type-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreTypes: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tlet hasComments = ruleNode.raws.selector && ruleNode.raws.selector.raw;\n\t\t\tconst selector = hasComments ? hasComments : ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorAST) => {\n\t\t\t\tselectorAST.walkTags((tag) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tag)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keywordSets.validMixedCaseSvgElements.has(tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sourceIndex = tag.sourceIndex;\n\t\t\t\t\tconst value = tag.value;\n\n\t\t\t\t\tconst expectedValue = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\t\tif (value === expectedValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\thasComments.slice(sourceIndex + value.length);\n\n\t\t\t\t\t\t\tif (ruleNode.raws.selector == null) {\n\t\t\t\t\t\t\t\tthrow new Error('The `raw` property must be present');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\truleNode.raws.selector.raw = hasComments;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\truleNode.selector =\n\t\t\t\t\t\t\t\truleNode.selector.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\truleNode.selector.slice(sourceIndex + value.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(value, expectedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (!pseudoNode.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paramString = pseudoNode.map((node) => String(node)).join(',');\n\t\t\t\t\tconst nextCharIsSpace = paramString.startsWith(' ');\n\t\t\t\t\tconst openIndex = pseudoNode.sourceIndex + pseudoNode.value.length + 1;\n\n\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst prevCharIsSpace = paramString.endsWith(' ');\n\t\t\t\t\tconst closeIndex = openIndex + paramString.length - 1;\n\n\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setFirstNodeSpaceBefore(node, value) {\n\tconst target = node.first;\n\n\tif (target.type === 'selector') {\n\t\tsetFirstNodeSpaceBefore(target, value);\n\t} else {\n\t\ttarget.spaces.before = value;\n\t}\n}\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setLastNodeSpaceAfter(node, value) {\n\tconst target = node.last;\n\n\tif (target.type === 'selector') {\n\t\tsetLastNodeSpaceAfter(target, value);\n\t} else {\n\t\ttarget.spaces.after = value;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value[1] !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(\n\t\t\t\truleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector,\n\t\t\t\tresult,\n\t\t\t\truleNode,\n\t\t\t\t(selectorTree) => {\n\t\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\t\tconst pseudo = pseudoNode.value;\n\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(pseudo)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpseudo.includes('::') ||\n\t\t\t\t\t\t\tkeywordSets.levelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expectedPseudo =\n\t\t\t\t\t\t\tprimary === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n\t\t\t\t\t\tif (pseudo === expectedPseudo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tpseudoNode.value = expectedPseudo;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(pseudo, expectedPseudo),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'function') {\n\t\t\t\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t\tif (valueLowerCase === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit || (unit && primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t'prop' in node &&\n\t\t\t\t\tsecondaryOptions &&\n\t\t\t\t\toptionsMatches(secondaryOptions.ignoreProperties, unit.toLowerCase(), node.prop)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => check(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /\\r?\\n/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected newline in string',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/string-no-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxSelector(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst match = reNewLine.exec(attributeNode.value || '');\n\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = [\n\t\t\t\t\t\t// length of our attribute\n\t\t\t\t\t\tattributeNode.attribute,\n\t\t\t\t\t\t// length of our operator , ie '='\n\t\t\t\t\t\tattributeNode.operator || '',\n\t\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\t\tmatch.input.slice(0, match.index),\n\t\t\t\t\t].reduce(\n\t\t\t\t\t\t(index, str) => index + str.length,\n\t\t\t\t\t\t// index of the start of our attribute node in our source\n\t\t\t\t\t\t// plus 1 for the opening quotation mark\n\t\t\t\t\t\tattributeNode.sourceIndex + 1,\n\t\t\t\t\t);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: openIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = reNewLine.exec(valueNode.value);\n\n\t\t\t\tif (!match) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst openIndex = [\n\t\t\t\t\t// length of the quote\n\t\t\t\t\tvalueNode.quote,\n\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\tmatch.input.slice(0, match.index),\n\t\t\t\t].reduce((index, str) => index + str.length, valueNode.sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value[1] !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'unicode-bom';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected Unicode BOM',\n\trejected: 'Unexpected Unicode BOM',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unicode-bom',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (\n\t\t\t!validOptions ||\n\t\t\t!root.source ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\t\troot.source.inline ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'lang' does not exist on type 'Source'.\n\t\t\troot.source.lang === 'object-literal' ||\n\t\t\t// Ignore HTML documents\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\troot.document !== undefined\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { hasBOM } = root.source.input;\n\n\t\tif (primary === 'always' && !hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (primary === 'never' && hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.includes('always')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.includes('never')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-disallowed-list',\n};\n\n/**\n * a function to retrieve only the media feature name\n * could be externalized in an utils function if needed in other code\n *\n * @param {import('postcss-media-query-parser').Child} mediaFeatureNode\n * @returns {string | undefined}\n */\nconst getMediaFeatureName = (mediaFeatureNode) => {\n\tconst value = mediaFeatureNode.value.toLowerCase();\n\n\tconst match = /((?:-?\\w*)*)/.exec(value);\n\n\treturn match ? match[1] : undefined;\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t\tignoreMediaFeatureNames: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t * @param {string | undefined} input\n\t\t * @param {Record<string, unknown>} options\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode, input, options) {\n\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t// There is not unit or it is not configured as a problem\n\t\t\tif (!unit || (unit && !primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The unit has an ignore option for the specific input\n\t\t\tif (optionsMatches(options, unit.toLowerCase(), input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: nodeIndex + valueNode.sourceIndex,\n\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkMedia(node, value, getIndex) {\n\t\t\tmediaParser(node.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst mediaName = getMediaFeatureName(mediaFeatureNode);\n\t\t\t\tconst parentValue = mediaFeatureNode.parent.value;\n\n\t\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t\t// Ignore all non-word valueNode and\n\t\t\t\t\t// the values not included in the parentValue string\n\t\t\t\t\tif (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcheck(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tgetIndex(node),\n\t\t\t\t\t\tvalueNode,\n\t\t\t\t\t\tmediaName,\n\t\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreMediaFeatureNames : {},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDecl(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcheck(\n\t\t\t\t\tnode,\n\t\t\t\t\tgetIndex(node),\n\t\t\t\t\tvalueNode,\n\t\t\t\t\tnode.prop,\n\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreProperties : {},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => checkMedia(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => checkDecl(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'time-min-milliseconds';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (time) => `Expected a minimum of ${time} milliseconds`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/time-min-milliseconds',\n};\n\nconst DELAY_PROPERTIES = new Set(['animation-delay', 'transition-delay']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['delay'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst minimum = /** @type {number} */ (primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst propertyName = vendor.unprefixed(decl.prop.toLowerCase());\n\n\t\t\tif (\n\t\t\t\tkeywordSets.longhandTimeProperties.has(propertyName) &&\n\t\t\t\t!isIgnoredProperty(propertyName) &&\n\t\t\t\t!isAcceptableTime(decl.value)\n\t\t\t) {\n\t\t\t\tcomplain(decl);\n\t\t\t}\n\n\t\t\tif (keywordSets.shorthandTimeProperties.has(propertyName)) {\n\t\t\t\tconst valueListList = postcss.list.comma(decl.value);\n\n\t\t\t\tfor (const valueListString of valueListList) {\n\t\t\t\t\tconst valueList = postcss.list.space(valueListString);\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'delay')) {\n\t\t\t\t\t\t// Check only duration time values\n\t\t\t\t\t\tconst duration = getDuration(valueList);\n\n\t\t\t\t\t\tif (duration && !isAcceptableTime(duration)) {\n\t\t\t\t\t\t\tcomplain(decl, decl.value.indexOf(duration));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Check all time values\n\t\t\t\t\t\tfor (const value of valueList) {\n\t\t\t\t\t\t\tif (!isAcceptableTime(value)) {\n\t\t\t\t\t\t\t\tcomplain(decl, decl.value.indexOf(value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Get the duration within an `animation` or `transition` shorthand property value.\n\t\t *\n\t\t * @param {string[]} valueList\n\t\t * @returns {string | undefined}\n\t\t */\n\t\tfunction getDuration(valueList) {\n\t\t\tfor (const value of valueList) {\n\t\t\t\tconst parsedTime = valueParser.unit(value);\n\n\t\t\t\tif (!parsedTime) continue;\n\n\t\t\t\t// The first numeric value in an animation shorthand is the duration.\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} propertyName\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredProperty(propertyName) {\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'delay') &&\n\t\t\t\tDELAY_PROPERTIES.has(propertyName)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} time\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isAcceptableTime(time) {\n\t\t\tconst parsedTime = valueParser.unit(time);\n\n\t\t\tif (!parsedTime) return true;\n\n\t\t\tconst numTime = Number(parsedTime.number);\n\n\t\t\tif (numTime <= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst unit = parsedTime.unit.toLowerCase();\n\n\t\t\tif (unit === 'ms' && numTime < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (unit === 's' && numTime * 1000 < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} [offset]\n\t\t * @returns {void}\n\t\t */\n\t\tfunction complain(decl, offset = 0) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(minimum),\n\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\tnode: decl,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unexpected, expected) =>\n\t\t`Unexpected longhand value '${unexpected}' instead of '${expected}'`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/shorthand-property-no-redundant-values',\n};\n\nconst propertiesWithShorthandNotation = new Set([\n\t'margin',\n\t'padding',\n\t'border-color',\n\t'border-radius',\n\t'border-style',\n\t'border-width',\n\t'grid-gap',\n]);\n\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction hasIgnoredCharacters(value) {\n\treturn ignoredCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {string} property\n * @returns {boolean}\n */\nfunction isShorthandProperty(property) {\n\treturn propertiesWithShorthandNotation.has(property);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {string[]}\n */\nfunction canCondense(top, right, bottom, left) {\n\tconst lowerTop = top.toLowerCase();\n\tconst lowerRight = right.toLowerCase();\n\tconst lowerBottom = bottom && bottom.toLowerCase();\n\tconst lowerLeft = left && left.toLowerCase();\n\n\tif (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top];\n\t}\n\n\tif (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right];\n\t}\n\n\tif (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right, bottom];\n\t}\n\n\treturn [top, right, bottom, left];\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToOneValue(top, right, bottom, left) {\n\tif (top !== right) {\n\t\treturn false;\n\t}\n\n\treturn (top === bottom && (bottom === left || !left)) || (!bottom && !left);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n\treturn (top === bottom && right === left) || (top === bottom && !left && top !== right);\n}\n\n/**\n * @param {string} _top\n * @param {string} right\n * @param {string} _bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToThreeValues(_top, right, _bottom, left) {\n\treturn right === left;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n\t\t\tif (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst valuesToShorthand = [];\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvaluesToShorthand.push(valueParser.stringify(valueNode));\n\t\t\t});\n\n\t\t\tif (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst shortestForm = canCondense(\n\t\t\t\tvaluesToShorthand[0] || '',\n\t\t\t\tvaluesToShorthand[1] || '',\n\t\t\t\tvaluesToShorthand[2] || '',\n\t\t\t\tvaluesToShorthand[3] || '',\n\t\t\t);\n\t\t\tconst shortestFormString = shortestForm.filter(Boolean).join(' ');\n\t\t\tconst valuesFormString = valuesToShorthand.join(' ');\n\n\t\t\tif (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.value = decl.value.replace(value, shortestFormString);\n\t\t\t} else {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value, shortestFormString),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} checkedValue\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, checkedValue, getIndex) {\n\t\t\t/** @type {Array<{ index: number, message: string }>} */\n\t\t\tconst problems = [];\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tfunction processValue(valueNode) {\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst expectedUnit = primary === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n\t\t\t\tif (unit === expectedUnit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tproblems.push({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.expected(unit, expectedUnit),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(checkedValue).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tlet needFix = false;\n\t\t\t\tconst value = valueNode.value;\n\n\t\t\t\tif (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (value.includes('*')) {\n\t\t\t\t\tvalue.split('*').some((val) => {\n\t\t\t\t\t\treturn processValue({\n\t\t\t\t\t\t\t...valueNode,\n\t\t\t\t\t\t\tsourceIndex: value.indexOf(val) + val.length + 1,\n\t\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tneedFix = processValue(valueNode);\n\n\t\t\t\tif (needFix && context.fix) {\n\t\t\t\t\tvalueNode.value = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif ('name' in node && node.name === 'media') {\n\t\t\t\t\t\tnode.params = parsedValue.toString();\n\t\t\t\t\t} else if ('value' in node) {\n\t\t\t\t\t\tnode.value = parsedValue.toString();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const err of problems) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !('variable' in atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../utils/isStandardSyntaxProperty');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((node: import('postcss').Declaration, index: number) => boolean) | null,\n *   determineIndex?: (declString: string, match: import('style-search').StyleSearchMatch) => number | false,\n * }} opts\n */\nmodule.exports = function valueListCommaWhitespaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declString = decl.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: declString,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tconst indexToCheckAfter = opts.determineIndex\n\t\t\t\t\t? opts.determineIndex(declString, match)\n\t\t\t\t\t: match.startIndex;\n\n\t\t\t\tif (indexToCheckAfter === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcheckComma(declString, indexToCheckAfter, decl);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Declaration} node\n\t * @returns {void}\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tdetermineIndex: (declString, match) => {\n\t\t\t\tconst nextChars = declString.substring(match.endIndex, declString.length);\n\n\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t// ending the comment so we're fine\n\t\t\t\tif (/^[ \\t]*\\/\\//.test(nextChars)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\treturn /^[ \\t]*\\/\\*/.test(nextChars)\n\t\t\t\t\t? declString.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t: match.startIndex;\n\t\t\t},\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => a - b).reverse()) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = context.newline + afterValue;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'string-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} quotes`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/string-quotes',\n};\n\nconst singleQuote = `'`;\nconst doubleQuote = `\"`;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst correctQuote = primary === 'single' ? singleQuote : doubleQuote;\n\tconst erroneousQuote = primary === 'single' ? doubleQuote : singleQuote;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['single', 'double'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tavoidEscape: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst avoidEscape =\n\t\t\tsecondaryOptions && secondaryOptions.avoidEscape !== undefined\n\t\t\t\t? secondaryOptions.avoidEscape\n\t\t\t\t: true;\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.quoted) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === correctQuote && avoidEscape) {\n\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\tattributeNode.quoteMark = erroneousQuote;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary === 'single' ? 'double' : primary),\n\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === erroneousQuote) {\n\t\t\t\t\t\tif (avoidEscape) {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\truleNode.selector = replaceQuote(ruleNode.selector, fixIndex, correctQuote);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no erroneous quotes\n\t\t\tif (!value.includes(erroneousQuote)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'atrule' && node.name === 'charset') {\n\t\t\t\t// allow @charset rules to have double quotes, in spite of the configuration\n\t\t\t\t// TODO: @charset should always use double-quotes, see https://github.com/stylelint/stylelint/issues/2788\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'string' && valueNode.quote === erroneousQuote) {\n\t\t\t\t\tconst needsEscape = valueNode.value.includes(correctQuote);\n\n\t\t\t\t\tif (avoidEscape && needsEscape) {\n\t\t\t\t\t\t// don't consider this an error\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = valueNode.sourceIndex;\n\n\t\t\t\t\t// we currently don't fix escapes\n\t\t\t\t\tif (context.fix && !needsEscape) {\n\t\t\t\t\t\tconst closeIndex = openIndex + valueNode.value.length + erroneousQuote.length;\n\n\t\t\t\t\t\tfixPositions.push(openIndex, closeIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\tnode.params = replaceQuote(node.params, fixIndex, correctQuote);\n\t\t\t\t} else {\n\t\t\t\t\tnode.value = replaceQuote(node.value, fixIndex, correctQuote);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} string\n * @param {number} index\n * @param {string} replace\n * @returns {string}\n */\nfunction replaceQuote(string, index, replace) {\n\treturn string.substring(0, index) + replace + string.substring(index + replace.length);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unknown unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t// and within functions listed in the `ignoreFunctions` option\n\t\t\t\tif (\n\t\t\t\t\tvalueNode.type === 'function' &&\n\t\t\t\t\t(valueNode.value.toLowerCase() === 'url' ||\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueNode.value))\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (keywordSets.units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (unit.toLowerCase() === 'x') {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.type === 'atrule' &&\n\t\t\t\t\t\tnode.name === 'media' &&\n\t\t\t\t\t\tnode.params.toLowerCase().includes('resolution')\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet ignoreUnit = false;\n\n\t\t\t\t\t\tmediaParser(node.params).walk((mediaNode, _i, mediaNodes) => {\n\t\t\t\t\t\t\tconst lastMediaNode = mediaNodes[mediaNodes.length - 1];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmediaNode.value.toLowerCase().includes('resolution') &&\n\t\t\t\t\t\t\t\tlastMediaNode &&\n\t\t\t\t\t\t\t\tlastMediaNode.sourceIndex === valueNode.sourceIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tignoreUnit = true;\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (ignoreUnit) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\t\tif (node.prop.toLowerCase() === 'image-resolution') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n\t\t\t\t\t\t\tconst imageSet = parsedValue.nodes.find(\n\t\t\t\t\t\t\t\t(n) => vendor.unprefixed(n.value) === 'image-set',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tassert(imageSet);\n\t\t\t\t\t\t\tassert('nodes' in imageSet);\n\t\t\t\t\t\t\tconst imageSetLastNode = imageSet.nodes[imageSet.nodes.length - 1];\n\n\t\t\t\t\t\t\tassert(imageSetLastNode);\n\t\t\t\t\t\t\tconst imageSetValueLastIndex = imageSetLastNode.sourceIndex;\n\n\t\t\t\t\t\t\tif (imageSetValueLastIndex >= valueNode.sourceIndex) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(decl, decl.value, declarationValueIndex);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-keyword-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-keyword-case',\n};\n\n// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\n\nconst mapLowercaseKeywordsToCamelCase = new Map();\n\nfor (const func of keywordSets.camelCaseKeywords) {\n\tmapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreKeywords: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tcamelCaseSvgKeywords: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst propLowerCase = decl.prop.toLowerCase();\n\t\t\tconst value = decl.value;\n\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tlet needFix = false;\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tconst valueLowerCase = node.value.toLowerCase();\n\n\t\t\t\t// Ignore system colors\n\t\t\t\tif (keywordSets.systemColors.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore keywords within `url` and `var` function\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\t(valueLowerCase === 'url' ||\n\t\t\t\t\t\tvalueLowerCase === 'var' ||\n\t\t\t\t\t\tvalueLowerCase === 'counter' ||\n\t\t\t\t\t\tvalueLowerCase === 'counters' ||\n\t\t\t\t\t\tvalueLowerCase === 'attr')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// ignore keywords within ignoreFunctions functions\n\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst keyword = node.value;\n\n\t\t\t\t// Ignore css variables, and hex values, and math operators, and sass interpolation\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'word' ||\n\t\t\t\t\t!isStandardSyntaxValue(node.value) ||\n\t\t\t\t\tvalue.includes('#') ||\n\t\t\t\t\tignoredCharacters.has(keyword) ||\n\t\t\t\t\tgetUnitFromValueNode(node)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation' &&\n\t\t\t\t\t!keywordSets.animationShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation-name' &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font' &&\n\t\t\t\t\t!keywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font-family' &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'counter-increment' &&\n\t\t\t\t\tisCounterIncrementCustomIdentValue(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridRowProps.has(propLowerCase) && !keywordSets.gridRowKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tgridColumnProps.has(propLowerCase) &&\n\t\t\t\t\t!keywordSets.gridColumnKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'grid-area' && !keywordSets.gridAreaKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style' &&\n\t\t\t\t\t!keywordSets.listStyleShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style-type' &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreKeywords', keyword)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst keywordLowerCase = keyword.toLocaleLowerCase();\n\t\t\t\tlet expectedKeyword = null;\n\n\t\t\t\t/** @type {boolean} */\n\t\t\t\tconst camelCaseSvgKeywords =\n\t\t\t\t\t(secondaryOptions && secondaryOptions.camelCaseSvgKeywords) || false;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseKeywordsToCamelCase.has(keywordLowerCase) &&\n\t\t\t\t\tcamelCaseSvgKeywords\n\t\t\t\t) {\n\t\t\t\t\texpectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedKeyword = keyword.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\texpectedKeyword = keyword.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (keyword === expectedKeyword) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedKeyword;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(keyword, expectedKeyword),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tdecl.value = parsed.toString();\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function (value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tkeywordSets.counterIncrementKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function (value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tkeywordSets.counterResetKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tlet beforeValue = value.slice(0, valueIndex);\n\t\t\t\t\tconst afterValue = value.slice(valueIndex);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'rule-selector-property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, selector) => `Unexpected property \"${property}\" for selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/rule-selector-property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectors = Object.keys(primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectorKey = selectors.find((selector) =>\n\t\t\t\tmatchesStringOrRegExp(ruleNode.selector, selector),\n\t\t\t);\n\n\t\t\tif (!selectorKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst disallowedProperties = primary[selectorKey];\n\n\t\t\tif (!disallowedProperties) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const node of ruleNode.nodes) {\n\t\t\t\tconst isDisallowedProperty =\n\t\t\t\t\tnode.type === 'decl' && matchesStringOrRegExp(node.prop, disallowedProperties);\n\n\t\t\t\tif (isDisallowedProperty) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(node.prop, ruleNode.selector),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-list-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newValueString = value\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tsetDeclarationValue(decl, newValueString);\n\t\t\t} else if (violatedLFNewLinesRegex.test(value) || violatedCRLFNewLinesRegex.test(value)) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (value) => `Unexpected vendor-prefix \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-no-vendor-prefix',\n};\n\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst hasPrefix = (value) => {\n\tconst lowerValue = value.toLowerCase();\n\n\treturn valuePrefixes.some((prefix) => lowerValue.startsWith(prefix));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreValues: [isString],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (\n\t\t\t\t!isStandardSyntaxDeclaration(decl) ||\n\t\t\t\t!isStandardSyntaxProperty(decl.prop) ||\n\t\t\t\t!value.startsWith('-')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreValues', vendor.unprefixed(value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!hasPrefix(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isAutoprefixable.propertyValue(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = isAutoprefixable.unprefix(node.value);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: decl.prop.length + (decl.raws.between || '').length + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isBoolean, isNumber, isString, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'indentation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (x) => `Expected indentation of ${x}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/indentation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions = {}, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber, 'tab'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tbaseIndentLevel: [isNumber, 'auto'],\n\t\t\t\t\texcept: ['block', 'value', 'param'],\n\t\t\t\t\tignore: ['value', 'param', 'inside-parens'],\n\t\t\t\t\tindentInsideParens: ['twice', 'once-at-root-twice-in-block'],\n\t\t\t\t\tindentClosingBrace: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst spaceCount = isNumber(primary) ? primary : null;\n\t\tconst indentChar = spaceCount == null ? '\\t' : ' '.repeat(spaceCount);\n\t\tconst warningWord = primary === 'tab' ? 'tab' : 'space';\n\n\t\t/** @type {number | 'auto'} */\n\t\tconst baseIndentLevel = secondaryOptions.baseIndentLevel;\n\t\t/** @type {boolean} */\n\t\tconst indentClosingBrace = secondaryOptions.indentClosingBrace;\n\n\t\t/**\n\t\t * @param {number} level\n\t\t */\n\t\tconst legibleExpectation = (level) => {\n\t\t\tconst count = spaceCount == null ? level : level * spaceCount;\n\t\t\tconst quantifiedWarningWord = count === 1 ? warningWord : `${warningWord}s`;\n\n\t\t\treturn `${count} ${quantifiedWarningWord}`;\n\t\t};\n\n\t\t// Cycle through all nodes using walk.\n\t\troot.walk((node) => {\n\t\t\tif (isRoot(node)) {\n\t\t\t\t// Ignore nested template literals root in css-in-js lang\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeLevel = indentationLevel(node);\n\n\t\t\t// Cut out any * and _ hacks from `before`\n\t\t\tconst before = (node.raws.before || '').replace(/[*_]$/, '');\n\t\t\tconst after = typeof node.raws.after === 'string' ? node.raws.after : '';\n\t\t\tconst parent = node.parent;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tconst expectedOpeningBraceIndentation = indentChar.repeat(nodeLevel);\n\n\t\t\t// Only inspect the spaces before the node\n\t\t\t// if this is the first node in root\n\t\t\t// or there is a newline in the `before` string.\n\t\t\t// (If there is no newline before a node,\n\t\t\t// there is no \"indentation\" to check.)\n\t\t\tconst isFirstChild = parent.type === 'root' && parent.first === node;\n\t\t\tconst lastIndexOfNewline = before.lastIndexOf('\\n');\n\n\t\t\t// Inspect whitespace in the `before` string that is\n\t\t\t// *after* the *last* newline character,\n\t\t\t// because anything besides that is not indentation for this node:\n\t\t\t// it is some other kind of separation, checked by some separate rule\n\t\t\tif (\n\t\t\t\t(lastIndexOfNewline !== -1 ||\n\t\t\t\t\t(isFirstChild &&\n\t\t\t\t\t\t(!getDocument(parent) ||\n\t\t\t\t\t\t\t(parent.raws.codeBefore && parent.raws.codeBefore.endsWith('\\n'))))) &&\n\t\t\t\tbefore.slice(lastIndexOfNewline + 1) !== expectedOpeningBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (isFirstChild && isString(node.raws.before)) {\n\t\t\t\t\t\tnode.raws.before = node.raws.before.replace(\n\t\t\t\t\t\t\t/^[ \\t]*(?=\\S|$)/,\n\t\t\t\t\t\t\texpectedOpeningBraceIndentation,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.raws.before = fixIndentation(node.raws.before, expectedOpeningBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(nodeLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Only blocks have the `after` string to check.\n\t\t\t// Only inspect `after` strings that start with a newline;\n\t\t\t// otherwise there's no indentation involved.\n\t\t\t// And check `indentClosingBrace` to see if it should be indented an extra level.\n\t\t\tconst closingBraceLevel = indentClosingBrace ? nodeLevel + 1 : nodeLevel;\n\t\t\tconst expectedClosingBraceIndentation = indentChar.repeat(closingBraceLevel);\n\n\t\t\tif (\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node) &&\n\t\t\t\tafter &&\n\t\t\t\tafter.includes('\\n') &&\n\t\t\t\tafter.slice(after.lastIndexOf('\\n') + 1) !== expectedClosingBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.raws.after = fixIndentation(node.raws.after, expectedClosingBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(closingBraceLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: node.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a declaration, check the value\n\t\t\tif (isDeclaration(node)) {\n\t\t\t\tcheckValue(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is a rule, check the selector\n\t\t\tif (isRule(node)) {\n\t\t\t\tcheckSelector(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is an at rule, check the params\n\t\t\tif (isAtRule(node)) {\n\t\t\t\tcheckAtRuleParams(node, nodeLevel);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} level\n\t\t * @returns {number}\n\t\t */\n\t\tfunction indentationLevel(node, level = 0) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRoot(node.parent)) {\n\t\t\t\treturn level + getRootBaseIndentLevel(node.parent, baseIndentLevel, primary);\n\t\t\t}\n\n\t\t\tlet calculatedLevel;\n\n\t\t\t// Indentation level equals the ancestor nodes\n\t\t\t// separating this node from root; so recursively\n\t\t\t// run this operation\n\t\t\tcalculatedLevel = indentationLevel(node.parent, level + 1);\n\n\t\t\t// If `secondaryOptions.except` includes \"block\",\n\t\t\t// blocks are taken down one from their calculated level\n\t\t\t// (all blocks are the same level as their parents)\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'block') &&\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node)\n\t\t\t) {\n\t\t\t\tcalculatedLevel--;\n\t\t\t}\n\n\t\t\treturn calculatedLevel;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} declLevel\n\t\t */\n\t\tfunction checkValue(decl, declLevel) {\n\t\t\tif (!decl.value.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'value')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\t\t\tconst valueLevel = optionsMatches(secondaryOptions, 'except', 'value')\n\t\t\t\t? declLevel\n\t\t\t\t: declLevel + 1;\n\n\t\t\tcheckMultilineBit(declString, valueLevel, decl);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkSelector(ruleNode, ruleLevel) {\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Less mixins have params, and they should be indented extra\n\t\t\t// @ts-expect-error -- TS2339: Property 'params' does not exist on type 'Rule'.\n\t\t\tif (ruleNode.params) {\n\t\t\t\truleLevel += 1;\n\t\t\t}\n\n\t\t\tcheckMultilineBit(selector, ruleLevel, ruleNode);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkAtRuleParams(atRule, ruleLevel) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'param')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @nest and SCSS's @at-root rules should be treated like regular rules, not expected\n\t\t\t// to have their params (selectors) indented\n\t\t\tconst paramLevel =\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'param') ||\n\t\t\t\tatRule.name === 'nest' ||\n\t\t\t\tatRule.name === 'at-root'\n\t\t\t\t\t? ruleLevel\n\t\t\t\t\t: ruleLevel + 1;\n\n\t\t\tcheckMultilineBit(beforeBlockString(atRule).trim(), paramLevel, atRule);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} newlineIndentLevel\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkMultilineBit(source, newlineIndentLevel, node) {\n\t\t\tif (!source.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Data for current node fixing\n\t\t\t/** @type {Array<{ expectedIndentation: string, currentIndentation: string, startIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// `outsideParens` because function arguments and also non-standard parenthesized stuff like\n\t\t\t// Sass maps are ignored to allow for arbitrary indentation\n\t\t\tlet parentheticalDepth = 0;\n\n\t\t\tconst ignoreInsideParans = optionsMatches(secondaryOptions, 'ignore', 'inside-parens');\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource,\n\t\t\t\t\ttarget: '\\n',\n\t\t\t\t\t// @ts-expect-error -- The `outsideParens` option is unsupported. Why?\n\t\t\t\t\toutsideParens: ignoreInsideParans,\n\t\t\t\t},\n\t\t\t\t(match, matchCount) => {\n\t\t\t\t\tconst precedesClosingParenthesis = /^[ \\t]*\\)/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (ignoreInsideParans && (precedesClosingParenthesis || match.insideParens)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet expectedIndentLevel = newlineIndentLevel;\n\n\t\t\t\t\t// Modififications for parenthetical content\n\t\t\t\t\tif (!ignoreInsideParans && match.insideParens) {\n\t\t\t\t\t\t// If the first match in is within parentheses, reduce the parenthesis penalty\n\t\t\t\t\t\tif (matchCount === 1) parentheticalDepth -= 1;\n\n\t\t\t\t\t\t// Account for windows line endings\n\t\t\t\t\t\tlet newlineIndex = match.startIndex;\n\n\t\t\t\t\t\tif (source[match.startIndex - 1] === '\\r') {\n\t\t\t\t\t\t\tnewlineIndex--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningParenthesis = /\\([ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningBrace = /\\{[ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningBrace) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst startingClosingBrace = /^[ \\t]*\\}/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\t\tif (startingClosingBrace) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpectedIndentLevel += parentheticalDepth;\n\n\t\t\t\t\t\t// Past this point, adjustments to parentheticalDepth affect next line\n\n\t\t\t\t\t\tif (precedesClosingParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (secondaryOptions.indentInsideParens) {\n\t\t\t\t\t\t\tcase 'twice':\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'once-at-root-twice-in-block':\n\t\t\t\t\t\t\t\tif (node.parent === node.root()) {\n\t\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Starting at the index after the newline, we want to\n\t\t\t\t\t// check that the whitespace characters (excluding newlines) before the first\n\t\t\t\t\t// non-whitespace character equal the expected indentation\n\t\t\t\t\tconst afterNewlineSpaceMatches = /^([ \\t]*)\\S/.exec(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (!afterNewlineSpaceMatches) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst afterNewlineSpace = afterNewlineSpaceMatches[1] || '';\n\t\t\t\t\tconst expectedIndentation = indentChar.repeat(\n\t\t\t\t\t\texpectedIndentLevel > 0 ? expectedIndentLevel : 0,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (afterNewlineSpace !== expectedIndentation) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t// Adding fixes position in reverse order, because if we change indent in the beginning of the string it will break all following fixes for that string\n\t\t\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\t\t\texpectedIndentation,\n\t\t\t\t\t\t\t\tcurrentIndentation: afterNewlineSpace,\n\t\t\t\t\t\t\t\tstartIndex: match.startIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(expectedIndentLevel)),\n\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\tindex: match.startIndex + afterNewlineSpace.length + 1,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tnode.selector = replaceIndentation(\n\t\t\t\t\t\t\tnode.selector,\n\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\tfixPosition.startIndex,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst declProp = node.prop;\n\t\t\t\t\tconst declBetween = node.raws.between;\n\n\t\t\t\t\tif (!isString(declBetween)) {\n\t\t\t\t\t\tthrow new TypeError('The `between` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tif (fixPosition.startIndex < declProp.length + declBetween.length) {\n\t\t\t\t\t\t\tnode.raws.between = replaceIndentation(\n\t\t\t\t\t\t\t\tdeclBetween,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.value = replaceIndentation(\n\t\t\t\t\t\t\t\tnode.value,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length - declBetween.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tconst atRuleName = node.name;\n\t\t\t\t\tconst atRuleAfterName = node.raws.afterName;\n\t\t\t\t\tconst atRuleParams = node.params;\n\n\t\t\t\t\tif (!isString(atRuleAfterName)) {\n\t\t\t\t\t\tthrow new TypeError('The `afterName` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\t// 1 — it's a @ length\n\t\t\t\t\t\tif (fixPosition.startIndex < 1 + atRuleName.length + atRuleAfterName.length) {\n\t\t\t\t\t\t\tnode.raws.afterName = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleAfterName,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.params = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleParams,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - atRuleAfterName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {string} space\n * @returns {number}\n */\nfunction getRootBaseIndentLevel(root, baseIndentLevel, space) {\n\tconst document = getDocument(root);\n\n\tif (!document) {\n\t\treturn 0;\n\t}\n\n\tif (!root.source) {\n\t\tthrow new Error('The root node must have a source');\n\t}\n\n\t/** @type {import('postcss').Source & { baseIndentLevel?: number }} */\n\tconst source = root.source;\n\n\tconst indentLevel = source.baseIndentLevel;\n\n\tif (isNumber(indentLevel) && Number.isSafeInteger(indentLevel)) {\n\t\treturn indentLevel;\n\t}\n\n\tconst newIndentLevel = inferRootIndentLevel(root, baseIndentLevel, () =>\n\t\tinferDocIndentSize(document, space),\n\t);\n\n\tsource.baseIndentLevel = newIndentLevel;\n\n\treturn newIndentLevel;\n}\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction getDocument(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\tconst document = node.document;\n\n\tif (document) {\n\t\treturn document;\n\t}\n\n\tconst root = node.root();\n\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\treturn root && root.document;\n}\n\n/**\n * @param {import('postcss').Document} document\n * @param {string} space\n * returns {number}\n */\nfunction inferDocIndentSize(document, space) {\n\tif (!document.source) throw new Error('The document node must have a source');\n\n\t/** @type {import('postcss').Source & { indentSize?: number }} */\n\tconst docSource = document.source;\n\n\tlet indentSize = docSource.indentSize;\n\n\tif (isNumber(indentSize) && Number.isSafeInteger(indentSize)) {\n\t\treturn indentSize;\n\t}\n\n\tconst source = document.source.input.css;\n\tconst indents = source.match(/^ *(?=\\S)/gm);\n\n\tif (indents) {\n\t\t/** @type {Map<number, number>} */\n\t\tconst scores = new Map();\n\t\tlet lastIndentSize = 0;\n\t\tlet lastLeadingSpacesLength = 0;\n\n\t\t/**\n\t\t * @param {number} leadingSpacesLength\n\t\t */\n\t\tconst vote = (leadingSpacesLength) => {\n\t\t\tif (leadingSpacesLength) {\n\t\t\t\tlastIndentSize = Math.abs(leadingSpacesLength - lastLeadingSpacesLength) || lastIndentSize;\n\n\t\t\t\tif (lastIndentSize > 1) {\n\t\t\t\t\tconst score = scores.get(lastIndentSize);\n\n\t\t\t\t\tif (score) {\n\t\t\t\t\t\tscores.set(lastIndentSize, score + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscores.set(lastIndentSize, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastIndentSize = 0;\n\t\t\t}\n\n\t\t\tlastLeadingSpacesLength = leadingSpacesLength;\n\t\t};\n\n\t\tfor (const leadingSpaces of indents) {\n\t\t\tvote(leadingSpaces.length);\n\t\t}\n\n\t\tlet bestScore = 0;\n\n\t\tfor (const [indentSizeDate, score] of scores.entries()) {\n\t\t\tif (score > bestScore) {\n\t\t\t\tbestScore = score;\n\t\t\t\tindentSize = indentSizeDate;\n\t\t\t}\n\t\t}\n\t}\n\n\tindentSize =\n\t\tNumber(indentSize) || (indents && indents[0] && indents[0].length) || Number(space) || 2;\n\tdocSource.indentSize = indentSize;\n\n\treturn indentSize;\n}\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {() => number} indentSize\n * @returns {number}\n */\nfunction inferRootIndentLevel(root, baseIndentLevel, indentSize) {\n\t/**\n\t * @param {string} indent\n\t */\n\tfunction getIndentLevel(indent) {\n\t\tconst tabMatch = indent.match(/\\t/g);\n\t\tconst tabCount = tabMatch ? tabMatch.length : 0;\n\n\t\tconst spaceMatch = indent.match(/ /g);\n\t\tconst spaceCount = spaceMatch ? Math.round(spaceMatch.length / indentSize()) : 0;\n\n\t\treturn tabCount + spaceCount;\n\t}\n\n\tlet newBaseIndentLevel = 0;\n\n\tif (!isNumber(baseIndentLevel) || !Number.isSafeInteger(baseIndentLevel)) {\n\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\tlet source = root.source.input.css;\n\n\t\tsource = source.replace(/^[^\\r\\n]+/, (firstLine) => {\n\t\t\tconst match = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)$/.exec(root.raws.codeBefore);\n\n\t\t\tif (match) {\n\t\t\t\treturn match[1] + firstLine;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t});\n\n\t\tconst indents = source.match(/^[ \\t]*(?=\\S)/gm);\n\n\t\tif (indents) {\n\t\t\treturn Math.min(...indents.map((indent) => getIndentLevel(indent)));\n\t\t}\n\n\t\tnewBaseIndentLevel = 1;\n\t} else {\n\t\tnewBaseIndentLevel = baseIndentLevel;\n\t}\n\n\tconst indents = [];\n\tconst foundIndents = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)\\S/m.exec(root.raws.codeBefore);\n\n\t// The indent level of the CSS code block in non-CSS-like files is determined by the shortest indent of non-empty line.\n\tif (foundIndents) {\n\t\tlet shortest = Number.MAX_SAFE_INTEGER;\n\t\tlet i = 0;\n\n\t\twhile (++i < foundIndents.length) {\n\t\t\tconst foundIndent = foundIndents[i];\n\n\t\t\tassertString(foundIndent);\n\t\t\tconst current = getIndentLevel(foundIndent);\n\n\t\t\tif (current < shortest) {\n\t\t\t\tshortest = current;\n\n\t\t\t\tif (shortest === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shortest !== Number.MAX_SAFE_INTEGER) {\n\t\t\tindents.push(new Array(shortest).fill(' ').join(''));\n\t\t}\n\t}\n\n\tconst after = root.raws.after;\n\n\tif (after) {\n\t\tlet afterEnd;\n\n\t\tif (after.endsWith('\\n')) {\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tconst document = root.document;\n\n\t\t\tif (document) {\n\t\t\t\tconst nextRoot = document.nodes[document.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : document.raws.codeAfter;\n\t\t\t} else {\n\t\t\t\t// Nested root node in css-in-js lang\n\t\t\t\tconst parent = root.parent;\n\n\t\t\t\tif (!parent) throw new Error('The root node must have a parent');\n\n\t\t\t\tconst nextRoot = parent.nodes[parent.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : root.raws.codeAfter;\n\t\t\t}\n\t\t} else {\n\t\t\tafterEnd = after;\n\t\t}\n\n\t\tif (afterEnd) indents.push(afterEnd.match(/^[ \\t]*/)[0]);\n\t}\n\n\tif (indents.length) {\n\t\treturn Math.max(...indents.map((indent) => getIndentLevel(indent))) + newBaseIndentLevel;\n\t}\n\n\treturn newBaseIndentLevel;\n}\n\n/**\n * @param {string | undefined} str\n * @param {string} whitespace\n */\nfunction fixIndentation(str, whitespace) {\n\tif (!isString(str)) {\n\t\treturn str;\n\t}\n\n\treturn str.replace(/\\n[ \\t]*(?=\\S|$)/g, `\\n${whitespace}`);\n}\n\n/**\n * @param {string} input\n * @param {string} searchString\n * @param {string} replaceString\n * @param {number} startIndex\n */\nfunction replaceIndentation(input, searchString, replaceString, startIndex) {\n\tconst offset = startIndex + 1;\n\tconst stringStart = input.slice(0, offset);\n\tconst stringEnd = input.slice(offset + searchString.length);\n\n\treturn stringStart + replaceString + stringEnd;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-element selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoElements: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.slice(0, 2) !== '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (vendor.prefix(name) || keywordSets.pseudoElements.has(name.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (nonSpaceCharacter) => `Unexpected \"${nonSpaceCharacter}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-descendant-combinator-no-non-space',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t// Return early for selectors containing comments\n\t\t\t// TODO: renable when parser and stylelint are compatible\n\t\t\tif (selector.includes('/*')) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (combinatorNode.value !== ' ') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = combinatorNode.toString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue.includes('  ') ||\n\t\t\t\t\t\tvalue.includes('\\t') ||\n\t\t\t\t\t\tvalue.includes('\\n') ||\n\t\t\t\t\t\tvalue.includes('\\r')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (context.fix && /^\\s+$/.test(value)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\tif (!combinatorNode.raws) combinatorNode.raws = {};\n\n\t\t\t\t\t\t\tcombinatorNode.raws.value = ' ';\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').rules} */\nconst rules = {\n\t'alpha-value-notation': importLazy('./alpha-value-notation'),\n\t'at-rule-allowed-list': importLazy('./at-rule-allowed-list'),\n\t'at-rule-disallowed-list': importLazy('./at-rule-disallowed-list'),\n\t'at-rule-empty-line-before': importLazy('./at-rule-empty-line-before'),\n\t'at-rule-name-case': importLazy('./at-rule-name-case'),\n\t'at-rule-name-newline-after': importLazy('./at-rule-name-newline-after'),\n\t'at-rule-semicolon-space-before': importLazy('./at-rule-semicolon-space-before'),\n\t'at-rule-name-space-after': importLazy('./at-rule-name-space-after'),\n\t'at-rule-no-unknown': importLazy('./at-rule-no-unknown'),\n\t'at-rule-no-vendor-prefix': importLazy('./at-rule-no-vendor-prefix'),\n\t'at-rule-property-required-list': importLazy('./at-rule-property-required-list'),\n\t'at-rule-semicolon-newline-after': importLazy('./at-rule-semicolon-newline-after'),\n\t'block-closing-brace-empty-line-before': importLazy('./block-closing-brace-empty-line-before'),\n\t'block-closing-brace-newline-after': importLazy('./block-closing-brace-newline-after'),\n\t'block-closing-brace-newline-before': importLazy('./block-closing-brace-newline-before'),\n\t'block-closing-brace-space-after': importLazy('./block-closing-brace-space-after'),\n\t'block-closing-brace-space-before': importLazy('./block-closing-brace-space-before'),\n\t'block-no-empty': importLazy('./block-no-empty'),\n\t'block-opening-brace-newline-after': importLazy('./block-opening-brace-newline-after'),\n\t'block-opening-brace-newline-before': importLazy('./block-opening-brace-newline-before'),\n\t'block-opening-brace-space-after': importLazy('./block-opening-brace-space-after'),\n\t'block-opening-brace-space-before': importLazy('./block-opening-brace-space-before'),\n\t'color-function-notation': importLazy('./color-function-notation'),\n\t'color-hex-alpha': importLazy('./color-hex-alpha'),\n\t'color-hex-case': importLazy('./color-hex-case'),\n\t'color-hex-length': importLazy('./color-hex-length'),\n\t'color-named': importLazy('./color-named'),\n\t'color-no-hex': importLazy('./color-no-hex'),\n\t'color-no-invalid-hex': importLazy('./color-no-invalid-hex'),\n\t'comment-empty-line-before': importLazy('./comment-empty-line-before'),\n\t'comment-no-empty': importLazy('./comment-no-empty'),\n\t'comment-pattern': importLazy('./comment-pattern'),\n\t'comment-whitespace-inside': importLazy('./comment-whitespace-inside'),\n\t'comment-word-disallowed-list': importLazy('./comment-word-disallowed-list'),\n\t'custom-media-pattern': importLazy('./custom-media-pattern'),\n\t'custom-property-empty-line-before': importLazy('./custom-property-empty-line-before'),\n\t'custom-property-no-missing-var-function': importLazy(\n\t\t'./custom-property-no-missing-var-function',\n\t),\n\t'custom-property-pattern': importLazy('./custom-property-pattern'),\n\t'declaration-bang-space-after': importLazy('./declaration-bang-space-after'),\n\t'declaration-bang-space-before': importLazy('./declaration-bang-space-before'),\n\t'declaration-block-no-duplicate-custom-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-custom-properties',\n\t),\n\t'declaration-block-no-duplicate-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-properties',\n\t),\n\t'declaration-block-no-redundant-longhand-properties': importLazy(\n\t\t'./declaration-block-no-redundant-longhand-properties',\n\t),\n\t'declaration-block-no-shorthand-property-overrides': importLazy(\n\t\t'./declaration-block-no-shorthand-property-overrides',\n\t),\n\t'declaration-block-semicolon-newline-after': importLazy(\n\t\t'./declaration-block-semicolon-newline-after',\n\t),\n\t'declaration-block-semicolon-newline-before': importLazy(\n\t\t'./declaration-block-semicolon-newline-before',\n\t),\n\t'declaration-block-semicolon-space-after': importLazy(\n\t\t'./declaration-block-semicolon-space-after',\n\t),\n\t'declaration-block-semicolon-space-before': importLazy(\n\t\t'./declaration-block-semicolon-space-before',\n\t),\n\t'declaration-block-single-line-max-declarations': importLazy(\n\t\t'./declaration-block-single-line-max-declarations',\n\t),\n\t'declaration-block-trailing-semicolon': importLazy('./declaration-block-trailing-semicolon'),\n\t'declaration-colon-newline-after': importLazy('./declaration-colon-newline-after'),\n\t'declaration-colon-space-after': importLazy('./declaration-colon-space-after'),\n\t'declaration-colon-space-before': importLazy('./declaration-colon-space-before'),\n\t'declaration-empty-line-before': importLazy('./declaration-empty-line-before'),\n\t'declaration-no-important': importLazy('./declaration-no-important'),\n\t'declaration-property-max-values': importLazy('./declaration-property-max-values'),\n\t'declaration-property-unit-allowed-list': importLazy('./declaration-property-unit-allowed-list'),\n\t'declaration-property-unit-disallowed-list': importLazy(\n\t\t'./declaration-property-unit-disallowed-list',\n\t),\n\t'declaration-property-value-allowed-list': importLazy(\n\t\t'./declaration-property-value-allowed-list',\n\t),\n\t'declaration-property-value-disallowed-list': importLazy(\n\t\t'./declaration-property-value-disallowed-list',\n\t),\n\t'font-family-no-missing-generic-family-keyword': importLazy(\n\t\t'./font-family-no-missing-generic-family-keyword',\n\t),\n\t'font-family-name-quotes': importLazy('./font-family-name-quotes'),\n\t'font-family-no-duplicate-names': importLazy('./font-family-no-duplicate-names'),\n\t'font-weight-notation': importLazy('./font-weight-notation'),\n\t'function-allowed-list': importLazy('./function-allowed-list'),\n\t'function-calc-no-unspaced-operator': importLazy('./function-calc-no-unspaced-operator'),\n\t'function-comma-newline-after': importLazy('./function-comma-newline-after'),\n\t'function-comma-newline-before': importLazy('./function-comma-newline-before'),\n\t'function-comma-space-after': importLazy('./function-comma-space-after'),\n\t'function-comma-space-before': importLazy('./function-comma-space-before'),\n\t'function-disallowed-list': importLazy('./function-disallowed-list'),\n\t'function-linear-gradient-no-nonstandard-direction': importLazy(\n\t\t'./function-linear-gradient-no-nonstandard-direction',\n\t),\n\t'function-max-empty-lines': importLazy('./function-max-empty-lines'),\n\t'function-name-case': importLazy('./function-name-case'),\n\t'function-no-unknown': importLazy('./function-no-unknown'),\n\t'function-parentheses-newline-inside': importLazy('./function-parentheses-newline-inside'),\n\t'function-parentheses-space-inside': importLazy('./function-parentheses-space-inside'),\n\t'function-url-no-scheme-relative': importLazy('./function-url-no-scheme-relative'),\n\t'function-url-quotes': importLazy('./function-url-quotes'),\n\t'function-url-scheme-allowed-list': importLazy('./function-url-scheme-allowed-list'),\n\t'function-url-scheme-disallowed-list': importLazy('./function-url-scheme-disallowed-list'),\n\t'function-whitespace-after': importLazy('./function-whitespace-after'),\n\t'hue-degree-notation': importLazy('./hue-degree-notation'),\n\t'import-notation': importLazy('./import-notation'),\n\t'keyframe-block-no-duplicate-selectors': importLazy('./keyframe-block-no-duplicate-selectors'),\n\t'keyframe-declaration-no-important': importLazy('./keyframe-declaration-no-important'),\n\t'keyframes-name-pattern': importLazy('./keyframes-name-pattern'),\n\t'length-zero-no-unit': importLazy('./length-zero-no-unit'),\n\tlinebreaks: importLazy('./linebreaks'),\n\t'max-empty-lines': importLazy('./max-empty-lines'),\n\t'max-line-length': importLazy('./max-line-length'),\n\t'max-nesting-depth': importLazy('./max-nesting-depth'),\n\t'media-feature-colon-space-after': importLazy('./media-feature-colon-space-after'),\n\t'media-feature-colon-space-before': importLazy('./media-feature-colon-space-before'),\n\t'media-feature-name-allowed-list': importLazy('./media-feature-name-allowed-list'),\n\t'media-feature-name-case': importLazy('./media-feature-name-case'),\n\t'media-feature-name-disallowed-list': importLazy('./media-feature-name-disallowed-list'),\n\t'media-feature-name-no-unknown': importLazy('./media-feature-name-no-unknown'),\n\t'media-feature-name-no-vendor-prefix': importLazy('./media-feature-name-no-vendor-prefix'),\n\t'media-feature-name-value-allowed-list': importLazy('./media-feature-name-value-allowed-list'),\n\t'media-feature-parentheses-space-inside': importLazy('./media-feature-parentheses-space-inside'),\n\t'media-feature-range-operator-space-after': importLazy(\n\t\t'./media-feature-range-operator-space-after',\n\t),\n\t'media-feature-range-operator-space-before': importLazy(\n\t\t'./media-feature-range-operator-space-before',\n\t),\n\t'media-query-list-comma-newline-after': importLazy('./media-query-list-comma-newline-after'),\n\t'media-query-list-comma-newline-before': importLazy('./media-query-list-comma-newline-before'),\n\t'media-query-list-comma-space-after': importLazy('./media-query-list-comma-space-after'),\n\t'media-query-list-comma-space-before': importLazy('./media-query-list-comma-space-before'),\n\t'named-grid-areas-no-invalid': importLazy('./named-grid-areas-no-invalid'),\n\t'no-descending-specificity': importLazy('./no-descending-specificity'),\n\t'no-duplicate-at-import-rules': importLazy('./no-duplicate-at-import-rules'),\n\t'no-duplicate-selectors': importLazy('./no-duplicate-selectors'),\n\t'no-empty-source': importLazy('./no-empty-source'),\n\t'no-empty-first-line': importLazy('./no-empty-first-line'),\n\t'no-eol-whitespace': importLazy('./no-eol-whitespace'),\n\t'no-extra-semicolons': importLazy('./no-extra-semicolons'),\n\t'no-invalid-double-slash-comments': importLazy('./no-invalid-double-slash-comments'),\n\t'no-invalid-position-at-import-rule': importLazy('./no-invalid-position-at-import-rule'),\n\t'no-irregular-whitespace': importLazy('./no-irregular-whitespace'),\n\t'no-missing-end-of-source-newline': importLazy('./no-missing-end-of-source-newline'),\n\t'no-unknown-animations': importLazy('./no-unknown-animations'),\n\t'number-leading-zero': importLazy('./number-leading-zero'),\n\t'number-max-precision': importLazy('./number-max-precision'),\n\t'number-no-trailing-zeros': importLazy('./number-no-trailing-zeros'),\n\t'property-allowed-list': importLazy('./property-allowed-list'),\n\t'property-case': importLazy('./property-case'),\n\t'property-disallowed-list': importLazy('./property-disallowed-list'),\n\t'property-no-unknown': importLazy('./property-no-unknown'),\n\t'property-no-vendor-prefix': importLazy('./property-no-vendor-prefix'),\n\t'rule-empty-line-before': importLazy('./rule-empty-line-before'),\n\t'rule-selector-property-disallowed-list': importLazy('./rule-selector-property-disallowed-list'),\n\t'selector-attribute-brackets-space-inside': importLazy(\n\t\t'./selector-attribute-brackets-space-inside',\n\t),\n\t'selector-attribute-name-disallowed-list': importLazy(\n\t\t'./selector-attribute-name-disallowed-list',\n\t),\n\t'selector-attribute-operator-allowed-list': importLazy(\n\t\t'./selector-attribute-operator-allowed-list',\n\t),\n\t'selector-attribute-operator-disallowed-list': importLazy(\n\t\t'./selector-attribute-operator-disallowed-list',\n\t),\n\t'selector-attribute-operator-space-after': importLazy(\n\t\t'./selector-attribute-operator-space-after',\n\t),\n\t'selector-attribute-operator-space-before': importLazy(\n\t\t'./selector-attribute-operator-space-before',\n\t),\n\t'selector-attribute-quotes': importLazy('./selector-attribute-quotes'),\n\t'selector-class-pattern': importLazy('./selector-class-pattern'),\n\t'selector-combinator-allowed-list': importLazy('./selector-combinator-allowed-list'),\n\t'selector-combinator-disallowed-list': importLazy('./selector-combinator-disallowed-list'),\n\t'selector-combinator-space-after': importLazy('./selector-combinator-space-after'),\n\t'selector-combinator-space-before': importLazy('./selector-combinator-space-before'),\n\t'selector-descendant-combinator-no-non-space': importLazy(\n\t\t'./selector-descendant-combinator-no-non-space',\n\t),\n\t'selector-disallowed-list': importLazy('./selector-disallowed-list'),\n\t'selector-id-pattern': importLazy('./selector-id-pattern'),\n\t'selector-list-comma-newline-after': importLazy('./selector-list-comma-newline-after'),\n\t'selector-list-comma-newline-before': importLazy('./selector-list-comma-newline-before'),\n\t'selector-list-comma-space-after': importLazy('./selector-list-comma-space-after'),\n\t'selector-list-comma-space-before': importLazy('./selector-list-comma-space-before'),\n\t'selector-max-attribute': importLazy('./selector-max-attribute'),\n\t'selector-max-class': importLazy('./selector-max-class'),\n\t'selector-max-combinators': importLazy('./selector-max-combinators'),\n\t'selector-max-compound-selectors': importLazy('./selector-max-compound-selectors'),\n\t'selector-max-empty-lines': importLazy('./selector-max-empty-lines'),\n\t'selector-max-id': importLazy('./selector-max-id'),\n\t'selector-max-pseudo-class': importLazy('./selector-max-pseudo-class'),\n\t'selector-max-specificity': importLazy('./selector-max-specificity'),\n\t'selector-max-type': importLazy('./selector-max-type'),\n\t'selector-max-universal': importLazy('./selector-max-universal'),\n\t'selector-nested-pattern': importLazy('./selector-nested-pattern'),\n\t'selector-no-qualifying-type': importLazy('./selector-no-qualifying-type'),\n\t'selector-no-vendor-prefix': importLazy('./selector-no-vendor-prefix'),\n\t'selector-not-notation': importLazy('./selector-not-notation'),\n\t'selector-pseudo-class-allowed-list': importLazy('./selector-pseudo-class-allowed-list'),\n\t'selector-pseudo-class-case': importLazy('./selector-pseudo-class-case'),\n\t'selector-pseudo-class-disallowed-list': importLazy('./selector-pseudo-class-disallowed-list'),\n\t'selector-pseudo-class-no-unknown': importLazy('./selector-pseudo-class-no-unknown'),\n\t'selector-pseudo-class-parentheses-space-inside': importLazy(\n\t\t'./selector-pseudo-class-parentheses-space-inside',\n\t),\n\t'selector-pseudo-element-allowed-list': importLazy('./selector-pseudo-element-allowed-list'),\n\t'selector-pseudo-element-case': importLazy('./selector-pseudo-element-case'),\n\t'selector-pseudo-element-colon-notation': importLazy('./selector-pseudo-element-colon-notation'),\n\t'selector-pseudo-element-disallowed-list': importLazy(\n\t\t'./selector-pseudo-element-disallowed-list',\n\t),\n\t'selector-pseudo-element-no-unknown': importLazy('./selector-pseudo-element-no-unknown'),\n\t'selector-type-case': importLazy('./selector-type-case'),\n\t'selector-type-no-unknown': importLazy('./selector-type-no-unknown'),\n\t'shorthand-property-no-redundant-values': importLazy('./shorthand-property-no-redundant-values'),\n\t'string-no-newline': importLazy('./string-no-newline'),\n\t'string-quotes': importLazy('./string-quotes'),\n\t'time-min-milliseconds': importLazy('./time-min-milliseconds'),\n\t'unicode-bom': importLazy('./unicode-bom'),\n\t'unit-allowed-list': importLazy('./unit-allowed-list'),\n\t'unit-case': importLazy('./unit-case'),\n\t'unit-disallowed-list': importLazy('./unit-disallowed-list'),\n\t'unit-no-unknown': importLazy('./unit-no-unknown'),\n\t'value-keyword-case': importLazy('./value-keyword-case'),\n\t'value-list-comma-newline-after': importLazy('./value-list-comma-newline-after'),\n\t'value-list-comma-newline-before': importLazy('./value-list-comma-newline-before'),\n\t'value-list-comma-space-after': importLazy('./value-list-comma-space-after'),\n\t'value-list-comma-space-before': importLazy('./value-list-comma-space-before'),\n\t'value-list-max-empty-lines': importLazy('./value-list-max-empty-lines'),\n\t'value-no-vendor-prefix': importLazy('./value-no-vendor-prefix'),\n\tindentation: importLazy('./indentation'),\n};\n\nmodule.exports = rules;\n","'use strict';\n\nconst rules = require('./rules');\nconst { isPlainObject } = require('./utils/validateTypes');\n\n// Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @template T\n * @template {Object} O\n * @param {import('stylelint').ConfigRuleSettings<T, O>} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the rules themselves, which will not work for plugins\n * @return {[T] | [T, O] | null}\n */\nmodule.exports = function normalizeRuleSettings(\n\trawSettings,\n\truleName,\n\t// If primaryOptionArray is not provided, we try to get it from the\n\t// rules themselves, which will not work for plugins\n\tprimaryOptionArray,\n) {\n\tif (rawSettings === null || rawSettings === undefined) {\n\t\treturn null;\n\t}\n\n\tif (!Array.isArray(rawSettings)) {\n\t\treturn [rawSettings];\n\t}\n\t// Everything below is an array ...\n\n\tif (rawSettings.length > 0 && (rawSettings[0] === null || rawSettings[0] === undefined)) {\n\t\treturn null;\n\t}\n\n\tif (primaryOptionArray === undefined) {\n\t\tconst rule = rules[ruleName];\n\n\t\tif (rule && 'primaryOptionArray' in rule) {\n\t\t\tprimaryOptionArray = rule.primaryOptionArray;\n\t\t}\n\t}\n\n\tif (!primaryOptionArray) {\n\t\treturn rawSettings;\n\t}\n\t// Everything below is a rule that CAN have an array for a primary option ...\n\t// (they might also have something else, e.g. rule-properties-order can\n\t// have the string \"alphabetical\")\n\n\tif (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n\t\treturn rawSettings;\n\t}\n\n\tif (rawSettings.length === 2 && !isPlainObject(rawSettings[0]) && isPlainObject(rawSettings[1])) {\n\t\treturn rawSettings;\n\t}\n\n\t// `T` must be an array type, but TSC thinks it's probably invalid to\n\t// cast `[T]` to `T` so we cast through `any` first.\n\treturn [/** @type {T} */ (/** @type {any} */ (rawSettings))];\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst globalModules = require('global-modules');\nconst resolveFrom = require('resolve-from');\n\n/**\n * @param {string} basedir\n * @param {string} lookup\n * @param {string} [cwd]\n * @return {string}\n */\nmodule.exports = function getModulePath(basedir, lookup, cwd = process.cwd()) {\n\t// 1. Try to resolve from the provided directory\n\t// 2. Try to resolve from `cwd` or `process.cwd()`\n\t// 3. Try to resolve from global `node_modules` directory\n\tlet path = resolveFrom.silent(basedir, lookup);\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(cwd, lookup);\n\t}\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(globalModules, lookup);\n\t}\n\n\tif (!path) {\n\t\tthrow configurationError(`Could not find \"${lookup}\". Do you need a \\`configBasedir\\`?`);\n\t}\n\n\treturn path;\n};\n","'use strict';\n\nvar Path = require('path');\nvar slice = Array.prototype.slice;\n\nfunction join(/* globs */) {\n\tvar args;\n\n\targs = slice.call(arguments, 0);\n\treturn args.reduce(function (result, globs) {\n\t\treturn _apply(result, function (path) {\n\t\t\treturn _apply(globs, function (glob) {\n\t\t\t\treturn _join(path, glob);\n\t\t\t});\n\t\t});\n\t}, '');\n}\n\nfunction _apply(values, fn) {\n\tif (Array.isArray(values)) {\n\t\treturn values.reduce(function (result, value) {\n\t\t\treturn result.concat(fn(value));\n\t\t}, []);\n\t}\n\treturn fn(values);\n}\n\nfunction _join(path, glob) {\n\tvar negative, positive;\n\n\tif (glob[0] === '!') {\n\t\tpositive = glob.substr(1);\n\t\tif (path[0] === '!') {\n\t\t\tnegative = '';\n\t\t} else {\n\t\t\tnegative = '!';\n\t\t}\n\t\treturn negative + Path.join(path, positive);\n\t}\n\treturn Path.join(path, glob);\n}\n\nmodule.exports = join;\n","'use strict';\n\nconst normalizeRuleSettings = require('./normalizeRuleSettings');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction normalizeAllRuleSettings(config) {\n\tif (!config.rules) return config;\n\n\t/** @type {StylelintConfigRules} */\n\tconst normalizedRules = {};\n\n\tfor (const [ruleName, rawRuleSettings] of Object.entries(config.rules)) {\n\t\tconst rule = rules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (rule) {\n\t\t\tnormalizedRules[ruleName] = normalizeRuleSettings(\n\t\t\t\trawRuleSettings,\n\t\t\t\truleName,\n\t\t\t\trule.primaryOptionArray,\n\t\t\t);\n\t\t} else {\n\t\t\tnormalizedRules[ruleName] = [];\n\t\t}\n\t}\n\n\tconfig.rules = normalizedRules;\n\n\treturn config;\n}\n\nmodule.exports = normalizeAllRuleSettings;\n","'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst micromatch = require('micromatch');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\nasync function augmentConfigBasic(\n\tstylelint,\n\tconfig,\n\tconfigDir,\n\tallowOverrides,\n\trootConfigDir,\n\tfilePath,\n) {\n\tlet augmentedConfig = config;\n\n\tif (allowOverrides) {\n\t\taugmentedConfig = addOptions(stylelint, augmentedConfig);\n\t}\n\n\tif (filePath) {\n\t\taugmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n\t}\n\n\taugmentedConfig = await extendConfig(\n\t\tstylelint,\n\t\taugmentedConfig,\n\t\tconfigDir,\n\t\trootConfigDir,\n\t\tfilePath,\n\t);\n\n\tconst cwd = stylelint._options.cwd;\n\n\treturn absolutizePaths(augmentedConfig, configDir, cwd);\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\nfunction augmentConfigExtended(cwd) {\n\treturn async (cosmiconfigResult) => {\n\t\tif (!cosmiconfigResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\t\tconst { config } = cosmiconfigResult;\n\n\t\tconst augmentedConfig = absolutizePaths(config, configDir, cwd);\n\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t};\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n\tif (!cosmiconfigResult) {\n\t\treturn null;\n\t}\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\tlet augmentedConfig = await augmentConfigBasic(\n\t\tstylelint,\n\t\tconfig,\n\t\tconfigDir,\n\t\ttrue,\n\t\tconfigDir,\n\t\tfilePath,\n\t);\n\n\taugmentedConfig = addPluginFunctions(augmentedConfig);\n\taugmentedConfig = addProcessorFunctions(augmentedConfig);\n\n\tif (!augmentedConfig.rules) {\n\t\tthrow configurationError(\n\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t);\n\t}\n\n\taugmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n\n\treturn {\n\t\tconfig: augmentedConfig,\n\t\tfilepath: cosmiconfigResult.filepath,\n\t};\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir, cwd) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = [config.ignoreFiles].flat().map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = [config.plugins].flat().map((lookup) => getModulePath(configDir, lookup, cwd));\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n\tif (config.extends === undefined) {\n\t\treturn config;\n\t}\n\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\tconst normalizedExtends = [configExtends].flat();\n\n\tlet resultConfig = originalWithoutExtends;\n\n\tfor (const extendLookup of normalizedExtends) {\n\t\tconst extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n\t\tif (extendResult) {\n\t\t\tlet extendResultConfig = extendResult.config;\n\t\t\tconst extendConfigDir = path.dirname(extendResult.filepath || '');\n\n\t\t\textendResultConfig = await augmentConfigBasic(\n\t\t\t\tstylelint,\n\t\t\t\textendResultConfig,\n\t\t\t\textendConfigDir,\n\t\t\t\tfalse,\n\t\t\t\trootConfigDir,\n\t\t\t\tfilePath,\n\t\t\t);\n\n\t\t\tresultConfig = mergeConfigs(resultConfig, extendResultConfig);\n\t\t}\n\t}\n\n\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\t/** @type {{overrides: StylelintConfigOverride[]}} */\n\tconst overridesMerger = {};\n\n\tif (a.overrides || b.overrides) {\n\t\toverridesMerger.overrides = [];\n\n\t\tif (a.overrides) {\n\t\t\toverridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n\t\t}\n\n\t\tif (b.overrides) {\n\t\t\toverridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = {\n\t\t...a,\n\t\t...b,\n\t\t...processorMerger,\n\t\t...pluginMerger,\n\t\t...overridesMerger,\n\t\t...rulesMerger,\n\t};\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) {\n\t\treturn config;\n\t}\n\n\tconst normalizedPlugins = [config.plugins].flat();\n\n\t/** @type {StylelintConfig['pluginFunctions']} */\n\tconst pluginFunctions = {};\n\n\tfor (const pluginLookup of normalizedPlugins) {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = [pluginImport].flat();\n\n\t\tfor (const pluginRuleDefinition of normalizedPluginImport) {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t}\n\t}\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {StylelintCodeProcessor[]} */\n\tconst codeProcessors = [];\n\t/** @type {StylelintResultProcessor[]} */\n\tconst resultProcessors = [];\n\n\tfor (const processorConfig of [config.processors].flat()) {\n\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\tlet initializedProcessor;\n\n\t\tif (processorCache.has(processorKey)) {\n\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t} else {\n\t\t\tconst processorLookup =\n\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\tconst processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\tlet processor = require(processorLookup);\n\n\t\t\tprocessor = processor.default || processor;\n\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t}\n\t}\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n\tlet { overrides, ...config } = fullConfig;\n\n\tif (!overrides) {\n\t\treturn config;\n\t}\n\n\tif (!Array.isArray(overrides)) {\n\t\tthrow new TypeError(\n\t\t\t'The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t);\n\t}\n\n\tfor (const override of overrides) {\n\t\tconst { files, ...configOverrides } = override;\n\n\t\tif (!files) {\n\t\t\tthrow new Error(\n\t\t\t\t'Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t\t);\n\t\t}\n\n\t\tconst filesGlobs = [files]\n\t\t\t.flat()\n\t\t\t.map((glob) => {\n\t\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) {\n\t\t\t\t\treturn glob;\n\t\t\t\t}\n\n\t\t\t\treturn globjoin(rootConfigDir, glob);\n\t\t\t})\n\t\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\t\t.map((s) => normalizePath(s));\n\n\t\tif (micromatch.isMatch(filePath, filesGlobs, { dot: true })) {\n\t\t\tconfig = mergeConfigs(config, configOverrides);\n\t\t}\n\t}\n\n\treturn config;\n}\n\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\nfunction addOptions(stylelint, config) {\n\tconst augmentedConfig = {\n\t\t...config,\n\t};\n\n\tif (stylelint._options.ignoreDisables) {\n\t\taugmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n\t}\n\n\tif (stylelint._options.quiet) {\n\t\taugmentedConfig.quiet = stylelint._options.quiet;\n\t}\n\n\tif (stylelint._options.reportNeedlessDisables) {\n\t\taugmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n\t}\n\n\tif (stylelint._options.reportInvalidScopeDisables) {\n\t\taugmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n\t}\n\n\tif (stylelint._options.reportDescriptionlessDisables) {\n\t\taugmentedConfig.reportDescriptionlessDisables =\n\t\t\tstylelint._options.reportDescriptionlessDisables;\n\t}\n\n\tif (stylelint._options.customSyntax) {\n\t\taugmentedConfig.customSyntax = stylelint._options.customSyntax;\n\t}\n\n\treturn augmentedConfig;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull, applyOverrides };\n","'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = async function createStylelintResult(\n\tstylelint,\n\tpostcssResult,\n\tfilePath,\n\tcssSyntaxError,\n) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\tconst configForFile = await stylelint.getConfigForFile(filePath, filePath);\n\n\tconst config = configForFile === null ? {} : configForFile.config;\n\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\tif (config.resultProcessors) {\n\t\tfor (const resultProcessor of config.resultProcessors) {\n\t\t\t// Result processors might just mutate the result object,\n\t\t\t// or might return a new one\n\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\tif (returned) {\n\t\t\t\tstylelintResult = returned;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function (postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\tconst deprecationMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'deprecation',\n\t\t);\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\tconst invalidOptionMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'invalidOption',\n\t\t);\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'parseError',\n\t\t);\n\n\t\t// Remove deprecation warnings, invalid options, and parse errors from the messages\n\t\tpostcssResult.messages = postcssResult.messages.filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.stylelintType !== 'deprecation' &&\n\t\t\t\tmessage.stylelintType !== 'invalidOption' &&\n\t\t\t\tmessage.stylelintType !== 'parseError',\n\t\t);\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n\t\t\tparseErrors,\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\tendLine: message.endLine,\n\t\t\t\t\tendColumn: message.endColumn,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\tendLine: cssSyntaxError.endLine,\n\t\t\t\t\tendColumn: cssSyntaxError.endColumn,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n","import normalize from \"stylelint/lib/normalizeAllRuleSettings\";\n\nexport default async stylelint => ({\n  config: normalize(stylelint._options.config)\n});\n","let tokenizer = require('postcss/lib/tokenize')\nlet Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n  }\n}\n\nmodule.exports = SafeParser\n","let { Input } = require('postcss')\n\nlet SafeParser = require('./safe-parser')\n\nmodule.exports = function safeParse(css, opts) {\n  let input = new Input(css, opts)\n\n  let parser = new SafeParser(input)\n  parser.parse()\n\n  return parser.root\n}\n","'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\nconst path = require('path');\nconst { default: postcss } = require('postcss');\nconst { promises: fs } = require('fs');\n\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('postcss').Syntax} Syntax */\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\nconst postcssProcessor = postcss();\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\nmodule.exports = async function getPostcssResult(stylelint, options = {}) {\n\tconst cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tif (stylelint._options.syntax) {\n\t\tlet error = 'The \"syntax\" option is no longer available. ';\n\n\t\terror +=\n\t\t\tstylelint._options.syntax === 'css'\n\t\t\t\t? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default'\n\t\t\t\t: `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n\n\t\treturn Promise.reject(new Error(error));\n\t}\n\n\tconst syntax = options.customSyntax\n\t\t? getCustomSyntax(options.customSyntax)\n\t\t: cssSyntax(stylelint, options.filePath);\n\n\tconst postcssOptions = {\n\t\tfrom: options.filePath,\n\t\tsyntax,\n\t};\n\n\t/** @type {string | undefined} */\n\tlet getCode;\n\n\tif (options.code !== undefined) {\n\t\tgetCode = options.code;\n\t} else if (options.filePath) {\n\t\tgetCode = await fs.readFile(options.filePath, 'utf8');\n\t}\n\n\tif (getCode === undefined) {\n\t\treturn Promise.reject(new Error('code or filePath required'));\n\t}\n\n\tif (options.codeProcessors && options.codeProcessors.length) {\n\t\tif (stylelint._options.fix) {\n\t\t\tconsole.warn(\n\t\t\t\t'Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?',\n\t\t\t);\n\t\t\tstylelint._options.fix = false;\n\t\t}\n\n\t\tconst sourceName = options.code ? options.codeFilename : options.filePath;\n\n\t\tfor (const codeProcessor of options.codeProcessors) {\n\t\t\tgetCode = codeProcessor(getCode, sourceName);\n\t\t}\n\t}\n\n\tconst postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n\tif (options.filePath) {\n\t\tstylelint._postcssResultCache.set(options.filePath, postcssResult);\n\t}\n\n\treturn postcssResult;\n};\n\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\nfunction getCustomSyntax(customSyntax) {\n\tlet resolved;\n\n\tif (typeof customSyntax === 'string') {\n\t\ttry {\n\t\t\tresolved = require(customSyntax);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror &&\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.code === 'MODULE_NOT_FOUND' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.message.includes(customSyntax)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/*\n\t\t * PostCSS allows for syntaxes that only contain a parser, however,\n\t\t * it then expects the syntax to be set as the `parse` option.\n\t\t */\n\t\tif (!resolved.parse) {\n\t\t\tresolved = {\n\t\t\t\tparse: resolved,\n\t\t\t\tstringify: postcss.stringify,\n\t\t\t};\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tif (typeof customSyntax === 'object') {\n\t\tif (typeof customSyntax.parse === 'function') {\n\t\t\tresolved = { ...customSyntax };\n\t\t} else {\n\t\t\tthrow new TypeError(\n\t\t\t\t`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`,\n\t\t\t);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tthrow new Error(`Custom syntax must be a string or a Syntax object`);\n}\n\n/** @type {{ [key: string]: string }} */\nconst previouslyInferredExtensions = {\n\thtml: 'postcss-html',\n\tjs: '@stylelint/postcss-css-in-js',\n\tjsx: '@stylelint/postcss-css-in-js',\n\tless: 'postcss-less',\n\tmd: 'postcss-markdown',\n\tsass: 'postcss-sass',\n\tsss: 'sugarss',\n\tscss: 'postcss-scss',\n\tsvelte: 'postcss-html',\n\tts: '@stylelint/postcss-css-in-js',\n\ttsx: '@stylelint/postcss-css-in-js',\n\tvue: 'postcss-html',\n\txml: 'postcss-html',\n\txst: 'postcss-html',\n};\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\nfunction cssSyntax(stylelint, filePath) {\n\tconst fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n\tconst extensions = ['css', 'pcss', 'postcss'];\n\n\tif (previouslyInferredExtensions[fileExtension]) {\n\t\tconsole.warn(\n\t\t\t`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`,\n\t\t);\n\t}\n\n\treturn {\n\t\tparse:\n\t\t\tstylelint._options.fix && extensions.includes(fileExtension)\n\t\t\t\t? require('postcss-safe-parser')\n\t\t\t\t: postcss.parse,\n\t\tstringify: postcss.stringify,\n\t};\n}\n","export default async () => false;\n","'use strict';\n\nconst util = require('util');\n\n/**\n * @param {unknown} error\n * @returns {error is NodeJS.ErrnoException}\n */\nmodule.exports = function isPathNotFoundError(error) {\n\t// @ts-expect-error -- TS2339: Property 'code' does not exist on type 'Error'.\n\treturn util.types.isNativeError(error) && error.code === 'ENOENT';\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\nconst { assert, assertNumber, assertString } = require('./utils/validateTypes');\n\nconst COMMAND_PREFIX = 'stylelint-';\nconst disableCommand = `${COMMAND_PREFIX}disable`;\nconst enableCommand = `${COMMAND_PREFIX}enable`;\nconst disableLineCommand = `${COMMAND_PREFIX}disable-line`;\nconst disableNextLineCommand = `${COMMAND_PREFIX}disable-next-line`;\nconst ALL_RULES = 'all';\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('postcss').Root} PostcssRoot */\n/** @typedef {import('postcss').Document} PostcssDocument */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n\treturn {\n\t\tcomment,\n\t\tstart,\n\t\tend: end || undefined,\n\t\tstrictStart,\n\t\tstrictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n\t\tdescription,\n\t};\n}\n\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\nmodule.exports = function assignDisabledRanges(root, result) {\n\tresult.stylelint = result.stylelint || {\n\t\tdisabledRanges: {},\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t/**\n\t * Most of the functions below work via side effects mutating this object\n\t * @type {DisabledRangeObject & { all: DisabledRange[] }}\n\t */\n\tconst disabledRanges = {\n\t\t[ALL_RULES]: [],\n\t};\n\n\tresult.stylelint.disabledRanges = disabledRanges;\n\n\t// Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n\t// into a single node before passing to `checkComment`.\n\n\t/** @type {PostcssComment?} */\n\tlet inlineEnd;\n\n\troot.walkComments((comment) => {\n\t\tif (inlineEnd) {\n\t\t\t// Ignore comments already processed by grouping with a previous one.\n\t\t\tif (inlineEnd === comment) inlineEnd = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextComment = comment.next();\n\n\t\t// If any of these conditions are not met, do not merge comments.\n\t\tif (\n\t\t\t!(\n\t\t\t\t!isStandardSyntaxComment(comment) &&\n\t\t\t\tisStylelintCommand(comment) &&\n\t\t\t\tnextComment &&\n\t\t\t\tnextComment.type === 'comment' &&\n\t\t\t\t(comment.text.includes('--') || nextComment.text.startsWith('--'))\n\t\t\t)\n\t\t) {\n\t\t\tcheckComment(comment);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastLine = (comment.source && comment.source.end && comment.source.end.line) || 0;\n\t\tconst fullComment = comment.clone();\n\n\t\tlet current = nextComment;\n\n\t\twhile (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n\t\t\tconst currentLine = (current.source && current.source.end && current.source.end.line) || 0;\n\n\t\t\tif (lastLine + 1 !== currentLine) break;\n\n\t\t\tfullComment.text += `\\n${current.text}`;\n\n\t\t\tif (fullComment.source && current.source) {\n\t\t\t\tfullComment.source.end = current.source.end;\n\t\t\t}\n\n\t\t\tinlineEnd = current;\n\t\t\tconst next = current.next();\n\n\t\t\tif (!next || next.type !== 'comment') break;\n\n\t\t\tcurrent = next;\n\t\t\tlastLine = currentLine;\n\t\t}\n\n\t\tcheckComment(fullComment);\n\t});\n\n\treturn result;\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction isStylelintCommand(comment) {\n\t\treturn comment.text.startsWith(disableCommand) || comment.text.startsWith(enableCommand);\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableLineCommand(comment) {\n\t\tif (comment.source && comment.source.start) {\n\t\t\tconst line = comment.source.start.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableNextLineCommand(comment) {\n\t\tif (comment.source && comment.source.end) {\n\t\t\tconst line = comment.source.end.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableNextLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line + 1, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {string|undefined} description\n\t */\n\tfunction disableLine(comment, line, ruleName, description) {\n\t\tif (ruleIsDisabled(ALL_RULES)) {\n\t\t\tthrow comment.error('All rules have already been disabled', {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\n\t\tif (ruleName === ALL_RULES) {\n\t\t\tfor (const disabledRuleName of Object.keys(disabledRanges)) {\n\t\t\t\tif (ruleIsDisabled(disabledRuleName)) continue;\n\n\t\t\t\tconst strict = disabledRuleName === ALL_RULES;\n\n\t\t\t\tstartDisabledRange(comment, line, disabledRuleName, strict, description);\n\t\t\t\tendDisabledRange(line, disabledRuleName, strict);\n\t\t\t}\n\t\t} else {\n\t\t\tif (ruleIsDisabled(ruleName)) {\n\t\t\t\tthrow comment.error(`\"${ruleName}\" has already been disabled`, {\n\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstartDisabledRange(comment, line, ruleName, true, description);\n\t\t\tendDisabledRange(line, ruleName, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableCommand(comment) {\n\t\tconst description = getDescription(comment.text);\n\n\t\tfor (const ruleToDisable of getCommandRules(disableCommand, comment.text)) {\n\t\t\tconst isAllRules = ruleToDisable === ALL_RULES;\n\n\t\t\tif (ruleIsDisabled(ruleToDisable)) {\n\t\t\t\tthrow comment.error(\n\t\t\t\t\tisAllRules\n\t\t\t\t\t\t? 'All rules have already been disabled'\n\t\t\t\t\t\t: `\"${ruleToDisable}\" has already been disabled`,\n\t\t\t\t\t{\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (comment.source && comment.source.start) {\n\t\t\t\tconst line = comment.source.start.line;\n\n\t\t\t\tif (isAllRules) {\n\t\t\t\t\tfor (const ruleName of Object.keys(disabledRanges)) {\n\t\t\t\t\t\tstartDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartDisabledRange(comment, line, ruleToDisable, true, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processEnableCommand(comment) {\n\t\tfor (const ruleToEnable of getCommandRules(enableCommand, comment.text)) {\n\t\t\t// need fallback if endLine will be undefined\n\t\t\tconst endLine = comment.source && comment.source.end && comment.source.end.line;\n\n\t\t\tassertNumber(endLine);\n\n\t\t\tif (ruleToEnable === ALL_RULES) {\n\t\t\t\tif (\n\t\t\t\t\tObject.values(disabledRanges).every((ranges) => {\n\t\t\t\t\t\tif (ranges.length === 0) return true;\n\n\t\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\t\treturn lastRange && typeof lastRange.end === 'number';\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tthrow comment.error('No rules have been disabled', {\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\tif (!lastRange || !lastRange.end) {\n\t\t\t\t\t\tendDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n\t\t\t\t// Get a starting point from the where all rules were disabled\n\t\t\t\tdisabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(\n\t\t\t\t\t({ start, end, description }) =>\n\t\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t\t);\n\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ruleToEnable)) {\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction checkComment(comment) {\n\t\tconst text = comment.text;\n\n\t\t// Ignore comments that are not relevant commands\n\n\t\tif (text.indexOf(COMMAND_PREFIX) !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (text.startsWith(disableLineCommand)) {\n\t\t\tprocessDisableLineCommand(comment);\n\t\t} else if (text.startsWith(disableNextLineCommand)) {\n\t\t\tprocessDisableNextLineCommand(comment);\n\t\t} else if (text.startsWith(disableCommand)) {\n\t\t\tprocessDisableCommand(comment);\n\t\t} else if (text.startsWith(enableCommand)) {\n\t\t\tprocessEnableCommand(comment);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} command\n\t * @param {string} fullText\n\t * @returns {string[]}\n\t */\n\tfunction getCommandRules(command, fullText) {\n\t\t// Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n\t\tconst splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n\n\t\tassertString(splitted);\n\t\tconst rules = splitted\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.filter(Boolean)\n\t\t\t.map((r) => r.trim());\n\n\t\tif (rules.length === 0) {\n\t\t\treturn [ALL_RULES];\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * @param {string} fullText\n\t * @returns {string|undefined}\n\t */\n\tfunction getDescription(fullText) {\n\t\tconst descriptionStart = fullText.indexOf('--');\n\n\t\tif (descriptionStart === -1) return;\n\n\t\treturn fullText.slice(descriptionStart + 2).trim();\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t * @param {string|undefined} description\n\t */\n\tfunction startDisabledRange(comment, line, ruleName, strict, description) {\n\t\tconst rangeObj = createDisableRange(comment, line, strict, description);\n\n\t\tensureRuleRanges(ruleName);\n\n\t\tconst range = disabledRanges[ruleName];\n\n\t\tassert(range);\n\t\trange.push(rangeObj);\n\t}\n\n\t/**\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t */\n\tfunction endDisabledRange(line, ruleName, strict) {\n\t\tconst ranges = disabledRanges[ruleName];\n\t\tconst lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n\t\tif (!lastRangeForRule) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add an `end` prop to the last range of that rule\n\t\tlastRangeForRule.end = line;\n\t\tlastRangeForRule.strictEnd = strict;\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t */\n\tfunction ensureRuleRanges(ruleName) {\n\t\tif (!disabledRanges[ruleName]) {\n\t\t\tdisabledRanges[ruleName] = disabledRanges[ALL_RULES].map(\n\t\t\t\t({ comment, start, end, description }) =>\n\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t * @returns {boolean}\n\t */\n\tfunction ruleIsDisabled(ruleName) {\n\t\tconst ranges = disabledRanges[ruleName];\n\n\t\tif (!ranges) return false;\n\n\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\tif (!lastRange) return false;\n\n\t\tif (!lastRange.end) return true;\n\n\t\treturn false;\n\t}\n};\n","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = Array.from({ length: MAX_LEVENSHTEIN_DISTANCE });\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tfor (const existRuleName of Object.keys(rules)) {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t}\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (const [i, suggestion] of suggestions.entries()) {\n\t\tif (suggestion.length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestion);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t});\n};\n","'use strict';\n\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\nconst lintPostcssResult = require('./lintPostcssResult');\nconst path = require('path');\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = async function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst isIgnored = await stylelint.isPathIgnored(inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) return false;\n\n\t\tthrow err;\n\t});\n\n\tif (isIgnored) {\n\t\treturn options.existingPostcssResult\n\t\t\t? Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t  })\n\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t}\n\n\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\tconst cwd = stylelint._options.cwd;\n\n\tconst configForFile = await stylelint\n\t\t.getConfigForFile(configSearchPath, inputFilePath)\n\t\t.catch((err) => {\n\t\t\tif (isCodeNotFile && isPathNotFoundError(err)) return stylelint.getConfigForFile(cwd);\n\n\t\t\tthrow err;\n\t\t});\n\n\tif (!configForFile) {\n\t\treturn Promise.reject(new Error('Config file not found'));\n\t}\n\n\tconst config = configForFile.config;\n\tconst existingPostcssResult = options.existingPostcssResult;\n\n\t/** @type {StylelintPostcssResult} */\n\tconst stylelintResult = {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t};\n\n\tconst postcssResult =\n\t\texistingPostcssResult ||\n\t\t(await stylelint._getPostcssResult({\n\t\t\tcode: options.code,\n\t\t\tcodeFilename: options.codeFilename,\n\t\t\tfilePath: inputFilePath,\n\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\tcustomSyntax: config.customSyntax,\n\t\t}));\n\n\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\tstylelint: stylelintResult,\n\t});\n\n\tawait lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n\n\treturn stylelintPostcssResult;\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n","'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.ruleMetadata = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string | undefined} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (\n\t\tpostcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]\n\t);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rulesOrder = Object.keys(rules);\n\tconst ruleNames = config.rules\n\t\t? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b))\n\t\t: [];\n\n\tfor (const ruleName of ruleNames) {\n\t\tconst ruleFunction =\n\t\t\trules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ruleSettings = config.rules && config.rules[ruleName];\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\t\t// disableFix in secondary option\n\t\tconst disableFix = (secondaryOptions && secondaryOptions.disableFix === true) || false;\n\n\t\tif (disableFix) {\n\t\t\tpostcssResult.stylelint.ruleDisableFix = true;\n\t\t}\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] =\n\t\t\t(secondaryOptions && secondaryOptions.severity) || defaultSeverity;\n\t\tpostcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n\t\tpostcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\t!disableFix &&\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n","export const EOL = \"\\n\";\nexport const release = () => \"\";\n","'use strict';\n\nconst augmentConfig = require('./augmentConfig');\nconst createStylelintResult = require('./createStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst lintSource = require('./lintSource');\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @param {import('stylelint').LinterOptions} options\n * @returns {StylelintInternalApi}\n */\nfunction createStylelint(options = {}) {\n\tconst cwd = options.cwd || process.cwd();\n\n\t/** @type {StylelintInternalApi} */\n\t// @ts-expect-error -- TS2740: Type '{ _options: LinterOptions; }' is missing the following properties from type 'InternalApi'\n\tconst stylelint = { _options: { ...options, cwd } };\n\n\tstylelint._extendExplorer = cosmiconfig('', {\n\t\ttransform: augmentConfig.augmentConfigExtended(cwd),\n\t\tstopDir: STOP_DIR,\n\t});\n\n\tstylelint._specifiedConfigCache = new Map();\n\tstylelint._postcssResultCache = new Map();\n\tstylelint._createStylelintResult = createStylelintResult.bind(null, stylelint);\n\tstylelint._getPostcssResult = getPostcssResult.bind(null, stylelint);\n\tstylelint._lintSource = lintSource.bind(null, stylelint);\n\n\tstylelint.getConfigForFile = getConfigForFile.bind(null, stylelint);\n\tstylelint.isPathIgnored = isPathIgnored.bind(null, stylelint);\n\n\treturn stylelint;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').createLinter} */ (createStylelint);\n","'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n","/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n\tif (Number.isNaN(codePoint)) {\n\t\treturn false;\n\t}\n\n\t// Code points are derived from:\n\t// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\tif (\n\t\tcodePoint >= 0x1100 && (\n\t\t\tcodePoint <= 0x115F || // Hangul Jamo\n\t\t\tcodePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n\t\t\tcodePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n\t\t\t// CJK Radicals Supplement .. Enclosed CJK Letters and Months\n\t\t\t(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||\n\t\t\t// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n\t\t\t(0x3250 <= codePoint && codePoint <= 0x4DBF) ||\n\t\t\t// CJK Unified Ideographs .. Yi Radicals\n\t\t\t(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||\n\t\t\t// Hangul Jamo Extended-A\n\t\t\t(0xA960 <= codePoint && codePoint <= 0xA97C) ||\n\t\t\t// Hangul Syllables\n\t\t\t(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||\n\t\t\t// CJK Compatibility Ideographs\n\t\t\t(0xF900 <= codePoint && codePoint <= 0xFAFF) ||\n\t\t\t// Vertical Forms\n\t\t\t(0xFE10 <= codePoint && codePoint <= 0xFE19) ||\n\t\t\t// CJK Compatibility Forms .. Small Form Variants\n\t\t\t(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||\n\t\t\t// Halfwidth and Fullwidth Forms\n\t\t\t(0xFF01 <= codePoint && codePoint <= 0xFF60) ||\n\t\t\t(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||\n\t\t\t// Kana Supplement\n\t\t\t(0x1B000 <= codePoint && codePoint <= 0x1B001) ||\n\t\t\t// Enclosed Ideographic Supplement\n\t\t\t(0x1F200 <= codePoint && codePoint <= 0x1F251) ||\n\t\t\t// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n\t\t\t(0x20000 <= codePoint && codePoint <= 0x3FFFD)\n\t\t)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n","'use strict';\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\n\nconst stringWidth = string => {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tlet width = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst code = string.codePointAt(i);\n\n\t\t// Ignore control characters\n\t\tif (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (code >= 0x300 && code <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Surrogates\n\t\tif (code > 0xFFFF) {\n\t\t\ti++;\n\t\t}\n\n\t\twidth += isFullwidthCodePoint(code) ? 2 : 1;\n\t}\n\n\treturn width;\n};\n\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n","\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","'use strict';\nconst supportsColor = require('supports-color');\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n\tif (/^\\d{3,4}$/.test(versionString)) {\n\t\t// Env var doesn't always use dots. example: 4601 => 46.1.0\n\t\tconst m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n\t\treturn {\n\t\t\tmajor: 0,\n\t\t\tminor: parseInt(m[1], 10),\n\t\t\tpatch: parseInt(m[2], 10)\n\t\t};\n\t}\n\n\tconst versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n\treturn {\n\t\tmajor: versions[0],\n\t\tminor: versions[1],\n\t\tpatch: versions[2]\n\t};\n}\n\nfunction supportsHyperlink(stream) {\n\tconst {env} = process;\n\n\tif ('FORCE_HYPERLINK' in env) {\n\t\treturn !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n\t}\n\n\tif (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n\t\treturn true;\n\t}\n\n\t// If they specify no colors, they probably don't want hyperlinks.\n\tif (!supportsColor.supportsColor(stream)) {\n\t\treturn false;\n\t}\n\n\tif (stream && !stream.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn false;\n\t}\n\n\tif ('NETLIFY' in env) {\n\t\treturn true;\n\t}\n\n\tif ('CI' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\tif (version.major === 3) {\n\t\t\t\t\treturn version.minor >= 1;\n\t\t\t\t}\n\n\t\t\t\treturn version.major > 3;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif ('VTE_VERSION' in env) {\n\t\t// 0.50.0 was supposed to support hyperlinks, but throws a segfault\n\t\tif (env.VTE_VERSION === '0.50.0') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst version = parseVersion(env.VTE_VERSION);\n\t\treturn version.major > 0 || version.minor >= 50;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tsupportsHyperlink,\n\tstdout: supportsHyperlink(process.stdout),\n\tstderr: supportsHyperlink(process.stderr)\n};\n","export const isatty = () => false;\n","const supportsHyperlinks = require('supports-hyperlinks');\n\n// ANSI escapes\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\n\n/**\n * @see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n *\n * @param {string} text\n * @param {string} url\n * @returns {string}\n */\nmodule.exports = function terminalLink(text, url) {\n\tif (supportsHyperlinks.stdout) {\n\t\treturn [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n\t}\n\n\treturn text;\n};\n","'use strict';\n\nconst path = require('path');\nconst stringWidth = require('string-width');\nconst table = require('table');\nconst { yellow, dim, underline, blue, red, green } = require('picocolors');\n\nconst { assertNumber } = require('../utils/validateTypes');\nconst terminalLink = require('./terminalLink');\n\nconst MARGIN_WIDTHS = 9;\n\n/**\n * @param {string} s\n * @returns {string}\n */\nfunction nope(s) {\n\treturn s;\n}\n\nconst levelColors = {\n\tinfo: blue,\n\twarning: yellow,\n\terror: red,\n\tsuccess: nope,\n};\n\nconst symbols = {\n\tinfo: blue('ℹ'),\n\twarning: yellow('⚠'),\n\terror: red('✖'),\n\tsuccess: green('✔'),\n};\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @returns {string}\n */\nfunction deprecationsFormatter(results) {\n\tconst allDeprecationWarnings = results.flatMap((result) => result.deprecations);\n\n\tif (allDeprecationWarnings.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst seenText = new Set();\n\n\treturn allDeprecationWarnings.reduce((output, warning) => {\n\t\tif (seenText.has(warning.text)) return output;\n\n\t\tseenText.add(warning.text);\n\n\t\toutput += yellow('Deprecation Warning: ');\n\t\toutput += warning.text;\n\n\t\tif (warning.reference) {\n\t\t\toutput += dim(' See: ');\n\t\t\toutput += dim(underline(warning.reference));\n\t\t}\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @return {string}\n */\nfunction invalidOptionsFormatter(results) {\n\tconst allInvalidOptionWarnings = results.flatMap((result) =>\n\t\tresult.invalidOptionWarnings.map((warning) => warning.text),\n\t);\n\tconst uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n\n\treturn uniqueInvalidOptionWarnings.reduce((output, warning) => {\n\t\toutput += red('Invalid Option: ');\n\t\toutput += warning;\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {string} fromValue\n * @param {string} cwd\n * @return {string}\n */\nfunction logFrom(fromValue, cwd) {\n\tif (fromValue.startsWith('<')) {\n\t\treturn underline(fromValue);\n\t}\n\n\tconst filePath = path.relative(cwd, fromValue).split(path.sep).join('/');\n\n\treturn terminalLink(filePath, `file://${fromValue}`);\n}\n\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\nfunction getMessageWidth(columnWidths) {\n\tconst width = columnWidths[3];\n\n\tassertNumber(width);\n\n\tif (!process.stdout.isTTY) {\n\t\treturn width;\n\t}\n\n\tconst availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n\tconst fullWidth = Object.values(columnWidths).reduce((a, b) => a + b);\n\n\t// If there is no reason to wrap the text, we won't align the last column to the right\n\tif (availableWidth > fullWidth + MARGIN_WIDTHS) {\n\t\treturn width;\n\t}\n\n\treturn availableWidth - (fullWidth - width + MARGIN_WIDTHS);\n}\n\n/**\n * @param {import('stylelint').Warning[]} messages\n * @param {string} source\n * @param {string} cwd\n * @return {string}\n */\nfunction formatter(messages, source, cwd) {\n\tif (!messages.length) return '';\n\n\tconst orderedMessages = [...messages].sort((a, b) => {\n\t\t// positionless first\n\t\tif (!a.line && b.line) return -1;\n\n\t\t// positionless first\n\t\tif (a.line && !b.line) return 1;\n\n\t\tif (a.line < b.line) return -1;\n\n\t\tif (a.line > b.line) return 1;\n\n\t\tif (a.column < b.column) return -1;\n\n\t\tif (a.column > b.column) return 1;\n\n\t\treturn 0;\n\t});\n\n\t/**\n\t * Create a list of column widths, needed to calculate\n\t * the size of the message column and if needed wrap it.\n\t * @type {{[k: string]: number}}\n\t */\n\tconst columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 };\n\n\t/**\n\t * @param {[string, string, string, string, string]} columns\n\t * @return {[string, string, string, string, string]}\n\t */\n\tfunction calculateWidths(columns) {\n\t\tfor (const [key, value] of Object.entries(columns)) {\n\t\t\tconst normalisedValue = value ? value.toString() : value;\n\t\t\tconst width = columnWidths[key];\n\n\t\t\tassertNumber(width);\n\t\t\tcolumnWidths[key] = Math.max(width, stringWidth(normalisedValue));\n\t\t}\n\n\t\treturn columns;\n\t}\n\n\tlet output = '\\n';\n\n\tif (source) {\n\t\toutput += `${logFrom(source, cwd)}\\n`;\n\t}\n\n\t/**\n\t * @param {import('stylelint').Warning} message\n\t * @return {string}\n\t */\n\tfunction formatMessageText(message) {\n\t\tlet result = message.text;\n\n\t\tresult = result\n\t\t\t// Remove all control characters (newline, tab and etc)\n\t\t\t.replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n\t\t\t.replace(/\\.$/, '');\n\n\t\tconst ruleString = ` (${message.rule})`;\n\n\t\tif (result.endsWith(ruleString)) {\n\t\t\tresult = result.slice(0, result.lastIndexOf(ruleString));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tconst cleanedMessages = orderedMessages.map((message) => {\n\t\tconst { line, column, severity } = message;\n\t\t/**\n\t\t * @type {[string, string, string, string, string]}\n\t\t */\n\t\tconst row = [\n\t\t\tline ? line.toString() : '',\n\t\t\tcolumn ? column.toString() : '',\n\t\t\tsymbols[severity] ? levelColors[severity](symbols[severity]) : severity,\n\t\t\tformatMessageText(message),\n\t\t\tdim(message.rule || ''),\n\t\t];\n\n\t\tcalculateWidths(row);\n\n\t\treturn row;\n\t});\n\n\toutput += table\n\t\t.table(cleanedMessages, {\n\t\t\tborder: table.getBorderCharacters('void'),\n\t\t\tcolumns: {\n\t\t\t\t0: { alignment: 'right', width: columnWidths[0], paddingRight: 0 },\n\t\t\t\t1: { alignment: 'left', width: columnWidths[1] },\n\t\t\t\t2: { alignment: 'center', width: columnWidths[2] },\n\t\t\t\t3: {\n\t\t\t\t\talignment: 'left',\n\t\t\t\t\twidth: getMessageWidth(columnWidths),\n\t\t\t\t\twrapWord: getMessageWidth(columnWidths) > 1,\n\t\t\t\t},\n\t\t\t\t4: { alignment: 'left', width: columnWidths[4], paddingRight: 0 },\n\t\t\t},\n\t\t\tdrawHorizontalLine: () => false,\n\t\t})\n\t\t.split('\\n')\n\t\t.map(\n\t\t\t/**\n\t\t\t * @param {string} el\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\t(el) => el.replace(/(\\d+)\\s+(\\d+)/, (_m, p1, p2) => dim(`${p1}:${p2}`)),\n\t\t)\n\t\t.join('\\n');\n\n\treturn output;\n}\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function (results, returnValue) {\n\tlet output = invalidOptionsFormatter(results);\n\n\toutput += deprecationsFormatter(results);\n\n\toutput = results.reduce((accum, result) => {\n\t\t// Treat parseErrors as warnings\n\t\tif (result.parseErrors) {\n\t\t\tfor (const error of result.parseErrors)\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\tline: error.line,\n\t\t\t\t\tcolumn: error.column,\n\t\t\t\t\trule: error.stylelintType,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${error.text} (${error.stylelintType})`,\n\t\t\t\t});\n\t\t}\n\n\t\taccum += formatter(\n\t\t\tresult.warnings,\n\t\t\tresult.source || '',\n\t\t\t(returnValue && returnValue.cwd) || process.cwd(),\n\t\t);\n\n\t\treturn accum;\n\t}, output);\n\n\t// Ensure consistent padding\n\toutput = output.trim();\n\n\tif (output !== '') {\n\t\toutput = `\\n${output}\\n\\n`;\n\t}\n\n\treturn output;\n};\n","'use strict';\n\nconst stringFormatter = require('./stringFormatter');\nconst { underline, red, yellow, dim, green } = require('picocolors');\nconst terminalLink = require('./terminalLink');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} LintResult */\n/** @typedef {import('stylelint').Warning} Warning */\n\n/**\n * @type {Formatter}\n */\nmodule.exports = function (results, returnValue) {\n\tlet output = stringFormatter(results, returnValue);\n\n\tif (output === '') {\n\t\toutput = '\\n';\n\t}\n\n\tconst sourceWord = results.length > 1 ? 'sources' : 'source';\n\tconst ignoredCount = results.filter((result) => result.ignored).length;\n\tconst checkedDisplay = ignoredCount\n\t\t? `${results.length - ignoredCount} of ${results.length}`\n\t\t: results.length;\n\n\toutput += underline(`${checkedDisplay} ${sourceWord} checked\\n`);\n\n\tfor (const result of results) {\n\t\tlet formatting = green;\n\n\t\tif (result.errored) {\n\t\t\tformatting = red;\n\t\t} else if (result.warnings.length) {\n\t\t\tformatting = yellow;\n\t\t} else if (result.ignored) {\n\t\t\tformatting = dim;\n\t\t}\n\n\t\tlet sourceText = fileLink(result.source);\n\n\t\tif (result.ignored) {\n\t\t\tsourceText += ' (ignored)';\n\t\t}\n\n\t\toutput += formatting(` ${sourceText}\\n`);\n\t}\n\n\tconst warnings = results.flatMap((r) => r.warnings);\n\tconst warningsBySeverity = groupBy(warnings, (w) => w.severity);\n\tconst problemWord = warnings.length === 1 ? 'problem' : 'problems';\n\n\toutput += underline(`\\n${warnings.length} ${problemWord} found\\n`);\n\n\tconst metadata = ruleMetadata(results);\n\n\tfor (const [severityLevel, warningList] of Object.entries(warningsBySeverity)) {\n\t\tconst warningsByRule = groupBy(warningList, (w) => w.rule);\n\n\t\toutput += ` severity level \"${severityLevel}\": ${warningList.length}\\n`;\n\n\t\tfor (const [rule, list] of Object.entries(warningsByRule)) {\n\t\t\toutput += dim(`  ${ruleLink(rule, metadata[rule])}: ${list.length}\\n`);\n\t\t}\n\t}\n\n\treturn `${output}\\n`;\n};\n\n/**\n * @param {Warning[]} array\n * @param {(w: Warning) => string} keyFn\n * @returns {Record<string, Warning[]>}\n */\nfunction groupBy(array, keyFn) {\n\t/** @type {Record<string, Warning[]>} */\n\tconst result = {};\n\n\tfor (const item of array) {\n\t\tconst key = keyFn(item);\n\t\tlet warnings = result[key];\n\n\t\tif (warnings === undefined) {\n\t\t\tresult[key] = warnings = [];\n\t\t}\n\n\t\twarnings.push(item);\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {string | undefined} source\n * @returns {string}\n */\nfunction fileLink(source) {\n\tif (!source || source.startsWith('<')) {\n\t\treturn `${source}`;\n\t}\n\n\treturn terminalLink(source, `file://${source}`);\n}\n\n/**\n * @param {LintResult[]} results\n * @returns {Record<string, { url?: string }>}\n */\nfunction ruleMetadata(results) {\n\tconst firstResult = results[0];\n\n\treturn (\n\t\t(firstResult &&\n\t\t\tfirstResult._postcssResult &&\n\t\t\tfirstResult._postcssResult.stylelint &&\n\t\t\tfirstResult._postcssResult.stylelint.ruleMetadata) ||\n\t\t{}\n\t);\n}\n\n/**\n * @param {string} rule\n * @param {{ url?: string } | undefined} metadata\n * @returns {string}\n */\nfunction ruleLink(rule, metadata) {\n\tif (metadata && metadata.url) {\n\t\treturn terminalLink(rule, metadata.url);\n\t}\n\n\treturn rule;\n}\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').formatters} */\nconst formatters = {\n\tcompact: importLazy('./compactFormatter'),\n\tjson: importLazy('./jsonFormatter'),\n\tstring: importLazy('./stringFormatter'),\n\ttap: importLazy('./tapFormatter'),\n\tunix: importLazy('./unixFormatter'),\n\tverbose: importLazy('./verboseFormatter'),\n};\n\nmodule.exports = formatters;\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst formatter = (results) =>\n\tresults\n\t\t.flatMap((result) =>\n\t\t\tresult.warnings.map(\n\t\t\t\t(warning) =>\n\t\t\t\t\t`${result.source}: ` +\n\t\t\t\t\t`line ${warning.line}, ` +\n\t\t\t\t\t`col ${warning.column}, ` +\n\t\t\t\t\t`${warning.severity} - ` +\n\t\t\t\t\t`${warning.text}`,\n\t\t\t),\n\t\t)\n\t\t.join('\\n');\n\nmodule.exports = formatter;\n","'use strict';\n\n/**\n * Omit any properties starting with `_`, which are fake-private\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function jsonFormatter(results) {\n\tconst cleanedResults = results.map((result) =>\n\t\tObject.entries(result)\n\t\t\t.filter(([key]) => !key.startsWith('_'))\n\t\t\t.reduce((/** @type {{ [key: string]: any }} */ obj, [key, value]) => {\n\t\t\t\tobj[key] = value;\n\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t);\n\n\treturn JSON.stringify(cleanedResults);\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst tapFormatter = (results) => {\n\tconst lines = [`TAP version 13\\n1..${results.length}`];\n\n\tfor (const [index, result] of results.entries()) {\n\t\tlines.push(\n\t\t\t`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${\n\t\t\t\tresult.source\n\t\t\t}`,\n\t\t);\n\n\t\tif (result.warnings.length > 0) {\n\t\t\tlines.push('---', 'messages:');\n\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlines.push(\n\t\t\t\t\t` - message: \"${warning.text}\"`,\n\t\t\t\t\t`   severity: ${warning.severity}`,\n\t\t\t\t\t`   data:`,\n\t\t\t\t\t`     line: ${warning.line}`,\n\t\t\t\t\t`     column: ${warning.column}`,\n\t\t\t\t\t`     endLine: ${warning.endLine}`,\n\t\t\t\t\t`     endColumn: ${warning.endColumn}`,\n\t\t\t\t\t`     ruleId: ${warning.rule}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlines.push('---');\n\t\t}\n\t}\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n};\n\nmodule.exports = tapFormatter;\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst unixFormatter = (results) => {\n\tconst lines = results.flatMap((result) =>\n\t\tresult.warnings.map(\n\t\t\t(warning) =>\n\t\t\t\t`${result.source}:${warning.line}:${warning.column}: ` +\n\t\t\t\t`${warning.text} [${warning.severity}]\\n`,\n\t\t),\n\t);\n\tconst total = lines.length;\n\tlet output = lines.join('');\n\n\tif (total > 0) {\n\t\toutput += `\\n${total} problem${total !== 1 ? 's' : ''}\\n`;\n\t}\n\n\treturn output;\n};\n\nmodule.exports = unixFormatter;\n","'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\nmodule.exports = (options = {}) => {\n\tconst [cwd, tailoredOptions] = isConfig(options)\n\t\t? [process.cwd(), { config: options }]\n\t\t: [options.cwd || process.cwd(), options];\n\tconst stylelint = createStylelint(tailoredOptions);\n\n\treturn {\n\t\tpostcssPlugin: 'stylelint',\n\t\tOnce(root, { result }) {\n\t\t\tlet filePath = root.source && root.source.input.file;\n\n\t\t\tif (filePath && !path.isAbsolute(filePath)) {\n\t\t\t\tfilePath = path.join(cwd, filePath);\n\t\t\t}\n\n\t\t\treturn stylelint._lintSource({\n\t\t\t\tfilePath,\n\t\t\t\texistingPostcssResult: result,\n\t\t\t});\n\t\t},\n\t};\n};\n\nmodule.exports.postcss = true;\n\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\nfunction isConfig(options) {\n\treturn 'rules' in options;\n}\n","/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n","'use strict';\n\nconst murmur = require('imurmurhash');\n\n/**\n * hash the given string\n * @param  {string} str the string to hash\n * @returns {string} the hash\n */\nmodule.exports = function hash(str) {\n\treturn murmur(str).result().toString(36);\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:file-cache');\nconst fileEntryCache = require('file-entry-cache');\nconst getCacheFile = require('./getCacheFile');\nconst path = require('path');\n\nconst DEFAULT_CACHE_LOCATION = './.stylelintcache';\nconst DEFAULT_HASH = '';\n\n/** @typedef {import('file-entry-cache').FileDescriptor[\"meta\"] & { hashOfConfig?: string }} CacheMetadata */\n\n/**\n * @param {string} [cacheLocation]\n * @param {string} [hashOfConfig]\n * @constructor\n */\nclass FileCache {\n\tconstructor(\n\t\tcacheLocation = DEFAULT_CACHE_LOCATION,\n\t\tcwd = process.cwd(),\n\t\thashOfConfig = DEFAULT_HASH,\n\t) {\n\t\tconst cacheFile = path.resolve(getCacheFile(cacheLocation, cwd));\n\n\t\tdebug(`Cache file is created at ${cacheFile}`);\n\t\tthis._fileCache = fileEntryCache.create(cacheFile);\n\t\tthis._hashOfConfig = hashOfConfig;\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t * @return {boolean}\n\t */\n\thasFileChanged(absoluteFilepath) {\n\t\t// Get file descriptor compares current metadata against cached\n\t\t// one and stores the result to \"changed\" prop.w\n\t\tconst descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);\n\t\t/** @type {CacheMetadata} */\n\t\tconst meta = descriptor.meta || {};\n\t\tconst changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig;\n\n\t\tif (!changed) {\n\t\t\tdebug(`Skip linting ${absoluteFilepath}. File hasn't changed.`);\n\t\t}\n\n\t\t// Mutate file descriptor object and store config hash to each file.\n\t\t// Running lint with different config should invalidate the cache.\n\t\tif (meta.hashOfConfig !== this._hashOfConfig) {\n\t\t\tmeta.hashOfConfig = this._hashOfConfig;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\treconcile() {\n\t\tthis._fileCache.reconcile();\n\t}\n\n\tdestroy() {\n\t\tthis._fileCache.destroy();\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t */\n\tremoveEntry(absoluteFilepath) {\n\t\tthis._fileCache.removeEntry(absoluteFilepath);\n\t}\n}\n\nmodule.exports = FileCache;\n","'use strict';\n\nconst fs = require('fs');\nconst hash = require('./hash');\nconst path = require('path');\n\n/**\n * Return the cacheFile to be used by stylelint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be `cacheFile/.cache_hashOfCWD`.\n *\n * If cacheFile points to a file or looks like a file, then it will just use that file.\n *\n * @param {string} cacheFile - The name of file to be used to store the cache\n * @param {string} cwd - Current working directory. Used for tests\n * @returns {string} Resolved path to the cache file\n */\nmodule.exports = function getCacheFile(cacheFile, cwd) {\n\t/*\n\t * Make sure path separators are normalized for environment/os.\n\t * Also, keep trailing path separator if present.\n\t */\n\tcacheFile = path.normalize(cacheFile);\n\n\tconst resolvedCacheFile = path.resolve(cwd, cacheFile);\n\t// If the last character passed is a path separator, we assume is a directory.\n\tconst looksLikeADirectory = cacheFile[cacheFile.length - 1] === path.sep;\n\n\t/**\n\t * Return the default cache file name when provided parameter is a directory.\n\t * @returns {string} - Resolved path to the cacheFile\n\t */\n\tfunction getCacheFileForDirectory() {\n\t\treturn path.join(resolvedCacheFile, `.stylelintcache_${hash(cwd)}`);\n\t}\n\n\tlet fileStats;\n\n\ttry {\n\t\tfileStats = fs.lstatSync(resolvedCacheFile);\n\t} catch {\n\t\tfileStats = null;\n\t}\n\n\tif (looksLikeADirectory || (fileStats && fileStats.isDirectory())) {\n\t\t// Return path to provided directory with generated file name.\n\t\treturn getCacheFileForDirectory();\n\t}\n\n\t// Return normalized path to cache file.\n\treturn resolvedCacheFile;\n};\n","'use strict';\n\nconst { isPathValid } = require('ignore').default;\n\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n\tconst validForIgnore = filePaths.filter(isPathValid);\n\t// Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\tconst notValidForIgnore = new Set(filePaths.filter((p) => !validForIgnore.includes(p)));\n\n\tconst filteredByIgnore = new Set(ignorer.filter(validForIgnore));\n\n\t// Preserving files order, while removing paths which were filtered by `ignore`\n\treturn filePaths.filter((p) => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};\n","'use strict';\n\nclass NoFilesFoundError extends Error {\n\t/**\n\t * @param {string|string[]} fileList\n\t */\n\tconstructor(fileList) {\n\t\tsuper();\n\n\t\tif (typeof fileList === 'string') {\n\t\t\tfileList = [fileList];\n\t\t}\n\n\t\tconst pattern = fileList.filter((i) => !i.startsWith('!')).join(', ');\n\n\t\tthis.message = `No files matching the pattern \"${pattern}\" were found.`;\n\t}\n}\n\nmodule.exports = NoFilesFoundError;\n","'use strict';\n\nclass AllFilesIgnoredError extends Error {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.message = `All input files were ignored because of the ignore pattern. Either change your input, ignore pattern or use \"--allow-empty-input\" to allow no inputs`;\n\t}\n}\n\nmodule.exports = AllFilesIgnoredError;\n","'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\nconst { isRegExp, isString } = require('./utils/validateTypes');\n\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\nmodule.exports = function (result, field) {\n\t// Files with `CssSyntaxError`s don't have `_postcssResult`s.\n\tif (!result) return null;\n\n\tconst stylelintResult = result.stylelint;\n\n\t// Files with linting errors may not have configs associated with them.\n\tif (!stylelintResult.config) return null;\n\n\tconst rawSettings = stylelintResult.config[field];\n\n\t/** @type {boolean} */\n\tlet enabled;\n\t/** @type {DisableOptions} */\n\tlet options;\n\n\tif (Array.isArray(rawSettings)) {\n\t\tenabled = rawSettings[0];\n\t\toptions = rawSettings[1] || {};\n\t} else {\n\t\tenabled = rawSettings || false;\n\t\toptions = {};\n\t}\n\n\tconst validOptions = validateOptions(\n\t\tresult,\n\t\tfield,\n\t\t{\n\t\t\tactual: enabled,\n\t\t\tpossible: [true, false],\n\t\t},\n\t\t{\n\t\t\tactual: options,\n\t\t\tpossible: {\n\t\t\t\texcept: [isString, isRegExp],\n\t\t\t},\n\t\t},\n\t);\n\n\tif (!validOptions) return null;\n\n\t// If the check is disabled with no exceptions, there's no reason to run\n\t// it at all.\n\tif (!enabled && !options.except) return null;\n\n\treturn [\n\t\tenabled,\n\t\t{\n\t\t\texcept: options.except || [],\n\t\t\tseverity: options.severity || stylelintResult.config.defaultSeverity || 'error',\n\t\t},\n\t\tstylelintResult,\n\t];\n};\n","'use strict';\n\n/**\n * If `map` already has the given `key`, returns its value. Otherwise, calls\n * `callback`, adds the result to `map` at `key`, and then returns it.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {() => V} callback\n * @returns {V}\n */\nmodule.exports = function (map, key, callback) {\n\tif (map.has(key)) return /** @type {V} */ (map.get(key));\n\n\tconst value = callback();\n\n\tmap.set(key, value);\n\n\treturn value;\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst putIfAbsent = require('./utils/putIfAbsent');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function needlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst rangeData = stylelintResult.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst disabledWarnings = stylelintResult.disabledWarnings || [];\n\n\t\t// A map from `stylelint-disable` comments to the set of rules that\n\t\t// are usefully disabled by each comment. We track this\n\t\t// comment-by-comment rather than range-by-range because ranges that\n\t\t// disable *all* rules are duplicated for each rule they apply to in\n\t\t// practice.\n\t\t/** @type {Map<PostcssComment, Set<string>>}} */\n\t\tconst usefulDisables = new Map();\n\n\t\tfor (const warning of disabledWarnings) {\n\t\t\tconst rule = warning.rule;\n\t\t\tconst ruleRanges = rangeData[rule];\n\n\t\t\tif (ruleRanges) {\n\t\t\t\tfor (const range of ruleRanges) {\n\t\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const range of rangeData.all || []) {\n\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst allRangeComments = new Set((rangeData.all || []).map((range) => range.comment));\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\t\tconst useful = usefulDisables.get(range.comment) || new Set();\n\n\t\t\t\t// Only emit a warning if this range's comment isn't useful for this rule.\n\t\t\t\t// For the special rule \"all\", only emit a warning if it's not useful for\n\t\t\t\t// *any* rules, because it covers all of them.\n\t\t\t\tif (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Needless disable for \"${rule}\"`,\n\t\t\t\t\trule: '--report-needless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\nfunction isWarningInRange(warning, range) {\n\tconst line = warning.line;\n\n\t// Need to check if range.end exist, because line number type cannot be compared to undefined\n\treturn (\n\t\trange.start <= line &&\n\t\t((range.end !== undefined && range.end >= line) || range.end === undefined)\n\t);\n}\n","'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\nmodule.exports = function (results) {\n\tfor (const result of results) {\n\t\t// File with `CssSyntaxError` don't have `_postcssResult`s.\n\t\tif (!result._postcssResult) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/** @type {{[ruleName: string]: Array<RangeType>}} */\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst config = result._postcssResult.stylelint.config;\n\n\t\tif (!config || !config.rules) continue;\n\n\t\t// If no rules actually disallow disables, don't bother looking for ranges\n\t\t// that correspond to disabled rules.\n\t\tif (!Object.values(config.rules).some((rule) => reportDisablesForRule(rule))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (!reportDisablesForRule(config.rules[rule] || [])) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" may not be disabled`,\n\t\t\t\t\trule: 'reportDisables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\nfunction reportDisablesForRule(options) {\n\tif (!options || !options[1]) return false;\n\n\treturn Boolean(options[1].reportDisables);\n}\n","'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\nconst invalidScopeDisables = require('./invalidScopeDisables');\nconst needlessDisables = require('./needlessDisables');\nconst reportDisables = require('./reportDisables');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').LinterOptions[\"maxWarnings\"]} maxWarnings */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {maxWarnings} maxWarnings\n * @param {Formatter} formatter\n * @param {string} cwd\n *\n * @returns {LinterResult}\n */\nfunction prepareReturnValue(stylelintResults, maxWarnings, formatter, cwd) {\n\treportDisables(stylelintResults);\n\tneedlessDisables(stylelintResults);\n\tinvalidScopeDisables(stylelintResults);\n\tdescriptionlessDisables(stylelintResults);\n\n\tconst errored = stylelintResults.some(\n\t\t(result) =>\n\t\t\tresult.errored ||\n\t\t\tresult.parseErrors.length > 0 ||\n\t\t\tresult.warnings.some((warning) => warning.severity === 'error'),\n\t);\n\n\t/** @type {LinterResult} */\n\tconst returnValue = {\n\t\tcwd,\n\t\terrored,\n\t\tresults: [],\n\t\toutput: '',\n\t\treportedDisables: [],\n\t};\n\n\tif (maxWarnings !== undefined) {\n\t\tconst foundWarnings = stylelintResults.reduce((count, file) => count + file.warnings.length, 0);\n\n\t\tif (foundWarnings > maxWarnings) {\n\t\t\treturnValue.maxWarningsExceeded = { maxWarnings, foundWarnings };\n\t\t}\n\t}\n\n\treturnValue.output = formatter(stylelintResults, returnValue);\n\treturnValue.results = stylelintResults;\n\n\treturn returnValue;\n}\n\nmodule.exports = prepareReturnValue;\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function invalidScopeDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst configRules = (stylelintResult.config || {}).rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tif (usedRules.has(rule)) continue;\n\n\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function descriptionlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(\n\t\t\tresult._postcssResult,\n\t\t\t'reportDescriptionlessDisables',\n\t\t);\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (range.description) continue;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) {\n\t\t\t\t\t// An 'all' rule will get copied for each individual rule. If the\n\t\t\t\t\t// configuration is `[false, {except: ['specific-rule']}]`, we\n\t\t\t\t\t// don't want to report the copies that match except, so we record\n\t\t\t\t\t// the comment as already reported.\n\t\t\t\t\tif (!enabled && rule === 'all') alreadyReported.add(range.comment);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:standalone');\nconst fastGlob = require('fast-glob');\nconst fs = require('fs');\nconst globby = require('globby');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst createStylelintResult = require('./createStylelintResult');\nconst FileCache = require('./utils/FileCache');\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst formatters = require('./formatters');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst getFormatterOptionsText = require('./utils/getFormatterOptionsText');\nconst hash = require('./utils/hash');\nconst NoFilesFoundError = require('./utils/noFilesFoundError');\nconst AllFilesIgnoredError = require('./utils/allFilesIgnoredError');\nconst { assert } = require('./utils/validateTypes');\nconst pkg = require('../package.json');\nconst prepareReturnValue = require('./prepareReturnValue');\n\nconst ALWAYS_IGNORED_GLOBS = ['**/node_modules/**'];\nconst writeFileAtomic = require('write-file-atomic');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').FormatterType} FormatterType */\n\n/**\n *\n * @param {LinterOptions} options\n * @returns {Promise<LinterResult>}\n */\nasync function standalone({\n\tallowEmptyInput = false,\n\tcache: useCache = false,\n\tcacheLocation,\n\tcode,\n\tcodeFilename,\n\tconfig,\n\tconfigBasedir,\n\tconfigFile,\n\tcustomSyntax,\n\tcwd = process.cwd(),\n\tdisableDefaultIgnores,\n\tfiles,\n\tfix,\n\tformatter,\n\tglobbyOptions,\n\tignoreDisables,\n\tignorePath,\n\tignorePattern,\n\tmaxWarnings,\n\tquiet,\n\treportDescriptionlessDisables,\n\treportInvalidScopeDisables,\n\treportNeedlessDisables,\n\tsyntax,\n}) {\n\t/** @type {FileCache} */\n\tlet fileCache;\n\tconst startTime = Date.now();\n\n\tconst isValidCode = typeof code === 'string';\n\n\tif ((!files && !isValidCode) || (files && (code || isValidCode))) {\n\t\treturn Promise.reject(\n\t\t\tnew Error('You must pass stylelint a `files` glob or a `code` string, though not both'),\n\t\t);\n\t}\n\n\t// The ignorer will be used to filter file paths after the glob is checked,\n\t// before any files are actually read\n\n\t/** @type {import('ignore').Ignore} */\n\tlet ignorer;\n\n\ttry {\n\t\tignorer = getFileIgnorer({ cwd, ignorePath, ignorePattern });\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\t/** @type {Formatter} */\n\tlet formatterFunction;\n\n\ttry {\n\t\tformatterFunction = getFormatterFunction(formatter);\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t\tignoreDisables,\n\t\tignorePath,\n\t\treportNeedlessDisables,\n\t\treportInvalidScopeDisables,\n\t\treportDescriptionlessDisables,\n\t\tsyntax,\n\t\tcustomSyntax,\n\t\tfix,\n\t\tquiet,\n\t});\n\n\tif (!files) {\n\t\tconst absoluteCodeFilename =\n\t\t\tcodeFilename !== undefined && !path.isAbsolute(codeFilename)\n\t\t\t\t? path.join(cwd, codeFilename)\n\t\t\t\t: codeFilename;\n\n\t\t// if file is ignored, return nothing\n\t\tif (\n\t\t\tabsoluteCodeFilename &&\n\t\t\t!filterFilePaths(ignorer, [path.relative(cwd, absoluteCodeFilename)]).length\n\t\t) {\n\t\t\treturn prepareReturnValue([], maxWarnings, formatterFunction, cwd);\n\t\t}\n\n\t\tlet stylelintResult;\n\n\t\ttry {\n\t\t\tconst postcssResult = await stylelint._lintSource({\n\t\t\t\tcode,\n\t\t\t\tcodeFilename: absoluteCodeFilename,\n\t\t\t});\n\n\t\t\tstylelintResult = await stylelint._createStylelintResult(postcssResult, absoluteCodeFilename);\n\t\t} catch (error) {\n\t\t\tstylelintResult = await handleError(stylelint, error);\n\t\t}\n\n\t\tconst postcssResult = stylelintResult._postcssResult;\n\t\tconst returnValue = prepareReturnValue([stylelintResult], maxWarnings, formatterFunction, cwd);\n\n\t\tif (\n\t\t\tfix &&\n\t\t\tpostcssResult &&\n\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t!postcssResult.stylelint.ruleDisableFix\n\t\t) {\n\t\t\treturnValue.output =\n\t\t\t\t!postcssResult.stylelint.disableWritingFix && postcssResult.opts\n\t\t\t\t\t? // If we're fixing, the output should be the fixed code\n\t\t\t\t\t  postcssResult.root.toString(postcssResult.opts.syntax)\n\t\t\t\t\t: // If the writing of the fix is disabled, the input code is returned as-is\n\t\t\t\t\t  code;\n\t\t}\n\n\t\treturn returnValue;\n\t}\n\n\tlet fileList = [files].flat().map((entry) => {\n\t\tconst globCWD = (globbyOptions && globbyOptions.cwd) || cwd;\n\t\tconst absolutePath = !path.isAbsolute(entry)\n\t\t\t? path.join(globCWD, entry)\n\t\t\t: path.normalize(entry);\n\n\t\tif (fs.existsSync(absolutePath)) {\n\t\t\t// This path points to a file. Return an escaped path to avoid globbing\n\t\t\treturn fastGlob.escapePath(normalizePath(entry));\n\t\t}\n\n\t\treturn entry;\n\t});\n\n\tif (!disableDefaultIgnores) {\n\t\tfileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map((glob) => `!${glob}`));\n\t}\n\n\tif (useCache) {\n\t\tconst stylelintVersion = pkg.version;\n\t\tconst hashOfConfig = hash(`${stylelintVersion}_${JSON.stringify(config || {})}`);\n\n\t\tfileCache = new FileCache(cacheLocation, cwd, hashOfConfig);\n\t} else {\n\t\t// No need to calculate hash here, we just want to delete cache file.\n\t\tfileCache = new FileCache(cacheLocation, cwd);\n\t\t// Remove cache file if cache option is disabled\n\t\tfileCache.destroy();\n\t}\n\n\tconst effectiveGlobbyOptions = {\n\t\tcwd,\n\t\t...(globbyOptions || {}),\n\t\tabsolute: true,\n\t};\n\n\tconst globCWD = effectiveGlobbyOptions.cwd;\n\n\tlet filePaths = await globby(fileList, effectiveGlobbyOptions);\n\t// Record the length of filePaths before ignore operation\n\t// Prevent prompting \"No files matching the pattern 'xx' were found.\" when .stylelintignore ignore all input files\n\tconst filePathsLengthBeforeIgnore = filePaths.length;\n\n\t// The ignorer filter needs to check paths relative to cwd\n\tfilePaths = filterFilePaths(\n\t\tignorer,\n\t\tfilePaths.map((p) => path.relative(globCWD, p)),\n\t);\n\n\tlet stylelintResults;\n\n\tif (filePaths.length) {\n\t\tlet absoluteFilePaths = filePaths.map((filePath) => {\n\t\t\tconst absoluteFilepath = !path.isAbsolute(filePath)\n\t\t\t\t? path.join(globCWD, filePath)\n\t\t\t\t: path.normalize(filePath);\n\n\t\t\treturn absoluteFilepath;\n\t\t});\n\n\t\tif (useCache) {\n\t\t\tabsoluteFilePaths = absoluteFilePaths.filter(fileCache.hasFileChanged.bind(fileCache));\n\t\t}\n\n\t\tconst getStylelintResults = absoluteFilePaths.map(async (absoluteFilepath) => {\n\t\t\tdebug(`Processing ${absoluteFilepath}`);\n\n\t\t\ttry {\n\t\t\t\tconst postcssResult = await stylelint._lintSource({\n\t\t\t\t\tfilePath: absoluteFilepath,\n\t\t\t\t});\n\n\t\t\t\tif (postcssResult.stylelint.stylelintError && useCache) {\n\t\t\t\t\tdebug(`${absoluteFilepath} contains linting errors and will not be cached.`);\n\t\t\t\t\tfileCache.removeEntry(absoluteFilepath);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * If we're fixing, save the file with changed code\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\tpostcssResult.opts &&\n\t\t\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t\t\tfix &&\n\t\t\t\t\t!postcssResult.stylelint.disableWritingFix\n\t\t\t\t) {\n\t\t\t\t\tconst fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\t\tpostcssResult.root.source &&\n\t\t\t\t\t\tpostcssResult.root.source.input.css !== fixedCss\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait writeFileAtomic(absoluteFilepath, fixedCss);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn stylelint._createStylelintResult(postcssResult, absoluteFilepath);\n\t\t\t} catch (error) {\n\t\t\t\t// On any error, we should not cache the lint result\n\t\t\t\tfileCache.removeEntry(absoluteFilepath);\n\n\t\t\t\treturn handleError(stylelint, error, absoluteFilepath);\n\t\t\t}\n\t\t});\n\n\t\tstylelintResults = await Promise.all(getStylelintResults);\n\t} else if (allowEmptyInput) {\n\t\tstylelintResults = await Promise.all([]);\n\t} else if (filePathsLengthBeforeIgnore) {\n\t\t// All input files ignored\n\t\tstylelintResults = await Promise.reject(new AllFilesIgnoredError());\n\t} else {\n\t\tstylelintResults = await Promise.reject(new NoFilesFoundError(fileList));\n\t}\n\n\tif (useCache) {\n\t\tfileCache.reconcile();\n\t}\n\n\tconst result = prepareReturnValue(stylelintResults, maxWarnings, formatterFunction, cwd);\n\n\tdebug(`Linting complete in ${Date.now() - startTime}ms`);\n\n\treturn result;\n}\n\n/**\n * @param {FormatterType | Formatter | undefined} selected\n * @returns {Formatter}\n */\nfunction getFormatterFunction(selected) {\n\tif (typeof selected === 'string') {\n\t\tconst formatterFunction = formatters[selected];\n\n\t\tif (formatterFunction === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`You must use a valid formatter option: ${getFormatterOptionsText()} or a function`,\n\t\t\t);\n\t\t}\n\n\t\treturn formatterFunction;\n\t}\n\n\tif (typeof selected === 'function') {\n\t\treturn selected;\n\t}\n\n\tassert(formatters.json);\n\n\treturn formatters.json;\n}\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {any} error\n * @param {string} [filePath]\n * @return {Promise<StylelintResult>}\n */\nfunction handleError(stylelint, error, filePath = undefined) {\n\tif (error.name === 'CssSyntaxError') {\n\t\treturn createStylelintResult(stylelint, undefined, filePath, error);\n\t}\n\n\tthrow error;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').lint} */ (standalone);\n","'use strict';\n\nconst checkAgainstRule = require('./utils/checkAgainstRule');\nconst createPlugin = require('./createPlugin');\nconst createStylelint = require('./createStylelint');\nconst formatters = require('./formatters');\nconst postcssPlugin = require('./postcssPlugin');\nconst report = require('./utils/report');\nconst ruleMessages = require('./utils/ruleMessages');\nconst rules = require('./rules');\nconst standalone = require('./standalone');\nconst validateOptions = require('./utils/validateOptions');\nconst resolveConfig = require('./resolveConfig');\n\n/** @type {import('stylelint').PublicApi} */\nconst stylelint = Object.assign(postcssPlugin, {\n\tlint: standalone,\n\trules,\n\tformatters,\n\tcreatePlugin,\n\tresolveConfig,\n\tcreateLinter: createStylelint,\n\tutils: {\n\t\treport,\n\t\truleMessages,\n\t\tvalidateOptions,\n\t\tcheckAgainstRule,\n\t},\n});\n\nmodule.exports = stylelint;\n","'use strict';\n\nconst formatters = require('../formatters');\n\n/**\n * @param {{ useOr?: boolean }} [options={}]\n * @returns {string}\n */\nmodule.exports = function getFormatterOptionsText(options = {}) {\n\tlet output = Object.keys(formatters)\n\t\t.map((name) => `\"${name}\"`)\n\t\t.join(', ');\n\n\tif (options.useOr) {\n\t\toutput = output.replace(/, ([a-z\"]+)$/u, ' or $1');\n\t}\n\n\treturn output;\n};\n","/*!\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(path, stripTrailing) {\n  if (typeof path !== 'string') {\n    throw new TypeError('expected path to be a string');\n  }\n\n  if (path === '\\\\' || path === '/') return '/';\n\n  var len = path.length;\n  if (len <= 1) return path;\n\n  // ensure that win32 namespaces has two leading slashes, so that the path is\n  // handled properly by the win32 version of path.parse() after being normalized\n  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\n  var prefix = '';\n  if (len > 4 && path[3] === '\\\\') {\n    var ch = path[2];\n    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\n      path = path.slice(2);\n      prefix = '//';\n    }\n  }\n\n  var segs = path.split(/[/\\\\]+/);\n  if (stripTrailing !== false && segs[segs.length - 1] === '') {\n    segs.pop();\n  }\n  return prefix + segs.join('/');\n};\n","'use strict';\n\n/** @typedef {import('stylelint').Rule} StylelintRule */\n\n/**\n * @param {string} ruleName\n * @param {StylelintRule} rule\n * @returns {{ruleName: string, rule: StylelintRule}}\n */\nfunction createPlugin(ruleName, rule) {\n\treturn {\n\t\truleName,\n\t\trule,\n\t};\n}\n\nmodule.exports = /** @type {typeof import('stylelint').createPlugin} */ (createPlugin);\n","'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/**\n * Resolves the effective configuation for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} [options] - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\nmodule.exports = async function resolveConfig(\n\tfilePath,\n\t{ cwd = process.cwd(), config, configBasedir, configFile } = {},\n) {\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t});\n\n\tconst absoluteFilePath = !path.isAbsolute(filePath)\n\t\t? path.join(cwd, filePath)\n\t\t: path.normalize(filePath);\n\n\tconst configSearchPath = stylelint._options.configFile || absoluteFilePath;\n\n\tconst resolved = await stylelint.getConfigForFile(configSearchPath, absoluteFilePath);\n\n\tif (!resolved) {\n\t\treturn undefined;\n\t}\n\n\treturn resolved.config;\n};\n","'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\nfunction checkAgainstRule(options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tconst rule = rules[options.ruleName];\n\n\tif (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\t// @ts-expect-error - this error should not occur with PostCSS 8\n\tconst tmpPostcssResult = new Result();\n\n\trule(settings[0], /** @type {O} */ (settings[1]), {})(options.root, tmpPostcssResult);\n\n\tfor (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.checkAgainstRule} */ (\n\tcheckAgainstRule\n);\n"],"names":["isStandardSyntaxAtRule","atRule","nodes","params","mixin","variable","raws","afterName","report","problem","ruleName","result","message","line","node","index","endIndex","word","stylelint","ruleSeverities","customMessages","ruleMetadata","quiet","start","rangeBy","startLine","Error","ignoreDisables","config","disabledRanges","ranges","all","range","undefined","end","rules","includes","disabledWarnings","push","rule","severity","stylelintError","warningProperties","warningMessage","warn","ruleMessages","messages","newMessages","messageId","messageText","Object","entries","args","concat","arrayEqual","a","b","Array","isArray","length","every","elem","isObject","o","prototype","toString","call","isBoolean","value","Boolean","isNullish","isNumber","Number","isRegExp","RegExp","isString","String","isPlainObject","ctor","prot","constructor","hasOwnProperty","_isPlainObject","assert","console","assertFunction","Function","isFunction","assertNumber","assertString","IGNORED_OPTIONS","Set","validateOptions","optionDescriptions","noErrors","optionDescription","validate","complain","stylelintType","opts","possible","actual","optional","nothingPossible","stringify","flat","isValid","optionName","optionValue","has","possibleValue","possibility","JSON","_export_prefix_","prop","match","_export_unprefixed_","replace","rejected","name","primary","root","primaryValues","walkAtRules","vendor","toLowerCase","primaryOptionArray","meta","url","openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","uLower","uUpper","plus","isUnicodeRange","walk","cb","bubble","i","max","type","stringifyNode","custom","buf","customResult","quote","unclosed","before","after","minus","dot","exp","EXP","ValueParser","this","input","next","prev","token","escape","escapePos","whitespacePos","parenthesesOpenPos","parent","tokens","pos","code","stack","balanced","slice","sourceEndIndex","sourceIndex","indexOf","pop","test","parse","unit","nextCode","nextNextCode","likeNumber","number","declarationValueIndex","decl","prefix","raw","suffix","between","reduce","count","str","getDeclarationValue","hasLessInterpolation","string","hasPsvInterpolation","hasScssInterpolation","hasTplInterpolation","hasInterpolation","isStandardSyntaxValue","normalizedValue","charAt","startsWith","matchesStringOrRegExp","comparison","testAgainstStringOrRegExpOrArray","inputItem","testResult","testAgainstStringOrRegExp","comparisonItem","pattern","substring","firstComparisonChar","lastComparisonChar","secondToLastComparisonChar","comparisonIsRegex","valueMatch","optionsMatches","options","propertyName","setDeclarationValue","expected","unfixed","fixed","ALPHA_PROPS","ALPHA_FUNCS","secondaryOptions","context","exceptProperties","optionFuncs","freeze","expFunc","fixFunc","asNumber","percentage","isPercentage","asPercentage","walkDecls","needsFix","parsedValue","valueParser","alpha","findAlphaInValue","filter","slashNodeIndex","findIndex","find","findAlphaInFunction","expectation","fix","toPrecision","dimension","atRuleNameSpaceChecker","source","locationChecker","err","m","checkedRuleName","errTarget","configurationError","text","isSingleLineString","isWhitespace","char","whitespaceChecker","targetWhitespace","activeArgs","lineCheckStr","onlyOneChar","allowIndentation","expectBefore","rejectBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","expectAfter","rejectAfter","expectedAfterSingleLine","rejectedAfterSingleLine","expectedAfterMultiLine","rejectedAfterMultiLine","messageFunc","expectedBefore","_activeArgs2","expectedChar","expectBeforeAllowingIndentation","_activeArgs","oneCharBefore","twoCharsBefore","rejectedBefore","_activeArgs3","expectedAfter","_activeArgs4","oneCharAfter","twoCharsAfter","threeCharsAfter","rejectedAfter","_activeArgs5","beforeAllowingIndentation","obj","afterOneOnly","checker","hasBlock","statement","rawNodeString","nodeString","nextNonCommentNode","startNode","_secondary","nextNode","nodeToCheck","msg","newline","_export_isRoot_","_export_isRule_","_export_isAtRule_","_export_isComment_","_export_isDeclaration_","_export_isValueFunction_","_export_hasSource_","beforeBlockString","noRawBefore","isRule","selector","isAtRule","blockString","check","reportIndex","nodeToCheckRaws","search","ignoreAtRules","walkRules","hasEmptyBlock","hasEmptyLine","statementString","expectEmptyLineBefore","childNodeTypes","map","item","spaces","split","repeat","addEmptyLineAfter","removeEmptyLinesAfter","except","_secondaryOptions","blockIsMultiLine","statementRaws","firstWhitespaceIndex","newlineBefore","newlineAfter","newlineIndex","ignore","ignoreComments","positionBy","AT_RULES","SELECTORS","PROPERTIES","PROPERTY_VALUES","_export_unprefix_","p","identifier","isAutoprefixable","expectedName","toUpperCase","beforeBraceNoRaw","spaceIndex","backupCommentNextBefores","Map","reNewLine","newLineMatch","set","first","delete","clear","fixTarget","fixTargetRaws","hex","unexpected","HEX","isUrlFunction","isHexColor","hasAlphaChannel","statementFirst","isStandardSyntaxHexColor","endsWith","hexMatch","exec","hexValue","isValidHex","isStandardSyntaxFunction","isStandardSyntaxColorFunction","fnNode","LEGACY_FUNCS","LEGACY_NOTATION_FUNCS","isValueFunction","hasCommas","commaCount","childNode","isComma","atLeastOneSpace","whitespace","some","ignoreSelectors","flattenArray","validateObjectWithArrayProps","validators","values","v","property","atRuleName","propList","addEmptyLineBefore","getNodeLine","getNextNonSharedLineCommentNode","getPreviousNonSharedLineCommentNode","previousNode","previousNode2","nodesShareLines","isSharedLineComment","isComment","nextNonSharedLineCommentNode","parentNode","isRoot","isAfterComment","isFirstNested","parentNodes","firstNode","hasSource","openingBraceLine","isFirstNodeOfRoot","isStandardSyntaxComment","comment","removeEmptyLinesBefore","walkComments","IGNORED_FUNCTIONS","isIgnoredFunction","canShrink","expectedHex","longer","shorter","hexVariant","normalizedPattern","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","rawComment","firstFourChars","leftMatches","rightMatches","opener","leftSpace","rightSpace","closer","left","right","addWhitespaceBefore","addWhitespaceAfter","propertySets","acceptCustomIdents","r","grad","turn","rad","Math","PI","t","n","pow","round","e","u","isFinite","g","s","h","min","floor","l","d","f","c","y","parseInt","substr","object","N","M","H","$","j","parsed","trim","x","rgba","brightness","isDark","isLight","toHex","toRgb","toRgbString","toHsl","toHslString","toHsv","invert","w","saturate","desaturate","grayscale","lighten","darken","rotate","hue","isEqual","S","z","cbrt","atan2","sqrt","cos","sin","parseHwbWithCommaString","whiteness","blackness","extraArgs","colordInstance","colord","parseGrayString","lightness","lightnessWithUnit","colorObject","alphaWithUnit","forEach","extend","white","bisque","blue","cadetblue","chartreuse","chocolate","coral","antiquewhite","aqua","azure","whitesmoke","papayawhip","plum","blanchedalmond","black","gold","goldenrod","gainsboro","cornsilk","cornflowerblue","burlywood","aquamarine","beige","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkkhaki","darkgray","darkgreen","darkgrey","peachpuff","darkmagenta","darkred","darkorchid","darkorange","darkslateblue","gray","darkslategray","darkslategrey","deeppink","deepskyblue","wheat","firebrick","floralwhite","ghostwhite","darkviolet","magenta","green","dodgerblue","grey","honeydew","hotpink","blueviolet","forestgreen","lawngreen","indianred","indigo","fuchsia","brown","maroon","mediumblue","lightcoral","darkturquoise","lightcyan","ivory","lightyellow","lightsalmon","lightseagreen","linen","mediumaquamarine","lemonchiffon","lime","khaki","mediumseagreen","limegreen","mediumspringgreen","lightskyblue","lightblue","midnightblue","lightpink","mistyrose","moccasin","mintcream","lightslategray","lightslategrey","navajowhite","navy","mediumvioletred","powderblue","palegoldenrod","oldlace","paleturquoise","mediumturquoise","mediumorchid","rebeccapurple","lightsteelblue","mediumslateblue","thistle","tan","orchid","mediumpurple","purple","pink","skyblue","springgreen","palegreen","red","yellow","slateblue","lavenderblush","peru","palevioletred","violet","teal","slategray","slategrey","aliceblue","darkseagreen","darkolivegreen","greenyellow","seagreen","seashell","tomato","silver","sienna","lavender","lightgreen","orange","orangered","steelblue","royalblue","turquoise","yellowgreen","salmon","saddlebrown","sandybrown","rosybrown","darksalmon","lightgoldenrodyellow","snow","lightgrey","lightgray","dimgray","dimgrey","olivedrab","olive","toName","closest","toHwb","toHwbString","toLab","delta","abs","F","L","I","P","k","q","A","B","toLch","toLchString","_colordClass","parsers","named","original","NODE_TYPES","ignoreProperties","rawColorString","colorString","color","namedColor","isCustomProperty","isScssVariable","isStandardSyntaxDeclaration","lang","prevNode","isDeclaration","isAfterCustomProperty","SKIP","ONLY","styleSearch","callback","target","skipComments","comments","skipStrings","strings","skipFunctionNames","functionNames","skipFunctionArguments","functionArguments","skipParentheticals","parentheticals","onceOptionUsed","keys","key","openingQuote","onlyComments","onlyStrings","onlyFunctionNames","onlyFunctionArguments","onlyParentheticals","insideString","insideComment","insideSingleLineComment","insideParens","insideFunctionArguments","openingParenCount","matchCount","getMatch","ti","tl","checkResult","getMatchBase","bind","targetString","targetStringLength","startIndex","currentChar","handleMatch","isFunctionName","once","declarationBangSpaceChecker","indexOffset","declString","valueString","bangIndex","declValue","setFixed","important","targetBefore","targetAfter","keywordSets","uniteSets","nonLengthUnits","lengthUnits","units","camelCaseFunctionNames","basicKeywords","systemFontValues","fontFamilyKeywords","fontWeightRelativeKeywords","fontWeightAbsoluteKeywords","fontWeightNumericKeywords","fontWeightKeywords","animationNameKeywords","animationTimingFunctionKeywords","animationIterationCountKeywords","animationDirectionKeywords","animationFillModeKeywords","animationPlayStateKeywords","animationShorthandKeywords","levelOneAndTwoPseudoElements","levelThreeAndUpPseudoElements","shadowTreePseudoElements","webkitScrollbarPseudoElements","vendorSpecificPseudoElements","pseudoElements","aNPlusBNotationPseudoClasses","linguisticPseudoClasses","atRulePagePseudoClasses","logicalCombinationsPseudoClasses","aNPlusBOfSNotationPseudoClasses","otherPseudoClasses","vendorSpecificPseudoClasses","webkitScrollbarPseudoClasses","pseudoClasses","shorthandTimeProperties","longhandTimeProperties","timeProperties","camelCaseKeywords","counterIncrementKeywords","counterResetKeywords","gridRowKeywords","gridColumnKeywords","gridAreaKeywords","listStyleTypeKeywords","listStylePositionKeywords","listStyleImageKeywords","listStyleShorthandKeywords","fontStyleKeywords","fontVariantKeywords","fontStretchKeywords","fontSizeKeywords","lineHeightKeywords","fontShorthandKeywords","keyframeSelectorKeywords","pageMarginAtRules","atRules","deprecatedMediaFeatureNames","mediaFeatureNames","systemColors","standardHtmlTags","nonStandardHtmlTags","validMixedCaseSvgElements","atName","atRuleParamIndex","regexpPattern","customMediaName","customProperty","knownCustomProperties","add","isVarFunction","isDashedIdent","testAgainstString","matchesWord","containsString","val","eachDeclarationBlock","each","decls","isStandardSyntaxProperty","eachDecl","shorthandData","margin","padding","background","font","border","transition","animation","columns","flex","grid","outline","mask","props","ignoreShorthands","longhandProperties","longhandProps","longhandDeclarations","unprefixedProp","shorthandProperties","shorthandProperty","prefixedShorthandProperty","longhandDeclaration","prefixedShorthandData","sort","parentRule","semicolon","last","nextDecl","declarationColonSpaceChecker","endOfPropIndex","propPlusColon","colonIndex","indexToCheck","betweenStart","sliceIndex","betweenBefore","betweenAfter","checkLastNode","hasSemicolon","isValueNode","validator","propLength","propKey","propIdentifier","shorthand","declarations","overrideables","longhandProp","isAfterStandardPropertyDeclaration","getImportantPosition","lastIndex","ruleNode","block","isNumbery","isVariable","invalidNamed","NORMAL_KEYWORD","WEIGHTS_WITH_KEYWORD_EQUIVALENTS","checkWeight","weightValue","weightValueNode","lowerWeightValue","valueNode","findFontWeights","valueNodes","hasNumericFontWeight","lowerValue","checkFont","isValidFontSize","numberUnit","nodeTypesToCheck","findFontFamily","fontFamilies","postcssValueParser","children","needMergeNodesByValue","mergeCharacters","valueLowerCase","prevPrevNode","fontFamily","lastFontFamily","secondNode","charactersBetween","process$1","cwd","env","NO_COLOR","FORCE_COLOR","argv","isColorSupported","process","platform","formatter","open","close","replaceClose","nextIndex","createColors","enabled","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","_module_exports_","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","tokenizer","content","escaped","currentToken","css","valueOf","ignoreErrors","buffer","returned","what","error","back","nextToken","ignoreUnclosed","controlChar","fromCharCode","endOfFile","position","Input","HIGHLIGHT_THEME","brackets","pico","class","hash","getTokenType","processor","terminalHighlight","join","registerInput","dependant","CssSyntaxError","column","file","plugin","super","reason","endLine","endColumn","setMessage","captureStackTrace","showSourceCode","mark","aside","lines","maxWidth","gutter","spacing","default","_export_isClean_","Symbol","_export_my_","DEFAULT_RAW","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","emptyBody","commentLeft","commentRight","Stringifier","builder","document","body","rawValue","ownSemicolon","atrule","child","own","detect","rawCache","beforeAfter","method","capitalize","rawSemicolon","rawEmptyBody","rawIndent","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","depth","step","cloneNode","cloned","Node","defaults","isClean","my","clone","append","data","remove","removeChild","stringifier","assign","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","bookmark","foundSelf","defaultType","cleanRaws","keepBetween","toJSON","_","inputs","emitInputs","inputsNextIndex","inputId","get","positionInside","getProxyProcessor","markDirty","toProxy","proxyCache","Proxy","addToError","postcssNode","from","proxyOf","Declaration","noop","cosmiconfig","catch","SourceMapConsumer","SourceMapGenerator","_require_source_map_js_","dirname","_require_path_","PreviousMap","loadAnnotation","inline","startWith","annotation","loadMap","mapFile","consumer","consumerCache","withContent","sourcesContent","getAnnotationURL","sourceMapString","lastIndexOf","decodeInline","decodeURIComponent","lastMatch","Buffer","window","atob","fromBase64","encoding","loadFile","path","existsSync","readFileSync","fromSourceMap","isMap","prevPath","mappings","_mappings","sections","resolve","isAbsolute","fromOffsetCache","sourceMapAvailable","pathAvailable","hasBOM","mapResolve","id","size","random","nanoid","fromOffset","offset","lastLine","lineToIndex","prevIndex","mid","col","origin","pathToFileURL","to","fromUrl","originalPositionFor","URL","sourceRoot","protocol","fileURLToPath","sourceContentFor","json","_objectSpread","Rule","AtRule","Root","LazyResult","Processor","relative","sep","MapGenerator","cssString","mapOpts","previous","previousMaps","isInline","isSourcesContent","clearAnnotation","setSourcesContent","already","setSourceContent","toUrl","applyPrevMaps","applySourceMap","isAnnotation","toBase64","btoa","unescape","encodeURIComponent","addAnnotation","outputFile","eol","generateMap","generateString","addMapping","generated","absolute","encodeURI","sourcePath","noSource","mapping","generate","Comment","cleanSource","markDirtyUp","Container","iterator","getIterator","indexes","normalize","prepend","reverse","unshift","exist","splice","removeAll","replaceValues","fast","condition","sample","processed","rebuild","other","lastEach","registerParse","registerRule","registerAtRule","registerRoot","setPrototypeOf","Document","toResult","registerLazyResult","registerProcessor","printed","warnOnce","Warning","opt","Result","lastPlugin","postcssPlugin","warning","warnings","list","separators","array","current","func","inQuote","prevQuote","letter","space","selectors","SAFE_COMMENT_NEIGHBOR","empty","Parser","createTokenizer","freeSemicolon","emptyRule","endFile","init","getPosition","bracket","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","findLastWithPosition","shift","firstSpaces","precheckMissedSemicolon","stringFrom","spacesFromEnd","cache","hasWord","checkMissedSemicolon","unnamedAtrule","spacesAndCommentsFromStart","unexpectedClose","unclosedBlock","clean","lastTokenType","element","doubleColon","founded","parser","NODE_ENV","TYPE_TO_CLASS_NAME","PLUGIN_PROPS","prepare","Once","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","DocumentExit","OnceExit","NOT_VISITORS","isPromise","then","getEvents","toStack","events","eventIndex","visitors","visitorIndex","cleanMarks","postcss","stringified","syntax","helpers","plugins","toStringTag","sync","onFulfilled","onRejected","async","finally","onFinally","Promise","reject","processing","runAsync","getAsyncError","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","subRoot","visitSync","event","visitor","promise","handleError","roots","postcssVersion","pluginName","pluginVer","runtimeVer","version","visitTick","visit","registerPostcss","NoWorkResult","_processor","_css","_opts","_map","self","defineProperty","generatedCSS","generatedMap","_root","use","normalized","fromJSON","ownInputs","_excluded","inputHydrated","__proto__","_defaults$source","_objectWithoutProperties","_excluded2","initializer","warningPrinted","creator","LANG","transformer","processOpts","pluginOpts","ignoreFontFamilies","lastValue","isLastFontFamilyVariable","isFamilyNameKeyword","valueIndex","isBlocklessAtRuleAfterBlocklessAtRule","isBlocklessAtRuleAfterSameNameBlocklessAtRule","isNested","hasEmptyLineBefore","isAtRuleAfterSameNameAtRule","getUnitFromValueNode","blurChar","blurInterpolation","parsedUnit","family","makeMutableFontFamilies","mutableNodes","idx","newNode","rawName","hasQuotes","resetIndexes","removeQuotes","openIndex","closeIndex","addQuotes","fixedName","checkFamilyName","fontFamilyNode","rawFamily","required","quotesRequired","recommended","quotesRecommended","fontFamilyNodes","ignoreFontFamilyNames","keywords","familyNames","fixer","div","symb","functionCommaSpaceChecker","hasFixed","argumentStrings","getCommaCheckIndex","commaNode","nodeIndex","commaBefore","commaDataList","checkIndex","ignoreFunctions","functionsList","fs","functionsListPath","operator","expectedOperatorBeforeSign","OPERATORS","OPERATOR_REGEX","ALL_OPERATORS","checkAroundOperator","operatorNode","currentNode","isBeforeOp","operatorSourceIndex","isSingleSpace","lastChar","firstChar","indexOfFirstNewLine","checkWords","operatorIndex","charBefore","charAfter","insertCharAtIndex","checkForOperatorInFirstNode","lastNode","isOperator","checkForOperatorInLastNode","foundOperatorNode","currNode","nodeBefore","nodeAfter","operators","maybeMatch","pre","post","reg","begs","beg","ai","bi","functionArgumentsSearch","functionName","parensMatch","balancedMatch","expression","expressionIndex","getSchemeFromUrl","urlString","_unused","scheme","slashIndex","isStandardSyntaxUrl","unspacedUrlString","expectedOpeningSingleLine","rejectedOpeningSingleLine","expectedClosingSingleLine","rejectedClosingSingleLine","functionString","isSingleLine","openingIndex","closingIndex","expectedOpeningMultiLine","rejectedOpeningMultiLine","expectedClosingMultiLine","rejectedClosingMultiLine","isMultiLine","containsNewline","checkBefore","getCheckBefore","fixBeforeForAlways","fixBeforeForNever","checkAfter","getCheckAfter","fixAfterForAlways","fixAfterForNever","atRuleKeyframes","setAtRuleParams","getAtRuleParams","urlFunctionFull","urlFunctionArguments","quotedUrlFunctionFirstArgument","restAtRuleParams","quotedNodeValue","ACCEPTABLE_AFTER_CLOSING_PAREN","nextChar","checkClosingParen","createFixer","applyFix","whitespaceEndIndex","param","placeIndexOnValueStart","maxAdjacentNewlines","violatedCRLFNewLinesRegex","violatedLFNewLinesRegex","allowedLFNewLinesString","allowedCRLFNewLinesString","stringValue","splittedValue","sourceIndexStart","stringifiedNode","newNodeString","updatedValue","acc","curr","firstArg","trimEnd","withToPrefix","regexp","matches","isStandardDirection","keyframeName","regex","keyframesNode","isStandardSyntaxSelector","isStandardSyntaxRule","gobbleHex","lower","spaceTerminated","codePoint","fromCodePoint","__esModule","CONTAINS_ESCAPE","ret","gobbled","_len","arguments","_key","commentStart","lastEnd","commentEnd","_export_ensureObject_","_export_getProp_","_export_unesc_","_unesc","_interopRequireDefault","_require__$unesc_","_getProp","_require__$getProp_","_ensureObject","_require__$ensureObject_","_require__$stripComments_","_defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_proto","at","appendToPropertyAndEscape","valueEscaped","originalValue","originalEscaped","setPropertyAndEscape","setPropertyWithoutEscape","isAtPosition","stringifyProperty","valueToString","rawSpaceBefore","rawSpaceAfter","rawSpace","UNIVERSAL","ATTRIBUTE","CLASS","COMBINATOR","COMMENT","ID","NESTING","PSEUDO","ROOT","SELECTOR","STRING","TAG","_node","_require__$node_","types","_getRequireWildcardCache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","_interopRequireWildcard","_require__$types_","WeakMap","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_arrayLikeToArray","_unsupportedIterableToArray","done","TypeError","arr","len","arr2","_setPrototypeOf","_Node","subClass","superClass","_this","create","_step","_iterator","oldNode","oldIndex","_findChildAtPosition","found","atPosition","foundChild","_inferEndPosition","walkAttributes","_this2","walkClasses","_this3","walkCombinators","_this4","_this5","walkIds","_this6","walkNesting","_this7","walkPseudos","_this8","walkTags","_this9","walkUniversals","_this10","_this11","memo","_container","_require__$container_","_Container","_types","trailingComma","_error","handler","Selector","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","merge","quotes","isIdentifier","output","counter","character","extra","escapeEverything","$0","$1","$2","wrap","_cssesc","_require_cssesc_","ClassName","_constructed","_value","Namespace","apply","qualifiedName","namespace","namespaceString","_namespace","ns","_require__$namespace_","Tag","_Namespace","Pseudo","deprecate","fn","unescapeValue","_CSSESC_QUOTE_OPTIONS","_require___$util$unesc_","WRAPPED_IN_QUOTES","warnOfDeprecatedValueAssignment","warnOfDeprecatedQuotedAssignment","warnOfDeprecatedConstructor","deprecatedUsage","quoteMark","unescaped","Attribute","_unescapeValue","handleDeprecatedContructorOpts","getQuotedValue","_determineQuoteMark","cssescopts","CSSESC_QUOTE_OPTIONS","smart","smartQuoteMark","preferredQuoteMark","setValue","_quoteMark","_syncRawValue","numSingleQuotes","numDoubleQuotes","NO_QUOTE","pref","preferCurrentQuoteMark","_handleEscapes","_spacesFor","rawSpaces","_stringFor","spaceName","defaultAttrConcat","attrSpaces","offsetOf","attributeSpaces","operatorSpaces","valueSpaces","insensitive","attrValue","quoted","qm","attribute","_unescapeValue2","_attribute","Universal","Combinator","Nesting","_export_combinator_","_export_word_","_export_comment_","_export_str_","_export_tab_","_export_newline_","_export_feed_","_export_cr_","_export_backslash_","_export_bang_","_export_slash_","_export_doubleQuote_","_export_singleQuote_","_export_space_","_export_greaterThan_","_export_pipe_","_export_equals_","_export_plus_","_export_caret_","_export_tilde_","_export_dollar_","_export_closeSquare_","_export_openSquare_","_export_closeParenthesis_","_export_openParenthesis_","_export_semicolon_","_export_colon_","_export_comma_","_export_at_","_export_asterisk_","_export_ampersand_","nextLine","nextOffset","tokenType","safe","tab","cr","feed","greaterThan","tilde","pipe","combinator","asterisk","ampersand","bang","equals","dollar","caret","openSquare","closeSquare","openParenthesis","closeParenthesis","consumeWord","_unescapable","_wordDelimiters","_require__$tokenTypes_","unescapable","wordDelimiters","hexChars","consumeEscape","hexDigits","FIELDS","TYPE","START_LINE","START_COL","END_LINE","END_COL","START_POS","END_POS","_WHITESPACE_TOKENS","_Object$assign","_require__$selectors$root_","_selector","_require__$selectors$selector_","_className","_require__$selectors$className_","_comment","_require__$selectors$comment_","_id","_require__$selectors$id_","_tag","_require__$selectors$tag_","_string","_require__$selectors$string_","_pseudo","_require__$selectors$pseudo_","_require__$selectors$attribute_","_universal","_require__$selectors$universal_","_combinator","_require__$selectors$combinator_","_nesting","_require__$selectors$nesting_","_sortAscending","_require__$sortAscending_","_tokenize","_require__$tokenize_","_require__$selectors$types_","WHITESPACE_TOKENS","WHITESPACE_EQUIV_TOKENS","tokenStart","tokenEnd","getSource","startColumn","getTokenSource","getTokenSourceSpan","startToken","endToken","unescapeProp","indexesOf","lossy","_errorGenerator","rootSource","errorGenerator","loop","errorOptions","attr","startingToken","currToken","spaceBefore","commentBefore","lastAdded","spaceAfterMeaningfulToken","prevContent","existingComment","oldRawValue","_unescaped","_oldRawValue","oldValue","insensitiveFlag","lastComment","_util","rawLastComment","rawLastValue","parseWhitespaceEquivalentTokens","stopPosition","startPosition","firstToken","lastToken","convertWhitespaceNodesToSpace","requiredSpace","lossySpace","isNamedCombinator","namedCombinator","nameRaw","nextSigTokenPos","locateNextMeaningfulToken","spaceOrDescendantSelectorNodes","_this$convertWhitespa2","_space","_rawSpace","_this$convertWhitespa3","_space2","_rawSpace2","optionalSpace","_this$convertWhitespa","missingBackslash","missingParenthesis","missingSquareBracket","prevToken","universal","nesting","parentheses","unbalanced","parenEnd","parenStart","parenValue","parseParenthesisToken","pseudo","pseudoStr","splitWord","firstCallback","hasClass","escapedDot","isKeyframesPercent","hasId","interpolations","hashIndex","indices","uniqs","ind","classNameOpts","idOpts","tagOpts","throwOnParenthesis","description","an","searchPosition","_parser","_require__$parser_","funcRes","_shouldUpdateSelector","updateSelector","_isLossy","lossless","_parseOptions","_run","transform","_runSync","ast","astSync","transformSync","processSync","tag","className","_require__$attribute_","_require__$className_","_require__$combinator_","_require__$comment_","_require__$id_","_require__$nesting_","_require__$pseudo_","_require__$root_","_require__$selector_","_require__$string_","_require__$tag_","_require__$universal_","_IS_TYPE","isNode","isPseudoElement","isPseudoClass","isPseudo","isContainer","isNamespace","isAttribute","isTag","isUniversal","isSelector","isNesting","isCombinator","isClassName","IS_TYPE","isNodeType","_constructors","_guards","_require__$processor_","_require__$selectors_","_default","isIgnoreAtRule","checkStatement","nestingDepth","ignorePseudoClasses","level","sel","extractPseudoRule","containsPseudoClassesOnly","pseudoRule","containsIgnoredPseudoClassesOnly","emptyLines","getChars","replaceEmptyLines","firstNodeRawsBefore","rootRawsAfter","rootString","maxLines","isSpecialCase","repeatTimes","emptyLFLines","emptyCRLFLines","matchStartIndex","matchEndIndex","eof","codeAfter","rootIndex","codeBefore","isEofNode","checkMatch","flagMap","global","ignoreCase","multiline","dotAll","sticky","unicode","cloneRegexp","flags","flag","clonedRegexp","execall","isGlobal","subMatches","EXCLUDED_PATTERNS","ignorePattern","ignoreNonComments","skippedSubStrings","skippedSubStringsIndex","subMatch","startOfSubString","checkNewline","nextNewlineIndex","rawLineLength","excludedLength","skippedSubString","startSubString","endSubString","excluded","tryToPopSubString","lineText","complaintIndex","nextTwoChars","keyframeRule","normalizedSelector","linebreak","shouldHaveCR","fixData","hasError","reportNewlineError","dataToCheck","hasNewlineToVerify","hasCR","res","MATH_FUNCTIONS","isMathFunction","isWord","isLength","isFraction","parseFloat","isZero","regularNumber","isLineHeight","isFlex","valueNodeIndex","isLineHeightValue","checkArgs","shouldHasQuotes","leftTrimmedArgs","trimStart","complaintEndIndex","trimmedArg","isEmptyArgument","atRuleParamsLowerCase","mediaFeatureColonSpaceChecker","paramColonIndex","colonIndices","beforeColon","afterColon","_Node2","hasFilter","filterReg","parseMediaFeature","parseMediaQuery","parseMediaList","interimIndex","levelLocal","doesHaveUrl","parenthesesLv","_i2","_character","_mediaQueryString","_spaceBefore","_Container2","mediaQueryString","modesEntered","mode","lastModeIndex","mediaFeature","mediaFeatureValue","indexLocal","stringNormalized","isCalculationEnabled","mediaFeatureValueStr","localLevel","insideSomeValue","_i","_parsers","isRangeContextMediaFeature","rangeOperators","rangeContextNodeParser","nameNode","mediaParser","_require_postcss_media_query_parser_","mediaFeatureRangeContext","mediaFeatureNode","mediaFeatureName","parsedRangeContext","unprefixedMediaFeatureName","allowedValuesKey","featureName","HUE_FIRST_ARG_FUNCS","HUE_THIRD_ARG_FUNCS","HUE_FUNCS","findHue","isDegree","asDegree","isCustomMediaQuery","mediaQuery","isStandardSyntaxMediaFeatureName","hasComments","mediaRule","expectedFeatureName","indexBoost","problems","parsedParams","ignoreDuplicates","ignoreDiffValues","ignorePrefixlessSameValues","indexDuplicate","duplicateValue","ignoreMediaFeatureNames","findMediaOperator","fixOperatorIndices","checkBeforeOperator","beforeOperator","afterOperator","mediaQueryListCommaWhitespaceChecker","allowTrailingComments","execResult","commaIndex","checkComma","paramCommaIndex","commaIndices","beforeComma","afterComma","atImport","imports","firstParam","restParams","uri","media","importedUris","resolvedNestedSelector","resolveNestedSelector","parentIsNestAtRule","parentSelectors","parentSelector","newlyResolvedSelectors","resolvedParentSelector","combinedSelector","findAtRuleContext","nodeContextLookup","contextMap","getContext","subContexts","nodeSource","baseContext","creativeGetMap","someMap","someThing","parseSelector","selectorParser","selectorContextLookup","checkSelector","selectorNode","comparisonContext","referenceSelectorNode","firstChild","nodesByCombinator","nodesAfterLastCombinator","lastCompoundSelectorWithoutPseudoClasses","selectorSpecificity","calculate","entry","specificity","priorComparableSelectors","priorEntry","compare","resolvedSelector","findNotContiguousOrRectangular","areas","names","namedAreas","indicesByRow","row","isContiguousAndRectangular","expectedToken","expectedSameNumber","expectedRectangle","reportSent","tokenValue","firstArea","isRectangular","notContiguousOrRectangular","invalidPosition","nodeName","IRREGULAR_WHITESPACES_PATTERN","issue","findIrregularWhitespace","isKeyframeRule","firstDuplicateLine","disallowInList","shouldDisallowDuplicateInList","contextSelectorSet","resolvedSelectorList","flatMap","sortedSelectorList","selectorLine","previousDuplicatePosition","selectorListParsed","selectorForMessage","presentedSelectors","reportedSelectors","animationName","declaredAnimations","animationNames","findAnimationName","animationNameNode","getOffsetByNode","nodeColumn","nodeLine","rawAfterRoot","fixSemiIndices","removeIndices","rawBeforeNode","allowedSemi","rawBeforeIndexStart","rawAfterNode","rawOwnSemicolon","expectedProp","checkAfterOperator","_export_all_","allValidProperties","properties","checkPrefixed","shouldCheckPrefixed","isOnlyWhitespace","whitespacesToReject","fixString","findErrorStartIndex","lastEOLIndex","ignoreEmptyLines","isRootFirst","eolWhitespaceIndex","beforeNewlineIndex","rootNode","fixText","rawsParams","rawsSelector","rawsValue","lastEOL","reportFromIndex","eachEolWhitespace","errorIndex","fixFn","neverFixPositions","alwaysFixPositions","capturingGroupIndex","baseIndex","fixPosition","addLeadingZero","removeLeadingZeros","fixPositions","removeTrailingZeros","mapLowercaseFunctionNamesToCamelCase","needFix","functionNameLowerCase","expectedFunctionName","fixedSelector","selectorTree","attributeNode","attributeSelectorString","nextCharIsSpace","fixBefore","prevCharIsSpace","fixAfter","spacesAttribute","rawAttrBefore","attrBefore","setAttrBefore","rawAfter","setAfter","isAfterRule","isAfterSingleLineComment","noEmptyFirstLineTest","selectorAttributeOperatorSpaceChecker","attributeNodeString","checkOperator","rawAttr","rawAttrAfter","attrAfter","setAttrAfter","isStandardSyntaxCombinator","fullSelector","combinatorNode","normalizeCombinator","attributeName","qualifiedAttribute","operatorAfter","setOperatorAfter","rawOperator","rawSpacesOperator","rawOperatorAfter","getRuleSelector","selectorFixed","selectorCombinatorSpaceChecker","locationType","parentParentNode","selectorValue","isNonNegativeInteger","isInteger","total","container","toFixed","ignoreUnits","fixIndices","nextChars","indextoCheckAfter","beforeSelector","afterSelector","isContextFunctionalPseudoClass","normalisedParentName","compoundCount","selectorListCommaWhitespaceChecker","ignoreAttributes","isKeyframeSelector","resolveNestedSelectors","shouldResolveNestedSelectors","classNode","prevChar","hasInterpolatingAmpersand","nestedSelector","ident","newSelectorString","isStandardSyntaxTypeSelector","_node$parent$parent","parentType","parentValue","ignoreTypes","ignoreDescendant","ignoreChild","ignoreCompounded","ignoreNextSibling","isDescendantCombinator","hasDescendantCombinatorBefore","isChildCombinator","hasChildCombinatorBefore","hasCompoundSelector","isNextSiblingCombinator","selectorCharacters","selectorAST","selectorParent","selectorNodes","rightNode","getRightNodes","ignoreContextFunctionalPseudoClasses","pseudoNode","isCustomSelector","prevPseudoElement","prevPseudoElementValue","_require_postcss_selector_parser_","isSimpleSelector","isNot","previousNot","indentAndTrimRight","head","tail","fixComplex","second","isSimple","not","simpleSelectors","firstSelector","fixSimple","specificitySum","specificities","sum","spec","maxChildSpecificity","maxSpec","childSpecificity","nodeSpecificity","pseudoClass","shouldSkipPseudoClassArgument","simpleSpecificity","ownValue","ownSpecificity","pseudoSpecificity","maxSpecificity","ignoreNamespaces","tagNode","selectorLowerCase","svgTags","mathMLTags","isCustomElement","tagName","tagNameLowerCase","transformSelector","pseudoElement","expectedPseudoElement","fixedColon","isDouble","expectedValue","paramString","setFirstNodeSpaceBefore","setLastNodeSpaceAfter","expectedPseudo","getIndex","checkDeclOrAtRule","checkRule","checkMedia","mediaName","getMediaFeatureName","checkDecl","time","DELAY_PROPERTIES","minimum","getDuration","valueList","isAcceptableTime","parsedTime","numTime","isIgnoredProperty","valueListList","valueListString","duration","propertiesWithShorthandNotation","ignoredCharacters","normalizedProp","hasIgnoredCharacters","valuesToShorthand","shortestFormString","top","bottom","lowerTop","lowerRight","lowerBottom","lowerLeft","canCondenseToOneValue","canCondenseToTwoValues","_top","_bottom","canCondenseToThreeValues","canCondense","valuesFormString","checkedValue","processValue","expectedUnit","valueListCommaWhitespaceChecker","indexToCheckAfter","determineIndex","declNode","beforeValue","afterValue","correctQuote","erroneousQuote","avoidEscape","needsEscape","fixIndex","replaceQuote","needsCorrectEscape","ignoreUnit","mediaNode","mediaNodes","lastMediaNode","imageSet","imageSetLastNode","gridRowProps","gridColumnProps","mapLowercaseKeywordsToCamelCase","ignoreKeywords","camelCaseSvgKeywords","propLowerCase","keyword","isCounterIncrementCustomIdentValue","isCounterResetCustomIdentValue","keywordLowerCase","toLocaleLowerCase","expectedKeyword","selectorKey","disallowedProperties","newValueString","valuePrefixes","ignoreValues","hasPrefix","baseIndentLevel","indentInsideParens","indentClosingBrace","spaceCount","indentChar","warningWord","legibleExpectation","quantifiedWarningWord","indentationLevel","getDocument","indentLevel","isSafeInteger","newIndentLevel","indentSize","getIndentLevel","tabMatch","tabCount","spaceMatch","newBaseIndentLevel","firstLine","indents","foundIndents","shortest","MAX_SAFE_INTEGER","foundIndent","fill","afterEnd","nextRoot","inferRootIndentLevel","docSource","scores","lastIndentSize","lastLeadingSpacesLength","vote","leadingSpacesLength","score","leadingSpaces","bestScore","indentSizeDate","inferDocIndentSize","getRootBaseIndentLevel","calculatedLevel","checkMultilineBit","newlineIndentLevel","parentheticalDepth","ignoreInsideParans","outsideParens","precedesClosingParenthesis","expectedIndentLevel","afterNewlineSpaceMatches","afterNewlineSpace","expectedIndentation","currentIndentation","replaceIndentation","declProp","declBetween","atRuleAfterName","atRuleParams","nodeLevel","expectedOpeningBraceIndentation","isFirstChild","lastIndexOfNewline","fixIndentation","closingBraceLevel","expectedClosingBraceIndentation","declLevel","valueLevel","checkValue","ruleLevel","paramLevel","checkAtRuleParams","searchString","replaceString","ignorePseudoElements","nonSpaceCharacter","_require__$alpha_value_notation_","_require__$at_rule_allowed_list_","_require__$at_rule_disallowed_list_","_require__$at_rule_empty_line_before_","_require__$at_rule_name_case_","_require__$at_rule_name_newline_after_","_require__$at_rule_semicolon_space_before_","_require__$at_rule_name_space_after_","_require__$at_rule_no_unknown_","_require__$at_rule_no_vendor_prefix_","_require__$at_rule_property_required_list_","_require__$at_rule_semicolon_newline_after_","_require__$block_closing_brace_empty_line_before_","_require__$block_closing_brace_newline_after_","_require__$block_closing_brace_newline_before_","_require__$block_closing_brace_space_after_","_require__$block_closing_brace_space_before_","_require__$block_no_empty_","_require__$block_opening_brace_newline_after_","_require__$block_opening_brace_newline_before_","_require__$block_opening_brace_space_after_","_require__$block_opening_brace_space_before_","_require__$color_function_notation_","_require__$color_hex_alpha_","_require__$color_hex_case_","_require__$color_hex_length_","_require__$color_named_","_require__$color_no_hex_","_require__$color_no_invalid_hex_","_require__$comment_empty_line_before_","_require__$comment_no_empty_","_require__$comment_pattern_","_require__$comment_whitespace_inside_","_require__$comment_word_disallowed_list_","_require__$custom_media_pattern_","_require__$custom_property_empty_line_before_","_require__$custom_property_no_missing_var_function_","_require__$custom_property_pattern_","_require__$declaration_bang_space_after_","_require__$declaration_bang_space_before_","_require__$declaration_block_no_duplicate_custom_properties_","_require__$declaration_block_no_duplicate_properties_","_require__$declaration_block_no_redundant_longhand_properties_","_require__$declaration_block_no_shorthand_property_overrides_","_require__$declaration_block_semicolon_newline_after_","_require__$declaration_block_semicolon_newline_before_","_require__$declaration_block_semicolon_space_after_","_require__$declaration_block_semicolon_space_before_","_require__$declaration_block_single_line_max_declarations_","_require__$declaration_block_trailing_semicolon_","_require__$declaration_colon_newline_after_","_require__$declaration_colon_space_after_","_require__$declaration_colon_space_before_","_require__$declaration_empty_line_before_","_require__$declaration_no_important_","_require__$declaration_property_max_values_","_require__$declaration_property_unit_allowed_list_","_require__$declaration_property_unit_disallowed_list_","_require__$declaration_property_value_allowed_list_","_require__$declaration_property_value_disallowed_list_","_require__$font_family_no_missing_generic_family_keyword_","_require__$font_family_name_quotes_","_require__$font_family_no_duplicate_names_","_require__$font_weight_notation_","_require__$function_allowed_list_","_require__$function_calc_no_unspaced_operator_","_require__$function_comma_newline_after_","_require__$function_comma_newline_before_","_require__$function_comma_space_after_","_require__$function_comma_space_before_","_require__$function_disallowed_list_","_require__$function_linear_gradient_no_nonstandard_direction_","_require__$function_max_empty_lines_","_require__$function_name_case_","_require__$function_no_unknown_","_require__$function_parentheses_newline_inside_","_require__$function_parentheses_space_inside_","_require__$function_url_no_scheme_relative_","_require__$function_url_quotes_","_require__$function_url_scheme_allowed_list_","_require__$function_url_scheme_disallowed_list_","_require__$function_whitespace_after_","_require__$hue_degree_notation_","_require__$import_notation_","_require__$keyframe_block_no_duplicate_selectors_","_require__$keyframe_declaration_no_important_","_require__$keyframes_name_pattern_","_require__$length_zero_no_unit_","linebreaks","_require__$linebreaks_","_require__$max_empty_lines_","_require__$max_line_length_","_require__$max_nesting_depth_","_require__$media_feature_colon_space_after_","_require__$media_feature_colon_space_before_","_require__$media_feature_name_allowed_list_","_require__$media_feature_name_case_","_require__$media_feature_name_disallowed_list_","_require__$media_feature_name_no_unknown_","_require__$media_feature_name_no_vendor_prefix_","_require__$media_feature_name_value_allowed_list_","_require__$media_feature_parentheses_space_inside_","_require__$media_feature_range_operator_space_after_","_require__$media_feature_range_operator_space_before_","_require__$media_query_list_comma_newline_after_","_require__$media_query_list_comma_newline_before_","_require__$media_query_list_comma_space_after_","_require__$media_query_list_comma_space_before_","_require__$named_grid_areas_no_invalid_","_require__$no_descending_specificity_","_require__$no_duplicate_at_import_rules_","_require__$no_duplicate_selectors_","_require__$no_empty_source_","_require__$no_empty_first_line_","_require__$no_eol_whitespace_","_require__$no_extra_semicolons_","_require__$no_invalid_double_slash_comments_","_require__$no_invalid_position_at_import_rule_","_require__$no_irregular_whitespace_","_require__$no_missing_end_of_source_newline_","_require__$no_unknown_animations_","_require__$number_leading_zero_","_require__$number_max_precision_","_require__$number_no_trailing_zeros_","_require__$property_allowed_list_","_require__$property_case_","_require__$property_disallowed_list_","_require__$property_no_unknown_","_require__$property_no_vendor_prefix_","_require__$rule_empty_line_before_","_require__$rule_selector_property_disallowed_list_","_require__$selector_attribute_brackets_space_inside_","_require__$selector_attribute_name_disallowed_list_","_require__$selector_attribute_operator_allowed_list_","_require__$selector_attribute_operator_disallowed_list_","_require__$selector_attribute_operator_space_after_","_require__$selector_attribute_operator_space_before_","_require__$selector_attribute_quotes_","_require__$selector_class_pattern_","_require__$selector_combinator_allowed_list_","_require__$selector_combinator_disallowed_list_","_require__$selector_combinator_space_after_","_require__$selector_combinator_space_before_","_require__$selector_descendant_combinator_no_non_space_","_require__$selector_disallowed_list_","_require__$selector_id_pattern_","_require__$selector_list_comma_newline_after_","_require__$selector_list_comma_newline_before_","_require__$selector_list_comma_space_after_","_require__$selector_list_comma_space_before_","_require__$selector_max_attribute_","_require__$selector_max_class_","_require__$selector_max_combinators_","_require__$selector_max_compound_selectors_","_require__$selector_max_empty_lines_","_require__$selector_max_id_","_require__$selector_max_pseudo_class_","_require__$selector_max_specificity_","_require__$selector_max_type_","_require__$selector_max_universal_","_require__$selector_nested_pattern_","_require__$selector_no_qualifying_type_","_require__$selector_no_vendor_prefix_","_require__$selector_not_notation_","_require__$selector_pseudo_class_allowed_list_","_require__$selector_pseudo_class_case_","_require__$selector_pseudo_class_disallowed_list_","_require__$selector_pseudo_class_no_unknown_","_require__$selector_pseudo_class_parentheses_space_inside_","_require__$selector_pseudo_element_allowed_list_","_require__$selector_pseudo_element_case_","_require__$selector_pseudo_element_colon_notation_","_require__$selector_pseudo_element_disallowed_list_","_require__$selector_pseudo_element_no_unknown_","_require__$selector_type_case_","_require__$selector_type_no_unknown_","_require__$shorthand_property_no_redundant_values_","_require__$string_no_newline_","_require__$string_quotes_","_require__$time_min_milliseconds_","_require__$unicode_bom_","_require__$unit_allowed_list_","_require__$unit_case_","_require__$unit_disallowed_list_","_require__$unit_no_unknown_","_require__$value_keyword_case_","_require__$value_list_comma_newline_after_","_require__$value_list_comma_newline_before_","_require__$value_list_comma_space_after_","_require__$value_list_comma_space_before_","_require__$value_list_max_empty_lines_","_require__$value_no_vendor_prefix_","indentation","_require__$indentation_","normalizeRuleSettings","rawSettings","getModulePath","basedir","lookup","resolveFrom","silent","globalModules","_apply","_join","glob","positive","Path","normalizeAllRuleSettings","normalizedRules","rawRuleSettings","pluginFunctions","augmentConfigExtended","cosmiconfigResult","configDir","filepath","augmentedConfig","ignoreFiles","globs","globjoin","processors","absolutizeProcessors","absolutizePaths","createStylelintResult","postcssResult","filePath","cssSyntaxError","stylelintResult","deprecations","deprecationMessage","reference","stylelintReference","invalidOptionWarnings","invalidOptionMessage","parseErrors","errored","ignored","_postcssResult","createPartialStylelintResult","configForFile","getConfigForFile","resultProcessors","resultProcessor","_options","SafeParser","nextStart","prevEnd","_require_postcss_safe_parser_","_require_postcss$lib$lazy_result_","postcssProcessor","getPostcssResult","cached","_postcssResultCache","customSyntax","resolved","require","getCustomSyntax","fileExtension","extname","extensions","previouslyInferredExtensions","cssSyntax","postcssOptions","getCode","promises","readFile","codeProcessors","sourceName","codeFilename","codeProcessor","html","js","jsx","less","md","sass","sss","scss","svelte","ts","tsx","vue","xml","xst","isPathIgnored","isPathNotFoundError","COMMAND_PREFIX","disableCommand","enableCommand","disableLineCommand","disableNextLineCommand","ALL_RULES","createDisableRange","strictStart","strictEnd","assignDisabledRanges","inlineEnd","nextComment","isStylelintCommand","checkComment","fullComment","currentLine","disableLine","ruleIsDisabled","disabledRuleName","strict","startDisabledRange","endDisabledRange","getDescription","getCommandRules","processDisableLineCommand","processDisableNextLineCommand","ruleToDisable","isAllRules","processDisableCommand","ruleToEnable","lastRange","processEnableCommand","command","fullText","splitted","descriptionStart","rangeObj","ensureRuleRanges","lastRangeForRule","peq","Uint32Array","distance","tmp","lst","pv","mv","sc","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","vlen","pb","mb","xh","ph","mh","myers_x","reportUnknownRuleNames","unknownRuleName","postcssRoot","suggestions","existRuleName","levenshtein","suggestion","extractSuggestions","rejectMessage","lintSource","existingPostcssResult","isCodeNotFile","inputFilePath","configSearchPath","configFile","_getPostcssResult","stylelintPostcssResult","stylelintOptions","postcssDoc","newlineMatch","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","performRules","rulesOrder","ruleNames","ruleFunction","ruleSettings","primaryOption","defaultSeverity","disableFix","ruleDisableFix","lintPostcssResult","_require_cosmiconfig_","STOP_DIR","createStylelint","_extendExplorer","augmentConfig","stopDir","_specifiedConfigCache","_createStylelintResult","_lintSource","stripAnsi","onlyFirst","ansiRegex","isFullwidthCodePoint","isNaN","stringWidth","width","codePointAt","hasFlag","terminatorPosition","forceColor","translateLevel","hasBasic","has256","has16m","supportsColor","haveStream","streamIsTTY","TERM","osRelease","sign","CI_NAME","TEAMCITY_VERSION","COLORTERM","TERM_PROGRAM_VERSION","TERM_PROGRAM","parseVersion","versionString","major","minor","patch","versions","supportsHyperlink","stream","FORCE_HYPERLINK","isTTY","VTE_VERSION","_export_stdout_","stdout","stderr","OSC","BEL","SEP","terminalLink","supportsHyperlinks","_require_picocolors_","levelColors","info","success","symbols","getMessageWidth","columnWidths","availableWidth","fullWidth","orderedMessages","formatMessageText","ruleString","fromValue","logFrom","cleanedMessages","normalisedValue","calculateWidths","table","getBorderCharacters","alignment","paddingRight","wrapWord","drawHorizontalLine","el","_m","p1","p2","_require__$stringFormatter_","results","returnValue","allInvalidOptionWarnings","invalidOptionsFormatter","allDeprecationWarnings","seenText","deprecationsFormatter","accum","groupBy","keyFn","fileLink","ruleLink","metadata","formatters","compact","cleanedResults","tap","unix","verbose","stringFormatter","sourceWord","ignoredCount","checkedDisplay","formatting","sourceText","warningsBySeverity","problemWord","firstResult","severityLevel","warningList","warningsByRule","tailoredOptions","isConfig","MurmurHash3","seed","h1","k1","rem","_module_","exports","murmur","FileCache","cacheLocation","hashOfConfig","cacheFile","resolvedCacheFile","looksLikeADirectory","fileStats","lstatSync","isDirectory","getCacheFile","_fileCache","fileEntryCache","_hashOfConfig","hasFileChanged","absoluteFilepath","getFileDescriptor","changed","reconcile","destroy","removeEntry","isPathValid","_require_ignore_","filterFilePaths","ignorer","filePaths","validForIgnore","notValidForIgnore","filteredByIgnore","NoFilesFoundError","fileList","AllFilesIgnoredError","validateDisableSettings","field","putIfAbsent","isWarningInRange","reportDisablesForRule","reportDisables","prepareReturnValue","stylelintResults","maxWarnings","rangeData","settings","usefulDisables","ruleRanges","allRangeComments","useful","needlessDisables","configRules","usedRules","invalidScopeDisables","alreadyReported","descriptionlessDisables","reportedDisables","foundWarnings","maxWarningsExceeded","debug","_require_debug_","ALWAYS_IGNORED_GLOBS","lint","allowEmptyInput","useCache","configBasedir","disableDefaultIgnores","files","globbyOptions","ignorePath","reportDescriptionlessDisables","reportInvalidScopeDisables","reportNeedlessDisables","fileCache","isValidCode","formatterFunction","getFileIgnorer","selected","getFormatterOptionsText","useOr","getFormatterFunction","absoluteCodeFilename","globCWD","absolutePath","fastGlob","escapePath","stripTrailing","ch","segs","normalizePath","globby","filePathsLengthBeforeIgnore","absoluteFilePaths","getStylelintResults","fixedCss","writeFileAtomic","createPlugin","resolveConfig","absoluteFilePath","createLinter","utils","checkAgainstRule","tmpPostcssResult"],"mappings":"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cACA,aACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,aACA,kBACA,sBACA,kBACA,oBACA,kBACA,mBACA,qBACA,4BACA,6BACA,eACA,oBACA,sBACA,gBACA,yBACA,0BACA,uBACA,aACA,aACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,aACA,cACA,oBACA,oBACA,oBACA,cACA,eACA,UACA,SACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,YACA,wBACA,eACA,yBACA,yBACA,YACA,cACA,oBACA,kBACA,oBACA,WACA,iBACA,eACA,iBACA,gBACA,sBACA,wBACA,qBACA,UACA,kBACA,kBACA,mBACA,qBACA,oBACA,sBACA,OACA,cACA,qBACA,qBACA,oBACA,qBACA,oBACA,YACA,iBACA,aACA,cACA,gBACA,cACA,YACA,aACA,kBACA,QACA,sBACA,oBACA,sBACA,qBACA,uBACA,cACA,qBACA,aACA,kBACA,yBACA,0BACA,uBACA,uBACA,mBACA,wBACA,eACA,gBACA,WACA,kBACA,kBACA,wBACA,uBACA,uBACA,2BACA,wBACA,gBACA,sBACA,yBACA,sBACA,mBACA,gBACA,mBACA,eACA,eACA,YACA,mBACA,kBACA,aACA,mBACA,sBACA,sBACA,6BACA,cACA,iBAaKkR,GAAkB,IAAIlR,IAAI,CAC/B,iBACA,WACA,YACA,mBACA,eACA,mBACA,YACA,gBACA,kBACA,eACA,wBACA,uBACA,mBACA,mBACA,iBACA,uBACA,iCACA,iCACA,eACA,gBACA,cACA,WACA,qBACA,kBACA,sBACA,sBACA,gCACA,gCACA,qBACA,eACA,qBACA,+BACA,+BACA,cACA,eACA,qBACA,yBACA,iBACA,sBACA,eACA,eACA,mBACA,oBACA,qBACA,sBACA,kBACA,0BACA,sBACA,sBACA,4BACA,0BACA,oCACA,oCACA,iBACA,kBACA,qBAgEQmR,GAAA,SAAC1S,GACR,OAAOA,EAAMiD,QAAQ,QAAS,GAC/B,ECzUK3G,GAAW,2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A,UACA,YACA,sBAGDN,GAAYiB,0BAA4B,IAAIhsB,IAAI,CAAC,OAAQ,WAAY,YAAa,SAElF+qB,GAAYkB,2BAA6BjB,GAAUD,GAAYM,cAAe,CAC7E,UACA,WAIDN,GAAYmB,2BAA6BlB,GACxCD,GAAYM,cACZN,GAAYa,sBACZb,GAAYc,gCACZd,GAAYe,gCACZf,GAAYgB,2BACZhB,GAAYiB,0BACZjB,GAAYkB,4BAIblB,GAAYoB,6BAA+B,IAAInsB,IAAI,CAClD,SACA,QACA,aACA,iBAGD+qB,GAAYqB,8BAAgC,IAAIpsB,IAAI,CACnD,SACA,QACA,aACA,eAEA,WACA,UACA,MACA,uBACA,gBACA,SACA,cACA,YACA,SACA,UACA,iBACA,gBAGD+qB,GAAYsB,yBAA2B,IAAIrsB,IAAI,CAAC,SAEhD+qB,GAAYuB,8BAAgC,IAAItsB,IAAI,CACnD,kBACA,oBACA,2BACA,2BACA,0BACA,0BACA,kCAGD+qB,GAAYwB,6BAA+B,IAAIvsB,IAAI,CAClD,mBACA,mBACA,mBACA,iBACA,mBACA,oBACA,sBACA,mBACA,mBACA,aACA,YACA,YACA,aACA,WACA,iBACA,iBACA,aACA,YACA,kBACA,mBACA,cACA,YACA,YACA,uBACA,+BACA,oCACA,uBACA,8BACA,wBACA,mCACA,kCACA,uCACA,mCACA,0CACA,qCACA,oCACA,qCACA,6BACA,mCACA,mCACA,yBACA,sBACA,6BACA,4BACA,wBACA,oBACA,qCACA,8BACA,8BACA,iCACA,uBACA,iCACA,yBACA,+BACA,4BACA,gCACA,oCACA,gCACA,uBACA,yCACA,4BACA,kCACA,0CACA,oCACA,oCACA,0CACG+qB,GAAYuB,gCAGhBvB,GAAYyB,eAAiBxB,GAC5BD,GAAYoB,6BACZpB,GAAYqB,8BACZrB,GAAYwB,6BACZxB,GAAYsB,0BAGbtB,GAAY0B,6BAA+B,IAAIzsB,IAAI,CAClD,aACA,kBACA,mBACA,gBAGD+qB,GAAY2B,wBAA0B,IAAI1sB,IAAI,CAAC,MAAO,SAEtD+qB,GAAY4B,wBAA0B,IAAI3sB,IAAI,CAAC,QAAS,QAAS,OAAQ,UAEzE+qB,GAAY6B,iCAAmC,IAAI5sB,IAAI,CAAC,MAAO,KAAM,UAAW,MAAO,UAEvF+qB,GAAY8B,gCAAkC,IAAI7sB,IAAI,CAAC,YAAa,mBAEpE+qB,GAAY+B,mBAAqB,IAAI9sB,IAAI,CACxC,SACA,WACA,WACA,QACA,UACA,UACA,UACA,UACA,WACA,QACA,UACA,cACA,gBACA,QACA,eACA,gBACA,aACA,sBACA,SACA,OACA,eACA,QACA,gBACA,WACA,UACA,aACA,eACA,OACA,aACA,eACA,WACA,eACA,OACA,oBACA,UACA,qBACA,SACA,YACA,aACA,WACA,OACA,QACA,QACA,SACA,aACA,eACA,aACA,QACA,UACA,oBAGD+qB,GAAYgC,4BAA8B,IAAI/sB,IAAI,CACjD,cACA,WACA,gBACA,cACA,iBACA,kBACA,iBACA,mBACA,4BACA,iBACA,eACA,qBACA,yBACA,6BACA,mBACA,sBACA,kBACA,kBACA,gBACA,qBACA,uBACA,iBACA,wBACA,eACA,cACA,mBACA,mBACA,sBACA,iCAID+qB,GAAYiC,6BAA+B,IAAIhtB,IAAI,CAClD,aACA,WACA,YACA,YACA,QACA,MACA,gBACA,gBACA,YACA,iBACA,oBAGD+qB,GAAYkC,cAAgBjC,GAC3BD,GAAY0B,6BACZ1B,GAAY2B,wBACZ3B,GAAY6B,iCACZ7B,GAAY8B,gCACZ9B,GAAY+B,mBACZ/B,GAAYgC,6BAGbhC,GAAYmC,wBAA0B,IAAIltB,IAAI,CAAC,aAAc,cAE7D+qB,GAAYoC,uBAAyB,IAAIntB,IAAI,CAC5C,sBACA,mBACA,qBACA,oBAGD+qB,GAAYqC,eAAiBpC,GAC5BD,GAAYmC,wBACZnC,GAAYoC,wBAGbpC,GAAYsC,kBAAoB,IAAIrtB,IAAI,CACvC,gBACA,kBACA,qBACA,qBACA,eACA,aACA,iBACA,cACA,gBACA,OACA,cAID+qB,GAAYuC,yBAA2BtC,GAAUD,GAAYM,cAAe,CAAC,SAE7EN,GAAYwC,qBAAuBvC,GAAUD,GAAYM,cAAe,CAAC,SAEzEN,GAAYyC,gBAAkBxC,GAAUD,GAAYM,cAAe,CAAC,OAAQ,SAE5EN,GAAY0C,mBAAqBzC,GAAUD,GAAYM,cAAe,CAAC,OAAQ,SAE/EN,GAAY2C,iBAAmB1C,GAAUD,GAAYM,cAAe,CAAC,OAAQ,SAG7EN,GAAY4C,sBAAwB3C,GAAUD,GAAYM,cAAe,CACxE,OACA,OACA,SACA,SACA,UACA,cACA,uBACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eACA,WACA,UACA,YACA,qBACA,kBACA,aACA,mBACA,WACA,WACA,WACA,SACA,WACA,iBACA,kBACA,oBACA,UACA,WACA,iBACA,QACA,uBACA,sBACA,wBACA,MACA,iBACA,YACA,YACA,UACA,QACA,UACA,sBACA,wBACA,QACA,SACA,OACA,UACA,sBACA,wBACA,iBACA,kBACA,oBAEA,oBACA,uBACA,0BACA,0BACA,SACA,mBACA,SAGDN,GAAY6C,0BAA4B5C,GAAUD,GAAYM,cAAe,CAAC,SAAU,YAExFN,GAAY8C,uBAAyB7C,GAAUD,GAAYM,cAAe,CAAC,SAE3EN,GAAY+C,2BAA6B9C,GACxCD,GAAYM,cACZN,GAAY4C,sBACZ5C,GAAY6C,0BACZ7C,GAAY8C,wBAGb9C,GAAYgD,kBAAoB/C,GAAUD,GAAYM,cAAe,CACpE,SACA,SACA,YAGDN,GAAYiD,oBAAsBhD,GAAUD,GAAYM,cAAe,CACtE,SACA,OACA,mBACA,OACA,mBACA,sBACA,0BACA,6BACA,uBACA,0BACA,aACA,gBACA,aACA,aACA,iBACA,cACA,kBACA,UACA,eACA,cACA,gBACA,oBACA,eACA,qBACA,oBACA,UACA,eACA,QACA,QACA,QACA,QACA,aACA,cACA,aACA,qBACA,SAGDN,GAAYkD,oBAAsBjD,GAAUD,GAAYM,cAAe,CACtE,iBACA,YACA,kBACA,kBACA,gBACA,WACA,iBACA,mBAGDN,GAAYmD,iBAAmBlD,GAAUD,GAAYM,cAAe,CACnE,WACA,UACA,QACA,SACA,QACA,UACA,WACA,SACA,YAGDN,GAAYoD,mBAAqBnD,GAAUD,GAAYM,cAAe,CAAC,WAEvEN,GAAYqD,sBAAwBpD,GACnCD,GAAYM,cACZN,GAAYgD,kBACZhD,GAAYiD,oBACZjD,GAAYY,mBACZZ,GAAYkD,oBACZlD,GAAYmD,iBACZnD,GAAYoD,mBACZpD,GAAYQ,oBAGbR,GAAYsD,yBAA2B,IAAIruB,IAAI,CAAC,OAAQ,OAGxD+qB,GAAYuD,kBAAoB,IAAItuB,IAAI,CACvC,kBACA,WACA,aACA,YACA,mBACA,qBACA,cACA,gBACA,eACA,sBACA,WACA,cACA,cACA,YACA,eACA,iBAID+qB,GAAYwD,QAAUvD,GAAUD,GAAYuD,kBAAmB,CAC9D,aACA,QACA,oBACA,UACA,gBACA,eACA,kBACA,WACA,YACA,sBACA,SACA,YACA,QACA,QACA,YACA,OACA,YACA,OACA,WACA,WACA,YACA,WACA,QACA,aAIDvD,GAAYyD,4BAA8B,IAAIxuB,IAAI,CACjD,sBACA,gBACA,eACA,0BACA,oBACA,mBACA,0BACA,oBACA,qBAID+qB,GAAY0D,kBAAoBzD,GAAUD,GAAYyD,4BAA6B,CAClF,YACA,cACA,eACA,QACA,cACA,cACA,eACA,gBACA,gBACA,OACA,SACA,QACA,kBACA,cACA,mBACA,YACA,kBACA,aACA,iBACA,iBACA,YACA,mBACA,YACA,kBACA,aACA,iBACA,iBACA,YACA,aACA,cACA,iBACA,kBACA,UACA,uBACA,mBACA,yBACA,+BACA,aACA,OACA,YACA,SACA,sBACA,UAIDzD,GAAY2D,aAAe,IAAI1uB,IAAI,CAClC,eACA,gBACA,eACA,aACA,aACA,kBACA,eACA,aACA,cACA,WACA,YACA,gBACA,iBACA,kBACA,sBACA,iBACA,WACA,OACA,WACA,YACA,mBACA,aACA,kBACA,oBACA,eACA,SACA,cACA,eAKD+qB,GAAY4D,iBAAmB,IAAI3uB,81BAGnC+qB,GAAY6D,oBAAsB,IAAI5uB,IAAI,CACzC,UACA,SACA,WACA,MACA,QACA,SACA,UACA,MACA,OACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,OACA,UACA,YACA,SACA,SACA,KACA,QAGD+qB,GAAY8D,0BAA4B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"}