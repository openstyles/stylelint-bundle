{"version":3,"file":"stylelint-bundle.min.js","sources":["../node_modules/postcss-value-parser/lib/parse.js","../node_modules/postcss-value-parser/lib/walk.js","../node_modules/postcss-value-parser/lib/stringify.js","../node_modules/postcss-value-parser/lib/unit.js","../node_modules/postcss-value-parser/lib/index.js","../node_modules/stylelint/lib/utils/getDeclarationValue.js","../node_modules/stylelint/lib/utils/matchesStringOrRegExp.js","../node_modules/stylelint/lib/utils/optionsMatches.js","../node_modules/stylelint/lib/utils/report.js","../node_modules/stylelint/lib/utils/ruleMessages.js","../node_modules/stylelint/lib/utils/arrayEqual.js","../node_modules/is-plain-object/dist/is-plain-object.mjs","../node_modules/stylelint/lib/utils/validateTypes.js","../node_modules/stylelint/lib/utils/validateOptions.js","../node_modules/stylelint/lib/rules/annotation-no-unknown/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.js","../node_modules/stylelint/lib/rules/at-rule-name-case/index.js","../node_modules/stylelint/lib/utils/addEmptyLineBefore.js","../node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/hasEmptyLine.js","../node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/typeGuards.js","../node_modules/stylelint/lib/utils/isSharedLineComment.js","../node_modules/stylelint/lib/utils/isAfterComment.js","../node_modules/stylelint/lib/utils/hasBlock.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isFirstNested.js","../node_modules/stylelint/lib/utils/isFirstNodeOfRoot.js","../node_modules/stylelint/lib/utils/removeEmptyLinesBefore.js","../node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.js","../node_modules/stylelint/lib/rules/atRuleNameSpaceChecker.js","../node_modules/stylelint/lib/utils/configurationError.js","../node_modules/stylelint/lib/utils/isSingleLineString.js","../node_modules/stylelint/lib/utils/isWhitespace.js","../node_modules/stylelint/lib/utils/whitespaceChecker.js","../node_modules/stylelint/lib/rules/at-rule-name-newline-after/index.js","../node_modules/stylelint/lib/utils/vendor.js","../node_modules/stylelint/lib/rules/at-rule-disallowed-list/index.js","../node_modules/stylelint/lib/rules/at-rule-name-space-after/index.js","../node_modules/stylelint/lib/utils/isAutoprefixable.js","../node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js","../node_modules/stylelint/lib/utils/uniteSets.js","../node_modules/stylelint/lib/reference/atKeywords.js","../node_modules/stylelint/lib/rules/at-rule-no-unknown/index.js","../node_modules/stylelint/lib/utils/flattenArray.js","../node_modules/stylelint/lib/utils/validateObjectWithArrayProps.js","../node_modules/stylelint/lib/rules/at-rule-property-required-list/index.js","../node_modules/stylelint/lib/utils/beforeBlockString.js","../node_modules/stylelint/lib/utils/rawNodeString.js","../node_modules/stylelint/lib/utils/blockString.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-after/index.js","../node_modules/stylelint/lib/utils/addEmptyLineAfter.js","../node_modules/stylelint/lib/utils/hasEmptyBlock.js","../node_modules/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js","../node_modules/stylelint/lib/utils/removeEmptyLinesAfter.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-before/index.js","../node_modules/stylelint/lib/utils/nextNonCommentNode.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-after/index.js","../node_modules/stylelint/lib/utils/stylelintCommand.js","../node_modules/stylelint/lib/rules/block-no-empty/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-after/index.js","../node_modules/stylelint/lib/utils/declarationValueIndex.js","../node_modules/stylelint/lib/utils/isStandardSyntaxFunction.js","../node_modules/stylelint/lib/utils/isStandardSyntaxColorFunction.js","../node_modules/stylelint/lib/utils/setDeclarationValue.js","../node_modules/stylelint/lib/rules/color-function-notation/index.js","../node_modules/stylelint/lib/rules/color-hex-length/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-after/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/color-hex-alpha/index.js","../node_modules/stylelint/lib/rules/color-hex-case/index.js","../node_modules/stylelint/lib/rules/comment-pattern/index.js","../node_modules/stylelint/lib/rules/color-no-hex/index.js","../node_modules/stylelint/lib/utils/atRuleParamIndex.js","../node_modules/stylelint/lib/rules/custom-media-pattern/index.js","../node_modules/stylelint/lib/utils/hasLessInterpolation.js","../node_modules/stylelint/lib/utils/hasPsvInterpolation.js","../node_modules/stylelint/lib/utils/hasScssInterpolation.js","../node_modules/stylelint/lib/utils/hasTplInterpolation.js","../node_modules/stylelint/lib/utils/hasInterpolation.js","../node_modules/stylelint/lib/utils/isStandardSyntaxValue.js","../node_modules/stylelint/lib/reference/properties.js","../node_modules/colord/index.mjs","../node_modules/colord/plugins/hwb.mjs","../node_modules/colord/plugins/lab.mjs","../node_modules/colord/plugins/lch.mjs","../node_modules/stylelint/lib/rules/color-named/colordUtils.js","../node_modules/colord/plugins/names.mjs","../node_modules/stylelint/lib/rules/color-named/index.js","../node_modules/stylelint/lib/rules/color-no-invalid-hex/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxHexColor.js","../node_modules/stylelint/lib/utils/isValidHex.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-space-before/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxComment.js","../node_modules/stylelint/lib/rules/comment-whitespace-inside/index.js","../node_modules/stylelint/lib/rules/comment-empty-line-before/index.js","../node_modules/stylelint/lib/rules/comment-no-empty/index.js","../node_modules/stylelint/lib/utils/isCustomProperty.js","../node_modules/stylelint/lib/utils/isScssVariable.js","../node_modules/stylelint/lib/utils/isStandardSyntaxProperty.js","../node_modules/stylelint/lib/rules/custom-property-pattern/index.js","../node_modules/stylelint/lib/utils/eachDeclarationBlock.js","../node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js","../node_modules/stylelint/lib/utils/containsString.js","../node_modules/stylelint/lib/rules/comment-word-disallowed-list/index.js","../node_modules/style-search/index.js","../node_modules/stylelint/lib/rules/declarationBangSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-bang-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js","../node_modules/stylelint/lib/rules/custom-property-no-missing-var-function/index.js","../node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js","../node_modules/stylelint/lib/rules/alpha-value-notation/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-bang-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.js","../node_modules/stylelint/lib/rules/declarationColonSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-colon-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-property-max-values/index.js","../node_modules/stylelint/lib/utils/validateObjectWithProps.js","../node_modules/stylelint/lib/utils/blurInterpolation.js","../node_modules/stylelint/lib/utils/getDimension.js","../node_modules/stylelint/lib/rules/declaration-property-unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-colon-space-after/index.js","../node_modules/stylelint/lib/rules/functionCommaSpaceFix.js","../node_modules/stylelint/lib/rules/functionCommaSpaceChecker.js","../node_modules/stylelint/lib/rules/function-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-allowed-list/index.js","../node_modules/stylelint/lib/utils/isNumbery.js","../node_modules/stylelint/lib/reference/keywords.js","../node_modules/stylelint/lib/reference/units.js","../node_modules/stylelint/lib/utils/isValidFontSize.js","../node_modules/stylelint/lib/utils/isVariable.js","../node_modules/stylelint/lib/utils/findFontFamily.js","../node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.js","../node_modules/stylelint/lib/utils/getImportantPosition.js","../node_modules/stylelint/lib/rules/declaration-no-important/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-disallowed-list/index.js","../node_modules/stylelint/lib/rules/font-family-name-quotes/index.js","../node_modules/stylelint/lib/rules/function-comma-space-before/index.js","../shim/process.js","../node_modules/picocolors/picocolors.js","../node_modules/postcss/lib/tokenize.js","../node_modules/postcss/lib/terminal-highlight.js","../node_modules/postcss/lib/css-syntax-error.js","../node_modules/postcss/lib/symbols.js","../node_modules/postcss/lib/stringifier.js","../node_modules/postcss/lib/stringify.js","../node_modules/postcss/lib/node.js","../node_modules/postcss/lib/declaration.js","../shim/empty.js","../node_modules/postcss/node_modules/nanoid/non-secure/index.js","../node_modules/postcss/lib/previous-map.js","../node_modules/postcss/lib/input.js","../node_modules/postcss/lib/map-generator.js","../node_modules/postcss/lib/container.js","../node_modules/postcss/lib/document.js","../node_modules/postcss/lib/comment.js","../node_modules/postcss/lib/warn-once.js","../node_modules/postcss/lib/warning.js","../node_modules/postcss/lib/result.js","../node_modules/postcss/lib/at-rule.js","../node_modules/postcss/lib/root.js","../node_modules/postcss/lib/list.js","../node_modules/postcss/lib/rule.js","../node_modules/postcss/lib/parser.js","../node_modules/postcss/lib/parse.js","../node_modules/postcss/lib/lazy-result.js","../node_modules/postcss/lib/no-work-result.js","../node_modules/postcss/lib/processor.js","../node_modules/postcss/lib/fromJSON.js","../node_modules/postcss/lib/postcss.js","../node_modules/postcss/lib/postcss.mjs","../node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.js","../node_modules/stylelint/lib/rules/function-allowed-list/index.js","../node_modules/stylelint/lib/rules/custom-property-empty-line-before/index.js","../node_modules/stylelint/lib/rules/function-disallowed-list/index.js","../node_modules/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js","../node_modules/stylelint/lib/rules/function-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomFunction.js","../node_modules/stylelint/lib/rules/declaration-colon-newline-after/index.js","../node_modules/stylelint/lib/rules/function-max-empty-lines/index.js","../node_modules/stylelint/node_modules/balanced-match/index.js","../node_modules/stylelint/lib/utils/functionArgumentsSearch.js","../node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js","../node_modules/stylelint/lib/utils/getSchemeFromUrl.js","../node_modules/stylelint/lib/utils/isStandardSyntaxUrl.js","../node_modules/stylelint/lib/rules/function-url-scheme-disallowed-list/index.js","../node_modules/stylelint/lib/rules/function-url-quotes/index.js","../node_modules/stylelint/lib/rules/function-url-no-scheme-relative/index.js","../node_modules/stylelint/lib/rules/function-parentheses-newline-inside/index.js","../node_modules/stylelint/lib/rules/function-whitespace-after/index.js","../node_modules/stylelint/lib/rules/function-url-scheme-allowed-list/index.js","../node_modules/stylelint/lib/reference/functions.js","../node_modules/stylelint/lib/rules/function-name-case/index.js","../node_modules/stylelint/lib/rules/function-parentheses-space-inside/index.js","../node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.js","../node_modules/stylelint/lib/rules/declaration-empty-line-before/index.js","../node_modules/stylelint/lib/utils/setAtRuleParams.js","../node_modules/stylelint/lib/utils/getAtRuleParams.js","../node_modules/stylelint/lib/rules/import-notation/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxSelector.js","../node_modules/stylelint/lib/rules/keyframe-block-no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/length-zero-no-unit/index.js","../node_modules/stylelint/lib/utils/isMathFunction.js","../node_modules/stylelint/lib/rules/keyframe-declaration-no-important/index.js","../node_modules/stylelint/lib/rules/hue-degree-notation/index.js","../node_modules/postcss-selector-parser/dist/util/unesc.js","../node_modules/postcss-selector-parser/dist/util/getProp.js","../node_modules/postcss-selector-parser/dist/util/ensureObject.js","../node_modules/postcss-selector-parser/dist/util/stripComments.js","../node_modules/postcss-selector-parser/dist/util/index.js","../node_modules/postcss-selector-parser/dist/selectors/node.js","../node_modules/postcss-selector-parser/dist/selectors/types.js","../node_modules/postcss-selector-parser/dist/selectors/container.js","../node_modules/postcss-selector-parser/dist/selectors/root.js","../node_modules/postcss-selector-parser/dist/selectors/selector.js","../node_modules/cssesc/cssesc.js","../node_modules/postcss-selector-parser/dist/selectors/className.js","../node_modules/postcss-selector-parser/dist/selectors/comment.js","../node_modules/postcss-selector-parser/dist/selectors/id.js","../node_modules/postcss-selector-parser/dist/selectors/namespace.js","../node_modules/postcss-selector-parser/dist/selectors/tag.js","../node_modules/postcss-selector-parser/dist/selectors/string.js","../node_modules/postcss-selector-parser/dist/selectors/pseudo.js","../node_modules/util-deprecate/node.js","../shim/util.js","../node_modules/postcss-selector-parser/dist/selectors/attribute.js","../node_modules/postcss-selector-parser/dist/selectors/universal.js","../node_modules/postcss-selector-parser/dist/selectors/combinator.js","../node_modules/postcss-selector-parser/dist/selectors/nesting.js","../node_modules/postcss-selector-parser/dist/sortAscending.js","../node_modules/postcss-selector-parser/dist/tokenTypes.js","../node_modules/postcss-selector-parser/dist/tokenize.js","../node_modules/postcss-selector-parser/dist/parser.js","../node_modules/postcss-selector-parser/dist/processor.js","../node_modules/postcss-selector-parser/dist/selectors/constructors.js","../node_modules/postcss-selector-parser/dist/selectors/guards.js","../node_modules/postcss-selector-parser/dist/selectors/index.js","../node_modules/postcss-selector-parser/dist/index.js","../node_modules/stylelint/lib/utils/transformSelector.js","../node_modules/stylelint/lib/rules/keyframe-selector-notation/index.js","../node_modules/stylelint/lib/rules/max-line-length/index.js","../node_modules/stylelint/lib/utils/isCustomMediaQuery.js","../node_modules/stylelint/lib/utils/isRangeContextMediaFeature.js","../node_modules/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js","../node_modules/postcss-media-query-parser/dist/nodes/Node.js","../node_modules/postcss-media-query-parser/dist/nodes/Container.js","../node_modules/postcss-media-query-parser/dist/parsers.js","../node_modules/postcss-media-query-parser/dist/index.js","../node_modules/stylelint/lib/rules/rangeContextNodeParser.js","../node_modules/stylelint/lib/rules/media-feature-name-allowed-list/index.js","../node_modules/stylelint/lib/rules/max-empty-lines/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxRule.js","../node_modules/stylelint/lib/rules/max-nesting-depth/index.js","../node_modules/stylelint/lib/rules/keyframes-name-pattern/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxKeyframesName.js","../node_modules/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-before/index.js","../node_modules/stylelint/lib/rules/media-feature-name-value-allowed-list/index.js","../node_modules/stylelint/lib/reference/mediaFeatures.js","../node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.js","../node_modules/stylelint/lib/rules/media-feature-name-case/index.js","../node_modules/stylelint/lib/rules/font-weight-notation/index.js","../node_modules/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-after/index.js","../node_modules/stylelint/lib/rules/media-feature-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/findMediaOperator.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-before/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/linebreaks/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-before/index.js","../node_modules/postcss-resolve-nested-selector/index.js","../node_modules/@csstools/selector-specificity/dist/index.mjs","../node_modules/stylelint/lib/utils/findAtRuleContext.js","../node_modules/stylelint/lib/reference/selectors.js","../node_modules/stylelint/lib/utils/nodeContextLookup.js","../node_modules/stylelint/lib/utils/parseSelector.js","../node_modules/stylelint/lib/rules/no-descending-specificity/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/no-empty-source/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/findNotContiguousOrRectangular.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/index.js","../node_modules/stylelint/lib/utils/isOnlyWhitespace.js","../node_modules/stylelint/lib/rules/no-eol-whitespace/index.js","../node_modules/stylelint/lib/utils/isKeyframeRule.js","../node_modules/stylelint/lib/rules/no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.js","../node_modules/stylelint/lib/rules/no-invalid-position-at-import-rule/index.js","../node_modules/stylelint/lib/rules/number-leading-zero/index.js","../node_modules/stylelint/lib/rules/no-extra-semicolons/index.js","../node_modules/stylelint/lib/rules/no-missing-end-of-source-newline/index.js","../node_modules/stylelint/lib/rules/no-invalid-double-slash-comments/index.js","../node_modules/stylelint/lib/rules/no-empty-first-line/index.js","../node_modules/stylelint/lib/rules/no-unknown-animations/index.js","../node_modules/stylelint/lib/utils/findAnimationName.js","../node_modules/stylelint/lib/rules/function-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/property-allowed-list/index.js","../node_modules/stylelint/lib/rules/number-no-trailing-zeros/index.js","../node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/property-case/index.js","../node_modules/stylelint/lib/rules/function-comma-space-after/index.js","../node_modules/known-css-properties/index.js","../node_modules/stylelint/lib/rules/property-no-unknown/index.js","../node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-allowed-list/index.js","../node_modules/stylelint/lib/rules/rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isAfterSingleLineComment.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/rule-selector-property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-before/index.js","../node_modules/stylelint/lib/rules/at-rule-allowed-list/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxCombinator.js","../node_modules/stylelint/lib/rules/selector-combinator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-custom-properties/index.js","../node_modules/stylelint/lib/rules/selectorCombinatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-combinator-space-before/index.js","../node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-combinator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-attribute-quotes/index.js","../node_modules/stylelint/lib/utils/getRuleSelector.js","../node_modules/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-after/index.js","../node_modules/stylelint/lib/utils/isContextFunctionalPseudoClass.js","../node_modules/stylelint/lib/utils/isNonNegativeInteger.js","../node_modules/stylelint/lib/rules/selector-max-attribute/index.js","../node_modules/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js","../node_modules/stylelint/lib/rules/selector-disallowed-list/index.js","../node_modules/stylelint/lib/rules/no-irregular-whitespace/index.js","../node_modules/stylelint/lib/rules/selector-max-combinators/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-max-pseudo-class/index.js","../node_modules/stylelint/lib/rules/selector-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/selector-max-universal/index.js","../node_modules/stylelint/lib/rules/selector-max-id/index.js","../node_modules/stylelint/lib/rules/selector-not-notation/index.js","../node_modules/stylelint/lib/rules/selector-id-pattern/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-allowed-list/index.js","../node_modules/stylelint/lib/utils/isKeyframeSelector.js","../node_modules/stylelint/lib/utils/isStandardSyntaxTypeSelector.js","../node_modules/stylelint/lib/rules/selector-max-type/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.js","../node_modules/stylelint/lib/rules/selector-class-pattern/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-case/index.js","../node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-disallowed-list/index.js","../node_modules/stylelint/lib/rules/string-no-newline/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomSelector.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js","../node_modules/stylelint/lib/rules/number-max-precision/index.js","../node_modules/stylelint/lib/rules/selector-max-specificity/index.js","../node_modules/stylelint/lib/rules/unicode-bom/index.js","../node_modules/stylelint/lib/rules/selector-type-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomElement.js","../node_modules/stylelint/lib/rules/selector-type-case/index.js","../node_modules/stylelint/lib/rules/string-quotes/index.js","../node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js","../node_modules/stylelint/lib/rules/unit-case/index.js","../node_modules/stylelint/lib/rules/unit-no-unknown/index.js","../node_modules/stylelint/lib/rules/valueListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-case/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/value-keyword-case/index.js","../node_modules/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js","../node_modules/stylelint/lib/utils/isCounterResetCustomIdentValue.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/time-min-milliseconds/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-disallowed-list/index.js","../node_modules/stylelint/lib/rules/indentation/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/selector-max-class/index.js","../node_modules/stylelint/lib/rules/selector-nested-pattern/index.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-after/index.js","../node_modules/stylelint/lib/rules/unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/value-list-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/index.js","../node_modules/stylelint/lib/normalizeRuleSettings.js","../node_modules/stylelint/lib/createPlugin.js","../node_modules/stylelint/lib/utils/getModulePath.js","../node_modules/globjoin/index.js","../node_modules/stylelint/lib/normalizeAllRuleSettings.js","../node_modules/stylelint/lib/augmentConfig.js","../node_modules/stylelint/lib/createStylelint.js","../node_modules/stylelint/lib/formatters/tapFormatter.js","../node_modules/strip-ansi/index.js","../node_modules/ansi-regex/index.js","../node_modules/is-fullwidth-code-point/index.js","../node_modules/string-width/index.js","../node_modules/emoji-regex/index.js","../node_modules/stylelint/lib/utils/pluralize.js","../node_modules/supports-hyperlinks/node_modules/has-flag/index.js","../node_modules/supports-hyperlinks/node_modules/supports-color/index.js","../shim/os.js","../node_modules/supports-hyperlinks/index.js","../shim/tty.js","../node_modules/stylelint/lib/formatters/terminalLink.js","../node_modules/stylelint/lib/formatters/stringFormatter.js","../node_modules/stylelint/lib/formatters/verboseFormatter.js","../node_modules/stylelint/lib/formatters/index.js","../node_modules/stylelint/lib/formatters/compactFormatter.js","../node_modules/stylelint/lib/formatters/githubFormatter.js","../node_modules/stylelint/lib/formatters/jsonFormatter.js","../node_modules/stylelint/lib/formatters/unixFormatter.js","../shim/getConfigForFile.js","../node_modules/postcss-safe-parser/lib/safe-parser.js","../node_modules/postcss-safe-parser/lib/safe-parse.js","../node_modules/stylelint/lib/getPostcssResult.js","../shim/isPathIgnored.js","../node_modules/stylelint/lib/utils/isPathNotFoundError.js","../node_modules/stylelint/lib/assignDisabledRanges.js","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/stylelint/lib/reportUnknownRuleNames.js","../node_modules/stylelint/lib/lintSource.js","../node_modules/stylelint/lib/lintPostcssResult.js","../node_modules/stylelint/lib/postcssPlugin.js","../node_modules/stylelint/lib/resolveConfig.js","../node_modules/stylelint/lib/createStylelintResult.js","../node_modules/stylelint/lib/createPartialStylelintResult.js","../node_modules/stylelint/lib/utils/filterFilePaths.js","../node_modules/stylelint/lib/utils/noFilesFoundError.js","../node_modules/stylelint/lib/utils/allFilesIgnoredError.js","../node_modules/stylelint/lib/validateDisableSettings.js","../node_modules/stylelint/lib/utils/putIfAbsent.js","../node_modules/stylelint/lib/needlessDisables.js","../node_modules/stylelint/lib/reportDisables.js","../node_modules/stylelint/lib/prepareReturnValue.js","../node_modules/stylelint/lib/invalidScopeDisables.js","../node_modules/stylelint/lib/descriptionlessDisables.js","../node_modules/stylelint/lib/standalone.js","../node_modules/stylelint/lib/index.js","../node_modules/stylelint/lib/utils/getFormatterOptionsText.js","../node_modules/normalize-path/index.js","../node_modules/stylelint/lib/utils/checkAgainstRule.js","../node_modules/sugarss/stringifier.js","../node_modules/sugarss/preprocess.js","../node_modules/sugarss/tokenize.js","../node_modules/sugarss/parser.js","../node_modules/sugarss/index.js","../node_modules/sugarss/stringify.js","../node_modules/sugarss/parse.js","../node_modules/sugarss/liner.js","../index.js"],"sourcesContent":["var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n","module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n","function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n","var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n","var parse = require(\"./parse\");\nvar walk = require(\"./walk\");\nvar stringify = require(\"./stringify\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = require(\"./unit\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n","'use strict';\n\n/**\n * @param {import('postcss').Declaration} decl\n * @returns {string}\n */\nmodule.exports = function getDeclarationValue(decl) {\n\tconst raws = decl.raws;\n\n\treturn (raws.value && raws.value.raw) || decl.value;\n};\n","'use strict';\n\n/**\n * Compares a string to a second value that, if it fits a certain convention,\n * is converted to a regular expression before the comparison.\n * If it doesn't fit the convention, then two strings are compared.\n *\n * Any strings starting and ending with `/` are interpreted\n * as regular expressions.\n *\n * @param {string | Array<string>} input\n * @param {string | RegExp | Array<string | RegExp>} comparison\n *\n * @returns {false | {match: string, pattern: (string | RegExp), substring: string}}\n */\nmodule.exports = function matchesStringOrRegExp(input, comparison) {\n\tif (!Array.isArray(input)) {\n\t\treturn testAgainstStringOrRegExpOrArray(input, comparison);\n\t}\n\n\tfor (const inputItem of input) {\n\t\tconst testResult = testAgainstStringOrRegExpOrArray(inputItem, comparison);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {string | RegExp | Array<string | RegExp>} comparison\n */\nfunction testAgainstStringOrRegExpOrArray(value, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstStringOrRegExp(value, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstStringOrRegExp(value, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} value\n * @param {string | RegExp} comparison\n */\nfunction testAgainstStringOrRegExp(value, comparison) {\n\t// If it's a RegExp, test directly\n\tif (comparison instanceof RegExp) {\n\t\tconst match = value.match(comparison);\n\n\t\treturn match ? { match: value, pattern: comparison, substring: match[0] || '' } : false;\n\t}\n\n\t// Check if it's RegExp in a string\n\tconst firstComparisonChar = comparison[0];\n\tconst lastComparisonChar = comparison[comparison.length - 1];\n\tconst secondToLastComparisonChar = comparison[comparison.length - 2];\n\n\tconst comparisonIsRegex =\n\t\tfirstComparisonChar === '/' &&\n\t\t(lastComparisonChar === '/' ||\n\t\t\t(secondToLastComparisonChar === '/' && lastComparisonChar === 'i'));\n\n\tconst hasCaseInsensitiveFlag = comparisonIsRegex && lastComparisonChar === 'i';\n\n\t// If so, create a new RegExp from it\n\tif (comparisonIsRegex) {\n\t\tconst valueMatch = hasCaseInsensitiveFlag\n\t\t\t? value.match(new RegExp(comparison.slice(1, -2), 'i'))\n\t\t\t: value.match(new RegExp(comparison.slice(1, -1)));\n\n\t\treturn valueMatch\n\t\t\t? { match: value, pattern: comparison, substring: valueMatch[0] || '' }\n\t\t\t: false;\n\t}\n\n\t// Otherwise, it's a string. Do a strict comparison\n\treturn value === comparison ? { match: value, pattern: comparison, substring: value } : false;\n}\n","'use strict';\n\nconst matchesStringOrRegExp = require('./matchesStringOrRegExp');\n\n/**\n * Check if an options object's propertyName contains a user-defined string or\n * regex that matches the passed in input.\n *\n * @param {{ [x: string]: any; }} options\n * @param {string} propertyName\n * @param {unknown} input\n *\n * @returns {boolean}\n */\nmodule.exports = function optionsMatches(options, propertyName, input) {\n\treturn Boolean(\n\t\toptions &&\n\t\t\toptions[propertyName] &&\n\t\t\ttypeof input === 'string' &&\n\t\t\tmatchesStringOrRegExp(input, options[propertyName]),\n\t);\n};\n","'use strict';\n\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\nmodule.exports = function report(problem) {\n\tconst { ruleName, result, message, messageArgs, line, node, index, endIndex, word } = problem;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\tconst { start } = (node && node.rangeBy({ index, endIndex })) || {};\n\n\t// If a line is not passed, use the node.rangeBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || (start && start.line);\n\n\tif (!startLine) {\n\t\tthrow new Error('You must pass either a node or a line number');\n\t}\n\n\tconst { ignoreDisables } = result.stylelint.config || {};\n\n\tif (result.stylelint.disabledRanges) {\n\t\tconst ranges =\n\t\t\tresult.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the problem is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\t// Collect disabled warnings\n\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\tconst disabledWarnings =\n\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\trule: ruleName,\n\t\t\t\t\tline: startLine,\n\t\t\t\t});\n\n\t\t\t\tif (!ignoreDisables) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\tif (!result.stylelint.stylelintWarning && severity === 'warning') {\n\t\tresult.stylelint.stylelintWarning = true;\n\t}\n\n\t/** @type {import('stylelint').WarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (problem.start) {\n\t\twarningProperties.start = problem.start;\n\t} else if (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (problem.end) {\n\t\twarningProperties.end = problem.end;\n\t} else if (endIndex) {\n\t\twarningProperties.endIndex = endIndex;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst { customMessages } = result.stylelint;\n\tconst warningMessage = buildWarningMessage(\n\t\t(customMessages && customMessages[ruleName]) || message,\n\t\tmessageArgs,\n\t);\n\n\tresult.warn(warningMessage, warningProperties);\n};\n\n/**\n * @param {import('stylelint').RuleMessage} message\n * @param {import('stylelint').Problem['messageArgs']} messageArgs\n * @returns {string}\n */\nfunction buildWarningMessage(message, messageArgs) {\n\tconst args = messageArgs || [];\n\n\tif (typeof message === 'string') {\n\t\treturn printfLike(message, ...args);\n\t}\n\n\treturn message(...args);\n}\n\n/**\n * @param {string} format\n * @param {Array<unknown>} args\n * @returns {string}\n */\nfunction printfLike(format, ...args) {\n\treturn args.reduce((/** @type {string} */ result, arg) => {\n\t\treturn result.replace(/%[ds]/, String(arg));\n\t}, format);\n}\n","'use strict';\n\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\nfunction ruleMessages(ruleName, messages) {\n\t/** @typedef {keyof T} K */\n\tconst newMessages = /** @type {R} */ ({});\n\n\tfor (const [messageId, messageText] of /** @type {[K, T[K]][]} */ (Object.entries(messages))) {\n\t\tif (typeof messageText === 'string') {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (`${messageText} (${ruleName})`);\n\t\t} else {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (\n\t\t\t\t(...args) => `${messageText(...args)} (${ruleName})`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn newMessages;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.ruleMessages} */ (ruleMessages);\n","'use strict';\n\n/**\n * Tests if two arrays are equal.\n *\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nmodule.exports = function arrayEqual(a, b) {\n\tif (!Array.isArray(a) || !Array.isArray(b)) return false;\n\n\tif (a.length !== b.length) return false;\n\n\treturn a.every((elem, index) => elem === b[index]);\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","'use strict';\n\nconst { isPlainObject: _isPlainObject } = require('is-plain-object');\n\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\nfunction isBoolean(value) {\n\treturn typeof value === 'boolean' || value instanceof Boolean;\n}\n\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\nfunction isFunction(value) {\n\treturn typeof value === 'function' || value instanceof Function;\n}\n\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\nfunction isNullish(value) {\n\treturn value == null;\n}\n\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\nfunction isNumber(value) {\n\treturn typeof value === 'number' || value instanceof Number;\n}\n\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\nfunction isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\nfunction isString(value) {\n\treturn typeof value === 'string' || value instanceof String;\n}\n\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\nfunction isPlainObject(value) {\n\treturn _isPlainObject(value);\n}\n\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\nfunction assert(value, message = undefined) {\n\tif (message) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value, message);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value);\n\t}\n}\n\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\nfunction assertFunction(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\nfunction assertNumber(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\nfunction assertString(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n\tisBoolean,\n\tisFunction,\n\tisNullish,\n\tisNumber,\n\tisRegExp,\n\tisString,\n\tisPlainObject,\n\n\tassert,\n\tassertFunction,\n\tassertNumber,\n\tassertString,\n};\n","'use strict';\n\nconst arrayEqual = require('./arrayEqual');\nconst { isPlainObject } = require('./validateTypes');\n\nconst IGNORED_OPTIONS = new Set(['severity', 'message', 'reportDisables', 'disableFix']);\n\n/** @typedef {import('stylelint').RuleOptions} RuleOptions */\n/** @typedef {import('stylelint').RuleOptionsPossible} Possible */\n/** @typedef {import('stylelint').RuleOptionsPossibleFunc} PossibleFunc */\n\n/**\n * Validate a rule's options.\n *\n * See existing rules for examples.\n *\n * @param {import('stylelint').PostcssResult} result - postcss result\n * @param {string} ruleName\n * @param {...RuleOptions} optionDescriptions - Each optionDescription can\n *   have the following properties:\n *   - `actual` (required): the actual passed option value or object.\n *   - `possible` (required): a schema representation of what values are\n *      valid for those options. `possible` should be an object if the\n *      options are an object, with corresponding keys; if the options are not an\n *      object, `possible` isn't, either. All `possible` value representations\n *      should be **arrays of either values or functions**. Values are === checked\n *      against `actual`. Functions are fed `actual` as an argument and their\n *      return value is interpreted: truthy = valid, falsy = invalid.\n *    - `optional` (optional): If this is `true`, `actual` can be undefined.\n * @return {boolean} Whether or not the options are valid (true = valid)\n */\nfunction validateOptions(result, ruleName, ...optionDescriptions) {\n\tlet noErrors = true;\n\n\tfor (const optionDescription of optionDescriptions) {\n\t\tvalidate(optionDescription, ruleName, complain);\n\t}\n\n\t/**\n\t * @param {string} message\n\t */\n\tfunction complain(message) {\n\t\tnoErrors = false;\n\t\tresult.warn(message, {\n\t\t\tstylelintType: 'invalidOption',\n\t\t});\n\t\tresult.stylelint = result.stylelint || {\n\t\t\tdisabledRanges: {},\n\t\t\truleSeverities: {},\n\t\t\tcustomMessages: {},\n\t\t\truleMetadata: {},\n\t\t};\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\treturn noErrors;\n}\n\n/**\n * @param {RuleOptions} opts\n * @param {string} ruleName\n * @param {(message: string) => void} complain\n */\nfunction validate(opts, ruleName, complain) {\n\tconst possible = opts.possible;\n\tconst actual = opts.actual;\n\tconst optional = opts.optional;\n\n\tif (actual === false && !ruleName.startsWith('report')) {\n\t\treturn complain(\n\t\t\t`Invalid option value \"false\" for rule \"${ruleName}\". Are you trying to disable this rule? If so use \"null\" instead`,\n\t\t);\n\t}\n\n\tif (actual === null || arrayEqual(actual, [null])) {\n\t\treturn;\n\t}\n\n\tconst nothingPossible =\n\t\tpossible === undefined || (Array.isArray(possible) && possible.length === 0);\n\n\tif (nothingPossible && actual === true) {\n\t\treturn;\n\t}\n\n\tif (actual === undefined) {\n\t\tif (nothingPossible || optional) {\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Expected option value for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (nothingPossible) {\n\t\tif (optional) {\n\t\t\tcomplain(\n\t\t\t\t`Incorrect configuration for rule \"${ruleName}\". Rule should have \"possible\" values for options validation`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Unexpected option value ${stringify(actual)} for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (typeof possible === 'function') {\n\t\tif (!possible(actual)) {\n\t\t\tcomplain(`Invalid option ${stringify(actual)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If `possible` is an array instead of an object ...\n\tif (Array.isArray(possible)) {\n\t\tfor (const a of [actual].flat()) {\n\t\t\tif (isValid(possible, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid option value ${stringify(a)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If actual is NOT an object ...\n\tif (!isPlainObject(actual) || typeof actual !== 'object' || actual == null) {\n\t\tcomplain(\n\t\t\t`Invalid option value ${stringify(actual)} for rule \"${ruleName}\": should be an object`,\n\t\t);\n\n\t\treturn;\n\t}\n\n\tfor (const [optionName, optionValue] of Object.entries(actual)) {\n\t\tif (IGNORED_OPTIONS.has(optionName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst possibleValue = possible && possible[optionName];\n\n\t\tif (!possibleValue) {\n\t\t\tcomplain(`Invalid option name \"${optionName}\" for rule \"${ruleName}\"`);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const a of [optionValue].flat()) {\n\t\t\tif (isValid(possibleValue, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid value ${stringify(a)} for option \"${optionName}\" of rule \"${ruleName}\"`);\n\t\t}\n\t}\n}\n\n/**\n * @param {Possible | Possible[]} possible\n * @param {unknown} actual\n * @returns {boolean}\n */\nfunction isValid(possible, actual) {\n\tfor (const possibility of [possible].flat()) {\n\t\tif (typeof possibility === 'function' && possibility(actual)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (actual === possibility) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nfunction stringify(value) {\n\tif (typeof value === 'string') {\n\t\treturn `\"${value}\"`;\n\t}\n\n\treturn `\"${JSON.stringify(value)}\"`;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.validateOptions} */ (validateOptions);\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'annotation-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (annotation) => `Unexpected unknown annotation \"${annotation}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/annotation-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAnnotations: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tif (decl.important) return;\n\n\t\t\tif (!decl.value.includes('!')) return;\n\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isAnnotation(node)) return;\n\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst tokenValue = value.slice(1);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAnnotations', tokenValue)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: value,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {valueParser.Node} node\n\t\t */\n\t\tfunction isAnnotation(node) {\n\t\t\treturn node.type === 'word' && node.value.startsWith('!');\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\nmodule.exports = function isStandardSyntaxAtRule(atRule) {\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'lower' | 'upper'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tconst expectedName = expectation === 'lower' ? name.toLowerCase() : name.toUpperCase();\n\n\t\t\tif (name === expectedName) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = expectedName;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(name, expectedName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line before a node. Mutates the node.\n *\n * @template {import('postcss').ChildNode} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineBefore(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.before !== 'string') {\n\t\treturn node;\n\t}\n\n\traws.before = !/\\r?\\n/.test(raws.before)\n\t\t? newline.repeat(2) + raws.before\n\t\t: raws.before.replace(/(\\r?\\n)/, `${newline}$1`);\n\n\treturn node;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node} node\n */\nfunction getNodeLine(node) {\n\treturn node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | undefined} node\n * @returns {Node | undefined}\n */\nmodule.exports = function getPreviousNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn previousNode;\n\t}\n\n\tif (getNodeLine(node) === getNodeLine(previousNode)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\tconst previousNode2 = previousNode.prev();\n\n\tif (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\treturn previousNode;\n};\n","'use strict';\n\n/**\n * Check if a string contains at least one empty line\n *\n * @param {string | undefined} string\n * @returns {boolean}\n */\nmodule.exports = function hasEmptyLine(string) {\n\tif (string === '' || string === undefined) return false;\n\n\treturn /\\n[\\r\\t ]*\\n/.test(string);\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node | void} node\n */\nfunction getNodeLine(node) {\n\treturn node && node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | void} node\n * @returns {Node | void}\n */\nmodule.exports = function getNextNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/** @type {Node | void} */\n\tconst nextNode = node.next();\n\n\tif (!nextNode || nextNode.type !== 'comment') {\n\t\treturn nextNode;\n\t}\n\n\tif (\n\t\tgetNodeLine(node) === getNodeLine(nextNode) ||\n\t\tgetNodeLine(nextNode) === getNodeLine(nextNode.next())\n\t) {\n\t\treturn getNextNonSharedLineCommentNode(nextNode);\n\t}\n\n\treturn nextNode;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n/** @typedef {import('postcss').Node} NodeSource */\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Root}\n */\nmodule.exports.isRoot = function isRoot(node) {\n\treturn node.type === 'root';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Rule}\n */\nmodule.exports.isRule = function isRule(node) {\n\treturn node.type === 'rule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').AtRule}\n */\nmodule.exports.isAtRule = function isAtRule(node) {\n\treturn node.type === 'atrule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Comment}\n */\nmodule.exports.isComment = function isComment(node) {\n\treturn node.type === 'comment';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Declaration}\n */\nmodule.exports.isDeclaration = function isDeclaration(node) {\n\treturn node.type === 'decl';\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').FunctionNode}\n */\nmodule.exports.isValueFunction = function isValueFunction(node) {\n\treturn node.type === 'function';\n};\n\n/**\n * @param {Node} node\n * @returns {node is (Node & {source: NodeSource})}\n */\nmodule.exports.hasSource = function hasSource(node) {\n\treturn Boolean(node.source);\n};\n","'use strict';\n\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst { isRoot, isComment } = require('./typeGuards');\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\tconst aLine = a && a.source && a.source.end && a.source.end.line;\n\tconst bLine = b && b.source && b.source.start && b.source.start.line;\n\n\treturn aLine === bLine;\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nmodule.exports = function isSharedLineComment(node) {\n\tif (!isComment(node)) {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\t!isRoot(parentNode) &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function isAfterComment(node) {\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\treturn !isSharedLineComment(previousNode);\n};\n","'use strict';\n\n/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @return {boolean} True if `statement` has a block (empty or otherwise)\n */\nmodule.exports = function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst hasBlock = require('./hasBlock');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function isBlocklessAtRuleAfterBlocklessAtRule(atRule) {\n\tif (atRule.type !== 'atrule') {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode === undefined) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(previousNode) && !hasBlock(previousNode) && !hasBlock(atRule);\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('./isBlocklessAtRuleAfterBlocklessAtRule');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function isBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule) {\n\tif (!isBlocklessAtRuleAfterBlocklessAtRule(atRule)) {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode && isAtRule(previousNode)) {\n\t\treturn previousNode.name === atRule.name;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst { isComment, hasSource } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} statement\n * @returns {boolean}\n */\nmodule.exports = function isFirstNested(statement) {\n\tconst parentNode = statement.parent;\n\n\tif (parentNode === undefined || parentNode.type === 'root') {\n\t\treturn false;\n\t}\n\n\tif (statement === parentNode.first) {\n\t\treturn true;\n\t}\n\n\t/*\n\t * Search for the statement in the parent's nodes, ignoring comment\n\t * nodes on the same line as the parent's opening brace.\n\t */\n\n\tconst parentNodes = parentNode.nodes;\n\n\tif (!parentNodes) {\n\t\treturn false;\n\t}\n\n\tconst firstNode = parentNodes[0];\n\n\tif (!firstNode) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!isComment(firstNode) ||\n\t\t(typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\\n'))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (!hasSource(firstNode) || !firstNode.source.start) {\n\t\treturn false;\n\t}\n\n\tconst openingBraceLine = firstNode.source.start.line;\n\n\tif (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, node] of parentNodes.entries()) {\n\t\tif (index === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === statement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t!isComment(node) ||\n\t\t\t(hasSource(node) && node.source.end && node.source.end.line !== openingBraceLine)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* istanbul ignore next: Should always return in the loop */\n\treturn false;\n};\n","'use strict';\n\nconst { isRoot } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nmodule.exports = function isFirstNodeOfRoot(node) {\n\tif (isRoot(node)) return false;\n\n\tconst parentNode = node.parent;\n\n\tif (!parentNode) {\n\t\treturn false;\n\t}\n\n\treturn isRoot(parentNode) && node === parentNode.first;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesBefore(node, newline) {\n\tnode.raws.before = node.raws.before ? node.raws.before.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterBlocklessAtRule');\nconst isBlocklessAtRuleAfterSameNameBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before at-rule',\n\trejected: 'Unexpected empty line before at-rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-same-name',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t],\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'always' | 'never'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst isNested = atRule.parent && atRule.parent.type !== 'root';\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\t// and following another blockless at-rule with the same name\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-same-name-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(atRule.raws.before);\n\t\t\tlet expectEmptyLineBefore = expectation === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-same-name') &&\n\t\t\t\t\tisAtRuleAfterSameNameAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-same-name-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix && context.newline) {\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(atRule, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(atRule, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: atRule, result, ruleName });\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').AtRule} atRule\n */\nfunction isAtRuleAfterSameNameAtRule(atRule) {\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\treturn previousNode && isAtRule(previousNode) && previousNode.name === atRule.name;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../utils/isStandardSyntaxAtRule');\nconst report = require('../utils/report');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void, errTarget: string }) => void,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule) => void) | null,\n * }} options\n */\nmodule.exports = function atRuleNameSpaceChecker(options) {\n\toptions.root.walkAtRules((atRule) => {\n\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckColon(\n\t\t\t`@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`,\n\t\t\tatRule.name.length,\n\t\t\tatRule,\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\toptions.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (m) => {\n\t\t\t\tif (options.fix) {\n\t\t\t\t\toptions.fix(node);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: m,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: options.result,\n\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t\terrTarget: `@${node.name}`,\n\t\t});\n\t}\n};\n","'use strict';\n\n/** @typedef {import('stylelint').ConfigurationError} ConfigurationError */\n\n/**\n * Create configurationError from text and set CLI exit code\n * @param {string} text\n * @returns {ConfigurationError}\n */\nmodule.exports = function configurationError(text) {\n\tconst err = /** @type {ConfigurationError} */ (new Error(text));\n\n\terr.code = 78;\n\n\treturn err;\n};\n","'use strict';\n\n/**\n * Check if a string is a single line (i.e. does not contain\n * any newline characters).\n *\n * @param {string} input\n * @return {boolean}\n */\nmodule.exports = function isSingleLineString(input) {\n\treturn !/[\\n\\r]/.test(input);\n};\n","'use strict';\n\n/**\n * Check if a character is whitespace.\n *\n * @param {string} char\n * @returns {boolean}\n */\nmodule.exports = function isWhitespace(char) {\n\treturn [' ', '\\n', '\\t', '\\r', '\\f'].includes(char);\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst isSingleLineString = require('./isSingleLineString');\nconst isWhitespace = require('./isWhitespace');\nconst { assertFunction, isNullish } = require('./validateTypes');\n\n/**\n * @typedef {(message: string) => string} MessageFunction\n */\n\n/**\n * @typedef {Object} Messages\n * @property {MessageFunction} [expectedBefore]\n * @property {MessageFunction} [rejectedBefore]\n * @property {MessageFunction} [expectedAfter]\n * @property {MessageFunction} [rejectedAfter]\n * @property {MessageFunction} [expectedBeforeSingleLine]\n * @property {MessageFunction} [rejectedBeforeSingleLine]\n * @property {MessageFunction} [expectedBeforeMultiLine]\n * @property {MessageFunction} [rejectedBeforeMultiLine]\n * @property {MessageFunction} [expectedAfterSingleLine]\n * @property {MessageFunction} [rejectedAfterSingleLine]\n * @property {MessageFunction} [expectedAfterMultiLine]\n * @property {MessageFunction} [rejectedAfterMultiLine]\n */\n\n/**\n * @typedef {Object} WhitespaceCheckerArgs\n * @property {string} source - The source string\n * @property {number} index - The index of the character to check before\n * @property {(message: string) => void} err - If a problem is found, this callback\n *   will be invoked with the relevant warning message.\n *   Typically this callback will report() the problem.\n * @property {string} [errTarget] - If a problem is found, this string\n *   will be sent to the relevant warning message.\n * @property {string} [lineCheckStr] - Single- and multi-line checkers\n *   will use this string to determine whether they should proceed,\n *   i.e. if this string is one line only, single-line checkers will check,\n *   multi-line checkers will ignore.\n *   If none is passed, they will use `source`.\n * @property {boolean} [onlyOneChar=false] - Only check *one* character before.\n *   By default, \"always-*\" checks will look for the `targetWhitespace` one\n *   before and then ensure there is no whitespace two before. This option\n *   bypasses that second check.\n * @property {boolean} [allowIndentation=false] - Allow arbitrary indentation\n *   between the `targetWhitespace` (almost definitely a newline) and the `index`.\n *   With this option, the checker will see if a newline *begins* the whitespace before\n *   the `index`.\n */\n\n/**\n * @typedef {(args: WhitespaceCheckerArgs) => void} WhitespaceChecker\n */\n\n/**\n * @typedef {{\n *   before: WhitespaceChecker,\n *   beforeAllowingIndentation: WhitespaceChecker,\n *   after: WhitespaceChecker,\n *   afterOneOnly: WhitespaceChecker,\n * }} WhitespaceCheckers\n */\n\n/**\n * Create a whitespaceChecker, which exposes the following functions:\n * - `before()`\n * - `beforeAllowingIndentation()`\n * - `after()`\n * - `afterOneOnly()`\n *\n * @param {\"space\" | \"newline\"} targetWhitespace - This is a keyword instead\n *   of the actual character (e.g. \" \") in order to accommodate\n *   different styles of newline (\"\\n\" vs \"\\r\\n\")\n * @param {\"always\" | \"never\" | \"always-single-line\" | \"always-multi-line\" | \"never-single-line\" | \"never-multi-line\"} expectation\n * @param {Messages} messages - An object of message functions;\n *   calling `before*()` or `after*()` and the `expectation` that is passed\n *   determines which message functions are required\n *\n * @returns {WhitespaceCheckers} The checker, with its exposed checking functions\n */\nmodule.exports = function whitespaceChecker(targetWhitespace, expectation, messages) {\n\t// Keep track of active arguments in order to avoid passing\n\t// too much stuff around, making signatures long and confusing.\n\t// This variable gets reset anytime a checking function is called.\n\t/** @type {WhitespaceCheckerArgs} */\n\tlet activeArgs;\n\n\t/**\n\t * Check for whitespace *before* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction before({\n\t\tsource,\n\t\tindex,\n\t\terr,\n\t\terrTarget,\n\t\tlineCheckStr,\n\t\tonlyOneChar = false,\n\t\tallowIndentation = false,\n\t}) {\n\t\tactiveArgs = {\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr,\n\t\t\terrTarget,\n\t\t\tonlyOneChar,\n\t\t\tallowIndentation,\n\t\t};\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * Check for whitespace *after* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction after({ source, index, err, errTarget, lineCheckStr, onlyOneChar = false }) {\n\t\tactiveArgs = { source, index, err, errTarget, onlyOneChar };\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction beforeAllowingIndentation(obj) {\n\t\tbefore({ ...obj, allowIndentation: true });\n\t}\n\n\tfunction expectBefore(messageFunc = messages.expectedBefore) {\n\t\tif (activeArgs.allowIndentation) {\n\t\t\texpectBeforeAllowingIndentation(messageFunc);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst _activeArgs = activeArgs;\n\t\tconst source = _activeArgs.source;\n\t\tconst index = _activeArgs.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\t\tconst twoCharsBefore = source[index - 2];\n\n\t\tif (isNullish(oneCharBefore)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharBefore === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsBefore) || !isWhitespace(twoCharsBefore))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction expectBeforeAllowingIndentation(messageFunc = messages.expectedBefore) {\n\t\tconst _activeArgs2 = activeArgs;\n\t\tconst source = _activeArgs2.source;\n\t\tconst index = _activeArgs2.index;\n\t\tconst err = _activeArgs2.err;\n\n\t\tconst expectedChar = targetWhitespace === 'newline' ? '\\n' : undefined;\n\t\tlet i = index - 1;\n\n\t\twhile (source[i] !== expectedChar) {\n\t\t\tif (source[i] === '\\t' || source[i] === ' ') {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tassertFunction(messageFunc);\n\t\t\terr(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction rejectBefore(messageFunc = messages.rejectedBefore) {\n\t\tconst _activeArgs3 = activeArgs;\n\t\tconst source = _activeArgs3.source;\n\t\tconst index = _activeArgs3.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\n\t\tif (!isNullish(oneCharBefore) && isWhitespace(oneCharBefore)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction afterOneOnly(obj) {\n\t\tafter({ ...obj, onlyOneChar: true });\n\t}\n\n\tfunction expectAfter(messageFunc = messages.expectedAfter) {\n\t\tconst _activeArgs4 = activeArgs;\n\t\tconst source = _activeArgs4.source;\n\t\tconst index = _activeArgs4.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\t\tconst twoCharsAfter = source[index + 2];\n\t\tconst threeCharsAfter = source[index + 3];\n\n\t\tif (isNullish(oneCharAfter)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (targetWhitespace === 'newline') {\n\t\t\t// If index is followed by a Windows CR-LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\r' &&\n\t\t\t\ttwoCharsAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(threeCharsAfter) || !isWhitespace(threeCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If index is followed by a Unix LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharAfter === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction rejectAfter(messageFunc = messages.rejectedAfter) {\n\t\tconst _activeArgs5 = activeArgs;\n\t\tconst source = _activeArgs5.source;\n\t\tconst index = _activeArgs5.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\n\t\tif (!isNullish(oneCharAfter) && isWhitespace(oneCharAfter)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\treturn {\n\t\tbefore,\n\t\tbeforeAllowingIndentation,\n\t\tafter,\n\t\tafterOneOnly,\n\t};\n};\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected newline after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Contains helpers for working with vendor prefixes.\n *\n * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2\n *\n * @namespace vendor\n */\nmodule.exports = {\n\t/**\n\t * Returns the vendor prefix extracted from an input string.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} vendor prefix or empty string\n\t *\n\t * @example\n\t * vendor.prefix('-moz-tab-size') //=> '-moz-'\n\t * vendor.prefix('tab-size')      //=> ''\n\t */\n\tprefix(prop) {\n\t\tconst match = prop.match(/^(-\\w+-)/);\n\n\t\tif (match) {\n\t\t\treturn match[0] || '';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\t/**\n\t * Returns the input string stripped of its vendor prefix.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} String name without vendor prefixes.\n\t *\n\t * @example\n\t * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n\t */\n\tunprefixed(prop) {\n\t\treturn prop.replace(/^-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${atRule.name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected single space after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule) => {\n\t\t\t\t\t\tif (typeof atRule.raws.afterName === 'string') {\n\t\t\t\t\t\t\tatRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst vendor = require('./vendor');\n\n/**\n * Extract each list using the internal API of Autoprefixer 10.2.5.\n *\n * @see https://github.com/postcss/autoprefixer/tree/10.2.5\n *\n * @example\n * const autoprefixer = require('autoprefixer');\n * const Browsers = require('autoprefixer/lib/browsers');\n * const Prefixes = require('autoprefixer/lib/prefixes');\n * const utils = require('autoprefixer/lib/utils');\n *\n * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));\n */\n\n/**\n * @example\n * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));\n */\nconst AT_RULES = new Set([\n\t'@-khtml-keyframes',\n\t'@-moz-keyframes',\n\t'@-ms-keyframes',\n\t'@-ms-viewport',\n\t'@-o-keyframes',\n\t'@-o-viewport',\n\t'@-webkit-keyframes',\n\t'@resolution',\n]);\n\n/**\n * @example\n * prefixes.remove.selectors.map((s) => s.prefixed);\n */\nconst SELECTORS = new Set([\n\t':-moz-any-link',\n\t':-moz-full-screen',\n\t':-moz-placeholder',\n\t':-moz-placeholder-shown',\n\t':-moz-read-only',\n\t':-moz-read-write',\n\t':-ms-fullscreen',\n\t':-ms-input-placeholder',\n\t':-webkit-any-link',\n\t':-webkit-full-screen',\n\t'::-moz-placeholder',\n\t'::-moz-selection',\n\t'::-ms-input-placeholder',\n\t'::-webkit-backdrop',\n\t'::-webkit-input-placeholder',\n]);\n\n/**\n * @example\n * Object.entries(autoprefixer.data.prefixes)\n *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))\n *   .map(([key, value]) => key);\n */\nconst PROPERTIES = new Set([\n\t'align-content',\n\t'align-items',\n\t'align-self',\n\t'animation',\n\t'animation-delay',\n\t'animation-direction',\n\t'animation-duration',\n\t'animation-fill-mode',\n\t'animation-iteration-count',\n\t'animation-name',\n\t'animation-play-state',\n\t'animation-timing-function',\n\t'appearance',\n\t'backdrop-filter',\n\t'backface-visibility',\n\t'background-clip',\n\t'background-origin',\n\t'background-size',\n\t'border-block-end',\n\t'border-block-start',\n\t'border-bottom-left-radius',\n\t'border-bottom-right-radius',\n\t'border-image',\n\t'border-inline-end',\n\t'border-inline-start',\n\t'border-radius',\n\t'border-top-left-radius',\n\t'border-top-right-radius',\n\t'box-decoration-break',\n\t'box-shadow',\n\t'box-sizing',\n\t'break-after',\n\t'break-before',\n\t'break-inside',\n\t'clip-path',\n\t'color-adjust',\n\t'column-count',\n\t'column-fill',\n\t'column-gap',\n\t'column-rule',\n\t'column-rule-color',\n\t'column-rule-style',\n\t'column-rule-width',\n\t'column-span',\n\t'column-width',\n\t'columns',\n\t'filter',\n\t'flex',\n\t'flex-basis',\n\t'flex-direction',\n\t'flex-flow',\n\t'flex-grow',\n\t'flex-shrink',\n\t'flex-wrap',\n\t'flow-from',\n\t'flow-into',\n\t'font-feature-settings',\n\t'font-kerning',\n\t'font-language-override',\n\t'font-variant-ligatures',\n\t'grid-area',\n\t'grid-column',\n\t'grid-column-align',\n\t'grid-column-end',\n\t'grid-column-start',\n\t'grid-row',\n\t'grid-row-align',\n\t'grid-row-end',\n\t'grid-row-start',\n\t'grid-template',\n\t'grid-template-areas',\n\t'grid-template-columns',\n\t'grid-template-rows',\n\t'hyphens',\n\t'image-rendering',\n\t'justify-content',\n\t'margin-block-end',\n\t'margin-block-start',\n\t'margin-inline-end',\n\t'margin-inline-start',\n\t'mask',\n\t'mask-border',\n\t'mask-border-outset',\n\t'mask-border-repeat',\n\t'mask-border-slice',\n\t'mask-border-source',\n\t'mask-border-width',\n\t'mask-clip',\n\t'mask-composite',\n\t'mask-image',\n\t'mask-origin',\n\t'mask-position',\n\t'mask-repeat',\n\t'mask-size',\n\t'object-fit',\n\t'object-position',\n\t'order',\n\t'overscroll-behavior',\n\t'padding-block-end',\n\t'padding-block-start',\n\t'padding-inline-end',\n\t'padding-inline-start',\n\t'perspective',\n\t'perspective-origin',\n\t'place-self',\n\t'region-fragment',\n\t'scroll-snap-coordinate',\n\t'scroll-snap-destination',\n\t'scroll-snap-points-x',\n\t'scroll-snap-points-y',\n\t'scroll-snap-type',\n\t'shape-image-threshold',\n\t'shape-margin',\n\t'shape-outside',\n\t'tab-size',\n\t'text-align-last',\n\t'text-decoration',\n\t'text-decoration-color',\n\t'text-decoration-line',\n\t'text-decoration-skip',\n\t'text-decoration-skip-ink',\n\t'text-decoration-style',\n\t'text-emphasis',\n\t'text-emphasis-color',\n\t'text-emphasis-position',\n\t'text-emphasis-style',\n\t'text-orientation',\n\t'text-overflow',\n\t'text-size-adjust',\n\t'text-spacing',\n\t'touch-action',\n\t'transform',\n\t'transform-origin',\n\t'transform-style',\n\t'transition',\n\t'transition-delay',\n\t'transition-duration',\n\t'transition-property',\n\t'transition-timing-function',\n\t'user-select',\n\t'writing-mode',\n]);\n\n/**\n * @example\n * Object.values(prefixes.remove)\n *   .filter((p) => Array.isArray(p.values))\n *   .flatMap((p) => p.values)\n *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'\n *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only\n *\n * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013\n */\nconst PROPERTY_VALUES = new Set([\n\t'-moz-available',\n\t'-moz-box',\n\t'-moz-calc',\n\t'-moz-crisp-edges',\n\t'-moz-element',\n\t'-moz-fit-content',\n\t'-moz-grab',\n\t'-moz-grabbing',\n\t'-moz-inline-box',\n\t'-moz-isolate',\n\t'-moz-isolate-override',\n\t'-moz-linear-gradient',\n\t'-moz-max-content',\n\t'-moz-min-content',\n\t'-moz-plaintext',\n\t'-moz-radial-gradient',\n\t'-moz-repeating-linear-gradient',\n\t'-moz-repeating-radial-gradient',\n\t'-moz-zoom-in',\n\t'-moz-zoom-out',\n\t'-ms-flexbox',\n\t'-ms-grid',\n\t'-ms-inline-flexbox',\n\t'-ms-inline-grid',\n\t'-ms-linear-gradient',\n\t'-ms-radial-gradient',\n\t'-ms-repeating-linear-gradient',\n\t'-ms-repeating-radial-gradient',\n\t'-o-linear-gradient',\n\t'-o-pixelated',\n\t'-o-radial-gradient',\n\t'-o-repeating-linear-gradient',\n\t'-o-repeating-radial-gradient',\n\t'-webkit-box',\n\t'-webkit-calc',\n\t'-webkit-cross-fade',\n\t'-webkit-fill-available',\n\t'-webkit-filter',\n\t'-webkit-fit-content',\n\t'-webkit-flex',\n\t'-webkit-grab',\n\t'-webkit-grabbing',\n\t'-webkit-image-set',\n\t'-webkit-inline-box',\n\t'-webkit-inline-flex',\n\t'-webkit-isolate',\n\t'-webkit-linear-gradient',\n\t'-webkit-max-content',\n\t'-webkit-min-content',\n\t'-webkit-optimize-contrast',\n\t'-webkit-radial-gradient',\n\t'-webkit-repeating-linear-gradient',\n\t'-webkit-repeating-radial-gradient',\n\t'-webkit-sticky',\n\t'-webkit-zoom-in',\n\t'-webkit-zoom-out',\n]);\n\n/**\n * Most identifier types have to be looked up in a unique way,\n * so we're exposing special functions for each.\n */\nmodule.exports = {\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tatRuleName(identifier) {\n\t\treturn AT_RULES.has(`@${identifier.toLowerCase()}`);\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tselector(identifier) {\n\t\treturn SELECTORS.has(identifier.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tmediaFeatureName(identifier) {\n\t\treturn identifier.toLowerCase().includes('device-pixel-ratio');\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tproperty(identifier) {\n\t\tconst ident = identifier.toLowerCase();\n\n\t\t// HACK: `interpolation-mode` does not exist. This is an IE extension for `image-rendering`.\n\t\t//       See <https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#examples>\n\t\tif (ident === '-ms-interpolation-mode') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (vendor.prefix(ident).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn PROPERTIES.has(vendor.unprefixed(ident));\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {boolean}\n\t */\n\tpropertyValue(value) {\n\t\treturn PROPERTY_VALUES.has(value.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {string}\n\t */\n\tunprefix(value) {\n\t\treturn value.replace(/-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (p) => `Unexpected vendor-prefixed at-rule \"@${p}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!name.startsWith('-')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.atRuleName(name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = isAutoprefixable.unprefix(atRule.name);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tword: `@${name}`,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","/**\n * Unite two or more sets\n *\n * @param {Iterable<string>[]} args\n */\nmodule.exports = function uniteSets(...args) {\n\treturn new Set([...args].reduce((result, set) => [...result, ...set], []));\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\n// https://www.w3.org/TR/css-page-3/#syntax-page-selector\nconst pageMarginAtKeywords = new Set([\n\t'top-left-corner',\n\t'top-left',\n\t'top-center',\n\t'top-right',\n\t'top-right-corner',\n\t'bottom-left-corner',\n\t'bottom-left',\n\t'bottom-center',\n\t'bottom-right',\n\t'bottom-right-corner',\n\t'left-top',\n\t'left-middle',\n\t'left-bottom',\n\t'right-top',\n\t'right-middle',\n\t'right-bottom',\n]);\n\n// https://developer.mozilla.org/en/docs/Web/CSS/At-rule\nconst atKeywords = uniteSets(pageMarginAtKeywords, [\n\t'annotation',\n\t'apply',\n\t'character-variant',\n\t'charset',\n\t'container',\n\t'counter-style',\n\t'custom-media',\n\t'custom-selector',\n\t'document',\n\t'font-face',\n\t'font-feature-values',\n\t'import',\n\t'keyframes',\n\t'layer',\n\t'media',\n\t'namespace',\n\t'nest',\n\t'ornaments',\n\t'page',\n\t'property',\n\t'styleset',\n\t'stylistic',\n\t'supports',\n\t'swash',\n\t'viewport',\n]);\n\nmodule.exports = {\n\tatKeywords,\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst { atKeywords } = require('../../reference/atKeywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atRule) => `Unexpected unknown at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (vendor.prefix(name) || atKeywords.has(name.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst atName = `@${name}`;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(atName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t\tword: atName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Convert the specified value to an array. If an array is specified, the array is returned as-is.\n *\n * @template T\n * @param {T | T[] | undefined | null} value\n * @returns {T[] | undefined}\n */\nmodule.exports = function flattenArray(value) {\n\tif (value == null) {\n\t\treturn;\n\t}\n\n\treturn Array.isArray(value) ? value : [value];\n};\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties are one or more values\n * that satisfy the specified validator(s):\n *\n * @example\n * ignoreProperties = {\n *   value1: [\"item11\", \"item12\", \"item13\"],\n *   value2: \"item2\",\n * };\n * validateObjectWithArrayProps(isString)(ignoreProperties);\n * //=> true\n *\n * @typedef {(value: unknown) => boolean} Validator\n * @param {...Validator} validators\n * @returns {Validator}\n */\nmodule.exports = function validateObjectWithArrayProps(...validators) {\n\treturn (value) => {\n\t\tif (!isPlainObject(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.values(value)\n\t\t\t.flat()\n\t\t\t.every((item) => validators.some((v) => v(item)));\n\t};\n};\n","'use strict';\n\nconst flattenArray = require('../../utils/flattenArray');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-property-required-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\t\t\tconst propList = flattenArray(primary[atRuleName]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const property of propList) {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t(node) => node.type === 'decl' && node.prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: `@${atRule.name}`,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function beforeBlockString(statement, { noRawBefore } = { noRawBefore: false }) {\n\tlet result = '';\n\n\tconst before = statement.raws.before || '';\n\n\tif (!noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (isRule(statement)) {\n\t\tresult += statement.selector;\n\t} else if (isAtRule(statement)) {\n\t\tresult += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;\n\t} else {\n\t\treturn '';\n\t}\n\n\tresult += statement.raws.between || '';\n\n\treturn result;\n};\n","'use strict';\n\n/**\n * Stringify PostCSS node including its raw \"before\" string.\n *\n * @param {import('postcss').Node} node\n *\n * @returns {string}\n */\nmodule.exports = function rawNodeString(node) {\n\tlet result = '';\n\n\tif (node.raws.before) {\n\t\tresult += node.raws.before;\n\t}\n\n\tresult += node.toString();\n\n\treturn result;\n};\n","'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\nconst hasBlock = require('./hasBlock');\nconst rawNodeString = require('./rawNodeString');\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`), returns an empty string.\n *\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function blockString(statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn '';\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-closing-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected newline after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected newline after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment x spaces after the brace\n\t\t\tconst nextNodeIsSingleLineComment =\n\t\t\t\tnextNode.type === 'comment' &&\n\t\t\t\t!/[^ ]/.test(nextNode.raws.before || '') &&\n\t\t\t\t!nextNode.toString().includes('\\n');\n\n\t\t\tconst nodeToCheck = nextNodeIsSingleLineComment ? nextNode.next() : nextNode;\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nodeToCheck);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\t// Only check one after, because there might be other\n\t\t\t// spaces handled by the indentation rule\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineAfter(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.after !== 'string') {\n\t\treturn node;\n\t}\n\n\tconst spaces = raws.after.split(';');\n\tconst after = spaces[spaces.length - 1] || '';\n\n\tif (!/\\r?\\n/.test(after)) {\n\t\traws.after += newline.repeat(2);\n\t} else {\n\t\traws.after = raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n\t}\n\n\treturn node;\n};\n","'use strict';\n\nconst hasBlock = require('./hasBlock');\n\n/**\n * Check if a statement has an empty block.\n *\n * @param {import('postcss').Rule | import('postcss').AtRule} statement - postcss rule or at-rule node\n * @return {boolean} True if the statement has a block and it is empty\n */\nmodule.exports = function hasEmptyBlock(statement) {\n\treturn hasBlock(statement) && statement.nodes.length === 0;\n};\n","'use strict';\n\nconst addEmptyLineAfter = require('../../utils/addEmptyLineAfter');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesAfter = require('../../utils/removeEmptyLinesAfter');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before closing brace',\n\trejected: 'Unexpected empty line before closing brace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always-multi-line', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['after-closing-brace'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get whitespace after \"\"}\", ignoring extra semicolon\n\t\t\tconst before = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\t// Calculate index\n\t\t\tconst statementString = statement.toString();\n\t\t\tlet index = statementString.length - 1;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// Set expectation\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tconst childNodeTypes = statement.nodes.map((item) => item.type);\n\n\t\t\t\t// Reverse the primary options if `after-closing-brace` is set\n\t\t\t\tif (\n\t\t\t\t\toptionsMatches(secondaryOptions, 'except', 'after-closing-brace') &&\n\t\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\t\t!childNodeTypes.includes('decl')\n\t\t\t\t) {\n\t\t\t\t\treturn primary === 'never';\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always-multi-line' && !isSingleLineString(blockString(statement));\n\t\t\t})();\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst { newline } = context;\n\n\t\t\t\tif (typeof newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineAfter(statement, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesAfter(statement, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tnode: statement,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesAfter(node, newline) {\n\tnode.raws.after = node.raws.after ? node.raws.after.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"}\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"}\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = blockString(statement);\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length - 1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, ' ');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: 'Expected newline before \"}\"',\n\texpectedBeforeMultiLine: 'Expected newline before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore extra semicolon\n\t\t\tconst after = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\tif (after === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockIsMultiLine = !isSingleLineString(blockString(statement));\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// We're really just checking whether a\n\t\t\t// newline *starts* the block's final space -- between\n\t\t\t// the last declaration and the closing brace. We can\n\t\t\t// ignore any other whitespace between them, because that\n\t\t\t// will be checked by the indentation rule.\n\t\t\tif (!after.startsWith('\\n') && !after.startsWith('\\r\\n')) {\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tcomplain(messages.expectedBefore);\n\t\t\t\t} else if (blockIsMultiLine && primary === 'always-multi-line') {\n\t\t\t\t\tcomplain(messages.expectedBeforeMultiLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (after !== '' && blockIsMultiLine && primary === 'never-multi-line') {\n\t\t\t\tcomplain(messages.rejectedBeforeMultiLine);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t */\n\t\t\tfunction complain(message) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst firstWhitespaceIndex = statementRaws.after.search(/\\s/);\n\t\t\t\t\t\tconst newlineBefore =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0\n\t\t\t\t\t\t\t\t? statementRaws.after.slice(0, firstWhitespaceIndex)\n\t\t\t\t\t\t\t\t: statementRaws.after;\n\t\t\t\t\t\tconst newlineAfter =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0 ? statementRaws.after.slice(firstWhitespaceIndex) : '';\n\t\t\t\t\t\tconst newlineIndex = newlineAfter.search(/\\r?\\n/);\n\n\t\t\t\t\t\tstatementRaws.after =\n\t\t\t\t\t\t\tnewlineIndex >= 0\n\t\t\t\t\t\t\t\t? newlineBefore + newlineAfter.slice(newlineIndex)\n\t\t\t\t\t\t\t\t: newlineBefore + context.newline + newlineAfter;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s/g, '');\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n * Get the next non-comment node in a PostCSS AST\n * at or after a given node.\n *\n * @param {PostcssNode | void} startNode\n * @returns {PostcssNode | null}\n */\nmodule.exports = function nextNonCommentNode(startNode) {\n\tif (!startNode || !startNode.next) return null;\n\n\tif (startNode.type === 'comment') {\n\t\treturn nextNonCommentNode(startNode.next());\n\t}\n\n\treturn startNode;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-semicolon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst nextNode = atRule.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tnodeToCheck.raws.before = context.newline + nodeToCheck.raws.before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\t\tindex: atRule.toString().length + 1,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"{\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'rules', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'rules')) {\n\t\t\troot.walkRules(check);\n\t\t}\n\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst backupCommentNextBefores = new Map();\n\n\t\t\t/**\n\t\t\t * next node with checking newlines after comment\n\t\t\t *\n\t\t\t * @param {import('postcss').ChildNode | undefined} startNode\n\t\t\t * @returns {import('postcss').ChildNode | undefined}\n\t\t\t */\n\t\t\tfunction nextNode(startNode) {\n\t\t\t\tif (!startNode || !startNode.next) return;\n\n\t\t\t\tif (startNode.type === 'comment') {\n\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\tconst newLineMatch = reNewLine.test(startNode.raws.before || '');\n\n\t\t\t\t\tconst next = startNode.next();\n\n\t\t\t\t\tif (next && newLineMatch && !reNewLine.test(next.raws.before || '')) {\n\t\t\t\t\t\tbackupCommentNextBefores.set(next, next.raws.before);\n\t\t\t\t\t\tnext.raws.before = startNode.raws.before;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextNode(next);\n\t\t\t\t}\n\n\t\t\t\treturn startNode;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNode(statement.first);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.delete(nodeToCheck);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\t\t\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\t\t\t\t\tnode.raws.before = before;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.clear();\n\n\t\t\t\t\t\t\t// Fix\n\t\t\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\t\t\tlet fixTarget = statement.first;\n\n\t\t\t\t\t\t\twhile (fixTarget) {\n\t\t\t\t\t\t\t\tconst fixTargetRaws = fixTarget.raws;\n\n\t\t\t\t\t\t\t\tif (typeof fixTargetRaws.before !== 'string') continue;\n\n\t\t\t\t\t\t\t\tif (reNewLine.test(fixTargetRaws.before || '')) {\n\t\t\t\t\t\t\t\t\tfixTargetRaws.before = fixTargetRaws.before.replace(/\\r?\\n/g, '');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (fixTarget.type !== 'comment') {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfixTarget = fixTarget.next();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\tnode.raws.before = before;\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { assertString } = require('./validateTypes');\n\nconst DISABLE_COMMAND = 'stylelint-disable';\nconst DISABLE_LINE_COMMAND = 'stylelint-disable-line';\nconst DISABLE_NEXT_LINE_COMMAND = 'stylelint-disable-next-line';\nconst ENABLE_COMMAND = 'stylelint-enable';\n\nconst ALL_COMMANDS = new Set([\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n]);\n\n/** @typedef {import('postcss').Comment} Comment */\n\n/**\n * Extract a command from a given comment.\n *\n * @param {Comment} comment\n * @returns {string}\n */\nfunction extractStylelintCommand(comment) {\n\tconst [command] = comment.text.split(/\\s/, 1);\n\n\tassertString(command);\n\n\treturn command;\n}\n\n/**\n * Tests if the given comment is a Stylelint command.\n *\n * @param {Comment} comment\n * @returns {boolean}\n */\nfunction isStylelintCommand(comment) {\n\tconst command = extractStylelintCommand(comment);\n\n\treturn command !== undefined && ALL_COMMANDS.has(command);\n}\n\nmodule.exports = {\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n\n\textractStylelintCommand,\n\tisStylelintCommand,\n};\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isStylelintCommand } = require('../../utils/stylelintCommand');\nconst { isComment } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isBoolean,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/** @typedef {import('postcss').Rule | import('postcss').AtRule} Statement */\n\n\t\t/**\n\t\t * @param {Statement} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasNotableChild(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet index = beforeBlockString(statement, { noRawBefore: true }).length;\n\n\t\t\t// For empty blocks when using SugarSS parser\n\t\t\tif (statement.raws.between === undefined) {\n\t\t\t\tindex--;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: statement,\n\t\t\t\tstart: statement.positionBy({ index }),\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {Statement} statement\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction hasNotableChild(statement) {\n\t\t\treturn statement.nodes.some((child) => {\n\t\t\t\tif (isComment(child)) {\n\t\t\t\t\tif (ignoreComments) return false;\n\n\t\t\t\t\tif (isStylelintCommand(child)) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"}\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nextNode);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Get the index of a declaration's value\n *\n * @param {import('postcss').Declaration} decl\n * @returns {number}\n */\nmodule.exports = function declarationValueIndex(decl) {\n\tconst raws = decl.raws;\n\n\treturn [\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.prefix,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t(raws.prop && raws.prop.raw) || decl.prop,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.suffix,\n\t\traws.between || ':',\n\t\t// @ts-expect-error -- TS2339: Property 'prefix' does not exist on type '{ value: string; raw: string; }'.\n\t\traws.value && raws.value.prefix,\n\t].reduce((count, str) => {\n\t\tif (str) {\n\t\t\treturn count + str.length;\n\t\t}\n\n\t\treturn count;\n\t}, 0);\n};\n","'use strict';\n\n/**\n * Check whether a function is standard\n *\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxFunction(node) {\n\t// Function nodes without names are things in parentheses like Sass lists\n\tif (!node.value) {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('#{')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxFunction = require('./isStandardSyntaxFunction');\n\n/**\n * Check whether a function is standard syntax color function\n *\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxColorFunction(node) {\n\tif (!isStandardSyntaxFunction(node)) return false;\n\n\t// scss can accept a #hex, or $var variables and we need to check all nested fn nodes\n\tfor (const fnNode of node.nodes) {\n\t\tif (fnNode.type === 'function') return isStandardSyntaxColorFunction(fnNode);\n\n\t\tif (fnNode.type === 'word' && (fnNode.value.startsWith('#') || fnNode.value.startsWith('$')))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/**\n * @param {Declaration} decl\n * @param {string} value\n * @returns {Declaration} The declaration that was passed in.\n */\nmodule.exports = function setDeclarationValue(decl, value) {\n\tconst raws = decl.raws;\n\n\tif (raws.value) {\n\t\traws.value.raw = value;\n\t} else {\n\t\tdecl.value = value;\n\t}\n\n\treturn decl;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxColorFunction = require('../../utils/isStandardSyntaxColorFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (primary) => `Expected ${primary} color-function notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-function-notation',\n\tfixable: true,\n};\n\nconst LEGACY_FUNCS = new Set(['rgba', 'hsla']);\nconst LEGACY_NOTATION_FUNCS = new Set(['rgb', 'rgba', 'hsl', 'hsla']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['modern', 'legacy'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (!isStandardSyntaxColorFunction(node)) return;\n\n\t\t\t\tconst { value, sourceIndex, sourceEndIndex, nodes } = node;\n\n\t\t\t\tif (!LEGACY_NOTATION_FUNCS.has(value.toLowerCase())) return;\n\n\t\t\t\tif (primary === 'modern' && !hasCommas(node)) return;\n\n\t\t\t\tif (primary === 'legacy' && hasCommas(node)) return;\n\n\t\t\t\tif (context.fix && primary === 'modern') {\n\t\t\t\t\tlet commaCount = 0;\n\n\t\t\t\t\t// Convert punctuation\n\t\t\t\t\tnode.nodes = nodes.map((childNode) => {\n\t\t\t\t\t\tif (isComma(childNode)) {\n\t\t\t\t\t\t\t// Non-alpha commas to space and alpha commas to slashes\n\t\t\t\t\t\t\tif (commaCount < 2) {\n\t\t\t\t\t\t\t\t// @ts-expect-error -- TS2322: Type '\"space\"' is not assignable to type '\"div\"'.\n\t\t\t\t\t\t\t\tchildNode.type = 'space';\n\t\t\t\t\t\t\t\tchildNode.value = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t\tcommaCount++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchildNode.value = '/';\n\t\t\t\t\t\t\t\tchildNode.before = atLeastOneSpace(childNode.before);\n\t\t\t\t\t\t\t\tchildNode.after = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove trailing 'a' from legacy function name\n\t\t\t\t\tif (LEGACY_FUNCS.has(node.value.toLowerCase())) {\n\t\t\t\t\t\tnode.value = node.value.slice(0, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + (sourceEndIndex - sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} whitespace\n */\nfunction atLeastOneSpace(whitespace) {\n\treturn whitespace !== '' ? whitespace : ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').DivNode}\n */\nfunction isComma(node) {\n\treturn node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction hasCommas(node) {\n\treturn node.nodes && node.nodes.some((childNode) => isComma(childNode));\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-length',\n\tfixable: true,\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['short', 'long'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value: hexValue } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tif (primary === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst variant = primary === 'long' ? longer : shorter;\n\t\t\t\tconst expectedHex = variant(hexValue);\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expectedHex;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(hexValue, expectedHex),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} hex\n */\nfunction canShrink(hex) {\n\thex = hex.toLowerCase();\n\n\treturn (\n\t\thex[1] === hex[2] &&\n\t\thex[3] === hex[4] &&\n\t\thex[5] === hex[6] &&\n\t\t(hex.length === 7 || (hex.length === 9 && hex[7] === hex[8]))\n\t);\n}\n\n/**\n * @param {string} hex\n */\nfunction shorter(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i += 2) {\n\t\thexVariant += hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {string} hex\n */\nfunction longer(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i++) {\n\t\thexVariant += hex.charAt(i).repeat(2);\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"{\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"{\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['at-rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'at-rules')) {\n\t\t\troot.walkAtRules(check);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: blockString(statement),\n\t\t\t\tindex: 0,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementFirst = statement.first;\n\n\t\t\t\t\t\tif (statementFirst == null) return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.between !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst spaceIndex = statementRaws.between.search(/\\s+$/);\n\n\t\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\t\tstatement.raws.between =\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(spaceIndex);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatementRaws.between += context.newline;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.between = statementRaws.between.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-hex-alpha';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (hex) => `Expected alpha channel in \"${hex}\"`,\n\tunexpected: (hex) => `Unexpected alpha channel in \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-alpha',\n};\n\nconst HEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(decl.value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isUrlFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (primary === 'always' && hasAlphaChannel(value)) return;\n\n\t\t\t\tif (primary === 'never' && !hasAlphaChannel(value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: primary === 'never' ? messages.unexpected(value) : messages.expected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isUrlFunction({ type, value }) {\n\treturn type === 'function' && value === 'url';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\n/**\n * @param {string} hex\n */\nfunction hasAlphaChannel(hex) {\n\treturn hex.length === 5 || hex.length === 9;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-case',\n\tfixable: true,\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst expected = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expected) return;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expected;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(value, expected),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected comment to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\n\t\t\tif (normalizedPattern.test(text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-no-hex',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tmessageArgs: [node.value],\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {number}\n */\nmodule.exports = function atRuleParamIndex(atRule) {\n\t// Initial 1 is for the `@`\n\tlet index = 1 + atRule.name.length;\n\n\tif (atRule.raws.afterName) {\n\t\tindex += atRule.raws.afterName.length;\n\t}\n\n\treturn index;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'custom-media-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (mediaName, pattern) => `Expected \"${mediaName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-media-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() !== 'custom-media') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [fullName, customMediaName] = atRule.params.match(/^--(\\S+)\\b/) || [];\n\n\t\t\tif (fullName === undefined || customMediaName === undefined) {\n\t\t\t\tthrow new Error(`Unexpected at-rule params: \"${atRule.params}\"`);\n\t\t\t}\n\n\t\t\tif (regexpPattern.test(customMediaName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(atRule);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [fullName, primary],\n\t\t\t\tnode: atRule,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + fullName.length,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a string has less interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has less interpolation\n */\nmodule.exports = function hasLessInterpolation(string) {\n\treturn /@\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has postcss-simple-vars interpolation\n *\n * @param {string} string\n */\nmodule.exports = function hasPsvInterpolation(string) {\n\treturn /\\$\\(.+?\\)/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has scss interpolation\n *\n * @param {string} string\n */\nmodule.exports = function hasScssInterpolation(string) {\n\treturn /#\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has JS template literal interpolation or HTML-like template\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has template literal interpolation\n */\nmodule.exports = function hasTplInterpolation(string) {\n\treturn /\\{.+?\\}/.test(string);\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a string has interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has interpolation\n */\nmodule.exports = function hasInterpolation(string) {\n\t// SCSS or Less interpolation\n\tif (\n\t\thasLessInterpolation(string) ||\n\t\thasScssInterpolation(string) ||\n\t\thasTplInterpolation(string) ||\n\t\thasPsvInterpolation(string)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a value is standard\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxValue(value) {\n\tlet normalizedValue = value;\n\n\t// Ignore operators before variables (example -$variable)\n\tif (/^[-+*/]/.test(value.charAt(0))) {\n\t\tnormalizedValue = normalizedValue.slice(1);\n\t}\n\n\t// SCSS variable (example $variable)\n\tif (normalizedValue.startsWith('$')) {\n\t\treturn false;\n\t}\n\n\t// SCSS namespace (example namespace.$variable)\n\tif (/^.+\\.\\$/.test(value)) {\n\t\treturn false;\n\t}\n\n\t// Less variable\n\tif (normalizedValue.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(normalizedValue)) {\n\t\treturn false;\n\t}\n\n\t// WebExtension replacement keyword used by Chrome/Firefox\n\t// more information: https://developer.chrome.com/extensions/i18n\n\t// and https://github.com/stylelint/stylelint/issues/4707\n\tif (/__MSG_\\S+__/.test(value)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst acceptCustomIdentsProperties = new Set([\n\t'animation',\n\t'animation-name',\n\t'font',\n\t'font-family',\n\t'counter-increment',\n\t'grid-row',\n\t'grid-column',\n\t'grid-area',\n\t'list-style',\n\t'list-style-type',\n]);\n\n/** @type {import('stylelint').LonghandSubPropertiesOfShorthandProperties} */\nconst longhandSubPropertiesOfShorthandProperties = new Map([\n\t// Sort alphabetically\n\t[\n\t\t'animation',\n\t\tnew Set([\n\t\t\t'animation-name',\n\t\t\t'animation-duration',\n\t\t\t'animation-timing-function',\n\t\t\t'animation-delay',\n\t\t\t'animation-iteration-count',\n\t\t\t'animation-direction',\n\t\t\t'animation-fill-mode',\n\t\t\t'animation-play-state',\n\t\t]),\n\t],\n\t[\n\t\t'background',\n\t\tnew Set([\n\t\t\t'background-image',\n\t\t\t'background-size',\n\t\t\t'background-position',\n\t\t\t'background-repeat',\n\t\t\t'background-origin',\n\t\t\t'background-clip',\n\t\t\t'background-attachment',\n\t\t\t'background-color',\n\t\t]),\n\t],\n\t[\n\t\t'border',\n\t\tnew Set([\n\t\t\t'border-top-width',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left-width',\n\t\t\t'border-right-width',\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-style',\n\t\t\t'border-left-style',\n\t\t\t'border-right-style',\n\t\t\t'border-top-color',\n\t\t\t'border-bottom-color',\n\t\t\t'border-left-color',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-block-end',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-block-end-width',\n\t\t\t'border-block-end-style',\n\t\t\t'border-block-end-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-block-start',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-block-start-width',\n\t\t\t'border-block-start-style',\n\t\t\t'border-block-start-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-bottom',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-bottom-width',\n\t\t\t'border-bottom-style',\n\t\t\t'border-bottom-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-color',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-color',\n\t\t\t'border-bottom-color',\n\t\t\t'border-left-color',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-image',\n\t\tnew Set([\n\t\t\t'border-image-source',\n\t\t\t'border-image-slice',\n\t\t\t'border-image-width',\n\t\t\t'border-image-outset',\n\t\t\t'border-image-repeat',\n\t\t]),\n\t],\n\t[\n\t\t'border-inline-end',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-inline-end-width',\n\t\t\t'border-inline-end-style',\n\t\t\t'border-inline-end-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-inline-start',\n\t\tnew Set([\n\t\t\t'border-inline-start-width',\n\t\t\t'border-inline-start-style',\n\t\t\t'border-inline-start-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-left',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-left-width',\n\t\t\t'border-left-style',\n\t\t\t'border-left-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-radius',\n\t\tnew Set([\n\t\t\t'border-top-right-radius',\n\t\t\t'border-top-left-radius',\n\t\t\t'border-bottom-right-radius',\n\t\t\t'border-bottom-left-radius',\n\t\t]),\n\t],\n\t[\n\t\t'border-right',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-right-width',\n\t\t\t'border-right-style',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-style',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-style',\n\t\t\t'border-left-style',\n\t\t\t'border-right-style',\n\t\t]),\n\t],\n\t[\n\t\t'border-top',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-width',\n\t\t\t'border-top-style',\n\t\t\t'border-top-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-width',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-width',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left-width',\n\t\t\t'border-right-width',\n\t\t]),\n\t],\n\t[\n\t\t'column-rule',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'column-rule-width',\n\t\t\t'column-rule-style',\n\t\t\t'column-rule-color',\n\t\t]),\n\t],\n\t[\n\t\t'columns',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'column-width',\n\t\t\t'column-count',\n\t\t]),\n\t],\n\t[\n\t\t'flex',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'flex-grow',\n\t\t\t'flex-shrink',\n\t\t\t'flex-basis',\n\t\t]),\n\t],\n\t[\n\t\t'flex-flow',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'flex-direction',\n\t\t\t'flex-wrap',\n\t\t]),\n\t],\n\t[\n\t\t'font',\n\t\tnew Set([\n\t\t\t'font-style',\n\t\t\t'font-variant',\n\t\t\t'font-weight',\n\t\t\t'font-stretch',\n\t\t\t'font-size',\n\t\t\t'font-family',\n\t\t\t'line-height',\n\t\t]),\n\t],\n\t[\n\t\t'grid',\n\t\tnew Set([\n\t\t\t'grid-template-rows',\n\t\t\t'grid-template-columns',\n\t\t\t'grid-template-areas',\n\t\t\t'grid-auto-rows',\n\t\t\t'grid-auto-columns',\n\t\t\t'grid-auto-flow',\n\t\t\t'grid-column-gap',\n\t\t\t'grid-row-gap',\n\t\t]),\n\t],\n\t[\n\t\t'grid-area',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-start',\n\t\t\t'grid-column-start',\n\t\t\t'grid-row-end',\n\t\t\t'grid-column-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-column',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-column-start',\n\t\t\t'grid-column-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-gap',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-gap',\n\t\t\t'grid-column-gap',\n\t\t]),\n\t],\n\t[\n\t\t'grid-row',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-start',\n\t\t\t'grid-row-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-template',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-template-columns',\n\t\t\t'grid-template-rows',\n\t\t\t'grid-template-areas',\n\t\t]),\n\t],\n\t[\n\t\t'list-style',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'list-style-type',\n\t\t\t'list-style-position',\n\t\t\t'list-style-image',\n\t\t]),\n\t],\n\t[\n\t\t'margin',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'margin-top',\n\t\t\t'margin-bottom',\n\t\t\t'margin-left',\n\t\t\t'margin-right',\n\t\t]),\n\t],\n\t[\n\t\t'mask',\n\t\tnew Set([\n\t\t\t'mask-image',\n\t\t\t'mask-mode',\n\t\t\t'mask-position',\n\t\t\t'mask-size',\n\t\t\t'mask-repeat',\n\t\t\t'mask-origin',\n\t\t\t'mask-clip',\n\t\t\t'mask-composite',\n\t\t]),\n\t],\n\t[\n\t\t'outline',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'outline-color',\n\t\t\t'outline-style',\n\t\t\t'outline-width',\n\t\t]),\n\t],\n\t[\n\t\t'padding',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'padding-top',\n\t\t\t'padding-bottom',\n\t\t\t'padding-left',\n\t\t\t'padding-right',\n\t\t]),\n\t],\n\t[\n\t\t'text-decoration',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'text-decoration-color',\n\t\t\t'text-decoration-style',\n\t\t\t'text-decoration-line',\n\t\t]),\n\t],\n\t[\n\t\t'text-emphasis',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'text-emphasis-style',\n\t\t\t'text-emphasis-color',\n\t\t]),\n\t],\n\t[\n\t\t'transition',\n\t\tnew Set([\n\t\t\t'transition-delay',\n\t\t\t'transition-duration',\n\t\t\t'transition-property',\n\t\t\t'transition-timing-function',\n\t\t]),\n\t],\n]);\n\nconst longhandTimeProperties = new Set([\n\t'transition-duration',\n\t'transition-delay',\n\t'animation-duration',\n\t'animation-delay',\n]);\n\nconst shorthandTimeProperties = new Set(['transition', 'animation']);\n\nmodule.exports = {\n\tacceptCustomIdentsProperties,\n\tlonghandSubPropertiesOfShorthandProperties,\n\tlonghandTimeProperties,\n\tshorthandTimeProperties,\n};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},u=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},a=function(r){return{h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),w:u(r.w,0,100),b:u(r.b,0,100),a:u(r.a)};var t},e=function(r){return{h:n(r.h),w:n(r.w),b:n(r.b),a:n(r.a,3)}},b=function(r){return{h:function(r){var t=r.r,n=r.g,u=r.b,a=r.a,e=Math.max(t,n,u),b=e-Math.min(t,n,u),o=b?e===t?(n-u)/b:e===n?2+(u-t)/b:4+(t-n)/b:0;return{h:60*(o<0?o+6:o),s:e?b/e*100:0,v:e/255*100,a:a}}(r).h,w:Math.min(r.r,r.g,r.b)/255*100,b:100-Math.max(r.r,r.g,r.b)/255*100,a:r.a}},o=function(r){return function(r){var t=r.h,n=r.s,u=r.v,a=r.a;t=t/360*6,n/=100,u/=100;var e=Math.floor(t),b=u*(1-n),o=u*(1-(t-e)*n),i=u*(1-(1-t+e)*n),h=e%6;return{r:255*[u,o,b,b,i,u][h],g:255*[i,u,u,o,b,b][h],b:255*[b,b,i,u,u,o][h],a:a}}({h:r.h,s:100===r.b?0:100-r.w/(100-r.b)*100,v:100-r.b,a:r.a})},i=function(r){var n=r.h,u=r.w,e=r.b,b=r.a,i=void 0===b?1:b;if(!t(n)||!t(u)||!t(e))return null;var h=a({h:Number(n),w:Number(u),b:Number(e),a:Number(i)});return o(h)},h=/^hwb\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,d=function(t){var n=h.exec(t);if(!n)return null;var u,e,b=a({h:(u=n[1],e=n[2],void 0===e&&(e=\"deg\"),Number(u)*(r[e]||1)),w:Number(n[3]),b:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return o(b)};export default function(r,t){r.prototype.toHwb=function(){return e(b(this.rgba))},r.prototype.toHwbString=function(){return r=e(b(this.rgba)),t=r.h,n=r.w,u=r.b,(a=r.a)<1?\"hwb(\"+t+\" \"+n+\"% \"+u+\"% / \"+a+\")\":\"hwb(\"+t+\" \"+n+\"% \"+u+\"%)\";var r,t,n,u,a},t.string.push([d,\"hwb\"]),t.object.push([i,\"hwb\"])}\n","var a=function(a){return\"string\"==typeof a?a.length>0:\"number\"==typeof a},t=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=Math.pow(10,t)),Math.round(o*a)/o+0},o=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=1),a>o?o:a>t?a:t},r=function(a){var t=a/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(a){return 255*(a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a)},n=96.422,p=100,M=82.521,u=function(a){var t,r,n={x:.9555766*(t=a).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return r={r:h(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:h(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:h(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:a.a},{r:o(r.r,0,255),g:o(r.g,0,255),b:o(r.b,0,255),a:o(r.a)}},e=function(a){var t=r(a.r),h=r(a.g),u=r(a.b);return function(a){return{x:o(a.x,0,n),y:o(a.y,0,p),z:o(a.z,0,M),a:o(a.a)}}(function(a){return{x:1.0478112*a.x+.0228866*a.y+-.050127*a.z,y:.0295424*a.x+.9904844*a.y+-.0170491*a.z,z:-.0092345*a.x+.0150436*a.y+.7521316*a.z,a:a.a}}({x:100*(.4124564*t+.3575761*h+.1804375*u),y:100*(.2126729*t+.7151522*h+.072175*u),z:100*(.0193339*t+.119192*h+.9503041*u),a:a.a}))},w=216/24389,b=24389/27,i=function(t){var r=t.l,h=t.a,n=t.b,p=t.alpha,M=void 0===p?1:p;if(!a(r)||!a(h)||!a(n))return null;var u=function(a){return{l:o(a.l,0,400),a:a.a,b:a.b,alpha:o(a.alpha)}}({l:Number(r),a:Number(h),b:Number(n),alpha:Number(M)});return l(u)},l=function(a){var t=(a.l+16)/116,o=a.a/500+t,r=t-a.b/200;return u({x:(Math.pow(o,3)>w?Math.pow(o,3):(116*o-16)/b)*n,y:(a.l>8?Math.pow((a.l+16)/116,3):a.l/b)*p,z:(Math.pow(r,3)>w?Math.pow(r,3):(116*r-16)/b)*M,a:a.alpha})};export default function(a,r){a.prototype.toLab=function(){return o=e(this.rgba),h=o.y/p,u=o.z/M,r=(r=o.x/n)>w?Math.cbrt(r):(b*r+16)/116,a={l:116*(h=h>w?Math.cbrt(h):(b*h+16)/116)-16,a:500*(r-h),b:200*(h-(u=u>w?Math.cbrt(u):(b*u+16)/116)),alpha:o.a},{l:t(a.l,2),a:t(a.a,2),b:t(a.b,2),alpha:t(a.alpha,3)};var a,o,r,h,u},a.prototype.delta=function(r){void 0===r&&(r=\"#FFF\");var h=r instanceof a?r:new a(r),n=function(a,t){var o=a.l,r=a.a,h=a.b,n=t.l,p=t.a,M=t.b,u=180/Math.PI,e=Math.PI/180,w=Math.pow(Math.pow(r,2)+Math.pow(h,2),.5),b=Math.pow(Math.pow(p,2)+Math.pow(M,2),.5),i=(o+n)/2,l=Math.pow((w+b)/2,7),c=.5*(1-Math.pow(l/(l+Math.pow(25,7)),.5)),f=r*(1+c),y=p*(1+c),v=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),x=Math.pow(Math.pow(y,2)+Math.pow(M,2),.5),z=(v+x)/2,s=0===f&&0===h?0:Math.atan2(h,f)*u,d=0===y&&0===M?0:Math.atan2(M,y)*u;s<0&&(s+=360),d<0&&(d+=360);var g=d-s,m=Math.abs(d-s);m>180&&d<=s?g+=360:m>180&&d>s&&(g-=360);var N=s+d;m<=180?N/=2:N=(s+d<360?N+360:N-360)/2;var F=1-.17*Math.cos(e*(N-30))+.24*Math.cos(2*e*N)+.32*Math.cos(e*(3*N+6))-.2*Math.cos(e*(4*N-63)),L=n-o,I=x-v,P=2*Math.sin(e*g/2)*Math.pow(v*x,.5),j=1+.015*Math.pow(i-50,2)/Math.pow(20+Math.pow(i-50,2),.5),k=1+.045*z,q=1+.015*z*F,A=30*Math.exp(-1*Math.pow((N-275)/25,2)),B=-2*Math.pow(l/(l+Math.pow(25,7)),.5)*Math.sin(2*e*A);return Math.pow(Math.pow(L/1/j,2)+Math.pow(I/1/k,2)+Math.pow(P/1/q,2)+B*I*P/(1*k*1*q),.5)}(this.toLab(),h.toLab())/100;return o(t(n,3))},r.object.push([i,\"lab\"])}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},a=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=Math.pow(10,t)),Math.round(a*r)/a+0},n=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=1),r>a?a:r>t?r:t},u=function(r){var t=r/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(r){return 255*(r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r)},o=96.422,e=100,c=82.521,i=function(r){var t,a,u={x:.9555766*(t=r).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return a={r:h(.032404542*u.x-.015371385*u.y-.004985314*u.z),g:h(-.00969266*u.x+.018760108*u.y+41556e-8*u.z),b:h(556434e-9*u.x-.002040259*u.y+.010572252*u.z),a:r.a},{r:n(a.r,0,255),g:n(a.g,0,255),b:n(a.b,0,255),a:n(a.a)}},l=function(r){var t=u(r.r),a=u(r.g),h=u(r.b);return function(r){return{x:n(r.x,0,o),y:n(r.y,0,e),z:n(r.z,0,c),a:n(r.a)}}(function(r){return{x:1.0478112*r.x+.0228866*r.y+-.050127*r.z,y:.0295424*r.x+.9904844*r.y+-.0170491*r.z,z:-.0092345*r.x+.0150436*r.y+.7521316*r.z,a:r.a}}({x:100*(.4124564*t+.3575761*a+.1804375*h),y:100*(.2126729*t+.7151522*a+.072175*h),z:100*(.0193339*t+.119192*a+.9503041*h),a:r.a}))},f=216/24389,b=24389/27,d=function(r){return{l:n(r.l,0,100),c:r.c,h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),a:r.a};var t},p=function(r){return{l:a(r.l,2),c:a(r.c,2),h:a(r.h,2),a:a(r.a,3)}},v=function(r){var a=r.l,n=r.c,u=r.h,h=r.a,o=void 0===h?1:h;if(!t(a)||!t(n)||!t(u))return null;var e=d({l:Number(a),c:Number(n),h:Number(u),a:Number(o)});return M(e)},y=function(r){var t=function(r){var t=l(r),a=t.x/o,n=t.y/e,u=t.z/c;return a=a>f?Math.cbrt(a):(b*a+16)/116,{l:116*(n=n>f?Math.cbrt(n):(b*n+16)/116)-16,a:500*(a-n),b:200*(n-(u=u>f?Math.cbrt(u):(b*u+16)/116)),alpha:t.a}}(r),n=a(t.a,3),u=a(t.b,3),h=Math.atan2(u,n)/Math.PI*180;return{l:t.l,c:Math.sqrt(n*n+u*u),h:h<0?h+360:h,a:t.alpha}},M=function(r){return t={l:r.l,a:r.c*Math.cos(r.h*Math.PI/180),b:r.c*Math.sin(r.h*Math.PI/180),alpha:r.a},n=t.a/500+(a=(t.l+16)/116),u=a-t.b/200,i({x:(Math.pow(n,3)>f?Math.pow(n,3):(116*n-16)/b)*o,y:(t.l>8?Math.pow((t.l+16)/116,3):t.l/b)*e,z:(Math.pow(u,3)>f?Math.pow(u,3):(116*u-16)/b)*c,a:t.alpha});var t,a,n,u},x=/^lch\\(\\s*([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,s=function(t){var a=x.exec(t);if(!a)return null;var n,u,h=d({l:Number(a[1]),c:Number(a[2]),h:(n=a[3],u=a[4],void 0===u&&(u=\"deg\"),Number(n)*(r[u]||1)),a:void 0===a[5]?1:Number(a[5])/(a[6]?100:1)});return M(h)};export default function(r,t){r.prototype.toLch=function(){return p(y(this.rgba))},r.prototype.toLchString=function(){return r=p(y(this.rgba)),t=r.l,a=r.c,n=r.h,(u=r.a)<1?\"lch(\"+t+\"% \"+a+\" \"+n+\" / \"+u+\")\":\"lch(\"+t+\"% \"+a+\" \"+n+\")\";var r,t,a,n,u},t.string.push([s,\"lch\"]),t.object.push([v,\"lch\"])}\n","const { colord, extend } = require('colord');\nconst valueParser = require('postcss-value-parser');\n\nconst namesPlugin = require('colord/plugins/names');\nconst hwbPlugin = require('colord/plugins/hwb');\nconst labPlugin = require('colord/plugins/lab');\nconst lchPlugin = require('colord/plugins/lch');\n\nextend([\n\t// Type definitions are not compatible with commonjs.\n\t/** @type {any} */ (namesPlugin),\n\t/** @type {any} */ (hwbPlugin),\n\t/** @type {any} */ (labPlugin),\n\t/** @type {any} */ (lchPlugin),\n\n\t/* Syntaxes that is removed in Color Module Level 4 specification. */\n\n\t// hwb() with comma\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseHwbWithCommaString, /** @type {any} */ ('hwb-with-comma')]);\n\t},\n\t// gray()\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseGrayString, /** @type {any} */ ('gray')]);\n\t},\n]);\n\nmodule.exports = {\n\tcolord,\n};\n\n/**\n * Parses a valid hwb with comma CSS color function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()#syntax\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseHwbWithCommaString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('hwb(') || !input.endsWith(')') || input.includes('/')) {\n\t\treturn null;\n\t}\n\n\tconst [hue, whiteness = '', blackness = '', alpha, ...extraArgs] = input.slice(4, -1).split(',');\n\n\tif (!hue || !hue.trim() || !whiteness.trim() || !blackness.trim() || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\t// Change the delimiter and parse with colord.\n\tconst colordInstance = colord(\n\t\t`hwb(${hue} ${whiteness} ${blackness}${alpha ? ` / ${alpha}` : ''})`,\n\t);\n\n\tif (!colordInstance.isValid()) {\n\t\treturn null;\n\t}\n\n\treturn colordInstance.rgba;\n}\n\n/**\n * Parses a valid gray() CSS color function\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseGrayString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('gray(') || !input.endsWith(')')) {\n\t\treturn null;\n\t}\n\n\tconst [lightness, alpha, ...extraArgs] = input.slice(5, -1).split(',');\n\n\tif (!lightness || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\tconst lightnessWithUnit = valueParser.unit(lightness.trim());\n\n\tif (!lightnessWithUnit || !['', '%'].includes(lightnessWithUnit.unit)) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {import('colord/types').LabColor | import('colord/types').LabaColor}\n\t */\n\tlet colorObject = {\n\t\tl: Number(lightnessWithUnit.number),\n\t\ta: 0,\n\t\tb: 0,\n\t};\n\n\tif (alpha) {\n\t\tconst alphaWithUnit = valueParser.unit(alpha.trim());\n\n\t\tif (!alphaWithUnit || !['', '%'].includes(alphaWithUnit.unit)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tcolorObject = {\n\t\t\t...colorObject,\n\t\t\talpha: Number(alphaWithUnit.number) / (alphaWithUnit.unit ? 100 : 1),\n\t\t};\n\t}\n\n\treturn colord(colorObject).rgba;\n}\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { acceptCustomIdentsProperties } = require('../../reference/properties');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { colord } = require('./colordUtils');\n\nconst ruleName = 'color-named';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (named, original) => `Expected \"${original}\" to be \"${named}\"`,\n\trejected: (named) => `Unexpected named color \"${named}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-named',\n};\n\n// Todo tested on case insensitivity\nconst NODE_TYPES = new Set(['word', 'function']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['never', 'always-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (acceptCustomIdentsProperties.has(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if the property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst type = node.type;\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function') && type === 'function') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if neither a word nor a function\n\t\t\t\tif (!NODE_TYPES.has(type)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for named colors for \"never\" option\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'never' &&\n\t\t\t\t\ttype === 'word' &&\n\t\t\t\t\t/^[a-z]+$/iu.test(value) &&\n\t\t\t\t\tvalue.toLowerCase() !== 'transparent' &&\n\t\t\t\t\tcolord(value).isValid()\n\t\t\t\t) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(value),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\tvalue.length,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check \"always-where-possible\" option ...\n\t\t\t\tif (primary !== 'always-where-possible') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet rawColorString = null;\n\t\t\t\tlet colorString = null;\n\n\t\t\t\tif (type === 'function') {\n\t\t\t\t\trawColorString = valueParser.stringify(node);\n\n\t\t\t\t\t// First by checking for alternative color function representations ...\n\t\t\t\t\t// Remove all spaces to match what's in `representations`\n\t\t\t\t\tcolorString = rawColorString.replace(/\\s*([,/()])\\s*/g, '$1').replace(/\\s{2,}/g, ' ');\n\t\t\t\t} else if (type === 'word' && value.startsWith('#')) {\n\t\t\t\t\t// Then by checking for alternative hex representations\n\t\t\t\t\trawColorString = colorString = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst color = colord(colorString);\n\n\t\t\t\tif (!color.isValid()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst namedColor = color.toName();\n\n\t\t\t\tif (namedColor && namedColor.toLowerCase() !== 'transparent') {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.expected(namedColor, colorString),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\trawColorString.length,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t */\n\t\tfunction complain(message, node, index, length) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxHexColor = require('../../utils/isStandardSyntaxHexColor');\nconst isValidHex = require('../../utils/isValidHex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected invalid hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-no-invalid-hex',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxHexColor(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk(({ value, type, sourceIndex }) => {\n\t\t\t\tif (type === 'function' && value.endsWith('url')) return false;\n\n\t\t\t\tif (type !== 'word') return;\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n\n\t\t\t\tif (!hexMatch) return;\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\tif (!hexValue || isValidHex(hexValue)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + hexValue.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a hex color is standard\n *\n * @param {string} hex\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxHexColor(hex) {\n\t// Less map usage (e.g. .myclass { color: #colors[somecolor]; })\n\tif (hex.includes('[')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Check if a value is a valid 3, 4, 6 or 8 digit hex\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function isValidHex(value) {\n\treturn /^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(value);\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeString = rawNodeString(atRule);\n\n\t\t\tchecker.before({\n\t\t\t\tsource: nodeString,\n\t\t\t\tindex: nodeString.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: nodeString.length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Comment} comment\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxComment(comment) {\n\t// We check both here because the Sass parser uses `raws.inline` to indicate\n\t// inline comments, while the Less parser uses `inline`.\n\tif ('inline' in comment) return false;\n\n\tif ('inline' in comment.raws) return false;\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-whitespace-inside',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceBefore(comment) {\n\tif (comment.text.startsWith('*')) {\n\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t} else {\n\t\tcomment.raws.left = ' ';\n\t}\n}\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceAfter(comment) {\n\tif (comment.text[comment.text.length - 1] === '*') {\n\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t} else {\n\t\tcomment.raws.right = ' ';\n\t}\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n\n\t\t\tif (leftMatches == null || leftMatches[1] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n\n\t\t\tif (rightMatches == null || rightMatches[2] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftSpace = leftMatches[2] || '';\n\t\t\tconst rightSpace = rightMatches[1] || '';\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (primary === 'never' && leftSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'never' && rightSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!leftSpace) {\n\t\t\t\t\t\t\taddWhitespaceBefore(comment);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rightSpace) {\n\t\t\t\t\t\t\taddWhitespaceAfter(comment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSharedLineComment = require('../../utils/isSharedLineComment');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before comment',\n\trejected: 'Unexpected empty line before comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-empty-line-before',\n\tfixable: true,\n};\n\nconst stylelintCommandPrefix = 'stylelint-';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested'],\n\t\t\t\t\tignore: ['stylelint-commands', 'after-comment'],\n\t\t\t\t\tignoreComments: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore stylelint commands\n\t\t\tif (\n\t\t\t\tcomment.text.startsWith(stylelintCommandPrefix) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'stylelint-commands')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore newlines between comments\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore comments matching the ignoreComments option.\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreComments', comment.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore shared-line comments\n\t\t\tif (isSharedLineComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(comment)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always';\n\t\t\t})();\n\n\t\t\tconst before = comment.raws.before || '';\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (typeof context.newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(comment, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(comment, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// To ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// To ignore comments that are not empty\n\t\t\tif (comment.text && comment.text.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a property is a custom one\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isCustomProperty(property) {\n\treturn property.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a property is SCSS variable\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isScssVariable(property) {\n\t// SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))\n\tif (property.startsWith('$')) {\n\t\treturn true;\n\t}\n\n\t// SCSS var within a namespace (e.g. namespace.$var: x)\n\tif (property.includes('.$')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\nconst isScssVariable = require('./isScssVariable');\n\n/**\n * Check whether a property is standard\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxProperty(property) {\n\t// SCSS var\n\tif (isScssVariable(property)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x)\n\tif (property.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// Less append property value with space (e.g. transform+_: scale(2))\n\tif (property.endsWith('+') || property.endsWith('+_')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(property)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst ruleName = 'custom-property-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (propName, pattern) => `Expected \"${propName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\t/**\n\t\t * @param {string} property\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction check(property) {\n\t\t\treturn (\n\t\t\t\t!isStandardSyntaxProperty(property) ||\n\t\t\t\t!isCustomProperty(property) ||\n\t\t\t\tregexpPattern.test(property.slice(2))\n\t\t\t);\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (node.value.toLowerCase() !== 'var') return;\n\n\t\t\t\tconst { nodes } = node;\n\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tif (!firstNode || check(firstNode.value)) return;\n\n\t\t\t\tcomplain(declarationValueIndex(decl) + firstNode.sourceIndex, firstNode.value, decl);\n\t\t\t});\n\n\t\t\tif (check(prop)) return;\n\n\t\t\tcomplain(0, prop, decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t * @param {string} propName\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(index, propName, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [propName, primary],\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + propName.length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isRoot, isAtRule, isRule } = require('./typeGuards');\n\n/** @typedef {import('postcss').Root} Root */\n/** @typedef {import('postcss').Root} Document */\n/** @typedef {import('postcss').Node} PostcssNode */\n/** @typedef {import('postcss').Container} PostcssContainerNode */\n/** @typedef {import('postcss').Declaration} Declaration */\n/** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */\n\n/**\n * @param {PostcssNode} node\n * @returns {node is PostcssContainerNode}\n */\nfunction isContainerNode(node) {\n\treturn isRule(node) || isAtRule(node) || isRoot(node);\n}\n\n/**\n * In order to accommodate nested blocks (postcss-nested),\n * we need to run a shallow loop (instead of eachDecl() or eachRule(),\n * which loop recursively) and allow each nested block to accumulate\n * its own list of properties -- so that a property in a nested rule\n * does not conflict with the same property in the parent rule\n * executes a provided function once for each declaration block.\n *\n * @param {Root | Document} root - root element of file.\n * @param {(eachDecl: EachDeclaration) => void} callback - Function to execute for each declaration block\n *\n * @returns {void}\n */\nmodule.exports = function eachDeclarationBlock(root, callback) {\n\t/**\n\t * @param {PostcssNode} statement\n\t *\n\t * @returns {void}\n\t */\n\tfunction each(statement) {\n\t\tif (!isContainerNode(statement)) return;\n\n\t\tif (statement.nodes && statement.nodes.length) {\n\t\t\t/** @type {Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\tfor (const node of statement.nodes) {\n\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\tdecls.push(node);\n\t\t\t\t}\n\n\t\t\t\teach(node);\n\t\t\t}\n\n\t\t\tif (decls.length) {\n\t\t\t\tcallback(decls.forEach.bind(decls));\n\t\t\t}\n\t\t}\n\t}\n\n\teach(root);\n};\n","'use strict';\n\nconst arrayEqual = require('../../utils/arrayEqual');\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { longhandSubPropertiesOfShorthandProperties } = require('../../reference/properties');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (props) => `Expected shorthand property \"${props}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-redundant-longhand-properties',\n};\n\nconst IGNORED_VALUES = new Set(['inherit']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreShorthands: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<string, string[]>} */\n\t\tconst longhandToShorthands = new Map();\n\n\t\tfor (const [shorthand, longhandProps] of longhandSubPropertiesOfShorthandProperties.entries()) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreShorthands', shorthand)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (const longhand of longhandProps) {\n\t\t\t\tconst shorthands = longhandToShorthands.get(longhand) || [];\n\n\t\t\t\tshorthands.push(shorthand);\n\t\t\t\tlonghandToShorthands.set(longhand, shorthands);\n\t\t\t}\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Map<string, string[]>} */\n\t\t\tconst longhandDeclarations = new Map();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tif (IGNORED_VALUES.has(decl.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst prop = decl.prop.toLowerCase();\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop);\n\n\t\t\t\tconst shorthandProperties = longhandToShorthands.get(unprefixedProp);\n\n\t\t\t\tif (!shorthandProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const shorthandProperty of shorthandProperties) {\n\t\t\t\t\tconst prefixedShorthandProperty = prefix + shorthandProperty;\n\t\t\t\t\tconst longhandDeclaration = longhandDeclarations.get(prefixedShorthandProperty) || [];\n\n\t\t\t\t\tlonghandDeclaration.push(prop);\n\t\t\t\t\tlonghandDeclarations.set(prefixedShorthandProperty, longhandDeclaration);\n\n\t\t\t\t\tconst shorthandProps = /** @type {Map<string, Set<string>>} */ (\n\t\t\t\t\t\tlonghandSubPropertiesOfShorthandProperties\n\t\t\t\t\t).get(shorthandProperty);\n\t\t\t\t\tconst prefixedShorthandData = Array.from(shorthandProps || []).map(\n\t\t\t\t\t\t(item) => prefix + item,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!arrayEqual(prefixedShorthandData.sort(), longhandDeclaration.sort())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tword: decl.prop,\n\t\t\t\t\t\tmessage: messages.expected(prefixedShorthandProperty),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isString } = require('./validateTypes');\n\n/** @typedef {false | { match: string, pattern: string, substring: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @template {unknown} T\n * @param {string} input\n * @param {T | T[]} comparison\n * @returns {ReturnValue}\n */\nmodule.exports = function containsString(input, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstString(input, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstString(input, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {unknown} comparison\n * @returns {ReturnValue}\n */\nfunction testAgainstString(value, comparison) {\n\tif (!comparison) return false;\n\n\tif (!isString(comparison)) return false;\n\n\tif (comparison.startsWith('/') && comparison.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\tif (value.includes(comparison)) {\n\t\treturn { match: value, pattern: comparison, substring: comparison };\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nconst containsString = require('../../utils/containsString');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-word-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (pattern) => `Unexpected word matching pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-word-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap\n\t\t\tif (firstFourChars === '/*# ') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchesWord = matchesStringOrRegExp(text, primary) || containsString(text, primary);\n\n\t\t\tif (!matchesWord) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(matchesWord.pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tword: matchesWord.substring,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var SKIP = 'skip';\nvar CHECK = 'check';\nvar ONLY = 'only';\n\nmodule.exports = function (options, callback) {\n  var source = options.source;\n  var target = options.target;\n\n  var skipComments = (options.comments) ? options.comments === SKIP : true;\n  var skipStrings = (options.strings) ? options.strings === SKIP : true;\n  var skipFunctionNames = (options.functionNames) ? options.functionNames === SKIP : true;\n  var skipFunctionArguments = options.functionArguments === SKIP;\n  var skipParentheticals = options.parentheticals === SKIP;\n\n  var onceOptionUsed = false;\n  Object.keys(options).forEach(function(key) {\n    if (options[key] !== ONLY) return;\n    if (!onceOptionUsed) {\n      onceOptionUsed = true;\n    } else {\n      throw new Error('Only one syntax feature option can be the \"only\" one to check');\n    }\n  });\n\n  var onlyComments = options.comments === ONLY;\n  var onlyStrings = options.strings === ONLY;\n  var onlyFunctionNames = options.functionNames === ONLY;\n  var onlyFunctionArguments = options.functionArguments === ONLY;\n  var onlyParentheticals = options.parentheticals === ONLY;\n\n  var insideString = false;\n  var insideComment = false;\n  var insideSingleLineComment = false;\n  var insideParens = false;\n  var insideFunctionArguments = false;\n  var openingParenCount = 0;\n  var matchCount = 0;\n  var openingQuote;\n\n  var targetIsArray = Array.isArray(target);\n\n  // If the target is just a string, it is easy to check whether\n  // some index of the source matches it.\n  // If the target is an array of strings, though, we have to\n  // check whether some index of the source matches *any* of\n  // those target strings (stopping after the first match).\n  var getMatch = (function () {\n    if (!targetIsArray) {\n      return getMatchBase.bind(null, target);\n    }\n    return function(index) {\n      for (var ti = 0, tl = target.length; ti < tl; ti++) {\n        var checkResult = getMatchBase(target[ti], index);\n        if (checkResult) return checkResult;\n      }\n      return false;\n    }\n  })();\n\n  function getMatchBase(targetString, index) {\n    var targetStringLength = targetString.length;\n\n    // Target is a single character\n    if (targetStringLength === 1 && source[index] !== targetString) return false;\n\n    // Target is multiple characters\n    if (source.substr(index, targetStringLength) !== targetString) return false;\n\n    return {\n      insideParens: insideParens,\n      insideFunctionArguments: insideFunctionArguments,\n      insideComment: insideComment,\n      insideString: insideString,\n      startIndex: index,\n      endIndex: index + targetStringLength,\n      target: targetString,\n    };\n  }\n\n  for (var i = 0, l = source.length; i < l; i++) {\n    var currentChar = source[i];\n\n    // Register the beginning of a comment\n    if (\n      !insideString && !insideComment\n      && currentChar === \"/\"\n      && source[i - 1] !== \"\\\\\" // escaping\n    ) {\n      // standard comments\n      if (source[i + 1] === \"*\") {\n        insideComment = true;\n        continue;\n      }\n      // single-line comments\n      if (source[i + 1] === \"/\") {\n        insideComment = true;\n        insideSingleLineComment = true;\n        continue;\n      }\n    }\n\n    if (insideComment) {\n      // Register the end of a standard comment\n      if (\n        !insideSingleLineComment\n        && currentChar === \"*\"\n        && source[i - 1] !== \"\\\\\" // escaping\n        && source[i + 1] === \"/\"\n        && source[i - 1] !== \"/\" // don't end if it's /*/\n      ) {\n        insideComment = false;\n        continue;\n      }\n\n      // Register the end of a single-line comment\n      if (\n        insideSingleLineComment\n        && currentChar === \"\\n\"\n      ) {\n        insideComment = false;\n        insideSingleLineComment = false;\n      }\n\n      if (skipComments) continue;\n    }\n\n    // Register the beginning of a string\n    if (!insideComment && !insideString && (currentChar === \"\\\"\" || currentChar === \"'\")) {\n      if (source[i - 1] === \"\\\\\") continue; // escaping\n\n      openingQuote = currentChar;\n      insideString = true;\n\n      // For string-quotes rule\n      if (target === currentChar) handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideString) {\n      // Register the end of a string\n      if (currentChar === openingQuote) {\n        if (source[i - 1] === \"\\\\\") continue; // escaping\n        insideString = false;\n        continue;\n      }\n\n      if (skipStrings) continue;\n    }\n\n    // Register the beginning of parens/functions\n    if (!insideString && !insideComment && currentChar === \"(\") {\n      // Keep track of opening parentheticals so that we\n      // know when the outermost function (possibly\n      // containing nested functions) is closing\n      openingParenCount++;\n\n      insideParens = true;\n      // Only inside a function if there is a function name\n      // before the opening paren\n      if (/[a-zA-Z]/.test(source[i - 1])) {\n        insideFunctionArguments = true;\n      }\n\n      if (target === \"(\") handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideParens) {\n      // Register the end of a function\n      if (currentChar === \")\") {\n        openingParenCount--;\n        // Do this here so the match is still technically inside a function\n        if (target === \")\") handleMatch(getMatch(i));\n        if (openingParenCount === 0) {\n          insideParens = false;\n          insideFunctionArguments = false;\n        }\n        continue;\n      }\n    }\n\n    var isFunctionName = /^[a-zA-Z]*\\(/.test(source.slice(i));\n    if (skipFunctionNames && isFunctionName) continue;\n    if (onlyFunctionNames && !isFunctionName) continue;\n\n    var match = getMatch(i);\n\n    if (!match) continue;\n    handleMatch(match);\n    if (options.once) return;\n  }\n\n  function handleMatch(match) {\n    if (onlyParentheticals && !insideParens) return;\n    if (skipParentheticals && insideParens) return;\n    if (onlyFunctionArguments && !insideFunctionArguments) return;\n    if (skipFunctionArguments && insideFunctionArguments) return;\n    if (onlyStrings && !insideString) return;\n    if (onlyComments && !insideComment) return;\n    matchCount++;\n    callback(match, matchCount);\n  }\n}\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix: ((decl: Declaration, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function declarationBangSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst indexOffset = declarationValueIndex(decl);\n\t\tconst declString = decl.toString();\n\t\tconst valueString = decl.toString().slice(indexOffset);\n\n\t\tif (!valueString.includes('!')) {\n\t\t\treturn;\n\t\t}\n\n\t\tstyleSearch({ source: valueString, target: '!' }, (match) => {\n\t\t\tcheck(declString, match.startIndex + indexOffset, decl);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {Declaration} decl\n\t */\n\tfunction check(source, index, decl) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(decl, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"!\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-bang-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(value: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < declValue.length) {\n\t\t\t\t\t\t\ttarget = declValue;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= declValue.length;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex + 1);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex + 1);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { longhandSubPropertiesOfShorthandProperties } = require('../../reference/properties');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-shorthand-property-overrides',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Map<string, string>} */\n\t\t\tconst declarations = new Map();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop).toLowerCase();\n\t\t\t\tconst prefix = vendor.prefix(prop).toLowerCase();\n\n\t\t\t\tconst overrideables = /** @type {Map<string, Set<string>>} */ (\n\t\t\t\t\tlonghandSubPropertiesOfShorthandProperties\n\t\t\t\t).get(unprefixedProp);\n\n\t\t\t\tif (!overrideables) {\n\t\t\t\t\tdeclarations.set(prop.toLowerCase(), prop);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const longhandProp of overrideables) {\n\t\t\t\t\tconst declaration = declarations.get(prefix + longhandProp);\n\n\t\t\t\t\tif (!declaration) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.rejected(prop, declaration || ''),\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-property-no-missing-var-function';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (customProperty) => `Unexpected missing var function for \"${customProperty}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-no-missing-var-function',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/** @type {Set<string>} */\n\t\tconst knownCustomProperties = new Set();\n\n\t\troot.walkAtRules(/^property$/i, (atRule) => {\n\t\t\tknownCustomProperties.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls(({ prop }) => {\n\t\t\tif (isCustomProperty(prop)) knownCustomProperties.add(prop);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isVarFunction(node)) return false;\n\n\t\t\t\tif (!isDashedIdent(node)) return;\n\n\t\t\t\tif (!knownCustomProperties.has(node.value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isDashedIdent({ type, value }) {\n\treturn type === 'word' && value.startsWith('--');\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isVarFunction({ type, value }) {\n\treturn type === 'function' && value === 'var';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-single-line-max-declarations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst block = blockString(ruleNode);\n\n\t\t\tif (!isSingleLineString(block)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = ruleNode.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: block,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \";\" in a multi-line declaration block',\n\trejectedAfterMultiLine: () => 'Unexpected newline after \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = decl.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheck.raws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheck.raws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheck.raws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheck.raws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\tnodeToCheck.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-duplicate-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-properties',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'consecutive-duplicates',\n\t\t\t\t\t\t'consecutive-duplicates-with-different-values',\n\t\t\t\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t\t\t\t],\n\t\t\t\t\tignoreProperties: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDuplicates = optionsMatches(secondaryOptions, 'ignore', 'consecutive-duplicates');\n\t\tconst ignoreDiffValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-different-values',\n\t\t);\n\t\tconst ignorePrefixlessSameValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {import('postcss').Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst lowerProp = decl.prop.toLowerCase();\n\t\t\t\tconst value = decl.value;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if the property is to be ignored\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore the src property as commonly duplicated in at-fontface\n\t\t\t\tif (lowerProp === 'src') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst indexDuplicate = decls.findIndex((d) => d.prop.toLowerCase() === lowerProp);\n\n\t\t\t\tif (indexDuplicate !== -1) {\n\t\t\t\t\tif (ignoreDiffValues || ignorePrefixlessSameValues) {\n\t\t\t\t\t\t// fails if duplicates are not consecutive\n\t\t\t\t\t\tif (indexDuplicate !== decls.length - 1) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst duplicateDecl = decls[indexDuplicate];\n\t\t\t\t\t\tconst duplicateValue = duplicateDecl ? duplicateDecl.value : '';\n\n\t\t\t\t\t\tif (ignorePrefixlessSameValues) {\n\t\t\t\t\t\t\t// fails if values of consecutive, unprefixed duplicates are equal\n\t\t\t\t\t\t\tif (vendor.unprefixed(value) !== vendor.unprefixed(duplicateValue)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fails if values of consecutive duplicates are equal\n\t\t\t\t\t\tif (value === duplicateValue) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ignoreDuplicates && indexDuplicate === decls.length - 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdecls.push(decl);\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration[]} declarations\n * @param {string} lowerProperty\n * @returns {void}\n * */\nfunction removePreviousDuplicate(declarations, lowerProperty) {\n\tconst declToRemove = declarations.find((d) => d.prop.toLowerCase() === lowerProperty);\n\n\tif (declToRemove) declToRemove.remove();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \";\"',\n\trejectedAfter: () => 'Unexpected whitespace after \";\"',\n\texpectedAfterSingleLine: () =>\n\t\t'Expected single space after \";\" in a single-line declaration block',\n\trejectedAfterSingleLine: () =>\n\t\t'Unexpected whitespace after \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextDecl = decl.next();\n\n\t\t\tif (!nextDecl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: rawNodeString(nextDecl),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'alpha-value-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/alpha-value-notation',\n\tfixable: true,\n};\n\nconst ALPHA_PROPS = new Set([\n\t'opacity',\n\t'shape-image-threshold',\n\t// SVG properties\n\t'fill-opacity',\n\t'flood-opacity',\n\t'stop-opacity',\n\t'stroke-opacity',\n]);\nconst ALPHA_FUNCS = new Set(['hsl', 'hsla', 'hwb', 'lab', 'lch', 'rgb', 'rgba']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['number', 'percentage'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texceptProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tnumber: {\n\t\t\t\texpFunc: isNumber,\n\t\t\t\tfixFunc: asNumber,\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: isPercentage,\n\t\t\t\tfixFunc: asPercentage,\n\t\t\t},\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\t/** @type {import('postcss-value-parser').Node | undefined} */\n\t\t\t\tlet alpha;\n\n\t\t\t\tif (ALPHA_PROPS.has(decl.prop.toLowerCase())) {\n\t\t\t\t\talpha = findAlphaInValue(node);\n\t\t\t\t} else {\n\t\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\t\tif (!ALPHA_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\t\talpha = findAlphaInFunction(node);\n\t\t\t\t}\n\n\t\t\t\tif (!alpha) return;\n\n\t\t\t\tconst { value } = alpha;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isNumber(value) && !isPercentage(value)) return;\n\n\t\t\t\t/** @type {'number' | 'percentage'} */\n\t\t\t\tlet expectation = primary;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'exceptProperties', decl.prop)) {\n\t\t\t\t\tif (expectation === 'number') {\n\t\t\t\t\t\texpectation = 'percentage';\n\t\t\t\t\t} else if (expectation === 'percentage') {\n\t\t\t\t\t\texpectation = 'number';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (optionFuncs[expectation].expFunc(value)) return;\n\n\t\t\t\tconst fixed = optionFuncs[expectation].fixFunc(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\talpha.value = String(fixed);\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + alpha.sourceIndex;\n\t\t\t\tconst endIndex = index + alpha.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asPercentage(value) {\n\tconst number = Number(value);\n\n\treturn `${Number((number * 100).toPrecision(3))}%`;\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tassert(dimension);\n\n\tconst number = Number(dimension.number);\n\n\treturn Number((number / 100).toPrecision(3)).toString();\n}\n\n/**\n * @template {import('postcss-value-parser').Node} T\n * @param {T} node\n * @returns {T | undefined}\n */\nfunction findAlphaInValue(node) {\n\treturn node.type === 'word' || node.type === 'function' ? node : undefined;\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {import('postcss-value-parser').Node | undefined}\n */\nfunction findAlphaInFunction(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\n\tif (args.length === 4) return args[3];\n\n\tconst slashNodeIndex = node.nodes.findIndex(({ type, value }) => type === 'div' && value === '/');\n\n\tif (slashNodeIndex !== -1) {\n\t\tconst nodesAfterSlash = node.nodes.slice(slashNodeIndex + 1, node.nodes.length);\n\n\t\treturn nodesAfterSlash.find(({ type }) => type === 'word');\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isPercentage(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '%';\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-opening-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"{\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if selector is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'rule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', statement.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.raws.between = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.between = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n\texpectedBeforeSingleLine: () =>\n\t\t'Expected single space before \";\" in a single-line declaration block',\n\trejectedBeforeSingleLine: () =>\n\t\t'Unexpected whitespace before \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.before({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = ' !important ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ' '));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tif (decl.raws.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ''));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"!\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-bang-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(val: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < value.length) {\n\t\t\t\t\t\t\ttarget = value;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, val);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= value.length;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = val;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + ' ' + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \";\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n\trejectedBeforeMultiLine: () =>\n\t\t'Unexpected whitespace before \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-trailing-semicolon';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a trailing semicolon',\n\trejected: 'Unexpected trailing semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-trailing-semicolon',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['single-declaration'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!atRule.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (atRule.parent === root) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (atRule !== atRule.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(atRule);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (decl.parent.type === 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl !== decl.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkLastNode(node) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tconst hasSemicolon = node.parent.raws.semicolon;\n\t\t\tconst ignoreSingleDeclaration = optionsMatches(\n\t\t\t\tsecondaryOptions,\n\t\t\t\t'ignore',\n\t\t\t\t'single-declaration',\n\t\t\t);\n\n\t\t\tif (ignoreSingleDeclaration && node.parent.first === node) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet message;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tif (hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = true;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.raws.between = '';\n\t\t\t\t\t\tnode.parent.raws.after = ' ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.expected;\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tif (!hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.rejected;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected primary option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex: node.toString().trim().length - 1,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isScssVariable = require('./isScssVariable');\nconst { isRoot, isRule } = require('./typeGuards');\n\n/**\n * @param {string} [lang]\n */\nfunction isStandardSyntaxLang(lang) {\n\treturn lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\nmodule.exports = function isStandardSyntaxDeclaration(decl) {\n\tconst prop = decl.prop;\n\tconst parent = decl.parent;\n\n\t// Declarations belong in a declaration block or standard CSS source\n\tif (\n\t\tparent &&\n\t\tisRoot(parent) &&\n\t\tparent.source &&\n\t\t!isStandardSyntaxLang(\n\t\t\t/** @type {import('postcss').Source & {lang?: string}} */ (parent.source).lang,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// SCSS var; covers map and list declarations\n\tif (isScssVariable(prop)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\tif (prop[0] === '@' && prop[1] !== '{') {\n\t\treturn false;\n\t}\n\n\t// Less map declaration\n\tif (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {\n\t\treturn false;\n\t}\n\n\t// Less map (e.g. #my-map() { myprop: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector.startsWith('#') &&\n\t\tparent.selector.endsWith('()')\n\t) {\n\t\treturn false;\n\t}\n\n\t// Sass nested properties (e.g. border: { style: solid; color: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector[parent.selector.length - 1] === ':' &&\n\t\tparent.selector.substring(0, 2) !== '--'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Less &:extend\n\tif ('extend' in decl && decl.extend) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst report = require('../utils/report');\n\n/** @typedef {(args: { source: string, index: number, lineCheckStr: string, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((decl: import('postcss').Declaration, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function declarationColonSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the raw prop, and only the prop\n\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\topts.locationChecker({\n\t\t\t\tsource: propPlusColon,\n\t\t\t\tindex: i,\n\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\terr: (message) => {\n\t\t\t\t\tif (opts.fix && opts.fix(decl, i)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.prop.toString().length + 1,\n\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t});\n};\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst vendor = require('../../utils/vendor');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, assertNumber } = require('../../utils/validateTypes');\nconst validateObjectWithProps = require('../../utils/validateObjectWithProps');\n\nconst ruleName = 'declaration-property-max-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, max) =>\n\t\t`Expected \"${property}\" to have no more than ${max} ${max === 1 ? 'value' : 'values'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-max-values',\n};\n\n/**\n * @param {valueParser.Node} node\n */\nconst isValueNode = (node) => {\n\treturn node.type === 'word' || node.type === 'function' || node.type === 'string';\n};\n\n/** @type {import('stylelint').Rule<Record<string, number>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithProps(isNumber)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\t\t\tconst propLength = valueParser(value).nodes.filter(isValueNode).length;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max = primary[propKey];\n\n\t\t\tassertNumber(max);\n\n\t\t\tif (propLength <= max) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, max),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties agree with the provided validator.\n *\n * @example\n * config = {\n *   value1: 1,\n *   value2: 2,\n *   value3: 3,\n * };\n * validateObjectWithProps(isNumber)(config);\n * //=> true\n *\n * @param {(value: unknown) => boolean} validator\n * @returns {(value: unknown) => boolean}\n */\nmodule.exports = (validator) => (value) => {\n\tif (!isPlainObject(value)) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(value).every((item) => {\n\t\treturn validator(item);\n\t});\n};\n","'use strict';\n\n/**\n * @param {string} source\n *\n * @returns {string}\n */\nmodule.exports = function blurInterpolation(source, blurChar = ' ') {\n\treturn source.replace(/[#@{}]+/g, blurChar);\n};\n","'use strict';\n\nconst blurInterpolation = require('./blurInterpolation');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Get Dimension from value node;\n * `unit` and `number` return null if neither is found\n *\n * @param {import('postcss-value-parser').Node} node\n *\n * @returns {{unit: null, number: null} | valueParser.Dimension}\n */\nmodule.exports = function getDimension(node) {\n\tif (!node || !node.value) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore non-word nodes\n\tif (node.type !== 'word') {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore non standard syntax\n\tif (!isStandardSyntaxValue(node.value)) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore HEX\n\tif (node.value.startsWith('#')) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Remove non standard stuff\n\tconst value = blurInterpolation(node.value, '')\n\t\t// ignore hack unit\n\t\t.replace('\\\\0', '')\n\t\t.replace('\\\\9', '');\n\n\tconst parsedUnit = valueParser.unit(value);\n\n\tif (!parsedUnit) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\treturn parsedUnit;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getDimension = require('../../utils/getDimension');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tif (node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function')) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\tif (!unit || (unit && propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getDimension = require('../../utils/getDimension');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-unit-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\tif (!unit || (unit && !propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \":\" with a single-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ': ');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ':');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {{\n *   div: import('postcss-value-parser').DivNode,\n *   index: number,\n *   nodes: import('postcss-value-parser').Node[],\n *   expectation: string,\n *   position: 'before' | 'after',\n *   symb: string,\n * }} params\n * @returns {boolean}\n */\nmodule.exports = function functionCommaSpaceFix(params) {\n\tconst { div, index, nodes, expectation, position, symb } = params;\n\n\tif (expectation.startsWith('always')) {\n\t\tdiv[position] = symb;\n\n\t\treturn true;\n\t}\n\n\tif (expectation.startsWith('never')) {\n\t\tdiv[position] = '';\n\n\t\tfor (let i = index + 1; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tif (node === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'comment') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'space') {\n\t\t\t\tnode.value = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst getDeclarationValue = require('../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../utils/isStandardSyntaxFunction');\nconst report = require('../utils/report');\nconst setDeclarationValue = require('../utils/setDeclarationValue');\nconst valueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} ValueParserNode */\n/** @typedef {import('postcss-value-parser').DivNode} ValueParserDivNode */\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((node: ValueParserDivNode, index: number, nodes: ValueParserNode[]) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function functionCommaSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst declValue = getDeclarationValue(decl);\n\n\t\tlet hasFixed;\n\t\tconst parsedValue = valueParser(declValue);\n\n\t\tparsedValue.walk((valueNode) => {\n\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore `url()` arguments, which may contain data URIs or other funky stuff\n\t\t\tif (valueNode.value.toLowerCase() === 'url') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst argumentStrings = valueNode.nodes.map((node) => valueParser.stringify(node));\n\n\t\t\tconst functionArguments = (() => {\n\t\t\t\t// Remove function name and parens\n\t\t\t\tlet result = valueNode.before + argumentStrings.join('') + valueNode.after;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tresult = result.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn result;\n\t\t\t})();\n\n\t\t\t/**\n\t\t\t * Gets the index of the comma for checking.\n\t\t\t * @param {ValueParserDivNode} commaNode The comma node\n\t\t\t * @param {number} nodeIndex The index of the comma node\n\t\t\t * @returns {number} The index of the comma for checking\n\t\t\t */\n\t\t\tconst getCommaCheckIndex = (commaNode, nodeIndex) => {\n\t\t\t\tlet commaBefore =\n\t\t\t\t\tvalueNode.before + argumentStrings.slice(0, nodeIndex).join('') + commaNode.before;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tcommaBefore = commaBefore.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn commaBefore.length;\n\t\t\t};\n\n\t\t\t/** @type {{ commaNode: ValueParserDivNode, checkIndex: number, nodeIndex: number }[]} */\n\t\t\tconst commaDataList = [];\n\n\t\t\tfor (const [nodeIndex, node] of valueNode.nodes.entries()) {\n\t\t\t\tif (node.type !== 'div' || node.value !== ',') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst checkIndex = getCommaCheckIndex(node, nodeIndex);\n\n\t\t\t\tcommaDataList.push({\n\t\t\t\t\tcommaNode: node,\n\t\t\t\t\tcheckIndex,\n\t\t\t\t\tnodeIndex,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const { commaNode, checkIndex, nodeIndex } of commaDataList) {\n\t\t\t\topts.locationChecker({\n\t\t\t\t\tsource: functionArguments,\n\t\t\t\t\tindex: checkIndex,\n\t\t\t\t\terr: (message) => {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + commaNode.sourceIndex + commaNode.before.length;\n\n\t\t\t\t\t\tif (opts.fix && opts.fix(commaNode, nodeIndex, valueNode.nodes)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasFixed) {\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t}\n\t});\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line function',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst propKeys = Object.keys(primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propPatterns = propKeys.filter((key) => matchesStringOrRegExp(unprefixedProp, key));\n\n\t\t\tif (propPatterns.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (propPatterns.some((pattern) => optionsMatches(primary, pattern, value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether it's a number or a number-like string:\n * i.e. when coerced to a number it == itself.\n *\n * @param {string | number} value\n */\nmodule.exports = function isNumbery(value) {\n\treturn value.toString().trim().length !== 0 && Number(value) == value; // eslint-disable-line eqeqeq\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst basicKeywords = new Set(['initial', 'inherit', 'revert', 'revert-layer', 'unset']);\n\nconst systemFontKeywords = uniteSets(basicKeywords, [\n\t'caption',\n\t'icon',\n\t'menu',\n\t'message-box',\n\t'small-caption',\n\t'status-bar',\n]);\n\nconst fontFamilyKeywords = uniteSets(basicKeywords, [\n\t'serif',\n\t'sans-serif',\n\t'cursive',\n\t'fantasy',\n\t'monospace',\n\t'system-ui',\n\t'ui-serif',\n\t'ui-sans-serif',\n\t'ui-monospace',\n\t'ui-rounded',\n]);\n\nconst fontWeightRelativeKeywords = new Set(['bolder', 'lighter']);\n\nconst fontWeightAbsoluteKeywords = new Set(['normal', 'bold']);\n\nconst fontWeightNonNumericKeywords = uniteSets(\n\tfontWeightRelativeKeywords,\n\tfontWeightAbsoluteKeywords,\n);\n\nconst fontWeightNumericKeywords = new Set([\n\t'100',\n\t'200',\n\t'300',\n\t'400',\n\t'500',\n\t'600',\n\t'700',\n\t'800',\n\t'900',\n]);\n\nconst fontWeightKeywords = uniteSets(\n\tbasicKeywords,\n\tfontWeightNonNumericKeywords,\n\tfontWeightNumericKeywords,\n);\n\nconst fontStyleKeywords = uniteSets(basicKeywords, ['normal', 'italic', 'oblique']);\n\nconst fontVariantKeywords = uniteSets(basicKeywords, [\n\t'normal',\n\t'none',\n\t'historical-forms',\n\t'none',\n\t'common-ligatures',\n\t'no-common-ligatures',\n\t'discretionary-ligatures',\n\t'no-discretionary-ligatures',\n\t'historical-ligatures',\n\t'no-historical-ligatures',\n\t'contextual',\n\t'no-contextual',\n\t'small-caps',\n\t'small-caps',\n\t'all-small-caps',\n\t'petite-caps',\n\t'all-petite-caps',\n\t'unicase',\n\t'titling-caps',\n\t'lining-nums',\n\t'oldstyle-nums',\n\t'proportional-nums',\n\t'tabular-nums',\n\t'diagonal-fractions',\n\t'stacked-fractions',\n\t'ordinal',\n\t'slashed-zero',\n\t'jis78',\n\t'jis83',\n\t'jis90',\n\t'jis04',\n\t'simplified',\n\t'traditional',\n\t'full-width',\n\t'proportional-width',\n\t'ruby',\n]);\n\nconst fontStretchKeywords = uniteSets(basicKeywords, [\n\t'semi-condensed',\n\t'condensed',\n\t'extra-condensed',\n\t'ultra-condensed',\n\t'semi-expanded',\n\t'expanded',\n\t'extra-expanded',\n\t'ultra-expanded',\n]);\n\nconst fontSizeKeywords = uniteSets(basicKeywords, [\n\t'xx-small',\n\t'x-small',\n\t'small',\n\t'medium',\n\t'large',\n\t'x-large',\n\t'xx-large',\n\t'larger',\n\t'smaller',\n]);\n\nconst lineHeightKeywords = uniteSets(basicKeywords, ['normal']);\n\nconst fontShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tfontStyleKeywords,\n\tfontVariantKeywords,\n\tfontWeightKeywords,\n\tfontStretchKeywords,\n\tfontSizeKeywords,\n\tlineHeightKeywords,\n\tfontFamilyKeywords,\n);\n\nconst animationNameKeywords = uniteSets(basicKeywords, ['none']);\n\nconst animationTimingFunctionKeywords = uniteSets(basicKeywords, [\n\t'linear',\n\t'ease',\n\t'ease-in',\n\t'ease-in-out',\n\t'ease-out',\n\t'step-start',\n\t'step-end',\n\t'steps',\n\t'cubic-bezier',\n]);\n\nconst animationIterationCountKeywords = new Set(['infinite']);\n\nconst animationDirectionKeywords = uniteSets(basicKeywords, [\n\t'normal',\n\t'reverse',\n\t'alternate',\n\t'alternate-reverse',\n]);\n\nconst animationFillModeKeywords = new Set(['none', 'forwards', 'backwards', 'both']);\n\nconst animationPlayStateKeywords = uniteSets(basicKeywords, ['running', 'paused']);\n\n// cf. https://developer.mozilla.org/en-US/docs/Web/CSS/animation\nconst animationShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tanimationNameKeywords,\n\tanimationTimingFunctionKeywords,\n\tanimationIterationCountKeywords,\n\tanimationDirectionKeywords,\n\tanimationFillModeKeywords,\n\tanimationPlayStateKeywords,\n);\n\nconst gridRowKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\nconst gridColumnKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\nconst gridAreaKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\n// https://developer.mozilla.org/docs/Web/CSS/counter-increment\nconst counterIncrementKeywords = uniteSets(basicKeywords, ['none']);\n\nconst counterResetKeywords = uniteSets(basicKeywords, ['none']);\n\n// https://developer.mozilla.org/ru/docs/Web/CSS/list-style-type\nconst listStyleTypeKeywords = uniteSets(basicKeywords, [\n\t'none',\n\t'disc',\n\t'circle',\n\t'square',\n\t'decimal',\n\t'cjk-decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-greek',\n\t'lower-alpha',\n\t'lower-latin',\n\t'upper-alpha',\n\t'upper-latin',\n\t'arabic-indic',\n\t'armenian',\n\t'bengali',\n\t'cambodian',\n\t'cjk-earthly-branch',\n\t'cjk-ideographic',\n\t'devanagari',\n\t'ethiopic-numeric',\n\t'georgian',\n\t'gujarati',\n\t'gurmukhi',\n\t'hebrew',\n\t'hiragana',\n\t'hiragana-iroha',\n\t'japanese-formal',\n\t'japanese-informal',\n\t'kannada',\n\t'katakana',\n\t'katakana-iroha',\n\t'khmer',\n\t'korean-hangul-formal',\n\t'korean-hanja-formal',\n\t'korean-hanja-informal',\n\t'lao',\n\t'lower-armenian',\n\t'malayalam',\n\t'mongolian',\n\t'myanmar',\n\t'oriya',\n\t'persian',\n\t'simp-chinese-formal',\n\t'simp-chinese-informal',\n\t'tamil',\n\t'telugu',\n\t'thai',\n\t'tibetan',\n\t'trad-chinese-formal',\n\t'trad-chinese-informal',\n\t'upper-armenian',\n\t'disclosure-open',\n\t'disclosure-closed',\n\t// Non-standard extensions (without prefixe)\n\t'ethiopic-halehame',\n\t'ethiopic-halehame-am',\n\t'ethiopic-halehame-ti-er',\n\t'ethiopic-halehame-ti-et',\n\t'hangul',\n\t'hangul-consonant',\n\t'urdu',\n]);\n\nconst listStylePositionKeywords = uniteSets(basicKeywords, ['inside', 'outside']);\n\nconst listStyleImageKeywords = uniteSets(basicKeywords, ['none']);\n\nconst listStyleShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tlistStyleTypeKeywords,\n\tlistStylePositionKeywords,\n\tlistStyleImageKeywords,\n);\n\nconst camelCaseKeywords = new Set([\n\t'optimizeSpeed',\n\t'optimizeQuality',\n\t'optimizeLegibility',\n\t'geometricPrecision',\n\t'currentColor',\n\t'crispEdges',\n\t'visiblePainted',\n\t'visibleFill',\n\t'visibleStroke',\n\t'sRGB',\n\t'linearRGB',\n]);\n\nconst keyframeSelectorKeywords = new Set(['from', 'to']);\n\n// https://www.w3.org/TR/CSS22/ui.html#system-colors\nconst systemColorsKeywords = new Set([\n\t'activeborder',\n\t'activecaption',\n\t'appworkspace',\n\t'background',\n\t'buttonface',\n\t'buttonhighlight',\n\t'buttonshadow',\n\t'buttontext',\n\t'captiontext',\n\t'graytext',\n\t'highlight',\n\t'highlighttext',\n\t'inactiveborder',\n\t'inactivecaption',\n\t'inactivecaptiontext',\n\t'infobackground',\n\t'infotext',\n\t'menu',\n\t'menutext',\n\t'scrollbar',\n\t'threeddarkshadow',\n\t'threedface',\n\t'threedhighlight',\n\t'threedlightshadow',\n\t'threedshadow',\n\t'window',\n\t'windowframe',\n\t'windowtext',\n]);\n\nmodule.exports = {\n\tanimationNameKeywords,\n\tanimationShorthandKeywords,\n\tbasicKeywords,\n\tcamelCaseKeywords,\n\tcounterIncrementKeywords,\n\tcounterResetKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n\tfontSizeKeywords,\n\tfontWeightAbsoluteKeywords,\n\tfontWeightKeywords,\n\tfontWeightNonNumericKeywords,\n\tfontWeightRelativeKeywords,\n\tgridAreaKeywords,\n\tgridColumnKeywords,\n\tgridRowKeywords,\n\tkeyframeSelectorKeywords,\n\tlistStyleImageKeywords,\n\tlistStylePositionKeywords,\n\tlistStyleShorthandKeywords,\n\tlistStyleTypeKeywords,\n\tsystemColorsKeywords,\n\tsystemFontKeywords,\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst lengthUnits = new Set([\n\t// Font-relative length units\n\t'cap',\n\t'ch',\n\t'em',\n\t'ex',\n\t'ic',\n\t'lh',\n\t'rcap',\n\t'rch',\n\t'rem',\n\t'rex',\n\t'ric',\n\t'rlh',\n\t// Viewport-percentage lengths\n\t'dvb',\n\t'dvh',\n\t'dvi',\n\t'dvmax',\n\t'dvmin',\n\t'dvw',\n\t'lvb',\n\t'lvh',\n\t'lvi',\n\t'lvmax',\n\t'lvmin',\n\t'lvw',\n\t'svb',\n\t'svh',\n\t'svi',\n\t'svmax',\n\t'svmin',\n\t'svw',\n\t'vb',\n\t'vh',\n\t'vi',\n\t'vw',\n\t'vmin',\n\t'vmax',\n\t'vm',\n\t// Absolute length units\n\t'px',\n\t'mm',\n\t'cm',\n\t'in',\n\t'pt',\n\t'pc',\n\t'q',\n\t'mozmm',\n\t// Flexible length units\n\t'fr',\n\t// Container query units\n\t'cqw',\n\t'cqh',\n\t'cqi',\n\t'cqb',\n\t'cqmin',\n\t'cqmax',\n]);\n\nconst units = uniteSets(lengthUnits, [\n\t// Relative length units\n\t'%',\n\t// Time length units\n\t's',\n\t'ms',\n\t// Angle\n\t'deg',\n\t'grad',\n\t'turn',\n\t'rad',\n\t// Frequency\n\t'Hz',\n\t'kHz',\n\t// Resolution\n\t'dpi',\n\t'dpcm',\n\t'dppx',\n]);\n\nmodule.exports = {\n\tlengthUnits,\n\tunits,\n};\n","'use strict';\n\nconst { fontSizeKeywords } = require('../reference/keywords');\nconst { lengthUnits } = require('../reference/units');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Check if a word is a font-size value.\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function isValidFontSize(word) {\n\tif (!word) {\n\t\treturn false;\n\t}\n\n\tif (fontSizeKeywords.has(word)) {\n\t\treturn true;\n\t}\n\n\tconst numberUnit = valueParser.unit(word);\n\n\tif (!numberUnit) {\n\t\treturn false;\n\t}\n\n\tconst unit = numberUnit.unit;\n\n\tif (unit === '%') {\n\t\treturn true;\n\t}\n\n\tif (lengthUnits.has(unit.toLowerCase())) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * Check whether a word is a variable i.e var(--custom-property).\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function isVariable(word) {\n\treturn word.toLowerCase().startsWith('var(');\n};\n","'use strict';\n\nconst postcssValueParser = require('postcss-value-parser');\n\nconst isNumbery = require('./isNumbery');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isValidFontSize = require('./isValidFontSize');\nconst isVariable = require('./isVariable');\nconst { assert } = require('./validateTypes');\nconst {\n\tbasicKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n} = require('../reference/keywords');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n\tfirstNode.value = firstNode.value + charactersBetween + secondNode.value;\n\n\treturn firstNode;\n}\n\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @returns {Node[]} Collection font-family nodes\n */\nmodule.exports = function findFontFamily(value) {\n\t/** @type {Node[]} */\n\tconst fontFamilies = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes: children } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (children.length === 1 && children[0] && basicKeywords.has(children[0].value.toLowerCase())) {\n\t\treturn [children[0]];\n\t}\n\n\tlet needMergeNodesByValue = false;\n\t/** @type {string | null} */\n\tlet mergeCharacters = null;\n\n\tvalueNodes.walk((valueNode, index, nodes) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!nodeTypesToCheck.has(valueNode.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other font parts\n\t\tif (fontShorthandKeywords.has(valueLowerCase) && !fontFamilyKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore font-sizes\n\t\tif (isValidFontSize(valueNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst prevPrevNode = nodes[index - 2];\n\n\t\t// Ignore anything come after a <font-size>/, because it's a line-height\n\t\tif (prevNode && prevNode.value === '/' && prevPrevNode && isValidFontSize(prevPrevNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore number values\n\t\tif (isNumbery(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\t\tif (\n\t\t\t(valueNode.type === 'space' || (valueNode.type === 'div' && valueNode.value !== ',')) &&\n\t\t\tfontFamilies.length !== 0\n\t\t) {\n\t\t\tneedMergeNodesByValue = true;\n\t\t\tmergeCharacters = valueNode.value;\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (valueNode.type === 'space' || valueNode.type === 'div') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontFamily = valueNode;\n\n\t\tif (needMergeNodesByValue) {\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\t\t\tjoinValueNodes(lastFontFamily, fontFamily, mergeCharacters);\n\t\t\tneedMergeNodesByValue = false;\n\t\t\tmergeCharacters = null;\n\t\t} else {\n\t\t\tfontFamilies.push(fontFamily);\n\t\t}\n\t});\n\n\treturn fontFamilies;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst { fontFamilyKeywords } = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-duplicate-names';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected duplicate name ${name}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-no-duplicate-names',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && fontFamilyKeywords.has(node.value.toLowerCase());\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilyNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst keywords = new Set();\n\t\t\tconst familyNames = new Set();\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilies) {\n\t\t\t\tconst family = fontFamilyNode.value.trim();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFontFamilyNames', family)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rawFamily =\n\t\t\t\t\t'quote' in fontFamilyNode ? fontFamilyNode.quote + family + fontFamilyNode.quote : family;\n\n\t\t\t\tif (isFamilyNameKeyword(fontFamilyNode)) {\n\t\t\t\t\tif (keywords.has(family.toLowerCase())) {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tkeywords.add(family);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (familyNames.has(family)) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfamilyNames.add(family);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Returns a position of `!important` (or `! important` including whitespaces)\n * from the specified CSS source code. If not found, returns `undefined`.\n *\n * @param {string} source\n * @returns {{ index: number, endIndex: number } | undefined}\n */\nmodule.exports = function getImportantPosition(source) {\n\tconst pattern = /!\\s*important\\b/gi;\n\tconst match = pattern.exec(source);\n\n\tif (!match) return;\n\n\treturn { index: match.index, endIndex: pattern.lastIndex };\n};\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.important) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\tassert(pos);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex: pos.index,\n\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-value-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst propKeys = Object.keys(primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propPatterns = propKeys.filter((key) => matchesStringOrRegExp(unprefixedProp, key));\n\n\t\t\tif (propPatterns.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (propPatterns.every((pattern) => !optionsMatches(primary, pattern, value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst { fontFamilyKeywords } = require('../../reference/keywords');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (family) => `Expected quotes around \"${family}\"`,\n\trejected: (family) => `Unexpected quotes around \"${family}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-name-quotes',\n\tfixable: true,\n};\n\n/**\n * @param {string} font\n * @returns {boolean}\n */\nfunction isSystemFontKeyword(font) {\n\tif (font.startsWith('-apple-')) {\n\t\treturn true;\n\t}\n\n\tif (font === 'BlinkMacSystemFont') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * \"To avoid mistakes in escaping, it is recommended to quote font family names\n * that contain white space, digits, or punctuation characters other than hyphens\"\n * (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRecommended(family) {\n\treturn !/^[-a-zA-Z]+$/.test(family);\n}\n\n/**\n * Quotes are required if the family is not a valid CSS identifier\n * (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRequired(family) {\n\treturn family\n\t\t.split(/\\s+/)\n\t\t.some((word) => /^(?:-?\\d|--)/.test(word) || !/^[-\\w\\u{00A0}-\\u{10FFFF}]+$/u.test(word));\n}\n\n/**\n * @typedef {{\n *   name: string,\n *   rawName: string,\n *   hasQuotes: boolean,\n *   sourceIndex: number,\n *   resetIndexes: (offset: number) => void,\n *   removeQuotes: () => void,\n *   addQuotes: () => void,\n * }} MutableNode\n */\n\n/**\n *\n * @param {import('postcss-value-parser').Node[]} fontFamilies\n * @param {import('postcss').Declaration} decl\n * @returns {MutableNode[]}\n */\nconst makeMutableFontFamilies = (fontFamilies, decl) => {\n\t/**\n\t * @type {MutableNode[]}\n\t */\n\tconst mutableNodes = [];\n\n\tfontFamilies.forEach((fontFamily, idx) => {\n\t\tconst quote = 'quote' in fontFamily && fontFamily.quote;\n\t\tconst name = fontFamily.value;\n\n\t\t/** @type {MutableNode} */\n\t\tconst newNode = {\n\t\t\tname,\n\t\t\trawName: quote ? `${quote}${name}${quote}` : name,\n\t\t\tsourceIndex: fontFamily.sourceIndex,\n\t\t\thasQuotes: Boolean(quote),\n\t\t\tresetIndexes(offset) {\n\t\t\t\tmutableNodes.slice(idx + 1).forEach((n) => (n.sourceIndex += offset));\n\t\t\t},\n\t\t\tremoveQuotes() {\n\t\t\t\tif (this.hasQuotes === false) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length + 2;\n\n\t\t\t\tthis.hasQuotes = false;\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + this.name + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(-2);\n\t\t\t},\n\t\t\taddQuotes() {\n\t\t\t\tif (this.hasQuotes === true) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length;\n\n\t\t\t\tthis.hasQuotes = true;\n\t\t\t\tconst fixedName = `\"${this.name}\"`;\n\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + fixedName + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(2);\n\t\t\t},\n\t\t};\n\n\t\tmutableNodes.push(newNode);\n\t});\n\n\treturn mutableNodes;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tif (!isStandardSyntaxValue(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fontFamilyNodes = makeMutableFontFamilies(findFontFamily(decl.value), decl);\n\n\t\t\tif (fontFamilyNodes.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilyNodes) {\n\t\t\t\tcheckFamilyName(fontFamilyNode, decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {MutableNode} fontFamilyNode\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFamilyName(fontFamilyNode, decl) {\n\t\t\tconst { name: family, rawName: rawFamily, hasQuotes } = fontFamilyNode;\n\n\t\t\tif (isVariable(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Disallow quotes around (case-insensitive) keywords\n\t\t\t// and system font keywords in all cases\n\t\t\tif (fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst required = quotesRequired(family);\n\t\t\tconst recommended = quotesRecommended(family);\n\n\t\t\tswitch (primary) {\n\t\t\t\tcase 'always-unless-keyword':\n\t\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-recommended':\n\t\t\t\t\tif (!recommended && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recommended && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-required':\n\t\t\t\t\tif (!required && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (required && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {string} family\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, family, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tword: family,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","export default {\n  cwd: () => \"/\",\n  env: {\n    NO_COLOR: \"true\",\n    FORCE_COLOR: \"false\"\n  },\n  argv: []\n};\n","let tty = require(\"tty\")\n\nlet isColorSupported =\n\t!(\"NO_COLOR\" in process.env || process.argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in process.env ||\n\t\tprocess.argv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(tty.isatty(1) && process.env.TERM !== \"dumb\") ||\n\t\t\"CI\" in process.env)\n\nlet formatter =\n\t(open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input\n\t\tlet index = string.indexOf(close, open.length)\n\t\treturn ~index\n\t\t\t? open + replaceClose(string, close, replace, index) + close\n\t\t\t: open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet start = string.substring(0, index) + replace\n\tlet end = string.substring(index + close.length)\n\tlet nextIndex = end.indexOf(close)\n\treturn ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end\n}\n\nlet createColors = (enabled = isColorSupported) => ({\n\tisColorSupported: enabled,\n\treset: enabled ? s => `\\x1b[0m${s}\\x1b[0m` : String,\n\tbold: enabled ? formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\") : String,\n\tdim: enabled ? formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\") : String,\n\titalic: enabled ? formatter(\"\\x1b[3m\", \"\\x1b[23m\") : String,\n\tunderline: enabled ? formatter(\"\\x1b[4m\", \"\\x1b[24m\") : String,\n\tinverse: enabled ? formatter(\"\\x1b[7m\", \"\\x1b[27m\") : String,\n\thidden: enabled ? formatter(\"\\x1b[8m\", \"\\x1b[28m\") : String,\n\tstrikethrough: enabled ? formatter(\"\\x1b[9m\", \"\\x1b[29m\") : String,\n\tblack: enabled ? formatter(\"\\x1b[30m\", \"\\x1b[39m\") : String,\n\tred: enabled ? formatter(\"\\x1b[31m\", \"\\x1b[39m\") : String,\n\tgreen: enabled ? formatter(\"\\x1b[32m\", \"\\x1b[39m\") : String,\n\tyellow: enabled ? formatter(\"\\x1b[33m\", \"\\x1b[39m\") : String,\n\tblue: enabled ? formatter(\"\\x1b[34m\", \"\\x1b[39m\") : String,\n\tmagenta: enabled ? formatter(\"\\x1b[35m\", \"\\x1b[39m\") : String,\n\tcyan: enabled ? formatter(\"\\x1b[36m\", \"\\x1b[39m\") : String,\n\twhite: enabled ? formatter(\"\\x1b[37m\", \"\\x1b[39m\") : String,\n\tgray: enabled ? formatter(\"\\x1b[90m\", \"\\x1b[39m\") : String,\n\tbgBlack: enabled ? formatter(\"\\x1b[40m\", \"\\x1b[49m\") : String,\n\tbgRed: enabled ? formatter(\"\\x1b[41m\", \"\\x1b[49m\") : String,\n\tbgGreen: enabled ? formatter(\"\\x1b[42m\", \"\\x1b[49m\") : String,\n\tbgYellow: enabled ? formatter(\"\\x1b[43m\", \"\\x1b[49m\") : String,\n\tbgBlue: enabled ? formatter(\"\\x1b[44m\", \"\\x1b[49m\") : String,\n\tbgMagenta: enabled ? formatter(\"\\x1b[45m\", \"\\x1b[49m\") : String,\n\tbgCyan: enabled ? formatter(\"\\x1b[46m\", \"\\x1b[49m\") : String,\n\tbgWhite: enabled ? formatter(\"\\x1b[47m\", \"\\x1b[49m\") : String,\n})\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n","'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput(dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': pico.cyan,\n  'at-word': pico.cyan,\n  'comment': pico.gray,\n  'string': pico.green,\n  'class': pico.yellow,\n  'hash': pico.magenta,\n  'call': pico.cyan,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n","'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n","'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","function noop() {\n  return noop;\n}\nnoop.default = noop.cosmiconfig = noop.catch = noop;\nexport default noop;\n\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            let fromUrl = this.usesFileUrls\n              ? this.toFileUrl(from)\n              : this.toUrl(this.path(from))\n            this.map.setSourceContent(fromUrl, node.source.input.css)\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  toFileUrl(path) {\n    if (pathToFileURL) {\n      return pathToFileURL(path).toString()\n    } else {\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n    }\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n","'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n","'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n","'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n","'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n","'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.19'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n","'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst { systemFontKeywords, fontFamilyKeywords } = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing generic font family',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-no-missing-generic-family-keyword',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && fontFamilyKeywords.has(node.value.toLowerCase());\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst isLastFontFamilyVariable = (value) => {\n\tconst lastValue = postcss.list.comma(value).pop();\n\n\treturn lastValue != null && (isVariable(lastValue) || !isStandardSyntaxValue(lastValue));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilies: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\t// Ignore @font-face\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl.prop === 'font' && systemFontKeywords.has(decl.value.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isLastFontFamilyVariable(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some((node) => isFamilyNameKeyword(node))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tfontFamilies.some((node) =>\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFontFamilies', node.value),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst index = valueIndex + lastFontFamily.sourceIndex;\n\t\t\tconst endIndex = valueIndex + lastFontFamily.sourceEndIndex;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'custom-property-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before custom property',\n\trejected: 'Unexpected empty line before custom property',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-custom-property'],\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-single-line-block'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tparent != null &&\n\t\t\t\t(isAtRule(parent) || isRule(parent)) &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-custom-property') &&\n\t\t\t\t\tisAfterCustomProperty(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction isAfterCustomProperty(decl) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(decl);\n\n\treturn prevNode != null && isDeclaration(prevNode) && isCustomProperty(prevNode.prop);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-calc-no-unspaced-operator';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\" operator`,\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\" operator`,\n\texpectedOperatorBeforeSign: (operator) => `Expected an operator before sign \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-calc-no-unspaced-operator',\n\tfixable: true,\n};\n\nconst OPERATORS = new Set(['+', '-']);\nconst OPERATOR_REGEX = /[+-]/;\nconst ALL_OPERATORS = new Set([...OPERATORS, '*', '/']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction complain(message, node, index, operator) {\n\t\t\tconst endIndex = index + operator.length;\n\n\t\t\treport({ message, node, index, endIndex, result, ruleName });\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} operatorNode\n\t\t\t * @param {import('postcss-value-parser').Node} currentNode\n\t\t\t * @param {boolean} isBeforeOp\n\t\t\t */\n\t\t\tfunction checkAroundOperator(operatorNode, currentNode, isBeforeOp) {\n\t\t\t\tconst operator = operatorNode.value;\n\t\t\t\tconst operatorSourceIndex = operatorNode.sourceIndex;\n\n\t\t\t\tif (currentNode && !isSingleSpace(currentNode)) {\n\t\t\t\t\tif (currentNode.type === 'word') {\n\t\t\t\t\t\tif (isBeforeOp) {\n\t\t\t\t\t\t\tconst lastChar = currentNode.value.slice(-1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${currentNode.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\t\toperatorSourceIndex,\n\t\t\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst firstChar = currentNode.value.slice(0, 1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${firstChar} ${currentNode.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(messages.expectedAfter(operator), decl, operatorSourceIndex, operator);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tisBeforeOp ? messages.expectedBefore(operator) : messages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + operatorSourceIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'space') {\n\t\t\t\t\t\tconst indexOfFirstNewLine = currentNode.value.search(/(\\n|\\r\\n)/);\n\n\t\t\t\t\t\tif (indexOfFirstNewLine === 0) return;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value =\n\t\t\t\t\t\t\t\tindexOfFirstNewLine === -1 ? ' ' : currentNode.value.slice(indexOfFirstNewLine);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'function') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInFirstNode(nodes) {\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tassert(firstNode);\n\n\t\t\t\tif (firstNode.type !== 'word') return false;\n\n\t\t\t\tif (!isStandardSyntaxValue(firstNode.value)) return false;\n\n\t\t\t\tconst operatorIndex = firstNode.value.search(OPERATOR_REGEX);\n\t\t\t\tconst operator = firstNode.value.slice(operatorIndex, operatorIndex + 1);\n\n\t\t\t\tif (operatorIndex <= 0) return false;\n\n\t\t\t\tconst charBefore = firstNode.value.charAt(operatorIndex - 1);\n\t\t\t\tconst charAfter = firstNode.value.charAt(operatorIndex + 1);\n\n\t\t\t\tif (charBefore && charBefore !== ' ' && charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex + 1, ' ');\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charBefore && charBefore !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInLastNode(nodes) {\n\t\t\t\tif (nodes.length === 1) return false;\n\n\t\t\t\tconst lastNode = nodes[nodes.length - 1];\n\n\t\t\t\tassert(lastNode);\n\n\t\t\t\tif (lastNode.type !== 'word') return false;\n\n\t\t\t\tconst operatorIndex = lastNode.value.search(OPERATOR_REGEX);\n\n\t\t\t\tif (operatorIndex === -1) return false;\n\n\t\t\t\tif (lastNode.value.charAt(operatorIndex - 1) === ' ') return false;\n\n\t\t\t\t// E.g. \"10px * -2\" when the last node is \"-2\"\n\t\t\t\tif (\n\t\t\t\t\tisOperator(nodes[nodes.length - 3], ALL_OPERATORS) &&\n\t\t\t\t\tisSingleSpace(nodes[nodes.length - 2])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedsFix = true;\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex + 1, ' ').trim();\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex, ' ').trim();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst operator = lastNode.value.charAt(operatorIndex);\n\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\tdecl,\n\t\t\t\t\tvalueIndex + lastNode.sourceIndex + operatorIndex,\n\t\t\t\t\toperator,\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkWords(nodes) {\n\t\t\t\tif (checkForOperatorInFirstNode(nodes) || checkForOperatorInLastNode(nodes)) return;\n\n\t\t\t\tfor (const [index, node] of nodes.entries()) {\n\t\t\t\t\tconst lastChar = node.value.slice(-1);\n\t\t\t\t\tconst firstChar = node.value.slice(0, 1);\n\n\t\t\t\t\tif (node.type === 'word') {\n\t\t\t\t\t\tif (index === 0 && OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${node.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedBefore(lastChar), decl, node.sourceIndex, lastChar);\n\t\t\t\t\t\t} else if (index === nodes.length && OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${firstChar} ${node.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(firstChar),\n\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\tnode.sourceIndex,\n\t\t\t\t\t\t\t\tfirstChar,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || node.value.toLowerCase() !== 'calc') return;\n\n\t\t\t\tconst { nodes } = node;\n\t\t\t\tlet foundOperatorNode = false;\n\n\t\t\t\tfor (const [nodeIndex, currNode] of nodes.entries()) {\n\t\t\t\t\tif (!isOperator(currNode)) continue;\n\n\t\t\t\t\tfoundOperatorNode = true;\n\n\t\t\t\t\tconst nodeBefore = nodes[nodeIndex - 1];\n\t\t\t\t\tconst nodeAfter = nodes[nodeIndex + 1];\n\n\t\t\t\t\tif (isSingleSpace(nodeBefore) && isSingleSpace(nodeAfter)) continue;\n\n\t\t\t\t\tif (nodeAfter && checkAroundOperator(currNode, nodeAfter, false)) continue;\n\n\t\t\t\t\tnodeBefore && checkAroundOperator(currNode, nodeBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (!foundOperatorNode) {\n\t\t\t\t\tcheckWords(nodes);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} str\n * @param {number} index\n * @param {string} char\n */\nfunction insertCharAtIndex(str, index, char) {\n\treturn str.slice(0, index) + char + str.slice(index, str.length);\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {node is import('postcss-value-parser').SpaceNode & { value: ' ' } }\n */\nfunction isSingleSpace(node) {\n\treturn node != null && node.type === 'space' && node.value === ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @param {Set<string>} [operators]\n * @returns {node is import('postcss-value-parser').WordNode}\n */\nfunction isOperator(node, operators = OPERATORS) {\n\treturn node != null && node.type === 'word' && operators.has(node.value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fs = require('fs');\nconst valueParser = require('postcss-value-parser');\nconst functionsListPath = require('css-functions-list');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isCustomFunction = require('../../utils/isCustomFunction');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected unknown function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst functionsList = JSON.parse(fs.readFileSync(functionsListPath.toString(), 'utf8'));\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\tconst name = node.value;\n\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomFunction(name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (functionsList.includes(name.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: name,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is custom / user-defined\n * https://github.com/w3c/css-houdini-drafts/issues/1007\n * @param {string} func\n * @returns {boolean}\n */\nmodule.exports = function isCustomFunction(func) {\n\treturn func.startsWith('--');\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \":\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \":\" with a multi-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the raw prop, and only the prop\n\t\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst indexToCheck = /^[^\\S\\r\\n]*\\/\\*/.test(propPlusColon.slice(i + 1))\n\t\t\t\t\t? propPlusColon.indexOf('*/', i) + 1\n\t\t\t\t\t: i;\n\n\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\tsource: propPlusColon,\n\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\t\tconst betweenStart = declarationValueIndex(decl) - between.length;\n\t\t\t\t\t\t\tconst sliceIndex = indexToCheck - betweenStart + 1;\n\t\t\t\t\t\t\tconst betweenBefore = between.slice(0, sliceIndex);\n\t\t\t\t\t\t\tconst betweenAfter = between.slice(sliceIndex);\n\n\t\t\t\t\t\t\tdecl.raws.between = /^\\s*\\n/.test(betweenAfter)\n\t\t\t\t\t\t\t\t? betweenBefore + betweenAfter.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t\t: betweenBefore + context.newline + betweenAfter;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-max-empty-lines',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction placeIndexOnValueStart(decl) {\n\tif (decl.raws.between == null) throw new Error('`between` must be present');\n\n\treturn decl.prop.length + decl.raws.between.length - 1;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst stringValue = getDeclarationValue(decl);\n\t\t\t/** @type {Array<[string, string]>} */\n\t\t\tconst splittedValue = [];\n\t\t\tlet sourceIndexStart = 0;\n\n\t\t\tvalueParser(stringValue).walk((node) => {\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'function' /* ignore non functions */ ||\n\t\t\t\t\tnode.value.length === 0 /* ignore sass lists */\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stringifiedNode = valueParser.stringify(node);\n\n\t\t\t\tif (\n\t\t\t\t\t!violatedLFNewLinesRegex.test(stringifiedNode) &&\n\t\t\t\t\t!violatedCRLFNewLinesRegex.test(stringifiedNode)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst newNodeString = stringifiedNode\n\t\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\t\tsplittedValue.push([\n\t\t\t\t\t\tstringValue.slice(sourceIndexStart, node.sourceIndex),\n\t\t\t\t\t\tnewNodeString,\n\t\t\t\t\t]);\n\t\t\t\t\tsourceIndexStart = node.sourceIndex + stringifiedNode.length;\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: placeIndexOnValueStart(decl) + node.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (context.fix && splittedValue.length > 0) {\n\t\t\t\tconst updatedValue =\n\t\t\t\t\tsplittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') +\n\t\t\t\t\tstringValue.slice(sourceIndexStart);\n\n\t\t\t\tsetDeclarationValue(decl, updatedValue);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict'\nmodule.exports = balanced\nfunction balanced (a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str)\n  if (b instanceof RegExp) b = maybeMatch(b, str)\n\n  const r = range(a, b, str)\n\n  return (\n    r && {\n      start: r[0],\n      end: r[1],\n      pre: str.slice(0, r[0]),\n      body: str.slice(r[0] + a.length, r[1]),\n      post: str.slice(r[1] + b.length)\n    }\n  )\n}\n\nfunction maybeMatch (reg, str) {\n  const m = str.match(reg)\n  return m ? m[0] : null\n}\n\nbalanced.range = range\nfunction range (a, b, str) {\n  let begs, beg, left, right, result\n  let ai = str.indexOf(a)\n  let bi = str.indexOf(b, ai + 1)\n  let i = ai\n\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi]\n    }\n    begs = []\n    left = str.length\n\n    while (i >= 0 && !result) {\n      if (i === ai) {\n        begs.push(i)\n        ai = str.indexOf(a, i + 1)\n      } else if (begs.length === 1) {\n        result = [begs.pop(), bi]\n      } else {\n        beg = begs.pop()\n        if (beg < left) {\n          left = beg\n          right = bi\n        }\n\n        bi = str.indexOf(b, i + 1)\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi\n    }\n\n    if (begs.length) {\n      result = [left, right]\n    }\n  }\n\n  return result\n}\n","'use strict';\n\nconst balancedMatch = require('balanced-match');\nconst valueParser = require('postcss-value-parser');\n\nconst { assert, isString, isRegExp } = require('./validateTypes');\n\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string | RegExp} functionName\n * @param {(expression: string, expressionIndex: number) => void} callback\n * @returns {void}\n */\nmodule.exports = function functionArgumentsSearch(source, functionName, callback) {\n\tvalueParser(source).walk((node) => {\n\t\tif (node.type !== 'function') return;\n\n\t\tconst { value } = node;\n\n\t\tif (isString(functionName) && value !== functionName) return;\n\n\t\tif (isRegExp(functionName) && !functionName.test(node.value)) return;\n\n\t\tconst parensMatch = balancedMatch('(', ')', source.slice(node.sourceIndex));\n\n\t\tassert(parensMatch);\n\n\t\tconst expression = parensMatch.body;\n\t\tconst parenLength = 1; // == '('\n\t\tconst expressionIndex = node.sourceIndex + value.length + parenLength;\n\n\t\tcallback(expression, expressionIndex);\n\t});\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected nonstandard direction',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-linear-gradient-no-nonstandard-direction',\n};\n\n/**\n * @param {string} source\n * @param {boolean} withToPrefix\n */\nfunction isStandardDirection(source, withToPrefix) {\n\tconst regexp = withToPrefix\n\t\t? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/\n\t\t: /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n\n\tconst matches = source.match(regexp);\n\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\tif (matches.length === 2) {\n\t\treturn true;\n\t}\n\n\t// Cannot repeat side-or-corner, e.g. \"to top top\"\n\tif (matches.length === 3 && matches[1] !== matches[2]) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunctionArgumentsSearch(\n\t\t\t\t\tvalueParser.stringify(valueNode).toLowerCase(),\n\t\t\t\t\t/^(-webkit-|-moz-|-o-|-ms-)?linear-gradient$/i,\n\t\t\t\t\t(expression, expressionIndex) => {\n\t\t\t\t\t\tconst args = expression.split(',');\n\t\t\t\t\t\tconst firstArg = (args[0] || '').trim();\n\n\t\t\t\t\t\t// If the first arg is not standard, return early\n\t\t\t\t\t\tif (!isStandardSyntaxValue(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first character is a number, we can assume the user intends an angle\n\t\t\t\t\t\tif (/[\\d.]/.test(firstArg.charAt(0))) {\n\t\t\t\t\t\t\tif (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The first argument may not be a direction: it may be an angle,\n\t\t\t\t\t\t// or a color stop (in which case user gets default direction, \"to bottom\")\n\t\t\t\t\t\t// cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\t\t\t\t\t\tif (!/left|right|top|bottom/.test(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst withToPrefix = !vendor.prefix(valueNode.value);\n\n\t\t\t\t\t\tif (!isStandardDirection(firstArg, withToPrefix)) {\n\t\t\t\t\t\t\tcomplain();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfunction complain() {\n\t\t\t\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex;\n\t\t\t\t\t\t\tconst endIndex = index + (args[0] || '').trimEnd().length;\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { URL } = require('url');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\nmodule.exports = function getSchemeFromUrl(urlString) {\n\tlet protocol = null;\n\n\ttry {\n\t\tprotocol = new URL(urlString).protocol;\n\t} catch {\n\t\treturn null;\n\t}\n\n\tif (protocol === null || typeof protocol === 'undefined') {\n\t\treturn null;\n\t}\n\n\tconst scheme = protocol.slice(0, -1); // strip trailing `:`\n\n\t// The URL spec does not require a scheme to be followed by `//`, but checking\n\t// for it allows this rule to differentiate <scheme>:<hostname> urls from\n\t// <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\tconst slashIndex = protocol.length;\n\tconst expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n\tconst isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n\tif (isSchemeLessUrl) {\n\t\treturn null;\n\t}\n\n\treturn scheme;\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxUrl(url) {\n\tif (url.length === 0) {\n\t\treturn true;\n\t}\n\n\t// Sass interpolation works anywhere\n\tif (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n\t\treturn false;\n\t}\n\n\t// Inside `'` and `\"` work only LESS interpolation\n\tif ((url.startsWith(`'`) && url.endsWith(`'`)) || (url.startsWith(`\"`) && url.endsWith(`\"`))) {\n\t\tif (hasLessInterpolation(url)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Less variable works only at the beginning\n\t// Check is less variable, allow use '@url/some/path'\n\t// https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\tif (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n\t\treturn false;\n\t}\n\n\t// In url without quotes scss variable can be everywhere\n\t// But in this case it is allowed to use only specific characters\n\t// Also forbidden \"/\" at the end of url\n\tif (url.includes('$') && /^[$\\s\\w+\\-,./*'\"]+$/.test(url) && !url.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-scheme-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (functionName) => `Expected quotes around \"${functionName}\" function argument`,\n\trejected: (functionName) => `Unexpected quotes around \"${functionName}\" function argument`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-quotes',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['empty'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(checkAtRuleParams);\n\t\troot.walkDecls(checkDeclParams);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkDeclParams(decl) {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, decl, index, 'url');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleParams(atRule) {\n\t\t\tconst atRuleParamsLowerCase = atRule.params.toLowerCase();\n\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} args\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} functionName\n\t\t */\n\t\tfunction checkArgs(args, node, index, functionName) {\n\t\t\tlet shouldHasQuotes = primary === 'always';\n\n\t\t\tconst leftTrimmedArgs = args.trimStart();\n\n\t\t\tif (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = index + args.length - leftTrimmedArgs.length;\n\t\t\tconst complaintEndIndex = index + args.length;\n\t\t\tconst hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n\n\t\t\tconst trimmedArg = args.trim();\n\t\t\tconst isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n\t\t\tif (optionsMatches(secondaryOptions, 'except', 'empty') && isEmptyArgument) {\n\t\t\t\tshouldHasQuotes = !shouldHasQuotes;\n\t\t\t}\n\n\t\t\tif (shouldHasQuotes) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.expected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t} else {\n\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.rejected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-no-scheme-relative';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected scheme-relative url',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-no-scheme-relative',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst url = args.trim().replace(/^['\"]+|['\"]+$/g, '');\n\n\t\t\t\tif (!isStandardSyntaxUrl(url) || !url.startsWith('//')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-newline-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected newline after \"(\"',\n\texpectedClosing: 'Expected newline before \")\"',\n\texpectedOpeningMultiLine: 'Expected newline after \"(\" in a multi-line function',\n\trejectedOpeningMultiLine: 'Unexpected whitespace after \"(\" in a multi-line function',\n\texpectedClosingMultiLine: 'Expected newline before \")\" in a multi-line function',\n\trejectedClosingMultiLine: 'Unexpected whitespace before \")\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-parentheses-newline-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isMultiLine = !isSingleLineString(functionString);\n\t\t\t\tconst containsNewline = (/** @type {string} */ str) => str.includes('\\n');\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\t\t\t\tconst checkBefore = getCheckBefore(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkBefore !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\t\t\t\tconst checkAfter = getCheckAfter(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkAfter !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-value-parser').FunctionNode} FunctionNode */\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckBefore(valueNode) {\n\tlet before = valueNode.before;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tbefore += node.value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\treturn before;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckAfter(valueNode) {\n\tlet after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tafter = node.value + after;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tafter += valueNode.after;\n\n\treturn after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixBeforeForAlways(valueNode, newline) {\n\tlet target;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\ttarget = node;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tif (target) {\n\t\ttarget.value = newline + target.value;\n\t} else {\n\t\tvalueNode.before = newline + valueNode.before;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixBeforeForNever(valueNode) {\n\tvalueNode.before = '';\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixAfterForAlways(valueNode, newline) {\n\tvalueNode.after = newline + valueNode.after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixAfterForNever(valueNode) {\n\tvalueNode.after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-whitespace-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected whitespace after \")\"',\n\trejected: 'Unexpected whitespace after \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-whitespace-after',\n\tfixable: true,\n};\n\nconst ACCEPTABLE_AFTER_CLOSING_PAREN = new Set([')', ',', '}', ':', '/', undefined]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string} value\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction check(node, value, nodeIndex, fix) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: value,\n\t\t\t\t\ttarget: ')',\n\t\t\t\t\tfunctionArguments: 'only',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tcheckClosingParen(value, match.startIndex + 1, node, nodeIndex, fix);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction checkClosingParen(source, index, node, nodeIndex, fix) {\n\t\t\tconst nextChar = source.charAt(index);\n\n\t\t\tif (!nextChar) return;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\t// Allow for the next character to be a single empty space,\n\t\t\t\t// another closing parenthesis, a comma, or the end of the value\n\t\t\t\tif (nextChar === ' ') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (nextChar === '\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (source.slice(index, index + 2) === '\\r\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ACCEPTABLE_AFTER_CLOSING_PAREN.has(nextChar)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t} else if (primary === 'never' && isWhitespace(nextChar)) {\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} value\n\t\t */\n\t\tfunction createFixer(value) {\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\t\t\t/** @type {(index: number) => void} */\n\t\t\tlet applyFix;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\tfixed += value.slice(lastIndex, index) + ' ';\n\t\t\t\t\tlastIndex = index;\n\t\t\t\t};\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\tlet whitespaceEndIndex = index + 1;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\twhitespaceEndIndex < value.length &&\n\t\t\t\t\t\tisWhitespace(value.charAt(whitespaceEndIndex))\n\t\t\t\t\t) {\n\t\t\t\t\t\twhitespaceEndIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tfixed += value.slice(lastIndex, index);\n\t\t\t\t\tlastIndex = whitespaceEndIndex;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tapplyFix,\n\t\t\t\tget hasFixed() {\n\t\t\t\t\treturn Boolean(lastIndex);\n\t\t\t\t},\n\t\t\t\tget fixed() {\n\t\t\t\t\treturn fixed + value.slice(lastIndex);\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst param = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst fixer = context.fix && createFixer(param);\n\n\t\t\tcheck(atRule, param, atRuleParamIndex(atRule), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = fixer.fixed;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = fixer.fixed;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\t\t\tconst fixer = context.fix && createFixer(value);\n\n\t\t\tcheck(decl, value, declarationValueIndex(decl), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, fixer.fixed);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-scheme-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst camelCaseFunctions = new Set([\n\t'translateX',\n\t'translateY',\n\t'translateZ',\n\t'scaleX',\n\t'scaleY',\n\t'scaleZ',\n\t'rotateX',\n\t'rotateY',\n\t'rotateZ',\n\t'skewX',\n\t'skewY',\n]);\n\nconst mathFunctions = new Set(['calc', 'clamp', 'max', 'min']);\n\nmodule.exports = {\n\tcamelCaseFunctions,\n\tmathFunctions,\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst { camelCaseFunctions } = require('../../reference/functions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-name-case',\n\tfixable: true,\n};\n\nconst mapLowercaseFunctionNamesToCamelCase = new Map();\n\nfor (const func of camelCaseFunctions) {\n\tmapLowercaseFunctionNamesToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needFix = false;\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || !isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionName = node.value;\n\t\t\t\tconst functionNameLowerCase = functionName.toLowerCase();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', functionName)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet expectedFunctionName = null;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseFunctionNamesToCamelCase.has(functionNameLowerCase)\n\t\t\t\t) {\n\t\t\t\t\texpectedFunctionName = mapLowercaseFunctionNamesToCamelCase.get(functionNameLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedFunctionName = functionNameLowerCase;\n\t\t\t\t} else {\n\t\t\t\t\texpectedFunctionName = functionName.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (functionName === expectedFunctionName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedFunctionName;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(functionName, expectedFunctionName),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tsetDeclarationValue(decl, parsed.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n\texpectedOpeningSingleLine: 'Expected single space after \"(\" in a single-line function',\n\trejectedOpeningSingleLine: 'Unexpected whitespace after \"(\" in a single-line function',\n\texpectedClosingSingleLine: 'Expected single space before \")\" in a single-line function',\n\trejectedClosingSingleLine: 'Unexpected whitespace before \")\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore function without parameters\n\t\t\t\tif (!valueNode.nodes.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isSingleLine = isSingleLineString(functionString);\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\n\t\t\t\tif (primary === 'always' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\n\t\t\t\tif (primary === 'always' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isCustomProperty = require('./isCustomProperty');\nconst isStandardSyntaxDeclaration = require('./isStandardSyntaxDeclaration');\nconst { isDeclaration } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function isAfterStandardPropertyDeclaration(node) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(node);\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tisDeclaration(prevNode) &&\n\t\tisStandardSyntaxDeclaration(prevNode) &&\n\t\t!isCustomProperty(prevNode.prop || '')\n\t);\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isAfterStandardPropertyDeclaration = require('../../utils/isAfterStandardPropertyDeclaration');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isRule, isRoot } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before declaration',\n\trejected: 'Unexpected empty line before declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-declaration'],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'after-declaration',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-single-line-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAtRule(parent) && !isRule(parent) && !isRoot(parent)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a declaration precedes it\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'after-declaration') &&\n\t\t\t\tisAfterStandardPropertyDeclaration(decl)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-declaration') &&\n\t\t\t\t\tisAfterStandardPropertyDeclaration(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: decl, result, ruleName });\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {AtRule} atRule\n * @param {string} params\n * @returns {AtRule} The atRulearation that was passed in.\n */\nmodule.exports = function setAtRuleParams(atRule, params) {\n\tconst raws = atRule.raws;\n\n\tif (raws.params) {\n\t\traws.params.raw = params;\n\t} else {\n\t\tatRule.params = params;\n\t}\n\n\treturn atRule;\n};\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string}\n */\nmodule.exports = function getAtRuleParams(atRule) {\n\tconst raws = atRule.raws;\n\n\treturn (raws.params && raws.params.raw) || atRule.params;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst ruleName = 'import-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/import-notation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['string', 'url'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, checkAtRuleImportParams);\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleImportParams(atRule) {\n\t\t\tconst params = getAtRuleParams(atRule);\n\t\t\tconst parsed = valueParser(params);\n\n\t\t\tfor (const node of parsed.nodes) {\n\t\t\t\tconst start = atRuleParamIndex(atRule);\n\t\t\t\tconst end = start + node.sourceEndIndex;\n\n\t\t\t\tif (primary === 'string') {\n\t\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\tconst urlFunctionFull = valueParser.stringify(node);\n\t\t\t\t\t\tconst urlFunctionArguments = valueParser.stringify(node.nodes);\n\n\t\t\t\t\t\tconst quotedUrlFunctionFirstArgument =\n\t\t\t\t\t\t\tnode.nodes[0] && node.nodes[0].type === 'word'\n\t\t\t\t\t\t\t\t? `\"${urlFunctionArguments}\"`\n\t\t\t\t\t\t\t\t: urlFunctionArguments;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${quotedUrlFunctionFirstArgument}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expected(urlFunctionFull, quotedUrlFunctionFirstArgument),\n\t\t\t\t\t\t\tatRule,\n\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'url') {\n\t\t\t\t\tif (node.type === 'space') return;\n\n\t\t\t\t\tif (node.type === 'word' || node.type === 'string') {\n\t\t\t\t\t\tconst path = valueParser.stringify(node);\n\n\t\t\t\t\t\tconst urlFunctionFull = `url(${path})`;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${urlFunctionFull}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst quotedNodeValue =\n\t\t\t\t\t\t\tnode.type === 'word' ? `\"${node.value}\"` : `${node.quote}${node.value}${node.quote}`;\n\n\t\t\t\t\t\tcomplain(messages.expected(quotedNodeValue, urlFunctionFull), atRule, start, end);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a selector is standard\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxSelector(selector) {\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(selector)) {\n\t\treturn false;\n\t}\n\n\t// SCSS placeholder selectors\n\tif (selector.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// SCSS nested properties\n\tif (selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\t// Less :extend()\n\tif (/:extend(?:\\(.*?\\))?/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less mixin with resolved nested selectors (e.g. .foo().bar or .foo(@a, @b)[bar])\n\tif (/\\.[\\w-]+\\(.*\\).+/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less non-outputting mixin definition (e.g. .mixin() {})\n\tif (selector.endsWith(')') && !selector.includes(':')) {\n\t\treturn false;\n\t}\n\n\t// Less Parametric mixins (e.g. .mixin(@variable: x) {})\n\tif (/\\(@.*\\)$/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// ERB template tags\n\tif (selector.includes('<%') || selector.includes('%>')) {\n\t\treturn false;\n\t}\n\n\t//  SCSS and Less comments\n\tif (selector.includes('//')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframe-block-no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected duplicate \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-block-no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectors = new Set();\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\tconst ruleSelectors = keyframeRule.selectors;\n\n\t\t\t\truleSelectors.forEach((selector) => {\n\t\t\t\t\tif (!isStandardSyntaxSelector(selector)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tconst isDuplicate = selectors.has(normalizedSelector);\n\n\t\t\t\t\tif (isDuplicate) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectors.add(normalizedSelector);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isMathFunction = require('../../utils/isMathFunction');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst { lengthUnits } = require('../../reference/units');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'length-zero-no-unit';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected unit',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/length-zero-no-unit',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-properties'],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tlet needsFix;\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode) {\n\t\t\tconst { value, sourceIndex } = valueNode;\n\n\t\t\tif (isMathFunction(valueNode)) return false;\n\n\t\t\tif (isFunction(valueNode) && optionsMatches(secondaryOptions, 'ignoreFunctions', value))\n\t\t\t\treturn false;\n\n\t\t\tif (!isWord(valueNode)) return;\n\n\t\t\tconst numberUnit = valueParser.unit(value);\n\n\t\t\tif (numberUnit === false) return;\n\n\t\t\tconst { number, unit } = numberUnit;\n\n\t\t\tif (unit === '') return;\n\n\t\t\tif (!isLength(unit)) return;\n\n\t\t\tif (isFraction(unit)) return;\n\n\t\t\tif (!isZero(number)) return;\n\n\t\t\tif (context.fix) {\n\t\t\t\tlet regularNumber = number;\n\n\t\t\t\tif (regularNumber.startsWith('.')) {\n\t\t\t\t\tregularNumber = number.slice(1);\n\t\t\t\t}\n\n\t\t\t\tvalueNode.value = regularNumber;\n\t\t\t\tneedsFix = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = nodeIndex + sourceIndex + number.length;\n\t\t\tconst endIndex = index + unit.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} node\n\t\t */\n\t\tfunction checkAtRule(node) {\n\t\t\tif (!isStandardSyntaxAtRule(node)) return;\n\n\t\t\tneedsFix = false;\n\n\t\t\tconst index = atRuleParamIndex(node);\n\t\t\tconst parsedValue = valueParser(getAtRuleParams(node));\n\n\t\t\tparsedValue.walk((valueNode) => check(node, index, valueNode));\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetAtRuleParams(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} node\n\t\t */\n\t\tfunction checkDecl(node) {\n\t\t\tneedsFix = false;\n\n\t\t\tconst { prop } = node;\n\n\t\t\tif (isLineHeight(prop)) return;\n\n\t\t\tif (isFlex(prop)) return;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'custom-properties') && isCustomProperty(prop))\n\t\t\t\treturn;\n\n\t\t\tconst index = declarationValueIndex(node);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(node));\n\n\t\t\tparsedValue.walk((valueNode, valueNodeIndex, valueNodes) => {\n\t\t\t\tif (isLineHeightValue(node, valueNodes, valueNodeIndex)) return;\n\n\t\t\t\treturn check(node, index, valueNode);\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules(checkAtRule);\n\t\troot.walkDecls(checkDecl);\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {import('postcss-value-parser').Node[]} nodes\n * @param {number} index\n */\nfunction isLineHeightValue({ prop }, nodes, index) {\n\tconst lastNode = nodes[index - 1];\n\n\treturn (\n\t\tprop.toLowerCase() === 'font' && lastNode && lastNode.type === 'div' && lastNode.value === '/'\n\t);\n}\n\n/**\n * @param {string} prop\n */\nfunction isLineHeight(prop) {\n\treturn prop.toLowerCase() === 'line-height';\n}\n\n/**\n * @param {string} prop\n */\nfunction isFlex(prop) {\n\treturn prop.toLowerCase() === 'flex';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isWord({ type }) {\n\treturn type === 'word';\n}\n\n/**\n * @param {string} unit\n */\nfunction isLength(unit) {\n\treturn lengthUnits.has(unit.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isFunction({ type }) {\n\treturn type === 'function';\n}\n\n/**\n * @param {string} unit\n */\nfunction isFraction(unit) {\n\treturn unit.toLowerCase() === 'fr';\n}\n\n/**\n * @param {string} number\n */\nfunction isZero(number) {\n\treturn Number.parseFloat(number) === 0;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { mathFunctions } = require('../reference/functions');\n\n/**\n * Check whether a node is math function\n *\n * @param {import('postcss-value-parser').Node} node postcss-value-parser node\n * @return {boolean} If `true`, the node is math function\n */\nmodule.exports = function isMathFunction(node) {\n\treturn node.type === 'function' && mathFunctions.has(node.value.toLowerCase());\n};\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tatRuleKeyframes.walkDecls((decl) => {\n\t\t\t\tif (!decl.important) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\t\tassert(pos);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: pos.index,\n\t\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'hue-degree-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/hue-degree-notation',\n\tfixable: true,\n};\n\nconst HUE_FIRST_ARG_FUNCS = ['hsl', 'hsla', 'hwb'];\nconst HUE_THIRD_ARG_FUNCS = ['lch'];\nconst HUE_FUNCS = new Set([...HUE_FIRST_ARG_FUNCS, ...HUE_THIRD_ARG_FUNCS]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['angle', 'number'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\tif (!HUE_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\tconst hue = findHue(node);\n\n\t\t\t\tif (!hue) return;\n\n\t\t\t\tconst { value } = hue;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isDegree(value) && !isNumber(value)) return;\n\n\t\t\t\tif (primary === 'angle' && isDegree(value)) return;\n\n\t\t\t\tif (primary === 'number' && isNumber(value)) return;\n\n\t\t\t\tconst fixed = primary === 'angle' ? asDegree(value) : asNumber(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\thue.value = fixed;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst valueIndex = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: valueIndex + hue.sourceIndex,\n\t\t\t\t\tendIndex: valueIndex + hue.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n */\nfunction asDegree(value) {\n\treturn `${value}deg`;\n}\n\n/**\n * @param {string} value\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tif (dimension) return dimension.number;\n\n\tthrow new TypeError(`The \"${value}\" value must have a unit`);\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction findHue(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\tconst value = node.value.toLowerCase();\n\n\tif (HUE_FIRST_ARG_FUNCS.includes(value)) {\n\t\treturn args[0];\n\t}\n\n\tif (HUE_THIRD_ARG_FUNCS.includes(value)) {\n\t\treturn args[2];\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n */\nfunction isDegree(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit.toLowerCase() === 'deg';\n}\n\n/**\n * @param {string} value\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc;\n\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = getProp;\n\nfunction getProp(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      return undefined;\n    }\n\n    obj = obj[prop];\n  }\n\n  return obj;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = ensureObject;\n\nfunction ensureObject(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      obj[prop] = {};\n    }\n\n    obj = obj[prop];\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = stripComments;\n\nfunction stripComments(str) {\n  var s = \"\";\n  var commentStart = str.indexOf(\"/*\");\n  var lastEnd = 0;\n\n  while (commentStart >= 0) {\n    s = s + str.slice(lastEnd, commentStart);\n    var commentEnd = str.indexOf(\"*/\", commentStart + 2);\n\n    if (commentEnd < 0) {\n      return s;\n    }\n\n    lastEnd = commentEnd + 2;\n    commentStart = str.indexOf(\"/*\", lastEnd);\n  }\n\n  s = s + str.slice(lastEnd);\n  return s;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.stripComments = exports.ensureObject = exports.getProp = exports.unesc = void 0;\n\nvar _unesc = _interopRequireDefault(require(\"./unesc\"));\n\nexports.unesc = _unesc[\"default\"];\n\nvar _getProp = _interopRequireDefault(require(\"./getProp\"));\n\nexports.getProp = _getProp[\"default\"];\n\nvar _ensureObject = _interopRequireDefault(require(\"./ensureObject\"));\n\nexports.ensureObject = _ensureObject[\"default\"];\n\nvar _stripComments = _interopRequireDefault(require(\"./stripComments\"));\n\nexports.stripComments = _stripComments[\"default\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _util = require(\"../util\");\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar cloneNode = function cloneNode(obj, parent) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var value = obj[i];\n    var type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n\n  return cloned;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || '';\n    this.spaces.after = this.spaces.after || '';\n  }\n\n  var _proto = Node.prototype;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  };\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  };\n\n  _proto.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n\n  _proto.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */\n  ;\n\n  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */\n  ;\n\n  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    this.raws[name] = valueEscaped;\n  }\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */\n  ;\n\n  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  }\n  /**\n   *\n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */\n  ;\n\n  _proto.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n\n      if (this.source.end.line < line) {\n        return false;\n      }\n\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return undefined;\n  };\n\n  _proto.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n\n  _proto.valueToString = function valueToString() {\n    return String(this.stringifyProperty(\"value\"));\n  };\n\n  _proto.toString = function toString() {\n    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');\n  };\n\n  _createClass(Node, [{\n    key: \"rawSpaceBefore\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: \"rawSpaceAfter\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports[\"default\"] = Node;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.UNIVERSAL = exports.ATTRIBUTE = exports.CLASS = exports.COMBINATOR = exports.COMMENT = exports.ID = exports.NESTING = exports.PSEUDO = exports.ROOT = exports.SELECTOR = exports.STRING = exports.TAG = void 0;\nvar TAG = 'tag';\nexports.TAG = TAG;\nvar STRING = 'string';\nexports.STRING = STRING;\nvar SELECTOR = 'selector';\nexports.SELECTOR = SELECTOR;\nvar ROOT = 'root';\nexports.ROOT = ROOT;\nvar PSEUDO = 'pseudo';\nexports.PSEUDO = PSEUDO;\nvar NESTING = 'nesting';\nexports.NESTING = NESTING;\nvar ID = 'id';\nexports.ID = ID;\nvar COMMENT = 'comment';\nexports.COMMENT = COMMENT;\nvar COMBINATOR = 'combinator';\nexports.COMBINATOR = COMBINATOR;\nvar CLASS = 'class';\nexports.CLASS = CLASS;\nvar ATTRIBUTE = 'attribute';\nexports.ATTRIBUTE = ATTRIBUTE;\nvar UNIVERSAL = 'universal';\nexports.UNIVERSAL = UNIVERSAL;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar types = _interopRequireWildcard(require(\"./types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n\n  function Container(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n\n    return _this;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.append = function append(selector) {\n    selector.parent = this;\n    this.nodes.push(selector);\n    return this;\n  };\n\n  _proto.prepend = function prepend(selector) {\n    selector.parent = this;\n    this.nodes.unshift(selector);\n    return this;\n  };\n\n  _proto.at = function at(index) {\n    return this.nodes[index];\n  };\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n\n    return this.nodes.indexOf(child);\n  };\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.at(child).parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n      var node = _step.value;\n      node.parent = undefined;\n    }\n\n    this.nodes = [];\n    return this;\n  };\n\n  _proto.empty = function empty() {\n    return this.removeAll();\n  };\n\n  _proto.insertAfter = function insertAfter(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex + 1, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (oldIndex <= index) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.insertBefore = function insertBefore(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index <= oldIndex) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {\n    var found = undefined;\n    this.each(function (node) {\n      if (node.atPosition) {\n        var foundChild = node.atPosition(line, col);\n\n        if (foundChild) {\n          found = foundChild;\n          return false;\n        }\n      } else if (node.isAtPosition(line, col)) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n  /**\n   * Return the most specific node at the line and column number given.\n   * The source location is based on the original parsed location, locations aren't\n   * updated as selector nodes are mutated.\n   * \n   * Note that this location is relative to the location of the first character\n   * of the selector, and not the location of the selector in the overall document\n   * when used in conjunction with postcss.\n   *\n   * If not found, returns undefined.\n   * @param {number} line The line number of the node to find. (1-based index)\n   * @param {number} col  The column number of the node to find. (1-based index)\n   */\n  ;\n\n  _proto.atPosition = function atPosition(line, col) {\n    if (this.isAtPosition(line, col)) {\n      return this._findChildAtPosition(line, col) || this;\n    } else {\n      return undefined;\n    }\n  };\n\n  _proto._inferEndPosition = function _inferEndPosition() {\n    if (this.last && this.last.source && this.last.source.end) {\n      this.source = this.source || {};\n      this.source.end = this.source.end || {};\n      Object.assign(this.source.end, this.last.source.end);\n    }\n  };\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) {\n      this.lastEach = 0;\n    }\n\n    if (!this.indexes) {\n      this.indexes = {};\n    }\n\n    this.lastEach++;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n\n    if (!this.length) {\n      return undefined;\n    }\n\n    var index, result;\n\n    while (this.indexes[id] < this.length) {\n      index = this.indexes[id];\n      result = callback(this.at(index), index);\n\n      if (result === false) {\n        break;\n      }\n\n      this.indexes[id] += 1;\n    }\n\n    delete this.indexes[id];\n\n    if (result === false) {\n      return false;\n    }\n  };\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (node, i) {\n      var result = callback(node, i);\n\n      if (result !== false && node.length) {\n        result = node.walk(callback);\n      }\n\n      if (result === false) {\n        return false;\n      }\n    });\n  };\n\n  _proto.walkAttributes = function walkAttributes(callback) {\n    var _this2 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ATTRIBUTE) {\n        return callback.call(_this2, selector);\n      }\n    });\n  };\n\n  _proto.walkClasses = function walkClasses(callback) {\n    var _this3 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.CLASS) {\n        return callback.call(_this3, selector);\n      }\n    });\n  };\n\n  _proto.walkCombinators = function walkCombinators(callback) {\n    var _this4 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMBINATOR) {\n        return callback.call(_this4, selector);\n      }\n    });\n  };\n\n  _proto.walkComments = function walkComments(callback) {\n    var _this5 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMMENT) {\n        return callback.call(_this5, selector);\n      }\n    });\n  };\n\n  _proto.walkIds = function walkIds(callback) {\n    var _this6 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ID) {\n        return callback.call(_this6, selector);\n      }\n    });\n  };\n\n  _proto.walkNesting = function walkNesting(callback) {\n    var _this7 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.NESTING) {\n        return callback.call(_this7, selector);\n      }\n    });\n  };\n\n  _proto.walkPseudos = function walkPseudos(callback) {\n    var _this8 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.PSEUDO) {\n        return callback.call(_this8, selector);\n      }\n    });\n  };\n\n  _proto.walkTags = function walkTags(callback) {\n    var _this9 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.TAG) {\n        return callback.call(_this9, selector);\n      }\n    });\n  };\n\n  _proto.walkUniversals = function walkUniversals(callback) {\n    var _this10 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.UNIVERSAL) {\n        return callback.call(_this10, selector);\n      }\n    });\n  };\n\n  _proto.split = function split(callback) {\n    var _this11 = this;\n\n    var current = [];\n    return this.reduce(function (memo, node, index) {\n      var split = callback.call(_this11, node);\n      current.push(node);\n\n      if (split) {\n        memo.push(current);\n        current = [];\n      } else if (index === _this11.length - 1) {\n        memo.push(current);\n      }\n\n      return memo;\n    }, []);\n  };\n\n  _proto.map = function map(callback) {\n    return this.nodes.map(callback);\n  };\n\n  _proto.reduce = function reduce(callback, memo) {\n    return this.nodes.reduce(callback, memo);\n  };\n\n  _proto.every = function every(callback) {\n    return this.nodes.every(callback);\n  };\n\n  _proto.some = function some(callback) {\n    return this.nodes.some(callback);\n  };\n\n  _proto.filter = function filter(callback) {\n    return this.nodes.filter(callback);\n  };\n\n  _proto.sort = function sort(callback) {\n    return this.nodes.sort(callback);\n  };\n\n  _proto.toString = function toString() {\n    return this.map(String).join('');\n  };\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      return this.at(0);\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      return this.at(this.length - 1);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.nodes.length;\n    }\n  }]);\n\n  return Container;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Container;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n\n  function Root(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.ROOT;\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.toString = function toString() {\n    var str = this.reduce(function (memo, selector) {\n      memo.push(String(selector));\n      return memo;\n    }, []).join(',');\n    return this.trailingComma ? str + ',' : str;\n  };\n\n  _proto.error = function error(message, options) {\n    if (this._error) {\n      return this._error(message, options);\n    } else {\n      return new Error(message);\n    }\n  };\n\n  _createClass(Root, [{\n    key: \"errorGenerator\",\n    set: function set(handler) {\n      this._error = handler;\n    }\n  }]);\n\n  return Root;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Root;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Selector = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Selector, _Container);\n\n  function Selector(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.SELECTOR;\n    return _this;\n  }\n\n  return Selector;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Selector;\nmodule.exports = exports.default;","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClassName = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ClassName, _Node);\n\n  function ClassName(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.CLASS;\n    _this._constructed = true;\n    return _this;\n  }\n\n  var _proto = ClassName.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '.' + _Node.prototype.valueToString.call(this);\n  };\n\n  _createClass(ClassName, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      if (this._constructed) {\n        var escaped = (0, _cssesc[\"default\"])(v, {\n          isIdentifier: true\n        });\n\n        if (escaped !== v) {\n          (0, _util.ensureObject)(this, \"raws\");\n          this.raws.value = escaped;\n        } else if (this.raws) {\n          delete this.raws.value;\n        }\n      }\n\n      this._value = v;\n    }\n  }]);\n\n  return ClassName;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ClassName;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n\n  function Comment(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMMENT;\n    return _this;\n  }\n\n  return Comment;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Comment;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ID = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ID, _Node);\n\n  function ID(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.ID;\n    return _this;\n  }\n\n  var _proto = ID.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '#' + _Node.prototype.valueToString.call(this);\n  };\n\n  return ID;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ID;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Namespace = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Namespace, _Node);\n\n  function Namespace() {\n    return _Node.apply(this, arguments) || this;\n  }\n\n  var _proto = Namespace.prototype;\n\n  _proto.qualifiedName = function qualifiedName(value) {\n    if (this.namespace) {\n      return this.namespaceString + \"|\" + value;\n    } else {\n      return value;\n    }\n  };\n\n  _proto.valueToString = function valueToString() {\n    return this.qualifiedName(_Node.prototype.valueToString.call(this));\n  };\n\n  _createClass(Namespace, [{\n    key: \"namespace\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      if (namespace === true || namespace === \"*\" || namespace === \"&\") {\n        this._namespace = namespace;\n\n        if (this.raws) {\n          delete this.raws.namespace;\n        }\n\n        return;\n      }\n\n      var escaped = (0, _cssesc[\"default\"])(namespace, {\n        isIdentifier: true\n      });\n      this._namespace = namespace;\n\n      if (escaped !== namespace) {\n        (0, _util.ensureObject)(this, \"raws\");\n        this.raws.namespace = escaped;\n      } else if (this.raws) {\n        delete this.raws.namespace;\n      }\n    }\n  }, {\n    key: \"ns\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      this.namespace = namespace;\n    }\n  }, {\n    key: \"namespaceString\",\n    get: function get() {\n      if (this.namespace) {\n        var ns = this.stringifyProperty(\"namespace\");\n\n        if (ns === true) {\n          return '';\n        } else {\n          return ns;\n        }\n      } else {\n        return '';\n      }\n    }\n  }]);\n\n  return Namespace;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Namespace;\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Tag = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Tag, _Namespace);\n\n  function Tag(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.TAG;\n    return _this;\n  }\n\n  return Tag;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Tag;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar String = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(String, _Node);\n\n  function String(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.STRING;\n    return _this;\n  }\n\n  return String;\n}(_node[\"default\"]);\n\nexports[\"default\"] = String;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Pseudo = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Pseudo, _Container);\n\n  function Pseudo(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.PSEUDO;\n    return _this;\n  }\n\n  var _proto = Pseudo.prototype;\n\n  _proto.toString = function toString() {\n    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n    return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), params, this.rawSpaceAfter].join('');\n  };\n\n  return Pseudo;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Pseudo;\nmodule.exports = exports.default;","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","export const deprecate = fn => fn;\nexport const types = {\n  isNativeError: () => true\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports.unescapeValue = unescapeValue;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _unesc = _interopRequireDefault(require(\"../util/unesc\"));\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nvar _CSSESC_QUOTE_OPTIONS;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar deprecate = require(\"util-deprecate\");\n\nvar WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n\n  unescaped = (0, _unesc[\"default\"])(unescaped);\n\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\n\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n\n  if (opts.value === undefined) {\n    return opts;\n  }\n\n  warnOfDeprecatedConstructor();\n\n  var _unescapeValue = unescapeValue(opts.value),\n      quoteMark = _unescapeValue.quoteMark,\n      unescaped = _unescapeValue.unescaped;\n\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\n\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n\n  function Attribute(opts) {\n    var _this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n\n\n  var _proto = Attribute.prototype;\n\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var quoteMark = this._determineQuoteMark(options);\n\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc[\"default\"])(this._value, cssescopts);\n    return escaped;\n  };\n\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */\n  ;\n\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n\n    this._syncRawValue();\n  }\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */\n  ;\n\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc[\"default\"])(v, {\n        isIdentifier: true\n      });\n\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc[\"default\"])(v, opts);\n\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */\n  ;\n\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n\n    return quoteMark;\n  };\n\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc[\"default\"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc[\"default\"])(value, {\n        isIdentifier: true\n      });\n\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n\n    var attrSpaces = this._spacesFor(spaceName);\n\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */\n  ;\n\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n\n    var attributeSpaces = this._spacesFor(\"attribute\");\n\n    count += attributeSpaces.before.length;\n\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n\n    if (name === \"attributeNS\") {\n      return count;\n    }\n\n    count += this.namespaceString.length;\n\n    if (this.namespace) {\n      count += 1;\n    }\n\n    if (name === \"attribute\") {\n      return count;\n    }\n\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n\n    var operatorSpaces = this._spacesFor(\"operator\");\n\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n\n    count += operator.length;\n    count += operatorSpaces.after.length;\n\n    var valueSpaces = this._spacesFor(\"value\");\n\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n\n    count += value.length;\n    count += valueSpaces.after.length;\n\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n\n    count += insensitiveSpaces.before.length;\n\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n\n    return -1;\n  };\n\n  _proto.toString = function toString() {\n    var _this2 = this;\n\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n    if (this.operator && (this.value || this.value === '')) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */\n    ,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    ,\n    set: function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n            deprecatedUsage = _unescapeValue2.deprecatedUsage,\n            unescaped = _unescapeValue2.unescaped,\n            quoteMark = _unescapeValue2.quoteMark;\n\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n\n      this._attribute = name;\n    }\n  }]);\n\n  return Attribute;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Universal = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Universal, _Namespace);\n\n  function Universal(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.UNIVERSAL;\n    _this.value = '*';\n    return _this;\n  }\n\n  return Universal;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Universal;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Combinator = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Combinator, _Node);\n\n  function Combinator(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMBINATOR;\n    return _this;\n  }\n\n  return Combinator;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Combinator;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Nesting = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Nesting, _Node);\n\n  function Nesting(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.NESTING;\n    _this.value = '&';\n    return _this;\n  }\n\n  return Nesting;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Nesting;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = sortAscending;\n\nfunction sortAscending(list) {\n  return list.sort(function (a, b) {\n    return a - b;\n  });\n}\n\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.combinator = exports.word = exports.comment = exports.str = exports.tab = exports.newline = exports.feed = exports.cr = exports.backslash = exports.bang = exports.slash = exports.doubleQuote = exports.singleQuote = exports.space = exports.greaterThan = exports.pipe = exports.equals = exports.plus = exports.caret = exports.tilde = exports.dollar = exports.closeSquare = exports.openSquare = exports.closeParenthesis = exports.openParenthesis = exports.semicolon = exports.colon = exports.comma = exports.at = exports.asterisk = exports.ampersand = void 0;\nvar ampersand = 38; // `&`.charCodeAt(0);\n\nexports.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\n\nexports.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\n\nexports.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\n\nexports.comma = comma;\nvar colon = 58; // `:`.charCodeAt(0);\n\nexports.colon = colon;\nvar semicolon = 59; // `;`.charCodeAt(0);\n\nexports.semicolon = semicolon;\nvar openParenthesis = 40; // `(`.charCodeAt(0);\n\nexports.openParenthesis = openParenthesis;\nvar closeParenthesis = 41; // `)`.charCodeAt(0);\n\nexports.closeParenthesis = closeParenthesis;\nvar openSquare = 91; // `[`.charCodeAt(0);\n\nexports.openSquare = openSquare;\nvar closeSquare = 93; // `]`.charCodeAt(0);\n\nexports.closeSquare = closeSquare;\nvar dollar = 36; // `$`.charCodeAt(0);\n\nexports.dollar = dollar;\nvar tilde = 126; // `~`.charCodeAt(0);\n\nexports.tilde = tilde;\nvar caret = 94; // `^`.charCodeAt(0);\n\nexports.caret = caret;\nvar plus = 43; // `+`.charCodeAt(0);\n\nexports.plus = plus;\nvar equals = 61; // `=`.charCodeAt(0);\n\nexports.equals = equals;\nvar pipe = 124; // `|`.charCodeAt(0);\n\nexports.pipe = pipe;\nvar greaterThan = 62; // `>`.charCodeAt(0);\n\nexports.greaterThan = greaterThan;\nvar space = 32; // ` `.charCodeAt(0);\n\nexports.space = space;\nvar singleQuote = 39; // `'`.charCodeAt(0);\n\nexports.singleQuote = singleQuote;\nvar doubleQuote = 34; // `\"`.charCodeAt(0);\n\nexports.doubleQuote = doubleQuote;\nvar slash = 47; // `/`.charCodeAt(0);\n\nexports.slash = slash;\nvar bang = 33; // `!`.charCodeAt(0);\n\nexports.bang = bang;\nvar backslash = 92; // '\\\\'.charCodeAt(0);\n\nexports.backslash = backslash;\nvar cr = 13; // '\\r'.charCodeAt(0);\n\nexports.cr = cr;\nvar feed = 12; // '\\f'.charCodeAt(0);\n\nexports.feed = feed;\nvar newline = 10; // '\\n'.charCodeAt(0);\n\nexports.newline = newline;\nvar tab = 9; // '\\t'.charCodeAt(0);\n// Expose aliases primarily for readability.\n\nexports.tab = tab;\nvar str = singleQuote; // No good single character representation!\n\nexports.str = str;\nvar comment = -1;\nexports.comment = comment;\nvar word = -2;\nexports.word = word;\nvar combinator = -3;\nexports.combinator = combinator;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = tokenize;\nexports.FIELDS = void 0;\n\nvar t = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar _unescapable, _wordDelimiters;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);\nvar wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);\nvar hex = {};\nvar hexChars = \"0123456789abcdefABCDEF\";\n\nfor (var i = 0; i < hexChars.length; i++) {\n  hex[hexChars.charCodeAt(i)] = true;\n}\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word's first letter occurs\n */\n\n\nfunction consumeWord(css, start) {\n  var next = start;\n  var code;\n\n  do {\n    code = css.charCodeAt(next);\n\n    if (wordDelimiters[code]) {\n      return next - 1;\n    } else if (code === t.backslash) {\n      next = consumeEscape(css, next) + 1;\n    } else {\n      // All other characters are part of the word\n      next++;\n    }\n  } while (next < css.length);\n\n  return next - 1;\n}\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\n\n\nfunction consumeEscape(css, start) {\n  var next = start;\n  var code = css.charCodeAt(next + 1);\n\n  if (unescapable[code]) {// just consume the escape char\n  } else if (hex[code]) {\n    var hexDigits = 0; // consume up to 6 hex chars\n\n    do {\n      next++;\n      hexDigits++;\n      code = css.charCodeAt(next + 1);\n    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape\n\n\n    if (hexDigits < 6 && code === t.space) {\n      next++;\n    }\n  } else {\n    // the next char is part of the current word\n    next++;\n  }\n\n  return next;\n}\n\nvar FIELDS = {\n  TYPE: 0,\n  START_LINE: 1,\n  START_COL: 2,\n  END_LINE: 3,\n  END_COL: 4,\n  START_POS: 5,\n  END_POS: 6\n};\nexports.FIELDS = FIELDS;\n\nfunction tokenize(input) {\n  var tokens = [];\n  var css = input.css.valueOf();\n  var _css = css,\n      length = _css.length;\n  var offset = -1;\n  var line = 1;\n  var start = 0;\n  var end = 0;\n  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;\n\n  function unclosed(what, fix) {\n    if (input.safe) {\n      // fyi: this is never set to true.\n      css += fix;\n      next = css.length - 1;\n    } else {\n      throw input.error('Unclosed ' + what, line, start - offset, start);\n    }\n  }\n\n  while (start < length) {\n    code = css.charCodeAt(start);\n\n    if (code === t.newline) {\n      offset = start;\n      line += 1;\n    }\n\n    switch (code) {\n      case t.space:\n      case t.tab:\n      case t.newline:\n      case t.cr:\n      case t.feed:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n\n          if (code === t.newline) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n\n        tokenType = t.space;\n        endLine = line;\n        endColumn = next - offset - 1;\n        end = next;\n        break;\n\n      case t.plus:\n      case t.greaterThan:\n      case t.tilde:\n      case t.pipe:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n\n        tokenType = t.combinator;\n        endLine = line;\n        endColumn = start - offset;\n        end = next;\n        break;\n      // Consume these characters as single tokens.\n\n      case t.asterisk:\n      case t.ampersand:\n      case t.bang:\n      case t.comma:\n      case t.equals:\n      case t.dollar:\n      case t.caret:\n      case t.openSquare:\n      case t.closeSquare:\n      case t.colon:\n      case t.semicolon:\n      case t.openParenthesis:\n      case t.closeParenthesis:\n        next = start;\n        tokenType = code;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      case t.singleQuote:\n      case t.doubleQuote:\n        quote = code === t.singleQuote ? \"'\" : '\"';\n        next = start;\n\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n\n          if (next === -1) {\n            unclosed('quote', quote);\n          }\n\n          escapePos = next;\n\n          while (css.charCodeAt(escapePos - 1) === t.backslash) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n\n        tokenType = t.str;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      default:\n        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n          next = css.indexOf('*/', start + 2) + 1;\n\n          if (next === 0) {\n            unclosed('comment', '*/');\n          }\n\n          content = css.slice(start, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n\n          tokenType = t.comment;\n          line = nextLine;\n          endLine = nextLine;\n          endColumn = next - nextOffset;\n        } else if (code === t.slash) {\n          next = start;\n          tokenType = code;\n          endLine = line;\n          endColumn = start - offset;\n          end = next + 1;\n        } else {\n          next = consumeWord(css, start);\n          tokenType = t.word;\n          endLine = line;\n          endColumn = next - offset;\n        }\n\n        end = next + 1;\n        break;\n    } // Ensure that the token structure remains consistent\n\n\n    tokens.push([tokenType, // [0] Token type\n    line, // [1] Starting line\n    start - offset, // [2] Starting column\n    endLine, // [3] Ending line\n    endColumn, // [4] Ending column\n    start, // [5] Start position / Source index\n    end // [6] End position\n    ]); // Reset offset for the next token\n\n    if (nextOffset) {\n      offset = nextOffset;\n      nextOffset = null;\n    }\n\n    start = end;\n  }\n\n  return tokens;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _root = _interopRequireDefault(require(\"./selectors/root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selectors/selector\"));\n\nvar _className = _interopRequireDefault(require(\"./selectors/className\"));\n\nvar _comment = _interopRequireDefault(require(\"./selectors/comment\"));\n\nvar _id = _interopRequireDefault(require(\"./selectors/id\"));\n\nvar _tag = _interopRequireDefault(require(\"./selectors/tag\"));\n\nvar _string = _interopRequireDefault(require(\"./selectors/string\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./selectors/pseudo\"));\n\nvar _attribute = _interopRequireWildcard(require(\"./selectors/attribute\"));\n\nvar _universal = _interopRequireDefault(require(\"./selectors/universal\"));\n\nvar _combinator = _interopRequireDefault(require(\"./selectors/combinator\"));\n\nvar _nesting = _interopRequireDefault(require(\"./selectors/nesting\"));\n\nvar _sortAscending = _interopRequireDefault(require(\"./sortAscending\"));\n\nvar _tokenize = _interopRequireWildcard(require(\"./tokenize\"));\n\nvar tokens = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar types = _interopRequireWildcard(require(\"./selectors/types\"));\n\nvar _util = require(\"./util\");\n\nvar _WHITESPACE_TOKENS, _Object$assign;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);\nvar WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));\n\nfunction tokenStart(token) {\n  return {\n    line: token[_tokenize.FIELDS.START_LINE],\n    column: token[_tokenize.FIELDS.START_COL]\n  };\n}\n\nfunction tokenEnd(token) {\n  return {\n    line: token[_tokenize.FIELDS.END_LINE],\n    column: token[_tokenize.FIELDS.END_COL]\n  };\n}\n\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n}\n\nfunction getTokenSource(token) {\n  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);\n}\n\nfunction getTokenSourceSpan(startToken, endToken) {\n  if (!startToken) {\n    return undefined;\n  }\n\n  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);\n}\n\nfunction unescapeProp(node, prop) {\n  var value = node[prop];\n\n  if (typeof value !== \"string\") {\n    return;\n  }\n\n  if (value.indexOf(\"\\\\\") !== -1) {\n    (0, _util.ensureObject)(node, 'raws');\n    node[prop] = (0, _util.unesc)(value);\n\n    if (node.raws[prop] === undefined) {\n      node.raws[prop] = value;\n    }\n  }\n\n  return node;\n}\n\nfunction indexesOf(array, item) {\n  var i = -1;\n  var indexes = [];\n\n  while ((i = array.indexOf(item, i + 1)) !== -1) {\n    indexes.push(i);\n  }\n\n  return indexes;\n}\n\nfunction uniqs() {\n  var list = Array.prototype.concat.apply([], arguments);\n  return list.filter(function (item, i) {\n    return i === list.indexOf(item);\n  });\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.rule = rule;\n    this.options = Object.assign({\n      lossy: false,\n      safe: false\n    }, options);\n    this.position = 0;\n    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n    this.tokens = (0, _tokenize[\"default\"])({\n      css: this.css,\n      error: this._errorGenerator(),\n      safe: this.options.safe\n    });\n    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n    this.root = new _root[\"default\"]({\n      source: rootSource\n    });\n    this.root.errorGenerator = this._errorGenerator();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: {\n          line: 1,\n          column: 1\n        }\n      }\n    });\n    this.root.append(selector);\n    this.current = selector;\n    this.loop();\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto._errorGenerator = function _errorGenerator() {\n    var _this = this;\n\n    return function (message, errorOptions) {\n      if (typeof _this.rule === 'string') {\n        return new Error(message);\n      }\n\n      return _this.rule.error(message, errorOptions);\n    };\n  };\n\n  _proto.attribute = function attribute() {\n    var attr = [];\n    var startingToken = this.currToken;\n    this.position++;\n\n    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      attr.push(this.currToken);\n      this.position++;\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n\n    var len = attr.length;\n    var node = {\n      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n    };\n\n    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {\n      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);\n    }\n\n    var pos = 0;\n    var spaceBefore = '';\n    var commentBefore = '';\n    var lastAdded = null;\n    var spaceAfterMeaningfulToken = false;\n\n    while (pos < len) {\n      var token = attr[pos];\n      var content = this.content(token);\n      var next = attr[pos + 1];\n\n      switch (token[_tokenize.FIELDS.TYPE]) {\n        case tokens.space:\n          // if (\n          //     len === 1 ||\n          //     pos === 0 && this.content(next) === '|'\n          // ) {\n          //     return this.expected('attribute', token[TOKEN.START_POS], content);\n          // }\n          spaceAfterMeaningfulToken = true;\n\n          if (this.options.lossy) {\n            break;\n          }\n\n          if (lastAdded) {\n            (0, _util.ensureObject)(node, 'spaces', lastAdded);\n            var prevContent = node.spaces[lastAdded].after || '';\n            node.spaces[lastAdded].after = prevContent + content;\n            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;\n\n            if (existingComment) {\n              node.raws.spaces[lastAdded].after = existingComment + content;\n            }\n          } else {\n            spaceBefore = spaceBefore + content;\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        case tokens.asterisk:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = spaceBefore;\n              commentBefore = '';\n            }\n\n            node.namespace = (node.namespace || \"\") + content;\n            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;\n\n            if (rawValue) {\n              node.raws.namespace += content;\n            }\n\n            lastAdded = 'namespace';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.dollar:\n          if (lastAdded === \"value\") {\n            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');\n            node.value += \"$\";\n\n            if (oldRawValue) {\n              node.raws.value = oldRawValue + \"$\";\n            }\n\n            break;\n          }\n\n        // Falls through\n\n        case tokens.caret:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.combinator:\n          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          if (content !== '|') {\n            spaceAfterMeaningfulToken = false;\n            break;\n          }\n\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if (!node.namespace && !node.attribute) {\n            node.namespace = true;\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.word:\n          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.\n          !node.operator && !node.namespace) {\n            node.namespace = content;\n            lastAdded = 'namespace';\n          } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = commentBefore;\n              commentBefore = '';\n            }\n\n            node.attribute = (node.attribute || \"\") + content;\n\n            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;\n\n            if (_rawValue) {\n              node.raws.attribute += content;\n            }\n\n            lastAdded = 'attribute';\n          } else if (!node.value && node.value !== \"\" || lastAdded === \"value\" && !spaceAfterMeaningfulToken) {\n            var _unescaped = (0, _util.unesc)(content);\n\n            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';\n\n            var oldValue = node.value || '';\n            node.value = oldValue + _unescaped;\n            node.quoteMark = null;\n\n            if (_unescaped !== content || _oldRawValue) {\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws.value = (_oldRawValue || oldValue) + content;\n            }\n\n            lastAdded = 'value';\n          } else {\n            var insensitive = content === 'i' || content === \"I\";\n\n            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n              node.insensitive = insensitive;\n\n              if (!insensitive || content === \"I\") {\n                (0, _util.ensureObject)(node, 'raws');\n                node.raws.insensitiveFlag = content;\n              }\n\n              lastAdded = 'insensitive';\n\n              if (spaceBefore) {\n                (0, _util.ensureObject)(node, 'spaces', 'insensitive');\n                node.spaces.insensitive.before = spaceBefore;\n                spaceBefore = '';\n              }\n\n              if (commentBefore) {\n                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');\n                node.raws.spaces.insensitive.before = commentBefore;\n                commentBefore = '';\n              }\n            } else if (node.value || node.value === '') {\n              lastAdded = 'value';\n              node.value += content;\n\n              if (node.raws.value) {\n                node.raws.value += content;\n              }\n            }\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.str:\n          if (!node.attribute || !node.operator) {\n            return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          var _unescapeValue = (0, _attribute.unescapeValue)(content),\n              unescaped = _unescapeValue.unescaped,\n              quoteMark = _unescapeValue.quoteMark;\n\n          node.value = unescaped;\n          node.quoteMark = quoteMark;\n          lastAdded = 'value';\n          (0, _util.ensureObject)(node, 'raws');\n          node.raws.value = content;\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.equals:\n          if (!node.attribute) {\n            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);\n          }\n\n          if (node.value) {\n            return this.error('Unexpected \"=\" found; an operator was already defined.', {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          node.operator = node.operator ? node.operator + content : content;\n          lastAdded = 'operator';\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.comment:\n          if (lastAdded) {\n            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {\n              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';\n              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);\n              node.raws.spaces[lastAdded].after = rawLastComment + content;\n            } else {\n              var lastValue = node[lastAdded] || '';\n              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws[lastAdded] = rawLastValue + content;\n            }\n          } else {\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        default:\n          return this.error(\"Unexpected \\\"\" + content + \"\\\" found.\", {\n            index: token[_tokenize.FIELDS.START_POS]\n          });\n      }\n\n      pos++;\n    }\n\n    unescapeProp(node, \"attribute\");\n    unescapeProp(node, \"namespace\");\n    this.newNode(new _attribute[\"default\"](node));\n    this.position++;\n  }\n  /**\n   * return a node containing meaningless garbage up to (but not including) the specified token position.\n   * if the token position is negative, all remaining tokens are consumed.\n   *\n   * This returns an array containing a single string node if all whitespace,\n   * otherwise an array of comment nodes with space before and after.\n   *\n   * These tokens are not added to the current selector, the caller can add them or use them to amend\n   * a previous node's space metadata.\n   *\n   * In lossy mode, this returns only comments.\n   */\n  ;\n\n  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {\n    if (stopPosition < 0) {\n      stopPosition = this.tokens.length;\n    }\n\n    var startPosition = this.position;\n    var nodes = [];\n    var space = \"\";\n    var lastComment = undefined;\n\n    do {\n      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n        if (!this.options.lossy) {\n          space += this.content();\n        }\n      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {\n        var spaces = {};\n\n        if (space) {\n          spaces.before = space;\n          space = \"\";\n        }\n\n        lastComment = new _comment[\"default\"]({\n          value: this.content(),\n          source: getTokenSource(this.currToken),\n          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n          spaces: spaces\n        });\n        nodes.push(lastComment);\n      }\n    } while (++this.position < stopPosition);\n\n    if (space) {\n      if (lastComment) {\n        lastComment.spaces.after = space;\n      } else if (!this.options.lossy) {\n        var firstToken = this.tokens[startPosition];\n        var lastToken = this.tokens[this.position - 1];\n        nodes.push(new _string[\"default\"]({\n          value: '',\n          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),\n          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n          spaces: {\n            before: space,\n            after: ''\n          }\n        }));\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * \n   * @param {*} nodes \n   */\n  ;\n\n  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {\n    var _this2 = this;\n\n    if (requiredSpace === void 0) {\n      requiredSpace = false;\n    }\n\n    var space = \"\";\n    var rawSpace = \"\";\n    nodes.forEach(function (n) {\n      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);\n\n      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);\n\n      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n    });\n\n    if (rawSpace === space) {\n      rawSpace = undefined;\n    }\n\n    var result = {\n      space: space,\n      rawSpace: rawSpace\n    };\n    return result;\n  };\n\n  _proto.isNamedCombinator = function isNamedCombinator(position) {\n    if (position === void 0) {\n      position = this.position;\n    }\n\n    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;\n  };\n\n  _proto.namedCombinator = function namedCombinator() {\n    if (this.isNamedCombinator()) {\n      var nameRaw = this.content(this.tokens[this.position + 1]);\n      var name = (0, _util.unesc)(nameRaw).toLowerCase();\n      var raws = {};\n\n      if (name !== nameRaw) {\n        raws.value = \"/\" + nameRaw + \"/\";\n      }\n\n      var node = new _combinator[\"default\"]({\n        value: \"/\" + name + \"/\",\n        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n        raws: raws\n      });\n      this.position = this.position + 3;\n      return node;\n    } else {\n      this.unexpected();\n    }\n  };\n\n  _proto.combinator = function combinator() {\n    var _this3 = this;\n\n    if (this.content() === '|') {\n      return this.namespace();\n    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n\n\n    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n\n    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {\n      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n\n      if (nodes.length > 0) {\n        var last = this.current.last;\n\n        if (last) {\n          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),\n              space = _this$convertWhitespa.space,\n              rawSpace = _this$convertWhitespa.rawSpace;\n\n          if (rawSpace !== undefined) {\n            last.rawSpaceAfter += rawSpace;\n          }\n\n          last.spaces.after += space;\n        } else {\n          nodes.forEach(function (n) {\n            return _this3.newNode(n);\n          });\n        }\n      }\n\n      return;\n    }\n\n    var firstToken = this.currToken;\n    var spaceOrDescendantSelectorNodes = undefined;\n\n    if (nextSigTokenPos > this.position) {\n      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n    }\n\n    var node;\n\n    if (this.isNamedCombinator()) {\n      node = this.namedCombinator();\n    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n      node = new _combinator[\"default\"]({\n        value: this.content(),\n        source: getTokenSource(this.currToken),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n      });\n      this.position++;\n    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {// pass\n    } else if (!spaceOrDescendantSelectorNodes) {\n      this.unexpected();\n    }\n\n    if (node) {\n      if (spaceOrDescendantSelectorNodes) {\n        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),\n            _space = _this$convertWhitespa2.space,\n            _rawSpace = _this$convertWhitespa2.rawSpace;\n\n        node.spaces.before = _space;\n        node.rawSpaceBefore = _rawSpace;\n      }\n    } else {\n      // descendant combinator\n      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),\n          _space2 = _this$convertWhitespa3.space,\n          _rawSpace2 = _this$convertWhitespa3.rawSpace;\n\n      if (!_rawSpace2) {\n        _rawSpace2 = _space2;\n      }\n\n      var spaces = {};\n      var raws = {\n        spaces: {}\n      };\n\n      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {\n        spaces.before = _space2.slice(0, _space2.length - 1);\n        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);\n      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {\n        spaces.after = _space2.slice(1);\n        raws.spaces.after = _rawSpace2.slice(1);\n      } else {\n        raws.value = _rawSpace2;\n      }\n\n      node = new _combinator[\"default\"]({\n        value: ' ',\n        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n        spaces: spaces,\n        raws: raws\n      });\n    }\n\n    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {\n      node.spaces.after = this.optionalSpace(this.content());\n      this.position++;\n    }\n\n    return this.newNode(node);\n  };\n\n  _proto.comma = function comma() {\n    if (this.position === this.tokens.length - 1) {\n      this.root.trailingComma = true;\n      this.position++;\n      return;\n    }\n\n    this.current._inferEndPosition();\n\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: tokenStart(this.tokens[this.position + 1])\n      }\n    });\n    this.current.parent.append(selector);\n    this.current = selector;\n    this.position++;\n  };\n\n  _proto.comment = function comment() {\n    var current = this.currToken;\n    this.newNode(new _comment[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.error = function error(message, opts) {\n    throw this.root.error(message, opts);\n  };\n\n  _proto.missingBackslash = function missingBackslash() {\n    return this.error('Expected a backslash preceding the semicolon.', {\n      index: this.currToken[_tokenize.FIELDS.START_POS]\n    });\n  };\n\n  _proto.missingParenthesis = function missingParenthesis() {\n    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.missingSquareBracket = function missingSquareBracket() {\n    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.unexpected = function unexpected() {\n    return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.namespace = function namespace() {\n    var before = this.prevToken && this.content(this.prevToken) || true;\n\n    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.position++;\n      return this.word(before);\n    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {\n      this.position++;\n      return this.universal(before);\n    }\n  };\n\n  _proto.nesting = function nesting() {\n    if (this.nextToken) {\n      var nextContent = this.content(this.nextToken);\n\n      if (nextContent === \"|\") {\n        this.position++;\n        return;\n      }\n    }\n\n    var current = this.currToken;\n    this.newNode(new _nesting[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.parentheses = function parentheses() {\n    var last = this.current.last;\n    var unbalanced = 1;\n    this.position++;\n\n    if (last && last.type === types.PSEUDO) {\n      var selector = new _selector[\"default\"]({\n        source: {\n          start: tokenStart(this.tokens[this.position - 1])\n        }\n      });\n      var cache = this.current;\n      last.append(selector);\n      this.current = selector;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        if (unbalanced) {\n          this.parse();\n        } else {\n          this.current.source.end = tokenEnd(this.currToken);\n          this.current.parent.source.end = tokenEnd(this.currToken);\n          this.position++;\n        }\n      }\n\n      this.current = cache;\n    } else {\n      // I think this case should be an error. It's used to implement a basic parse of media queries\n      // but I don't think it's a good idea.\n      var parenStart = this.currToken;\n      var parenValue = \"(\";\n      var parenEnd;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        parenEnd = this.currToken;\n        parenValue += this.parseParenthesisToken(this.currToken);\n        this.position++;\n      }\n\n      if (last) {\n        last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n      } else {\n        this.newNode(new _string[\"default\"]({\n          value: parenValue,\n          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),\n          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]\n        }));\n      }\n    }\n\n    if (unbalanced) {\n      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.pseudo = function pseudo() {\n    var _this4 = this;\n\n    var pseudoStr = '';\n    var startingToken = this.currToken;\n\n    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {\n      pseudoStr += this.content();\n      this.position++;\n    }\n\n    if (!this.currToken) {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.splitWord(false, function (first, length) {\n        pseudoStr += first;\n\n        _this4.newNode(new _pseudo[\"default\"]({\n          value: pseudoStr,\n          source: getTokenSourceSpan(startingToken, _this4.currToken),\n          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n        }));\n\n        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          _this4.error('Misplaced parenthesis.', {\n            index: _this4.nextToken[_tokenize.FIELDS.START_POS]\n          });\n        }\n      });\n    } else {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.space = function space() {\n    var content = this.content(); // Handle space before and after the selector\n\n    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {\n      return node.type === 'comment';\n    })) {\n      this.spaces = this.optionalSpace(content);\n      this.position++;\n    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      this.current.last.spaces.after = this.optionalSpace(content);\n      this.position++;\n    } else {\n      this.combinator();\n    }\n  };\n\n  _proto.string = function string() {\n    var current = this.currToken;\n    this.newNode(new _string[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.universal = function universal(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    var current = this.currToken;\n    this.newNode(new _universal[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }), namespace);\n    this.position++;\n  };\n\n  _proto.splitWord = function splitWord(namespace, firstCallback) {\n    var _this5 = this;\n\n    var nextToken = this.nextToken;\n    var word = this.content();\n\n    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {\n      this.position++;\n      var current = this.content();\n      word += current;\n\n      if (current.lastIndexOf('\\\\') === current.length - 1) {\n        var next = this.nextToken;\n\n        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {\n          word += this.requiredSpace(this.content(next));\n          this.position++;\n        }\n      }\n\n      nextToken = this.nextToken;\n    }\n\n    var hasClass = indexesOf(word, '.').filter(function (i) {\n      // Allow escaped dot within class name\n      var escapedDot = word[i - 1] === '\\\\'; // Allow decimal numbers percent in @keyframes\n\n      var isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n      return !escapedDot && !isKeyframesPercent;\n    });\n    var hasId = indexesOf(word, '#').filter(function (i) {\n      return word[i - 1] !== '\\\\';\n    }); // Eliminate Sass interpolations from the list of id indexes\n\n    var interpolations = indexesOf(word, '#{');\n\n    if (interpolations.length) {\n      hasId = hasId.filter(function (hashIndex) {\n        return !~interpolations.indexOf(hashIndex);\n      });\n    }\n\n    var indices = (0, _sortAscending[\"default\"])(uniqs([0].concat(hasClass, hasId)));\n    indices.forEach(function (ind, i) {\n      var index = indices[i + 1] || word.length;\n      var value = word.slice(ind, index);\n\n      if (i === 0 && firstCallback) {\n        return firstCallback.call(_this5, value, indices.length);\n      }\n\n      var node;\n      var current = _this5.currToken;\n      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];\n      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n\n      if (~hasClass.indexOf(ind)) {\n        var classNameOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n      } else if (~hasId.indexOf(ind)) {\n        var idOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n      } else {\n        var tagOpts = {\n          value: value,\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        unescapeProp(tagOpts, \"value\");\n        node = new _tag[\"default\"](tagOpts);\n      }\n\n      _this5.newNode(node, namespace); // Ensure that the namespace is used only once\n\n\n      namespace = null;\n    });\n    this.position++;\n  };\n\n  _proto.word = function word(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    return this.splitWord(namespace);\n  };\n\n  _proto.loop = function loop() {\n    while (this.position < this.tokens.length) {\n      this.parse(true);\n    }\n\n    this.current._inferEndPosition();\n\n    return this.root;\n  };\n\n  _proto.parse = function parse(throwOnParenthesis) {\n    switch (this.currToken[_tokenize.FIELDS.TYPE]) {\n      case tokens.space:\n        this.space();\n        break;\n\n      case tokens.comment:\n        this.comment();\n        break;\n\n      case tokens.openParenthesis:\n        this.parentheses();\n        break;\n\n      case tokens.closeParenthesis:\n        if (throwOnParenthesis) {\n          this.missingParenthesis();\n        }\n\n        break;\n\n      case tokens.openSquare:\n        this.attribute();\n        break;\n\n      case tokens.dollar:\n      case tokens.caret:\n      case tokens.equals:\n      case tokens.word:\n        this.word();\n        break;\n\n      case tokens.colon:\n        this.pseudo();\n        break;\n\n      case tokens.comma:\n        this.comma();\n        break;\n\n      case tokens.asterisk:\n        this.universal();\n        break;\n\n      case tokens.ampersand:\n        this.nesting();\n        break;\n\n      case tokens.slash:\n      case tokens.combinator:\n        this.combinator();\n        break;\n\n      case tokens.str:\n        this.string();\n        break;\n      // These cases throw; no break needed.\n\n      case tokens.closeSquare:\n        this.missingSquareBracket();\n\n      case tokens.semicolon:\n        this.missingBackslash();\n\n      default:\n        this.unexpected();\n    }\n  }\n  /**\n   * Helpers\n   */\n  ;\n\n  _proto.expected = function expected(description, index, found) {\n    if (Array.isArray(description)) {\n      var last = description.pop();\n      description = description.join(', ') + \" or \" + last;\n    }\n\n    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n\n    if (!found) {\n      return this.error(\"Expected \" + an + \" \" + description + \".\", {\n        index: index\n      });\n    }\n\n    return this.error(\"Expected \" + an + \" \" + description + \", found \\\"\" + found + \"\\\" instead.\", {\n      index: index\n    });\n  };\n\n  _proto.requiredSpace = function requiredSpace(space) {\n    return this.options.lossy ? ' ' : space;\n  };\n\n  _proto.optionalSpace = function optionalSpace(space) {\n    return this.options.lossy ? '' : space;\n  };\n\n  _proto.lossySpace = function lossySpace(space, required) {\n    if (this.options.lossy) {\n      return required ? ' ' : '';\n    } else {\n      return space;\n    }\n  };\n\n  _proto.parseParenthesisToken = function parseParenthesisToken(token) {\n    var content = this.content(token);\n\n    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {\n      return this.requiredSpace(content);\n    } else {\n      return content;\n    }\n  };\n\n  _proto.newNode = function newNode(node, namespace) {\n    if (namespace) {\n      if (/^ +$/.test(namespace)) {\n        if (!this.options.lossy) {\n          this.spaces = (this.spaces || '') + namespace;\n        }\n\n        namespace = true;\n      }\n\n      node.namespace = namespace;\n      unescapeProp(node, \"namespace\");\n    }\n\n    if (this.spaces) {\n      node.spaces.before = this.spaces;\n      this.spaces = '';\n    }\n\n    return this.current.append(node);\n  };\n\n  _proto.content = function content(token) {\n    if (token === void 0) {\n      token = this.currToken;\n    }\n\n    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);\n  };\n\n  /**\n   * returns the index of the next non-whitespace, non-comment token.\n   * returns -1 if no meaningful token is found.\n   */\n  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = this.position + 1;\n    }\n\n    var searchPosition = startPosition;\n\n    while (searchPosition < this.tokens.length) {\n      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {\n        searchPosition++;\n        continue;\n      } else {\n        return searchPosition;\n      }\n    }\n\n    return -1;\n  };\n\n  _createClass(Parser, [{\n    key: \"currToken\",\n    get: function get() {\n      return this.tokens[this.position];\n    }\n  }, {\n    key: \"nextToken\",\n    get: function get() {\n      return this.tokens[this.position + 1];\n    }\n  }, {\n    key: \"prevToken\",\n    get: function get() {\n      return this.tokens[this.position - 1];\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports[\"default\"] = Parser;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;\n\nvar _attribute = _interopRequireDefault(require(\"./attribute\"));\n\nvar _className = _interopRequireDefault(require(\"./className\"));\n\nvar _combinator = _interopRequireDefault(require(\"./combinator\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _id = _interopRequireDefault(require(\"./id\"));\n\nvar _nesting = _interopRequireDefault(require(\"./nesting\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./pseudo\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selector\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _tag = _interopRequireDefault(require(\"./tag\"));\n\nvar _universal = _interopRequireDefault(require(\"./universal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar attribute = function attribute(opts) {\n  return new _attribute[\"default\"](opts);\n};\n\nexports.attribute = attribute;\n\nvar className = function className(opts) {\n  return new _className[\"default\"](opts);\n};\n\nexports.className = className;\n\nvar combinator = function combinator(opts) {\n  return new _combinator[\"default\"](opts);\n};\n\nexports.combinator = combinator;\n\nvar comment = function comment(opts) {\n  return new _comment[\"default\"](opts);\n};\n\nexports.comment = comment;\n\nvar id = function id(opts) {\n  return new _id[\"default\"](opts);\n};\n\nexports.id = id;\n\nvar nesting = function nesting(opts) {\n  return new _nesting[\"default\"](opts);\n};\n\nexports.nesting = nesting;\n\nvar pseudo = function pseudo(opts) {\n  return new _pseudo[\"default\"](opts);\n};\n\nexports.pseudo = pseudo;\n\nvar root = function root(opts) {\n  return new _root[\"default\"](opts);\n};\n\nexports.root = root;\n\nvar selector = function selector(opts) {\n  return new _selector[\"default\"](opts);\n};\n\nexports.selector = selector;\n\nvar string = function string(opts) {\n  return new _string[\"default\"](opts);\n};\n\nexports.string = string;\n\nvar tag = function tag(opts) {\n  return new _tag[\"default\"](opts);\n};\n\nexports.tag = tag;\n\nvar universal = function universal(opts) {\n  return new _universal[\"default\"](opts);\n};\n\nexports.universal = universal;","\"use strict\";\n\nexports.__esModule = true;\nexports.isNode = isNode;\nexports.isPseudoElement = isPseudoElement;\nexports.isPseudoClass = isPseudoClass;\nexports.isContainer = isContainer;\nexports.isNamespace = isNamespace;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;\n\nvar _types = require(\"./types\");\n\nvar _IS_TYPE;\n\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\n\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\n\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n}\n\nvar isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nexports.isAttribute = isAttribute;\nvar isClassName = isNodeType.bind(null, _types.CLASS);\nexports.isClassName = isClassName;\nvar isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nexports.isCombinator = isCombinator;\nvar isComment = isNodeType.bind(null, _types.COMMENT);\nexports.isComment = isComment;\nvar isIdentifier = isNodeType.bind(null, _types.ID);\nexports.isIdentifier = isIdentifier;\nvar isNesting = isNodeType.bind(null, _types.NESTING);\nexports.isNesting = isNesting;\nvar isPseudo = isNodeType.bind(null, _types.PSEUDO);\nexports.isPseudo = isPseudo;\nvar isRoot = isNodeType.bind(null, _types.ROOT);\nexports.isRoot = isRoot;\nvar isSelector = isNodeType.bind(null, _types.SELECTOR);\nexports.isSelector = isSelector;\nvar isString = isNodeType.bind(null, _types.STRING);\nexports.isString = isString;\nvar isTag = isNodeType.bind(null, _types.TAG);\nexports.isTag = isTag;\nvar isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\nexports.isUniversal = isUniversal;\n\nfunction isPseudoElement(node) {\n  return isPseudo(node) && node.value && (node.value.startsWith(\"::\") || node.value.toLowerCase() === \":before\" || node.value.toLowerCase() === \":after\" || node.value.toLowerCase() === \":first-letter\" || node.value.toLowerCase() === \":first-line\");\n}\n\nfunction isPseudoClass(node) {\n  return isPseudo(node) && !isPseudoElement(node);\n}\n\nfunction isContainer(node) {\n  return !!(isNode(node) && node.walk);\n}\n\nfunction isNamespace(node) {\n  return isAttribute(node) || isTag(node);\n}","\"use strict\";\n\nexports.__esModule = true;\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\n\nvar _constructors = require(\"./constructors\");\n\nObject.keys(_constructors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _constructors[key]) return;\n  exports[key] = _constructors[key];\n});\n\nvar _guards = require(\"./guards\");\n\nObject.keys(_guards).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _guards[key]) return;\n  exports[key] = _guards[key];\n});","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar selectors = _interopRequireWildcard(require(\"./selectors\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parser = function parser(processor) {\n  return new _processor[\"default\"](processor);\n};\n\nObject.assign(parser, selectors);\ndelete parser.__esModule;\nvar _default = parser;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Rule} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function transformSelector(result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(node, { updateSelector: true });\n\t} catch {\n\t\tresult.warn('Cannot parse selector', { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-selector-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, fixedSelector) => `Expected \"${selector}\" to be \"${fixedSelector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-selector-notation',\n\tfixable: true,\n};\n\nconst PERCENTAGE_SELECTORS = new Set(['0%', '100%']);\nconst KEYWORD_SELECTORS = new Set(['from', 'to']);\nconst PERCENTAGE_TO_KEYWORD = new Map([\n\t['0%', 'from'],\n\t['100%', 'to'],\n]);\nconst KEYWORD_TO_PERCENTAGE = new Map([\n\t['from', '0%'],\n\t['to', '100%'],\n]);\n\n/** @type {import('stylelint').Rule<'keyword' | 'percentage' | 'percentage-unless-within-keyword-only-block'>} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['keyword', 'percentage', 'percentage-unless-within-keyword-only-block'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @typedef {{\n\t\t *   expFunc: (selector: string, selectorsInBlock: string[]) => boolean,\n\t\t *   fixFunc: (selector: string) => string,\n\t\t * }} OptionFuncs\n\t\t *\n\t\t * @type {Record<primary, OptionFuncs>}\n\t\t */\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tkeyword: {\n\t\t\t\texpFunc: (selector) => KEYWORD_SELECTORS.has(selector),\n\t\t\t\tfixFunc: (selector) => getFromMap(PERCENTAGE_TO_KEYWORD, selector),\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: (selector) => PERCENTAGE_SELECTORS.has(selector),\n\t\t\t\tfixFunc: (selector) => getFromMap(KEYWORD_TO_PERCENTAGE, selector),\n\t\t\t},\n\t\t\t'percentage-unless-within-keyword-only-block': {\n\t\t\t\texpFunc: (selector, selectorsInBlock) => {\n\t\t\t\t\tif (selectorsInBlock.every((s) => KEYWORD_SELECTORS.has(s))) return true;\n\n\t\t\t\t\treturn PERCENTAGE_SELECTORS.has(selector);\n\t\t\t\t},\n\t\t\t\tfixFunc: (selector) => getFromMap(KEYWORD_TO_PERCENTAGE, selector),\n\t\t\t},\n\t\t});\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectorsInBlock =\n\t\t\t\tprimary === 'percentage-unless-within-keyword-only-block'\n\t\t\t\t\t? getSelectorsInBlock(atRuleKeyframes)\n\t\t\t\t\t: [];\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\ttransformSelector(result, keyframeRule, (selectors) => {\n\t\t\t\t\tselectors.walkTags((selectorTag) => {\n\t\t\t\t\t\tcheckSelector(\n\t\t\t\t\t\t\tselectorTag.value,\n\t\t\t\t\t\t\toptionFuncs[primary],\n\t\t\t\t\t\t\t(fixedSelector) => (selectorTag.value = fixedSelector),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * @param {string} selector\n\t\t\t\t * @param {OptionFuncs} funcs\n\t\t\t\t * @param {(fixedSelector: string) => void} fixer\n\t\t\t\t */\n\t\t\t\tfunction checkSelector(selector, { expFunc, fixFunc }, fixer) {\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!KEYWORD_SELECTORS.has(normalizedSelector) &&\n\t\t\t\t\t\t!PERCENTAGE_SELECTORS.has(normalizedSelector)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (expFunc(selector, selectorsInBlock)) return;\n\n\t\t\t\t\tconst fixedSelector = fixFunc(selector);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixer(fixedSelector);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(selector, fixedSelector),\n\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {Map<string, string>} map\n * @param {string} key\n * @returns {string}\n */\nfunction getFromMap(map, key) {\n\tconst value = map.get(key);\n\n\tassertString(value);\n\n\treturn value;\n}\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string[]}\n */\nfunction getSelectorsInBlock(atRule) {\n\t/** @type {string[]} */\n\tconst selectors = [];\n\n\tatRule.walkRules((r) => {\n\t\tselectors.push(...r.selectors);\n\t});\n\n\treturn selectors;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-line-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) =>\n\t\t`Expected line length to be no more than ${max} ${max === 1 ? 'character' : 'characters'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-line-length',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['non-comments', 'comments'],\n\t\t\t\t\tignorePattern: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source');\n\t\t}\n\n\t\tconst EXCLUDED_PATTERNS = [\n\t\t\t/url\\(\\s*(\\S.*\\S)\\s*\\)/gi, // allow tab, whitespace in url content\n\t\t\t/@import\\s+(['\"].*['\"])/gi,\n\t\t];\n\n\t\tconst ignoreNonComments = optionsMatches(secondaryOptions, 'ignore', 'non-comments');\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\t\t// Array of skipped sub strings, i.e `url(...)`, `@import \"...\"`\n\t\t/** @type {Array<[number, number]>} */\n\t\tlet skippedSubStrings = [];\n\t\tlet skippedSubStringsIndex = 0;\n\n\t\tfor (const pattern of EXCLUDED_PATTERNS) {\n\t\t\tfor (const match of rootString.matchAll(pattern)) {\n\t\t\t\tconst subMatch = match[1] || '';\n\t\t\t\tconst startOfSubString = (match.index || 0) + (match[0] || '').indexOf(subMatch);\n\n\t\t\t\tskippedSubStrings.push([startOfSubString, startOfSubString + subMatch.length]);\n\t\t\t}\n\t\t}\n\n\t\tskippedSubStrings = skippedSubStrings.sort((a, b) => a[0] - b[0]);\n\n\t\t// Check first line\n\t\tcheckNewline({ endIndex: 0 });\n\t\t// Check subsequent lines\n\t\tstyleSearch({ source: rootString, target: ['\\n'], comments: 'check' }, (match) =>\n\t\t\tcheckNewline(match),\n\t\t);\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: root,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {number} start\n\t\t * @param {number} end\n\t\t */\n\t\tfunction tryToPopSubString(start, end) {\n\t\t\tconst skippedSubString = skippedSubStrings[skippedSubStringsIndex];\n\n\t\t\tassert(skippedSubString);\n\t\t\tconst [startSubString, endSubString] = skippedSubString;\n\n\t\t\t// Excluded substring does not presented in current line\n\t\t\tif (end < startSubString) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// Compute excluded substring size regarding to current line indexes\n\t\t\tconst excluded = Math.min(end, endSubString) - Math.max(start, startSubString);\n\n\t\t\t// Current substring is out of range for next lines\n\t\t\tif (endSubString <= end) {\n\t\t\t\tskippedSubStringsIndex++;\n\t\t\t}\n\n\t\t\treturn excluded;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch | { endIndex: number }} match\n\t\t */\n\t\tfunction checkNewline(match) {\n\t\t\tlet nextNewlineIndex = rootString.indexOf('\\n', match.endIndex);\n\n\t\t\tif (rootString[nextNewlineIndex - 1] === '\\r') {\n\t\t\t\tnextNewlineIndex -= 1;\n\t\t\t}\n\n\t\t\t// Accommodate last line\n\t\t\tif (nextNewlineIndex === -1) {\n\t\t\t\tnextNewlineIndex = rootString.length;\n\t\t\t}\n\n\t\t\tconst rawLineLength = nextNewlineIndex - match.endIndex;\n\t\t\tconst excludedLength = skippedSubStrings[skippedSubStringsIndex]\n\t\t\t\t? tryToPopSubString(match.endIndex, nextNewlineIndex)\n\t\t\t\t: 0;\n\t\t\tconst lineText = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\t// Case sensitive ignorePattern match\n\t\t\tif (optionsMatches(secondaryOptions, 'ignorePattern', lineText)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the line's length is less than or equal to the specified\n\t\t\t// max, ignore it ... So anything below is liable to be complained about.\n\t\t\t// **Note that the length of any url arguments or import urls\n\t\t\t// are excluded from the calculation.**\n\t\t\tif (rawLineLength - excludedLength <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = nextNewlineIndex - 1;\n\n\t\t\tif (ignoreComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars === '/*' || nextTwoChars === '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignoreNonComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn complain(complaintIndex);\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars !== '/*' && nextTwoChars !== '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn complain(complaintIndex);\n\t\t\t}\n\n\t\t\t// If there are no spaces besides initial (indent) spaces, ignore it\n\t\t\tconst lineString = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\tif (!lineString.replace(/^\\s+/, '').includes(' ')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn complain(complaintIndex);\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a media query is a custom\n * @param {string} mediaQuery\n * @returns {boolean}\n */\nmodule.exports = function isCustomMediaQuery(mediaQuery) {\n\treturn mediaQuery.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a media feature is a range context one\n *\n * @param {string} mediaFeature feature\n * @return {boolean} If `true`, media feature is a range context one\n */\nmodule.exports = function isRangeContextMediaFeature(mediaFeature) {\n\treturn mediaFeature.includes('=') || mediaFeature.includes('<') || mediaFeature.includes('>');\n};\n","'use strict';\n\n/**\n * Check whether a media feature name is standard\n *\n * @param {string} mediaFeatureName\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxMediaFeatureName(mediaFeatureName) {\n\t// SCSS interpolation\n\tif (/#\\{.+?\\}|\\$.+/.test(mediaFeatureName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * A very generic node. Pretty much any element of a media query\r\n */\n\nfunction Node(opts) {\n  this.after = opts.after;\n  this.before = opts.before;\n  this.type = opts.type;\n  this.value = opts.value;\n  this.sourceIndex = opts.sourceIndex;\n}\n\nexports.default = Node;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Node = require('./Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Container(opts) {\n  var _this = this;\n\n  this.constructor(opts);\n\n  this.nodes = opts.nodes;\n\n  if (this.after === undefined) {\n    this.after = this.nodes.length > 0 ? this.nodes[this.nodes.length - 1].after : '';\n  }\n\n  if (this.before === undefined) {\n    this.before = this.nodes.length > 0 ? this.nodes[0].before : '';\n  }\n\n  if (this.sourceIndex === undefined) {\n    this.sourceIndex = this.before.length;\n  }\n\n  this.nodes.forEach(function (node) {\n    node.parent = _this; // eslint-disable-line no-param-reassign\n  });\n} /**\r\n   * A node that contains other nodes and support traversing over them\r\n   */\n\nContainer.prototype = Object.create(_Node2.default.prototype);\nContainer.constructor = _Node2.default;\n\n/**\r\n * Iterate over descendant nodes of the node\r\n *\r\n * @param {RegExp|string} filter - Optional. Only nodes with node.type that\r\n *    satisfies the filter will be traversed over\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.walk = function walk(filter, cb) {\n  var hasFilter = typeof filter === 'string' || filter instanceof RegExp;\n  var callback = hasFilter ? cb : filter;\n  var filterReg = typeof filter === 'string' ? new RegExp(filter) : filter;\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    var filtered = hasFilter ? filterReg.test(node.type) : true;\n    if (filtered && callback && callback(node, i, this.nodes) === false) {\n      return false;\n    }\n    if (node.nodes && node.walk(filter, cb) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Iterate over immediate children of the node\r\n *\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.each = function each() {\n  var cb = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    if (cb(node, i, this.nodes) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.default = Container;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMediaFeature = parseMediaFeature;\nexports.parseMediaQuery = parseMediaQuery;\nexports.parseMediaList = parseMediaList;\n\nvar _Node = require('./nodes/Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media feature expression, e.g. `max-width: 10px`, `(color)`\r\n *\r\n * @param {string} string - the source expression string, can be inside parens\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes, the first element being a media feature,\r\n *    the secont - its value (may be missing)\r\n */\n\nfunction parseMediaFeature(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var modesEntered = [{\n    mode: 'normal',\n    character: null\n  }];\n  var result = [];\n  var lastModeIndex = 0;\n  var mediaFeature = '';\n  var colon = null;\n  var mediaFeatureValue = null;\n  var indexLocal = index;\n\n  var stringNormalized = string;\n  // Strip trailing parens (if any), and correct the starting index\n  if (string[0] === '(' && string[string.length - 1] === ')') {\n    stringNormalized = string.substring(1, string.length - 1);\n    indexLocal++;\n  }\n\n  for (var i = 0; i < stringNormalized.length; i++) {\n    var character = stringNormalized[i];\n\n    // If entering/exiting a string\n    if (character === '\\'' || character === '\"') {\n      if (modesEntered[lastModeIndex].isCalculationEnabled === true) {\n        modesEntered.push({\n          mode: 'string',\n          isCalculationEnabled: false,\n          character: character\n        });\n        lastModeIndex++;\n      } else if (modesEntered[lastModeIndex].mode === 'string' && modesEntered[lastModeIndex].character === character && stringNormalized[i - 1] !== '\\\\') {\n        modesEntered.pop();\n        lastModeIndex--;\n      }\n    }\n\n    // If entering/exiting interpolation\n    if (character === '{') {\n      modesEntered.push({\n        mode: 'interpolation',\n        isCalculationEnabled: true\n      });\n      lastModeIndex++;\n    } else if (character === '}') {\n      modesEntered.pop();\n      lastModeIndex--;\n    }\n\n    // If a : is met outside of a string, function call or interpolation, than\n    // this : separates a media feature and a value\n    if (modesEntered[lastModeIndex].mode === 'normal' && character === ':') {\n      var mediaFeatureValueStr = stringNormalized.substring(i + 1);\n      mediaFeatureValue = {\n        type: 'value',\n        before: /^(\\s*)/.exec(mediaFeatureValueStr)[1],\n        after: /(\\s*)$/.exec(mediaFeatureValueStr)[1],\n        value: mediaFeatureValueStr.trim()\n      };\n      // +1 for the colon\n      mediaFeatureValue.sourceIndex = mediaFeatureValue.before.length + i + 1 + indexLocal;\n      colon = {\n        type: 'colon',\n        sourceIndex: i + indexLocal,\n        after: mediaFeatureValue.before,\n        value: ':' };\n      break;\n    }\n\n    mediaFeature += character;\n  }\n\n  // Forming a media feature node\n  mediaFeature = {\n    type: 'media-feature',\n    before: /^(\\s*)/.exec(mediaFeature)[1],\n    after: /(\\s*)$/.exec(mediaFeature)[1],\n    value: mediaFeature.trim()\n  };\n  mediaFeature.sourceIndex = mediaFeature.before.length + indexLocal;\n  result.push(mediaFeature);\n\n  if (colon !== null) {\n    colon.before = mediaFeature.after;\n    result.push(colon);\n  }\n\n  if (mediaFeatureValue !== null) {\n    result.push(mediaFeatureValue);\n  }\n\n  return result;\n}\n\n/**\r\n * Parses a media query, e.g. `screen and (color)`, `only tv`\r\n *\r\n * @param {string} string - the source media query string\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes and Containers\r\n */\n\nfunction parseMediaQuery(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var result = [];\n\n  // How many timies the parser entered parens/curly braces\n  var localLevel = 0;\n  // Has any keyword, media type, media feature expression or interpolation\n  // ('element' hereafter) started\n  var insideSomeValue = false;\n  var node = void 0;\n\n  function resetNode() {\n    return {\n      before: '',\n      after: '',\n      value: ''\n    };\n  }\n\n  node = resetNode();\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    // If not yet entered any element\n    if (!insideSomeValue) {\n      if (character.search(/\\s/) !== -1) {\n        // A whitespace\n        // Don't form 'after' yet; will do it later\n        node.before += character;\n      } else {\n        // Not a whitespace - entering an element\n        // Expression start\n        if (character === '(') {\n          node.type = 'media-feature-expression';\n          localLevel++;\n        }\n        node.value = character;\n        node.sourceIndex = index + i;\n        insideSomeValue = true;\n      }\n    } else {\n      // Already in the middle of some alement\n      node.value += character;\n\n      // Here parens just increase localLevel and don't trigger a start of\n      // a media feature expression (since they can't be nested)\n      // Interpolation start\n      if (character === '{' || character === '(') {\n        localLevel++;\n      }\n      // Interpolation/function call/media feature expression end\n      if (character === ')' || character === '}') {\n        localLevel--;\n      }\n    }\n\n    // If exited all parens/curlies and the next symbol\n    if (insideSomeValue && localLevel === 0 && (character === ')' || i === string.length - 1 || string[i + 1].search(/\\s/) !== -1)) {\n      if (['not', 'only', 'and'].indexOf(node.value) !== -1) {\n        node.type = 'keyword';\n      }\n      // if it's an expression, parse its contents\n      if (node.type === 'media-feature-expression') {\n        node.nodes = parseMediaFeature(node.value, node.sourceIndex);\n      }\n      result.push(Array.isArray(node.nodes) ? new _Container2.default(node) : new _Node2.default(node));\n      node = resetNode();\n      insideSomeValue = false;\n    }\n  }\n\n  // Now process the result array - to specify undefined types of the nodes\n  // and specify the `after` prop\n  for (var _i = 0; _i < result.length; _i++) {\n    node = result[_i];\n    if (_i > 0) {\n      result[_i - 1].after = node.before;\n    }\n\n    // Node types. Might not be set because contains interpolation/function\n    // calls or fully consists of them\n    if (node.type === undefined) {\n      if (_i > 0) {\n        // only `and` can follow an expression\n        if (result[_i - 1].type === 'media-feature-expression') {\n          node.type = 'keyword';\n          continue;\n        }\n        // Anything after 'only|not' is a media type\n        if (result[_i - 1].value === 'not' || result[_i - 1].value === 'only') {\n          node.type = 'media-type';\n          continue;\n        }\n        // Anything after 'and' is an expression\n        if (result[_i - 1].value === 'and') {\n          node.type = 'media-feature-expression';\n          continue;\n        }\n\n        if (result[_i - 1].type === 'media-type') {\n          // if it is the last element - it might be an expression\n          // or 'and' depending on what is after it\n          if (!result[_i + 1]) {\n            node.type = 'media-feature-expression';\n          } else {\n            node.type = result[_i + 1].type === 'media-feature-expression' ? 'keyword' : 'media-feature-expression';\n          }\n        }\n      }\n\n      if (_i === 0) {\n        // `screen`, `fn( ... )`, `#{ ... }`. Not an expression, since then\n        // its type would have been set by now\n        if (!result[_i + 1]) {\n          node.type = 'media-type';\n          continue;\n        }\n\n        // `screen and` or `#{...} (max-width: 10px)`\n        if (result[_i + 1] && (result[_i + 1].type === 'media-feature-expression' || result[_i + 1].type === 'keyword')) {\n          node.type = 'media-type';\n          continue;\n        }\n        if (result[_i + 2]) {\n          // `screen and (color) ...`\n          if (result[_i + 2].type === 'media-feature-expression') {\n            node.type = 'media-type';\n            result[_i + 1].type = 'keyword';\n            continue;\n          }\n          // `only screen and ...`\n          if (result[_i + 2].type === 'keyword') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            continue;\n          }\n        }\n        if (result[_i + 3]) {\n          // `screen and (color) ...`\n          if (result[_i + 3].type === 'media-feature-expression') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            result[_i + 2].type = 'keyword';\n            continue;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query list. Takes a possible `url()` at the start into\r\n * account, and divides the list into media queries that are parsed separately\r\n *\r\n * @param {string} string - the source media query list string\r\n *\r\n * @return {Array} an array of Nodes/Containers\r\n */\n\nfunction parseMediaList(string) {\n  var result = [];\n  var interimIndex = 0;\n  var levelLocal = 0;\n\n  // Check for a `url(...)` part (if it is contents of an @import rule)\n  var doesHaveUrl = /^(\\s*)url\\s*\\(/.exec(string);\n  if (doesHaveUrl !== null) {\n    var i = doesHaveUrl[0].length;\n    var parenthesesLv = 1;\n    while (parenthesesLv > 0) {\n      var character = string[i];\n      if (character === '(') {\n        parenthesesLv++;\n      }\n      if (character === ')') {\n        parenthesesLv--;\n      }\n      i++;\n    }\n    result.unshift(new _Node2.default({\n      type: 'url',\n      value: string.substring(0, i).trim(),\n      sourceIndex: doesHaveUrl[1].length,\n      before: doesHaveUrl[1],\n      after: /^(\\s*)/.exec(string.substring(i))[1]\n    }));\n    interimIndex = i;\n  }\n\n  // Start processing the media query list\n  for (var _i2 = interimIndex; _i2 < string.length; _i2++) {\n    var _character = string[_i2];\n\n    // Dividing the media query list into comma-separated media queries\n    // Only count commas that are outside of any parens\n    // (i.e., not part of function call params list, etc.)\n    if (_character === '(') {\n      levelLocal++;\n    }\n    if (_character === ')') {\n      levelLocal--;\n    }\n    if (levelLocal === 0 && _character === ',') {\n      var _mediaQueryString = string.substring(interimIndex, _i2);\n      var _spaceBefore = /^(\\s*)/.exec(_mediaQueryString)[1];\n      result.push(new _Container2.default({\n        type: 'media-query',\n        value: _mediaQueryString.trim(),\n        sourceIndex: interimIndex + _spaceBefore.length,\n        nodes: parseMediaQuery(_mediaQueryString, interimIndex),\n        before: _spaceBefore,\n        after: /(\\s*)$/.exec(_mediaQueryString)[1]\n      }));\n      interimIndex = _i2 + 1;\n    }\n  }\n\n  var mediaQueryString = string.substring(interimIndex);\n  var spaceBefore = /^(\\s*)/.exec(mediaQueryString)[1];\n  result.push(new _Container2.default({\n    type: 'media-query',\n    value: mediaQueryString.trim(),\n    sourceIndex: interimIndex + spaceBefore.length,\n    nodes: parseMediaQuery(mediaQueryString, interimIndex),\n    before: spaceBefore,\n    after: /(\\s*)$/.exec(mediaQueryString)[1]\n  }));\n\n  return result;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseMedia;\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _parsers = require('./parsers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media query list into an array of nodes. A typical node signature:\r\n *  {string} node.type -- one of: 'media-query', 'media-type', 'keyword',\r\n *    'media-feature-expression', 'media-feature', 'colon', 'value'\r\n *  {string} node.value -- the contents of a particular element, trimmed\r\n *    e.g.: `screen`, `max-width`, `1024px`\r\n *  {string} node.after -- whitespaces that follow the element\r\n *  {string} node.before -- whitespaces that precede the element\r\n *  {string} node.sourceIndex -- the index of the element in a source media\r\n *    query list, 0-based\r\n *  {object} node.parent -- a link to the parent node (a container)\r\n *\r\n * Some nodes (media queries, media feature expressions) contain other nodes.\r\n * They additionally have:\r\n *  {array} node.nodes -- an array of nodes of the type described here\r\n *  {funciton} node.each -- traverses direct children of the node, calling\r\n *    a callback for each one\r\n *  {funciton} node.walk -- traverses ALL descendants of the node, calling\r\n *    a callback for each one\r\n */\n\nfunction parseMedia(value) {\n  return new _Container2.default({\n    nodes: (0, _parsers.parseMediaList)(value),\n    type: 'media-query-list',\n    value: value.trim()\n  });\n}","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst { assert } = require('../utils/validateTypes');\n\nconst rangeOperators = new Set(['>=', '<=', '>', '<', '=']);\n\n/**\n * @param {string} name\n * @returns {boolean}\n */\nfunction isRangeContextName(name) {\n\t// When the node is like \"(width > 10em)\" or \"(10em < width)\"\n\t// Regex is needed because the name can either be in the first or second position\n\treturn /^(?!--)\\D/.test(name) || /^--./.test(name);\n}\n\n/**\n * @typedef {{ value: string, sourceIndex: number }} RangeContextNode\n *\n * @param {import('postcss-media-query-parser').Node} node\n * @returns {{ name: RangeContextNode, values: RangeContextNode[] }}\n */\nmodule.exports = function rangeContextNodeParser(node) {\n\t/** @type {import('postcss-value-parser').WordNode | undefined} */\n\tlet nameNode;\n\n\t/** @type {import('postcss-value-parser').WordNode[]} */\n\tconst valueNodes = [];\n\n\tvalueParser(node.value).walk((valueNode) => {\n\t\tif (valueNode.type !== 'word') return;\n\n\t\tif (rangeOperators.has(valueNode.value)) return;\n\n\t\tif (nameNode == null && isRangeContextName(valueNode.value)) {\n\t\t\tnameNode = valueNode;\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueNodes.push(valueNode);\n\t});\n\n\tassert(nameNode);\n\n\treturn {\n\t\tname: {\n\t\t\tvalue: nameNode.value,\n\t\t\tsourceIndex: node.sourceIndex + nameNode.sourceIndex,\n\t\t},\n\n\t\tvalues: valueNodes.map((valueNode) => ({\n\t\t\tvalue: valueNode.value,\n\t\t\tsourceIndex: node.sourceIndex + valueNode.sourceIndex,\n\t\t})),\n\t};\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tlet emptyLines = 0;\n\tlet lastIndex = -1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst getChars = replaceEmptyLines.bind(null, primary);\n\n\t\t/**\n\t\t * 1. walk nodes & replace enterchar\n\t\t * 2. deal with special case.\n\t\t */\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif (node.type === 'comment' && !ignoreComments) {\n\t\t\t\t\tnode.raws.left = getChars(node.raws.left);\n\t\t\t\t\tnode.raws.right = getChars(node.raws.right);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = getChars(node.raws.before);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// first node\n\t\t\tconst firstNodeRawsBefore = root.first && root.first.raws.before;\n\t\t\t// root raws\n\t\t\tconst rootRawsAfter = root.raws.after;\n\n\t\t\t// not document node\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tif ((root.document && root.document.constructor.name) !== 'Document') {\n\t\t\t\tif (firstNodeRawsBefore) {\n\t\t\t\t\troot.first.raws.before = getChars(firstNodeRawsBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (rootRawsAfter) {\n\t\t\t\t\t// when max setted 0, should be treated as 1 in this situation.\n\t\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter, true);\n\t\t\t\t}\n\t\t\t} else if (rootRawsAfter) {\n\t\t\t\t// `css in js` or `html`\n\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\temptyLines = 0;\n\t\tlastIndex = -1;\n\t\tconst rootString = root.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: rootString,\n\t\t\t\ttarget: /\\r\\n/.test(rootString) ? '\\r\\n' : '\\n',\n\t\t\t\tcomments: ignoreComments ? 'skip' : 'check',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckMatch(rootString, match.startIndex, match.endIndex, root);\n\t\t\t},\n\t\t);\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} matchStartIndex\n\t\t * @param {number} matchEndIndex\n\t\t * @param {import('postcss').Root} node\n\t\t */\n\t\tfunction checkMatch(source, matchStartIndex, matchEndIndex, node) {\n\t\t\tconst eof = matchEndIndex === source.length;\n\t\t\tlet problem = false;\n\n\t\t\t// Additional check for beginning of file\n\t\t\tif (!matchStartIndex || lastIndex === matchStartIndex) {\n\t\t\t\temptyLines++;\n\t\t\t} else {\n\t\t\t\temptyLines = 0;\n\t\t\t}\n\n\t\t\tlastIndex = matchEndIndex;\n\n\t\t\tif (emptyLines > primary) problem = true;\n\n\t\t\tif (!eof && !problem) return;\n\n\t\t\tif (problem) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: matchStartIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Additional check for end of file\n\t\t\tif (eof && primary) {\n\t\t\t\temptyLines++;\n\n\t\t\t\tif (emptyLines > primary && isEofNode(result.root, node)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: matchEndIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} maxLines\n\t\t * @param {unknown} str\n\t\t * @param {boolean?} isSpecialCase\n\t\t */\n\t\tfunction replaceEmptyLines(maxLines, str, isSpecialCase = false) {\n\t\t\tconst repeatTimes = isSpecialCase ? maxLines : maxLines + 1;\n\n\t\t\tif (repeatTimes === 0 || typeof str !== 'string') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst emptyLFLines = '\\n'.repeat(repeatTimes);\n\t\t\tconst emptyCRLFLines = '\\r\\n'.repeat(repeatTimes);\n\n\t\t\treturn /(?:\\r\\n)+/.test(str)\n\t\t\t\t? str.replace(/(\\r\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length / 2 > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyCRLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  })\n\t\t\t\t: str.replace(/(\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  });\n\t\t}\n\t};\n};\n\n/**\n * Checks whether the given node is the last node of file.\n * @param {import('stylelint').PostcssResult['root']} document - the document node with `postcss-html` and `postcss-jsx`.\n * @param {import('postcss').Root} root - the root node of css\n */\nfunction isEofNode(document, root) {\n\tif (!document || document.constructor.name !== 'Document' || !('type' in document)) {\n\t\treturn true;\n\t}\n\n\t// In the `postcss-html` and `postcss-jsx` syntax, checks that there is text after the given node.\n\tlet after;\n\n\tif (root === document.last) {\n\t\tafter = document.raws && document.raws.codeAfter;\n\t} else {\n\t\t// @ts-expect-error -- TS2345: Argument of type 'Root' is not assignable to parameter of type 'number | ChildNode'.\n\t\tconst rootIndex = document.index(root);\n\n\t\tconst nextNode = document.nodes[rootIndex + 1];\n\n\t\tafter = nextNode && nextNode.raws && nextNode.raws.codeBefore;\n\t}\n\n\treturn !String(after).trim();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxRule(rule) {\n\tif (rule.type !== 'rule') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less &:extend rule\n\tif ('extend' in rule && rule.extend) {\n\t\treturn false;\n\t}\n\n\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parser = require('postcss-selector-parser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-nesting-depth';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (depth) => `Expected nesting depth to be no more than ${depth}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-nesting-depth',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\t/**\n\t * @param {import('postcss').Node} node\n\t */\n\tconst isIgnoreAtRule = (node) =>\n\t\tisAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['blockless-at-rules', 'pseudo-classes'],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules(checkStatement);\n\t\troot.walkAtRules(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction checkStatement(statement) {\n\t\t\tif (isIgnoreAtRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isRule(statement) && !isStandardSyntaxRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst depth = nestingDepth(statement, 0);\n\n\t\t\tif (depth > primary) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {import('postcss').Node} node\n\t * @param {number} level\n\t * @returns {number}\n\t */\n\tfunction nestingDepth(node, level) {\n\t\tconst parent = node.parent;\n\n\t\tif (parent == null) {\n\t\t\tthrow new Error('The parent node must exist');\n\t\t}\n\n\t\tif (isIgnoreAtRule(parent)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// The nesting depth level's computation has finished\n\t\t// when this function, recursively called, receives\n\t\t// a node that is not nested -- a direct child of the\n\t\t// root node\n\t\tif (isRoot(parent) || (isAtRule(parent) && parent.parent && isRoot(parent.parent))) {\n\t\t\treturn level;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t */\n\t\tfunction containsPseudoClassesOnly(selector) {\n\t\t\tconst normalized = parser().processSync(selector, { lossless: false });\n\t\t\tconst selectors = normalized.split(',');\n\n\t\t\treturn selectors.every((sel) => extractPseudoRule(sel));\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} selectors\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction containsIgnoredPseudoClassesOnly(selectors) {\n\t\t\tif (!(secondaryOptions && secondaryOptions.ignorePseudoClasses)) return false;\n\n\t\t\treturn selectors.every((selector) => {\n\t\t\t\tconst pseudoRule = extractPseudoRule(selector);\n\n\t\t\t\tif (!pseudoRule) return false;\n\n\t\t\t\treturn optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoRule);\n\t\t\t});\n\t\t}\n\n\t\tif (\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'blockless-at-rules') &&\n\t\t\t\tisAtRule(node) &&\n\t\t\t\tnode.every((child) => !isDeclaration(child))) ||\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'pseudo-classes') &&\n\t\t\t\tisRule(node) &&\n\t\t\t\tcontainsPseudoClassesOnly(node.selector)) ||\n\t\t\t(isRule(node) && containsIgnoredPseudoClassesOnly(node.selectors))\n\t\t) {\n\t\t\treturn nestingDepth(parent, level);\n\t\t}\n\n\t\t// Unless any of the conditions above apply, we want to\n\t\t// add 1 to the nesting depth level and then check the parent,\n\t\t// continuing to add and move up the hierarchy\n\t\t// until we hit the root node\n\t\treturn nestingDepth(parent, level + 1);\n\t}\n};\n\n/**\n * @param {string} selector\n * @returns {string | undefined}\n */\nfunction extractPseudoRule(selector) {\n\treturn selector.startsWith('&:') && selector[2] !== ':' ? selector.slice(2) : undefined;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isStandardSyntaxKeyframesName = require('../../utils/isStandardSyntaxKeyframesName');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframes-name-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (keyframeName, pattern) => `Expected \"${keyframeName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframes-name-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regex = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules(/keyframes/i, (keyframesNode) => {\n\t\t\tconst value = keyframesNode.params;\n\n\t\t\tif (!isStandardSyntaxKeyframesName(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (regex.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(keyframesNode);\n\t\t\tconst endIndex = index + value.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [value, primary],\n\t\t\t\tnode: keyframesNode,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('./hasInterpolation');\n\n/**\n * Check whether a keyframes name is standard\n *\n * @param {string} keyframesName\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxKeyframesName(keyframesName) {\n\tif (hasInterpolation(keyframesName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   fix: ((node: import('postcss').AtRule, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function mediaFeatureColonSpaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ':' }, (match) => {\n\t\t\tcheckColon(params, match.startIndex, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst colonIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, colonIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: colonIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-colon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index);\n\t\t\t\t\tconst afterColon = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, ' ') + afterColon;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, '') + afterColon;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name, value) => `Unexpected value \"${value}\" for name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature-expression$/i, (node) => {\n\t\t\t\tif (!node.nodes) return;\n\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(node.parent.value);\n\n\t\t\t\t// Ignore boolean\n\t\t\t\tif (!node.value.includes(':') && !mediaFeatureRangeContext) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mediaFeatureNode = node.nodes.find((n) => n.type === 'media-feature');\n\n\t\t\t\tif (mediaFeatureNode == null) throw new Error('A `media-feature` node must be present');\n\n\t\t\t\tlet mediaFeatureName;\n\t\t\t\tlet values;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tmediaFeatureName = parsedRangeContext.name.value;\n\t\t\t\t\tvalues = parsedRangeContext.values;\n\t\t\t\t} else {\n\t\t\t\t\tmediaFeatureName = mediaFeatureNode.value;\n\t\t\t\t\tconst valueNode = node.nodes.find((n) => n.type === 'value');\n\n\t\t\t\t\tif (valueNode == null) throw new Error('A `value` node must be present');\n\n\t\t\t\t\tvalues = [valueNode];\n\t\t\t\t}\n\n\t\t\t\tfor (const valueNode of values) {\n\t\t\t\t\tconst value = valueNode.value;\n\t\t\t\t\tconst unprefixedMediaFeatureName = vendor.unprefixed(mediaFeatureName);\n\n\t\t\t\t\tconst allowedValuesKey = Object.keys(primary).find((featureName) =>\n\t\t\t\t\t\tmatchesStringOrRegExp(unprefixedMediaFeatureName, featureName),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (allowedValuesKey == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(primary, allowedValuesKey, value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = atRuleParamIndex(atRule) + valueNode.sourceIndex;\n\t\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tmessage: messages.rejected(mediaFeatureName, value),\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst deprecatedMediaFeatureNames = new Set([\n\t'device-aspect-ratio',\n\t'device-height',\n\t'device-width',\n\t'max-device-aspect-ratio',\n\t'max-device-height',\n\t'max-device-width',\n\t'min-device-aspect-ratio',\n\t'min-device-height',\n\t'min-device-width',\n]);\n\nconst mediaFeatureNames = uniteSets(deprecatedMediaFeatureNames, [\n\t'any-hover',\n\t'any-pointer',\n\t'aspect-ratio',\n\t'color',\n\t'color-gamut',\n\t'color-index',\n\t'display-mode',\n\t'dynamic-range',\n\t'forced-colors',\n\t'grid',\n\t'height',\n\t'hover',\n\t'inverted-colors',\n\t'light-level',\n\t'max-aspect-ratio',\n\t'max-color',\n\t'max-color-index',\n\t'max-height',\n\t'max-monochrome',\n\t'max-resolution',\n\t'max-width',\n\t'min-aspect-ratio',\n\t'min-color',\n\t'min-color-index',\n\t'min-height',\n\t'min-monochrome',\n\t'min-resolution',\n\t'min-width',\n\t'monochrome',\n\t'orientation',\n\t'overflow-block',\n\t'overflow-inline',\n\t'pointer',\n\t'prefers-color-scheme',\n\t'prefers-contrast',\n\t'prefers-reduced-motion',\n\t'prefers-reduced-transparency',\n\t'resolution',\n\t'scan',\n\t'scripting',\n\t'update',\n\t'video-dynamic-range',\n\t'width',\n]);\n\nmodule.exports = {\n\tmediaFeatureNames,\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst { mediaFeatureNames } = require('../../reference/mediaFeatures');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (mediaFeatureName) => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreMediaFeatureNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreMediaFeatureNames', value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (vendor.prefix(value) || mediaFeatureNames.has(value.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tlet hasComments = atRule.raws.params && atRule.raws.params.raw;\n\t\t\tconst mediaRule = hasComments ? hasComments : atRule.params;\n\n\t\t\tmediaParser(mediaRule).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst expectedFeatureName = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expectedFeatureName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\thasComments.slice(sourceIndex + expectedFeatureName.length);\n\n\t\t\t\t\t\tif (atRule.raws.params == null) {\n\t\t\t\t\t\t\tthrow new Error('The `AtRuleRaws` node must have a `params` property');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tatRule.raws.params.raw = hasComments;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tatRule.params =\n\t\t\t\t\t\t\tatRule.params.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\tatRule.params.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.expected(value, expectedFeatureName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isNumbery = require('../../utils/isNumbery');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst {\n\tfontWeightNonNumericKeywords,\n\tfontWeightRelativeKeywords,\n} = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-weight-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} font-weight notation`,\n\texpectedWithActual: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-weight-notation',\n\tfixable: true,\n};\n\nconst NORMAL_KEYWORD = 'normal';\n\nconst NAMED_TO_NUMERIC = new Map([\n\t['normal', '400'],\n\t['bold', '700'],\n]);\nconst NUMERIC_TO_NAMED = new Map([\n\t['400', 'normal'],\n\t['700', 'bold'],\n]);\n\n/** @type {import('stylelint').Rule<'numeric' | 'named-where-possible'>} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['numeric', 'named-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['relative'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreRelative = optionsMatches(secondaryOptions, 'ignore', 'relative');\n\n\t\troot.walkDecls(/^font(-weight)?$/i, (decl) => {\n\t\t\tconst isFontShorthandProp = decl.prop.toLowerCase() === 'font';\n\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tconst valueNodes = parsedValue.nodes;\n\n\t\t\tconst hasNumericFontWeight = valueNodes.some((node, index, nodes) => {\n\t\t\t\treturn isNumbery(node.value) && !isDivNode(nodes[index - 1]);\n\t\t\t});\n\n\t\t\tfor (const [index, valueNode] of valueNodes.entries()) {\n\t\t\t\tif (!isPossibleFontWeightNode(valueNode, index, valueNodes)) continue;\n\n\t\t\t\tconst { value } = valueNode;\n\n\t\t\t\tif (isFontShorthandProp) {\n\t\t\t\t\tif (value.toLowerCase() === NORMAL_KEYWORD && hasNumericFontWeight) {\n\t\t\t\t\t\tcontinue; // Not `normal` for font-weight\n\t\t\t\t\t}\n\n\t\t\t\t\tif (checkWeight(decl, valueNode)) {\n\t\t\t\t\t\tbreak; // Stop traverse if font-weight is processed\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcheckWeight(decl, valueNode);\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\t// Autofix after the loop ends can prevent value nodes from changing their positions during the loop.\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {import('postcss-value-parser').Node} weightValueNode\n\t\t * @returns {true | undefined}\n\t\t */\n\t\tfunction checkWeight(decl, weightValueNode) {\n\t\t\tconst weightValue = weightValueNode.value;\n\n\t\t\tif (!isStandardSyntaxValue(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lowerWeightValue = weightValue.toLowerCase();\n\n\t\t\tif (ignoreRelative && fontWeightRelativeKeywords.has(lowerWeightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primary === 'numeric') {\n\t\t\t\tif (!isNumbery(lowerWeightValue) && fontWeightNonNumericKeywords.has(lowerWeightValue)) {\n\t\t\t\t\tconst numericValue = NAMED_TO_NUMERIC.get(lowerWeightValue);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (numericValue) {\n\t\t\t\t\t\t\tweightValueNode.value = numericValue;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst msg = numericValue\n\t\t\t\t\t\t? messages.expectedWithActual(weightValue, numericValue)\n\t\t\t\t\t\t: messages.expected('numeric');\n\n\t\t\t\t\tcomplain(msg, weightValueNode);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (primary === 'named-where-possible') {\n\t\t\t\tif (isNumbery(lowerWeightValue) && NUMERIC_TO_NAMED.has(lowerWeightValue)) {\n\t\t\t\t\tconst namedValue = NUMERIC_TO_NAMED.get(lowerWeightValue);\n\n\t\t\t\t\tassertString(namedValue);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tweightValueNode.value = namedValue;\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(messages.expectedWithActual(weightValue, namedValue), weightValueNode);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t */\n\t\t\tfunction complain(message, valueNode) {\n\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex;\n\t\t\t\tconst endIndex = index + valueNode.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {boolean}\n */\nfunction isDivNode(node) {\n\treturn node !== undefined && node.type === 'div';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @param {number} index\n * @param {import('postcss-value-parser').Node[]} nodes\n * @returns {boolean}\n */\nfunction isPossibleFontWeightNode(node, index, nodes) {\n\tif (node.type !== 'word') return false;\n\n\t// Exclude `<font-size>/<line-height>` format like `16px/3`.\n\tif (isDivNode(nodes[index - 1])) return false;\n\n\tif (isDivNode(nodes[index + 1])) return false;\n\n\treturn true;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t// If there are comments in the params, the complete string\n\t\t\t// will be at atRule.raws.params.raw\n\t\t\tconst params = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst indexBoost = atRuleParamIndex(atRule);\n\t\t\t/** @type {Array<{ message: string, index: number }>} */\n\t\t\tconst problems = [];\n\n\t\t\tconst parsedParams = valueParser(params).walk((node) => {\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tconst len = valueParser.stringify(node).length;\n\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tif (/[ \\t]/.test(node.before)) {\n\t\t\t\t\t\t\tif (context.fix) node.before = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/[ \\t]/.test(node.after)) {\n\t\t\t\t\t\t\tif (context.fix) node.after = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'always') {\n\t\t\t\t\t\tif (node.before === '') {\n\t\t\t\t\t\t\tif (context.fix) node.before = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.after === '') {\n\t\t\t\t\t\t\tif (context.fix) node.after = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tatRule.params = parsedParams.toString();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const err of problems) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-colon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index + 1);\n\t\t\t\t\tconst afterColon = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst rangeOperators = ['>=', '<=', '>', '<', '='];\n\n/** @typedef {import('style-search').StyleSearchMatch} StyleSearchMatch */\n\n/**\n * @template {import('postcss').AtRule} T\n * @param {T} atRule\n * @param {(match: StyleSearchMatch, params: string, atRule: T) => void} cb\n */\nmodule.exports = function findMediaOperator(atRule, cb) {\n\tif (atRule.name.toLowerCase() !== 'media') {\n\t\treturn;\n\t}\n\n\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\tstyleSearch({ source: params, target: rangeOperators }, (match) => {\n\t\tconst before = params[match.startIndex - 1];\n\n\t\tif (before === '>' || before === '<') {\n\t\t\treturn;\n\t\t}\n\n\t\tcb(match, params, atRule);\n\t});\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before range operator',\n\trejectedBefore: () => 'Unexpected whitespace before range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-range-operator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckBeforeOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index);\n\t\t\t\t\tconst afterOperator = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkBeforeOperator(match, params, node, fix) {\n\t\t\t// The extra `+ 1` is because the match itself contains\n\t\t\t// the character before the operator\n\t\t\tchecker.before({\n\t\t\t\tsource: params,\n\t\t\t\tindex: match.startIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: match.startIndex - 1 + atRuleParamIndex(node),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected vendor-prefix',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst params = atRule.params;\n\n\t\t\tif (!isAutoprefixable.mediaFeatureName(params)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.params = isAutoprefixable.unprefix(atRule.params);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const match of matches) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: match,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst { assertString } = require('../utils/validateTypes');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule, index: number) => boolean) | null | undefined,\n *   allowTrailingComments?: boolean,\n * }} opts\n */\nmodule.exports = function mediaQueryListCommaWhitespaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ',' }, (match) => {\n\t\t\tlet index = match.startIndex;\n\n\t\t\tif (opts.allowTrailingComments) {\n\t\t\t\t// if there is a comment on the same line at after the comma, check the space after the comment.\n\t\t\t\tlet execResult;\n\n\t\t\t\twhile ((execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[0]);\n\t\t\t\t\tindex += execResult[0].length;\n\t\t\t\t}\n\n\t\t\t\tif ((execResult = /^([^\\S\\r\\n]*\\/\\/[\\s\\S]*?)\\r?\\n/.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[1]);\n\t\t\t\t\tindex += execResult[1].length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckComma(params, index, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst commaIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, commaIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: commaIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only check for the newline after the comma, while allowing\n\t\t// arbitrary indentation after the newline\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tallowTrailingComments: primary.startsWith('always'),\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = /^\\s*\\n/.test(afterComma)\n\t\t\t\t\t\t\t? beforeComma + afterComma.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t: beforeComma + context.newline + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'linebreaks';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (linebreak) => `Expected linebreak to be ${linebreak}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/linebreaks',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['unix', 'windows'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldHaveCR = primary === 'windows';\n\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif ('selector' in node) {\n\t\t\t\t\tnode.selector = fixData(node.selector);\n\t\t\t\t}\n\n\t\t\t\tif ('value' in node) {\n\t\t\t\t\tnode.value = fixData(node.value);\n\t\t\t\t}\n\n\t\t\t\tif ('text' in node) {\n\t\t\t\t\tnode.text = fixData(node.text);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = fixData(node.raws.before);\n\t\t\t\t}\n\n\t\t\t\tif (typeof node.raws.after === 'string') {\n\t\t\t\t\tnode.raws.after = fixData(node.raws.after);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (typeof root.raws.after === 'string') {\n\t\t\t\troot.raws.after = fixData(root.raws.after);\n\t\t\t}\n\t\t} else {\n\t\t\tif (root.source == null) throw new Error('The root node must have a source');\n\n\t\t\tconst lines = root.source.input.css.split('\\n');\n\n\t\t\tfor (let [i, line] of lines.entries()) {\n\t\t\t\tif (i < lines.length - 1 && !line.includes('\\r')) {\n\t\t\t\t\tline += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (hasError(line)) {\n\t\t\t\t\tconst lineNum = i + 1;\n\t\t\t\t\tconst colNum = line.length;\n\n\t\t\t\t\treportNewlineError(lineNum, colNum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} dataToCheck\n\t\t */\n\t\tfunction hasError(dataToCheck) {\n\t\t\tconst hasNewlineToVerify = /[\\r\\n]/.test(dataToCheck);\n\t\t\tconst hasCR = hasNewlineToVerify ? /\\r/.test(dataToCheck) : false;\n\n\t\t\treturn hasNewlineToVerify && hasCR !== shouldHaveCR;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} data\n\t\t */\n\t\tfunction fixData(data) {\n\t\t\tif (data) {\n\t\t\t\tlet res = data.replace(/\\r/g, '');\n\n\t\t\t\tif (shouldHaveCR) {\n\t\t\t\t\tres = res.replace(/\\n/g, '\\r\\n');\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\n\t\t * @param {number} line\n\t\t * @param {number} column\n\t\t */\n\t\tfunction reportNewlineError(line, column) {\n\t\t\t// Creating a node manually helps us to point to empty lines.\n\t\t\tconst node = postcss.rule({\n\t\t\t\tsource: {\n\t\t\t\t\tstart: { line, column, offset: 0 },\n\t\t\t\t\tinput: new postcss.Input(''),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports = function resolveNestedSelector(selector, node) {\n  var parent = node.parent;\n  var parentIsNestAtRule = parent.type === 'atrule' && parent.name === 'nest';\n\n  if (parent.type === 'root') return [selector];\n  if (parent.type !== 'rule' && !parentIsNestAtRule) return resolveNestedSelector(selector, parent);\n\n  var parentSelectors = (parentIsNestAtRule)\n    ? parent.params.split(',').map(function(s) { return s.trim(); })\n    : parent.selectors;\n\n  var resolvedSelectors = parentSelectors.reduce(function(result, parentSelector) {\n    if (selector.indexOf('&') !== -1) {\n      var newlyResolvedSelectors = resolveNestedSelector(parentSelector, parent).map(function(resolvedParentSelector) {\n        return selector.replace(/&/g, resolvedParentSelector);\n      });\n      return result.concat(newlyResolvedSelectors);\n    }\n\n    var combinedSelector = [ parentSelector, selector ].join(' ');\n    return result.concat(resolveNestedSelector(combinedSelector, parent));\n  }, []);\n\n  return resolvedSelectors;\n}\n","import e from\"postcss-selector-parser\";function s(n){if(!n)return{a:0,b:0,c:0};let t=0,c=0,o=0;if(\"universal\"==n.type)return{a:0,b:0,c:0};if(\"id\"===n.type)t+=1;else if(\"tag\"===n.type)o+=1;else if(\"class\"===n.type)c+=1;else if(\"attribute\"===n.type)c+=1;else if(function(s){return e.isPseudoElement(s)}(n))o+=1;else if(e.isPseudoClass(n))switch(n.value.toLowerCase()){case\":-moz-any\":case\":-webkit-any\":case\":any\":case\":has\":case\":is\":case\":matches\":case\":not\":if(n.nodes&&n.nodes.length>0){const e=a(n.nodes);t+=e.a,c+=e.b,o+=e.c}break;case\":where\":break;case\":nth-child\":case\":nth-last-child\":if(c+=1,n.nodes&&n.nodes.length>0){const s=n.nodes[0].nodes.findIndex((e=>\"tag\"===e.type&&\"of\"===e.value.toLowerCase()));if(s>-1){const l=[e.selector({nodes:n.nodes[0].nodes.slice(s+1),value:\"\"})];n.nodes.length>1&&l.push(...n.nodes.slice(1));const r=a(l);t+=r.a,c+=r.b,o+=r.c}}break;case\":local\":case\":global\":n.nodes&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));break;default:c+=1}else e.isContainer(n)&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));return{a:t,b:c,c:o}}function a(e){let a={a:0,b:0,c:0};return e.forEach((e=>{const n=s(e);n.a>a.a?a=n:n.a<a.a||(n.b>a.b?a=n:n.b<a.b||n.c>a.c&&(a=n))})),a}function n(e,s){return e.a===s.a?e.b===s.b?e.c-s.c:e.b-s.b:e.a-s.a}export{n as compare,s as selectorSpecificity};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * Find the at-rule in which a rule is nested.\n *\n * Returns `null` if the rule is not nested within an at-rule.\n *\n * @param {import('postcss').Rule} rule\n * @returns {null | import('postcss').AtRule}\n */\nmodule.exports = function findAtRuleContext(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn null;\n\t}\n\n\tif (isAtRule(parent)) {\n\t\treturn parent;\n\t}\n\n\tif (isRule(parent)) {\n\t\treturn findAtRuleContext(parent);\n\t}\n\n\treturn null;\n};\n","'use strict';\n\nconst htmlTags = require('html-tags');\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst deprecatedHtmlTypeSelectors = new Set([\n\t'acronym',\n\t'applet',\n\t'basefont',\n\t'big',\n\t'blink',\n\t'center',\n\t'content',\n\t'dir',\n\t'font',\n\t'frame',\n\t'frameset',\n\t'hgroup',\n\t'isindex',\n\t'keygen',\n\t'listing',\n\t'marquee',\n\t'nobr',\n\t'noembed',\n\t'plaintext',\n\t'spacer',\n\t'strike',\n\t'tt',\n\t'xmp',\n]);\n\n// typecasting htmlTags to be more generic; see https://github.com/stylelint/stylelint/pull/6013 for discussion\n/** @type {Set<string>} */\nconst standardHtmlTypeSelectors = new Set(htmlTags);\n\nconst htmlTypeSelectors = uniteSets(deprecatedHtmlTypeSelectors, standardHtmlTypeSelectors);\n\nconst mixedCaseSvgTypeSelectors = new Set([\n\t'altGlyph',\n\t'altGlyphDef',\n\t'altGlyphItem',\n\t'animateColor',\n\t'animateMotion',\n\t'animateTransform',\n\t'clipPath',\n\t'feBlend',\n\t'feColorMatrix',\n\t'feComponentTransfer',\n\t'feComposite',\n\t'feConvolveMatrix',\n\t'feDiffuseLighting',\n\t'feDisplacementMap',\n\t'feDistantLight',\n\t'feDropShadow',\n\t'feFlood',\n\t'feFuncA',\n\t'feFuncB',\n\t'feFuncG',\n\t'feFuncR',\n\t'feGaussianBlur',\n\t'feImage',\n\t'feMerge',\n\t'feMergeNode',\n\t'feMorphology',\n\t'feOffset',\n\t'fePointLight',\n\t'feSpecularLighting',\n\t'feSpotLight',\n\t'feTile',\n\t'feTurbulence',\n\t'foreignObject',\n\t'glyphRef',\n\t'linearGradient',\n\t'radialGradient',\n\t'textPath',\n]);\n\n// These are the ones that can have single-colon notation\nconst levelOneAndTwoPseudoElements = new Set(['before', 'after', 'first-line', 'first-letter']);\n\nconst shadowTreePseudoElements = new Set(['part']);\n\nconst webkitScrollbarPseudoElements = new Set([\n\t'-webkit-resizer',\n\t'-webkit-scrollbar',\n\t'-webkit-scrollbar-button',\n\t'-webkit-scrollbar-corner',\n\t'-webkit-scrollbar-thumb',\n\t'-webkit-scrollbar-track',\n\t'-webkit-scrollbar-track-piece',\n]);\n\nconst vendorSpecificPseudoElements = uniteSets(webkitScrollbarPseudoElements, [\n\t'-moz-focus-inner',\n\t'-moz-focus-outer',\n\t'-moz-list-bullet',\n\t'-moz-meter-bar',\n\t'-moz-placeholder',\n\t'-moz-progress-bar',\n\t'-moz-range-progress',\n\t'-moz-range-thumb',\n\t'-moz-range-track',\n\t'-ms-browse',\n\t'-ms-check',\n\t'-ms-clear',\n\t'-ms-expand',\n\t'-ms-fill',\n\t'-ms-fill-lower',\n\t'-ms-fill-upper',\n\t'-ms-reveal',\n\t'-ms-thumb',\n\t'-ms-ticks-after',\n\t'-ms-ticks-before',\n\t'-ms-tooltip',\n\t'-ms-track',\n\t'-ms-value',\n\t'-webkit-color-swatch',\n\t'-webkit-color-swatch-wrapper',\n\t'-webkit-calendar-picker-indicator',\n\t'-webkit-clear-button',\n\t'-webkit-date-and-time-value',\n\t'-webkit-datetime-edit',\n\t'-webkit-datetime-edit-ampm-field',\n\t'-webkit-datetime-edit-day-field',\n\t'-webkit-datetime-edit-fields-wrapper',\n\t'-webkit-datetime-edit-hour-field',\n\t'-webkit-datetime-edit-millisecond-field',\n\t'-webkit-datetime-edit-minute-field',\n\t'-webkit-datetime-edit-month-field',\n\t'-webkit-datetime-edit-second-field',\n\t'-webkit-datetime-edit-text',\n\t'-webkit-datetime-edit-week-field',\n\t'-webkit-datetime-edit-year-field',\n\t'-webkit-details-marker',\n\t'-webkit-distributed',\n\t'-webkit-file-upload-button',\n\t'-webkit-input-placeholder',\n\t'-webkit-keygen-select',\n\t'-webkit-meter-bar',\n\t'-webkit-meter-even-less-good-value',\n\t'-webkit-meter-inner-element',\n\t'-webkit-meter-optimum-value',\n\t'-webkit-meter-suboptimum-value',\n\t'-webkit-progress-bar',\n\t'-webkit-progress-inner-element',\n\t'-webkit-progress-value',\n\t'-webkit-search-cancel-button',\n\t'-webkit-search-decoration',\n\t'-webkit-search-results-button',\n\t'-webkit-search-results-decoration',\n\t'-webkit-slider-runnable-track',\n\t'-webkit-slider-thumb',\n\t'-webkit-textfield-decoration-container',\n\t'-webkit-validation-bubble',\n\t'-webkit-validation-bubble-arrow',\n\t'-webkit-validation-bubble-arrow-clipper',\n\t'-webkit-validation-bubble-heading',\n\t'-webkit-validation-bubble-message',\n\t'-webkit-validation-bubble-text-block',\n]);\n\nconst pseudoElements = uniteSets(\n\tlevelOneAndTwoPseudoElements,\n\tvendorSpecificPseudoElements,\n\tshadowTreePseudoElements,\n\t[\n\t\t'backdrop',\n\t\t'content',\n\t\t'cue',\n\t\t'file-selector-button',\n\t\t'grammar-error',\n\t\t'highlight',\n\t\t'marker',\n\t\t'placeholder',\n\t\t'selection',\n\t\t'shadow',\n\t\t'slotted',\n\t\t'spelling-error',\n\t\t'target-text',\n\t],\n);\n\nconst aNPlusBNotationPseudoClasses = new Set([\n\t'nth-column',\n\t'nth-last-column',\n\t'nth-last-of-type',\n\t'nth-of-type',\n]);\n\nconst aNPlusBOfSNotationPseudoClasses = new Set(['nth-child', 'nth-last-child']);\n\nconst atRulePagePseudoClasses = new Set(['first', 'right', 'left', 'blank']);\n\nconst linguisticPseudoClasses = new Set(['dir', 'lang']);\n\nconst logicalCombinationsPseudoClasses = new Set(['has', 'is', 'matches', 'not', 'where']);\n\nconst vendorSpecificPseudoClasses = new Set([\n\t'-khtml-drag',\n\t'-moz-any',\n\t'-moz-any-link',\n\t'-moz-broken',\n\t'-moz-drag-over',\n\t'-moz-first-node',\n\t'-moz-focusring',\n\t'-moz-full-screen',\n\t'-moz-full-screen-ancestor',\n\t'-moz-last-node',\n\t'-moz-loading',\n\t'-moz-meter-optimum',\n\t'-moz-meter-sub-optimum',\n\t'-moz-meter-sub-sub-optimum',\n\t'-moz-placeholder',\n\t'-moz-submit-invalid',\n\t'-moz-suppressed',\n\t'-moz-ui-invalid',\n\t'-moz-ui-valid',\n\t'-moz-user-disabled',\n\t'-moz-window-inactive',\n\t'-ms-fullscreen',\n\t'-ms-input-placeholder',\n\t'-webkit-drag',\n\t'-webkit-any',\n\t'-webkit-any-link',\n\t'-webkit-autofill',\n\t'-webkit-full-screen',\n\t'-webkit-full-screen-ancestor',\n]);\n\n// https://webkit.org/blog/363/styling-scrollbars/\nconst webkitScrollbarPseudoClasses = new Set([\n\t'horizontal',\n\t'vertical',\n\t'decrement',\n\t'increment',\n\t'start',\n\t'end',\n\t'double-button',\n\t'single-button',\n\t'no-button',\n\t'corner-present',\n\t'window-inactive',\n]);\n\nconst pseudoClasses = uniteSets(\n\taNPlusBNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tvendorSpecificPseudoClasses,\n\t[\n\t\t'active',\n\t\t'any-link',\n\t\t'autofill',\n\t\t'blank',\n\t\t'checked',\n\t\t'current',\n\t\t'default',\n\t\t'defined',\n\t\t'disabled',\n\t\t'empty',\n\t\t'enabled',\n\t\t'first-child',\n\t\t'first-of-type',\n\t\t'focus',\n\t\t'focus-within',\n\t\t'focus-visible',\n\t\t'fullscreen',\n\t\t'fullscreen-ancestor',\n\t\t'future',\n\t\t'host',\n\t\t'host-context',\n\t\t'hover',\n\t\t'indeterminate',\n\t\t'in-range',\n\t\t'invalid',\n\t\t'last-child',\n\t\t'last-of-type',\n\t\t'link',\n\t\t'only-child',\n\t\t'only-of-type',\n\t\t'optional',\n\t\t'out-of-range',\n\t\t'past',\n\t\t'placeholder-shown',\n\t\t'playing',\n\t\t'picture-in-picture',\n\t\t'paused',\n\t\t'read-only',\n\t\t'read-write',\n\t\t'required',\n\t\t'root',\n\t\t'scope',\n\t\t'state',\n\t\t'target',\n\t\t'unresolved',\n\t\t'user-invalid',\n\t\t'user-valid',\n\t\t'valid',\n\t\t'visited',\n\t\t'window-inactive', // for ::selection (chrome)\n\t],\n);\n\nmodule.exports = {\n\taNPlusBNotationPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tatRulePagePseudoClasses,\n\tlevelOneAndTwoPseudoElements,\n\tlinguisticPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n\tmixedCaseSvgTypeSelectors,\n\tpseudoClasses,\n\tpseudoElements,\n\tshadowTreePseudoElements,\n\thtmlTypeSelectors,\n\twebkitScrollbarPseudoClasses,\n\twebkitScrollbarPseudoElements,\n};\n","'use strict';\n\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\nmodule.exports = function nodeContextLookup() {\n\tconst contextMap = new Map();\n\n\treturn {\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {any[]} subContexts\n\t\t * @returns {Map<any, any>}\n\t\t */\n\t\tgetContext(node, ...subContexts) {\n\t\t\tif (!node.source) throw new Error('The node source must be present');\n\n\t\t\tconst nodeSource = node.source.input.from;\n\t\t\tconst baseContext = creativeGetMap(contextMap, nodeSource);\n\n\t\t\treturn subContexts.reduce((result, context) => creativeGetMap(result, context), baseContext);\n\t\t},\n\t};\n};\n\n/**\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\nfunction creativeGetMap(someMap, someThing) {\n\tif (!someMap.has(someThing)) {\n\t\tsomeMap.set(someThing, new Map());\n\t}\n\n\treturn someMap.get(someThing);\n}\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selector\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Node} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function parseSelector(selector, result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(selector);\n\t} catch (err) {\n\t\tresult.warn(`Cannot parse selector (${err})`, { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity: calculate, compare } = require('@csstools/selector-specificity');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { pseudoElements } = require('../../reference/selectors');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-descending-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-descending-specificity',\n};\n\n/** @typedef {{ selector: string, specificity: import('@csstools/selector-specificity').Specificity }} Entry */\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['selectors-within-list'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreSelectorsWithinList = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'selectors-within-list',\n\t\t);\n\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\t// Ignore nested property `foo: {};`\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignores selectors within list of selectors\n\t\t\tif (ignoreSelectorsWithinList && ruleNode.selectors.length > 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {Map<string, Entry[]>} */\n\t\t\tconst comparisonContext = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst trimSelector = selector.trim();\n\n\t\t\t\t// Ignore `.selector, { }`\n\t\t\t\tif (trimSelector === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Resolve any nested selectors before checking\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => {\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcheckSelector(s, ruleNode, comparisonContext);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {Map<string, Entry[]>} comparisonContext\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode, comparisonContext) {\n\t\t\tconst selector = selectorNode.toString();\n\t\t\tconst referenceSelector = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n\n\t\t\tif (referenceSelector === undefined) return;\n\n\t\t\tconst selectorSpecificity = calculate(selectorNode);\n\t\t\tconst entry = { selector, specificity: selectorSpecificity };\n\t\t\tconst priorComparableSelectors = comparisonContext.get(referenceSelector);\n\n\t\t\tif (priorComparableSelectors === undefined) {\n\t\t\t\tcomparisonContext.set(referenceSelector, [entry]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const priorEntry of priorComparableSelectors) {\n\t\t\t\tif (compare(selectorSpecificity, priorEntry.specificity) < 0) {\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, priorEntry.selector),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpriorComparableSelectors.push(entry);\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Root} selectorNode\n * @returns {string | undefined}\n */\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n\tconst firstChild = selectorNode.nodes[0];\n\n\tassert(firstChild);\n\tconst nodesByCombinator = firstChild.split((node) => node.type === 'combinator');\n\tconst nodesAfterLastCombinator = nodesByCombinator[nodesByCombinator.length - 1];\n\n\tassert(nodesAfterLastCombinator);\n\n\tconst nodesWithoutPseudoClasses = nodesAfterLastCombinator.filter((node) => {\n\t\treturn (\n\t\t\tnode.type !== 'pseudo' ||\n\t\t\tnode.value.startsWith('::') ||\n\t\t\tpseudoElements.has(node.value.replace(/:/g, ''))\n\t\t);\n\t});\n\n\tif (nodesWithoutPseudoClasses.length === 0) return undefined;\n\n\treturn nodesWithoutPseudoClasses.join('');\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index);\n\t\t\t\t\tconst afterComma = params.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, ' ') + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, '') + afterComma;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-source';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty source',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-empty-source',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../../utils/arrayEqual');\n\n/**\n *\n * @param {string[][]} areas\n * @param {string} name\n * @returns {boolean}\n */\nfunction isContiguousAndRectangular(areas, name) {\n\tconst indicesByRow = areas.map((row) => {\n\t\tconst indices = [];\n\t\tlet idx = row.indexOf(name);\n\n\t\twhile (idx !== -1) {\n\t\t\tindices.push(idx);\n\t\t\tidx = row.indexOf(name, idx + 1);\n\t\t}\n\n\t\treturn indices;\n\t});\n\n\tfor (let i = 0; i < indicesByRow.length; i++) {\n\t\tfor (let j = i + 1; j < indicesByRow.length; j++) {\n\t\t\tconst x = indicesByRow[i];\n\t\t\tconst y = indicesByRow[j];\n\n\t\t\tif ((x && x.length === 0) || (y && y.length === 0)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!arrayEqual(x, y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction namedAreas(areas) {\n\tconst names = new Set(areas.flat());\n\n\tnames.delete('.');\n\n\treturn [...names];\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction findNotContiguousOrRectangular(areas) {\n\treturn namedAreas(areas).filter((name) => !isContiguousAndRectangular(areas, name));\n}\n\nmodule.exports = findNotContiguousOrRectangular;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findNotContiguousOrRectangular = require('./utils/findNotContiguousOrRectangular');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'named-grid-areas-no-invalid';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedToken: () => 'Expected cell token within string',\n\texpectedSameNumber: () => 'Expected same number of cell tokens in each string',\n\texpectedRectangle: (name) => `Expected single filled-in rectangle for \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/named-grid-areas-no-invalid',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^(?:grid|grid-template|grid-template-areas)$/i, (decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (value.toLowerCase().trim() === 'none') return;\n\n\t\t\t/** @type {Array<{ values: string[], index: number, endIndex: number }>} */\n\t\t\tconst areas = [];\n\t\t\tlet reportSent = false;\n\n\t\t\tvalueParser(value).walk(({ sourceIndex, sourceEndIndex, type, value: tokenValue }) => {\n\t\t\t\tif (type !== 'string') return;\n\n\t\t\t\tif (tokenValue === '') {\n\t\t\t\t\tcomplain(messages.expectedToken(), sourceIndex, sourceEndIndex);\n\t\t\t\t\treportSent = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tareas.push({\n\t\t\t\t\tvalues: tokenValue.trim().split(' ').filter(Boolean),\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tendIndex: sourceEndIndex,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (reportSent) return;\n\n\t\t\tconst [firstArea] = areas;\n\n\t\t\tif (firstArea === undefined) return;\n\n\t\t\tconst notSameNumberArea = areas.find(\n\t\t\t\t(area) => area.values.length !== firstArea.values.length,\n\t\t\t);\n\n\t\t\tif (notSameNumberArea !== undefined) {\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedSameNumber(),\n\t\t\t\t\tnotSameNumberArea.index,\n\t\t\t\t\tnotSameNumberArea.endIndex,\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notContiguousOrRectangular = findNotContiguousOrRectangular(areas.map((a) => a.values));\n\n\t\t\tfor (const name of notContiguousOrRectangular.sort()) {\n\t\t\t\tconst area = areas.find((a) => a.values.includes(name));\n\n\t\t\t\tassert(area);\n\t\t\t\tcomplain(messages.expectedRectangle(name), area.index, area.endIndex);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t * @param {number} endIndex\n\t\t\t */\n\t\t\tfunction complain(message, index, endIndex) {\n\t\t\t\tconst start = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: start + index,\n\t\t\t\t\tendIndex: start + endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isWhitespace = require('./isWhitespace');\n\n/**\n * Returns a Boolean indicating whether the input string is only whitespace.\n *\n * @param {string} input\n * @returns {boolean}\n */\nmodule.exports = function isOnlyWhitespace(input) {\n\tfor (const element of input) {\n\t\tif (!isWhitespace(element)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isComment, isDeclaration, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-eol-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected whitespace at end of line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-eol-whitespace',\n\tfixable: true,\n};\n\nconst whitespacesToReject = new Set([' ', '\\t']);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction fixString(str) {\n\treturn str.replace(/[ \\t]+$/, '');\n}\n\n/**\n * @param {number} lastEOLIndex\n * @param {string} string\n * @param {{ ignoreEmptyLines: boolean, isRootFirst: boolean }} options\n * @returns {number}\n */\nfunction findErrorStartIndex(lastEOLIndex, string, { ignoreEmptyLines, isRootFirst }) {\n\tconst eolWhitespaceIndex = lastEOLIndex - 1;\n\n\t// If the character before newline is not whitespace, ignore\n\tif (!whitespacesToReject.has(string.charAt(eolWhitespaceIndex))) {\n\t\treturn -1;\n\t}\n\n\tif (ignoreEmptyLines) {\n\t\t// If there is only whitespace between the previous newline and\n\t\t// this newline, ignore\n\t\tconst beforeNewlineIndex = string.lastIndexOf('\\n', eolWhitespaceIndex);\n\n\t\tif (beforeNewlineIndex >= 0 || isRootFirst) {\n\t\t\tconst line = string.substring(beforeNewlineIndex, eolWhitespaceIndex);\n\n\t\t\tif (isOnlyWhitespace(line)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn eolWhitespaceIndex;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['empty-lines'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreEmptyLines = optionsMatches(secondaryOptions, 'ignore', 'empty-lines');\n\n\t\tif (context.fix) {\n\t\t\tfix(root);\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tconst reportFromIndex = (index) => {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t};\n\n\t\teachEolWhitespace(rootString, reportFromIndex, true);\n\n\t\tconst errorIndex = findErrorStartIndex(rootString.length, rootString, {\n\t\t\tignoreEmptyLines,\n\t\t\tisRootFirst: true,\n\t\t});\n\n\t\tif (errorIndex > -1) {\n\t\t\treportFromIndex(errorIndex);\n\t\t}\n\n\t\t/**\n\t\t * Iterate each whitespace at the end of each line of the given string.\n\t\t * @param {string} string - the source code string\n\t\t * @param {(index: number) => void} callback - callback the whitespace index at the end of each line.\n\t\t * @param {boolean} isRootFirst - set `true` if the given string is the first token of the root.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction eachEolWhitespace(string, callback, isRootFirst) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: string,\n\t\t\t\t\ttarget: ['\\n', '\\r'],\n\t\t\t\t\tcomments: 'check',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst index = findErrorStartIndex(match.startIndex, string, {\n\t\t\t\t\t\tignoreEmptyLines,\n\t\t\t\t\t\tisRootFirst,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tcallback(index);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Root} rootNode\n\t\t */\n\t\tfunction fix(rootNode) {\n\t\t\tlet isRootFirst = true;\n\n\t\t\trootNode.walk((node) => {\n\t\t\t\tfixText(\n\t\t\t\t\tnode.raws.before,\n\t\t\t\t\t(fixed) => {\n\t\t\t\t\t\tnode.raws.before = fixed;\n\t\t\t\t\t},\n\t\t\t\t\tisRootFirst,\n\t\t\t\t);\n\t\t\t\tisRootFirst = false;\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tfixText(node.raws.afterName, (fixed) => {\n\t\t\t\t\t\tnode.raws.afterName = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rawsParams = node.raws.params;\n\n\t\t\t\t\tif (rawsParams) {\n\t\t\t\t\t\tfixText(rawsParams.raw, (fixed) => {\n\t\t\t\t\t\t\trawsParams.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.params, (fixed) => {\n\t\t\t\t\t\t\tnode.params = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tconst rawsSelector = node.raws.selector;\n\n\t\t\t\t\tif (rawsSelector) {\n\t\t\t\t\t\tfixText(rawsSelector.raw, (fixed) => {\n\t\t\t\t\t\t\trawsSelector.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.selector, (fixed) => {\n\t\t\t\t\t\t\tnode.selector = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node) || isDeclaration(node)) {\n\t\t\t\t\tfixText(node.raws.between, (fixed) => {\n\t\t\t\t\t\tnode.raws.between = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst rawsValue = node.raws.value;\n\n\t\t\t\t\tif (rawsValue) {\n\t\t\t\t\t\tfixText(rawsValue.raw, (fixed) => {\n\t\t\t\t\t\t\trawsValue.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.value, (fixed) => {\n\t\t\t\t\t\t\tnode.value = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isComment(node)) {\n\t\t\t\t\tfixText(node.raws.left, (fixed) => {\n\t\t\t\t\t\tnode.raws.left = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!isStandardSyntaxComment(node)) {\n\t\t\t\t\t\tnode.raws.right = node.raws.right && fixString(node.raws.right);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.raws.right, (fixed) => {\n\t\t\t\t\t\t\tnode.raws.right = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tfixText(node.text, (fixed) => {\n\t\t\t\t\t\tnode.text = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node)) {\n\t\t\t\t\tfixText(node.raws.after, (fixed) => {\n\t\t\t\t\t\tnode.raws.after = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfixText(\n\t\t\t\trootNode.raws.after,\n\t\t\t\t(fixed) => {\n\t\t\t\t\trootNode.raws.after = fixed;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (typeof rootNode.raws.after === 'string') {\n\t\t\t\tconst lastEOL = Math.max(\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\n'),\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\r'),\n\t\t\t\t);\n\n\t\t\t\tif (lastEOL !== rootNode.raws.after.length - 1) {\n\t\t\t\t\trootNode.raws.after =\n\t\t\t\t\t\trootNode.raws.after.slice(0, lastEOL + 1) +\n\t\t\t\t\t\tfixString(rootNode.raws.after.slice(lastEOL + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string | undefined} value\n\t\t * @param {(text: string) => void} fixFn\n\t\t * @param {boolean} isRootFirst\n\t\t */\n\t\tfunction fixText(value, fixFn, isRootFirst = false) {\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\n\t\t\teachEolWhitespace(\n\t\t\t\tvalue,\n\t\t\t\t(index) => {\n\t\t\t\t\tconst newlineIndex = index + 1;\n\n\t\t\t\t\tfixed += fixString(value.slice(lastIndex, newlineIndex));\n\t\t\t\t\tlastIndex = newlineIndex;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (lastIndex) {\n\t\t\t\tfixed += value.slice(lastIndex);\n\t\t\t\tfixFn(fixed);\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * Check if a rule is a keyframe one\n *\n * @param {import('postcss').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function isKeyframeRule(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(parent) && parent.name.toLowerCase() === 'keyframes';\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst selectorParser = require('postcss-selector-parser');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector, firstDuplicateLine) =>\n\t\t`Unexpected duplicate selector \"${selector}\", first used at line ${firstDuplicateLine}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tdisallowInList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldDisallowDuplicateInList = secondaryOptions && secondaryOptions.disallowInList;\n\n\t\t// The top level of this map will be rule sources.\n\t\t// Each source maps to another map, which maps rule parents to a set of selectors.\n\t\t// This ensures that selectors are only checked against selectors\n\t\t// from other rules that share the same parent and the same source.\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contextSelectorSet = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\t\t\tconst resolvedSelectorList = [\n\t\t\t\t...new Set(\n\t\t\t\t\truleNode.selectors.flatMap((selector) => resolvedNestedSelector(selector, ruleNode)),\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tconst normalizedSelectorList = resolvedSelectorList.map(normalize);\n\n\t\t\t// Sort the selectors list so that the order of the constituents\n\t\t\t// doesn't matter\n\t\t\tconst sortedSelectorList = [...normalizedSelectorList].sort().join(',');\n\n\t\t\tif (!ruleNode.source) throw new Error('The rule node must have a source');\n\n\t\t\tif (!ruleNode.source.start) throw new Error('The rule source must have a start position');\n\n\t\t\tconst selectorLine = ruleNode.source.start.line;\n\n\t\t\t// Complain if the same selector list occurs twice\n\n\t\t\tlet previousDuplicatePosition;\n\t\t\t// When `disallowInList` is true, we must parse `sortedSelectorList` into\n\t\t\t// list items.\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectorListParsed = [];\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tparseSelector(sortedSelectorList, result, ruleNode, (selectors) => {\n\t\t\t\t\tselectors.each((s) => {\n\t\t\t\t\t\tconst selector = String(s);\n\n\t\t\t\t\t\tselectorListParsed.push(selector);\n\n\t\t\t\t\t\tif (contextSelectorSet.get(selector)) {\n\t\t\t\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(sortedSelectorList);\n\t\t\t}\n\n\t\t\tif (previousDuplicatePosition) {\n\t\t\t\t// If the selector isn't nested we can use its raw value; otherwise,\n\t\t\t\t// we have to approximate something for the message -- which is close enough\n\t\t\t\tconst isNestedSelector = resolvedSelectorList.join(',') !== ruleNode.selectors.join(',');\n\t\t\t\tconst selectorForMessage = isNestedSelector\n\t\t\t\t\t? resolvedSelectorList.join(', ')\n\t\t\t\t\t: ruleNode.selector;\n\n\t\t\t\treturn report({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selectorForMessage, previousDuplicatePosition),\n\t\t\t\t\tword: selectorForMessage,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst presentedSelectors = new Set();\n\t\t\tconst reportedSelectors = new Set();\n\n\t\t\t// Or complain if one selector list contains the same selector more than once\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst normalized = normalize(selector);\n\n\t\t\t\tif (presentedSelectors.has(normalized)) {\n\t\t\t\t\tif (reportedSelectors.has(normalized)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, selectorLine),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t\treportedSelectors.add(normalized);\n\t\t\t\t} else {\n\t\t\t\t\tpresentedSelectors.add(normalized);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tfor (const selector of selectorListParsed) {\n\t\t\t\t\t// [selectorLine] will not really be accurate for multi-line\n\t\t\t\t\t// selectors, such as \"bar\" in \"foo,\\nbar {}\".\n\t\t\t\t\tcontextSelectorSet.set(selector, selectorLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontextSelectorSet.set(sortedSelectorList, selectorLine);\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} selector\n * @returns {string}\n */\nfunction normalize(selector) {\n\tif (!isStandardSyntaxSelector(selector)) {\n\t\treturn selector;\n\t}\n\n\treturn selectorParser().processSync(selector, { lossless: false });\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atImport) => `Unexpected duplicate @import rule ${atImport}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-duplicate-at-import-rules',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Record<string, string[]>} */\n\t\tconst imports = {};\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst [firstParam, ...restParams] = valueParser(atRule.params).nodes;\n\n\t\t\tif (!firstParam) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// extract uri from url() if exists\n\t\t\tconst uri =\n\t\t\t\tfirstParam.type === 'function' && firstParam.value === 'url' && firstParam.nodes[0]\n\t\t\t\t\t? firstParam.nodes[0].value\n\t\t\t\t\t: firstParam.value;\n\n\t\t\t// extract media queries if any\n\t\t\tconst media = (mediaParser(valueParser.stringify(restParams)).nodes || [])\n\t\t\t\t.map((n) => n.value.replace(/\\s/g, ''))\n\t\t\t\t.filter((n) => n.length);\n\n\t\t\tlet importedUris = imports[uri];\n\t\t\tconst isDuplicate = media.length\n\t\t\t\t? media.some((q) => importedUris && importedUris.includes(q))\n\t\t\t\t: importedUris;\n\n\t\t\tif (isDuplicate) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(uri),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: atRule.toString(),\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!importedUris) {\n\t\t\t\timportedUris = imports[uri] = [];\n\t\t\t}\n\n\t\t\timportedUris.push(...media);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-invalid-position-at-import-rule';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected invalid position @import rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-invalid-position-at-import-rule',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, options) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet invalidPosition = false;\n\n\t\troot.walk((node) => {\n\t\t\tconst nodeName = ('name' in node && node.name && node.name.toLowerCase()) || '';\n\n\t\t\tif (\n\t\t\t\t(isAtRule(node) &&\n\t\t\t\t\tnodeName !== 'charset' &&\n\t\t\t\t\tnodeName !== 'import' &&\n\t\t\t\t\tnodeName !== 'layer' &&\n\t\t\t\t\t!optionsMatches(options, 'ignoreAtRules', node.name) &&\n\t\t\t\t\tisStandardSyntaxAtRule(node)) ||\n\t\t\t\t(node.type === 'rule' && isStandardSyntaxRule(node))\n\t\t\t) {\n\t\t\t\tinvalidPosition = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isAtRule(node) && nodeName === 'import' && invalidPosition) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: node.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-leading-zero';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a leading zero',\n\trejected: 'Unexpected leading zero',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-leading-zero',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst neverFixPositions = [];\n\t\t\t/** @type {Array<{ index: number }>} */\n\t\t\tconst alwaysFixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check leading zero\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tconst match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 2 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n\t\t\t\t\t// for regex. And we need the index of \".5\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - match[1].length;\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\talwaysFixPositions.unshift({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.expected, node, baseIndex + index);\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never') {\n\t\t\t\t\tconst match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null || match[2] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 3 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-00.5\"\n\t\t\t\t\t// as an input for regex. And we need the index of \"00\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneverFixPositions.unshift({\n\t\t\t\t\t\t\tstartIndex: index,\n\t\t\t\t\t\t\t// match[1].length is the length of our matched zero(s)\n\t\t\t\t\t\t\tendIndex: index + match[1].length,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.rejected, node, baseIndex + index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (alwaysFixPositions.length) {\n\t\t\t\tfor (const fixPosition of alwaysFixPositions) {\n\t\t\t\t\tconst index = fixPosition.index;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = addLeadingZero(node.params, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = addLeadingZero(node.value, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (neverFixPositions.length) {\n\t\t\t\tfor (const fixPosition of neverFixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = removeLeadingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeLeadingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} index\n * @returns {string}\n */\nfunction addLeadingZero(input, index) {\n\t// eslint-disable-next-line prefer-template\n\treturn input.slice(0, index) + '0' + input.slice(index);\n}\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'no-extra-semicolons';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected extra semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-extra-semicolons',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Node} node\n * @returns {number}\n */\nfunction getOffsetByNode(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Document | Container<ChildNode>'\n\tif (node.parent && node.parent.document) {\n\t\treturn 0;\n\t}\n\n\tconst root = node.root();\n\n\tif (!root.source) throw new Error('The root node must have a source');\n\n\tif (!node.source) throw new Error('The node must have a source');\n\n\tif (!node.source.start) throw new Error('The source must have a start position');\n\n\tconst string = root.source.input.css;\n\tconst nodeColumn = node.source.start.column;\n\tconst nodeLine = node.source.start.line;\n\tlet line = 1;\n\tlet column = 1;\n\tlet index = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (column === nodeColumn && nodeLine === line) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (string[i] === '\\n') {\n\t\t\tcolumn = 1;\n\t\t\tline += 1;\n\t\t} else {\n\t\t\tcolumn += 1;\n\t\t}\n\t}\n\n\treturn index;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.raws.after && root.raws.after.trim().length !== 0) {\n\t\t\tconst rawAfterRoot = root.raws.after;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixSemiIndices = [];\n\n\t\t\tstyleSearch({ source: rawAfterRoot, target: ';' }, (match) => {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\t\t\tcomplain(root.source.input.css.length - rawAfterRoot.length + match.startIndex);\n\t\t\t});\n\n\t\t\t// fix\n\t\t\tif (fixSemiIndices.length) {\n\t\t\t\troot.raws.after = removeIndices(rawAfterRoot, fixSemiIndices);\n\t\t\t}\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tif (isAtRule(node) && !isStandardSyntaxAtRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'rule' && !isStandardSyntaxRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.raws.before && node.raws.before.trim().length !== 0) {\n\t\t\t\tconst rawBeforeNode = node.raws.before;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\tconst rawBeforeIndexStart = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawBeforeNode, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex - rawBeforeIndexStart);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(getOffsetByNode(node) - rawBeforeNode.length + match.startIndex);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.before = removeIndices(rawBeforeNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.after === 'string' && node.raws.after.trim().length !== 0) {\n\t\t\t\tconst rawAfterNode = node.raws.after;\n\n\t\t\t\t/**\n\t\t\t\t * If the last child is a Less mixin followed by more than one semicolon,\n\t\t\t\t * node.raws.after will be populated with that semicolon.\n\t\t\t\t * Since we ignore Less mixins, exit here\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\t'last' in node &&\n\t\t\t\t\tnode.last &&\n\t\t\t\t\tnode.last.type === 'atrule' &&\n\t\t\t\t\t!isStandardSyntaxAtRule(node.last)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawAfterNode, target: ';' }, (match) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\t1 -\n\t\t\t\t\t\trawAfterNode.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.after = removeIndices(rawAfterNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.ownSemicolon === 'string') {\n\t\t\t\tconst rawOwnSemicolon = node.raws.ownSemicolon;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawOwnSemicolon, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\trawOwnSemicolon.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.ownSemicolon = removeIndices(rawOwnSemicolon, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} str\n\t\t * @param {number[]} indices\n\t\t * @returns {string}\n\t\t */\n\t\tfunction removeIndices(str, indices) {\n\t\t\tfor (const index of indices.reverse()) {\n\t\t\t\tstr = str.slice(0, index) + str.slice(index + 1);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-missing-end-of-source-newline';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing end-of-source newline',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-missing-end-of-source-newline',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source property');\n\t\t}\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\tif (root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\n\t\tif (!rootString.trim() || rootString.endsWith('\\n')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fix\n\t\tif (context.fix) {\n\t\t\troot.raws.after = context.newline;\n\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tindex: rootString.length - 1,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-invalid-double-slash-comments';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected double-slash CSS comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-invalid-double-slash-comments',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.startsWith('//')) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: decl.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tif (selector.startsWith('//')) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: ruleNode.toString(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-first-line';\nconst noEmptyFirstLineTest = /^\\s*[\\r\\n]/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-empty-first-line',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'. Property 'lang' does not exist on type 'Source'.\n\t\tif (!validOptions || root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (!rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (noEmptyFirstLineTest.test(rootString)) {\n\t\t\tif (context.fix) {\n\t\t\t\tif (root.first == null) {\n\t\t\t\t\tthrow new Error('The root node must have the first node.');\n\t\t\t\t}\n\n\t\t\t\tif (root.first.raws.before == null) {\n\t\t\t\t\tthrow new Error('The first node must have spaces before.');\n\t\t\t\t}\n\n\t\t\t\troot.first.raws.before = root.first.raws.before.trimStart();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findAnimationName = require('../../utils/findAnimationName');\nconst { animationNameKeywords } = require('../../reference/keywords');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-unknown-animations';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (animationName) => `Unexpected unknown animation name \"${animationName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-unknown-animations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declaredAnimations = new Set();\n\n\t\troot.walkAtRules(/(-(moz|webkit)-)?keyframes/i, (atRule) => {\n\t\t\tdeclaredAnimations.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'animation' || decl.prop.toLowerCase() === 'animation-name') {\n\t\t\t\tconst animationNames = findAnimationName(decl.value);\n\n\t\t\t\tif (animationNames.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const animationNameNode of animationNames) {\n\t\t\t\t\tif (animationNameKeywords.has(animationNameNode.value.toLowerCase())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declaredAnimations.has(animationNameNode.value)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst begin = declarationValueIndex(decl);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(animationNameNode.value),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: begin + animationNameNode.sourceIndex,\n\t\t\t\t\t\tendIndex: begin + animationNameNode.sourceEndIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDimension = require('./getDimension');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isVariable = require('./isVariable');\nconst { animationShorthandKeywords, basicKeywords } = require('../reference/keywords');\nconst postcssValueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\nmodule.exports = function findAnimationName(value) {\n\t/** @type {Node[]} */\n\tconst animationNames = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (nodes.length === 1 && nodes[0] && basicKeywords.has(nodes[0].value.toLowerCase())) {\n\t\treturn [nodes[0]];\n\t}\n\n\tlet shouldBeIgnored = false;\n\n\tvalueNodes.walk((valueNode) => {\n\t\tif (shouldBeIgnored) return;\n\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (valueNode.type !== 'word') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non-standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\t// Cannot find animation name if shorthand has non-standard syntax value (#5532)\n\t\t\tshouldBeIgnored = true;\n\t\t\tanimationNames.length = 0; // clears animationNames\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other animation parts\n\t\tif (animationShorthandKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore numbers with units\n\t\tconst { unit } = getDimension(valueNode);\n\n\t\tif (unit || unit === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tanimationNames.push(valueNode);\n\t});\n\n\treturn animationNames;\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line function',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-no-trailing-zeros';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected trailing zero(s)',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-no-trailing-zeros',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\.(\\d{0,100}?)(0+)(?:\\D|$)/.exec(valueNode.value);\n\n\t\t\t\t// match[1] is any numbers between the decimal and our trailing zero, could be empty\n\t\t\t\t// match[2] is our trailing zero(s)\n\t\t\t\tif (match == null || match[1] == null || match[2] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// our index is:\n\t\t\t\t//  the index of our valueNode +\n\t\t\t\t//  the index of our match +\n\t\t\t\t//  1 for our decimal +\n\t\t\t\t//  the length of our potential non-zero number match (match[1])\n\t\t\t\tconst index = valueNode.sourceIndex + match.index + 1 + match[1].length;\n\n\t\t\t\t// our startIndex is identical to our index except when we have only\n\t\t\t\t// trailing zeros after our decimal. in that case we don't need the decimal\n\t\t\t\t// either so we move our index back by 1.\n\t\t\t\tconst startIndex = match[1].length > 0 ? index : index - 1;\n\n\t\t\t\t// our end index is our original index + the length of our trailing zeros\n\t\t\t\tconst endIndex = index + match[2].length;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\t// this is the index of the _first_ trailing zero\n\t\t\t\t\tindex: baseIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = removeTrailingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeTrailingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeTrailingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected vendor-prefix \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\t//return early if property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', unprefixedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure there's a vendor prefix,\n\t\t\t// but this isn't a custom property\n\n\t\t\tif (prop[0] !== '-' || prop[1] === '-') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.property(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = isAutoprefixable.unprefix(decl.prop);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (!matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'property-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { parent } = decl;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRule(parent)) {\n\t\t\t\tconst { selector } = parent;\n\n\t\t\t\tif (selector && optionsMatches(secondaryOptions, 'ignoreSelectors', selector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst expectedProp = primary === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n\t\t\tif (prop === expectedProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = expectedProp;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(prop, expectedProp),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line function',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports.all = require('./data/all.json').properties;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst properties = require('known-css-properties').all;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected unknown property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\tconst allValidProperties = new Set(properties);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tcheckPrefixed: [isBoolean],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldCheckPrefixed = secondaryOptions && secondaryOptions.checkPrefixed;\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!shouldCheckPrefixed && vendor.prefix(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (\n\t\t\t\tparent &&\n\t\t\t\tisRule(parent) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', parent.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {import('postcss').Node | undefined} */\n\t\t\tlet node = parent;\n\n\t\t\twhile (node && node.type !== 'root') {\n\t\t\t\tif (isAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\n\t\t\tif (allValidProperties.has(prop.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: prop,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeName = attributeNode.qualifiedAttribute;\n\n\t\t\t\t\tif (!matchesStringOrRegExp(attributeName, primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('attribute');\n\t\t\t\t\tconst endIndex = index + attributeName.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(attributeName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = new Set([primary].flat());\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator } = attributeNode;\n\n\t\t\t\t\tif (!operator || primaryValues.has(operator)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('operator');\n\t\t\t\t\tconst endIndex = index + operator.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterSingleLineComment = require('../../utils/isAfterSingleLineComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before rule',\n\trejected: 'Unexpected empty line before rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/rule-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-block'],\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-rule',\n\t\t\t\t\t\t'after-single-line-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block-and-after-rule',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst expectation = /** @type {string} */ (primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment')) {\n\t\t\t\tconst prevNode = ruleNode.prev();\n\n\t\t\t\tif (prevNode && prevNode.type === 'comment') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isNested = ruleNode.parent && ruleNode.parent.type !== 'root';\n\n\t\t\t// Optionally ignore the expectation if inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore if the expectation is for multiple and the rule is single-line\n\t\t\tif (expectation.includes('multi-line') && isSingleLineString(ruleNode.toString())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = expectation.includes('always');\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-rule') && isAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block-and-after-rule') &&\n\t\t\t\t\tisNested &&\n\t\t\t\t\tisAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-single-line-comment') &&\n\t\t\t\t\tisAfterSingleLineComment(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested)\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(ruleNode.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tconst newline = context.newline;\n\n\t\t\t\tif (typeof newline !== 'string') {\n\t\t\t\t\tthrow new Error(`The \"newline\" property must be a string: ${newline}`);\n\t\t\t\t}\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(ruleNode, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(ruleNode, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: ruleNode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {boolean}\n */\nfunction isAfterRule(ruleNode) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(ruleNode);\n\n\treturn prevNode != null && prevNode.type === 'rule';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction isAfterSingleLineComment(node) {\n\tconst prevNode = node.prev();\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tprevNode.type === 'comment' &&\n\t\t!isSharedLineComment(prevNode) &&\n\t\tprevNode.source &&\n\t\tprevNode.source.start &&\n\t\tprevNode.source.end &&\n\t\tprevNode.source.start.line === prevNode.source.end.line\n\t);\n}\n\nmodule.exports = isAfterSingleLineComment;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = new Set([primary].flat());\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator } = attributeNode;\n\n\t\t\t\t\tif (!operator || !primaryValues.has(operator)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('operator');\n\t\t\t\t\tconst endIndex = index + operator.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'rule-selector-property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, selector) => `Unexpected property \"${property}\" for selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/rule-selector-property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectors = Object.keys(primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectorKey = selectors.find((selector) =>\n\t\t\t\tmatchesStringOrRegExp(ruleNode.selector, selector),\n\t\t\t);\n\n\t\t\tif (!selectorKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst disallowedProperties = primary[selectorKey];\n\n\t\t\tif (!disallowedProperties) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\truleNode.walkDecls((decl) => {\n\t\t\t\tconst { prop } = decl;\n\n\t\t\t\tif (matchesStringOrRegExp(prop, disallowedProperties)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop, ruleNode.selector),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   checkBeforeOperator: boolean,\n *   fix: ((attributeNode: import('postcss-selector-parser').Attribute) => boolean) | null,\n * }} options\n * @returns {void}\n */\nmodule.exports = function selectorAttributeOperatorSpaceChecker(options) {\n\toptions.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, options.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\tif (!operator) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst attributeNodeString = attributeNode.toString();\n\n\t\t\t\tstyleSearch({ source: attributeNodeString, target: operator }, (match) => {\n\t\t\t\t\tconst index = options.checkBeforeOperator ? match.startIndex : match.endIndex - 1;\n\n\t\t\t\t\tcheckOperator(attributeNodeString, index, rule, attributeNode, operator);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction checkOperator(source, index, node, attributeNode, operator) {\n\t\t\toptions.locationChecker({\n\t\t\t\tsource,\n\t\t\t\tindex,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (options.fix && options.fix(attributeNode)) {\n\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg.replace(\n\t\t\t\t\t\t\toptions.checkBeforeOperator\n\t\t\t\t\t\t\t\t? operator.charAt(0)\n\t\t\t\t\t\t\t\t: operator.charAt(operator.length - 1),\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + index,\n\t\t\t\t\t\tresult: options.result,\n\t\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\"`,\n\trejectedBefore: (operator) => `Unexpected whitespace before \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: true,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\tconst rawAttr = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\t\t\t\t\tconst rawAttrAfter = rawAttr && rawAttr.after;\n\n\t\t\t\t\t\t/** @type {{ attrAfter: string, setAttrAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { attrAfter, setAttrAfter } = rawAttrAfter\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tattrAfter: rawAttrAfter,\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawAttr.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\tattrAfter:\n\t\t\t\t\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.after) || '',\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.spaces.attribute.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  };\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\nmodule.exports = function isStandardSyntaxCombinator(node) {\n\t// if it's not a combinator, then it's not a standard combinator\n\tif (node.type !== 'combinator') {\n\t\treturn false;\n\t}\n\n\t// Ignore reference combinators like `/deep/`\n\tif (node.value.startsWith('/') || node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\t// ignore the combinators that are the first or last node in their container\n\tif (node.parent !== undefined && node.parent !== null) {\n\t\tconst parent = node.parent;\n\n\t\tif (node === parent.first) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node === parent.last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { value } = combinatorNode;\n\t\t\t\t\tconst normalizedValue = normalizeCombinator(value);\n\n\t\t\t\t\tif (!primary.includes(normalizedValue)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { sourceIndex: index, raws } = combinatorNode;\n\t\t\t\t\tconst endIndex = index + ((raws && raws.value) || value).length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(normalizedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\"`,\n\trejectedAfter: (operator) => `Unexpected whitespace after \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst checker = whitespaceChecker('space', primary, messages);\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: false,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\t/** @type {{ operatorAfter: string, setOperatorAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { operatorAfter, setOperatorAfter } = (() => {\n\t\t\t\t\t\t\tconst rawOperator = attributeNode.raws.operator;\n\n\t\t\t\t\t\t\tif (rawOperator) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperator.slice(\n\t\t\t\t\t\t\t\t\t\tattributeNode.operator ? attributeNode.operator.length : 0,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tdelete attributeNode.raws.operator;\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces) attributeNode.raws.spaces = {};\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces.operator)\n\t\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rawSpacesOperator =\n\t\t\t\t\t\t\t\tattributeNode.raws.spaces && attributeNode.raws.spaces.operator;\n\t\t\t\t\t\t\tconst rawOperatorAfter = rawSpacesOperator && rawSpacesOperator.after;\n\n\t\t\t\t\t\t\tif (rawOperatorAfter) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawSpacesOperator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperatorAfter:\n\t\t\t\t\t\t\t\t\t(attributeNode.spaces.operator && attributeNode.spaces.operator.after) || '',\n\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.operator) attributeNode.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\tattributeNode.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-no-duplicate-custom-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-custom-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst decls = new Set();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isDuplicate = decls.has(prop);\n\n\t\t\t\tif (isDuplicate) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdecls.add(prop);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\n\n/**\n * @typedef {(args: { source: string, index: number, errTarget: string, err: (message: string) => void }) => void} LocationChecker\n *\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: LocationChecker,\n *   locationType: 'before' | 'after',\n *   checkedRuleName: string,\n *   fix: ((combinator: import('postcss-selector-parser').Combinator) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorCombinatorSpaceChecker(opts) {\n\tlet hasFixed;\n\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\thasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, opts.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkCombinators((node) => {\n\t\t\t\t// Ignore non-standard combinators\n\t\t\t\tif (!isStandardSyntaxCombinator(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore spaced descendant combinator\n\t\t\t\tif (/\\s/.test(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check the exist of node in prev of the combinator.\n\t\t\t\t// in case some that aren't the first begin with combinators (nesting syntax)\n\t\t\t\tif (opts.locationType === 'before' && !node.prev()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parentParentNode = node.parent && node.parent.parent;\n\n\t\t\t\t// Ignore pseudo-classes selector like `.foo:nth-child(2n + 1) {}`\n\t\t\t\tif (parentParentNode && parentParentNode.type === 'pseudo') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\t\t\t\tconst index =\n\t\t\t\t\tnode.value.length > 1 && opts.locationType === 'before'\n\t\t\t\t\t\t? sourceIndex\n\t\t\t\t\t\t: sourceIndex + node.value.length - 1;\n\n\t\t\t\tcheck(selector, node, index, rule, sourceIndex);\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {import('postcss-selector-parser').Combinator} combinator\n\t * @param {number} index\n\t * @param {import('postcss').Node} node\n\t * @param {number} sourceIndex\n\t */\n\tfunction check(source, combinator, index, node, sourceIndex) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terrTarget: combinator.value,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(combinator)) {\n\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (combinator) => `Expected single space before \"${combinator}\"`,\n\trejectedBefore: (combinator) => `Unexpected whitespace before \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tlocationType: 'before',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.before = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.before = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { value } = combinatorNode;\n\t\t\t\t\tconst normalizedValue = normalizeCombinator(value);\n\n\t\t\t\t\tif (primary.includes(normalizedValue)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { sourceIndex: index, raws } = combinatorNode;\n\t\t\t\t\tconst endIndex = index + ((raws && raws.value) || value).length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(normalizedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (combinator) => `Expected single space after \"${combinator}\"`,\n\trejectedAfter: (combinator) => `Unexpected whitespace after \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tlocationType: 'after',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.after = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.after = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getRuleSelector = require('../../utils/getRuleSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (value) => `Expected quotes around \"${value}\"`,\n\trejected: (value) => `Unexpected quotes around \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-quotes',\n\tfixable: true,\n};\n\nconst acceptedQuoteMark = '\"';\n\n/** @type {import('stylelint').Rule<'always' | 'never'>} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(getRuleSelector(ruleNode), result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator, value, quoted } = attributeNode;\n\n\t\t\t\t\tif (!operator || !value) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!quoted && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = acceptedQuoteMark;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expected(value), attributeNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (quoted && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejected(value), attributeNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {import('postcss-selector-parser').Attribute} attrNode\n\t\t\t */\n\t\t\tfunction complain(message, attrNode) {\n\t\t\t\tconst index = attrNode.sourceIndex + attrNode.offsetOf('value');\n\t\t\t\tconst value = attrNode.raws.value || attrNode.value || '';\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {string}\n */\nmodule.exports = function getRuleSelector(ruleNode) {\n\tconst raws = ruleNode.raws;\n\n\treturn (raws.selector && raws.selector.raw) || ruleNode.selector;\n};\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix: ((rule: import('postcss').Rule, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorListCommaWhitespaceChecker(opts) {\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: selector,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckDelimiter(selector, match.startIndex, rule);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Rule} node\n\t */\n\tfunction checkDelimiter(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst spaceIndex = beforeSelector.search(/\\s+$/);\n\n\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\tbeforeSelector =\n\t\t\t\t\t\t\t\tbeforeSelector.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\tbeforeSelector.slice(spaceIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbeforeSelector += context.newline;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'never-multi-line') {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get raw selector so we can allow end-of-line comments, e.g.\n\t\t\t// a, /* comment */\n\t\t\t// b {}\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixIndices = [];\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: selector,\n\t\t\t\t\ttarget: ',',\n\t\t\t\t\tfunctionArguments: 'skip',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst nextChars = selector.slice(match.endIndex);\n\n\t\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t\t// ending the comment so we're fine\n\t\t\t\t\tif (/^\\s+\\/\\//.test(nextChars)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\t\tconst indextoCheckAfter = /^\\s+\\/\\*/.test(nextChars)\n\t\t\t\t\t\t? selector.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t\t: match.startIndex;\n\n\t\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\t\tsource: selector,\n\t\t\t\t\t\tindex: indextoCheckAfter,\n\t\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tfixIndices.push(indextoCheckAfter + 1);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: match.startIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixIndices.length) {\n\t\t\t\tlet fixedSelector = selector;\n\n\t\t\t\tfor (const index of fixIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = fixedSelector.slice(0, index);\n\t\t\t\t\tlet afterSelector = fixedSelector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = context.newline + afterSelector;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tfixedSelector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst {\n\taNPlusBOfSNotationPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n} = require('../reference/selectors');\n\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Node} node - postcss-selector-parser node (of type pseudo)\n * @return {node is import('postcss-selector-parser').Pseudo} If `true`, the node is a context-functional pseudo-class\n */\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n\tif (node.type === 'pseudo') {\n\t\tconst normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n\n\t\treturn (\n\t\t\tlogicalCombinationsPseudoClasses.has(normalisedParentName) ||\n\t\t\taNPlusBOfSNotationPseudoClasses.has(normalisedParentName)\n\t\t);\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * @param {unknown} value\n */\nmodule.exports = function isNonNegativeInteger(value) {\n\treturn Number.isInteger(value) && typeof value === 'number' && value >= 0;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-attribute';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} attribute ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-attribute',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAttributes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type !== 'attribute') {\n\t\t\t\t\t// Not an attribute node -> ignore\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAttributes', childNode.attribute)) {\n\t\t\t\t\t// it's an attribute that is supposed to be ignored\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\ttotal += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (nonSpaceCharacter) => `Unexpected \"${nonSpaceCharacter}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-descendant-combinator-no-non-space',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t// Return early for selectors containing comments\n\t\t\t// TODO: renable when parser and stylelint are compatible\n\t\t\tif (selector.includes('/*')) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (combinatorNode.value !== ' ') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = combinatorNode.toString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue.includes('  ') ||\n\t\t\t\t\t\tvalue.includes('\\t') ||\n\t\t\t\t\t\tvalue.includes('\\n') ||\n\t\t\t\t\t\tvalue.includes('\\r')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (context.fix && /^\\s+$/.test(value)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\tif (!combinatorNode.raws) combinatorNode.raws = {};\n\n\t\t\t\t\t\t\tcombinatorNode.raws.value = ' ';\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>, { splitList: boolean, ignore: string[] }>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString, isRegExp],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-block'],\n\t\t\t\t\tsplitList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreInsideBlock = optionsMatches(secondaryOptions, 'ignore', 'inside-block');\n\t\tconst splitList = secondaryOptions && secondaryOptions.splitList;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (ignoreInsideBlock) {\n\t\t\t\tconst { parent } = ruleNode;\n\t\t\t\tconst isInsideBlock = parent && parent.type !== 'root';\n\n\t\t\t\tif (isInsideBlock) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (splitList) {\n\t\t\t\truleNode.selectors.forEach((selector) => {\n\t\t\t\t\tif (matchesStringOrRegExp(selector, primary)) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst { selector, raws } = ruleNode;\n\n\t\t\t\tif (matchesStringOrRegExp(selector, primary)) {\n\t\t\t\t\tconst word = (raws.selector && raws.selector.raw) || selector;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-irregular-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\tunexpected: 'Unexpected irregular whitespace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-irregular-whitespace',\n};\n\nconst IRREGULAR_WHITESPACES = [\n\t'\\u000B', // Line Tabulation (\\v) - <VT>\n\t'\\u000C', // Form Feed (\\f) - <FF>\n\t'\\u00A0', // No-Break Space - <NBSP>\n\t'\\u0085', // Next Line\n\t'\\u1680', // Ogham Space Mark\n\t'\\u180E', // Mongolian Vowel Separator - <MVS>\n\t'\\uFEFF', // Zero Width No-Break Space - <BOM>\n\t'\\u2000', // En Quad\n\t'\\u2001', // Em Quad\n\t'\\u2002', // En Space - <ENSP>\n\t'\\u2003', // Em Space - <EMSP>\n\t'\\u2004', // Tree-Per-Em\n\t'\\u2005', // Four-Per-Em\n\t'\\u2006', // Six-Per-Em\n\t'\\u2007', // Figure Space\n\t'\\u2008', // Punctuation Space - <PUNCSP>\n\t'\\u2009', // Thin Space\n\t'\\u200A', // Hair Space\n\t'\\u200B', // Zero Width Space - <ZWSP>\n\t'\\u2028', // Line Separator\n\t'\\u2029', // Paragraph Separator\n\t'\\u202F', // Narrow No-Break Space\n\t'\\u205F', // Medium Mathematical Space\n\t'\\u3000', // Ideographic Space\n];\n\nconst IRREGULAR_WHITESPACES_PATTERN = new RegExp(`([${IRREGULAR_WHITESPACES.join('')}])`);\n\n/**\n * @param {string} str\n * @returns {string | null}\n */\nconst findIrregularWhitespace = (str) => {\n\tconst result = IRREGULAR_WHITESPACES_PATTERN.exec(str);\n\n\treturn (result && result[1]) || null;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string | undefined} value\n\t\t */\n\t\tconst validate = (node, value) => {\n\t\t\tconst issue = value && findIrregularWhitespace(value);\n\n\t\t\tif (issue) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage: messages.unexpected,\n\t\t\t\t\tnode,\n\t\t\t\t\tword: issue,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tvalidate(atRule, atRule.name);\n\t\t\tvalidate(atRule, atRule.params);\n\t\t\tvalidate(atRule, atRule.raws.before);\n\t\t\tvalidate(atRule, atRule.raws.after);\n\t\t\tvalidate(atRule, atRule.raws.afterName);\n\t\t\tvalidate(atRule, atRule.raws.between);\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tvalidate(ruleNode, ruleNode.selector);\n\t\t\tvalidate(ruleNode, ruleNode.raws.before);\n\t\t\tvalidate(ruleNode, ruleNode.raws.after);\n\t\t\tvalidate(ruleNode, ruleNode.raws.between);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalidate(decl, decl.prop);\n\t\t\tvalidate(decl, decl.value);\n\t\t\tvalidate(decl, decl.raws.before);\n\t\t\tvalidate(decl, decl.raws.between);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-combinators';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${\n\t\t\tmax === 1 ? 'combinator' : 'combinators'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-combinators',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'combinator') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.includes('always')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.includes('never')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-brackets-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"[\"',\n\trejectedOpening: 'Unexpected whitespace after \"[\"',\n\texpectedClosing: 'Expected single space before \"]\"',\n\trejectedClosing: 'Unexpected whitespace before \"]\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-brackets-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tlet hasFixed;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeSelectorString = attributeNode.toString();\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: '[' }, (match) => {\n\t\t\t\t\t\tconst nextCharIsSpace = attributeSelectorString[match.startIndex + 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex + 1;\n\n\t\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: ']' }, (match) => {\n\t\t\t\t\t\tconst prevCharIsSpace = attributeSelectorString[match.startIndex - 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex - 1;\n\n\t\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixBefore(attributeNode) {\n\t\tconst spacesAttribute = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\tconst rawAttrBefore = spacesAttribute && spacesAttribute.before;\n\n\t\t/** @type {{ attrBefore: string, setAttrBefore: (fixed: string) => void }} */\n\t\tconst { attrBefore, setAttrBefore } = rawAttrBefore\n\t\t\t? {\n\t\t\t\t\tattrBefore: rawAttrBefore,\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tspacesAttribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tattrBefore:\n\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.before) || '',\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\tattributeNode.spaces.attribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ''));\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixAfter(attributeNode) {\n\t\tconst key = attributeNode.operator\n\t\t\t? attributeNode.insensitive\n\t\t\t\t? 'insensitive'\n\t\t\t\t: 'value'\n\t\t\t: 'attribute';\n\n\t\tconst rawSpaces = attributeNode.raws.spaces && attributeNode.raws.spaces[key];\n\t\tconst rawAfter = rawSpaces && rawSpaces.after;\n\n\t\tconst spaces = attributeNode.spaces[key];\n\n\t\t/** @type {{ after: string, setAfter: (fixed: string) => void }} */\n\t\tconst { after, setAfter } = rawAfter\n\t\t\t? {\n\t\t\t\t\tafter: rawAfter,\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\trawSpaces.after = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tafter: (spaces && spaces.after) || '',\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces[key]) attributeNode.spaces[key] = {};\n\n\t\t\t\t\t\t// @ts-expect-error -- TS2532: Object is possibly 'undefined'.\n\t\t\t\t\t\tattributeNode.spaces[key].after = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ''));\n\t\t}\n\t}\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-pseudo-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} pseudo-${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-pseudo-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Exclude pseudo elements from the count\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'pseudo' &&\n\t\t\t\t\t(childNode.value.includes('::') ||\n\t\t\t\t\t\tlevelOneAndTwoPseudoElements.has(childNode.value.toLowerCase().slice(1)))\n\t\t\t\t) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'pseudo') {\n\t\t\t\t\ttotal += 1;\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\tcheckSelector(selectorTree, ruleNode);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newSelectorString = selector\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = newSelectorString;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = newSelectorString;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tviolatedLFNewLinesRegex.test(selector) ||\n\t\t\t\tviolatedCRLFNewLinesRegex.test(selector)\n\t\t\t) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorParser = require('postcss-selector-parser');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-universal';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} universal ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-universal',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAfterCombinators: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\t// All logical combinations will be resolved as nested selector in `postcss-resolve-nested-selector`\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tconst prevChildNode = childNode.prev();\n\t\t\t\tconst prevChildNodeValue = prevChildNode && prevChildNode.value;\n\n\t\t\t\tif (childNode.type === 'universal') {\n\t\t\t\t\tif (!optionsMatches(secondaryOptions, 'ignoreAfterCombinators', prevChildNodeValue)) {\n\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectors = [];\n\n\t\t\tselectorParser()\n\t\t\t\t.astSync(ruleNode.selector)\n\t\t\t\t.walk((node) => {\n\t\t\t\t\tif (node.type === 'selector') {\n\t\t\t\t\t\tselectors.push(String(node).trim());\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tfor (const selector of selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-id';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-id',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreContextFunctionalPseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'selector' ||\n\t\t\t\t\t(isContextFunctionalPseudoClass(childNode) &&\n\t\t\t\t\t\t!isIgnoredContextFunctionalPseudoClass(childNode))\n\t\t\t\t) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'id') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredContextFunctionalPseudoClass(node) {\n\t\t\treturn (\n\t\t\t\tnode.type === 'pseudo' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreContextFunctionalPseudoClasses', node.value)\n\t\t\t);\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst {\n\tisPseudoClass,\n\tisAttribute,\n\tisClassName,\n\tisUniversal,\n\tisIdentifier,\n\tisTag,\n} = require('postcss-selector-parser');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-not-notation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} :not() pseudo-class notation`,\n});\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-not-notation',\n\tfixable: true,\n};\n\n/** @typedef {import('postcss-selector-parser').Node} Node */\n/** @typedef {import('postcss-selector-parser').Selector} Selector */\n/** @typedef {import('postcss-selector-parser').Pseudo} Pseudo */\n\n/**\n * @param {Node} node\n * @returns {boolean}\n */\nconst isSimpleSelector = (node) =>\n\tisPseudoClass(node) ||\n\tisAttribute(node) ||\n\tisClassName(node) ||\n\tisUniversal(node) ||\n\tisIdentifier(node) ||\n\tisTag(node);\n\n/**\n * @param {Node} node\n * @returns {node is Pseudo}\n */\nconst isNot = (node) =>\n\tisPseudoClass(node) && node.value !== undefined && node.value.toLowerCase() === ':not';\n\n/**\n * @param {Selector[]} list\n * @returns {boolean}\n */\nconst isSimple = (list) => {\n\tif (list.length > 1) return false;\n\n\tassert(list[0], 'list is never empty');\n\tconst [first, second] = list[0].nodes;\n\n\tif (!first) return true;\n\n\tif (second) return false;\n\n\treturn isSimpleSelector(first) && !isNot(first);\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['simple', 'complex'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) return;\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':not(')) return;\n\n\t\t\tif (!isStandardSyntaxSelector(selector)) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (container) => {\n\t\t\t\tcontainer.walkPseudos((pseudo) => {\n\t\t\t\t\tif (!isNot(pseudo)) return;\n\n\t\t\t\t\tif (primary === 'complex') {\n\t\t\t\t\t\tconst prev = pseudo.prev();\n\t\t\t\t\t\tconst hasConsecutiveNot = prev && isNot(prev);\n\n\t\t\t\t\t\tif (!hasConsecutiveNot) return;\n\n\t\t\t\t\t\tif (context.fix) return fixComplex(prev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst selectors = pseudo.nodes;\n\n\t\t\t\t\t\tif (isSimple(selectors)) return;\n\n\t\t\t\t\t\tconst mustFix =\n\t\t\t\t\t\t\tcontext.fix &&\n\t\t\t\t\t\t\tselectors.length > 1 &&\n\t\t\t\t\t\t\tselectors[1] &&\n\t\t\t\t\t\t\t(selectors[1].nodes.length === 0 ||\n\t\t\t\t\t\t\t\tselectors.every(({ nodes }) => nodes.length === 1));\n\n\t\t\t\t\t\tif (mustFix) return fixSimple(pseudo);\n\t\t\t\t\t}\n\n\t\t\t\t\tassert(pseudo.source && pseudo.source.end);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tendIndex: pseudo.source.end.column,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {Pseudo} not\n */\nfunction fixSimple(not) {\n\tconst simpleSelectors = not.nodes\n\t\t.filter(({ nodes }) => nodes[0] && isSimpleSelector(nodes[0]))\n\t\t.map((s) => {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = '';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\n\t\t\treturn s;\n\t\t});\n\tconst firstSelector = simpleSelectors.shift();\n\n\tassert(firstSelector);\n\tassert(not.parent);\n\n\tnot.empty();\n\tnot.nodes.push(firstSelector);\n\n\tfor (const s of simpleSelectors) {\n\t\tconst last = not.parent.last;\n\n\t\tnot.parent.insertAfter(last, last.clone({ nodes: [s] }));\n\t}\n}\n\n/**\n * @param {Pseudo} previousNot\n */\nfunction fixComplex(previousNot) {\n\tconst indentAndTrimRight = (/** @type {Selector[]} */ selectors) => {\n\t\tfor (const s of selectors) {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = ' ';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\t\t}\n\t};\n\tconst [head, ...tail] = previousNot.nodes;\n\tlet node = previousNot.next();\n\n\tif (head == null || head.nodes.length === 0) return;\n\n\tassert(head.nodes[0]);\n\thead.nodes[0].rawSpaceBefore = '';\n\thead.nodes[0].rawSpaceAfter = '';\n\tindentAndTrimRight(tail);\n\n\twhile (isNot(node)) {\n\t\tconst selectors = node.nodes;\n\t\tconst prev = node;\n\n\t\tindentAndTrimRight(selectors);\n\t\tpreviousNot.nodes = previousNot.nodes.concat(selectors);\n\t\tnode = node.next();\n\t\tprev.remove();\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-id-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-id-pattern',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkIds((selectorNode) => {\n\t\t\t\t\tif (normalizedPattern.test(selectorNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selector = String(selectorNode);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { keyframeSelectorKeywords } = require('../reference/keywords');\n\n/**\n * Check whether a string is a keyframe selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isKeyframeSelector(selector) {\n\tif (keyframeSelectorKeywords.has(selector)) {\n\t\treturn true;\n\t}\n\n\t// Percentages\n\tif (/^(?:\\d+|\\d*\\.\\d+)%$/.test(selector)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst {\n\taNPlusBNotationPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n\tshadowTreePseudoElements,\n} = require('../reference/selectors');\n\n/**\n * Check whether a type selector is standard\n *\n * @param {import('postcss-selector-parser').Tag} node postcss-selector-parser node (of type tag)\n * @return {boolean} If `true`, the type selector is standard\n */\nmodule.exports = function isStandardSyntaxTypeSelector(node) {\n\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t// as \"tags\", so we need to ignore them ourselves.\n\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t// should be the :nth-child pseudo node.\n\tif (!node.parent || !node.parent.parent) {\n\t\treturn false;\n\t}\n\n\tconst _node$parent$parent = node.parent.parent;\n\tconst parentType = _node$parent$parent.type;\n\tconst parentValue = _node$parent$parent.value;\n\n\tif (parentValue) {\n\t\tconst normalisedParentName = parentValue.toLowerCase().replace(/:+/, '');\n\n\t\tif (\n\t\t\tparentType === 'pseudo' &&\n\t\t\t(aNPlusBNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\taNPlusBOfSNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tlinguisticPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tshadowTreePseudoElements.has(normalisedParentName))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// &-bar is a nesting selector combined with a suffix\n\tif (node.prev() && node.prev().type === 'nesting') {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// Reference combinators like `/deep/`\n\tif (node.value.startsWith('/') && node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-type';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} type ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-type',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDescendant = optionsMatches(secondaryOptions, 'ignore', 'descendant');\n\t\tconst ignoreChild = optionsMatches(secondaryOptions, 'ignore', 'child');\n\t\tconst ignoreCompounded = optionsMatches(secondaryOptions, 'ignore', 'compounded');\n\t\tconst ignoreNextSibling = optionsMatches(secondaryOptions, 'ignore', 'next-sibling');\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', childNode.value)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreChild && hasChildCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreCompounded && hasCompoundSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\treturn childNode.type === 'tag' ? total + 1 : total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-selector-parser').Node} SelectorNode */\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasDescendantCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isDescendantCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasChildCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isChildCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasCompoundSelector(node) {\n\tif (node.prev() && !isCombinator(node.prev())) {\n\t\treturn true;\n\t}\n\n\treturn node.next() && !isCombinator(node.next());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasNextSiblingCombinator(node) {\n\treturn node.prev() && isNextSiblingCombinator(node.prev());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isCombinator(node) {\n\tif (!node) return false;\n\n\treturn node.type === 'combinator';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isDescendantCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && isString(node.value) && isOnlyWhitespace(node.value);\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isChildCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && node.value === '>';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isNextSiblingCombinator(node) {\n\treturn isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (!pseudoNode.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paramString = pseudoNode.map((node) => String(node)).join(',');\n\t\t\t\t\tconst nextCharIsSpace = paramString.startsWith(' ');\n\t\t\t\t\tconst openIndex = pseudoNode.sourceIndex + pseudoNode.value.length + 1;\n\n\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst prevCharIsSpace = paramString.endsWith(' ');\n\t\t\t\t\tconst closeIndex = openIndex + paramString.length - 1;\n\n\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setFirstNodeSpaceBefore(node, value) {\n\tconst target = node.first;\n\n\tif (target.type === 'selector') {\n\t\tsetFirstNodeSpaceBefore(target, value);\n\t} else {\n\t\ttarget.spaces.before = value;\n\t}\n}\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setLastNodeSpaceAfter(node, value) {\n\tconst target = node.last;\n\n\tif (target.type === 'selector') {\n\t\tsetLastNodeSpaceAfter(target, value);\n\t} else {\n\t\ttarget.spaces.after = value;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected vendor-prefix \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst { value } = pseudoNode;\n\n\t\t\t\t\tif (!isAutoprefixable.selector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\truleNode.selector = isAutoprefixable.unprefix(selector);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected qualifying type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-no-qualifying-type',\n};\n\nconst selectorCharacters = ['#', '.', '['];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isSelectorCharacters(value) {\n\treturn selectorCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {import('postcss-selector-parser').Tag} node\n * @returns {Array<import('postcss-selector-parser').Node>}\n */\nfunction getRightNodes(node) {\n\tconst result = [];\n\n\t/** @type {import('postcss-selector-parser').Node} */\n\tlet rightNode = node;\n\n\twhile ((rightNode = rightNode.next())) {\n\t\tif (rightNode.type === 'combinator') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(rightNode);\n\t}\n\n\treturn result;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [true],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['attribute', 'class', 'id'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreId = optionsMatches(secondaryOptions, 'ignore', 'id');\n\t\tconst ignoreClass = optionsMatches(secondaryOptions, 'ignore', 'class');\n\t\tconst ignoreAttribute = optionsMatches(secondaryOptions, 'ignore', 'attribute');\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isSelectorCharacters(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-selector-parser').Root} selectorAST\n\t\t\t */\n\t\t\tfunction checkSelector(selectorAST) {\n\t\t\t\tselectorAST.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) return;\n\n\t\t\t\t\tconst selectorParent = tagNode.parent;\n\n\t\t\t\t\tif (selectorParent && selectorParent.nodes.length === 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectorNodes = getRightNodes(tagNode);\n\n\t\t\t\t\tfor (const selectorNode of selectorNodes) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(selectorNode.type === 'id' && !ignoreId) ||\n\t\t\t\t\t\t\t(selectorNode.type === 'class' && !ignoreClass) ||\n\t\t\t\t\t\t\t(selectorNode.type === 'attribute' && !ignoreAttribute)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst selector = [tagNode, ...selectorNodes].join('').trimStart();\n\n\t\t\t\t\t\t\tcomplain(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const resolvedSelector of resolvedNestedSelector(ruleNode.selector, ruleNode)) {\n\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, checkSelector);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} selector\n\t\t\t */\n\t\t\tfunction complain(selector) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolveNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-class-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-class-pattern',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp, { resolveNestedSelector: boolean }>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isRegExp, isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tresolveNestedSelectors: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldResolveNestedSelectors = Boolean(\n\t\t\tsecondaryOptions && secondaryOptions.resolveNestedSelectors,\n\t\t);\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst { selector, selectors } = ruleNode;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only bother resolving selectors that have an interpolating &\n\t\t\tif (shouldResolveNestedSelectors && hasInterpolatingAmpersand(selector)) {\n\t\t\t\tfor (const nestedSelector of resolveNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(nestedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(nestedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparseSelector(selector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tselectorNode.walkClasses((classNode) => {\n\t\t\t\tconst { value, sourceIndex: index } = classNode;\n\n\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selector = String(classNode);\n\n\t\t\t\t// TODO: `selector` may be resolved. So, getting its raw value may be pretty hard.\n\t\t\t\t//       It means `endIndex` may be inaccurate (though non-standard selectors).\n\t\t\t\t//\n\t\t\t\t//       For example, given \".abc { &_x {} }\".\n\t\t\t\t//       Then, an expected raw `selector` is \"&_x\",\n\t\t\t\t//       but, an actual `selector` is \".abc_x\".\n\t\t\t\tconst endIndex = index + selector.length;\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * An \"interpolating ampersand\" means an \"&\" used to interpolate\n * within another simple selector, rather than an \"&\" that\n * stands on its own as a simple selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nfunction hasInterpolatingAmpersand(selector) {\n\tfor (const [i, char] of Array.from(selector).entries()) {\n\t\tif (char !== '&') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst prevChar = selector.charAt(i - 1);\n\n\t\tif (prevChar && !isCombinator(prevChar)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst nextChar = selector.charAt(i + 1);\n\n\t\tif (nextChar && !isCombinator(nextChar)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} x\n * @returns {boolean}\n */\nfunction isCombinator(x) {\n\treturn /[\\s+>~]/.test(x);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.charAt(1) !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransformSelector(result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst pseudoElement = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(pseudoElement)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!pseudoElement.includes('::') &&\n\t\t\t\t\t\t!levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst expectedPseudoElement =\n\t\t\t\t\t\tprimary === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n\t\t\t\t\tif (pseudoElement === expectedPseudoElement) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudoNode.value = expectedPseudoElement;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(pseudoElement, expectedPseudoElement),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} compound ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-compound-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Finds actual selectors in selectorNode object and checks them.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tlet compoundCount = 1;\n\n\t\t\tselectorNode.each((childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Compound selectors are separated by combinators, so increase count when meeting one\n\t\t\t\tif (childNode.type === 'combinator') {\n\t\t\t\t\tcompoundCount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tselectorNode.type !== 'root' &&\n\t\t\t\tselectorNode.type !== 'pseudo' &&\n\t\t\t\tcompoundCount > primary\n\t\t\t) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector if there is a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Process each resolved selector with `checkSelector` via postcss-selector-parser\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { pseudoElements } = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-element selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoElements: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.slice(0, 2) !== '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (vendor.prefix(name) || pseudoElements.has(name.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /\\r?\\n/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected newline in string',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/string-no-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxSelector(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { value, quoteMark } = attributeNode;\n\n\t\t\t\t\tif (!value || !reNewLine.test(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = [\n\t\t\t\t\t\t// length of our attribute\n\t\t\t\t\t\tattributeNode.attribute,\n\t\t\t\t\t\t// length of our operator , ie '='\n\t\t\t\t\t\tattributeNode.operator || '',\n\t\t\t\t\t].reduce(\n\t\t\t\t\t\t(index, str) => index + str.length,\n\t\t\t\t\t\t// index of the start of our attribute node in our source\n\t\t\t\t\t\t// plus 1 for the opening quotation mark\n\t\t\t\t\t\tattributeNode.sourceIndex + 1,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst valueLength = value.length + (quoteMark || '').length * 2;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: openIndex,\n\t\t\t\t\t\tendIndex: openIndex + valueLength,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!reNewLine.test(valueNode.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst nodeIndex = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + valueNode.sourceIndex,\n\t\t\t\t\tendIndex: nodeIndex + valueNode.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomSelector = require('../../utils/isCustomSelector');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst {\n\tatRulePagePseudoClasses,\n\tpseudoClasses,\n\tpseudoElements,\n\twebkitScrollbarPseudoClasses,\n\twebkitScrollbarPseudoElements,\n} = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-class selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t * @param {import('postcss').ChildNode} node\n\t\t */\n\t\tfunction check(selector, node) {\n\t\t\tparseSelector(selector, result, node, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isCustomSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet index = null;\n\t\t\t\t\tconst name = value.slice(1).toLowerCase();\n\n\t\t\t\t\tif (isAtRule(node) && node.name === 'page') {\n\t\t\t\t\t\tif (atRulePagePseudoClasses.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (vendor.prefix(name) || pseudoClasses.has(name) || pseudoElements.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {import('postcss-selector-parser').Base} */\n\t\t\t\t\t\tlet prevPseudoElement = pseudoNode;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevPseudoElement = /** @type {import('postcss-selector-parser').Base} */ (\n\t\t\t\t\t\t\t\tprevPseudoElement.prev()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (prevPseudoElement);\n\n\t\t\t\t\t\tif (prevPseudoElement) {\n\t\t\t\t\t\t\tconst prevPseudoElementValue = prevPseudoElement.value.toLowerCase().slice(2);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\twebkitScrollbarPseudoElements.has(prevPseudoElementValue) &&\n\t\t\t\t\t\t\t\twebkitScrollbarPseudoClasses.has(name)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = pseudoNode.sourceIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tlet selector = null;\n\n\t\t\tif (node.type === 'rule') {\n\t\t\t\tif (!isStandardSyntaxRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.selector;\n\t\t\t} else if (isAtRule(node) && node.name === 'page' && node.params) {\n\t\t\t\tif (!isStandardSyntaxAtRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.params;\n\t\t\t}\n\n\t\t\t// Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\t\t\tif (!selector) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(selector, node);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a selector is a custom one\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isCustomSelector(selector) {\n\treturn selector.startsWith(':--');\n};\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-colon-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} colon pseudo-element notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-colon-notation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['single', 'double'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixedColon = '';\n\n\t\tif (primary === 'single') {\n\t\t\tfixedColon = ':';\n\t\t} else if (primary === 'double') {\n\t\t\tfixedColon = '::';\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// get out early if no pseudo elements or classes\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectors) => {\n\t\t\t\tselectors.walkPseudos((pseudo) => {\n\t\t\t\t\tconst pseudoElement = pseudo.value.replace(/:/g, '');\n\n\t\t\t\t\tif (!levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isDouble = pseudo.value.startsWith('::');\n\n\t\t\t\t\tif (primary === 'single' && !isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'double' && isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudo.replaceWith(pseudo.clone({ value: fixedColon + pseudoElement }));\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tendIndex: pseudo.sourceIndex + (isDouble ? 2 : 1),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'number-max-precision';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-max-precision',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = 'prop' in node ? node.prop : undefined;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tconst { unit } = getDimension(valueNode);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\d*\\.(\\d+)/.exec(valueNode.value);\n\n\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (match[1].length <= primary) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\t\t\t\tconst actual = Number.parseFloat(match[0]);\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: baseIndex + valueNode.sourceIndex + match.index,\n\t\t\t\t\tword: actual.toString(),\n\t\t\t\t\tmessage: messages.expected(actual, actual.toFixed(primary)),\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity, compare } = require('@csstools/selector-specificity');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst {\n\taNPlusBOfSNotationPseudoClasses,\n\taNPlusBNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n} = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assertNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) => `Expected \"${selector}\" to have a specificity no more than \"${max}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-specificity',\n};\n\n/** @typedef {import('@csstools/selector-specificity').Specificity} Specificity */\n\n/**\n * Return a zero specificity. We need a new instance each time so that it can mutated.\n *\n * @returns {Specificity}\n */\nconst zeroSpecificity = () => ({ a: 0, b: 0, c: 0 });\n\n/**\n * Calculate the sum of given specificities.\n *\n * @param {Specificity[]} specificities\n * @returns {Specificity}\n */\nconst specificitySum = (specificities) => {\n\tconst sum = zeroSpecificity();\n\n\tfor (const { a, b, c } of specificities) {\n\t\tsum.a += a;\n\t\tsum.b += b;\n\t\tsum.c += c;\n\t}\n\n\treturn sum;\n};\n\n/** @type {import('stylelint').Rule<string>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t// Check that the max specificity is in the form \"a,b,c\"\n\t\t\t\t\t(spec) => isString(spec) && /^\\d+,\\d+,\\d+$/.test(spec),\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Calculate the specificity of a simple selector (type, attribute, class, ID, or pseudos's own value).\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst simpleSpecificity = (node) => {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', node.toString())) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\treturn selectorSpecificity(node);\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of the most specific direct child.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst maxChildSpecificity = (node) =>\n\t\t\tnode.reduce((maxSpec, child) => {\n\t\t\t\tconst childSpecificity = nodeSpecificity(child); // eslint-disable-line no-use-before-define\n\n\t\t\t\treturn compare(childSpecificity, maxSpec) > 0 ? childSpecificity : maxSpec;\n\t\t\t}, zeroSpecificity());\n\n\t\t/**\n\t\t * Calculate the specificity of a pseudo selector including own value and children.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Pseudo} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst pseudoSpecificity = (node) => {\n\t\t\t// `node.toString()` includes children which should be processed separately,\n\t\t\t// so use `node.value` instead\n\t\t\tconst ownValue = node.value.toLowerCase();\n\n\t\t\tif (ownValue === ':where') {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tlet ownSpecificity;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', ownValue)) {\n\t\t\t\townSpecificity = zeroSpecificity();\n\t\t\t} else if (aNPlusBOfSNotationPseudoClasses.has(ownValue.replace(/^:/, ''))) {\n\t\t\t\t// TODO: We need to support `<complex-selector-list>` in `ignoreSelectors`. E.g. `:nth-child(even of .foo)`.\n\t\t\t\treturn selectorSpecificity(node);\n\t\t\t} else {\n\t\t\t\townSpecificity = selectorSpecificity(node.clone({ nodes: [] }));\n\t\t\t}\n\n\t\t\treturn specificitySum([ownSpecificity, maxChildSpecificity(node)]);\n\t\t};\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tconst shouldSkipPseudoClassArgument = (node) => {\n\t\t\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t\t\t// as \"tags\", so we need to ignore them ourselves.\n\t\t\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t\t\t// should be the :nth-child pseudo node.\n\t\t\tconst parentNode = node.parent && node.parent.parent;\n\n\t\t\tif (parentNode && parentNode.type === 'pseudo' && parentNode.value) {\n\t\t\t\tconst pseudoClass = parentNode.value.toLowerCase().replace(/^:/, '');\n\n\t\t\t\treturn (\n\t\t\t\t\taNPlusBNotationPseudoClasses.has(pseudoClass) || linguisticPseudoClasses.has(pseudoClass)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of a node parsed by `postcss-selector-parser`.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst nodeSpecificity = (node) => {\n\t\t\tif (shouldSkipPseudoClassArgument(node)) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'attribute':\n\t\t\t\tcase 'class':\n\t\t\t\tcase 'id':\n\t\t\t\tcase 'tag':\n\t\t\t\t\treturn simpleSpecificity(node);\n\t\t\t\tcase 'pseudo':\n\t\t\t\t\treturn pseudoSpecificity(node);\n\t\t\t\tcase 'selector':\n\t\t\t\t\t// Calculate the sum of all the direct children\n\t\t\t\t\treturn specificitySum(node.map((n) => nodeSpecificity(n)));\n\t\t\t\tdefault:\n\t\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\t\t};\n\n\t\tconst [a, b, c] = primary.split(',').map((s) => Number.parseFloat(s));\n\n\t\tassertNumber(a);\n\t\tassertNumber(b);\n\t\tassertNumber(c);\n\n\t\tconst maxSpecificity = { a, b, c };\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector in the eventuality we have a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Skip non-standard syntax selectors\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\t// Check if the selector specificity exceeds the allowed maximum\n\t\t\t\t\t\tif (compare(maxChildSpecificity(selectorTree), maxSpecificity) > 0) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tmessage: messages.expected(resolvedSelector, primary),\n\t\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'unicode-bom';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected Unicode BOM',\n\trejected: 'Unexpected Unicode BOM',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unicode-bom',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (\n\t\t\t!validOptions ||\n\t\t\t!root.source ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\t\troot.source.inline ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'lang' does not exist on type 'Source'.\n\t\t\troot.source.lang === 'object-literal' ||\n\t\t\t// Ignore HTML documents\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\troot.document !== undefined\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { hasBOM } = root.source.input;\n\n\t\tif (primary === 'always' && !hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (primary === 'never' && hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomElement = require('../../utils/isCustomElement');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst { htmlTypeSelectors } = require('../../reference/selectors');\nconst mathMLTags = require('mathml-tag-names');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst svgTags = require('svg-tags');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-type-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-type-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-elements', 'default-namespace'],\n\t\t\t\t\tignoreNamespaces: [isString, isRegExp],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'custom-elements') &&\n\t\t\t\t\t\tisCustomElement(tagNode.value)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'default-namespace') &&\n\t\t\t\t\t\t!(typeof tagNode.namespace === 'string')\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreNamespaces', tagNode.namespace)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tagNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tagName = tagNode.value;\n\t\t\t\t\tconst tagNameLowerCase = tagName.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\thtmlTypeSelectors.has(tagNameLowerCase) ||\n\t\t\t\t\t\t// SVG tags are case-sensitive\n\t\t\t\t\t\tsvgTags.includes(tagName) ||\n\t\t\t\t\t\tmathMLTags.includes(tagNameLowerCase)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(tagName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: tagNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: tagName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { htmlTypeSelectors } = require('../reference/selectors');\nconst mathMLTags = require('mathml-tag-names');\nconst svgTags = require('svg-tags');\n\n/**\n * Check whether a type selector is a custom element\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isCustomElement(selector) {\n\tif (!/^[a-z]/.test(selector)) {\n\t\treturn false;\n\t}\n\n\tif (!selector.includes('-')) {\n\t\treturn false;\n\t}\n\n\tconst selectorLowerCase = selector.toLowerCase();\n\n\tif (selectorLowerCase !== selector) {\n\t\treturn false;\n\t}\n\n\tif (svgTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (htmlTypeSelectors.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (mathMLTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst { mixedCaseSvgTypeSelectors } = require('../../reference/selectors');\n\nconst ruleName = 'selector-type-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-type-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tlet hasComments = ruleNode.raws.selector && ruleNode.raws.selector.raw;\n\t\t\tconst selector = hasComments ? hasComments : ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorAST) => {\n\t\t\t\tselectorAST.walkTags((tag) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tag)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mixedCaseSvgTypeSelectors.has(tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sourceIndex = tag.sourceIndex;\n\t\t\t\t\tconst value = tag.value;\n\n\t\t\t\t\tconst expectedValue = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\t\tif (value === expectedValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\thasComments.slice(sourceIndex + value.length);\n\n\t\t\t\t\t\t\tif (ruleNode.raws.selector == null) {\n\t\t\t\t\t\t\t\tthrow new Error('The `raw` property must be present');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\truleNode.raws.selector.raw = hasComments;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\truleNode.selector =\n\t\t\t\t\t\t\t\truleNode.selector.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\truleNode.selector.slice(sourceIndex + value.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(value, expectedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, assertString } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'string-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} quotes`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/string-quotes',\n\tfixable: true,\n};\n\nconst singleQuote = `'`;\nconst doubleQuote = `\"`;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst correctQuote = primary === 'single' ? singleQuote : doubleQuote;\n\tconst erroneousQuote = primary === 'single' ? doubleQuote : singleQuote;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['single', 'double'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tavoidEscape: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst avoidEscape =\n\t\t\tsecondaryOptions && secondaryOptions.avoidEscape !== undefined\n\t\t\t\t? secondaryOptions.avoidEscape\n\t\t\t\t: true;\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.quoted) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === correctQuote && avoidEscape) {\n\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\tattributeNode.quoteMark = erroneousQuote;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary === 'single' ? 'double' : primary),\n\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === erroneousQuote) {\n\t\t\t\t\t\tif (avoidEscape) {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\truleNode.selector = replaceQuote(ruleNode.selector, fixIndex, correctQuote);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no erroneous quotes\n\t\t\tif (!value.includes(erroneousQuote)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isAtRule(node) && node.name === 'charset') {\n\t\t\t\t// allow @charset rules to have double quotes, in spite of the configuration\n\t\t\t\t// TODO: @charset should always use double-quotes, see https://github.com/stylelint/stylelint/issues/2788\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'string' && valueNode.quote === erroneousQuote) {\n\t\t\t\t\tconst needsEscape = valueNode.value.includes(correctQuote);\n\n\t\t\t\t\tif (avoidEscape && needsEscape) {\n\t\t\t\t\t\t// don't consider this an error\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = valueNode.sourceIndex;\n\n\t\t\t\t\t// we currently don't fix escapes\n\t\t\t\t\tif (context.fix && !needsEscape) {\n\t\t\t\t\t\tconst closeIndex = openIndex + valueNode.value.length + erroneousQuote.length;\n\n\t\t\t\t\t\tfixPositions.push(openIndex, closeIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tnode.params = replaceQuote(node.params, fixIndex, correctQuote);\n\t\t\t\t} else {\n\t\t\t\t\tnode.value = replaceQuote(node.value, fixIndex, correctQuote);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} string\n * @param {number} index\n * @param {string} replace\n * @returns {string}\n */\nfunction replaceQuote(string, index, replace) {\n\treturn string.substring(0, index) + replace + string.substring(index + replace.length);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unexpected, expected) => `Expected \"${unexpected}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/shorthand-property-no-redundant-values',\n\tfixable: true,\n};\n\nconst propertiesWithShorthandNotation = new Set([\n\t'margin',\n\t'padding',\n\t'border-color',\n\t'border-radius',\n\t'border-style',\n\t'border-width',\n\t'grid-gap',\n]);\n\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction hasIgnoredCharacters(value) {\n\treturn ignoredCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {string} property\n * @returns {boolean}\n */\nfunction isShorthandProperty(property) {\n\treturn propertiesWithShorthandNotation.has(property);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {string[]}\n */\nfunction canCondense(top, right, bottom, left) {\n\tconst lowerTop = top.toLowerCase();\n\tconst lowerRight = right.toLowerCase();\n\tconst lowerBottom = bottom && bottom.toLowerCase();\n\tconst lowerLeft = left && left.toLowerCase();\n\n\tif (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top];\n\t}\n\n\tif (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right];\n\t}\n\n\tif (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right, bottom];\n\t}\n\n\treturn [top, right, bottom, left];\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToOneValue(top, right, bottom, left) {\n\tif (top !== right) {\n\t\treturn false;\n\t}\n\n\treturn (top === bottom && (bottom === left || !left)) || (!bottom && !left);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n\treturn (top === bottom && right === left) || (top === bottom && !left && top !== right);\n}\n\n/**\n * @param {string} _top\n * @param {string} right\n * @param {string} _bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToThreeValues(_top, right, _bottom, left) {\n\treturn right === left;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n\t\t\tif (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst valuesToShorthand = [];\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvaluesToShorthand.push(valueParser.stringify(valueNode));\n\t\t\t});\n\n\t\t\tif (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst shortestForm = canCondense(\n\t\t\t\tvaluesToShorthand[0] || '',\n\t\t\t\tvaluesToShorthand[1] || '',\n\t\t\t\tvaluesToShorthand[2] || '',\n\t\t\t\tvaluesToShorthand[3] || '',\n\t\t\t);\n\t\t\tconst shortestFormString = shortestForm.filter(Boolean).join(' ');\n\t\t\tconst valuesFormString = valuesToShorthand.join(' ');\n\n\t\t\tif (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.value = decl.value.replace(value, shortestFormString);\n\t\t\t} else {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value, shortestFormString),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} checkedValue\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, checkedValue, getIndex) {\n\t\t\t/** @type {Array<{ index: number, endIndex: number, message: string }>} */\n\t\t\tconst problems = [];\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tfunction processValue(valueNode) {\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!number || !unit) return false;\n\n\t\t\t\tconst expectedUnit = primary === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n\t\t\t\tif (unit === expectedUnit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\tproblems.push({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.expected(unit, expectedUnit),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(checkedValue).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tlet needFix = false;\n\t\t\t\tconst value = valueNode.value;\n\n\t\t\t\tif (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (value.includes('*')) {\n\t\t\t\t\tvalue.split('*').some((val) => {\n\t\t\t\t\t\treturn processValue({\n\t\t\t\t\t\t\t...valueNode,\n\t\t\t\t\t\t\tsourceIndex: value.indexOf(val) + val.length + 1,\n\t\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tneedFix = processValue(valueNode);\n\n\t\t\t\tif (needFix && context.fix) {\n\t\t\t\t\tvalueNode.value = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif ('name' in node && node.name === 'media') {\n\t\t\t\t\t\tnode.params = parsedValue.toString();\n\t\t\t\t\t} else if ('value' in node) {\n\t\t\t\t\t\tnode.value = parsedValue.toString();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const err of problems) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\t\tendIndex: err.endIndex,\n\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !('variable' in atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst { units } = require('../../reference/units');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'unit-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unknown unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t// and within functions listed in the `ignoreFunctions` option\n\t\t\t\tif (\n\t\t\t\t\tvalueNode.type === 'function' &&\n\t\t\t\t\t(valueNode.value.toLowerCase() === 'url' ||\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueNode.value))\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!number || !unit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (unit.toLowerCase() === 'x') {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisAtRule(node) &&\n\t\t\t\t\t\tnode.name === 'media' &&\n\t\t\t\t\t\tnode.params.toLowerCase().includes('resolution')\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet ignoreUnit = false;\n\n\t\t\t\t\t\tmediaParser(node.params).walk((mediaNode, _i, mediaNodes) => {\n\t\t\t\t\t\t\tconst lastMediaNode = mediaNodes[mediaNodes.length - 1];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmediaNode.value.toLowerCase().includes('resolution') &&\n\t\t\t\t\t\t\t\tlastMediaNode &&\n\t\t\t\t\t\t\t\tlastMediaNode.sourceIndex === valueNode.sourceIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tignoreUnit = true;\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (ignoreUnit) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\t\tif (node.prop.toLowerCase() === 'image-resolution') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n\t\t\t\t\t\t\tconst imageSet = parsedValue.nodes.find(\n\t\t\t\t\t\t\t\t(n) => vendor.unprefixed(n.value) === 'image-set',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tassert(imageSet);\n\t\t\t\t\t\t\tassert('nodes' in imageSet);\n\t\t\t\t\t\t\tconst imageSetLastNode = imageSet.nodes[imageSet.nodes.length - 1];\n\n\t\t\t\t\t\t\tassert(imageSetLastNode);\n\t\t\t\t\t\t\tconst imageSetValueLastIndex = imageSetLastNode.sourceIndex;\n\n\t\t\t\t\t\t\tif (imageSetValueLastIndex >= valueNode.sourceIndex) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(decl, decl.value, declarationValueIndex);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../utils/isStandardSyntaxProperty');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((node: import('postcss').Declaration, index: number) => boolean) | null,\n *   determineIndex?: (declString: string, match: import('style-search').StyleSearchMatch) => number | false,\n * }} opts\n */\nmodule.exports = function valueListCommaWhitespaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declString = decl.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: declString,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tconst indexToCheckAfter = opts.determineIndex\n\t\t\t\t\t? opts.determineIndex(declString, match)\n\t\t\t\t\t: match.startIndex;\n\n\t\t\t\tif (indexToCheckAfter === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcheckComma(declString, indexToCheckAfter, decl);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Declaration} node\n\t * @returns {void}\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(\n\t\t\t\truleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector,\n\t\t\t\tresult,\n\t\t\t\truleNode,\n\t\t\t\t(selectorTree) => {\n\t\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\t\tconst pseudo = pseudoNode.value;\n\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(pseudo)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpseudo.includes('::') ||\n\t\t\t\t\t\t\tlevelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expectedPseudo =\n\t\t\t\t\t\t\tprimary === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n\t\t\t\t\t\tif (pseudo === expectedPseudo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tpseudoNode.value = expectedPseudo;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(pseudo, expectedPseudo),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getDimension = require('../../utils/getDimension');\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst {\n\tanimationNameKeywords,\n\tanimationShorthandKeywords,\n\tcamelCaseKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n\tgridAreaKeywords,\n\tgridColumnKeywords,\n\tgridRowKeywords,\n\tlistStyleShorthandKeywords,\n\tlistStyleTypeKeywords,\n\tsystemColorsKeywords,\n} = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-keyword-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-keyword-case',\n\tfixable: true,\n};\n\n// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\n\nconst mapLowercaseKeywordsToCamelCase = new Map();\n\nfor (const func of camelCaseKeywords) {\n\tmapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreKeywords: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tcamelCaseSvgKeywords: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst propLowerCase = decl.prop.toLowerCase();\n\t\t\tconst value = decl.value;\n\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tlet needFix = false;\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tconst valueLowerCase = node.value.toLowerCase();\n\n\t\t\t\t// Ignore system colors\n\t\t\t\tif (systemColorsKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore keywords within `url` and `var` function\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\t(valueLowerCase === 'url' ||\n\t\t\t\t\t\tvalueLowerCase === 'var' ||\n\t\t\t\t\t\tvalueLowerCase === 'counter' ||\n\t\t\t\t\t\tvalueLowerCase === 'counters' ||\n\t\t\t\t\t\tvalueLowerCase === 'attr')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// ignore keywords within ignoreFunctions functions\n\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst keyword = node.value;\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\t// Ignore css variables, and hex values, and math operators, and sass interpolation\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'word' ||\n\t\t\t\t\t!isStandardSyntaxValue(node.value) ||\n\t\t\t\t\tvalue.includes('#') ||\n\t\t\t\t\tignoredCharacters.has(keyword) ||\n\t\t\t\t\tunit\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation' &&\n\t\t\t\t\t!animationShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'animation-name' && !animationNameKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font' &&\n\t\t\t\t\t!fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'font-family' && !fontFamilyKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'counter-increment' &&\n\t\t\t\t\tisCounterIncrementCustomIdentValue(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridRowProps.has(propLowerCase) && !gridRowKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridColumnProps.has(propLowerCase) && !gridColumnKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'grid-area' && !gridAreaKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style' &&\n\t\t\t\t\t!listStyleShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'list-style-type' && !listStyleTypeKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreKeywords', keyword)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst keywordLowerCase = keyword.toLocaleLowerCase();\n\t\t\t\tlet expectedKeyword = null;\n\n\t\t\t\t/** @type {boolean} */\n\t\t\t\tconst camelCaseSvgKeywords =\n\t\t\t\t\t(secondaryOptions && secondaryOptions.camelCaseSvgKeywords) || false;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseKeywordsToCamelCase.has(keywordLowerCase) &&\n\t\t\t\t\tcamelCaseSvgKeywords\n\t\t\t\t) {\n\t\t\t\t\texpectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedKeyword = keyword.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\texpectedKeyword = keyword.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (keyword === expectedKeyword) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedKeyword;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(keyword, expectedKeyword),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tdecl.value = parsed.toString();\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { counterIncrementKeywords } = require('../reference/keywords');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function isCounterIncrementCustomIdentValue(value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tcounterIncrementKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst { counterResetKeywords } = require('../reference/keywords');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function isCounterResetCustomIdentValue(value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tcounterResetKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tdetermineIndex: (declString, match) => {\n\t\t\t\tconst nextChars = declString.substring(match.endIndex, declString.length);\n\n\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t// ending the comment so we're fine\n\t\t\t\tif (/^[ \\t]*\\/\\//.test(nextChars)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\treturn /^[ \\t]*\\/\\*/.test(nextChars)\n\t\t\t\t\t? declString.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t: match.startIndex;\n\t\t\t},\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => a - b).reverse()) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = context.newline + afterValue;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'function') {\n\t\t\t\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t\tif (valueLowerCase === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!unit || !number || (unit && primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t'prop' in node &&\n\t\t\t\t\tsecondaryOptions &&\n\t\t\t\t\toptionsMatches(secondaryOptions.ignoreProperties, unit.toLowerCase(), node.prop)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => check(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { longhandTimeProperties, shorthandTimeProperties } = require('../../reference/properties');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isNumber } = require('../../utils/validateTypes');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getDimension = require('../../utils/getDimension');\n\nconst ruleName = 'time-min-milliseconds';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (time) => `Expected a minimum of ${time} milliseconds`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/time-min-milliseconds',\n};\n\nconst DELAY_PROPERTIES = new Set(['animation-delay', 'transition-delay']);\n\n/** @type {import('stylelint').Rule<number>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['delay'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst minimum = primary;\n\t\tconst ignoreDelay = optionsMatches(secondaryOptions, 'ignore', 'delay');\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst propertyName = vendor.unprefixed(decl.prop.toLowerCase());\n\t\t\tconst propertyValue = decl.value;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet timeValueCount = 0;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value, sourceIndex } = node;\n\t\t\t\tconst dimension = getDimension(node);\n\n\t\t\t\tif (\n\t\t\t\t\tlonghandTimeProperties.has(propertyName) &&\n\t\t\t\t\t!isIgnoredProperty(propertyName) &&\n\t\t\t\t\t!isAcceptableTime(dimension)\n\t\t\t\t) {\n\t\t\t\t\tcomplain(decl, 0, propertyValue.length);\n\t\t\t\t}\n\n\t\t\t\tif (!shorthandTimeProperties.has(propertyName)) return;\n\n\t\t\t\ttimeValueCount = calcTimeValueCount(dimension, value, timeValueCount);\n\n\t\t\t\tif (isAcceptableTime(dimension) || (ignoreDelay && timeValueCount !== 1)) return;\n\n\t\t\t\tcomplain(decl, sourceIndex, value.length);\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {{unit: string | null, number: string | null}} dimension\n\t\t * @param {string} value\n\t\t * @param {number} valueTimeCount\n\t\t * @returns {number}\n\t\t */\n\t\tfunction calcTimeValueCount(dimension, value, valueTimeCount) {\n\t\t\tconst { unit } = dimension;\n\n\t\t\tif (unit !== null) valueTimeCount++;\n\n\t\t\tif (value === ',') valueTimeCount = 0;\n\n\t\t\treturn valueTimeCount;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} propertyName\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredProperty(propertyName) {\n\t\t\tif (ignoreDelay && DELAY_PROPERTIES.has(propertyName)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-value-parser').Dimension | {unit: null, number: null}} dimension\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isAcceptableTime(dimension) {\n\t\t\tconst { unit, number } = dimension;\n\n\t\t\tif (unit === null || number === null) return true;\n\n\t\t\tconst numTime = Number(number);\n\n\t\t\tif (numTime <= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst timeUnit = unit.toLowerCase();\n\n\t\t\tif (timeUnit === 'ms' && numTime < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (timeUnit === 's' && numTime * 1000 < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} offset\n\t\t * @param {number} length\n\t\t * @returns {void}\n\t\t */\n\t\tfunction complain(decl, offset, length) {\n\t\t\tconst index = declarationValueIndex(decl) + offset;\n\t\t\tconst endIndex = index + length;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(minimum),\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tnode: decl,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tlet beforeValue = value.slice(0, valueIndex);\n\t\t\t\t\tconst afterValue = value.slice(valueIndex);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.charAt(1) !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isBoolean, isNumber, isString, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'indentation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (x) => `Expected indentation of ${x}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/indentation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions = {}, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber, 'tab'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tbaseIndentLevel: [isNumber, 'auto'],\n\t\t\t\t\texcept: ['block', 'value', 'param'],\n\t\t\t\t\tignore: ['value', 'param', 'inside-parens'],\n\t\t\t\t\tindentInsideParens: ['twice', 'once-at-root-twice-in-block'],\n\t\t\t\t\tindentClosingBrace: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst spaceCount = isNumber(primary) ? primary : null;\n\t\tconst indentChar = spaceCount == null ? '\\t' : ' '.repeat(spaceCount);\n\t\tconst warningWord = primary === 'tab' ? 'tab' : 'space';\n\n\t\t/** @type {number | 'auto'} */\n\t\tconst baseIndentLevel = secondaryOptions.baseIndentLevel;\n\t\t/** @type {boolean} */\n\t\tconst indentClosingBrace = secondaryOptions.indentClosingBrace;\n\n\t\t/**\n\t\t * @param {number} level\n\t\t */\n\t\tconst legibleExpectation = (level) => {\n\t\t\tconst count = spaceCount == null ? level : level * spaceCount;\n\t\t\tconst quantifiedWarningWord = count === 1 ? warningWord : `${warningWord}s`;\n\n\t\t\treturn `${count} ${quantifiedWarningWord}`;\n\t\t};\n\n\t\t// Cycle through all nodes using walk.\n\t\troot.walk((node) => {\n\t\t\tif (isRoot(node)) {\n\t\t\t\t// Ignore nested template literals root in css-in-js lang\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeLevel = indentationLevel(node);\n\n\t\t\t// Cut out any * and _ hacks from `before`\n\t\t\tconst before = (node.raws.before || '').replace(/[*_]$/, '');\n\t\t\tconst after = typeof node.raws.after === 'string' ? node.raws.after : '';\n\t\t\tconst parent = node.parent;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tconst expectedOpeningBraceIndentation = indentChar.repeat(nodeLevel);\n\n\t\t\t// Only inspect the spaces before the node\n\t\t\t// if this is the first node in root\n\t\t\t// or there is a newline in the `before` string.\n\t\t\t// (If there is no newline before a node,\n\t\t\t// there is no \"indentation\" to check.)\n\t\t\tconst isFirstChild = parent.type === 'root' && parent.first === node;\n\t\t\tconst lastIndexOfNewline = before.lastIndexOf('\\n');\n\n\t\t\t// Inspect whitespace in the `before` string that is\n\t\t\t// *after* the *last* newline character,\n\t\t\t// because anything besides that is not indentation for this node:\n\t\t\t// it is some other kind of separation, checked by some separate rule\n\t\t\tif (\n\t\t\t\t(lastIndexOfNewline !== -1 ||\n\t\t\t\t\t(isFirstChild &&\n\t\t\t\t\t\t(!getDocument(parent) ||\n\t\t\t\t\t\t\t(parent.raws.codeBefore && parent.raws.codeBefore.endsWith('\\n'))))) &&\n\t\t\t\tbefore.slice(lastIndexOfNewline + 1) !== expectedOpeningBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (isFirstChild && isString(node.raws.before)) {\n\t\t\t\t\t\tnode.raws.before = node.raws.before.replace(\n\t\t\t\t\t\t\t/^[ \\t]*(?=\\S|$)/,\n\t\t\t\t\t\t\texpectedOpeningBraceIndentation,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.raws.before = fixIndentation(node.raws.before, expectedOpeningBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(nodeLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Only blocks have the `after` string to check.\n\t\t\t// Only inspect `after` strings that start with a newline;\n\t\t\t// otherwise there's no indentation involved.\n\t\t\t// And check `indentClosingBrace` to see if it should be indented an extra level.\n\t\t\tconst closingBraceLevel = indentClosingBrace ? nodeLevel + 1 : nodeLevel;\n\t\t\tconst expectedClosingBraceIndentation = indentChar.repeat(closingBraceLevel);\n\n\t\t\tif (\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node) &&\n\t\t\t\tafter &&\n\t\t\t\tafter.includes('\\n') &&\n\t\t\t\tafter.slice(after.lastIndexOf('\\n') + 1) !== expectedClosingBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.raws.after = fixIndentation(node.raws.after, expectedClosingBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(closingBraceLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: node.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a declaration, check the value\n\t\t\tif (isDeclaration(node)) {\n\t\t\t\tcheckValue(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is a rule, check the selector\n\t\t\tif (isRule(node)) {\n\t\t\t\tcheckSelector(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is an at rule, check the params\n\t\t\tif (isAtRule(node)) {\n\t\t\t\tcheckAtRuleParams(node, nodeLevel);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} level\n\t\t * @returns {number}\n\t\t */\n\t\tfunction indentationLevel(node, level = 0) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRoot(node.parent)) {\n\t\t\t\treturn level + getRootBaseIndentLevel(node.parent, baseIndentLevel, primary);\n\t\t\t}\n\n\t\t\tlet calculatedLevel;\n\n\t\t\t// Indentation level equals the ancestor nodes\n\t\t\t// separating this node from root; so recursively\n\t\t\t// run this operation\n\t\t\tcalculatedLevel = indentationLevel(node.parent, level + 1);\n\n\t\t\t// If `secondaryOptions.except` includes \"block\",\n\t\t\t// blocks are taken down one from their calculated level\n\t\t\t// (all blocks are the same level as their parents)\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'block') &&\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node)\n\t\t\t) {\n\t\t\t\tcalculatedLevel--;\n\t\t\t}\n\n\t\t\treturn calculatedLevel;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} declLevel\n\t\t */\n\t\tfunction checkValue(decl, declLevel) {\n\t\t\tif (!decl.value.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'value')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\t\t\tconst valueLevel = optionsMatches(secondaryOptions, 'except', 'value')\n\t\t\t\t? declLevel\n\t\t\t\t: declLevel + 1;\n\n\t\t\tcheckMultilineBit(declString, valueLevel, decl);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkSelector(ruleNode, ruleLevel) {\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Less mixins have params, and they should be indented extra\n\t\t\t// @ts-expect-error -- TS2339: Property 'params' does not exist on type 'Rule'.\n\t\t\tif (ruleNode.params) {\n\t\t\t\truleLevel += 1;\n\t\t\t}\n\n\t\t\tcheckMultilineBit(selector, ruleLevel, ruleNode);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkAtRuleParams(atRule, ruleLevel) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'param')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @nest and SCSS's @at-root rules should be treated like regular rules, not expected\n\t\t\t// to have their params (selectors) indented\n\t\t\tconst paramLevel =\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'param') ||\n\t\t\t\tatRule.name === 'nest' ||\n\t\t\t\tatRule.name === 'at-root'\n\t\t\t\t\t? ruleLevel\n\t\t\t\t\t: ruleLevel + 1;\n\n\t\t\tcheckMultilineBit(beforeBlockString(atRule).trim(), paramLevel, atRule);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} newlineIndentLevel\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkMultilineBit(source, newlineIndentLevel, node) {\n\t\t\tif (!source.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Data for current node fixing\n\t\t\t/** @type {Array<{ expectedIndentation: string, currentIndentation: string, startIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// `outsideParens` because function arguments and also non-standard parenthesized stuff like\n\t\t\t// Sass maps are ignored to allow for arbitrary indentation\n\t\t\tlet parentheticalDepth = 0;\n\n\t\t\tconst ignoreInsideParans = optionsMatches(secondaryOptions, 'ignore', 'inside-parens');\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource,\n\t\t\t\t\ttarget: '\\n',\n\t\t\t\t\t// @ts-expect-error -- The `outsideParens` option is unsupported. Why?\n\t\t\t\t\toutsideParens: ignoreInsideParans,\n\t\t\t\t},\n\t\t\t\t(match, matchCount) => {\n\t\t\t\t\tconst precedesClosingParenthesis = /^[ \\t]*\\)/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (ignoreInsideParans && (precedesClosingParenthesis || match.insideParens)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet expectedIndentLevel = newlineIndentLevel;\n\n\t\t\t\t\t// Modififications for parenthetical content\n\t\t\t\t\tif (!ignoreInsideParans && match.insideParens) {\n\t\t\t\t\t\t// If the first match in is within parentheses, reduce the parenthesis penalty\n\t\t\t\t\t\tif (matchCount === 1) parentheticalDepth -= 1;\n\n\t\t\t\t\t\t// Account for windows line endings\n\t\t\t\t\t\tlet newlineIndex = match.startIndex;\n\n\t\t\t\t\t\tif (source[match.startIndex - 1] === '\\r') {\n\t\t\t\t\t\t\tnewlineIndex--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningParenthesis = /\\([ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningBrace = /\\{[ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningBrace) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst startingClosingBrace = /^[ \\t]*\\}/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\t\tif (startingClosingBrace) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpectedIndentLevel += parentheticalDepth;\n\n\t\t\t\t\t\t// Past this point, adjustments to parentheticalDepth affect next line\n\n\t\t\t\t\t\tif (precedesClosingParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (secondaryOptions.indentInsideParens) {\n\t\t\t\t\t\t\tcase 'twice':\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'once-at-root-twice-in-block':\n\t\t\t\t\t\t\t\tif (node.parent === node.root()) {\n\t\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Starting at the index after the newline, we want to\n\t\t\t\t\t// check that the whitespace characters (excluding newlines) before the first\n\t\t\t\t\t// non-whitespace character equal the expected indentation\n\t\t\t\t\tconst afterNewlineSpaceMatches = /^([ \\t]*)\\S/.exec(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (!afterNewlineSpaceMatches) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst afterNewlineSpace = afterNewlineSpaceMatches[1] || '';\n\t\t\t\t\tconst expectedIndentation = indentChar.repeat(\n\t\t\t\t\t\texpectedIndentLevel > 0 ? expectedIndentLevel : 0,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (afterNewlineSpace !== expectedIndentation) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t// Adding fixes position in reverse order, because if we change indent in the beginning of the string it will break all following fixes for that string\n\t\t\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\t\t\texpectedIndentation,\n\t\t\t\t\t\t\t\tcurrentIndentation: afterNewlineSpace,\n\t\t\t\t\t\t\t\tstartIndex: match.startIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(expectedIndentLevel)),\n\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\tindex: match.startIndex + afterNewlineSpace.length + 1,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tnode.selector = replaceIndentation(\n\t\t\t\t\t\t\tnode.selector,\n\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\tfixPosition.startIndex,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst declProp = node.prop;\n\t\t\t\t\tconst declBetween = node.raws.between;\n\n\t\t\t\t\tif (!isString(declBetween)) {\n\t\t\t\t\t\tthrow new TypeError('The `between` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tif (fixPosition.startIndex < declProp.length + declBetween.length) {\n\t\t\t\t\t\t\tnode.raws.between = replaceIndentation(\n\t\t\t\t\t\t\t\tdeclBetween,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.value = replaceIndentation(\n\t\t\t\t\t\t\t\tnode.value,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length - declBetween.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tconst atRuleName = node.name;\n\t\t\t\t\tconst atRuleAfterName = node.raws.afterName;\n\t\t\t\t\tconst atRuleParams = node.params;\n\n\t\t\t\t\tif (!isString(atRuleAfterName)) {\n\t\t\t\t\t\tthrow new TypeError('The `afterName` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\t// 1 — it's a @ length\n\t\t\t\t\t\tif (fixPosition.startIndex < 1 + atRuleName.length + atRuleAfterName.length) {\n\t\t\t\t\t\t\tnode.raws.afterName = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleAfterName,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.params = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleParams,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - atRuleAfterName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {string} space\n * @returns {number}\n */\nfunction getRootBaseIndentLevel(root, baseIndentLevel, space) {\n\tconst document = getDocument(root);\n\n\tif (!document) {\n\t\treturn 0;\n\t}\n\n\tif (!root.source) {\n\t\tthrow new Error('The root node must have a source');\n\t}\n\n\t/** @type {import('postcss').Source & { baseIndentLevel?: number }} */\n\tconst source = root.source;\n\n\tconst indentLevel = source.baseIndentLevel;\n\n\tif (isNumber(indentLevel) && Number.isSafeInteger(indentLevel)) {\n\t\treturn indentLevel;\n\t}\n\n\tconst newIndentLevel = inferRootIndentLevel(root, baseIndentLevel, () =>\n\t\tinferDocIndentSize(document, space),\n\t);\n\n\tsource.baseIndentLevel = newIndentLevel;\n\n\treturn newIndentLevel;\n}\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction getDocument(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\tconst document = node.document;\n\n\tif (document) {\n\t\treturn document;\n\t}\n\n\tconst root = node.root();\n\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\treturn root && root.document;\n}\n\n/**\n * @param {import('postcss').Document} document\n * @param {string} space\n * returns {number}\n */\nfunction inferDocIndentSize(document, space) {\n\tif (!document.source) throw new Error('The document node must have a source');\n\n\t/** @type {import('postcss').Source & { indentSize?: number }} */\n\tconst docSource = document.source;\n\n\tlet indentSize = docSource.indentSize;\n\n\tif (isNumber(indentSize) && Number.isSafeInteger(indentSize)) {\n\t\treturn indentSize;\n\t}\n\n\tconst source = document.source.input.css;\n\tconst indents = source.match(/^ *(?=\\S)/gm);\n\n\tif (indents) {\n\t\t/** @type {Map<number, number>} */\n\t\tconst scores = new Map();\n\t\tlet lastIndentSize = 0;\n\t\tlet lastLeadingSpacesLength = 0;\n\n\t\t/**\n\t\t * @param {number} leadingSpacesLength\n\t\t */\n\t\tconst vote = (leadingSpacesLength) => {\n\t\t\tif (leadingSpacesLength) {\n\t\t\t\tlastIndentSize = Math.abs(leadingSpacesLength - lastLeadingSpacesLength) || lastIndentSize;\n\n\t\t\t\tif (lastIndentSize > 1) {\n\t\t\t\t\tconst score = scores.get(lastIndentSize);\n\n\t\t\t\t\tif (score) {\n\t\t\t\t\t\tscores.set(lastIndentSize, score + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscores.set(lastIndentSize, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastIndentSize = 0;\n\t\t\t}\n\n\t\t\tlastLeadingSpacesLength = leadingSpacesLength;\n\t\t};\n\n\t\tfor (const leadingSpaces of indents) {\n\t\t\tvote(leadingSpaces.length);\n\t\t}\n\n\t\tlet bestScore = 0;\n\n\t\tfor (const [indentSizeDate, score] of scores.entries()) {\n\t\t\tif (score > bestScore) {\n\t\t\t\tbestScore = score;\n\t\t\t\tindentSize = indentSizeDate;\n\t\t\t}\n\t\t}\n\t}\n\n\tindentSize =\n\t\tNumber(indentSize) || (indents && indents[0] && indents[0].length) || Number(space) || 2;\n\tdocSource.indentSize = indentSize;\n\n\treturn indentSize;\n}\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {() => number} indentSize\n * @returns {number}\n */\nfunction inferRootIndentLevel(root, baseIndentLevel, indentSize) {\n\t/**\n\t * @param {string} indent\n\t */\n\tfunction getIndentLevel(indent) {\n\t\tconst tabMatch = indent.match(/\\t/g);\n\t\tconst tabCount = tabMatch ? tabMatch.length : 0;\n\n\t\tconst spaceMatch = indent.match(/ /g);\n\t\tconst spaceCount = spaceMatch ? Math.round(spaceMatch.length / indentSize()) : 0;\n\n\t\treturn tabCount + spaceCount;\n\t}\n\n\tlet newBaseIndentLevel = 0;\n\n\tif (!isNumber(baseIndentLevel) || !Number.isSafeInteger(baseIndentLevel)) {\n\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\tlet source = root.source.input.css;\n\n\t\tsource = source.replace(/^[^\\r\\n]+/, (firstLine) => {\n\t\t\tconst match = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)$/.exec(root.raws.codeBefore);\n\n\t\t\tif (match) {\n\t\t\t\treturn match[1] + firstLine;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t});\n\n\t\tconst indents = source.match(/^[ \\t]*(?=\\S)/gm);\n\n\t\tif (indents) {\n\t\t\treturn Math.min(...indents.map((indent) => getIndentLevel(indent)));\n\t\t}\n\n\t\tnewBaseIndentLevel = 1;\n\t} else {\n\t\tnewBaseIndentLevel = baseIndentLevel;\n\t}\n\n\tconst indents = [];\n\tconst foundIndents = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)\\S/m.exec(root.raws.codeBefore);\n\n\t// The indent level of the CSS code block in non-CSS-like files is determined by the shortest indent of non-empty line.\n\tif (foundIndents) {\n\t\tlet shortest = Number.MAX_SAFE_INTEGER;\n\t\tlet i = 0;\n\n\t\twhile (++i < foundIndents.length) {\n\t\t\tconst foundIndent = foundIndents[i];\n\n\t\t\tassertString(foundIndent);\n\t\t\tconst current = getIndentLevel(foundIndent);\n\n\t\t\tif (current < shortest) {\n\t\t\t\tshortest = current;\n\n\t\t\t\tif (shortest === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shortest !== Number.MAX_SAFE_INTEGER) {\n\t\t\tindents.push(new Array(shortest).fill(' ').join(''));\n\t\t}\n\t}\n\n\tconst after = root.raws.after;\n\n\tif (after) {\n\t\tlet afterEnd;\n\n\t\tif (after.endsWith('\\n')) {\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tconst document = root.document;\n\n\t\t\tif (document) {\n\t\t\t\tconst nextRoot = document.nodes[document.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : document.raws.codeAfter;\n\t\t\t} else {\n\t\t\t\t// Nested root node in css-in-js lang\n\t\t\t\tconst parent = root.parent;\n\n\t\t\t\tif (!parent) throw new Error('The root node must have a parent');\n\n\t\t\t\tconst nextRoot = parent.nodes[parent.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : root.raws.codeAfter;\n\t\t\t}\n\t\t} else {\n\t\t\tafterEnd = after;\n\t\t}\n\n\t\tif (afterEnd) indents.push(afterEnd.match(/^[ \\t]*/)[0]);\n\t}\n\n\tif (indents.length) {\n\t\treturn Math.max(...indents.map((indent) => getIndentLevel(indent))) + newBaseIndentLevel;\n\t}\n\n\treturn newBaseIndentLevel;\n}\n\n/**\n * @param {string | undefined} str\n * @param {string} whitespace\n */\nfunction fixIndentation(str, whitespace) {\n\tif (!isString(str)) {\n\t\treturn str;\n\t}\n\n\treturn str.replace(/\\n[ \\t]*(?=\\S|$)/g, `\\n${whitespace}`);\n}\n\n/**\n * @param {string} input\n * @param {string} searchString\n * @param {string} replaceString\n * @param {number} startIndex\n */\nfunction replaceIndentation(input, searchString, replaceString, startIndex) {\n\tconst offset = startIndex + 1;\n\tconst stringStart = input.slice(0, offset);\n\tconst stringEnd = input.slice(offset + searchString.length);\n\n\treturn stringStart + replaceString + stringEnd;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = selector.slice(0, index + 1);\n\t\t\t\t\tlet afterSelector = selector.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *  @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t *  @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'class') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-nested-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-nested-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (ruleNode.parent && ruleNode.parent.type !== 'rule') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (normalizedPattern.test(selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: selector,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after range operator',\n\trejectedAfter: () => 'Unexpected whitespace after range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-range-operator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckAfterOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index + 1);\n\t\t\t\t\tconst afterOperator = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkAfterOperator(match, params, node, fix) {\n\t\t\tconst endIndex = match.startIndex + match.target.length - 1;\n\n\t\t\tchecker.after({\n\t\t\t\tsource: params,\n\t\t\t\tindex: endIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(endIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: endIndex + atRuleParamIndex(node) + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-disallowed-list',\n};\n\n/**\n * a function to retrieve only the media feature name\n * could be externalized in an utils function if needed in other code\n *\n * @param {import('postcss-media-query-parser').Child} mediaFeatureNode\n * @returns {string | undefined}\n */\nconst getMediaFeatureName = (mediaFeatureNode) => {\n\tconst value = mediaFeatureNode.value.toLowerCase();\n\n\tconst match = /((?:-?\\w*)*)/.exec(value);\n\n\treturn match ? match[1] : undefined;\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t\tignoreMediaFeatureNames: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t * @param {string | undefined} input\n\t\t * @param {Record<string, unknown>} options\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode, input, options) {\n\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t// There is not unit or it is not configured as a problem\n\t\t\tif (!unit || !number || (unit && !primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The unit has an ignore option for the specific input\n\t\t\tif (optionsMatches(options, unit.toLowerCase(), input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: nodeIndex + valueNode.sourceIndex + number.length,\n\t\t\t\tendIndex: nodeIndex + valueNode.sourceEndIndex,\n\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkMedia(node, value, getIndex) {\n\t\t\tmediaParser(node.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst mediaName = getMediaFeatureName(mediaFeatureNode);\n\t\t\t\tconst parentValue = mediaFeatureNode.parent.value;\n\n\t\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t\t// Ignore all non-word valueNode and\n\t\t\t\t\t// the values not included in the parentValue string\n\t\t\t\t\tif (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcheck(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tgetIndex(node),\n\t\t\t\t\t\tvalueNode,\n\t\t\t\t\t\tmediaName,\n\t\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreMediaFeatureNames : {},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDecl(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcheck(\n\t\t\t\t\tnode,\n\t\t\t\t\tgetIndex(node),\n\t\t\t\t\tvalueNode,\n\t\t\t\t\tnode.prop,\n\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreProperties : {},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => checkMedia(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => checkDecl(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (value) => `Unexpected vendor-prefix \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-no-vendor-prefix',\n\tfixable: true,\n};\n\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst hasPrefix = (value) => {\n\tconst lowerValue = value.toLowerCase();\n\n\treturn valuePrefixes.some((prefix) => lowerValue.startsWith(prefix));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreValues: [isString],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (\n\t\t\t\t!isStandardSyntaxDeclaration(decl) ||\n\t\t\t\t!isStandardSyntaxProperty(decl.prop) ||\n\t\t\t\t!value.startsWith('-')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreValues', vendor.unprefixed(value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!hasPrefix(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isAutoprefixable.propertyValue(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = isAutoprefixable.unprefix(node.value);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst startIndex = decl.prop.length + (decl.raws.between || '').length + node.sourceIndex;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: startIndex,\n\t\t\t\t\tendIndex: startIndex + node.value.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-list-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newValueString = value\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tsetDeclarationValue(decl, newValueString);\n\t\t\t} else if (violatedLFNewLinesRegex.test(value) || violatedCRLFNewLinesRegex.test(value)) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').rules} */\nconst rules = {\n\t'alpha-value-notation': importLazy('./alpha-value-notation'),\n\t'annotation-no-unknown': importLazy('./annotation-no-unknown'),\n\t'at-rule-allowed-list': importLazy('./at-rule-allowed-list'),\n\t'at-rule-disallowed-list': importLazy('./at-rule-disallowed-list'),\n\t'at-rule-empty-line-before': importLazy('./at-rule-empty-line-before'),\n\t'at-rule-name-case': importLazy('./at-rule-name-case'),\n\t'at-rule-name-newline-after': importLazy('./at-rule-name-newline-after'),\n\t'at-rule-semicolon-space-before': importLazy('./at-rule-semicolon-space-before'),\n\t'at-rule-name-space-after': importLazy('./at-rule-name-space-after'),\n\t'at-rule-no-unknown': importLazy('./at-rule-no-unknown'),\n\t'at-rule-no-vendor-prefix': importLazy('./at-rule-no-vendor-prefix'),\n\t'at-rule-property-required-list': importLazy('./at-rule-property-required-list'),\n\t'at-rule-semicolon-newline-after': importLazy('./at-rule-semicolon-newline-after'),\n\t'block-closing-brace-empty-line-before': importLazy('./block-closing-brace-empty-line-before'),\n\t'block-closing-brace-newline-after': importLazy('./block-closing-brace-newline-after'),\n\t'block-closing-brace-newline-before': importLazy('./block-closing-brace-newline-before'),\n\t'block-closing-brace-space-after': importLazy('./block-closing-brace-space-after'),\n\t'block-closing-brace-space-before': importLazy('./block-closing-brace-space-before'),\n\t'block-no-empty': importLazy('./block-no-empty'),\n\t'block-opening-brace-newline-after': importLazy('./block-opening-brace-newline-after'),\n\t'block-opening-brace-newline-before': importLazy('./block-opening-brace-newline-before'),\n\t'block-opening-brace-space-after': importLazy('./block-opening-brace-space-after'),\n\t'block-opening-brace-space-before': importLazy('./block-opening-brace-space-before'),\n\t'color-function-notation': importLazy('./color-function-notation'),\n\t'color-hex-alpha': importLazy('./color-hex-alpha'),\n\t'color-hex-case': importLazy('./color-hex-case'),\n\t'color-hex-length': importLazy('./color-hex-length'),\n\t'color-named': importLazy('./color-named'),\n\t'color-no-hex': importLazy('./color-no-hex'),\n\t'color-no-invalid-hex': importLazy('./color-no-invalid-hex'),\n\t'comment-empty-line-before': importLazy('./comment-empty-line-before'),\n\t'comment-no-empty': importLazy('./comment-no-empty'),\n\t'comment-pattern': importLazy('./comment-pattern'),\n\t'comment-whitespace-inside': importLazy('./comment-whitespace-inside'),\n\t'comment-word-disallowed-list': importLazy('./comment-word-disallowed-list'),\n\t'custom-media-pattern': importLazy('./custom-media-pattern'),\n\t'custom-property-empty-line-before': importLazy('./custom-property-empty-line-before'),\n\t'custom-property-no-missing-var-function': importLazy(\n\t\t'./custom-property-no-missing-var-function',\n\t),\n\t'custom-property-pattern': importLazy('./custom-property-pattern'),\n\t'declaration-bang-space-after': importLazy('./declaration-bang-space-after'),\n\t'declaration-bang-space-before': importLazy('./declaration-bang-space-before'),\n\t'declaration-block-no-duplicate-custom-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-custom-properties',\n\t),\n\t'declaration-block-no-duplicate-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-properties',\n\t),\n\t'declaration-block-no-redundant-longhand-properties': importLazy(\n\t\t'./declaration-block-no-redundant-longhand-properties',\n\t),\n\t'declaration-block-no-shorthand-property-overrides': importLazy(\n\t\t'./declaration-block-no-shorthand-property-overrides',\n\t),\n\t'declaration-block-semicolon-newline-after': importLazy(\n\t\t'./declaration-block-semicolon-newline-after',\n\t),\n\t'declaration-block-semicolon-newline-before': importLazy(\n\t\t'./declaration-block-semicolon-newline-before',\n\t),\n\t'declaration-block-semicolon-space-after': importLazy(\n\t\t'./declaration-block-semicolon-space-after',\n\t),\n\t'declaration-block-semicolon-space-before': importLazy(\n\t\t'./declaration-block-semicolon-space-before',\n\t),\n\t'declaration-block-single-line-max-declarations': importLazy(\n\t\t'./declaration-block-single-line-max-declarations',\n\t),\n\t'declaration-block-trailing-semicolon': importLazy('./declaration-block-trailing-semicolon'),\n\t'declaration-colon-newline-after': importLazy('./declaration-colon-newline-after'),\n\t'declaration-colon-space-after': importLazy('./declaration-colon-space-after'),\n\t'declaration-colon-space-before': importLazy('./declaration-colon-space-before'),\n\t'declaration-empty-line-before': importLazy('./declaration-empty-line-before'),\n\t'declaration-no-important': importLazy('./declaration-no-important'),\n\t'declaration-property-max-values': importLazy('./declaration-property-max-values'),\n\t'declaration-property-unit-allowed-list': importLazy('./declaration-property-unit-allowed-list'),\n\t'declaration-property-unit-disallowed-list': importLazy(\n\t\t'./declaration-property-unit-disallowed-list',\n\t),\n\t'declaration-property-value-allowed-list': importLazy(\n\t\t'./declaration-property-value-allowed-list',\n\t),\n\t'declaration-property-value-disallowed-list': importLazy(\n\t\t'./declaration-property-value-disallowed-list',\n\t),\n\t'font-family-no-missing-generic-family-keyword': importLazy(\n\t\t'./font-family-no-missing-generic-family-keyword',\n\t),\n\t'font-family-name-quotes': importLazy('./font-family-name-quotes'),\n\t'font-family-no-duplicate-names': importLazy('./font-family-no-duplicate-names'),\n\t'font-weight-notation': importLazy('./font-weight-notation'),\n\t'function-allowed-list': importLazy('./function-allowed-list'),\n\t'function-calc-no-unspaced-operator': importLazy('./function-calc-no-unspaced-operator'),\n\t'function-comma-newline-after': importLazy('./function-comma-newline-after'),\n\t'function-comma-newline-before': importLazy('./function-comma-newline-before'),\n\t'function-comma-space-after': importLazy('./function-comma-space-after'),\n\t'function-comma-space-before': importLazy('./function-comma-space-before'),\n\t'function-disallowed-list': importLazy('./function-disallowed-list'),\n\t'function-linear-gradient-no-nonstandard-direction': importLazy(\n\t\t'./function-linear-gradient-no-nonstandard-direction',\n\t),\n\t'function-max-empty-lines': importLazy('./function-max-empty-lines'),\n\t'function-name-case': importLazy('./function-name-case'),\n\t'function-no-unknown': importLazy('./function-no-unknown'),\n\t'function-parentheses-newline-inside': importLazy('./function-parentheses-newline-inside'),\n\t'function-parentheses-space-inside': importLazy('./function-parentheses-space-inside'),\n\t'function-url-no-scheme-relative': importLazy('./function-url-no-scheme-relative'),\n\t'function-url-quotes': importLazy('./function-url-quotes'),\n\t'function-url-scheme-allowed-list': importLazy('./function-url-scheme-allowed-list'),\n\t'function-url-scheme-disallowed-list': importLazy('./function-url-scheme-disallowed-list'),\n\t'function-whitespace-after': importLazy('./function-whitespace-after'),\n\t'hue-degree-notation': importLazy('./hue-degree-notation'),\n\t'import-notation': importLazy('./import-notation'),\n\t'keyframe-block-no-duplicate-selectors': importLazy('./keyframe-block-no-duplicate-selectors'),\n\t'keyframe-declaration-no-important': importLazy('./keyframe-declaration-no-important'),\n\t'keyframe-selector-notation': importLazy('./keyframe-selector-notation'),\n\t'keyframes-name-pattern': importLazy('./keyframes-name-pattern'),\n\t'length-zero-no-unit': importLazy('./length-zero-no-unit'),\n\tlinebreaks: importLazy('./linebreaks'),\n\t'max-empty-lines': importLazy('./max-empty-lines'),\n\t'max-line-length': importLazy('./max-line-length'),\n\t'max-nesting-depth': importLazy('./max-nesting-depth'),\n\t'media-feature-colon-space-after': importLazy('./media-feature-colon-space-after'),\n\t'media-feature-colon-space-before': importLazy('./media-feature-colon-space-before'),\n\t'media-feature-name-allowed-list': importLazy('./media-feature-name-allowed-list'),\n\t'media-feature-name-case': importLazy('./media-feature-name-case'),\n\t'media-feature-name-disallowed-list': importLazy('./media-feature-name-disallowed-list'),\n\t'media-feature-name-no-unknown': importLazy('./media-feature-name-no-unknown'),\n\t'media-feature-name-no-vendor-prefix': importLazy('./media-feature-name-no-vendor-prefix'),\n\t'media-feature-name-value-allowed-list': importLazy('./media-feature-name-value-allowed-list'),\n\t'media-feature-parentheses-space-inside': importLazy('./media-feature-parentheses-space-inside'),\n\t'media-feature-range-operator-space-after': importLazy(\n\t\t'./media-feature-range-operator-space-after',\n\t),\n\t'media-feature-range-operator-space-before': importLazy(\n\t\t'./media-feature-range-operator-space-before',\n\t),\n\t'media-query-list-comma-newline-after': importLazy('./media-query-list-comma-newline-after'),\n\t'media-query-list-comma-newline-before': importLazy('./media-query-list-comma-newline-before'),\n\t'media-query-list-comma-space-after': importLazy('./media-query-list-comma-space-after'),\n\t'media-query-list-comma-space-before': importLazy('./media-query-list-comma-space-before'),\n\t'named-grid-areas-no-invalid': importLazy('./named-grid-areas-no-invalid'),\n\t'no-descending-specificity': importLazy('./no-descending-specificity'),\n\t'no-duplicate-at-import-rules': importLazy('./no-duplicate-at-import-rules'),\n\t'no-duplicate-selectors': importLazy('./no-duplicate-selectors'),\n\t'no-empty-source': importLazy('./no-empty-source'),\n\t'no-empty-first-line': importLazy('./no-empty-first-line'),\n\t'no-eol-whitespace': importLazy('./no-eol-whitespace'),\n\t'no-extra-semicolons': importLazy('./no-extra-semicolons'),\n\t'no-invalid-double-slash-comments': importLazy('./no-invalid-double-slash-comments'),\n\t'no-invalid-position-at-import-rule': importLazy('./no-invalid-position-at-import-rule'),\n\t'no-irregular-whitespace': importLazy('./no-irregular-whitespace'),\n\t'no-missing-end-of-source-newline': importLazy('./no-missing-end-of-source-newline'),\n\t'no-unknown-animations': importLazy('./no-unknown-animations'),\n\t'number-leading-zero': importLazy('./number-leading-zero'),\n\t'number-max-precision': importLazy('./number-max-precision'),\n\t'number-no-trailing-zeros': importLazy('./number-no-trailing-zeros'),\n\t'property-allowed-list': importLazy('./property-allowed-list'),\n\t'property-case': importLazy('./property-case'),\n\t'property-disallowed-list': importLazy('./property-disallowed-list'),\n\t'property-no-unknown': importLazy('./property-no-unknown'),\n\t'property-no-vendor-prefix': importLazy('./property-no-vendor-prefix'),\n\t'rule-empty-line-before': importLazy('./rule-empty-line-before'),\n\t'rule-selector-property-disallowed-list': importLazy('./rule-selector-property-disallowed-list'),\n\t'selector-attribute-brackets-space-inside': importLazy(\n\t\t'./selector-attribute-brackets-space-inside',\n\t),\n\t'selector-attribute-name-disallowed-list': importLazy(\n\t\t'./selector-attribute-name-disallowed-list',\n\t),\n\t'selector-attribute-operator-allowed-list': importLazy(\n\t\t'./selector-attribute-operator-allowed-list',\n\t),\n\t'selector-attribute-operator-disallowed-list': importLazy(\n\t\t'./selector-attribute-operator-disallowed-list',\n\t),\n\t'selector-attribute-operator-space-after': importLazy(\n\t\t'./selector-attribute-operator-space-after',\n\t),\n\t'selector-attribute-operator-space-before': importLazy(\n\t\t'./selector-attribute-operator-space-before',\n\t),\n\t'selector-attribute-quotes': importLazy('./selector-attribute-quotes'),\n\t'selector-class-pattern': importLazy('./selector-class-pattern'),\n\t'selector-combinator-allowed-list': importLazy('./selector-combinator-allowed-list'),\n\t'selector-combinator-disallowed-list': importLazy('./selector-combinator-disallowed-list'),\n\t'selector-combinator-space-after': importLazy('./selector-combinator-space-after'),\n\t'selector-combinator-space-before': importLazy('./selector-combinator-space-before'),\n\t'selector-descendant-combinator-no-non-space': importLazy(\n\t\t'./selector-descendant-combinator-no-non-space',\n\t),\n\t'selector-disallowed-list': importLazy('./selector-disallowed-list'),\n\t'selector-id-pattern': importLazy('./selector-id-pattern'),\n\t'selector-list-comma-newline-after': importLazy('./selector-list-comma-newline-after'),\n\t'selector-list-comma-newline-before': importLazy('./selector-list-comma-newline-before'),\n\t'selector-list-comma-space-after': importLazy('./selector-list-comma-space-after'),\n\t'selector-list-comma-space-before': importLazy('./selector-list-comma-space-before'),\n\t'selector-max-attribute': importLazy('./selector-max-attribute'),\n\t'selector-max-class': importLazy('./selector-max-class'),\n\t'selector-max-combinators': importLazy('./selector-max-combinators'),\n\t'selector-max-compound-selectors': importLazy('./selector-max-compound-selectors'),\n\t'selector-max-empty-lines': importLazy('./selector-max-empty-lines'),\n\t'selector-max-id': importLazy('./selector-max-id'),\n\t'selector-max-pseudo-class': importLazy('./selector-max-pseudo-class'),\n\t'selector-max-specificity': importLazy('./selector-max-specificity'),\n\t'selector-max-type': importLazy('./selector-max-type'),\n\t'selector-max-universal': importLazy('./selector-max-universal'),\n\t'selector-nested-pattern': importLazy('./selector-nested-pattern'),\n\t'selector-no-qualifying-type': importLazy('./selector-no-qualifying-type'),\n\t'selector-no-vendor-prefix': importLazy('./selector-no-vendor-prefix'),\n\t'selector-not-notation': importLazy('./selector-not-notation'),\n\t'selector-pseudo-class-allowed-list': importLazy('./selector-pseudo-class-allowed-list'),\n\t'selector-pseudo-class-case': importLazy('./selector-pseudo-class-case'),\n\t'selector-pseudo-class-disallowed-list': importLazy('./selector-pseudo-class-disallowed-list'),\n\t'selector-pseudo-class-no-unknown': importLazy('./selector-pseudo-class-no-unknown'),\n\t'selector-pseudo-class-parentheses-space-inside': importLazy(\n\t\t'./selector-pseudo-class-parentheses-space-inside',\n\t),\n\t'selector-pseudo-element-allowed-list': importLazy('./selector-pseudo-element-allowed-list'),\n\t'selector-pseudo-element-case': importLazy('./selector-pseudo-element-case'),\n\t'selector-pseudo-element-colon-notation': importLazy('./selector-pseudo-element-colon-notation'),\n\t'selector-pseudo-element-disallowed-list': importLazy(\n\t\t'./selector-pseudo-element-disallowed-list',\n\t),\n\t'selector-pseudo-element-no-unknown': importLazy('./selector-pseudo-element-no-unknown'),\n\t'selector-type-case': importLazy('./selector-type-case'),\n\t'selector-type-no-unknown': importLazy('./selector-type-no-unknown'),\n\t'shorthand-property-no-redundant-values': importLazy('./shorthand-property-no-redundant-values'),\n\t'string-no-newline': importLazy('./string-no-newline'),\n\t'string-quotes': importLazy('./string-quotes'),\n\t'time-min-milliseconds': importLazy('./time-min-milliseconds'),\n\t'unicode-bom': importLazy('./unicode-bom'),\n\t'unit-allowed-list': importLazy('./unit-allowed-list'),\n\t'unit-case': importLazy('./unit-case'),\n\t'unit-disallowed-list': importLazy('./unit-disallowed-list'),\n\t'unit-no-unknown': importLazy('./unit-no-unknown'),\n\t'value-keyword-case': importLazy('./value-keyword-case'),\n\t'value-list-comma-newline-after': importLazy('./value-list-comma-newline-after'),\n\t'value-list-comma-newline-before': importLazy('./value-list-comma-newline-before'),\n\t'value-list-comma-space-after': importLazy('./value-list-comma-space-after'),\n\t'value-list-comma-space-before': importLazy('./value-list-comma-space-before'),\n\t'value-list-max-empty-lines': importLazy('./value-list-max-empty-lines'),\n\t'value-no-vendor-prefix': importLazy('./value-no-vendor-prefix'),\n\tindentation: importLazy('./indentation'),\n};\n\nmodule.exports = rules;\n","'use strict';\n\nconst rules = require('./rules');\nconst { isPlainObject } = require('./utils/validateTypes');\n\n// Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @template T\n * @template {Object} O\n * @param {import('stylelint').ConfigRuleSettings<T, O>} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the rules themselves, which will not work for plugins\n * @return {[T] | [T, O] | null}\n */\nmodule.exports = function normalizeRuleSettings(\n\trawSettings,\n\truleName,\n\t// If primaryOptionArray is not provided, we try to get it from the\n\t// rules themselves, which will not work for plugins\n\tprimaryOptionArray,\n) {\n\tif (rawSettings === null || rawSettings === undefined) {\n\t\treturn null;\n\t}\n\n\tif (!Array.isArray(rawSettings)) {\n\t\treturn [rawSettings];\n\t}\n\t// Everything below is an array ...\n\n\tif (rawSettings.length > 0 && (rawSettings[0] === null || rawSettings[0] === undefined)) {\n\t\treturn null;\n\t}\n\n\tif (primaryOptionArray === undefined) {\n\t\tconst rule = rules[ruleName];\n\n\t\tif (rule && 'primaryOptionArray' in rule) {\n\t\t\tprimaryOptionArray = rule.primaryOptionArray;\n\t\t}\n\t}\n\n\tif (!primaryOptionArray) {\n\t\treturn rawSettings;\n\t}\n\t// Everything below is a rule that CAN have an array for a primary option ...\n\t// (they might also have something else, e.g. rule-properties-order can\n\t// have the string \"alphabetical\")\n\n\tif (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n\t\treturn rawSettings;\n\t}\n\n\tif (rawSettings.length === 2 && !isPlainObject(rawSettings[0]) && isPlainObject(rawSettings[1])) {\n\t\treturn rawSettings;\n\t}\n\n\t// `T` must be an array type, but TSC thinks it's probably invalid to\n\t// cast `[T]` to `T` so we cast through `any` first.\n\treturn [/** @type {T} */ (/** @type {any} */ (rawSettings))];\n};\n","'use strict';\n\n/**\n * @type {typeof import('stylelint').createPlugin}\n */\nmodule.exports = function createPlugin(ruleName, rule) {\n\treturn {\n\t\truleName,\n\t\trule,\n\t};\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst globalModules = require('global-modules');\nconst resolveFrom = require('resolve-from');\n\n/**\n * @param {string} basedir\n * @param {string} lookup\n * @param {string} [cwd]\n * @return {string}\n */\nmodule.exports = function getModulePath(basedir, lookup, cwd = process.cwd()) {\n\t// 1. Try to resolve from the provided directory\n\t// 2. Try to resolve from `cwd` or `process.cwd()`\n\t// 3. Try to resolve from global `node_modules` directory\n\tlet path = resolveFrom.silent(basedir, lookup);\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(cwd, lookup);\n\t}\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(globalModules, lookup);\n\t}\n\n\tif (!path) {\n\t\tthrow configurationError(`Could not find \"${lookup}\". Do you need a \\`configBasedir\\`?`);\n\t}\n\n\treturn path;\n};\n","'use strict';\n\nvar Path = require('path');\nvar slice = Array.prototype.slice;\n\nfunction join(/* globs */) {\n\tvar args;\n\n\targs = slice.call(arguments, 0);\n\treturn args.reduce(function (result, globs) {\n\t\treturn _apply(result, function (path) {\n\t\t\treturn _apply(globs, function (glob) {\n\t\t\t\treturn _join(path, glob);\n\t\t\t});\n\t\t});\n\t}, '');\n}\n\nfunction _apply(values, fn) {\n\tif (Array.isArray(values)) {\n\t\treturn values.reduce(function (result, value) {\n\t\t\treturn result.concat(fn(value));\n\t\t}, []);\n\t}\n\treturn fn(values);\n}\n\nfunction _join(path, glob) {\n\tvar negative, positive;\n\n\tif (glob[0] === '!') {\n\t\tpositive = glob.substr(1);\n\t\tif (path[0] === '!') {\n\t\t\tnegative = '';\n\t\t} else {\n\t\t\tnegative = '!';\n\t\t}\n\t\treturn negative + Path.join(path, positive);\n\t}\n\treturn Path.join(path, glob);\n}\n\nmodule.exports = join;\n","'use strict';\n\nconst normalizeRuleSettings = require('./normalizeRuleSettings');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction normalizeAllRuleSettings(config) {\n\tif (!config.rules) return config;\n\n\t/** @type {StylelintConfigRules} */\n\tconst normalizedRules = {};\n\n\tfor (const [ruleName, rawRuleSettings] of Object.entries(config.rules)) {\n\t\tconst rule = rules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (rule) {\n\t\t\tnormalizedRules[ruleName] = normalizeRuleSettings(\n\t\t\t\trawRuleSettings,\n\t\t\t\truleName,\n\t\t\t\trule.primaryOptionArray,\n\t\t\t);\n\t\t} else {\n\t\t\tnormalizedRules[ruleName] = [];\n\t\t}\n\t}\n\n\tconfig.rules = normalizedRules;\n\n\treturn config;\n}\n\nmodule.exports = normalizeAllRuleSettings;\n","'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst micromatch = require('micromatch');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\nasync function augmentConfigBasic(\n\tstylelint,\n\tconfig,\n\tconfigDir,\n\tallowOverrides,\n\trootConfigDir,\n\tfilePath,\n) {\n\tlet augmentedConfig = config;\n\n\tif (allowOverrides) {\n\t\taugmentedConfig = addOptions(stylelint, augmentedConfig);\n\t}\n\n\tif (filePath) {\n\t\taugmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n\t}\n\n\taugmentedConfig = await extendConfig(\n\t\tstylelint,\n\t\taugmentedConfig,\n\t\tconfigDir,\n\t\trootConfigDir,\n\t\tfilePath,\n\t);\n\n\tconst cwd = stylelint._options.cwd;\n\n\treturn absolutizePaths(augmentedConfig, configDir, cwd);\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\nfunction augmentConfigExtended(cwd) {\n\treturn async (cosmiconfigResult) => {\n\t\tif (!cosmiconfigResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\t\tconst { config } = cosmiconfigResult;\n\n\t\tconst augmentedConfig = absolutizePaths(config, configDir, cwd);\n\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t};\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n\tif (!cosmiconfigResult) {\n\t\treturn null;\n\t}\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\tlet augmentedConfig = await augmentConfigBasic(\n\t\tstylelint,\n\t\tconfig,\n\t\tconfigDir,\n\t\ttrue,\n\t\tconfigDir,\n\t\tfilePath,\n\t);\n\n\taugmentedConfig = addPluginFunctions(augmentedConfig);\n\taugmentedConfig = addProcessorFunctions(augmentedConfig);\n\n\tif (!augmentedConfig.rules) {\n\t\tthrow configurationError(\n\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t);\n\t}\n\n\taugmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n\n\treturn {\n\t\tconfig: augmentedConfig,\n\t\tfilepath: cosmiconfigResult.filepath,\n\t};\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir, cwd) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = [config.ignoreFiles].flat().map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = [config.plugins].flat().map((lookup) => getModulePath(configDir, lookup, cwd));\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n\tif (config.extends === undefined) {\n\t\treturn config;\n\t}\n\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\tconst normalizedExtends = [configExtends].flat();\n\n\tlet resultConfig = originalWithoutExtends;\n\n\tfor (const extendLookup of normalizedExtends) {\n\t\tconst extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n\t\tif (extendResult) {\n\t\t\tlet extendResultConfig = extendResult.config;\n\t\t\tconst extendConfigDir = path.dirname(extendResult.filepath || '');\n\n\t\t\textendResultConfig = await augmentConfigBasic(\n\t\t\t\tstylelint,\n\t\t\t\textendResultConfig,\n\t\t\t\textendConfigDir,\n\t\t\t\tfalse,\n\t\t\t\trootConfigDir,\n\t\t\t\tfilePath,\n\t\t\t);\n\n\t\t\tresultConfig = mergeConfigs(resultConfig, extendResultConfig);\n\t\t}\n\t}\n\n\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\t/** @type {{overrides: StylelintConfigOverride[]}} */\n\tconst overridesMerger = {};\n\n\tif (a.overrides || b.overrides) {\n\t\toverridesMerger.overrides = [];\n\n\t\tif (a.overrides) {\n\t\t\toverridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n\t\t}\n\n\t\tif (b.overrides) {\n\t\t\toverridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = {\n\t\t...a,\n\t\t...b,\n\t\t...processorMerger,\n\t\t...pluginMerger,\n\t\t...overridesMerger,\n\t\t...rulesMerger,\n\t};\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) {\n\t\treturn config;\n\t}\n\n\tconst normalizedPlugins = [config.plugins].flat();\n\n\t/** @type {StylelintConfig['pluginFunctions']} */\n\tconst pluginFunctions = {};\n\n\tfor (const pluginLookup of normalizedPlugins) {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = [pluginImport].flat();\n\n\t\tfor (const pluginRuleDefinition of normalizedPluginImport) {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t}\n\t}\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {StylelintCodeProcessor[]} */\n\tconst codeProcessors = [];\n\t/** @type {StylelintResultProcessor[]} */\n\tconst resultProcessors = [];\n\n\tfor (const processorConfig of [config.processors].flat()) {\n\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\tlet initializedProcessor;\n\n\t\tif (processorCache.has(processorKey)) {\n\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t} else {\n\t\t\tconst processorLookup =\n\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\tconst processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\tlet processor = require(processorLookup);\n\n\t\t\tprocessor = processor.default || processor;\n\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t}\n\t}\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n\tlet { overrides, ...config } = fullConfig;\n\n\tif (!overrides) {\n\t\treturn config;\n\t}\n\n\tif (!Array.isArray(overrides)) {\n\t\tthrow new TypeError(\n\t\t\t'The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t);\n\t}\n\n\tfor (const override of overrides) {\n\t\tconst { files, ...configOverrides } = override;\n\n\t\tif (!files) {\n\t\t\tthrow new Error(\n\t\t\t\t'Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t\t);\n\t\t}\n\n\t\tconst filesGlobs = [files]\n\t\t\t.flat()\n\t\t\t.map((glob) => {\n\t\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) {\n\t\t\t\t\treturn glob;\n\t\t\t\t}\n\n\t\t\t\treturn globjoin(rootConfigDir, glob);\n\t\t\t})\n\t\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\t\t.map((s) => normalizePath(s));\n\n\t\tif (micromatch.isMatch(filePath, filesGlobs, { dot: true })) {\n\t\t\tconfig = mergeConfigs(config, configOverrides);\n\t\t}\n\t}\n\n\treturn config;\n}\n\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\nfunction addOptions(stylelint, config) {\n\tconst augmentedConfig = {\n\t\t...config,\n\t};\n\n\tif (stylelint._options.ignoreDisables) {\n\t\taugmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n\t}\n\n\tif (stylelint._options.quiet) {\n\t\taugmentedConfig.quiet = stylelint._options.quiet;\n\t}\n\n\tif (stylelint._options.reportNeedlessDisables) {\n\t\taugmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n\t}\n\n\tif (stylelint._options.reportInvalidScopeDisables) {\n\t\taugmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n\t}\n\n\tif (stylelint._options.reportDescriptionlessDisables) {\n\t\taugmentedConfig.reportDescriptionlessDisables =\n\t\t\tstylelint._options.reportDescriptionlessDisables;\n\t}\n\n\tif (stylelint._options.customSyntax) {\n\t\taugmentedConfig.customSyntax = stylelint._options.customSyntax;\n\t}\n\n\treturn augmentedConfig;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull, applyOverrides };\n","'use strict';\n\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst augmentConfig = require('./augmentConfig');\nconst FileCache = require('./utils/FileCache');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @type {import('stylelint')['createLinter']}\n */\nmodule.exports = function createStylelint(options = {}) {\n\tconst cwd = options.cwd || process.cwd();\n\n\treturn {\n\t\t_options: { ...options, cwd },\n\n\t\t_extendExplorer: cosmiconfig('', {\n\t\t\ttransform: augmentConfig.augmentConfigExtended(cwd),\n\t\t\tstopDir: STOP_DIR,\n\t\t}),\n\n\t\t_specifiedConfigCache: new Map(),\n\t\t_postcssResultCache: new Map(),\n\t\t_fileCache: new FileCache(options.cacheLocation, options.cacheStrategy, cwd),\n\t};\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function tapFormatter(results) {\n\tconst lines = [`TAP version 13\\n1..${results.length}`];\n\n\tfor (const [index, result] of results.entries()) {\n\t\tlines.push(\n\t\t\t`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${\n\t\t\t\tresult.source\n\t\t\t}`,\n\t\t);\n\n\t\tif (result.warnings.length > 0) {\n\t\t\tlines.push('---', 'messages:');\n\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlines.push(\n\t\t\t\t\t` - message: \"${warning.text}\"`,\n\t\t\t\t\t`   severity: ${warning.severity}`,\n\t\t\t\t\t`   data:`,\n\t\t\t\t\t`     line: ${warning.line}`,\n\t\t\t\t\t`     column: ${warning.column}`,\n\t\t\t\t\t`     endLine: ${warning.endLine}`,\n\t\t\t\t\t`     endColumn: ${warning.endColumn}`,\n\t\t\t\t\t`     ruleId: ${warning.rule}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlines.push('---');\n\t\t}\n\t}\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n};\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n","'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n","/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n\tif (Number.isNaN(codePoint)) {\n\t\treturn false;\n\t}\n\n\t// Code points are derived from:\n\t// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\tif (\n\t\tcodePoint >= 0x1100 && (\n\t\t\tcodePoint <= 0x115F || // Hangul Jamo\n\t\t\tcodePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n\t\t\tcodePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n\t\t\t// CJK Radicals Supplement .. Enclosed CJK Letters and Months\n\t\t\t(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||\n\t\t\t// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n\t\t\t(0x3250 <= codePoint && codePoint <= 0x4DBF) ||\n\t\t\t// CJK Unified Ideographs .. Yi Radicals\n\t\t\t(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||\n\t\t\t// Hangul Jamo Extended-A\n\t\t\t(0xA960 <= codePoint && codePoint <= 0xA97C) ||\n\t\t\t// Hangul Syllables\n\t\t\t(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||\n\t\t\t// CJK Compatibility Ideographs\n\t\t\t(0xF900 <= codePoint && codePoint <= 0xFAFF) ||\n\t\t\t// Vertical Forms\n\t\t\t(0xFE10 <= codePoint && codePoint <= 0xFE19) ||\n\t\t\t// CJK Compatibility Forms .. Small Form Variants\n\t\t\t(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||\n\t\t\t// Halfwidth and Fullwidth Forms\n\t\t\t(0xFF01 <= codePoint && codePoint <= 0xFF60) ||\n\t\t\t(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||\n\t\t\t// Kana Supplement\n\t\t\t(0x1B000 <= codePoint && codePoint <= 0x1B001) ||\n\t\t\t// Enclosed Ideographic Supplement\n\t\t\t(0x1F200 <= codePoint && codePoint <= 0x1F251) ||\n\t\t\t// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n\t\t\t(0x20000 <= codePoint && codePoint <= 0x3FFFD)\n\t\t)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n","'use strict';\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\n\nconst stringWidth = string => {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tlet width = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst code = string.codePointAt(i);\n\n\t\t// Ignore control characters\n\t\tif (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (code >= 0x300 && code <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Surrogates\n\t\tif (code > 0xFFFF) {\n\t\t\ti++;\n\t\t}\n\n\t\twidth += isFullwidthCodePoint(code) ? 2 : 1;\n\t}\n\n\treturn width;\n};\n\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n","\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n","'use strict';\n\n/**\n * Returns the plural form of the given word.\n *\n * @param {string} singular\n * @param {number} count\n * @returns {string}\n */\nmodule.exports = function pluralize(singular, count) {\n\treturn count === 1 ? singular : `${singular}s`;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","export const EOL = \"\\n\";\nexport const release = () => \"\";\n","'use strict';\nconst supportsColor = require('supports-color');\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n\tif (/^\\d{3,4}$/.test(versionString)) {\n\t\t// Env var doesn't always use dots. example: 4601 => 46.1.0\n\t\tconst m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n\t\treturn {\n\t\t\tmajor: 0,\n\t\t\tminor: parseInt(m[1], 10),\n\t\t\tpatch: parseInt(m[2], 10)\n\t\t};\n\t}\n\n\tconst versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n\treturn {\n\t\tmajor: versions[0],\n\t\tminor: versions[1],\n\t\tpatch: versions[2]\n\t};\n}\n\nfunction supportsHyperlink(stream) {\n\tconst {env} = process;\n\n\tif ('FORCE_HYPERLINK' in env) {\n\t\treturn !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n\t}\n\n\tif (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n\t\treturn true;\n\t}\n\n\t// Netlify does not run a TTY, it does not need `supportsColor` check\n\tif ('NETLIFY' in env) {\n\t\treturn true;\n\t}\n\n\t// If they specify no colors, they probably don't want hyperlinks.\n\tif (!supportsColor.supportsColor(stream)) {\n\t\treturn false;\n\t}\n\n\tif (stream && !stream.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn false;\n\t}\n\n\tif ('CI' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\tif (version.major === 3) {\n\t\t\t\t\treturn version.minor >= 1;\n\t\t\t\t}\n\n\t\t\t\treturn version.major > 3;\n\t\t\tcase 'WezTerm':\n\t\t\t\treturn version.major >= 20200620;\n\t\t\tcase 'vscode':\n\t\t\t\treturn version.major > 1 || version.major === 1 && version.minor >= 72;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif ('VTE_VERSION' in env) {\n\t\t// 0.50.0 was supposed to support hyperlinks, but throws a segfault\n\t\tif (env.VTE_VERSION === '0.50.0') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst version = parseVersion(env.VTE_VERSION);\n\t\treturn version.major > 0 || version.minor >= 50;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tsupportsHyperlink,\n\tstdout: supportsHyperlink(process.stdout),\n\tstderr: supportsHyperlink(process.stderr)\n};\n","export const isatty = () => false;\n","const supportsHyperlinks = require('supports-hyperlinks');\n\n// ANSI escapes\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\n\n/**\n * @see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n *\n * @param {string} text\n * @param {string} url\n * @returns {string}\n */\nmodule.exports = function terminalLink(text, url) {\n\tif (supportsHyperlinks.stdout) {\n\t\treturn [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n\t}\n\n\treturn text;\n};\n","'use strict';\n\nconst path = require('path');\nconst stringWidth = require('string-width');\nconst table = require('table');\nconst { yellow, dim, underline, blue, red, green } = require('picocolors');\n\nconst pluralize = require('../utils/pluralize');\nconst { assertNumber } = require('../utils/validateTypes');\nconst terminalLink = require('./terminalLink');\n\nconst MARGIN_WIDTHS = 9;\n\n/**\n * @param {string} s\n * @returns {string}\n */\nfunction nope(s) {\n\treturn s;\n}\n\nconst levelColors = {\n\tinfo: blue,\n\twarning: yellow,\n\terror: red,\n\tsuccess: nope,\n};\n\nconst symbols = {\n\tinfo: blue('ℹ'),\n\twarning: yellow('⚠'),\n\terror: red('✖'),\n\tsuccess: green('✔'),\n};\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @returns {string}\n */\nfunction deprecationsFormatter(results) {\n\tconst allDeprecationWarnings = results.flatMap((result) => result.deprecations);\n\n\tif (allDeprecationWarnings.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst seenText = new Set();\n\n\treturn allDeprecationWarnings.reduce((output, warning) => {\n\t\tif (seenText.has(warning.text)) return output;\n\n\t\tseenText.add(warning.text);\n\n\t\toutput += yellow('Deprecation Warning: ');\n\t\toutput += warning.text;\n\n\t\tif (warning.reference) {\n\t\t\toutput += dim(' See: ');\n\t\t\toutput += dim(underline(warning.reference));\n\t\t}\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @return {string}\n */\nfunction invalidOptionsFormatter(results) {\n\tconst allInvalidOptionWarnings = results.flatMap((result) =>\n\t\tresult.invalidOptionWarnings.map((warning) => warning.text),\n\t);\n\tconst uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n\n\treturn uniqueInvalidOptionWarnings.reduce((output, warning) => {\n\t\toutput += red('Invalid Option: ');\n\t\toutput += warning;\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {string} fromValue\n * @param {string} cwd\n * @return {string}\n */\nfunction logFrom(fromValue, cwd) {\n\tif (fromValue.startsWith('<')) {\n\t\treturn underline(fromValue);\n\t}\n\n\tconst filePath = path.relative(cwd, fromValue).split(path.sep).join('/');\n\n\treturn terminalLink(filePath, `file://${fromValue}`);\n}\n\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\nfunction getMessageWidth(columnWidths) {\n\tconst width = columnWidths[3];\n\n\tassertNumber(width);\n\n\tif (!process.stdout.isTTY) {\n\t\treturn width;\n\t}\n\n\tconst availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n\tconst fullWidth = Object.values(columnWidths).reduce((a, b) => a + b);\n\n\t// If there is no reason to wrap the text, we won't align the last column to the right\n\tif (availableWidth > fullWidth + MARGIN_WIDTHS) {\n\t\treturn width;\n\t}\n\n\treturn availableWidth - (fullWidth - width + MARGIN_WIDTHS);\n}\n\n/**\n * @param {import('stylelint').Warning[]} messages\n * @param {string} source\n * @param {string} cwd\n * @return {string}\n */\nfunction formatter(messages, source, cwd) {\n\tif (!messages.length) return '';\n\n\tconst orderedMessages = [...messages].sort((a, b) => {\n\t\t// positionless first\n\t\tif (!a.line && b.line) return -1;\n\n\t\t// positionless first\n\t\tif (a.line && !b.line) return 1;\n\n\t\tif (a.line < b.line) return -1;\n\n\t\tif (a.line > b.line) return 1;\n\n\t\tif (a.column < b.column) return -1;\n\n\t\tif (a.column > b.column) return 1;\n\n\t\treturn 0;\n\t});\n\n\t/**\n\t * Create a list of column widths, needed to calculate\n\t * the size of the message column and if needed wrap it.\n\t * @type {{[k: string]: number}}\n\t */\n\tconst columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 };\n\n\t/**\n\t * @param {[string, string, string, string, string]} columns\n\t * @return {[string, string, string, string, string]}\n\t */\n\tfunction calculateWidths(columns) {\n\t\tfor (const [key, value] of Object.entries(columns)) {\n\t\t\tconst normalisedValue = value ? value.toString() : value;\n\t\t\tconst width = columnWidths[key];\n\n\t\t\tassertNumber(width);\n\t\t\tcolumnWidths[key] = Math.max(width, stringWidth(normalisedValue));\n\t\t}\n\n\t\treturn columns;\n\t}\n\n\tlet output = '\\n';\n\n\tif (source) {\n\t\toutput += `${logFrom(source, cwd)}\\n`;\n\t}\n\n\t/**\n\t * @param {import('stylelint').Warning} message\n\t * @return {string}\n\t */\n\tfunction formatMessageText(message) {\n\t\tlet result = message.text;\n\n\t\tresult = result\n\t\t\t// Remove all control characters (newline, tab and etc)\n\t\t\t.replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n\t\t\t.replace(/\\.$/, '');\n\n\t\tconst ruleString = ` (${message.rule})`;\n\n\t\tif (result.endsWith(ruleString)) {\n\t\t\tresult = result.slice(0, result.lastIndexOf(ruleString));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tconst cleanedMessages = orderedMessages.map((message) => {\n\t\tconst { line, column, severity } = message;\n\t\t/**\n\t\t * @type {[string, string, string, string, string]}\n\t\t */\n\t\tconst row = [\n\t\t\tline ? line.toString() : '',\n\t\t\tcolumn ? column.toString() : '',\n\t\t\tsymbols[severity] ? levelColors[severity](symbols[severity]) : severity,\n\t\t\tformatMessageText(message),\n\t\t\tdim(message.rule || ''),\n\t\t];\n\n\t\tcalculateWidths(row);\n\n\t\treturn row;\n\t});\n\n\toutput += table\n\t\t.table(cleanedMessages, {\n\t\t\tborder: table.getBorderCharacters('void'),\n\t\t\tcolumns: {\n\t\t\t\t0: { alignment: 'right', width: columnWidths[0], paddingRight: 0 },\n\t\t\t\t1: { alignment: 'left', width: columnWidths[1] },\n\t\t\t\t2: { alignment: 'center', width: columnWidths[2] },\n\t\t\t\t3: {\n\t\t\t\t\talignment: 'left',\n\t\t\t\t\twidth: getMessageWidth(columnWidths),\n\t\t\t\t\twrapWord: getMessageWidth(columnWidths) > 1,\n\t\t\t\t},\n\t\t\t\t4: { alignment: 'left', width: columnWidths[4], paddingRight: 0 },\n\t\t\t},\n\t\t\tdrawHorizontalLine: () => false,\n\t\t})\n\t\t.split('\\n')\n\t\t.map(\n\t\t\t/**\n\t\t\t * @param {string} el\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\t(el) => el.replace(/(\\d+)\\s+(\\d+)/, (_m, p1, p2) => dim(`${p1}:${p2}`)),\n\t\t)\n\t\t.join('\\n');\n\n\treturn output;\n}\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function stringFormatter(results, returnValue) {\n\tlet output = invalidOptionsFormatter(results);\n\n\toutput += deprecationsFormatter(results);\n\n\tlet errorCount = 0;\n\tlet warningCount = 0;\n\n\toutput = results.reduce((accum, result) => {\n\t\t// Treat parseErrors as warnings\n\t\tif (result.parseErrors) {\n\t\t\tfor (const error of result.parseErrors) {\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\tline: error.line,\n\t\t\t\t\tcolumn: error.column,\n\t\t\t\t\trule: error.stylelintType,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${error.text} (${error.stylelintType})`,\n\t\t\t\t});\n\t\t\t\terrorCount += 1;\n\t\t\t}\n\t\t}\n\n\t\taccum += formatter(\n\t\t\tresult.warnings,\n\t\t\tresult.source || '',\n\t\t\t(returnValue && returnValue.cwd) || process.cwd(),\n\t\t);\n\n\t\tfor (const warning of result.warnings) {\n\t\t\tswitch (warning.severity) {\n\t\t\t\tcase 'error':\n\t\t\t\t\terrorCount += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\twarningCount += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unknown severity: \"${warning.severity}\"`);\n\t\t\t}\n\t\t}\n\n\t\treturn accum;\n\t}, output);\n\n\t// Ensure consistent padding\n\toutput = output.trim();\n\n\tif (output !== '') {\n\t\toutput = `\\n${output}\\n\\n`;\n\n\t\tconst total = errorCount + warningCount;\n\n\t\tif (total > 0) {\n\t\t\tconst tally =\n\t\t\t\t`${total} ${pluralize('problem', total)}` +\n\t\t\t\t` (${errorCount} ${pluralize('error', errorCount)}` +\n\t\t\t\t`, ${warningCount} ${pluralize('warning', warningCount)})`;\n\n\t\t\toutput += `${tally}\\n\\n`;\n\t\t}\n\t}\n\n\treturn output;\n};\n","'use strict';\n\nconst { underline, red, yellow, dim, green } = require('picocolors');\n\nconst pluralize = require('../utils/pluralize');\nconst stringFormatter = require('./stringFormatter');\nconst terminalLink = require('./terminalLink');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} LintResult */\n/** @typedef {import('stylelint').Warning} Warning */\n/** @typedef {import('stylelint').Severity} Severity */\n/** @typedef {import('stylelint').RuleMeta} RuleMeta */\n\n/**\n * @type {Formatter}\n */\nmodule.exports = function verboseFormatter(results, returnValue) {\n\tlet output = stringFormatter(results, returnValue);\n\n\tif (output === '') {\n\t\toutput = '\\n';\n\t}\n\n\tconst ignoredCount = results.filter((result) => result.ignored).length;\n\tconst checkedDisplay = ignoredCount\n\t\t? `${results.length - ignoredCount} of ${results.length}`\n\t\t: results.length;\n\n\toutput += underline(`${checkedDisplay} ${pluralize('source', results.length)} checked\\n`);\n\n\tfor (const result of results) {\n\t\tlet formatting = green;\n\n\t\tif (result.errored) {\n\t\t\tformatting = red;\n\t\t} else if (result.warnings.length) {\n\t\t\tformatting = yellow;\n\t\t} else if (result.ignored) {\n\t\t\tformatting = dim;\n\t\t}\n\n\t\tlet sourceText = fileLink(result.source);\n\n\t\tif (result.ignored) {\n\t\t\tsourceText += ' (ignored)';\n\t\t}\n\n\t\toutput += formatting(` ${sourceText}\\n`);\n\t}\n\n\tconst warnings = results.flatMap((r) => r.warnings);\n\n\tif (warnings.length === 0) {\n\t\toutput += '\\n0 problems found\\n';\n\t} else {\n\t\tconst warningsBySeverity = groupBy(warnings, (w) => w.severity);\n\t\tlet fixableProblemsFound = false;\n\n\t\t/**\n\t\t * @param {Severity} severity\n\t\t */\n\t\tconst printProblems = (severity) => {\n\t\t\tconst problems = warningsBySeverity[severity];\n\n\t\t\tif (problems === undefined) return;\n\n\t\t\toutput += '\\n';\n\t\t\toutput += underline(`${problems.length} ${pluralize(severity, problems.length)} found\\n`);\n\n\t\t\tconst problemsByRule = groupBy(problems, (w) => w.rule);\n\t\t\tconst metadata = returnValue.ruleMetadata;\n\n\t\t\tfor (const [rule, list] of Object.entries(problemsByRule)) {\n\t\t\t\tconst meta = metadata[rule];\n\t\t\t\tconst fixable = meta && meta.fixable ? ' (maybe fixable)' : '';\n\n\t\t\t\toutput += dim(` ${ruleLink(rule, meta)}: ${list.length}${fixable}\\n`);\n\n\t\t\t\tif (!fixableProblemsFound && meta && meta.fixable) {\n\t\t\t\t\tfixableProblemsFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprintProblems('error');\n\t\tprintProblems('warning');\n\n\t\tif (fixableProblemsFound) {\n\t\t\toutput += yellow('\\nYou may fix some problems with the \"--fix\" option.\\n');\n\t\t}\n\t}\n\n\treturn `${output}\\n`;\n};\n\n/**\n * @template {string} K\n * @param {Warning[]} array\n * @param {(w: Warning) => K} keyFn\n * @returns {Record<K, Warning[]>}\n */\nfunction groupBy(array, keyFn) {\n\t/** @type {Record<string, Warning[]>} */\n\tconst result = {};\n\n\tfor (const item of array) {\n\t\tconst key = keyFn(item);\n\t\tlet warnings = result[key];\n\n\t\tif (warnings === undefined) {\n\t\t\tresult[key] = warnings = [];\n\t\t}\n\n\t\twarnings.push(item);\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {string | undefined} source\n * @returns {string}\n */\nfunction fileLink(source) {\n\tif (!source || source.startsWith('<')) {\n\t\treturn `${source}`;\n\t}\n\n\treturn terminalLink(source, `file://${source}`);\n}\n\n/**\n * @param {string} rule\n * @param {Partial<RuleMeta> | undefined} metadata\n * @returns {string}\n */\nfunction ruleLink(rule, metadata) {\n\tif (metadata && metadata.url) {\n\t\treturn terminalLink(rule, metadata.url);\n\t}\n\n\treturn rule;\n}\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').formatters} */\nconst formatters = {\n\tcompact: importLazy('./compactFormatter'),\n\tgithub: importLazy('./githubFormatter'),\n\tjson: importLazy('./jsonFormatter'),\n\tstring: importLazy('./stringFormatter'),\n\ttap: importLazy('./tapFormatter'),\n\tunix: importLazy('./unixFormatter'),\n\tverbose: importLazy('./verboseFormatter'),\n};\n\nmodule.exports = formatters;\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function compactFormatter(results) {\n\treturn results\n\t\t.flatMap((result) =>\n\t\t\tresult.warnings.map(\n\t\t\t\t(warning) =>\n\t\t\t\t\t`${result.source}: ` +\n\t\t\t\t\t`line ${warning.line}, ` +\n\t\t\t\t\t`col ${warning.column}, ` +\n\t\t\t\t\t`${warning.severity} - ` +\n\t\t\t\t\t`${warning.text}`,\n\t\t\t),\n\t\t)\n\t\t.join('\\n');\n};\n","'use strict';\n\n/**\n * @see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function githubFormatter(results, returnValue) {\n\tconst title = 'Stylelint problem';\n\tconst metadata = returnValue.ruleMetadata;\n\n\treturn results\n\t\t.flatMap(({ source, warnings }) =>\n\t\t\twarnings.map(({ line, column, endLine, endColumn, text, severity, rule }) => {\n\t\t\t\tconst msg = buildMessage(text, metadata[rule]);\n\n\t\t\t\treturn endLine === undefined\n\t\t\t\t\t? `::${severity} file=${source},line=${line},col=${column},title=${title}::${msg}`\n\t\t\t\t\t: `::${severity} file=${source},line=${line},col=${column},endLine=${endLine},endColumn=${endColumn},title=${title}::${msg}`;\n\t\t\t}),\n\t\t)\n\t\t.join('\\n');\n};\n\n/**\n * @param {string} msg\n * @param {Partial<import('stylelint').RuleMeta> | undefined} metadata\n * @returns {string}\n */\nfunction buildMessage(msg, metadata) {\n\tif (!metadata) return msg;\n\n\tconst url = metadata.url ? ` - ${metadata.url}` : '';\n\tconst fixable = metadata.fixable ? ' [maybe fixable]' : '';\n\n\treturn `${msg}${fixable}${url}`;\n}\n","'use strict';\n\n/**\n * Omit any properties starting with `_`, which are fake-private\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function jsonFormatter(results) {\n\tconst cleanedResults = results.map((result) =>\n\t\tObject.entries(result)\n\t\t\t.filter(([key]) => !key.startsWith('_'))\n\t\t\t.reduce((/** @type {{ [key: string]: any }} */ obj, [key, value]) => {\n\t\t\t\tobj[key] = value;\n\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t);\n\n\treturn JSON.stringify(cleanedResults);\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function unixFormatter(results) {\n\tconst lines = results.flatMap((result) =>\n\t\tresult.warnings.map(\n\t\t\t(warning) =>\n\t\t\t\t`${result.source}:${warning.line}:${warning.column}: ` +\n\t\t\t\t`${warning.text} [${warning.severity}]\\n`,\n\t\t),\n\t);\n\tconst total = lines.length;\n\tlet output = lines.join('');\n\n\tif (total > 0) {\n\t\toutput += `\\n${total} problem${total !== 1 ? 's' : ''}\\n`;\n\t}\n\n\treturn output;\n};\n","import normalize from \"stylelint/lib/normalizeAllRuleSettings\";\n\nexport default async stylelint => ({\n  config: normalize(stylelint._options.config)\n});\n","let tokenizer = require('postcss/lib/tokenize')\nlet Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n  }\n}\n\nmodule.exports = SafeParser\n","let { Input } = require('postcss')\n\nlet SafeParser = require('./safe-parser')\n\nmodule.exports = function safeParse(css, opts) {\n  let input = new Input(css, opts)\n\n  let parser = new SafeParser(input)\n  parser.parse()\n\n  return parser.root\n}\n","'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\nconst path = require('path');\nconst { default: postcss } = require('postcss');\nconst { promises: fs } = require('fs');\n\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('postcss').Syntax} Syntax */\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\nconst postcssProcessor = postcss();\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\nmodule.exports = async function getPostcssResult(stylelint, options = {}) {\n\tconst cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tif (stylelint._options.syntax) {\n\t\tlet error = 'The \"syntax\" option is no longer available. ';\n\n\t\terror +=\n\t\t\tstylelint._options.syntax === 'css'\n\t\t\t\t? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default'\n\t\t\t\t: `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n\n\t\treturn Promise.reject(new Error(error));\n\t}\n\n\tconst syntax = options.customSyntax\n\t\t? getCustomSyntax(options.customSyntax)\n\t\t: cssSyntax(stylelint, options.filePath);\n\n\tconst postcssOptions = {\n\t\tfrom: options.filePath,\n\t\tsyntax,\n\t};\n\n\t/** @type {string | undefined} */\n\tlet getCode;\n\n\tif (options.code !== undefined) {\n\t\tgetCode = options.code;\n\t} else if (options.filePath) {\n\t\tgetCode = await fs.readFile(options.filePath, 'utf8');\n\t}\n\n\tif (getCode === undefined) {\n\t\treturn Promise.reject(new Error('code or filePath required'));\n\t}\n\n\tif (options.codeProcessors && options.codeProcessors.length) {\n\t\tif (stylelint._options.fix) {\n\t\t\tconsole.warn(\n\t\t\t\t'Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?',\n\t\t\t);\n\t\t\tstylelint._options.fix = false;\n\t\t}\n\n\t\tconst sourceName = options.code ? options.codeFilename : options.filePath;\n\n\t\tfor (const codeProcessor of options.codeProcessors) {\n\t\t\tgetCode = codeProcessor(getCode, sourceName);\n\t\t}\n\t}\n\n\tconst postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n\tif (options.filePath) {\n\t\tstylelint._postcssResultCache.set(options.filePath, postcssResult);\n\t}\n\n\treturn postcssResult;\n};\n\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\nfunction getCustomSyntax(customSyntax) {\n\tlet resolved;\n\n\tif (typeof customSyntax === 'string') {\n\t\ttry {\n\t\t\tresolved = require(customSyntax);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror &&\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.code === 'MODULE_NOT_FOUND' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.message.includes(customSyntax)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/*\n\t\t * PostCSS allows for syntaxes that only contain a parser, however,\n\t\t * it then expects the syntax to be set as the `parse` option.\n\t\t */\n\t\tif (!resolved.parse) {\n\t\t\tresolved = {\n\t\t\t\tparse: resolved,\n\t\t\t\tstringify: postcss.stringify,\n\t\t\t};\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tif (typeof customSyntax === 'object') {\n\t\tif (typeof customSyntax.parse === 'function') {\n\t\t\tresolved = { ...customSyntax };\n\t\t} else {\n\t\t\tthrow new TypeError(\n\t\t\t\t`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`,\n\t\t\t);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tthrow new Error(`Custom syntax must be a string or a Syntax object`);\n}\n\n/** @type {{ [key: string]: string }} */\nconst previouslyInferredExtensions = {\n\thtml: 'postcss-html',\n\tjs: '@stylelint/postcss-css-in-js',\n\tjsx: '@stylelint/postcss-css-in-js',\n\tless: 'postcss-less',\n\tmd: 'postcss-markdown',\n\tsass: 'postcss-sass',\n\tsss: 'sugarss',\n\tscss: 'postcss-scss',\n\tsvelte: 'postcss-html',\n\tts: '@stylelint/postcss-css-in-js',\n\ttsx: '@stylelint/postcss-css-in-js',\n\tvue: 'postcss-html',\n\txml: 'postcss-html',\n\txst: 'postcss-html',\n};\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\nfunction cssSyntax(stylelint, filePath) {\n\tconst fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n\tconst extensions = ['css', 'pcss', 'postcss'];\n\n\tif (previouslyInferredExtensions[fileExtension]) {\n\t\tconsole.warn(\n\t\t\t`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`,\n\t\t);\n\t}\n\n\treturn {\n\t\tparse:\n\t\t\tstylelint._options.fix && extensions.includes(fileExtension)\n\t\t\t\t? require('postcss-safe-parser')\n\t\t\t\t: postcss.parse,\n\t\tstringify: postcss.stringify,\n\t};\n}\n","export default async () => false;\n","'use strict';\n\nconst util = require('util');\n\n/**\n * @param {unknown} error\n * @returns {error is NodeJS.ErrnoException}\n */\nmodule.exports = function isPathNotFoundError(error) {\n\t// @ts-expect-error -- TS2339: Property 'code' does not exist on type 'Error'.\n\treturn util.types.isNativeError(error) && error.code === 'ENOENT';\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\nconst {\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n\textractStylelintCommand,\n\tisStylelintCommand,\n} = require('./utils/stylelintCommand');\nconst { assert, assertNumber, assertString } = require('./utils/validateTypes');\n\nconst ALL_RULES = 'all';\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('postcss').Root} PostcssRoot */\n/** @typedef {import('postcss').Document} PostcssDocument */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n\treturn {\n\t\tcomment,\n\t\tstart,\n\t\tend: end || undefined,\n\t\tstrictStart,\n\t\tstrictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n\t\tdescription,\n\t};\n}\n\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\nmodule.exports = function assignDisabledRanges(root, result) {\n\tresult.stylelint = result.stylelint || {\n\t\tdisabledRanges: {},\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t/**\n\t * Most of the functions below work via side effects mutating this object\n\t * @type {DisabledRangeObject & { all: DisabledRange[] }}\n\t */\n\tconst disabledRanges = {\n\t\t[ALL_RULES]: [],\n\t};\n\n\tresult.stylelint.disabledRanges = disabledRanges;\n\n\t// Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n\t// into a single node before passing to `checkComment`.\n\n\t/** @type {PostcssComment?} */\n\tlet inlineEnd;\n\n\troot.walkComments((comment) => {\n\t\tif (inlineEnd) {\n\t\t\t// Ignore comments already processed by grouping with a previous one.\n\t\t\tif (inlineEnd === comment) inlineEnd = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextComment = comment.next();\n\n\t\t// If any of these conditions are not met, do not merge comments.\n\t\tif (\n\t\t\t!(\n\t\t\t\t!isStandardSyntaxComment(comment) &&\n\t\t\t\tisStylelintCommand(comment) &&\n\t\t\t\tnextComment &&\n\t\t\t\tnextComment.type === 'comment' &&\n\t\t\t\t(comment.text.includes('--') || nextComment.text.startsWith('--'))\n\t\t\t)\n\t\t) {\n\t\t\tcheckComment(comment);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastLine = (comment.source && comment.source.end && comment.source.end.line) || 0;\n\t\tconst fullComment = comment.clone();\n\n\t\tlet current = nextComment;\n\n\t\twhile (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n\t\t\tconst currentLine = (current.source && current.source.end && current.source.end.line) || 0;\n\n\t\t\tif (lastLine + 1 !== currentLine) break;\n\n\t\t\tfullComment.text += `\\n${current.text}`;\n\n\t\t\tif (fullComment.source && current.source) {\n\t\t\t\tfullComment.source.end = current.source.end;\n\t\t\t}\n\n\t\t\tinlineEnd = current;\n\t\t\tconst next = current.next();\n\n\t\t\tif (!next || next.type !== 'comment') break;\n\n\t\t\tcurrent = next;\n\t\t\tlastLine = currentLine;\n\t\t}\n\n\t\tcheckComment(fullComment);\n\t});\n\n\treturn result;\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableLineCommand(comment) {\n\t\tif (comment.source && comment.source.start) {\n\t\t\tconst line = comment.source.start.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(DISABLE_LINE_COMMAND, comment.text)) {\n\t\t\t\tdisableLine(comment, line, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableNextLineCommand(comment) {\n\t\tif (comment.source && comment.source.end) {\n\t\t\tconst line = comment.source.end.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(DISABLE_NEXT_LINE_COMMAND, comment.text)) {\n\t\t\t\tdisableLine(comment, line + 1, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {string|undefined} description\n\t */\n\tfunction disableLine(comment, line, ruleName, description) {\n\t\tif (ruleIsDisabled(ALL_RULES)) {\n\t\t\tthrow comment.error('All rules have already been disabled', {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\n\t\tif (ruleName === ALL_RULES) {\n\t\t\tfor (const disabledRuleName of Object.keys(disabledRanges)) {\n\t\t\t\tif (ruleIsDisabled(disabledRuleName)) continue;\n\n\t\t\t\tconst strict = disabledRuleName === ALL_RULES;\n\n\t\t\t\tstartDisabledRange(comment, line, disabledRuleName, strict, description);\n\t\t\t\tendDisabledRange(line, disabledRuleName, strict);\n\t\t\t}\n\t\t} else {\n\t\t\tif (ruleIsDisabled(ruleName)) {\n\t\t\t\tthrow comment.error(`\"${ruleName}\" has already been disabled`, {\n\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstartDisabledRange(comment, line, ruleName, true, description);\n\t\t\tendDisabledRange(line, ruleName, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableCommand(comment) {\n\t\tconst description = getDescription(comment.text);\n\n\t\tfor (const ruleToDisable of getCommandRules(DISABLE_COMMAND, comment.text)) {\n\t\t\tconst isAllRules = ruleToDisable === ALL_RULES;\n\n\t\t\tif (ruleIsDisabled(ruleToDisable)) {\n\t\t\t\tthrow comment.error(\n\t\t\t\t\tisAllRules\n\t\t\t\t\t\t? 'All rules have already been disabled'\n\t\t\t\t\t\t: `\"${ruleToDisable}\" has already been disabled`,\n\t\t\t\t\t{\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (comment.source && comment.source.start) {\n\t\t\t\tconst line = comment.source.start.line;\n\n\t\t\t\tif (isAllRules) {\n\t\t\t\t\tfor (const ruleName of Object.keys(disabledRanges)) {\n\t\t\t\t\t\tstartDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartDisabledRange(comment, line, ruleToDisable, true, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processEnableCommand(comment) {\n\t\tfor (const ruleToEnable of getCommandRules(ENABLE_COMMAND, comment.text)) {\n\t\t\t// need fallback if endLine will be undefined\n\t\t\tconst endLine = comment.source && comment.source.end && comment.source.end.line;\n\n\t\t\tassertNumber(endLine);\n\n\t\t\tif (ruleToEnable === ALL_RULES) {\n\t\t\t\tif (\n\t\t\t\t\tObject.values(disabledRanges).every((ranges) => {\n\t\t\t\t\t\tif (ranges.length === 0) return true;\n\n\t\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\t\treturn lastRange && typeof lastRange.end === 'number';\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tthrow comment.error('No rules have been disabled', {\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\tif (!lastRange || !lastRange.end) {\n\t\t\t\t\t\tendDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n\t\t\t\t// Get a starting point from the where all rules were disabled\n\t\t\t\tdisabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(\n\t\t\t\t\t({ start, end, description }) =>\n\t\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t\t);\n\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ruleToEnable)) {\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction checkComment(comment) {\n\t\t// Ignore comments that are not relevant commands\n\n\t\tif (!isStylelintCommand(comment)) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (extractStylelintCommand(comment)) {\n\t\t\tcase DISABLE_LINE_COMMAND:\n\t\t\t\tprocessDisableLineCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase DISABLE_NEXT_LINE_COMMAND:\n\t\t\t\tprocessDisableNextLineCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase DISABLE_COMMAND:\n\t\t\t\tprocessDisableCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase ENABLE_COMMAND:\n\t\t\t\tprocessEnableCommand(comment);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} command\n\t * @param {string} fullText\n\t * @returns {string[]}\n\t */\n\tfunction getCommandRules(command, fullText) {\n\t\t// Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n\t\tconst splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n\n\t\tassertString(splitted);\n\t\tconst rules = splitted\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.filter(Boolean)\n\t\t\t.map((r) => r.trim());\n\n\t\tif (rules.length === 0) {\n\t\t\treturn [ALL_RULES];\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * @param {string} fullText\n\t * @returns {string|undefined}\n\t */\n\tfunction getDescription(fullText) {\n\t\tconst descriptionStart = fullText.indexOf('--');\n\n\t\tif (descriptionStart === -1) return;\n\n\t\treturn fullText.slice(descriptionStart + 2).trim();\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t * @param {string|undefined} description\n\t */\n\tfunction startDisabledRange(comment, line, ruleName, strict, description) {\n\t\tconst rangeObj = createDisableRange(comment, line, strict, description);\n\n\t\tensureRuleRanges(ruleName);\n\n\t\tconst range = disabledRanges[ruleName];\n\n\t\tassert(range);\n\t\trange.push(rangeObj);\n\t}\n\n\t/**\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t */\n\tfunction endDisabledRange(line, ruleName, strict) {\n\t\tconst ranges = disabledRanges[ruleName];\n\t\tconst lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n\t\tif (!lastRangeForRule) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add an `end` prop to the last range of that rule\n\t\tlastRangeForRule.end = line;\n\t\tlastRangeForRule.strictEnd = strict;\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t */\n\tfunction ensureRuleRanges(ruleName) {\n\t\tif (!disabledRanges[ruleName]) {\n\t\t\tdisabledRanges[ruleName] = disabledRanges[ALL_RULES].map(\n\t\t\t\t({ comment, start, end, description }) =>\n\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t * @returns {boolean}\n\t */\n\tfunction ruleIsDisabled(ruleName) {\n\t\tconst ranges = disabledRanges[ruleName];\n\n\t\tif (!ranges) return false;\n\n\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\tif (!lastRange) return false;\n\n\t\tif (!lastRange.end) return true;\n\n\t\treturn false;\n\t}\n};\n","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = Array.from({ length: MAX_LEVENSHTEIN_DISTANCE });\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tfor (const existRuleName of Object.keys(rules)) {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t}\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (const [i, suggestion] of suggestions.entries()) {\n\t\tif (suggestion.length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestion);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t});\n};\n","'use strict';\n\nconst path = require('path');\n\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\nconst lintPostcssResult = require('./lintPostcssResult');\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = async function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst isIgnored = await isPathIgnored(stylelint, inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) return false;\n\n\t\tthrow err;\n\t});\n\n\tif (isIgnored) {\n\t\treturn options.existingPostcssResult\n\t\t\t? Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t  })\n\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t}\n\n\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\tconst cwd = stylelint._options.cwd;\n\n\tlet configForFile;\n\n\ttry {\n\t\tconfigForFile = await getConfigForFile(stylelint, configSearchPath, inputFilePath);\n\t} catch (err) {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) {\n\t\t\tconfigForFile = await getConfigForFile(stylelint, cwd);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tif (!configForFile) {\n\t\treturn Promise.reject(new Error('Config file not found'));\n\t}\n\n\tconst config = configForFile.config;\n\tconst existingPostcssResult = options.existingPostcssResult;\n\n\tif (options.cache) {\n\t\tstylelint._fileCache.calcHashOfConfig(config);\n\n\t\tif (options.filePath && !stylelint._fileCache.hasFileChanged(options.filePath)) {\n\t\t\treturn existingPostcssResult\n\t\t\t\t? Object.assign(existingPostcssResult, {\n\t\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t\t  })\n\t\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t\t}\n\t}\n\n\t/** @type {StylelintPostcssResult} */\n\tconst stylelintResult = {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t};\n\n\tconst postcssResult =\n\t\texistingPostcssResult ||\n\t\t(await getPostcssResult(stylelint, {\n\t\t\tcode: options.code,\n\t\t\tcodeFilename: options.codeFilename,\n\t\t\tfilePath: inputFilePath,\n\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\tcustomSyntax: config.customSyntax,\n\t\t}));\n\n\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\tstylelint: stylelintResult,\n\t});\n\n\tawait lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n\n\treturn stylelintPostcssResult;\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t\tstylelintWarning: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n","'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.ruleMetadata = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.stylelintWarning = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string | undefined} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (\n\t\tpostcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]\n\t);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rulesOrder = Object.keys(rules);\n\tconst ruleNames = config.rules\n\t\t? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b))\n\t\t: [];\n\n\tfor (const ruleName of ruleNames) {\n\t\tconst ruleFunction =\n\t\t\trules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ruleSettings = config.rules && config.rules[ruleName];\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\t\t// disableFix in secondary option\n\t\tconst disableFix = (secondaryOptions && secondaryOptions.disableFix === true) || false;\n\n\t\tif (disableFix) {\n\t\t\tpostcssResult.stylelint.ruleDisableFix = true;\n\t\t}\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] =\n\t\t\t(secondaryOptions && secondaryOptions.severity) || defaultSeverity;\n\t\tpostcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n\t\tpostcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\t!disableFix &&\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n","'use strict';\n\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst lintSource = require('./lintSource');\n\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\nmodule.exports = (options = {}) => {\n\tconst [cwd, tailoredOptions] = isConfig(options)\n\t\t? [process.cwd(), { config: options }]\n\t\t: [options.cwd || process.cwd(), options];\n\tconst stylelint = createStylelint(tailoredOptions);\n\n\treturn {\n\t\tpostcssPlugin: 'stylelint',\n\t\tOnce(root, { result }) {\n\t\t\tlet filePath = root.source && root.source.input.file;\n\n\t\t\tif (filePath && !path.isAbsolute(filePath)) {\n\t\t\t\tfilePath = path.join(cwd, filePath);\n\t\t\t}\n\n\t\t\treturn lintSource(stylelint, {\n\t\t\t\tfilePath,\n\t\t\t\texistingPostcssResult: result,\n\t\t\t});\n\t\t},\n\t};\n};\n\nmodule.exports.postcss = true;\n\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\nfunction isConfig(options) {\n\treturn 'rules' in options;\n}\n","'use strict';\n\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst getConfigForFile = require('./getConfigForFile');\n\n/**\n * Resolves the effective configuration for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} options - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\nmodule.exports = async function resolveConfig(\n\tfilePath,\n\t{ cwd = process.cwd(), config, configBasedir, configFile } = {},\n) {\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t});\n\n\tconst absoluteFilePath = !path.isAbsolute(filePath)\n\t\t? path.join(cwd, filePath)\n\t\t: path.normalize(filePath);\n\n\tconst configSearchPath = stylelint._options.configFile || absoluteFilePath;\n\n\tconst resolved = await getConfigForFile(stylelint, configSearchPath, absoluteFilePath);\n\n\tif (!resolved) {\n\t\treturn undefined;\n\t}\n\n\treturn resolved.config;\n};\n","'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = async function createStylelintResult(\n\tstylelint,\n\tpostcssResult,\n\tfilePath,\n\tcssSyntaxError,\n) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\tconst configForFile = await getConfigForFile(stylelint, filePath, filePath);\n\n\tconst config = configForFile === null ? {} : configForFile.config;\n\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\tif (config.resultProcessors) {\n\t\tfor (const resultProcessor of config.resultProcessors) {\n\t\t\t// Result processors might just mutate the result object,\n\t\t\t// or might return a new one\n\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\tif (returned) {\n\t\t\t\tstylelintResult = returned;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function createPartialStylelintResult(postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\tconst deprecationMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'deprecation',\n\t\t);\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\tconst invalidOptionMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'invalidOption',\n\t\t);\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'parseError',\n\t\t);\n\n\t\t// Remove deprecation warnings, invalid options, and parse errors from the messages\n\t\tpostcssResult.messages = postcssResult.messages.filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.stylelintType !== 'deprecation' &&\n\t\t\t\tmessage.stylelintType !== 'invalidOption' &&\n\t\t\t\tmessage.stylelintType !== 'parseError',\n\t\t);\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n\t\t\tparseErrors,\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\tendLine: message.endLine,\n\t\t\t\t\tendColumn: message.endColumn,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\tendLine: cssSyntaxError.endLine,\n\t\t\t\t\tendColumn: cssSyntaxError.endColumn,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\nconst { isPathValid } = require('ignore').default;\n\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n\tconst validForIgnore = filePaths.filter(isPathValid);\n\t// Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\tconst notValidForIgnore = new Set(filePaths.filter((p) => !validForIgnore.includes(p)));\n\n\tconst filteredByIgnore = new Set(ignorer.filter(validForIgnore));\n\n\t// Preserving files order, while removing paths which were filtered by `ignore`\n\treturn filePaths.filter((p) => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};\n","'use strict';\n\nclass NoFilesFoundError extends Error {\n\t/**\n\t * @param {string|string[]} fileList\n\t */\n\tconstructor(fileList) {\n\t\tsuper();\n\n\t\tif (typeof fileList === 'string') {\n\t\t\tfileList = [fileList];\n\t\t}\n\n\t\tconst pattern = fileList.filter((i) => !i.startsWith('!')).join(', ');\n\n\t\tthis.message = `No files matching the pattern \"${pattern}\" were found.`;\n\t}\n}\n\nmodule.exports = NoFilesFoundError;\n","'use strict';\n\nclass AllFilesIgnoredError extends Error {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.message = `All input files were ignored because of the ignore pattern. Either change your input, ignore pattern or use \"--allow-empty-input\" to allow no inputs`;\n\t}\n}\n\nmodule.exports = AllFilesIgnoredError;\n","'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\nconst { isRegExp, isString } = require('./utils/validateTypes');\n\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\nmodule.exports = function validateDisableSettings(result, field) {\n\t// Files with `CssSyntaxError`s don't have `_postcssResult`s.\n\tif (!result) return null;\n\n\tconst stylelintResult = result.stylelint;\n\n\t// Files with linting errors may not have configs associated with them.\n\tif (!stylelintResult.config) return null;\n\n\tconst rawSettings = stylelintResult.config[field];\n\n\t/** @type {boolean} */\n\tlet enabled;\n\t/** @type {DisableOptions} */\n\tlet options;\n\n\tif (Array.isArray(rawSettings)) {\n\t\tenabled = rawSettings[0];\n\t\toptions = rawSettings[1] || {};\n\t} else {\n\t\tenabled = rawSettings || false;\n\t\toptions = {};\n\t}\n\n\tconst validOptions = validateOptions(\n\t\tresult,\n\t\tfield,\n\t\t{\n\t\t\tactual: enabled,\n\t\t\tpossible: [true, false],\n\t\t},\n\t\t{\n\t\t\tactual: options,\n\t\t\tpossible: {\n\t\t\t\texcept: [isString, isRegExp],\n\t\t\t},\n\t\t},\n\t);\n\n\tif (!validOptions) return null;\n\n\t// If the check is disabled with no exceptions, there's no reason to run\n\t// it at all.\n\tif (!enabled && !options.except) return null;\n\n\treturn [\n\t\tenabled,\n\t\t{\n\t\t\texcept: options.except || [],\n\t\t\tseverity: options.severity || stylelintResult.config.defaultSeverity || 'error',\n\t\t},\n\t\tstylelintResult,\n\t];\n};\n","'use strict';\n\n/**\n * If `map` already has the given `key`, returns its value. Otherwise, calls\n * `callback`, adds the result to `map` at `key`, and then returns it.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {() => V} callback\n * @returns {V}\n */\nmodule.exports = function putIfAbsent(map, key, callback) {\n\tif (map.has(key)) return /** @type {V} */ (map.get(key));\n\n\tconst value = callback();\n\n\tmap.set(key, value);\n\n\treturn value;\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst putIfAbsent = require('./utils/putIfAbsent');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function needlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst rangeData = stylelintResult.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst disabledWarnings = stylelintResult.disabledWarnings || [];\n\n\t\t// A map from `stylelint-disable` comments to the set of rules that\n\t\t// are usefully disabled by each comment. We track this\n\t\t// comment-by-comment rather than range-by-range because ranges that\n\t\t// disable *all* rules are duplicated for each rule they apply to in\n\t\t// practice.\n\t\t/** @type {Map<PostcssComment, Set<string>>}} */\n\t\tconst usefulDisables = new Map();\n\n\t\tfor (const warning of disabledWarnings) {\n\t\t\tconst rule = warning.rule;\n\t\t\tconst ruleRanges = rangeData[rule];\n\n\t\t\tif (ruleRanges) {\n\t\t\t\tfor (const range of ruleRanges) {\n\t\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const range of rangeData.all || []) {\n\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst allRangeComments = new Set((rangeData.all || []).map((range) => range.comment));\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\t\tconst useful = usefulDisables.get(range.comment) || new Set();\n\n\t\t\t\t// Only emit a warning if this range's comment isn't useful for this rule.\n\t\t\t\t// For the special rule \"all\", only emit a warning if it's not useful for\n\t\t\t\t// *any* rules, because it covers all of them.\n\t\t\t\tif (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Needless disable for \"${rule}\"`,\n\t\t\t\t\trule: '--report-needless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\nfunction isWarningInRange(warning, range) {\n\tconst line = warning.line;\n\n\t// Need to check if range.end exist, because line number type cannot be compared to undefined\n\treturn (\n\t\trange.start <= line &&\n\t\t((range.end !== undefined && range.end >= line) || range.end === undefined)\n\t);\n}\n","'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\nmodule.exports = function reportDisables(results) {\n\tfor (const result of results) {\n\t\t// File with `CssSyntaxError` don't have `_postcssResult`s.\n\t\tif (!result._postcssResult) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/** @type {{[ruleName: string]: Array<RangeType>}} */\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst config = result._postcssResult.stylelint.config;\n\n\t\tif (!config || !config.rules) continue;\n\n\t\t// If no rules actually disallow disables, don't bother looking for ranges\n\t\t// that correspond to disabled rules.\n\t\tif (!Object.values(config.rules).some((rule) => reportDisablesForRule(rule))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (!reportDisablesForRule(config.rules[rule] || [])) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" may not be disabled`,\n\t\t\t\t\trule: 'reportDisables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\nfunction reportDisablesForRule(options) {\n\tif (!options || !options[1]) return false;\n\n\treturn Boolean(options[1].reportDisables);\n}\n","'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\nconst invalidScopeDisables = require('./invalidScopeDisables');\nconst needlessDisables = require('./needlessDisables');\nconst reportDisables = require('./reportDisables');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').LinterOptions[\"maxWarnings\"]} maxWarnings */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {maxWarnings} maxWarnings\n * @param {Formatter} formatter\n * @param {string} cwd\n *\n * @returns {LinterResult}\n */\nmodule.exports = function prepareReturnValue(stylelintResults, maxWarnings, formatter, cwd) {\n\treportDisables(stylelintResults);\n\tneedlessDisables(stylelintResults);\n\tinvalidScopeDisables(stylelintResults);\n\tdescriptionlessDisables(stylelintResults);\n\n\tconst errored = stylelintResults.some(\n\t\t(result) =>\n\t\t\tresult.errored ||\n\t\t\tresult.parseErrors.length > 0 ||\n\t\t\tresult.warnings.some((warning) => warning.severity === 'error'),\n\t);\n\n\t/** @type {LinterResult} */\n\tconst returnValue = {\n\t\tcwd,\n\t\terrored,\n\t\tresults: [],\n\t\toutput: '',\n\t\treportedDisables: [],\n\t\truleMetadata: getRuleMetadata(stylelintResults),\n\t};\n\n\tif (maxWarnings !== undefined) {\n\t\tconst foundWarnings = stylelintResults.reduce((count, file) => count + file.warnings.length, 0);\n\n\t\tif (foundWarnings > maxWarnings) {\n\t\t\treturnValue.maxWarningsExceeded = { maxWarnings, foundWarnings };\n\t\t}\n\t}\n\n\treturnValue.output = formatter(stylelintResults, returnValue);\n\treturnValue.results = stylelintResults;\n\n\treturn returnValue;\n};\n\n/**\n * @param {StylelintResult[]} lintResults\n */\nfunction getRuleMetadata(lintResults) {\n\tconst [lintResult] = lintResults;\n\n\tif (lintResult === undefined) return {};\n\n\tif (lintResult._postcssResult === undefined) return {};\n\n\treturn lintResult._postcssResult.stylelint.ruleMetadata;\n}\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function invalidScopeDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst configRules = (stylelintResult.config || {}).rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tif (usedRules.has(rule)) continue;\n\n\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function descriptionlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(\n\t\t\tresult._postcssResult,\n\t\t\t'reportDescriptionlessDisables',\n\t\t);\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (range.description) continue;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) {\n\t\t\t\t\t// An 'all' rule will get copied for each individual rule. If the\n\t\t\t\t\t// configuration is `[false, {except: ['specific-rule']}]`, we\n\t\t\t\t\t// don't want to report the copies that match except, so we record\n\t\t\t\t\t// the comment as already reported.\n\t\t\t\t\tif (!enabled && rule === 'all') alreadyReported.add(range.comment);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:standalone');\nconst fastGlob = require('fast-glob');\nconst fs = require('fs');\nconst globby = require('globby');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst createStylelintResult = require('./createStylelintResult');\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst formatters = require('./formatters');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst getFormatterOptionsText = require('./utils/getFormatterOptionsText');\nconst lintSource = require('./lintSource');\nconst NoFilesFoundError = require('./utils/noFilesFoundError');\nconst AllFilesIgnoredError = require('./utils/allFilesIgnoredError');\nconst { assert } = require('./utils/validateTypes');\nconst prepareReturnValue = require('./prepareReturnValue');\n\nconst ALWAYS_IGNORED_GLOBS = ['**/node_modules/**'];\nconst writeFileAtomic = require('write-file-atomic');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').FormatterType} FormatterType */\n\n/**\n *\n * @param {LinterOptions} options\n * @returns {Promise<LinterResult>}\n */\nasync function standalone({\n\tallowEmptyInput = false,\n\tcache: useCache = false,\n\tcacheLocation,\n\tcacheStrategy,\n\tcode,\n\tcodeFilename,\n\tconfig,\n\tconfigBasedir,\n\tconfigFile,\n\tcustomSyntax,\n\tcwd = process.cwd(),\n\tdisableDefaultIgnores,\n\tfiles,\n\tfix,\n\tformatter,\n\tglobbyOptions,\n\tignoreDisables,\n\tignorePath,\n\tignorePattern,\n\tmaxWarnings,\n\tquiet,\n\treportDescriptionlessDisables,\n\treportInvalidScopeDisables,\n\treportNeedlessDisables,\n\tsyntax,\n}) {\n\tconst startTime = Date.now();\n\n\tconst isValidCode = typeof code === 'string';\n\n\tif ((!files && !isValidCode) || (files && (code || isValidCode))) {\n\t\treturn Promise.reject(\n\t\t\tnew Error('You must pass stylelint a `files` glob or a `code` string, though not both'),\n\t\t);\n\t}\n\n\t// The ignorer will be used to filter file paths after the glob is checked,\n\t// before any files are actually read\n\n\t/** @type {import('ignore').Ignore} */\n\tlet ignorer;\n\n\ttry {\n\t\tignorer = getFileIgnorer({ cwd, ignorePath, ignorePattern });\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\t/** @type {Formatter} */\n\tlet formatterFunction;\n\n\ttry {\n\t\tformatterFunction = getFormatterFunction(formatter);\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tcacheLocation,\n\t\tcacheStrategy,\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t\tignoreDisables,\n\t\tignorePath,\n\t\treportNeedlessDisables,\n\t\treportInvalidScopeDisables,\n\t\treportDescriptionlessDisables,\n\t\tsyntax,\n\t\tcustomSyntax,\n\t\tfix,\n\t\tquiet,\n\t});\n\n\tif (!files) {\n\t\tconst absoluteCodeFilename =\n\t\t\tcodeFilename !== undefined && !path.isAbsolute(codeFilename)\n\t\t\t\t? path.join(cwd, codeFilename)\n\t\t\t\t: codeFilename;\n\n\t\t// if file is ignored, return nothing\n\t\tif (\n\t\t\tabsoluteCodeFilename &&\n\t\t\t!filterFilePaths(ignorer, [path.relative(cwd, absoluteCodeFilename)]).length\n\t\t) {\n\t\t\treturn prepareReturnValue([], maxWarnings, formatterFunction, cwd);\n\t\t}\n\n\t\tlet stylelintResult;\n\n\t\ttry {\n\t\t\tconst postcssResult = await lintSource(stylelint, {\n\t\t\t\tcode,\n\t\t\t\tcodeFilename: absoluteCodeFilename,\n\t\t\t});\n\n\t\t\tstylelintResult = await createStylelintResult(stylelint, postcssResult, absoluteCodeFilename);\n\t\t} catch (error) {\n\t\t\tstylelintResult = await handleError(stylelint, error);\n\t\t}\n\n\t\tconst postcssResult = stylelintResult._postcssResult;\n\t\tconst returnValue = prepareReturnValue([stylelintResult], maxWarnings, formatterFunction, cwd);\n\n\t\tif (\n\t\t\tfix &&\n\t\t\tpostcssResult &&\n\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t!postcssResult.stylelint.ruleDisableFix\n\t\t) {\n\t\t\treturnValue.output =\n\t\t\t\t!postcssResult.stylelint.disableWritingFix && postcssResult.opts\n\t\t\t\t\t? // If we're fixing, the output should be the fixed code\n\t\t\t\t\t  postcssResult.root.toString(postcssResult.opts.syntax)\n\t\t\t\t\t: // If the writing of the fix is disabled, the input code is returned as-is\n\t\t\t\t\t  code;\n\t\t}\n\n\t\treturn returnValue;\n\t}\n\n\tlet fileList = [files].flat().map((entry) => {\n\t\tconst globCWD = (globbyOptions && globbyOptions.cwd) || cwd;\n\t\tconst absolutePath = !path.isAbsolute(entry)\n\t\t\t? path.join(globCWD, entry)\n\t\t\t: path.normalize(entry);\n\n\t\tif (fs.existsSync(absolutePath)) {\n\t\t\t// This path points to a file. Return an escaped path to avoid globbing\n\t\t\treturn fastGlob.escapePath(normalizePath(entry));\n\t\t}\n\n\t\treturn entry;\n\t});\n\n\tif (!disableDefaultIgnores) {\n\t\tfileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map((glob) => `!${glob}`));\n\t}\n\n\tif (!useCache) {\n\t\tstylelint._fileCache.destroy();\n\t}\n\n\tconst effectiveGlobbyOptions = {\n\t\tcwd,\n\t\t...(globbyOptions || {}),\n\t\tabsolute: true,\n\t};\n\n\tconst globCWD = effectiveGlobbyOptions.cwd;\n\n\tlet filePaths = await globby(fileList, effectiveGlobbyOptions);\n\t// Record the length of filePaths before ignore operation\n\t// Prevent prompting \"No files matching the pattern 'xx' were found.\" when .stylelintignore ignore all input files\n\tconst filePathsLengthBeforeIgnore = filePaths.length;\n\n\t// The ignorer filter needs to check paths relative to cwd\n\tfilePaths = filterFilePaths(\n\t\tignorer,\n\t\tfilePaths.map((p) => path.relative(globCWD, p)),\n\t);\n\n\tlet stylelintResults;\n\n\tif (filePaths.length) {\n\t\tlet absoluteFilePaths = filePaths.map((filePath) => {\n\t\t\tconst absoluteFilepath = !path.isAbsolute(filePath)\n\t\t\t\t? path.join(globCWD, filePath)\n\t\t\t\t: path.normalize(filePath);\n\n\t\t\treturn absoluteFilepath;\n\t\t});\n\n\t\tconst getStylelintResults = absoluteFilePaths.map(async (absoluteFilepath) => {\n\t\t\tdebug(`Processing ${absoluteFilepath}`);\n\n\t\t\ttry {\n\t\t\t\tconst postcssResult = await lintSource(stylelint, {\n\t\t\t\t\tfilePath: absoluteFilepath,\n\t\t\t\t\tcache: useCache,\n\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\t(postcssResult.stylelint.stylelintError || postcssResult.stylelint.stylelintWarning) &&\n\t\t\t\t\tuseCache\n\t\t\t\t) {\n\t\t\t\t\tdebug(`${absoluteFilepath} contains linting errors and will not be cached.`);\n\t\t\t\t\tstylelint._fileCache.removeEntry(absoluteFilepath);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * If we're fixing, save the file with changed code\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\tpostcssResult.opts &&\n\t\t\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t\t\tfix &&\n\t\t\t\t\t!postcssResult.stylelint.disableWritingFix\n\t\t\t\t) {\n\t\t\t\t\tconst fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\t\tpostcssResult.root.source &&\n\t\t\t\t\t\tpostcssResult.root.source.input.css !== fixedCss\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait writeFileAtomic(absoluteFilepath, fixedCss);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn createStylelintResult(stylelint, postcssResult, absoluteFilepath);\n\t\t\t} catch (error) {\n\t\t\t\t// On any error, we should not cache the lint result\n\t\t\t\tstylelint._fileCache.removeEntry(absoluteFilepath);\n\n\t\t\t\treturn handleError(stylelint, error, absoluteFilepath);\n\t\t\t}\n\t\t});\n\n\t\tstylelintResults = await Promise.all(getStylelintResults);\n\t} else if (allowEmptyInput) {\n\t\tstylelintResults = await Promise.all([]);\n\t} else if (filePathsLengthBeforeIgnore) {\n\t\t// All input files ignored\n\t\tstylelintResults = await Promise.reject(new AllFilesIgnoredError());\n\t} else {\n\t\tstylelintResults = await Promise.reject(new NoFilesFoundError(fileList));\n\t}\n\n\tif (useCache) {\n\t\tstylelint._fileCache.reconcile();\n\t}\n\n\tconst result = prepareReturnValue(stylelintResults, maxWarnings, formatterFunction, cwd);\n\n\tdebug(`Linting complete in ${Date.now() - startTime}ms`);\n\n\treturn result;\n}\n\n/**\n * @param {FormatterType | Formatter | undefined} selected\n * @returns {Formatter}\n */\nfunction getFormatterFunction(selected) {\n\tif (typeof selected === 'string') {\n\t\tconst formatterFunction = formatters[selected];\n\n\t\tif (formatterFunction === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`You must use a valid formatter option: ${getFormatterOptionsText()} or a function`,\n\t\t\t);\n\t\t}\n\n\t\treturn formatterFunction;\n\t}\n\n\tif (typeof selected === 'function') {\n\t\treturn selected;\n\t}\n\n\tassert(formatters.json);\n\n\treturn formatters.json;\n}\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {any} error\n * @param {string} [filePath]\n * @return {Promise<StylelintResult>}\n */\nfunction handleError(stylelint, error, filePath = undefined) {\n\tif (error.name === 'CssSyntaxError') {\n\t\treturn createStylelintResult(stylelint, undefined, filePath, error);\n\t}\n\n\tthrow error;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').lint} */ (standalone);\n","'use strict';\n\nconst checkAgainstRule = require('./utils/checkAgainstRule');\nconst createPlugin = require('./createPlugin');\nconst createStylelint = require('./createStylelint');\nconst formatters = require('./formatters');\nconst postcssPlugin = require('./postcssPlugin');\nconst report = require('./utils/report');\nconst resolveConfig = require('./resolveConfig');\nconst ruleMessages = require('./utils/ruleMessages');\nconst rules = require('./rules');\nconst { longhandSubPropertiesOfShorthandProperties } = require('./reference/properties');\nconst standalone = require('./standalone');\nconst validateOptions = require('./utils/validateOptions');\n\n/** @type {import('stylelint').PublicApi} */\nconst stylelint = Object.assign(postcssPlugin, {\n\tlint: standalone,\n\trules,\n\tformatters,\n\tcreatePlugin,\n\tresolveConfig,\n\tcreateLinter: createStylelint,\n\tutils: {\n\t\treport,\n\t\truleMessages,\n\t\tvalidateOptions,\n\t\tcheckAgainstRule,\n\t},\n\treference: {\n\t\tlonghandSubPropertiesOfShorthandProperties,\n\t},\n});\n\nmodule.exports = stylelint;\n","'use strict';\n\nconst formatters = require('../formatters');\n\n/**\n * @param {{ useOr?: boolean }} [options={}]\n * @returns {string}\n */\nmodule.exports = function getFormatterOptionsText(options = {}) {\n\tlet output = Object.keys(formatters)\n\t\t.map((name) => `\"${name}\"`)\n\t\t.join(', ');\n\n\tif (options.useOr) {\n\t\toutput = output.replace(/, ([a-z\"]+)$/u, ' or $1');\n\t}\n\n\treturn output;\n};\n","/*!\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(path, stripTrailing) {\n  if (typeof path !== 'string') {\n    throw new TypeError('expected path to be a string');\n  }\n\n  if (path === '\\\\' || path === '/') return '/';\n\n  var len = path.length;\n  if (len <= 1) return path;\n\n  // ensure that win32 namespaces has two leading slashes, so that the path is\n  // handled properly by the win32 version of path.parse() after being normalized\n  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\n  var prefix = '';\n  if (len > 4 && path[3] === '\\\\') {\n    var ch = path[2];\n    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\n      path = path.slice(2);\n      prefix = '//';\n    }\n  }\n\n  var segs = path.split(/[/\\\\]+/);\n  if (stripTrailing !== false && segs[segs.length - 1] === '') {\n    segs.pop();\n  }\n  return prefix + segs.join('/');\n};\n","'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\nfunction checkAgainstRule(options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tconst rule = rules[options.ruleName];\n\n\tif (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\t// @ts-expect-error - this error should not occur with PostCSS 8\n\tconst tmpPostcssResult = new Result();\n\n\trule(settings[0], /** @type {O} */ (settings[1]), {})(options.root, tmpPostcssResult);\n\n\tfor (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.checkAgainstRule} */ (\n\tcheckAgainstRule\n);\n","const DEFAULT_RAWS = {\n  colon: ': ',\n  indent: '  ',\n  commentLeft: ' ',\n  commentRight: ' '\n}\n\nmodule.exports = class Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    this[node.type](node, semicolon)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = DEFAULT_RAWS.commentLeft\n    let right = DEFAULT_RAWS.commentRight\n    if (this.has(node.raws.left)) left = node.raws.left\n\n    if (node.raws.inline) {\n      if (this.has(node.raws.inlineRight)) {\n        right = node.raws.inlineRight\n      } else {\n        right = ''\n      }\n      if (node.raws.extraIndent) {\n        this.builder(node.raws.extraIndent)\n      }\n      this.builder('//' + left + node.text + right, node)\n    } else {\n      if (this.has(node.raws.right)) right = node.raws.right\n      this.builder('/*' + left + node.text + right + '*/', node)\n    }\n  }\n\n  decl(node) {\n    let between = node.raws.between || DEFAULT_RAWS.colon\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n  }\n\n  atrule(node) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (this.has(node.raws.afterName)) {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    this.block(node, name + params)\n  }\n\n  body(node) {\n    let indent = node.root().raws.indent || DEFAULT_RAWS.indent\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before =\n        child.raws.before.replace(/[^\\n]*$/, '') + this.indent(node, indent)\n      if (child.type === 'comment' && !child.raws.before.includes('\\n')) {\n        before = child.raws.before\n      }\n      if (before) this.builder(before)\n      this.stringify(child)\n    }\n  }\n\n  block(node, start) {\n    let between = node.raws.sssBetween || ''\n    this.builder(start + between, node, 'start')\n    if (this.has(node.nodes)) this.body(node)\n  }\n\n  indent(node, step) {\n    let result = ''\n    while (node.parent) {\n      result += step\n      node = node.parent\n    }\n    return result\n  }\n\n  has(value) {\n    return typeof value !== 'undefined'\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.sss || raw.raw\n    } else {\n      return value\n    }\n  }\n}\n","function indentError(input, l, p) {\n  throw input.error('Mixed tabs and spaces are not allowed', l, p + 1)\n}\n\nmodule.exports = function preprocess(input, lines) {\n  let indentType\n  let prevNumber = 0\n  let parts = lines.map(line => {\n    let lastComma = false\n    let comment = false\n    let number = prevNumber + 1\n    let atrule = false\n    let indent = ''\n    let tokens = []\n    let colon = false\n\n    if (line.length > 0) {\n      if (line[0][0] === 'space') {\n        indent = line[0][1]\n        tokens = line.slice(1)\n      } else {\n        indent = ''\n        tokens = line\n      }\n\n      if (!indentType && indent.length) {\n        indentType = indent[0] === ' ' ? 'space' : 'tab'\n      }\n      if (indentType === 'space') {\n        if (indent.includes('\\t')) {\n          indentError(input, number, indent.indexOf('\\t'))\n        }\n      } else if (indentType === 'tab') {\n        if (indent.includes(' ')) {\n          indentError(input, number, indent.indexOf(' '))\n        }\n      }\n\n      if (tokens.length) {\n        for (let i = tokens.length - 1; i >= 0; i--) {\n          let type = tokens[i][0]\n          if (type === ',') {\n            lastComma = true\n            break\n          } else if (type === 'space') {\n            continue\n          } else if (type === 'comment') {\n            continue\n          } else if (type === 'newline') {\n            continue\n          } else {\n            break\n          }\n        }\n        comment = tokens[0][0] === 'comment'\n        atrule = tokens[0][0] === 'at-word'\n\n        let brackets = 0\n        for (let i = 0; i < tokens.length - 1; i++) {\n          let type = tokens[i][0]\n          let next = tokens[i + 1][0]\n          if (type === '(') {\n            brackets += 1\n          } else if (type === ')') {\n            brackets -= 1\n          } else if (\n            type === ':' &&\n            brackets === 0 &&\n            (next === 'space' || next === 'newline')\n          ) {\n            colon = true\n          }\n        }\n      }\n\n      let last = tokens[tokens.length - 1]\n      if (last && last[0] === 'newline') prevNumber = last[2]\n    }\n\n    return {\n      number,\n      indent,\n      colon,\n      tokens,\n      atrule,\n      comment,\n      lastComma,\n      before: ''\n    }\n  })\n\n  parts = parts.reduceRight(\n    (all, i) => {\n      if (!i.tokens.length || i.tokens.every(j => j[0] === 'newline')) {\n        let prev = all[0]\n        let before = i.indent + i.tokens.map(j => j[1]).join('')\n        prev.before = before + prev.before\n      } else {\n        all.unshift(i)\n      }\n      return all\n    },\n    [{ end: true, before: '' }]\n  )\n\n  parts.forEach((part, i) => {\n    if (i === 0) return\n\n    let prev = parts[i - 1]\n    let last = prev.tokens[prev.tokens.length - 1]\n    if (last && last[0] === 'newline') {\n      part.before = last[1] + part.before\n      prev.tokens.pop()\n    }\n  })\n\n  return parts\n}\n","const SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERICK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\nconst COMMA = ','.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"'()/;\\\\{]/g\nconst RE_NEW_LINE = /[\\n\\f\\r]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"'(),:;@\\\\{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\n\nmodule.exports = function tokenize(input) {\n  let tokens = []\n  let css = input.css.valueOf()\n\n  let code,\n    next,\n    quote,\n    lines,\n    last,\n    content,\n    escape,\n    nextLine,\n    nextOffset,\n    escaped,\n    escapePos,\n    prev,\n    n\n\n  let length = css.length\n  let offset = -1\n  let line = 1\n  let pos = 0\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, line, pos - offset)\n  }\n\n  while (pos < length) {\n    code = css.charCodeAt(pos)\n\n    if (\n      code === NEWLINE ||\n      code === FEED ||\n      (code === CR && css.charCodeAt(pos + 1) !== NEWLINE)\n    ) {\n      offset = pos\n      line += 1\n    }\n\n    switch (code) {\n      case CR:\n        if (css.charCodeAt(pos + 1) === NEWLINE) {\n          offset = pos\n          line += 1\n          pos += 1\n          tokens.push(['newline', '\\r\\n', line - 1])\n        } else {\n          tokens.push(['newline', '\\r', line - 1])\n        }\n        break\n\n      case FEED:\n      case NEWLINE:\n        tokens.push(['newline', css.slice(pos, pos + 1), line - 1])\n        break\n\n      case SPACE:\n      case TAB:\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (code === SPACE || code === TAB)\n\n        tokens.push(['space', css.slice(pos, next)])\n        pos = next - 1\n        break\n\n      case OPEN_CURLY:\n        tokens.push(['{', '{', line, pos - offset])\n        break\n\n      case CLOSE_CURLY:\n        tokens.push(['}', '}', line, pos - offset])\n        break\n\n      case COLON:\n        tokens.push([':', ':', line, pos - offset])\n        break\n\n      case SEMICOLON:\n        tokens.push([';', ';', line, pos - offset])\n        break\n\n      case COMMA:\n        tokens.push([',', ',', line, pos - offset])\n        break\n\n      case OPEN_PARENTHESES:\n        prev = tokens.length ? tokens[tokens.length - 1][1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) unclosed('bracket')\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          tokens.push([\n            'brackets',\n            css.slice(pos, next + 1),\n            line,\n            pos - offset,\n            line,\n            next - offset\n          ])\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            tokens.push(['(', '(', line, pos - offset])\n          } else {\n            tokens.push([\n              'brackets',\n              content,\n              line,\n              pos - offset,\n              line,\n              next - offset\n            ])\n            pos = next\n          }\n        }\n\n        break\n\n      case CLOSE_PARENTHESES:\n        tokens.push([')', ')', line, pos - offset])\n        break\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) unclosed('quote')\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        content = css.slice(pos, next + 1)\n        lines = content.split('\\n')\n        last = lines.length - 1\n\n        if (last > 0) {\n          nextLine = line + last\n          nextOffset = next - lines[last].length\n        } else {\n          nextLine = line\n          nextOffset = offset\n        }\n\n        tokens.push([\n          'string',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          nextLine,\n          next - nextOffset\n        ])\n\n        offset = nextOffset\n        line = nextLine\n        pos = next\n        break\n\n      case AT:\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n        tokens.push([\n          'at-word',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          line,\n          next - offset\n        ])\n        pos = next\n        break\n\n      case BACKSLASH:\n        next = pos\n        escape = true\n\n        nextLine = line\n\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (escape) {\n          if (code === CR && css.charCodeAt(next + 2) === NEWLINE) {\n            next += 2\n            nextLine += 1\n            nextOffset = next\n          } else if (code === CR || code === NEWLINE || code === FEED) {\n            next += 1\n            nextLine += 1\n            nextOffset = next\n          } else {\n            next += 1\n          }\n        }\n        tokens.push([\n          'word',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          line,\n          next - offset\n        ])\n        if (nextLine !== line) {\n          line = nextLine\n          offset = nextOffset\n        }\n        pos = next\n        break\n\n      default:\n        n = css.charCodeAt(pos + 1)\n\n        if (code === SLASH && n === ASTERICK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) unclosed('comment')\n\n          content = css.slice(pos, next + 1)\n          lines = content.split('\\n')\n          last = lines.length - 1\n\n          if (last > 0) {\n            nextLine = line + last\n            nextOffset = next - lines[last].length\n          } else {\n            nextLine = line\n            nextOffset = offset\n          }\n\n          tokens.push([\n            'comment',\n            content,\n            line,\n            pos - offset,\n            nextLine,\n            next - nextOffset\n          ])\n\n          offset = nextOffset\n          line = nextLine\n          pos = next\n        } else if (code === SLASH && n === SLASH) {\n          RE_NEW_LINE.lastIndex = pos + 1\n          RE_NEW_LINE.test(css)\n          if (RE_NEW_LINE.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_NEW_LINE.lastIndex - 2\n          }\n\n          content = css.slice(pos, next + 1)\n\n          tokens.push([\n            'comment',\n            content,\n            line,\n            pos - offset,\n            line,\n            next - offset,\n            'inline'\n          ])\n\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          tokens.push([\n            'word',\n            css.slice(pos, next + 1),\n            line,\n            pos - offset,\n            line,\n            next - offset\n          ])\n          pos = next\n        }\n\n        break\n    }\n\n    pos++\n  }\n\n  return tokens\n}\n","let { Declaration, Comment, AtRule, Rule, Root } = require('postcss')\n\nmodule.exports = class Parser {\n  constructor(input) {\n    this.input = input\n\n    this.pos = 0\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n\n    this.extraIndent = false\n    this.prevIndent = undefined\n    this.step = undefined\n\n    this.root.source = { input, start: { line: 1, column: 1 } }\n  }\n\n  loop() {\n    let part\n    while (this.pos < this.parts.length) {\n      part = this.parts[this.pos]\n\n      if (part.comment) {\n        this.comment(part)\n      } else if (part.atrule) {\n        this.atrule(part)\n      } else if (part.colon) {\n        let next = this.nextNonComment(this.pos)\n\n        if (next.end || next.atrule) {\n          this.decl(part)\n        } else {\n          let moreIndent = next.indent.length > part.indent.length\n          if (!moreIndent) {\n            this.decl(part)\n          } else if (moreIndent && next.colon) {\n            this.rule(part)\n          } else if (moreIndent && !next.colon) {\n            this.decl(part)\n          }\n        }\n      } else if (part.end) {\n        this.root.raws.after = part.before\n      } else {\n        this.rule(part)\n      }\n\n      this.pos += 1\n    }\n\n    for (let i = this.tokens.length - 1; i >= 0; i--) {\n      if (this.tokens[i].length > 3) {\n        let last = this.tokens[i]\n        this.root.source.end = {\n          line: last[4] || last[2],\n          column: last[5] || last[3]\n        }\n        break\n      }\n    }\n  }\n\n  comment(part) {\n    let token = part.tokens[0]\n    let node = new Comment()\n    this.init(node, part)\n    node.source.end = { line: token[4], column: token[5] }\n    this.commentText(node, token)\n  }\n\n  atrule(part) {\n    let atword = part.tokens[0]\n    let params = part.tokens.slice(1)\n\n    let node = new AtRule()\n    node.name = atword[1].slice(1)\n    this.init(node, part)\n\n    if (node.name === '') this.unnamedAtrule(atword)\n\n    while (!part.end && part.lastComma) {\n      this.pos += 1\n      part = this.parts[this.pos]\n      params.push(['space', part.before + part.indent])\n      params = params.concat(part.tokens)\n    }\n\n    node.raws.afterName = this.firstSpaces(params)\n    this.keepTrailingSpace(node, params)\n    this.checkSemicolon(params)\n    this.checkCurly(params)\n    this.raw(node, 'params', params, atword)\n  }\n\n  decl(part) {\n    let node = new Declaration()\n    this.init(node, part)\n\n    let between = ''\n    let colon = 0\n    let value = []\n    let prop = ''\n    for (let i = 0; i < part.tokens.length; i++) {\n      let token = part.tokens[i]\n      if (token[0] === ':') {\n        between += token[1]\n        colon = token\n        value = part.tokens.slice(i + 1)\n        break\n      } else if (token[0] === 'comment' || token[0] === 'space') {\n        between += token[1]\n      } else if (between !== '') {\n        this.badProp(token)\n      } else {\n        prop += token[1]\n      }\n    }\n\n    if (prop === '') this.unnamedDecl(part.tokens[0])\n    node.prop = prop\n\n    let next = this.parts[this.pos + 1]\n\n    while (\n      !next.end &&\n      !next.atrule &&\n      !next.colon &&\n      next.indent.length > part.indent.length\n    ) {\n      value.push(['space', next.before + next.indent])\n      value = value.concat(next.tokens)\n      this.pos += 1\n      next = this.parts[this.pos + 1]\n    }\n\n    let last = value[value.length - 1]\n    if (last && last[0] === 'comment') {\n      value.pop()\n      let comment = new Comment()\n      this.current.push(comment)\n      comment.source = {\n        input: this.input,\n        start: { line: last[2], column: last[3] },\n        end: { line: last[4], column: last[5] }\n      }\n      let prev = value[value.length - 1]\n      if (prev && prev[0] === 'space') {\n        value.pop()\n        comment.raws.before = prev[1]\n      }\n      this.commentText(comment, last)\n    }\n\n    for (let i = value.length - 1; i > 0; i--) {\n      let t = value[i][0]\n      if (t === 'word' && value[i][1] === '!important') {\n        node.important = true\n        if (i > 0 && value[i - 1][0] === 'space') {\n          node.raws.important = value[i - 1][1] + '!important'\n          value.splice(i - 1, 2)\n        } else {\n          node.raws.important = '!important'\n          value.splice(i, 1)\n        }\n        break\n      } else if (t !== 'space' && t !== 'newline' && t !== 'comment') {\n        break\n      }\n    }\n\n    node.raws.between = between + this.firstSpaces(value)\n    this.checkSemicolon(value)\n    this.raw(node, 'value', value, colon)\n  }\n\n  rule(part) {\n    let node = new Rule()\n    this.init(node, part)\n\n    let selector = part.tokens\n    let next = this.parts[this.pos + 1]\n\n    while (!next.end && next.indent.length === part.indent.length) {\n      selector.push(['space', next.before + next.indent])\n      selector = selector.concat(next.tokens)\n      this.pos += 1\n      next = this.parts[this.pos + 1]\n    }\n\n    this.keepTrailingSpace(node, selector)\n    this.checkCurly(selector)\n    this.raw(node, 'selector', selector)\n  }\n\n  /* Helpers */\n\n  indent(part) {\n    let indent = part.indent.length\n    let isPrev = typeof this.prevIndent !== 'undefined'\n\n    if (!isPrev && indent) this.indentedFirstLine(part)\n\n    if (!this.step && indent) {\n      this.step = indent\n      this.root.raws.indent = part.indent\n    }\n\n    if (isPrev && this.prevIndent !== indent) {\n      let diff = indent - this.prevIndent\n      if (diff > 0) {\n        if (diff !== this.step) {\n          this.wrongIndent(this.prevIndent + this.step, indent, part)\n        } else if (this.current.last.push) {\n          this.current = this.current.last\n        } else {\n          this.extraIndent = ''\n          for (let i = 0; i < diff; i++) {\n            this.extraIndent += ' '\n          }\n        }\n      } else if (diff % this.step !== 0) {\n        let m = indent + (diff % this.step)\n        this.wrongIndent(`${m} or ${m + this.step}`, indent, part)\n      } else {\n        for (let i = 0; i < -diff / this.step; i++) {\n          this.current = this.current.parent\n        }\n      }\n    }\n\n    this.prevIndent = indent\n  }\n\n  init(node, part) {\n    this.indent(part)\n\n    if (!this.current.nodes) this.current.nodes = []\n    this.current.push(node)\n\n    node.raws.before = part.before + part.indent\n    if (this.extraIndent) {\n      node.raws.extraIndent = this.extraIndent\n      this.extraIndent = false\n    }\n    node.source = {\n      start: { line: part.tokens[0][2], column: part.tokens[0][3] },\n      input: this.input\n    }\n  }\n\n  checkCurly(tokens) {\n    for (let token of tokens) {\n      if (token[0] === '{') {\n        this.error('Unnecessary curly bracket', token[2], token[3])\n      }\n    }\n  }\n\n  checkSemicolon(tokens) {\n    for (let token of tokens) {\n      if (token[0] === ';') {\n        this.error('Unnecessary semicolon', token[2], token[3])\n      }\n    }\n  }\n\n  keepTrailingSpace(node, tokens) {\n    let lastSpace = tokens[tokens.length - 1]\n    if (lastSpace && lastSpace[0] === 'space') {\n      tokens.pop()\n      node.raws.sssBetween = lastSpace[1]\n    }\n  }\n\n  firstSpaces(tokens) {\n    let result = ''\n    for (let i = 0; i < tokens.length; i++) {\n      if (tokens[i][0] === 'space' || tokens[i][0] === 'newline') {\n        result += tokens.shift()[1]\n        i -= 1\n      } else {\n        break\n      }\n    }\n    return result\n  }\n\n  raw(node, prop, tokens, altLast) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let sss = tokens.reduce((all, i) => all + i[1], '')\n      let raw = tokens.reduce((all, i) => {\n        if (i[0] === 'comment' && i[6] === 'inline') {\n          return all + '/* ' + i[1].slice(2).trim() + ' */'\n        } else {\n          return all + i[1]\n        }\n      }, '')\n      node.raws[prop] = { value, raw }\n      if (sss !== raw) node.raws[prop].sss = sss\n    }\n    node[prop] = value\n\n    let last\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      if (tokens[i].length > 2) {\n        last = tokens[i]\n        break\n      }\n    }\n    if (!last) last = altLast\n\n    node.source.end = {\n      line: last[4] || last[2],\n      column: last[5] || last[3]\n    }\n  }\n\n  nextNonComment(pos) {\n    let next = pos\n    let part\n    while (next < this.parts.length) {\n      next += 1\n      part = this.parts[next]\n      if (part.end || !part.comment) break\n    }\n    return part\n  }\n\n  commentText(node, token) {\n    let text = token[1]\n    if (token[6] === 'inline') {\n      node.raws.inline = true\n      text = text.slice(2)\n    } else {\n      text = text.slice(2, -2)\n    }\n\n    let match = text.match(/^(\\s*)([^]*\\S)(\\s*)\\n?$/)\n    if (match) {\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.inlineRight = match[3]\n    } else {\n      node.text = ''\n      node.raws.left = ''\n      node.raws.inlineRight = ''\n    }\n  }\n\n  // Errors\n\n  error(msg, line, column) {\n    throw this.input.error(msg, line, column)\n  }\n\n  unnamedAtrule(token) {\n    this.error('At-rule without name', token[2], token[3])\n  }\n\n  unnamedDecl(token) {\n    this.error('Declaration without name', token[2], token[3])\n  }\n\n  indentedFirstLine(part) {\n    this.error('First line should not have indent', part.number, 1)\n  }\n\n  wrongIndent(expected, real, part) {\n    let msg = `Expected ${expected} indent, but get ${real}`\n    this.error(msg, part.number, 1)\n  }\n\n  badProp(token) {\n    this.error('Unexpected separator in property', token[2], token[3])\n  }\n}\n","let stringify = require('./stringify')\nlet parse = require('./parse')\n\nmodule.exports = { stringify, parse }\n","let Stringifier = require('./stringifier')\n\nmodule.exports = function stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n","let { Input } = require('postcss')\n\nlet preprocess = require('./preprocess')\nlet tokenizer = require('./tokenize')\nlet Parser = require('./parser')\nlet liner = require('./liner')\n\nmodule.exports = function parse(source, opts) {\n  let input = new Input(source, opts)\n\n  let parser = new Parser(input)\n  parser.tokens = tokenizer(input)\n  parser.parts = preprocess(input, liner(parser.tokens))\n  parser.loop()\n\n  return parser.root\n}\n","module.exports = function liner(tokens) {\n  let line = []\n  let result = [line]\n  let brackets = 0\n  for (let token of tokens) {\n    line.push(token)\n    if (token[0] === '(') {\n      brackets += 1\n    } else if (token[0] === ')') {\n      brackets -= 1\n    } else if (token[0] === 'newline' && brackets === 0) {\n      line = []\n      result.push(line)\n    }\n  }\n  return result\n}\n","import stylelint from \"stylelint\";\nimport sugarss from \"sugarss\";\nimport SugarSSParser from \"./node_modules/sugarss/parser.js\";\nconst _lint = stylelint.lint;\nstylelint.lint = options => {\n  if (options?.config?.customSyntax === \"sugarss\") {\n    options.config.customSyntax = sugarss;\n  }\n  return _lint.call(stylelint, options);\n}\nstylelint.SugarSSParser = SugarSSParser;\nexport {stylelint as default};\n"],"names":["openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","uLower","uUpper","plus","isUnicodeRange","walk","nodes","cb","bubble","i","max","node","result","length","type","Array","isArray","stringifyNode","custom","buf","customResult","value","undefined","quote","unclosed","before","after","stringify","minus","dot","exp","EXP","ValueParser","this","input","next","prev","token","escape","escapePos","whitespacePos","parenthesesOpenPos","parent","tokens","pos","code","stack","balanced","name","slice","sourceEndIndex","push","sourceIndex","indexOf","pop","test","parse","prototype","toString","unit","nextCode","nextNextCode","likeNumber","number","getDeclarationValue","decl","raws","raw","matchesStringOrRegExp","comparison","testAgainstStringOrRegExpOrArray","inputItem","testResult","testAgainstStringOrRegExp","comparisonItem","RegExp","match","pattern","substring","firstComparisonChar","lastComparisonChar","secondToLastComparisonChar","comparisonIsRegex","valueMatch","optionsMatches","options","propertyName","Boolean","report","problem","ruleName","message","messageArgs","line","index","endIndex","word","stylelint","ruleSeverities","customMessages","ruleMetadata","quiet","start","rangeBy","startLine","Error","ignoreDisables","config","disabledRanges","ranges","all","range","end","rules","includes","disabledWarnings","rule","severity","stylelintError","stylelintWarning","warningProperties","warningMessage","args","format","reduce","arg","replace","String","printfLike","buildWarningMessage","warn","ruleMessages","messages","newMessages","messageId","messageText","Object","entries","concat","arrayEqual","a","b","every","elem","isObject","o","call","isBoolean","isNullish","isNumber","Number","isRegExp","isString","isPlainObject","ctor","prot","constructor","hasOwnProperty","_isPlainObject","assert","console","assertFunction","Function","isFunction","assertNumber","assertString","IGNORED_OPTIONS","Set","validateOptions","optionDescriptions","noErrors","optionDescription","validate","complain","stylelintType","opts","possible","actual","optional","startsWith","nothingPossible","flat","isValid","optionName","optionValue","has","possibleValue","possibility","JSON","rejected","annotation","primary","secondaryOptions","root","ignoreAnnotations","walkDecls","important","valueParser","isAnnotation","tokenValue","meta","url","isStandardSyntaxAtRule","atRule","params","mixin","variable","afterName","expected","_secondary","context","expectation","walkAtRules","expectedName","toLowerCase","toUpperCase","fix","fixable","addEmptyLineBefore","newline","repeat","getNodeLine","source","getPreviousNonSharedLineCommentNode","previousNode","previousNode2","hasEmptyLine","string","getNextNonSharedLineCommentNode","nextNode","_export_isRoot_","_export_isRule_","_export_isAtRule_","_export_isComment_","_export_isDeclaration_","_export_isValueFunction_","_export_hasSource_","nodesShareLines","isSharedLineComment","isComment","nextNonSharedLineCommentNode","parentNode","isRoot","isAfterComment","hasBlock","statement","isBlocklessAtRuleAfterBlocklessAtRule","isAtRule","isBlocklessAtRuleAfterSameNameBlocklessAtRule","isFirstNested","first","parentNodes","firstNode","hasSource","openingBraceLine","isFirstNodeOfRoot","removeEmptyLinesBefore","except","ignore","ignoreAtRules","isNested","hasEmptyLineBefore","expectEmptyLineBefore","isAtRuleAfterSameNameAtRule","atRuleNameSpaceChecker","locationChecker","err","m","checkedRuleName","errTarget","checkColon","configurationError","text","isSingleLineString","isWhitespace","char","whitespaceChecker","targetWhitespace","activeArgs","lineCheckStr","onlyOneChar","allowIndentation","expectBefore","rejectBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","expectAfter","rejectAfter","expectedAfterSingleLine","rejectedAfterSingleLine","expectedAfterMultiLine","rejectedAfterMultiLine","messageFunc","expectedBefore","_activeArgs2","expectedChar","charAt","expectBeforeAllowingIndentation","_activeArgs","oneCharBefore","twoCharsBefore","rejectedBefore","_activeArgs3","expectedAfter","_activeArgs4","oneCharAfter","twoCharsAfter","threeCharsAfter","rejectedAfter","_activeArgs5","beforeAllowingIndentation","obj","afterOneOnly","checker","_export_prefix_","prop","_export_unprefixed_","primaryValues","vendor","primaryOptionArray","AT_RULES","SELECTORS","PROPERTIES","PROPERTY_VALUES","_export_unprefix_","p","identifier","isAutoprefixable","uniteSets","set","atKeywords","atName","flattenArray","validateObjectWithArrayProps","validators","values","item","some","v","property","atRuleName","propList","find","beforeBlockString","noRawBefore","isRule","selector","between","rawNodeString","blockString","check","nodeToCheck","reportIndex","msg","nodeToCheckRaws","search","walkRules","hasEmptyBlock","statementString","childNodeTypes","map","spaces","split","addEmptyLineAfter","removeEmptyLinesAfter","_secondaryOptions","statementRaws","blockIsMultiLine","firstWhitespaceIndex","newlineBefore","newlineAfter","newlineIndex","nextNonCommentNode","startNode","backupCommentNextBefores","Map","reNewLine","newLineMatch","delete","clear","fixTarget","fixTargetRaws","DISABLE_COMMAND","DISABLE_LINE_COMMAND","DISABLE_NEXT_LINE_COMMAND","ENABLE_COMMAND","ALL_COMMANDS","extractStylelintCommand","comment","command","isStylelintCommand","ignoreComments","child","hasNotableChild","positionBy","declarationValueIndex","prefix","suffix","count","str","isStandardSyntaxFunction","isStandardSyntaxColorFunction","fnNode","setDeclarationValue","LEGACY_FUNCS","LEGACY_NOTATION_FUNCS","needsFix","parsedValue","isValueFunction","hasCommas","commaCount","childNode","isComma","atLeastOneSpace","whitespace","HEX","IGNORED_FUNCTIONS","hexValue","isIgnoredFunction","isHexColor","hex","canShrink","expectedHex","longer","shorter","hexVariant","statementFirst","beforeBraceNoRaw","spaceIndex","unexpected","isUrlFunction","hasAlphaChannel","normalizedPattern","walkComments","atRuleParamIndex","mediaName","regexpPattern","fullName","customMediaName","hasLessInterpolation","hasPsvInterpolation","hasScssInterpolation","hasTplInterpolation","hasInterpolation","isStandardSyntaxValue","normalizedValue","acceptCustomIdentsProperties","longhandSubPropertiesOfShorthandProperties","longhandTimeProperties","shorthandTimeProperties","r","grad","turn","rad","Math","PI","t","n","pow","round","e","u","isFinite","g","s","h","min","floor","l","d","f","c","y","exec","parseInt","substr","object","N","M","H","$","j","parsed","trim","x","rgba","brightness","isDark","isLight","toHex","toRgb","toRgbString","toHsl","toHslString","toHsv","invert","w","saturate","desaturate","grayscale","lighten","darken","rotate","hue","alpha","isEqual","S","z","cbrt","atan2","sqrt","cos","sin","parseHwbWithCommaString","endsWith","whiteness","blackness","extraArgs","colordInstance","colord","parseGrayString","lightness","lightnessWithUnit","colorObject","alphaWithUnit","forEach","extend","white","bisque","blue","cadetblue","chartreuse","chocolate","coral","antiquewhite","aqua","azure","whitesmoke","papayawhip","plum","blanchedalmond","black","gold","goldenrod","gainsboro","cornsilk","cornflowerblue","burlywood","aquamarine","beige","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkkhaki","darkgray","darkgreen","darkgrey","peachpuff","darkmagenta","darkred","darkorchid","darkorange","darkslateblue","gray","darkslategray","darkslategrey","deeppink","deepskyblue","wheat","firebrick","floralwhite","ghostwhite","darkviolet","magenta","green","dodgerblue","grey","honeydew","hotpink","blueviolet","forestgreen","lawngreen","indianred","indigo","fuchsia","brown","maroon","mediumblue","lightcoral","darkturquoise","lightcyan","ivory","lightyellow","lightsalmon","lightseagreen","linen","mediumaquamarine","lemonchiffon","lime","khaki","mediumseagreen","limegreen","mediumspringgreen","lightskyblue","lightblue","midnightblue","lightpink","mistyrose","moccasin","mintcream","lightslategray","lightslategrey","navajowhite","navy","mediumvioletred","powderblue","palegoldenrod","oldlace","paleturquoise","mediumturquoise","mediumorchid","rebeccapurple","lightsteelblue","mediumslateblue","thistle","tan","orchid","mediumpurple","purple","pink","skyblue","springgreen","palegreen","red","yellow","slateblue","lavenderblush","peru","palevioletred","violet","teal","slategray","slategrey","aliceblue","darkseagreen","darkolivegreen","greenyellow","seagreen","seashell","tomato","silver","sienna","lavender","lightgreen","orange","orangered","steelblue","royalblue","turquoise","yellowgreen","salmon","saddlebrown","sandybrown","rosybrown","darksalmon","lightgoldenrodyellow","snow","lightgrey","lightgray","dimgray","dimgrey","olivedrab","olive","toName","closest","toHwb","toHwbString","toLab","delta","abs","F","L","I","P","k","q","A","B","toLch","toLchString","_colordClass","parsers","named","original","NODE_TYPES","ignoreProperties","rawColorString","colorString","color","namedColor","isStandardSyntaxHexColor","hexMatch","isValidHex","nodeString","isStandardSyntaxComment","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","rawComment","firstFourChars","leftMatches","rightMatches","opener","leftSpace","rightSpace","closer","left","right","addWhitespaceBefore","addWhitespaceAfter","isCustomProperty","isScssVariable","isStandardSyntaxProperty","propName","eachDeclarationBlock","callback","each","decls","bind","props","IGNORED_VALUES","ignoreShorthands","longhandToShorthands","shorthand","longhandProps","longhand","shorthands","get","eachDecl","longhandDeclarations","unprefixedProp","shorthandProperties","shorthandProperty","prefixedShorthandProperty","longhandDeclaration","shorthandProps","prefixedShorthandData","from","sort","testAgainstString","matchesWord","containsString","SKIP","ONLY","styleSearch","target","skipComments","comments","skipStrings","strings","skipFunctionNames","functionNames","skipFunctionArguments","functionArguments","skipParentheticals","parentheticals","onceOptionUsed","keys","key","openingQuote","onlyComments","onlyStrings","onlyFunctionNames","onlyFunctionArguments","onlyParentheticals","insideString","insideComment","insideSingleLineComment","insideParens","insideFunctionArguments","openingParenCount","matchCount","getMatch","ti","tl","checkResult","getMatchBase","targetString","targetStringLength","startIndex","currentChar","handleMatch","isFunctionName","once","declarationBangSpaceChecker","indexOffset","declString","valueString","bangIndex","declValue","setFixed","targetBefore","targetAfter","declarations","overrideables","longhandProp","declaration","customProperty","knownCustomProperties","add","isVarFunction","isDashedIdent","ruleNode","block","filter","parentRule","semicolon","last","ignoreDuplicates","ignoreDiffValues","ignorePrefixlessSameValues","lowerProp","indexDuplicate","findIndex","removePreviousDuplicate","duplicateDecl","duplicateValue","lowerProperty","declToRemove","remove","nextDecl","unfixed","fixed","ALPHA_PROPS","ALPHA_FUNCS","exceptProperties","optionFuncs","freeze","expFunc","fixFunc","asNumber","percentage","isPercentage","asPercentage","findAlphaInValue","slashNodeIndex","findAlphaInFunction","toPrecision","dimension","ignoreSelectors","val","checkLastNode","hasSemicolon","isStandardSyntaxDeclaration","lang","declarationColonSpaceChecker","endOfPropIndex","propPlusColon","colonIndex","isValueNode","validator","propLength","propKey","propIdentifier","getDimension","blurChar","blurInterpolation","parsedUnit","fixer","div","position","symb","functionCommaSpaceChecker","hasFixed","valueNode","argumentStrings","join","getCommaCheckIndex","commaNode","nodeIndex","commaBefore","commaDataList","checkIndex","propKeys","propPatterns","isNumbery","basicKeywords","systemFontKeywords","fontFamilyKeywords","fontWeightRelativeKeywords","fontWeightAbsoluteKeywords","fontWeightNonNumericKeywords","fontWeightNumericKeywords","fontWeightKeywords","fontStyleKeywords","fontVariantKeywords","fontStretchKeywords","fontSizeKeywords","lineHeightKeywords","fontShorthandKeywords","animationNameKeywords","animationTimingFunctionKeywords","animationIterationCountKeywords","animationDirectionKeywords","animationFillModeKeywords","animationPlayStateKeywords","animationShorthandKeywords","gridRowKeywords","gridColumnKeywords","gridAreaKeywords","counterIncrementKeywords","counterResetKeywords","listStyleTypeKeywords","listStylePositionKeywords","listStyleImageKeywords","listStyleShorthandKeywords","camelCaseKeywords","keyframeSelectorKeywords","systemColorsKeywords","lengthUnits","units","isValidFontSize","numberUnit","isVariable","nodeTypesToCheck","findFontFamily","fontFamilies","valueNodes","postcssValueParser","children","needMergeNodesByValue","mergeCharacters","valueLowerCase","prevNode","prevPrevNode","fontFamily","lastFontFamily","secondNode","charactersBetween","ignoreFontFamilyNames","keywords","familyNames","fontFamilyNode","family","rawFamily","getImportantPosition","lastIndex","makeMutableFontFamilies","mutableNodes","idx","newNode","rawName","hasQuotes","resetIndexes","offset","removeQuotes","openIndex","closeIndex","addQuotes","fixedName","checkFamilyName","font","required","quotesRequired","recommended","quotesRecommended","fontFamilyNodes","process","cwd","env","NO_COLOR","FORCE_COLOR","argv","isColorSupported","platform","formatter","open","close","replaceClose","nextIndex","createColors","enabled","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","_module_exports_","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","tokenizer$1","content","escaped","currentToken","css","valueOf","ignoreErrors","buffer","returned","what","error","back","nextToken","ignoreUnclosed","controlChar","fromCharCode","endOfFile","Input","HIGHLIGHT_THEME","brackets","pico","class","hash","getTokenType","processor","terminalHighlight","tokenizer","registerInput","dependant","CssSyntaxError","column","file","plugin","super","reason","endLine","endColumn","setMessage","captureStackTrace","showSourceCode","mark","aside","lines","maxWidth","gutter","spacing","default","_export_isClean_","Symbol","_export_my_","DEFAULT_RAW","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","emptyBody","commentLeft","commentRight","Stringifier","builder","document","body","rawValue","ownSemicolon","atrule","own","detect","rawCache","beforeAfter","method","capitalize","rawSemicolon","rawEmptyBody","rawIndent","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","depth","step","cloneNode","cloned","Node","defaults","isClean","my","clone","append","data","removeChild","stringifier","assign","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","bookmark","foundSelf","defaultType","cleanRaws","keepBetween","toJSON","_","inputs","emitInputs","inputsNextIndex","inputId","positionInside","getProxyProcessor","markDirty","toProxy","proxyCache","Proxy","addToError","postcssNode","proxyOf","Declaration","noop","cosmiconfig","catch","SourceMapConsumer","SourceMapGenerator","_require_source_map_js_","dirname","_require_path_","PreviousMap","loadAnnotation","inline","startWith","loadMap","mapFile","consumer","consumerCache","withContent","sourcesContent","getAnnotationURL","sourceMapString","lastIndexOf","decodeInline","decodeURIComponent","lastMatch","Buffer","window","atob","fromBase64","encoding","loadFile","path","existsSync","readFileSync","fromSourceMap","isMap","prevPath","mappings","_mappings","sections","resolve","isAbsolute","fromOffsetCache","sourceMapAvailable","pathAvailable","hasBOM","mapResolve","id","size","random","nanoid","fromOffset","lastLine","lineToIndex","prevIndex","mid","col","origin","pathToFileURL","to","fromUrl","originalPositionFor","URL","sourceRoot","protocol","fileURLToPath","sourceContentFor","json","_objectSpread","Rule","AtRule","Root","LazyResult","Processor","relative","sep","MapGenerator","cssString","mapOpts","usesFileUrls","absolute","previous","previousMaps","isInline","isSourcesContent","clearAnnotation","setSourcesContent","already","toFileUrl","toUrl","setSourceContent","applyPrevMaps","applySourceMap","toBase64","btoa","unescape","encodeURIComponent","addAnnotation","outputFile","eol","generateMap","generateString","addMapping","generated","encodeURI","sourcePath","noSource","mapping","generate","Comment","cleanSource","markDirtyUp","Container","iterator","getIterator","indexes","normalize","prepend","reverse","unshift","exist","existIndex","splice","removeAll","replaceValues","fast","condition","sample","processed","rebuild","other","lastEach","registerParse","registerRule","registerAtRule","registerRoot","setPrototypeOf","Document","toResult","registerLazyResult","registerProcessor","printed","warnOnce","Warning","opt","Result","lastPlugin","postcssPlugin","warning","warnings","list","separators","array","current","func","inQuote","prevQuote","letter","space","selectors","SAFE_COMMENT_NEIGHBOR","empty","Parser","createTokenizer","freeSemicolon","emptyRule","endFile","init","getPosition","bracket","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","findLastWithPosition","shift","firstSpaces","precheckMissedSemicolon","stringFrom","spacesFromEnd","cache","hasWord","checkMissedSemicolon","unnamedAtrule","spacesAndCommentsFromStart","unexpectedClose","unclosedBlock","clean","lastTokenType","element","doubleColon","founded","parser","NODE_ENV","TYPE_TO_CLASS_NAME","PLUGIN_PROPS","prepare","Once","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","DocumentExit","OnceExit","NOT_VISITORS","isPromise","then","getEvents","toStack","events","eventIndex","visitors","visitorIndex","cleanMarks","postcss","stringified","syntax","helpers","plugins","toStringTag","sync","onFulfilled","onRejected","async","finally","onFinally","Promise","reject","processing","runAsync","getAsyncError","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","subRoot","visitSync","event","visitor","promise","handleError","roots","postcssVersion","pluginName","pluginVer","runtimeVer","version","visitTick","visit","registerPostcss","NoWorkResult","_processor","_css","_opts","_map","self","defineProperty","generatedCSS","generatedMap","_root","use","normalized","_excluded","_excluded2","fromJSON","ownInputs","inputHydrated","__proto__","_defaults$source","_objectWithoutProperties","initializer","warningPrinted","creator","LANG","transformer","processOpts","pluginOpts","ignoreFontFamilies","lastValue","isLastFontFamilyVariable","isFamilyNameKeyword","valueIndex","isDeclaration","isAfterCustomProperty","operator","expectedOperatorBeforeSign","OPERATORS","OPERATOR_REGEX","ALL_OPERATORS","checkAroundOperator","operatorNode","currentNode","isBeforeOp","operatorSourceIndex","isSingleSpace","lastChar","firstChar","indexOfFirstNewLine","checkWords","operatorIndex","charBefore","charAfter","insertCharAtIndex","checkForOperatorInFirstNode","lastNode","isOperator","checkForOperatorInLastNode","foundOperatorNode","currNode","nodeBefore","nodeAfter","operators","ignoreFunctions","functionsList","indexToCheck","betweenStart","sliceIndex","betweenBefore","betweenAfter","placeIndexOnValueStart","maxAdjacentNewlines","violatedCRLFNewLinesRegex","violatedLFNewLinesRegex","allowedLFNewLinesString","allowedCRLFNewLinesString","stringValue","splittedValue","sourceIndexStart","stringifiedNode","newNodeString","updatedValue","acc","curr","maybeMatch","pre","post","reg","begs","beg","ai","bi","functionArgumentsSearch","functionName","parensMatch","balancedMatch","expression","expressionIndex","firstArg","trimEnd","withToPrefix","regexp","matches","isStandardDirection","getSchemeFromUrl","urlString","_unused","scheme","slashIndex","isStandardSyntaxUrl","unspacedUrlString","checkArgs","shouldHasQuotes","leftTrimmedArgs","trimStart","complaintIndex","complaintEndIndex","trimmedArg","isEmptyArgument","atRuleParamsLowerCase","expectedOpeningMultiLine","rejectedOpeningMultiLine","expectedClosingMultiLine","rejectedClosingMultiLine","functionString","isMultiLine","containsNewline","openingIndex","checkBefore","getCheckBefore","fixBeforeForAlways","fixBeforeForNever","closingIndex","checkAfter","getCheckAfter","fixAfterForAlways","fixAfterForNever","ACCEPTABLE_AFTER_CLOSING_PAREN","nextChar","checkClosingParen","createFixer","applyFix","whitespaceEndIndex","param","camelCaseFunctions","mathFunctions","mapLowercaseFunctionNamesToCamelCase","needFix","functionNameLowerCase","expectedFunctionName","expectedOpeningSingleLine","rejectedOpeningSingleLine","expectedClosingSingleLine","rejectedClosingSingleLine","isSingleLine","isAfterStandardPropertyDeclaration","setAtRuleParams","getAtRuleParams","urlFunctionFull","urlFunctionArguments","quotedUrlFunctionFirstArgument","restAtRuleParams","quotedNodeValue","isStandardSyntaxSelector","atRuleKeyframes","keyframeRule","normalizedSelector","isMathFunction","isWord","isLength","isFraction","parseFloat","isZero","regularNumber","isLineHeight","isFlex","valueNodeIndex","isLineHeightValue","HUE_FIRST_ARG_FUNCS","HUE_THIRD_ARG_FUNCS","HUE_FUNCS","findHue","isDegree","asDegree","TypeError","gobbleHex","lower","spaceTerminated","codePoint","fromCodePoint","__esModule","CONTAINS_ESCAPE","ret","gobbled","_len","arguments","_key","commentStart","lastEnd","commentEnd","_export_ensureObject_","_export_getProp_","_export_unesc_","_unesc","_interopRequireDefault","_require__$unesc_","_getProp","_require__$getProp_","_ensureObject","_require__$ensureObject_","_require__$stripComments_","_defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_proto","at","appendToPropertyAndEscape","valueEscaped","originalValue","originalEscaped","setPropertyAndEscape","setPropertyWithoutEscape","isAtPosition","stringifyProperty","valueToString","rawSpaceBefore","rawSpaceAfter","rawSpace","UNIVERSAL","ATTRIBUTE","CLASS","COMBINATOR","COMMENT","ID","NESTING","PSEUDO","ROOT","SELECTOR","STRING","TAG","_node","_require__$node_","types","_getRequireWildcardCache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","_interopRequireWildcard","_require__$types_","WeakMap","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_arrayLikeToArray","_unsupportedIterableToArray","done","arr","len","arr2","_setPrototypeOf","_Node","subClass","superClass","_this","create","_step","_iterator","oldNode","oldIndex","_findChildAtPosition","found","atPosition","foundChild","_inferEndPosition","walkAttributes","_this2","walkClasses","_this3","walkCombinators","_this4","_this5","walkIds","_this6","walkNesting","_this7","walkPseudos","_this8","walkTags","_this9","walkUniversals","_this10","_this11","memo","_container","_require__$container_","_Container","_types","trailingComma","_error","handler","Selector","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","merge","quotes","isIdentifier","output","counter","character","extra","escapeEverything","$0","$1","$2","wrap","_cssesc","_require_cssesc_","ClassName","_constructed","_value","Namespace","apply","qualifiedName","namespace","namespaceString","_namespace","ns","_require__$namespace_","Tag","_Namespace","Pseudo","deprecate","fn","unescapeValue","_CSSESC_QUOTE_OPTIONS","_require___$util$unesc_","WRAPPED_IN_QUOTES","warnOfDeprecatedValueAssignment","warnOfDeprecatedQuotedAssignment","warnOfDeprecatedConstructor","deprecatedUsage","quoteMark","unescaped","Attribute","_unescapeValue","handleDeprecatedContructorOpts","getQuotedValue","_determineQuoteMark","cssescopts","CSSESC_QUOTE_OPTIONS","smart","smartQuoteMark","preferredQuoteMark","setValue","_quoteMark","_syncRawValue","numSingleQuotes","numDoubleQuotes","NO_QUOTE","pref","preferCurrentQuoteMark","_handleEscapes","_spacesFor","rawSpaces","_stringFor","spaceName","defaultAttrConcat","attrSpaces","offsetOf","attributeSpaces","operatorSpaces","valueSpaces","insensitive","attrValue","quoted","qm","attribute","_unescapeValue2","_attribute","Universal","Combinator","Nesting","_export_combinator_","_export_word_","_export_comment_","_export_str_","_export_tab_","_export_newline_","_export_feed_","_export_cr_","_export_backslash_","_export_bang_","_export_slash_","_export_doubleQuote_","_export_singleQuote_","_export_space_","_export_greaterThan_","_export_pipe_","_export_equals_","_export_plus_","_export_caret_","_export_tilde_","_export_dollar_","_export_closeSquare_","_export_openSquare_","_export_closeParenthesis_","_export_openParenthesis_","_export_semicolon_","_export_colon_","_export_comma_","_export_at_","_export_asterisk_","_export_ampersand_","nextLine","nextOffset","tokenType","safe","tab","cr","feed","greaterThan","tilde","pipe","combinator","asterisk","ampersand","bang","equals","dollar","caret","openSquare","closeSquare","openParenthesis","closeParenthesis","consumeWord","_unescapable","_wordDelimiters","_require__$tokenTypes_","unescapable","wordDelimiters","hexChars","consumeEscape","hexDigits","FIELDS","TYPE","START_LINE","START_COL","END_LINE","END_COL","START_POS","END_POS","_WHITESPACE_TOKENS","_Object$assign","_require__$selectors$root_","_selector","_require__$selectors$selector_","_className","_require__$selectors$className_","_comment","_require__$selectors$comment_","_id","_require__$selectors$id_","_tag","_require__$selectors$tag_","_string","_require__$selectors$string_","_pseudo","_require__$selectors$pseudo_","_require__$selectors$attribute_","_universal","_require__$selectors$universal_","_combinator","_require__$selectors$combinator_","_nesting","_require__$selectors$nesting_","_sortAscending","_require__$sortAscending_","_tokenize","_require__$tokenize_","_require__$selectors$types_","WHITESPACE_TOKENS","WHITESPACE_EQUIV_TOKENS","tokenStart","tokenEnd","getSource","startColumn","getTokenSource","getTokenSourceSpan","startToken","endToken","unescapeProp","indexesOf","lossy","_errorGenerator","rootSource","errorGenerator","loop","errorOptions","attr","startingToken","currToken","spaceBefore","commentBefore","lastAdded","spaceAfterMeaningfulToken","prevContent","existingComment","oldRawValue","_unescaped","_oldRawValue","oldValue","insensitiveFlag","lastComment","_util","rawLastComment","rawLastValue","parseWhitespaceEquivalentTokens","stopPosition","startPosition","firstToken","lastToken","convertWhitespaceNodesToSpace","requiredSpace","lossySpace","isNamedCombinator","namedCombinator","nameRaw","nextSigTokenPos","locateNextMeaningfulToken","spaceOrDescendantSelectorNodes","_this$convertWhitespa2","_space","_rawSpace","_this$convertWhitespa3","_space2","_rawSpace2","optionalSpace","_this$convertWhitespa","missingBackslash","missingParenthesis","missingSquareBracket","prevToken","universal","nesting","parentheses","unbalanced","parenEnd","parenStart","parenValue","parseParenthesisToken","pseudo","pseudoStr","splitWord","firstCallback","hasClass","escapedDot","isKeyframesPercent","hasId","interpolations","hashIndex","indices","uniqs","ind","classNameOpts","idOpts","tagOpts","throwOnParenthesis","description","an","searchPosition","_parser","_require__$parser_","funcRes","_shouldUpdateSelector","updateSelector","_isLossy","lossless","_parseOptions","_run","transform","_runSync","ast","astSync","transformSync","processSync","tag","className","_require__$attribute_","_require__$className_","_require__$combinator_","_require__$comment_","_require__$id_","_require__$nesting_","_require__$pseudo_","_require__$root_","_require__$selector_","_require__$string_","_require__$tag_","_require__$universal_","_IS_TYPE","isNode","isPseudoElement","isPseudoClass","isPseudo","isContainer","isNamespace","isAttribute","isTag","isUniversal","isSelector","isNesting","isCombinator","isClassName","IS_TYPE","isNodeType","_constructors","_guards","_require__$processor_","_require__$selectors_","_default","transformSelector","selectorParser","fixedSelector","PERCENTAGE_SELECTORS","KEYWORD_SELECTORS","PERCENTAGE_TO_KEYWORD","KEYWORD_TO_PERCENTAGE","keyword","getFromMap","selectorsInBlock","getSelectorsInBlock","selectorTag","checkSelector","ignorePattern","EXCLUDED_PATTERNS","ignoreNonComments","rootString","skippedSubStrings","skippedSubStringsIndex","matchAll","subMatch","startOfSubString","checkNewline","nextNewlineIndex","rawLineLength","excludedLength","skippedSubString","startSubString","endSubString","excluded","tryToPopSubString","lineText","nextTwoChars","isCustomMediaQuery","mediaQuery","isRangeContextMediaFeature","mediaFeature","isStandardSyntaxMediaFeatureName","mediaFeatureName","_Node2","hasFilter","filterReg","parseMediaFeature","parseMediaQuery","parseMediaList","interimIndex","levelLocal","doesHaveUrl","parenthesesLv","_i2","_character","_mediaQueryString","_spaceBefore","_Container2","mediaQueryString","modesEntered","mode","lastModeIndex","mediaFeatureValue","indexLocal","stringNormalized","isCalculationEnabled","mediaFeatureValueStr","localLevel","insideSomeValue","_i","_parsers","rangeOperators","rangeContextNodeParser","nameNode","mediaParser","_require_postcss_media_query_parser_","mediaFeatureNode","parsedRangeContext","emptyLines","getChars","replaceEmptyLines","firstNodeRawsBefore","rootRawsAfter","maxLines","isSpecialCase","repeatTimes","emptyLFLines","emptyCRLFLines","matchStartIndex","matchEndIndex","eof","codeAfter","rootIndex","codeBefore","isEofNode","checkMatch","isStandardSyntaxRule","isIgnoreAtRule","checkStatement","nestingDepth","ignorePseudoClasses","level","sel","extractPseudoRule","containsPseudoClassesOnly","pseudoRule","containsIgnoredPseudoClassesOnly","keyframeName","regex","keyframesNode","mediaFeatureColonSpaceChecker","fixData","paramColonIndex","colonIndices","beforeColon","afterColon","mediaFeatureRangeContext","unprefixedMediaFeatureName","allowedValuesKey","featureName","mediaFeatureNames","ignoreMediaFeatureNames","hasComments","mediaRule","expectedFeatureName","expectedWithActual","NAMED_TO_NUMERIC","NUMERIC_TO_NAMED","ignoreRelative","checkWeight","weightValueNode","weightValue","lowerWeightValue","numericValue","namedValue","isFontShorthandProp","hasNumericFontWeight","isDivNode","isPossibleFontWeightNode","indexBoost","problems","parsedParams","findMediaOperator","fixOperatorIndices","checkBeforeOperator","beforeOperator","afterOperator","mediaQueryListCommaWhitespaceChecker","allowTrailingComments","execResult","commaIndex","checkComma","paramCommaIndex","commaIndices","beforeComma","afterComma","linebreak","shouldHaveCR","hasError","reportNewlineError","dataToCheck","hasNewlineToVerify","hasCR","res","resolvedNestedSelector","resolveNestedSelector","parentIsNestAtRule","parentSelectors","parentSelector","newlyResolvedSelectors","resolvedParentSelector","combinedSelector","findAtRuleContext","htmlTypeSelectors","mixedCaseSvgTypeSelectors","levelOneAndTwoPseudoElements","shadowTreePseudoElements","webkitScrollbarPseudoElements","vendorSpecificPseudoElements","pseudoElements","aNPlusBNotationPseudoClasses","aNPlusBOfSNotationPseudoClasses","atRulePagePseudoClasses","linguisticPseudoClasses","logicalCombinationsPseudoClasses","vendorSpecificPseudoClasses","webkitScrollbarPseudoClasses","pseudoClasses","nodeContextLookup","contextMap","getContext","subContexts","nodeSource","baseContext","creativeGetMap","someMap","someThing","parseSelector","ignoreSelectorsWithinList","selectorContextLookup","selectorNode","comparisonContext","referenceSelector","firstChild","nodesByCombinator","nodesAfterLastCombinator","nodesWithoutPseudoClasses","lastCompoundSelectorWithoutPseudoClasses","selectorSpecificity","calculate","entry","specificity","priorComparableSelectors","priorEntry","compare","resolvedSelector","findNotContiguousOrRectangular","areas","names","namedAreas","indicesByRow","row","isContiguousAndRectangular","expectedToken","expectedSameNumber","expectedRectangle","reportSent","firstArea","notSameNumberArea","area","notContiguousOrRectangular","isOnlyWhitespace","whitespacesToReject","fixString","findErrorStartIndex","lastEOLIndex","ignoreEmptyLines","isRootFirst","eolWhitespaceIndex","beforeNewlineIndex","rootNode","fixText","rawsParams","rawsSelector","rawsValue","lastEOL","reportFromIndex","eachEolWhitespace","errorIndex","fixFn","isKeyframeRule","firstDuplicateLine","disallowInList","shouldDisallowDuplicateInList","contextSelectorSet","resolvedSelectorList","flatMap","sortedSelectorList","selectorLine","previousDuplicatePosition","selectorListParsed","selectorForMessage","presentedSelectors","reportedSelectors","atImport","imports","firstParam","restParams","uri","media","importedUris","invalidPosition","nodeName","neverFixPositions","alwaysFixPositions","capturingGroupIndex","baseIndex","fixPosition","addLeadingZero","removeLeadingZeros","getOffsetByNode","nodeColumn","nodeLine","rawAfterRoot","fixSemiIndices","removeIndices","rawBeforeNode","allowedSemi","rawBeforeIndexStart","rawAfterNode","rawOwnSemicolon","noEmptyFirstLineTest","animationName","declaredAnimations","animationNames","shouldBeIgnored","findAnimationName","animationNameNode","begin","fixPositions","removeTrailingZeros","ident","expectedProp","_export_all_","allValidProperties","properties","checkPrefixed","shouldCheckPrefixed","selectorTree","attributeNode","attributeName","qualifiedAttribute","isAfterRule","isAfterSingleLineComment","selectorKey","disallowedProperties","selectorAttributeOperatorSpaceChecker","attributeNodeString","checkOperator","rawAttr","rawAttrAfter","attrAfter","setAttrAfter","isStandardSyntaxCombinator","fullSelector","combinatorNode","normalizeCombinator","operatorAfter","setOperatorAfter","rawOperator","rawSpacesOperator","rawOperatorAfter","selectorCombinatorSpaceChecker","locationType","parentParentNode","attrNode","getRuleSelector","selectorFixed","selectorListCommaWhitespaceChecker","checkDelimiter","beforeSelector","afterSelector","fixIndices","nextChars","indextoCheckAfter","isContextFunctionalPseudoClass","normalisedParentName","isNonNegativeInteger","isInteger","total","ignoreAttributes","container","nonSpaceCharacter","splitList","ignoreInsideBlock","IRREGULAR_WHITESPACES_PATTERN","issue","findIrregularWhitespace","attributeSelectorString","nextCharIsSpace","fixBefore","prevCharIsSpace","fixAfter","spacesAttribute","rawAttrBefore","attrBefore","setAttrBefore","rawAfter","setAfter","newSelectorString","prevChildNode","prevChildNodeValue","ignoreAfterCombinators","ignoreContextFunctionalPseudoClasses","_require_postcss_selector_parser_","isSimpleSelector","isNot","previousNot","indentAndTrimRight","head","tail","fixComplex","second","isSimple","not","simpleSelectors","firstSelector","fixSimple","pseudoNode","isKeyframeSelector","isStandardSyntaxTypeSelector","_node$parent$parent","parentType","parentValue","ignoreTypes","ignoreDescendant","ignoreChild","ignoreCompounded","ignoreNextSibling","isDescendantCombinator","hasDescendantCombinatorBefore","isChildCombinator","hasChildCombinatorBefore","hasCompoundSelector","isNextSiblingCombinator","paramString","setFirstNodeSpaceBefore","setLastNodeSpaceAfter","selectorCharacters","ignoreId","ignoreClass","ignoreAttribute","selectorAST","tagNode","selectorParent","selectorNodes","rightNode","getRightNodes","resolveNestedSelectors","shouldResolveNestedSelectors","classNode","prevChar","hasInterpolatingAmpersand","nestedSelector","pseudoElement","expectedPseudoElement","compoundCount","ignorePseudoElements","checkDeclOrAtRule","getIndex","valueLength","checkRule","isCustomSelector","prevPseudoElement","prevPseudoElementValue","fixedColon","isDouble","toFixed","ignoreUnits","specificitySum","specificities","sum","spec","maxChildSpecificity","maxSpec","childSpecificity","nodeSpecificity","pseudoClass","shouldSkipPseudoClassArgument","simpleSpecificity","ownValue","ownSpecificity","pseudoSpecificity","maxSpecificity","ignoreNamespaces","selectorLowerCase","svgTags","mathMLTags","isCustomElement","tagName","tagNameLowerCase","expectedValue","correctQuote","erroneousQuote","avoidEscape","needsEscape","fixIndex","replaceQuote","needsCorrectEscape","propertiesWithShorthandNotation","ignoredCharacters","normalizedProp","hasIgnoredCharacters","valuesToShorthand","shortestFormString","top","bottom","lowerTop","lowerRight","lowerBottom","lowerLeft","canCondenseToOneValue","canCondenseToTwoValues","_top","_bottom","canCondenseToThreeValues","canCondense","valuesFormString","checkedValue","processValue","expectedUnit","ignoreUnit","mediaNode","mediaNodes","lastMediaNode","imageSet","imageSetLastNode","valueListCommaWhitespaceChecker","indexToCheckAfter","determineIndex","expectedPseudo","declNode","beforeValue","afterValue","gridRowProps","gridColumnProps","mapLowercaseKeywordsToCamelCase","ignoreKeywords","camelCaseSvgKeywords","propLowerCase","isCounterIncrementCustomIdentValue","isCounterResetCustomIdentValue","keywordLowerCase","toLocaleLowerCase","expectedKeyword","time","DELAY_PROPERTIES","minimum","ignoreDelay","isAcceptableTime","numTime","timeUnit","propertyValue","timeValueCount","isIgnoredProperty","valueTimeCount","calcTimeValueCount","baseIndentLevel","indentInsideParens","indentClosingBrace","spaceCount","indentChar","warningWord","legibleExpectation","quantifiedWarningWord","indentationLevel","getDocument","indentLevel","isSafeInteger","newIndentLevel","indentSize","getIndentLevel","tabMatch","tabCount","spaceMatch","newBaseIndentLevel","firstLine","indents","foundIndents","shortest","MAX_SAFE_INTEGER","foundIndent","fill","afterEnd","nextRoot","inferRootIndentLevel","docSource","scores","lastIndentSize","lastLeadingSpacesLength","vote","leadingSpacesLength","score","leadingSpaces","bestScore","indentSizeDate","inferDocIndentSize","getRootBaseIndentLevel","calculatedLevel","checkMultilineBit","newlineIndentLevel","parentheticalDepth","ignoreInsideParans","outsideParens","precedesClosingParenthesis","expectedIndentLevel","afterNewlineSpaceMatches","afterNewlineSpace","expectedIndentation","currentIndentation","replaceIndentation","declProp","declBetween","atRuleAfterName","atRuleParams","nodeLevel","expectedOpeningBraceIndentation","isFirstChild","lastIndexOfNewline","fixIndentation","closingBraceLevel","expectedClosingBraceIndentation","declLevel","valueLevel","checkValue","ruleLevel","paramLevel","checkAtRuleParams","searchString","replaceString","checkAfterOperator","checkMedia","getMediaFeatureName","checkDecl","valuePrefixes","ignoreValues","lowerValue","hasPrefix","newValueString","_require__$alpha_value_notation_","_require__$annotation_no_unknown_","_require__$at_rule_allowed_list_","_require__$at_rule_disallowed_list_","_require__$at_rule_empty_line_before_","_require__$at_rule_name_case_","_require__$at_rule_name_newline_after_","_require__$at_rule_semicolon_space_before_","_require__$at_rule_name_space_after_","_require__$at_rule_no_unknown_","_require__$at_rule_no_vendor_prefix_","_require__$at_rule_property_required_list_","_require__$at_rule_semicolon_newline_after_","_require__$block_closing_brace_empty_line_before_","_require__$block_closing_brace_newline_after_","_require__$block_closing_brace_newline_before_","_require__$block_closing_brace_space_after_","_require__$block_closing_brace_space_before_","_require__$block_no_empty_","_require__$block_opening_brace_newline_after_","_require__$block_opening_brace_newline_before_","_require__$block_opening_brace_space_after_","_require__$block_opening_brace_space_before_","_require__$color_function_notation_","_require__$color_hex_alpha_","_require__$color_hex_case_","_require__$color_hex_length_","_require__$color_named_","_require__$color_no_hex_","_require__$color_no_invalid_hex_","_require__$comment_empty_line_before_","_require__$comment_no_empty_","_require__$comment_pattern_","_require__$comment_whitespace_inside_","_require__$comment_word_disallowed_list_","_require__$custom_media_pattern_","_require__$custom_property_empty_line_before_","_require__$custom_property_no_missing_var_function_","_require__$custom_property_pattern_","_require__$declaration_bang_space_after_","_require__$declaration_bang_space_before_","_require__$declaration_block_no_duplicate_custom_properties_","_require__$declaration_block_no_duplicate_properties_","_require__$declaration_block_no_redundant_longhand_properties_","_require__$declaration_block_no_shorthand_property_overrides_","_require__$declaration_block_semicolon_newline_after_","_require__$declaration_block_semicolon_newline_before_","_require__$declaration_block_semicolon_space_after_","_require__$declaration_block_semicolon_space_before_","_require__$declaration_block_single_line_max_declarations_","_require__$declaration_block_trailing_semicolon_","_require__$declaration_colon_newline_after_","_require__$declaration_colon_space_after_","_require__$declaration_colon_space_before_","_require__$declaration_empty_line_before_","_require__$declaration_no_important_","_require__$declaration_property_max_values_","_require__$declaration_property_unit_allowed_list_","_require__$declaration_property_unit_disallowed_list_","_require__$declaration_property_value_allowed_list_","_require__$declaration_property_value_disallowed_list_","_require__$font_family_no_missing_generic_family_keyword_","_require__$font_family_name_quotes_","_require__$font_family_no_duplicate_names_","_require__$font_weight_notation_","_require__$function_allowed_list_","_require__$function_calc_no_unspaced_operator_","_require__$function_comma_newline_after_","_require__$function_comma_newline_before_","_require__$function_comma_space_after_","_require__$function_comma_space_before_","_require__$function_disallowed_list_","_require__$function_linear_gradient_no_nonstandard_direction_","_require__$function_max_empty_lines_","_require__$function_name_case_","_require__$function_no_unknown_","_require__$function_parentheses_newline_inside_","_require__$function_parentheses_space_inside_","_require__$function_url_no_scheme_relative_","_require__$function_url_quotes_","_require__$function_url_scheme_allowed_list_","_require__$function_url_scheme_disallowed_list_","_require__$function_whitespace_after_","_require__$hue_degree_notation_","_require__$import_notation_","_require__$keyframe_block_no_duplicate_selectors_","_require__$keyframe_declaration_no_important_","_require__$keyframe_selector_notation_","_require__$keyframes_name_pattern_","_require__$length_zero_no_unit_","linebreaks","_require__$linebreaks_","_require__$max_empty_lines_","_require__$max_line_length_","_require__$max_nesting_depth_","_require__$media_feature_colon_space_after_","_require__$media_feature_colon_space_before_","_require__$media_feature_name_allowed_list_","_require__$media_feature_name_case_","_require__$media_feature_name_disallowed_list_","_require__$media_feature_name_no_unknown_","_require__$media_feature_name_no_vendor_prefix_","_require__$media_feature_name_value_allowed_list_","_require__$media_feature_parentheses_space_inside_","_require__$media_feature_range_operator_space_after_","_require__$media_feature_range_operator_space_before_","_require__$media_query_list_comma_newline_after_","_require__$media_query_list_comma_newline_before_","_require__$media_query_list_comma_space_after_","_require__$media_query_list_comma_space_before_","_require__$named_grid_areas_no_invalid_","_require__$no_descending_specificity_","_require__$no_duplicate_at_import_rules_","_require__$no_duplicate_selectors_","_require__$no_empty_source_","_require__$no_empty_first_line_","_require__$no_eol_whitespace_","_require__$no_extra_semicolons_","_require__$no_invalid_double_slash_comments_","_require__$no_invalid_position_at_import_rule_","_require__$no_irregular_whitespace_","_require__$no_missing_end_of_source_newline_","_require__$no_unknown_animations_","_require__$number_leading_zero_","_require__$number_max_precision_","_require__$number_no_trailing_zeros_","_require__$property_allowed_list_","_require__$property_case_","_require__$property_disallowed_list_","_require__$property_no_unknown_","_require__$property_no_vendor_prefix_","_require__$rule_empty_line_before_","_require__$rule_selector_property_disallowed_list_","_require__$selector_attribute_brackets_space_inside_","_require__$selector_attribute_name_disallowed_list_","_require__$selector_attribute_operator_allowed_list_","_require__$selector_attribute_operator_disallowed_list_","_require__$selector_attribute_operator_space_after_","_require__$selector_attribute_operator_space_before_","_require__$selector_attribute_quotes_","_require__$selector_class_pattern_","_require__$selector_combinator_allowed_list_","_require__$selector_combinator_disallowed_list_","_require__$selector_combinator_space_after_","_require__$selector_combinator_space_before_","_require__$selector_descendant_combinator_no_non_space_","_require__$selector_disallowed_list_","_require__$selector_id_pattern_","_require__$selector_list_comma_newline_after_","_require__$selector_list_comma_newline_before_","_require__$selector_list_comma_space_after_","_require__$selector_list_comma_space_before_","_require__$selector_max_attribute_","_require__$selector_max_class_","_require__$selector_max_combinators_","_require__$selector_max_compound_selectors_","_require__$selector_max_empty_lines_","_require__$selector_max_id_","_require__$selector_max_pseudo_class_","_require__$selector_max_specificity_","_require__$selector_max_type_","_require__$selector_max_universal_","_require__$selector_nested_pattern_","_require__$selector_no_qualifying_type_","_require__$selector_no_vendor_prefix_","_require__$selector_not_notation_","_require__$selector_pseudo_class_allowed_list_","_require__$selector_pseudo_class_case_","_require__$selector_pseudo_class_disallowed_list_","_require__$selector_pseudo_class_no_unknown_","_require__$selector_pseudo_class_parentheses_space_inside_","_require__$selector_pseudo_element_allowed_list_","_require__$selector_pseudo_element_case_","_require__$selector_pseudo_element_colon_notation_","_require__$selector_pseudo_element_disallowed_list_","_require__$selector_pseudo_element_no_unknown_","_require__$selector_type_case_","_require__$selector_type_no_unknown_","_require__$shorthand_property_no_redundant_values_","_require__$string_no_newline_","_require__$string_quotes_","_require__$time_min_milliseconds_","_require__$unicode_bom_","_require__$unit_allowed_list_","_require__$unit_case_","_require__$unit_disallowed_list_","_require__$unit_no_unknown_","_require__$value_keyword_case_","_require__$value_list_comma_newline_after_","_require__$value_list_comma_newline_before_","_require__$value_list_comma_space_after_","_require__$value_list_comma_space_before_","_require__$value_list_max_empty_lines_","_require__$value_no_vendor_prefix_","indentation","_require__$indentation_","normalizeRuleSettings","rawSettings","getModulePath","basedir","lookup","resolveFrom","silent","globalModules","_apply","_join","glob","positive","Path","normalizeAllRuleSettings","normalizedRules","rawRuleSettings","pluginFunctions","augmentConfigExtended","cosmiconfigResult","configDir","filepath","augmentedConfig","ignoreFiles","globs","globjoin","processors","absolutizeProcessors","absolutizePaths","_require_cosmiconfig_","STOP_DIR","createStylelint","_options","_extendExplorer","augmentConfig","stopDir","_specifiedConfigCache","_postcssResultCache","_fileCache","FileCache","cacheLocation","cacheStrategy","stripAnsi","onlyFirst","ansiRegex","isFullwidthCodePoint","isNaN","stringWidth","width","codePointAt","pluralize","singular","hasFlag","flag","terminatorPosition","forceColor","translateLevel","hasBasic","has256","has16m","supportsColor","haveStream","streamIsTTY","TERM","osRelease","sign","CI_NAME","TEAMCITY_VERSION","COLORTERM","TERM_PROGRAM_VERSION","TERM_PROGRAM","parseVersion","versionString","major","minor","patch","versions","supportsHyperlink","stream","FORCE_HYPERLINK","isTTY","VTE_VERSION","_export_stdout_","stdout","stderr","OSC","BEL","SEP","terminalLink","supportsHyperlinks","_require_picocolors_","levelColors","info","success","symbols","getMessageWidth","columnWidths","availableWidth","columns","fullWidth","orderedMessages","formatMessageText","ruleString","fromValue","filePath","logFrom","cleanedMessages","normalisedValue","calculateWidths","table","border","getBorderCharacters","alignment","paddingRight","wrapWord","drawHorizontalLine","el","_m","p1","p2","_require__$stringFormatter_","results","returnValue","allInvalidOptionWarnings","invalidOptionWarnings","invalidOptionsFormatter","allDeprecationWarnings","deprecations","seenText","reference","deprecationsFormatter","errorCount","warningCount","accum","parseErrors","tally","groupBy","keyFn","fileLink","ruleLink","metadata","formatters","compact","github","title","buildMessage","cleanedResults","tap","errored","ignored","unix","verbose","stringFormatter","ignoredCount","checkedDisplay","formatting","sourceText","warningsBySeverity","fixableProblemsFound","printProblems","problemsByRule","getConfigForFile","SafeParser","nextStart","prevEnd","_require_postcss_safe_parser_","_require_postcss$lib$lazy_result_","postcssProcessor","getPostcssResult","cached","customSyntax","resolved","require","getCustomSyntax","fileExtension","extname","extensions","previouslyInferredExtensions","cssSyntax","postcssOptions","getCode","fs","promises","readFile","codeProcessors","sourceName","codeFilename","codeProcessor","postcssResult","html","js","jsx","less","md","sass","sss","scss","svelte","ts","tsx","vue","xml","xst","isPathNotFoundError","ALL_RULES","createDisableRange","strictStart","strictEnd","assignDisabledRanges","inlineEnd","nextComment","checkComment","fullComment","currentLine","disableLine","ruleIsDisabled","disabledRuleName","strict","startDisabledRange","endDisabledRange","getDescription","getCommandRules","processDisableLineCommand","processDisableNextLineCommand","ruleToDisable","isAllRules","processDisableCommand","ruleToEnable","lastRange","processEnableCommand","fullText","splitted","descriptionStart","rangeObj","ensureRuleRanges","lastRangeForRule","peq","Uint32Array","distance","tmp","lst","pv","mv","sc","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","vlen","pb","mb","xh","ph","mh","myers_x","reportUnknownRuleNames","unknownRuleName","postcssRoot","suggestions","existRuleName","levenshtein","suggestion","extractSuggestions","rejectMessage","lintSource","existingPostcssResult","isCodeNotFile","inputFilePath","isPathIgnored","createEmptyPostcssResult","configFile","configForFile","calcHashOfConfig","hasFileChanged","stylelintPostcssResult","stylelintOptions","postcssDoc","newlineMatch","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","performRules","rulesOrder","ruleNames","ruleFunction","ruleSettings","primaryOption","defaultSeverity","disableFix","ruleDisableFix","lintPostcssResult","tailoredOptions","isConfig","createStylelintResult","cssSyntaxError","stylelintResult","deprecationMessage","stylelintReference","invalidOptionMessage","_postcssResult","createPartialStylelintResult","resultProcessors","resultProcessor","isPathValid","_require_ignore_","filterFilePaths","ignorer","filePaths","validForIgnore","notValidForIgnore","filteredByIgnore","NoFilesFoundError","fileList","AllFilesIgnoredError","validateDisableSettings","field","putIfAbsent","isWarningInRange","reportDisablesForRule","reportDisables","prepareReturnValue","stylelintResults","maxWarnings","rangeData","settings","usefulDisables","ruleRanges","allRangeComments","useful","needlessDisables","configRules","usedRules","invalidScopeDisables","alreadyReported","descriptionlessDisables","reportedDisables","getRuleMetadata","foundWarnings","maxWarningsExceeded","lintResults","lintResult","debug","_require_debug_","ALWAYS_IGNORED_GLOBS","lint","allowEmptyInput","useCache","configBasedir","disableDefaultIgnores","files","globbyOptions","ignorePath","reportDescriptionlessDisables","reportInvalidScopeDisables","reportNeedlessDisables","isValidCode","formatterFunction","getFileIgnorer","selected","getFormatterOptionsText","useOr","getFormatterFunction","absoluteCodeFilename","globCWD","absolutePath","fastGlob","escapePath","stripTrailing","ch","segs","normalizePath","destroy","globby","filePathsLengthBeforeIgnore","getStylelintResults","absoluteFilepath","removeEntry","fixedCss","writeFileAtomic","reconcile","createPlugin","resolveConfig","createLinter","utils","checkAgainstRule","tmpPostcssResult","DEFAULT_RAWS","indentError","ASTERICK","COMMA","RE_NEW_LINE","SugarSSParser","extraIndent","prevIndent","part","nextNonComment","moreIndent","commentText","atword","lastComma","keepTrailingSpace","checkSemicolon","checkCurly","badProp","unnamedDecl","isPrev","indentedFirstLine","diff","wrongIndent","lastSpace","sssBetween","altLast","inlineRight","real","indentType","prevNumber","reduceRight","preprocess","liner","_lint","_options$config","sugarss"],"mappings":"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GAAuB,CACtBvE,OACArL,SACA6P,gBAAiBkD,EAAQjS,MACzBkP,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACTb,IACoC,iBAA1BA,EAAOzI,KAAK6I,YACtBJ,EAAOzI,KAAK6I,UAAYJ,EAAOzI,KAAK6I,UAAUjF,QAAQ,OAAQ,KAC/D,EAEA,MACF,CACF,EAGFV,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArCQ,CACZC,IAAK,iEACLgB,SAAS,GCOV,MAAMyG,GAAW,IAAI3J,IAAI,CACxB,oBACA,kBACA,iBACA,gBACA,gBACA,eACA,qBACA,gBAOK4J,GAAY,IAAI5J,IAAI,CACzB,iBACA,oBACA,oBACA,0BACA,kBACA,mBACA,kBACA,yBACA,oBACA,uBACA,qBACA,mBACA,0BACA,qBACA,gCASK6J,GAAa,IAAI7J,IAAI,CAC1B,gBACA,cACA,aACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,aACA,kBACA,sBACA,kBACA,oBACA,kBACA,mBACA,qBACA,4BACA,6BACA,eACA,oBACA,sBACA,gBACA,yBACA,0BACA,uBACA,aACA,aACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,aACA,cACA,oBACA,oBACA,oBACA,cACA,eACA,UACA,SACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,YACA,wBACA,eACA,yBACA,yBACA,YACA,cACA,oBACA,kBACA,oBACA,WACA,iBACA,eACA,iBACA,gBACA,sBACA,wBACA,qBACA,UACA,kBACA,kBACA,mBACA,qBACA,oBACA,sBACA,OACA,cACA,qBACA,qBACA,oBACA,qBACA,oBACA,YACA,iBACA,aACA,cACA,gBACA,cACA,YACA,aACA,kBACA,QACA,sBACA,oBACA,sBACA,qBACA,uBACA,cACA,qBACA,aACA,kBACA,yBACA,0BACA,uBACA,uBACA,mBACA,wBACA,eACA,gBACA,WACA,kBACA,kBACA,wBACA,uBACA,uBACA,2BACA,wBACA,gBACA,sBACA,yB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a,GAA+B,IAAIzR,IAAI,CAC5C,YACA,iBACA,OACA,cACA,oBACA,WACA,cACA,YACA,aACA,oBAIK0R,GAA6C,IAAIxE,IAAI,CAE1D,CACC,YACA,IAAIlN,IAAI,CACP,iBACA,qBACA,4BACA,kBACA,4BACA,sBACA,sBACA,0BAGF,CACC,aACA,IAAIA,IAAI,CACP,mBACA,kBACA,sBACA,oBACA,oBACA,kBACA,wBACA,sBAGF,CACC,SACA,IAAIA,IAAI,CACP,mBACA,sBACA,oBACA,qBACA,mBACA,sBACA,oBACA,qBACA,mBACA,sBACA,oBACA,wBAGF,CACC,mBACA,IAAIA,IAAI,CAEP,yBACA,yBACA,4BAGF,CACC,qBACA,IAAIA,IAAI,CAEP,2BACA,2BACA,8BAGF,CACC,gBACA,IAAIA,IAAI,CAEP,sBACA,sBACA,yBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,eACA,IAAIA,IAAI,CACP,sBACA,qBACA,qBACA,sBACA,yBAGF,CACC,oBACA,IAAIA,IAAI,CAEP,0BACA,0BACA,6BAGF,CACC,sBACA,IAAIA,IAAI,CACP,4BACA,4BACA,+BAGF,CACC,cACA,IAAIA,IAAI,CAEP,oBACA,oBACA,uBAGF,CACC,gBACA,IAAIA,IAAI,CACP,0BACA,yBACA,6BACA,+BAGF,CACC,eACA,IAAIA,IAAI,CAEP,qBACA,qBACA,wBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,aACA,IAAIA,IAAI,CAEP,mBACA,mBACA,sBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,cACA,IAAIA,IAAI,CAEP,oBACA,oBACA,uBAGF,CACC,UACA,IAAIA,IAAI,CAEP,eACA,kBAGF,CACC,OACA,IAAIA,IAAI,CAEP,YACA,cACA,gBAGF,CACC,YACA,IAAIA,IAAI,CAEP,iBACA,eAGF,CACC,OACA,IAAIA,IAAI,CACP,aACA,eACA,cACA,eACA,YACA,cACA,iBAGF,CACC,OACA,IA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,WACAnF,SACA8E,SAAAA,IACC,GACD,EAIJ0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjDQ,CACZC,IAAK,iFCXN,IAAAirB,GAAA,SAAoCr2B,GACnC,OAA0C,IAAnCA,EAAMqC,WAAW2a,OAAOxd,QAAgByI,OAAOjI,IAAUA,CAChE,ECND,MAAMs2B,GAAgB,IAAIptB,IAAI,CAAC,UAAW,UAAW,SAAU,eAAgB,UAEzEqtB,GAAqBljB,GAAUijB,GAAe,CACnD,UACA,OACA,OACA,cACA,gBACA,eAGKE,GAAqBnjB,GAAUijB,GAAe,CACnD,QACA,aACA,UACA,UACA,YACA,YACA,WACA,gBACA,eACA,eAGKG,GAA6B,IAAIvtB,IAAI,CAAC,SAAU,YAEhDwtB,GAA6B,IAAIxtB,IAAI,CAAC,SAAU,SAEhDytB,GAA+BtjB,GACpCojB,GACAC,IAGKE,GAA4B,IAAI1tB,IAAI,CACzC,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QAGK2tB,GAAqBxjB,GAC1BijB,GACAK,GACAC,IAGKE,GAAoBzjB,GAAUijB,GAAe,CAAC,SAAU,SAAU,YAElES,GAAsB1jB,GAAUijB,GAAe,CACpD,SACA,OACA,mBACA,OACA,mBACA,sBACA,0BACA,6BACA,uBACA,0BACA,aACA,gBACA,aACA,aACA,iBACA,cACA,kBACA,UACA,eACA,cACA,gBACA,oBACA,eACA,qBACA,oBACA,UACA,eACA,QACA,QACA,QACA,QACA,aACA,cACA,aACA,qBACA,SAGKU,GAAsB3jB,GAAUijB,GAAe,CACpD,iBACA,YACA,kBACA,kBACA,gBACA,WACA,iBACA,mBAGKW,GAAmB5jB,GAAUijB,GAAe,CACjD,WACA,UACA,QACA,SACA,QACA,UACA,WACA,SACA,YAGKY,GAAqB7jB,GAAUijB,GAAe,CAAC,WAE/Ca,GAAwB9jB,GAC7BijB,GACAQ,GACAC,GACAF,GACAG,GACAC,GACAC,GACAV,IAGKY,GAAwB/jB,GAAUijB,GAAe,CAAC,SAElDe,GAAkChkB,GAAUijB,GAAe,CAChE,SACA,OACA,UACA,cACA,WACA,aACA,WACA,QACA,iBAGKgB,GAAkC,IAAIpuB,IAAI,CAAC,aAE3CquB,GAA6BlkB,GAAUijB,GAAe,CAC3D,SACA,UACA,YACA,sBAGKkB,GAA4B,IAAItuB,IAAI,CAAC,OAAQ,WAAY,YAAa,SAEtEuuB,GAA6BpkB,GAAUijB,GAAe,CAAC,UAAW,WAGlEoB,GAA6BrkB,GAClCijB,GACAc,GACAC,GACAC,GACAC,GACAC,GACAC,IAGKE,GAAkBtkB,GAAUijB,GAAe,CAAC,OAAQ,SAEpDsB,GAAqBvkB,GAAUijB,GAAe,CAAC,OAAQ,SAEvDuB,GAAmBxkB,GAAUijB,GAAe,CAAC,OAAQ,SAGrDwB,GAA2BzkB,GAAUijB,GAAe,CAAC,SAErDyB,GAAuB1kB,GAAUijB,GAAe,CAAC,SAGjD0B,GAAwB3kB,GAAUijB,GAAe,CACtD,OACA,OACA,SACA,SACA,UACA,cACA,uBACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eACA,WACA,UACA,YACA,qBACA,kBACA,aACA,mBACA,WACA,WACA,WACA,SACA,WACA,iBACA,kBACA,oBACA,UACA,WACA,iBACA,QACA,uBACA,sBACA,wBACA,MACA,iBACA,YACA,YACA,UACA,QACA,UACA,sBACA,wBACA,QACA,SACA,OACA,UACA,sBACA,wBACA,iBACA,kBACA,oBAEA,oBACA,uBACA,0BACA,0BACA,SACA,mBACA,SAGK2B,GAA4B5kB,GAAUijB,GAAe,CAAC,SAAU,YAEhE4B,GAAyB7kB,GAAUijB,GAAe,CAAC,SAEnD6B,GAA6B9kB,GAClCijB,GACA0B,GACAC,GACAC,IAGKE,GAAoB,IAAIlvB,IAAI,CACjC,gBACA,kBACA,qBACA,qBACA,eACA,aACA,iBACA,cACA,gBACA,OACA,cAGKmvB,GAA2B,IAAInvB,IAAI,CAAC,OAAQ,OAG5CovB,GAAuB,IAAIpvB,IAAI,CACpC,eACA,gBACA,eACA,aACA,aACA,kBACA,eACA,aACA,cACA,WACA,YACA,gBACA,iBACA,kBACA,sBACA,iBACA,WACA,OACA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IhCg/D,GAA4B,IAAIh/D,IAAI,CACzC,WACA,cACA,eACA,eACA,gBACA,mBACA,WACA,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,iBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,eACA,gBACA,WACA,iBACA,iBACA,aAIKi/D,GAA+B,IAAIj/D,IAAI,CAAC,SAAU,QAAS,aAAc,iBAEzEk/D,GAA2B,IAAIl/D,IAAI,CAAC,SAEpCm/D,GAAgC,IAAIn/D,IAAI,CAC7C,kBACA,oBACA,2BACA,2BACA,0BACA,0BACA,kCAGKo/D,GAA+Bj1D,GAAUg1D,GAA+B,CAC7E,mBACA,mBACA,mBACA,iBACA,mBACA,oBACA,sBACA,mBACA,mBACA,aACA,YACA,YACA,aACA,WACA,iBACA,iBACA,aACA,YACA,kBACA,mBACA,cACA,YACA,YACA,uBACA,+BACA,oCACA,uBACA,8BACA,wBACA,mCACA,kCACA,uCACA,mCACA,0CACA,qCACA,oCACA,qCACA,6BACA,mCACA,mCACA,yBACA,sBACA,6BACA,4BACA,wBACA,oBACA,qCACA,8BACA,8BACA,iCACA,uBACA,iCACA,yBACA,+BACA,4BACA,gCACA,oCACA,gCACA,uBACA,yCACA,4BACA,kCACA,0CACA,oCACA,oCACA,yCAGKE,GAAiBl1D,GACtB80D,GACAG,GACAF,GACA,CACC,WACA,UACA,MACA,uBACA,gBACA,YACA,SACA,cACA,YACA,SACA,UACA,iBACA,gBAIII,GAA+B,IAAIt/D,IAAI,CAC5C,aACA,kBACA,mBACA,gBAGKu/D,GAAkC,IAAIv/D,IAAI,CAAC,YAAa,mBAExDw/D,GAA0B,IAAIx/D,IAAI,CAAC,QAAS,QAAS,OAAQ,UAE7Dy/D,GAA0B,IAAIz/D,IAAI,CAAC,MAAO,SAE1C0/D,GAAmC,IAAI1/D,IAAI,CAAC,MAAO,KAAM,UAAW,MAAO,UAE3E2/D,GAA8B,IAAI3/D,IAAI,CAC3C,cACA,WACA,gBACA,cACA,iBACA,kBACA,iBACA,mBACA,4BACA,iBACA,eACA,qBACA,yBACA,6BACA,mBACA,sBACA,kBACA,kBACA,gBACA,qBACA,uBACA,iBACA,wBACA,eACA,cACA,mBACA,mBACA,sBACA,iCAIK4/D,GAA+B,IAAI5/D,IAAI,CAC5C,aACA,WACA,YACA,YACA,QACA,MACA,gBACA,gBACA,YACA,iBACA,oBAGK6/D,GAAgB11D,GACrBm1D,GACAG,GACAC,GACAH,GACAI,GACA,CACC,SACA,WACA,WACA,QACA,UACA,UACA,UACA,UACA,WACA,QACA,UACA,cACA,gBACA,QACA,eACA,gBACA,aACA,sBACA,SACA,OACA,eACA,QACA,gBACA,WACA,UACA,aACA,eACA,OACA,aACA,eACA,WACA,eACA,OACA,oBACA,UACA,qBACA,SACA,YACA,aACA,WACA,OACA,QACA,QACA,SACA,aACA,eACA,aACA,QACA,UACA,oBChSF,IAAiBG,GAAA,WAChB,MAAMC,EAAa,IAAI7yD,IAEvB,MAAO,CAMN8yD,WAAW5pE,KAAS6pE,GACnB,IAAK7pE,EAAKmN,OAAQ,MAAM,IAAIrH,MAAM,mCAElC,MAAMgkE,EAAa9pE,EAAKmN,OAAO5L,MAAM8sB,KAC/B07C,EAAcC,GAAeL,EAAYG,GAE/C,OAAOD,EAAY5iE,QAAO,CAAChH,EAAQsM,IAAYy9D,GAAe/pE,EAAQsM,IAAUw9D,EACjF,EAED,EAMD,SAASC,GAAeC,EAASC,GAKhC,OAJKD,EAAQn/D,IAAIo/D,IAChBD,EAAQj2D,IAAIk2D,EAAW,IAAIpzD,KAGrBmzD,EAAQt8C,IAAIu8C,EACpB,CC/BA,IAAiBC,GAAA,SAAuBl1D,EAAUhV,EAAQD,EAAM+sB,GAC/D,IACC,OAAOoxC,GAAepxC,GAAU+uC,YAAY7mD,EAK7C,CAJE,MAAOlF,GAGR,YAFA9P,EAAOsH,KAA+BwI,0BAAAA,OAAAA,EAAQ,KAAA,CAAE/P,OAAMmK,cAAe,cAGtE,CACA,ECFD,MAAMpF,GAAW,4BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,CAAChD,EAAGD,IAA4BC,sBAAAA,OAAAA,wCAA+BD,EAAC,OAUrExB,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAgBb,IAfqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,GAET,CACCb,UAAU,EACVD,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,4BAMX,OAGD,MAAM66D,EAA4B3lE,EACjC4G,EACA,SACA,yBAGKg/D,EAAwBX,KA6C9B,SAAS5K,EAAcwL,EAAch4C,EAAUi4C,GAC9C,MAAMt1D,EAAWq1D,EAAavnE,WACxBynE,EAmCT,SAAkDF,GACjD,MAAMG,EAAaH,EAAa3qE,MAAM,GAEtCyJ,EAAOqhE,GACP,MAAMC,EAAoBD,EAAWx0D,OAAOjW,GAAuB,eAAdA,EAAKG,OACpDwqE,EAA2BD,EAAkBA,EAAkBxqE,OAAS,GAE9EkJ,EAAOuhE,GAEP,MAAMC,EAA4BD,EAAyBn4C,QAAQxyB,GAEnD,WAAdA,EAAKG,MACLH,EAAKU,MAAM8J,WAAW,OACtBy+D,GAAen+D,IAAI9K,EAAKU,MAAMyG,QAAQ,KAAM,OAI9C,OAAyC,IAArCyjE,EAA0B1qE,YAAc,EAErC0qE,EAA0Bt0C,KAAK,GACvC,CAvD6Bu0C,CAAyCP,GAEnE,QAA0B3pE,IAAtB6pE,EAAiC,OAErC,MAAMM,EAAsBC,GAAUT,GAChCU,EAAQ,CAAE/1D,WAAUg2D,YAAaH,GACjCI,EAA2BX,EAAkB58C,IAAI68C,GAEvD,QAAiC7pE,IAA7BuqE,EAAJ,CAMA,IAAK,MAAMC,KAAcD,EACpBE,GAAQN,EAAqBK,EAAWF,aAAe,GAC1DpmE,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAASyD,SAAS+J,EAAUk2D,EAAWl2D,UAChD5P,KAAM4P,IAKTi2D,EAAyB1oE,KAAKwoE,EAd9B,MAHCT,EAAkBv2D,IAAIw2D,EAAmB,CAACQ,GAkB5C,CAxEA1/D,EAAKqK,WAAW2c,IAEf,IAAKwxC,GAAqBxxC,GACzB,OAID,GAAI83C,GAA6B93C,EAAS4e,UAAUhxC,OAAS,EAC5D,OAID,MAAMqqE,EAAoBF,EAAsBT,WAC/Ct3C,EACAo2C,GAAkBp2C,IAGnB,IAAK,MAAMrd,KAAYqd,EAAS4e,UAAW,CAI1C,GAAqB,KAHAj8B,EAASyI,OAQ9B,IAAK,MAAM2tD,KAAoBnD,GAAuBjzD,EAAUqd,GAC/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAW/V,IAC7CykC,GAAyBqqB,IAI9BvM,EAAcviD,EAAG+V,EAAUi4C,EAAkB,GAGhD,IAqCD,EA8BF9jE,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5IQ,CACZC,IAAK,mEChBN,MAAM/G,GAAW,sCAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAgB,IAAM,mCACtBQ,eAAgB,IAAM,mCACtBnB,yBAA0B,IAAM,yDAChCC,yBAA0B,IAAM,2DAS3BzK,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,QAAS,qBAAsB,uBAIpD,OAID,IAAIw6D,EAsBJ,GApBAoC,GAAqC,CACpC37D,OACArL,SACA6P,gBAAiBkD,EAAQlS,OACzBmP,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACb,EAAQ7G,KACT,MAAMmiE,EAAkBniE,EAAQsV,GAAiBzO,GAEjD64D,EAAUA,GAAW,IAAI/tD,IACzB,MAAMywD,EAAe1C,EAAQl3C,IAAI3hB,IAAW,GAK5C,OAHAu7D,EAAa/kE,KAAK8kE,GAClBzC,EAAQ7wD,IAAIhI,EAAQu7D,IAEb,CAAI,EAEX,OAGA1C,EACH,IAAK,MAAO74D,EAAQu7D,KAAiB1C,EAAQ/8D,UAAW,CACvD,IAAImE,EAASD,EAAOzI,KAAK0I,OAASD,EAAOzI,KAAK0I,OAAOzI,IAAMwI,EAAOC,OAElE,IAAK,MAAM9G,KAASoiE,EAAaj5C,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CACvD,MAAMu/D,EAAcv7D,EAAO3J,MAAM,EAAG6C,GAC9BsiE,EAAax7D,EAAO3J,MAAM6C,GAE5BiG,EAAQZ,WAAW,UACtByB,EAASu7D,EAAYrgE,QAAQ,OAAQ,KAAOsgE,EAClCr8D,EAAQZ,WAAW,WAC7ByB,EAASu7D,EAAYrgE,QAAQ,OAAQ,IAAMsgE,EAE7C,CAEIz7D,EAAOzI,KAAK0I,OACfD,EAAOzI,KAAK0I,OAAOzI,IAAMyI,EAEzBD,EAAOC,OAASA,CAElB,CACD,CACA,EAGFxF,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArEQ,CACZC,IAAK,4EACLgB,SAAS,GCbV,MAAM/H,GAAW,kBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,4BAQLzE,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAGb,IAFqB4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,IAGhE,QAGkBmB,EAAQM,IAAMvB,EAAKvI,WAAcuI,EAAK6B,QAAU7B,EAAK6B,OAAO5L,MAAMq+B,KAAQ,IAE9EliB,QAIf7Y,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsL,EACNrL,SACA8E,SAAAA,IACC,ECuBJ,SAASumE,GAA+BC,GACvC,OAdD,SAAoBA,GACnB,MAAMC,EAAQ,IAAI5hE,IAAI2hE,EAAM7gE,QAI5B,OAFA8gE,EAAMv0D,OAAO,KAEN,IAAIu0D,EACZ,CAQQC,CAAWF,GAAO/4C,QAAQnwB,IAlDlC,SAAoCkpE,EAAOlpE,GAC1C,MAAMqpE,EAAeH,EAAMx1D,KAAK41D,IAC/B,MAAMrR,EAAU,GAChB,IAAIv/B,EAAM4wC,EAAIjpE,QAAQL,GAEtB,MAAgB,IAAT04B,GACNu/B,EAAQ93D,KAAKu4B,GACbA,EAAM4wC,EAAIjpE,QAAQL,EAAM04B,EAAM,GAG/B,OAAOu/B,CAAO,IAGf,IAAK,IAAIx6D,EAAI,EAAGA,EAAI4rE,EAAaxrE,OAAQJ,IACxC,IAAK,IAAI0d,EAAI1d,EAAI,EAAG0d,EAAIkuD,EAAaxrE,OAAQsd,IAAK,CACjD,MAAMG,EAAI+tD,EAAa5rE,GACjBid,EAAI2uD,EAAaluD,GAEvB,KAAKG,GAAkB,IAAbA,EAAEzd,QAAkB6c,GAAkB,IAAbA,EAAE7c,QAIhC8H,EAAW2V,EAAGZ,IAClB,OAAO,CAET,CAGD,OAAO,CACR,CAqB4C6uD,CAA2BL,EAAOlpE,IAC9E,CDrBAoE,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA9BQ,CACZC,IAAK,yDEFN,MAAM/G,GAAW,8BAEX0C,GAAWD,EAAazC,GAAU,CACvC8mE,cAAe,IAAM,oCACrBC,mBAAoB,IAAM,qDAC1BC,kBAAoB1pE,GAAI,4CAAA0F,OAAiD1F,EAAI,OAQxEoE,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,KAMjEE,EAAKE,UAAU,iDAAkDlI,IAChE,MAAM5C,MAAEA,GAAU4C,EAElB,GAAmC,SAA/B5C,EAAMiM,cAAc+Q,OAAmB,OAG3C,MAAM6tD,EAAQ,GACd,IAAIS,GAAa,EAmBjB,GAjBAtgE,EAAYhL,GAAOhB,MAAK,EAAG+C,cAAaF,iBAAgBpC,OAAMO,MAAOkL,MACpE,GAAa,WAATzL,EAEJ,MAAmB,KAAfyL,GACH1B,EAASzC,GAASokE,gBAAiBppE,EAAaF,QAChDypE,GAAa,SAKdT,EAAM/oE,KAAK,CACV8R,OAAQ1I,EAAW8R,OAAOzH,MAAM,KAAKuc,OAAO5tB,SAC5CO,MAAO1C,EACP2C,SAAU7C,GACT,IAGCypE,EAAY,OAEhB,MAAOC,GAAaV,EAEpB,QAAkB5qE,IAAdsrE,EAAyB,OAE7B,MAAMC,EAAoBX,EAAM12D,MAC9Bs3D,GAASA,EAAK73D,OAAOpU,SAAW+rE,EAAU33D,OAAOpU,SAGnD,QAA0BS,IAAtBurE,EAOH,YANAhiE,EACCzC,GAASqkE,qBACTI,EAAkB/mE,MAClB+mE,EAAkB9mE,UAMpB,MAAMgnE,EAA6Bd,GAA+BC,EAAMx1D,KAAK9N,GAAMA,EAAEqM,UAErF,IAAK,MAAMjS,KAAQ+pE,EAA2B99C,OAAQ,CACrD,MAAM69C,EAAOZ,EAAM12D,MAAM5M,GAAMA,EAAEqM,OAAO/N,SAASlE,KAEjD+G,EAAO+iE,GACPjiE,EAASzC,GAASskE,kBAAkB1pE,GAAO8pE,EAAKhnE,MAAOgnE,EAAK/mE,SAC7D,CAOA,SAAS8E,EAASlF,EAASG,EAAOC,GACjC,MAAMO,EAAQuS,GAAsB5U,GAEpCuB,EAAO,CACNG,UACAhF,KAAMsD,EACN6B,MAAOQ,EAAQR,EACfC,SAAUO,EAAQP,EAClBnF,SACA8E,SAAAA,IAEF,IACC,EAIJ0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA3FQ,CACZC,IAAK,qECVN,IAAAugE,GAAA,SAA2C9qE,GAC1C,IAAK,MAAMwxC,KAAWxxC,EACrB,IAAKgP,GAAawiC,GACjB,OAAO,EAIT,OAAO,CACP,ECND,MAAMhuC,GAAW,oBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,yCAQLohE,GAAsB,IAAI1iE,IAAI,CAAC,IAAK,OAM1C,SAAS2iE,GAAUj0D,GAClB,OAAOA,EAAInR,QAAQ,UAAW,GAC/B,CAQA,SAASqlE,GAAoBC,EAAcj/D,GAAQk/D,iBAAEA,EAAgBC,YAAEA,IACtE,MAAMC,EAAqBH,EAAe,EAG1C,IAAKH,GAAoBxhE,IAAI0C,EAAOuE,OAAO66D,IAC1C,OAAQ,EAGT,GAAIF,EAAkB,CAGrB,MAAMG,EAAqBr/D,EAAOg7B,YAAY,KAAMokC,GAEpD,GAAIC,GAAsB,GAAKF,EAAa,CAC3C,MAAMznE,EAAOsI,EAAOrJ,UAAU0oE,EAAoBD,GAElD,GAAIP,GAAiBnnE,GACpB,OAAQ,CAEV,CACD,CAEA,OAAO0nE,CACR,CAGA,MAAMnmE,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KAgBb,IAfqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,GAET,CACCb,UAAU,EACVD,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,kBAMX,OAGD,MAAMm9D,EAAmBjoE,EAAe4G,EAAkB,SAAU,eAEhEkB,EAAQM,KA4DZ,SAAaigE,GACZ,IAAIH,GAAc,EAiGlB,GA/FAG,EAASptE,MAAMM,IAUd,GATA+sE,EACC/sE,EAAKuD,KAAKzC,QACT4yB,IACA1zB,EAAKuD,KAAKzC,OAAS4yB,CAAK,GAEzBi5C,GAEDA,GAAc,EAEV/9D,GAAS5O,GAAO,CACnB+sE,EAAQ/sE,EAAKuD,KAAK6I,WAAYsnB,IAC7B1zB,EAAKuD,KAAK6I,UAAYsnB,CAAK,IAG5B,MAAMs5C,EAAahtE,EAAKuD,KAAK0I,OAEzB+gE,EACHD,EAAQC,EAAWxpE,KAAMkwB,IACxBs5C,EAAWxpE,IAAMkwB,CAAK,IAGvBq5C,EAAQ/sE,EAAKiM,QAASynB,IACrB1zB,EAAKiM,OAASynB,CAAK,GAGtB,CAEA,GAAI1e,GAAOhV,GAAO,CACjB,MAAMitE,EAAejtE,EAAKuD,KAAK0R,SAE3Bg4D,EACHF,EAAQE,EAAazpE,KAAMkwB,IAC1Bu5C,EAAazpE,IAAMkwB,CAAK,IAGzBq5C,EAAQ/sE,EAAKiV,UAAWye,IACvB1zB,EAAKiV,SAAWye,CAAK,GAGxB,CAQA,IANI9kB,GAAS5O,IAASgV,GAAOhV,IAAS84C,GAAc94C,KACnD+sE,EAAQ/sE,EAAKuD,KAAK2R,SAAUwe,IAC3B1zB,EAAKuD,KAAK2R,QAAUwe,CAAK,IAIvBolB,GAAc94C,GAAO,CACxB,MAAMktE,EAAYltE,EAAKuD,KAAK7C,MAExBwsE,EACHH,EAAQG,EAAU1pE,KAAMkwB,IACvBw5C,EAAU1pE,IAAMkwB,CAAK,IAGtBq5C,EAAQ/sE,EAAKU,OAAQgzB,IACpB1zB,EAAKU,MAAQgzB,CAAK,GAGrB,CAEItlB,GAAUpO,KACb+sE,EAAQ/sE,EAAKuD,KAAK+oB,MAAOoH,IACxB1zB,EAAKuD,KAAK+oB,KAAOoH,CAAK,IAGlBjI,GAAwBzrB,GAG5B+sE,EAAQ/sE,EAAKuD,KAAKgpB,OAAQmH,IACzB1zB,EAAKuD,KAAKgpB,MAAQmH,CAAK,IAHxB1zB,EAAKuD,KAAKgpB,MAAQvsB,EAAKuD,KAAKgpB,OAASggD,GAAUvsE,EAAKuD,KAAKgpB,OAO1DwgD,EAAQ/sE,EAAKqQ,MAAOqjB,IACnB1zB,EAAKqQ,KAAOqjB,CAAK,MAIf9kB,GAAS5O,IAASgV,GAAOhV,KAC5B+sE,EAAQ/sE,EAAKuD,KAAKxC,OAAQ2yB,IACzB1zB,EAAKuD,KAAKxC,MAAQ2yB,CAAK,GAEzB,IAGDq5C,EACCD,EAASvpE,KAAKxC,OACb2yB,IACAo5C,EAASvpE,KAAKxC,MAAQ2yB,CAAK,GAE5Bi5C,GAGkC,iBAAxBG,EAASvpE,KAAKxC,MAAoB,CAC5C,MAAMosE,EAAUtxD,KAAK9b,IACpB+sE,EAASvpE,KAAKxC,MAAMynC,YAAY,MAChCskC,EAASvpE,KAAKxC,MAAMynC,YAAY,OAG7B2kC,IAAYL,EAASvpE,KAAKxC,MAAMb,OAAS,IAC5C4sE,EAASvpE,KAAKxC,MACb+rE,EAASvpE,KAAKxC,MAAMuB,MAAM,EAAG6qE,EAAU,GACvCZ,GAAUO,EAASvpE,KAAKxC,MAAMuB,MAAM6qE,EAAU,IAEjD,CACD,CAzKCtgE,CAAIvB,GAGL,MAAM4zD,EAAa3yD,EAAQM,IAAMvB,EAAKvI,WAAcuI,EAAK6B,QAAU7B,EAAK6B,OAAO5L,MAAMq+B,KAAQ,GAKvFwtC,EAAmBjoE,IACxBN,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsL,EACNnG,QACAlF,SACA8E,SAAAA,IACC,EAGHsoE,EAAkBnO,EAAYkO,GAAiB,GAE/C,MAAME,EAAad,GAAoBtN,EAAWh/D,OAAQg/D,EAAY,CACrEwN,mBACAC,aAAa,IAcd,SAASU,EAAkB7/D,EAAQuf,EAAU4/C,GAC5C/9C,GACC,CACCzhB,OAAQK,EACRqhB,OAAQ,CAAC,KAAM,MACfE,SAAU,UAEV9qB,IACA,MAAMkB,EAAQqnE,GAAoBvoE,EAAM8sB,WAAYvjB,EAAQ,CAC3Dk/D,mBACAC,gBAGGxnE,GAAS,GACZ4nB,EAAS5nB,EACV,GAGH,CA0HA,SAAS4nE,EAAQrsE,EAAO6sE,EAAOZ,GAAc,GAC5C,IAAKjsE,EACJ,OAGD,IAAIgzB,EAAQ,GACRkH,EAAY,EAEhByyC,EACC3sE,GACCyE,IACA,MAAMuR,EAAevR,EAAQ,EAE7BuuB,GAAS64C,GAAU7rE,EAAM4B,MAAMs4B,EAAWlkB,IAC1CkkB,EAAYlkB,CAAY,GAEzBi2D,GAGG/xC,IACHlH,GAAShzB,EAAM4B,MAAMs4B,GACrB2yC,EAAM75C,GAER,CA9KI45C,GAAc,GACjBF,EAAgBE,EA6KjB,EAIF7mE,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KApRQ,CACZC,IAAK,0DACLgB,SAAS,GCVV,IAAA0gE,GAAA,SAAyC/mE,GACxC,MAAM1E,EAAS0E,EAAK1E,OAEpB,QAAKA,IAIE6M,GAAS7M,IAAyC,cAA9BA,EAAOM,KAAKsK,cACvC,ECHD,MAAM5H,GAAW,yBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,CAAC+J,EAAUw4D,IACcx4D,kCAAAA,OAAAA,mCAAiCw4D,KAQ/DhnE,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAcb,IAbqB4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQe,EACRhB,SAAU,CACTqjE,eAAgB,CAACllE,IAElB+B,UAAU,IAKX,OAGD,MAAMojE,EAAgCtiE,GAAoBA,EAAiBqiE,eAMrErD,EAAwBX,KAE9Bp+D,EAAKqK,WAAW2c,IACf,GAAIk7C,GAAel7C,GAClB,OAGD,MAAMs7C,EAAqBvD,EAAsBT,WAChDt3C,EACAo2C,GAAkBp2C,IAEbu7C,EAAuB,IACzB,IAAIjkE,IACN0oB,EAAS4e,UAAU48B,SAAS74D,GAAaizD,GAAuBjzD,EAAUqd,OAQtEy7C,EAAqB,IAJIF,EAAqB93D,IAAIw4B,KAIDjgB,OAAOgI,KAAK,KAEnE,IAAKhE,EAASnlB,OAAQ,MAAM,IAAIrH,MAAM,oCAEtC,IAAKwsB,EAASnlB,OAAOxH,MAAO,MAAM,IAAIG,MAAM,8CAE5C,MAAMkoE,EAAe17C,EAASnlB,OAAOxH,MAAMT,KAI3C,IAAI+oE,EAIJ,MAAMC,EAAqB,GAkB3B,GAhBIP,EACHxD,GAAc4D,EAAoB9tE,EAAQqyB,GAAW4e,IACpDA,EAAUlkB,MAAMzQ,IACf,MAAMtH,EAAW7N,OAAOmV,GAExB2xD,EAAmB1rE,KAAKyS,GAEpB24D,EAAmBjgD,IAAI1Y,KAC1Bg5D,EAA4BL,EAAmBjgD,IAAI1Y,GACpD,GACC,IAGHg5D,EAA4BL,EAAmBjgD,IAAIogD,GAGhDE,EAA2B,CAG9B,MACME,EADmBN,EAAqBv3C,KAAK,OAAShE,EAAS4e,UAAU5a,KAAK,KAEjFu3C,EAAqBv3C,KAAK,MAC1BhE,EAASrd,SAEZ,OAAOpQ,EAAO,CACb5E,kBACA8E,GACA/E,KAAMsyB,EACNttB,QAASyC,GAASyD,SAASijE,EAAoBF,GAC/C5oE,KAAM8oE,GAER,CAEA,MAAMC,EAAqB,IAAIxkE,IACzBykE,EAAoB,IAAIzkE,IAG9B,IAAK,MAAMqL,KAAYqd,EAAS4e,UAAW,CAC1C,MAAMuG,EAAalJ,GAAUt5B,GAE7B,GAAIm5D,EAAmBtjE,IAAI2sC,GAAa,CACvC,GAAI42B,EAAkBvjE,IAAI2sC,GACzB,SAGD5yC,EAAO,CACN5E,kBACA8E,GACA/E,KAAMsyB,EACNttB,QAASyC,GAASyD,SAAS+J,EAAU+4D,GACrC3oE,KAAM4P,IAEPo5D,EAAkBl8C,IAAIslB,EACvB,MACC22B,EAAmBj8C,IAAIslB,EAEzB,CAEA,GAAIk2B,EACH,IAAK,MAAM14D,KAAYi5D,EAGtBN,EAAmB55D,IAAIiB,EAAU+4D,QAGlCJ,EAAmB55D,IAAI+5D,EAAoBC,EAC5C,GACC,EAQJ,SAASz/B,GAAUt5B,GAClB,OAAK+rC,GAAyB/rC,GAIvBkpD,KAAiBrC,YAAY7mD,EAAU,CAAEqmD,UAAU,IAHlDrmD,CAIT,CAEAxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAxJQ,CACZC,IAAK,gECrBN,MAAM02D,GAAcC,GAAsCngC,QAMpDv9B,GAAW,+BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWojE,GAAQ,qCAAAvmE,OAA0CumE,KAQxD7nE,GAAQ2E,GACN,CAACE,EAAMrL,KAGb,IAFqB4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,IAGhE,OAID,MAAMmjE,EAAU,CAAA,EAEhBjjE,EAAKmB,YAAY,aAAcT,IAC9B,MAAOwiE,KAAeC,GAAc/iE,EAAYM,EAAOC,QAAQtM,MAE/D,IAAK6uE,EACJ,OAID,MAAME,EACe,aAApBF,EAAWruE,MAA4C,QAArBquE,EAAW9tE,OAAmB8tE,EAAW7uE,MAAM,GAC9E6uE,EAAW7uE,MAAM,GAAGe,MACpB8tE,EAAW9tE,MAGTiuE,GAASnM,GAAY92D,EAAY1K,UAAUytE,IAAa9uE,OAAS,IACrEoW,KAAKiG,GAAMA,EAAEtb,MAAMyG,QAAQ,MAAO,MAClCqrB,QAAQxW,GAAMA,EAAE9b,SAElB,IAAI0uE,EAAeL,EAAQG,IACPC,EAAMzuE,OACvByuE,EAAMn6D,MAAM8V,GAAMskD,GAAgBA,EAAaroE,SAAS+jB,KACxDskD,GAGF/pE,EAAO,CACNG,QAASyC,GAASyD,SAASwjE,GAC3B1uE,KAAMgM,EACN/L,kBACA8E,GACAM,KAAM2G,EAAOjJ,cAMV6rE,IACJA,EAAeL,EAAQG,GAAO,IAG/BE,EAAapsE,QAAQmsE,GAAM,GAC1B,EAIJloE,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA9DQ,CACZC,IAAK,sECJN,MAAM/G,GAAW,qCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,6CAQLzE,GAAO,CAAC2E,EAAS1G,IACf,CAAC4G,EAAMrL,KAcb,IAbqB4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQ5F,EACR2F,SAAU,CACTmF,cAAe,CAAC3G,EAAUD,IAE3B2B,UAAU,IAKX,OAGD,IAAIskE,GAAkB,EAEtBvjE,EAAK5L,MAAMM,IACV,MAAM8uE,EAAY,SAAU9uE,GAAQA,EAAKqC,MAAQrC,EAAKqC,KAAKsK,eAAkB,GAG3EiC,GAAS5O,IACI,YAAb8uE,GACa,WAAbA,GACa,UAAbA,IACCrqE,EAAeC,EAAS,gBAAiB1E,EAAKqC,OAC/C0J,EAAuB/L,IACT,SAAdA,EAAKG,MAAmB2jE,GAAqB9jE,GAE9C6uE,GAAkB,EAKfjgE,GAAS5O,IAAsB,WAAb8uE,GAAyBD,GAC9ChqE,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,OACAC,kBACA8E,GACAM,KAAMrF,EAAK+C,YAEb,GACC,EAIJ0D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA1DQ,CACZC,IAAK,4ECPN,MAAM/G,GAAW,sBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,0BACVnB,SAAU,4BASLzE,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAwBb,SAASoV,EAAMrV,EAAMU,GAEpB,MAAMquE,EAAoB,GAEpBC,EAAqB,GAG3B,GAAKtuE,EAAM6F,SAAS,KAApB,CAyEA,GArEAmF,EAAYhL,GAAOhB,MAAM02B,IAExB,GAAuB,aAAnBA,EAAUj2B,MAAyD,QAAlCi2B,EAAU11B,MAAMiM,cACpD,OAAO,EAIR,GAAuB,SAAnBypB,EAAUj2B,KAAd,CAKA,GAAgB,WAAZiL,EAAsB,CACzB,MAAMnH,EAAQ,kBAAkB+Y,KAAKoZ,EAAU11B,OAE/C,GAAa,MAATuD,GAA6B,MAAZA,EAAM,IAA0B,MAAZA,EAAM,GAC9C,OAMD,MAAMgrE,EAAsBhrE,EAAM,GAAG/D,OAAS+D,EAAM,GAAG/D,OAEjDiF,EAAQixB,EAAU3zB,YAAcwB,EAAMkB,MAAQ8pE,EAEpD,GAAI1iE,EAAQM,IAKX,YAJAmiE,EAAmBtgC,QAAQ,CAC1BvpC,UAMF,MAAM+pE,EAAYtgE,GAAS5O,GAAQya,GAAiBza,GAAQkY,GAAsBlY,GAElFkK,EAASzC,GAAS4E,SAAUrM,EAAMkvE,EAAY/pE,EAC/C,CAEA,GAAgB,UAAZiG,EAAqB,CACxB,MAAMnH,EAAQ,sBAAsB+Y,KAAKoZ,EAAU11B,OAEnD,GAAa,MAATuD,GAA6B,MAAZA,EAAM,IAA0B,MAAZA,EAAM,IAA0B,MAAZA,EAAM,GAClE,OAMD,MAAMgrE,EAAsBhrE,EAAM,GAAG/D,QAAU+D,EAAM,GAAG/D,OAAS+D,EAAM,GAAG/D,QAEpEiF,EAAQixB,EAAU3zB,YAAcwB,EAAMkB,MAAQ8pE,EAEpD,GAAI1iE,EAAQM,IAOX,YANAkiE,EAAkBrgC,QAAQ,CACzB3d,WAAY5rB,EAEZC,SAAUD,EAAQlB,EAAM,GAAG/D,SAM7B,MAAMgvE,EAAYtgE,GAAS5O,GAAQya,GAAiBza,GAAQkY,GAAsBlY,GAElFkK,EAASzC,GAASyD,SAAUlL,EAAMkvE,EAAY/pE,EAC/C,CAzDA,CAyDA,IAGG6pE,EAAmB9uE,OACtB,IAAK,MAAMivE,KAAeH,EAAoB,CAC7C,MAAM7pE,EAAQgqE,EAAYhqE,MAEtByJ,GAAS5O,GACZA,EAAKiM,OAASmjE,GAAepvE,EAAKiM,OAAQ9G,GAE1CnF,EAAKU,MAAQ0uE,GAAepvE,EAAKU,MAAOyE,EAE1C,CAGD,GAAI4pE,EAAkB7uE,OACrB,IAAK,MAAMivE,KAAeJ,EAAmB,CAC5C,MAAMh+C,EAAao+C,EAAYp+C,WACzB3rB,EAAW+pE,EAAY/pE,SAEzBwJ,GAAS5O,GACZA,EAAKiM,OAASojE,GAAmBrvE,EAAKiM,OAAQ8kB,EAAY3rB,GAE1DpF,EAAKU,MAAQ2uE,GAAmBrvE,EAAKU,MAAOqwB,EAAY3rB,EAE1D,CA7FD,CA+FD,CAOA,SAAS8E,EAASlF,EAAShF,EAAMmF,GAChCN,EAAO,CACN5E,kBACA8E,GACAC,UACAhF,OACAmF,SAEF,CA9IqB0E,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,aAOtBiB,EAAKmB,aAAaT,IACiB,WAA9BA,EAAO3J,KAAKsK,eAIhB0I,EAAMrJ,EAAQA,EAAOC,OAAO,IAG7BX,EAAKE,WAAWlI,GAAS+R,EAAM/R,EAAMA,EAAK5C,SA6H1C,EASF,SAAS0uE,GAAe7tE,EAAO4D,GAE9B,OAAO5D,EAAMe,MAAM,EAAG6C,GAAS,IAAM5D,EAAMe,MAAM6C,EAClD,CAQA,SAASkqE,GAAmB9tE,EAAOwvB,EAAY3rB,GAC9C,OAAO7D,EAAMe,MAAM,EAAGyuB,GAAcxvB,EAAMe,MAAM8C,EACjD,CAEAqB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhLQ,CACZC,IAAK,4DACLgB,SAAS,GCVV,MAAM/H,GAAW,sBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,+BAYX,SAASokE,GAAgBtvE,GAExB,GAAIA,EAAK+B,QAAU/B,EAAK+B,OAAOuhC,SAC9B,OAAO,EAGR,MAAMh4B,EAAOtL,EAAKsL,OAElB,IAAKA,EAAK6B,OAAQ,MAAM,IAAIrH,MAAM,oCAElC,IAAK9F,EAAKmN,OAAQ,MAAM,IAAIrH,MAAM,+BAElC,IAAK9F,EAAKmN,OAAOxH,MAAO,MAAM,IAAIG,MAAM,yCAExC,MAAM0H,EAASlC,EAAK6B,OAAO5L,MAAMq+B,IAC3B2vC,EAAavvE,EAAKmN,OAAOxH,MAAM27B,OAC/BkuC,EAAWxvE,EAAKmN,OAAOxH,MAAMT,KACnC,IAAIA,EAAO,EACPo8B,EAAS,EACTn8B,EAAQ,EAEZ,IAAK,IAAIrF,EAAI,EAAGA,EAAI0N,EAAOtN,OAAQJ,IAAK,CACvC,GAAIwhC,IAAWiuC,GAAcC,IAAatqE,EAAM,CAC/CC,EAAQrF,EACR,KACD,CAEkB,OAAd0N,EAAO1N,IACVwhC,EAAS,EACTp8B,GAAQ,GAERo8B,GAAU,CAEZ,CAEA,OAAOn8B,CACR,CAGA,MAAMsB,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAGb,GAFqB4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,IAEjE,CAIA,GAAIE,EAAK/H,KAAKxC,OAA2C,IAAlCuK,EAAK/H,KAAKxC,MAAM2c,OAAOxd,OAAc,CAC3D,MAAMuvE,EAAenkE,EAAK/H,KAAKxC,MAGzB2uE,EAAiB,GAEvB9gD,GAAY,CAAEzhB,OAAQsiE,EAAc5gD,OAAQ,MAAQ5qB,IACnD,GAAIsI,EAAQM,IACX6iE,EAAeltE,KAAKyB,EAAM8sB,gBAD3B,CAMA,IAAKzlB,EAAK6B,OAAQ,MAAM,IAAIrH,MAAM,oCAElCoE,EAASoB,EAAK6B,OAAO5L,MAAMq+B,IAAI1/B,OAASuvE,EAAavvE,OAAS+D,EAAM8sB,WAJpE,CAI+E,IAI5E2+C,EAAexvE,SAClBoL,EAAK/H,KAAKxC,MAAQ4uE,EAAcF,EAAcC,GAEhD,CAEApkE,EAAK5L,MAAMM,IACV,KAAI4O,GAAS5O,IAAU+L,EAAuB/L,MAI5B,SAAdA,EAAKG,MAAoB2jE,GAAqB9jE,IAAlD,CAIA,GAAIA,EAAKuD,KAAKzC,QAA6C,IAAnCd,EAAKuD,KAAKzC,OAAO4c,OAAOxd,OAAc,CAC7D,MAAM0vE,EAAgB5vE,EAAKuD,KAAKzC,OAC1B+uE,EAAc,EAEdC,EAAsB,EAGtBJ,EAAiB,GAEvB9gD,GAAY,CAAEzhB,OAAQyiE,EAAe/gD,OAAQ,MAAO,CAAC5qB,EAAOoU,KACvDA,IAAUw3D,IAIVtjE,EAAQM,IACX6iE,EAAeltE,KAAKyB,EAAM8sB,WAAa++C,GAKxC5lE,EAASolE,GAAgBtvE,GAAQ4vE,EAAc1vE,OAAS+D,EAAM8sB,YAAW,IAItE2+C,EAAexvE,SAClBF,EAAKuD,KAAKzC,OAAS6uE,EAAcC,EAAeF,GAElD,CAEA,GAA+B,iBAApB1vE,EAAKuD,KAAKxC,OAAwD,IAAlCf,EAAKuD,KAAKxC,MAAM2c,OAAOxd,OAAc,CAC/E,MAAM6vE,EAAe/vE,EAAKuD,KAAKxC,MAO/B,GACC,SAAUf,GACVA,EAAK2yB,MACc,WAAnB3yB,EAAK2yB,KAAKxyB,OACT4L,EAAuB/L,EAAK2yB,MAE7B,OAID,MAAM+8C,EAAiB,GAEvB9gD,GAAY,CAAEzhB,OAAQ4iE,EAAclhD,OAAQ,MAAQ5qB,IACnD,GAAIsI,EAAQM,IAGX,YAFA6iE,EAAeltE,KAAKyB,EAAM8sB,YAY3B7mB,EANColE,GAAgBtvE,GAChBA,EAAK+C,WAAW7C,OAChB,EACA6vE,EAAa7vE,OACb+D,EAAM8sB,WAEQ,IAIZ2+C,EAAexvE,SAClBF,EAAKuD,KAAKxC,MAAQ4uE,EAAcI,EAAcL,GAEhD,CAEA,GAAsC,iBAA3B1vE,EAAKuD,KAAKkgC,aAA2B,CAC/C,MAAMusC,EAAkBhwE,EAAKuD,KAAKkgC,aAC5BosC,EAAc,EAGdH,EAAiB,GAEvB9gD,GAAY,CAAEzhB,OAAQ6iE,EAAiBnhD,OAAQ,MAAO,CAAC5qB,EAAOoU,KAC7D,GAAIA,IAAUw3D,EACb,OAGD,GAAItjE,EAAQM,IAGX,YAFA6iE,EAAeltE,KAAKyB,EAAM8sB,YAW3B7mB,EALColE,GAAgBtvE,GAChBA,EAAK+C,WAAW7C,OAChB8vE,EAAgB9vE,OAChB+D,EAAM8sB,WAEQ,IAIZ2+C,EAAexvE,SAClBF,EAAKuD,KAAKkgC,aAAeksC,EAAcK,EAAiBN,GAE1D,CAzGA,CAyGA,GA1ID,CAgJA,SAASxlE,EAAS/E,GACjBN,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsL,EACNnG,QACAlF,SACA8E,SAAAA,IAEF,CAOA,SAAS4qE,EAAcr3D,EAAKgiD,GAC3B,IAAK,MAAMn1D,KAASm1D,EAAQ7rB,UAC3Bn2B,EAAMA,EAAIhW,MAAM,EAAG6C,GAASmT,EAAIhW,MAAM6C,EAAQ,GAG/C,OAAOmT,CACR,GAIF7R,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjOQ,CACZC,IAAK,4DACLgB,SAAS,GCZV,MAAM/H,GAAW,mCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,6CASLzE,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAGb,IAFqB4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,IAGhE,OAGD,GAAmB,MAAfE,EAAK6B,OACR,MAAM,IAAIrH,MAAM,6CAIjB,GAAIwF,EAAK6B,OAAO26B,QAA+B,mBAArBx8B,EAAK6B,OAAO6nB,KACrC,OAGD,MAAMkqC,EAAa3yD,EAAQM,IAAMvB,EAAKvI,WAAauI,EAAK6B,OAAO5L,MAAMq+B,IAEhEs/B,EAAWxhD,SAAUwhD,EAAWz/C,SAAS,QAK1ClT,EAAQM,IACXvB,EAAK/H,KAAKxC,MAAQwL,EAAQS,QAK3BnI,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsL,EACNnG,MAAO+5D,EAAWh/D,OAAS,EAC3BD,SACA8E,SAAAA,KACC,EAIJ0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhDQ,CACZC,IAAK,yEACLgB,SAAS,GCRV,MAAM/H,GAAW,mCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,wCAQLzE,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,MAMjEE,EAAKE,WAAWlI,IACXA,EAAK4P,KAAK1I,WAAW,OACxB3F,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsD,EACNrD,kBACA8E,GACAM,KAAM/B,EAAKP,YAEb,IAGDuI,EAAKqK,WAAW2c,IACf,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC3Bj8B,EAASzK,WAAW,OACvB3F,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsyB,EACNryB,kBACA8E,GACAM,KAAMitB,EAASvvB,YAGlB,IACC,EAIJ0D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA3CQ,CACZC,IAAK,0ECPN,MAAM/G,GAAW,sBACXkrE,GAAuB,aAEvBxoE,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,0BASLzE,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAIb,IAHqB4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,KAG5CE,EAAK6B,OAAO26B,QAA+B,mBAArBx8B,EAAK6B,OAAO6nB,KACtD,OAGD,MAAMkqC,EAAa3yD,EAAQM,IAAMvB,EAAKvI,WAAcuI,EAAK6B,QAAU7B,EAAK6B,OAAO5L,MAAMq+B,KAAQ,GAE7F,GAAKs/B,EAAWxhD,QAIZuyD,GAAqBrtE,KAAKs8D,GAAa,CAC1C,GAAI3yD,EAAQM,IAAK,CAChB,GAAkB,MAAdvB,EAAKyD,MACR,MAAM,IAAIjJ,MAAM,2CAGjB,GAA8B,MAA1BwF,EAAKyD,MAAMxL,KAAKzC,OACnB,MAAM,IAAIgF,MAAM,2CAKjB,YAFAwF,EAAKyD,MAAMxL,KAAKzC,OAASwK,EAAKyD,MAAMxL,KAAKzC,OAAOi9C,YAGjD,CAEAl5C,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsL,EACNrL,SACA8E,SAAAA,IAEF,GAIF0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhDQ,CACZC,IAAK,4DACLgB,SAAS,GCNV,MAAM/H,GAAW,wBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWglE,GAAa,sCAAAnoE,OAA2CmoE,EAAa,OAQ3EzpE,GAAQ2E,GACN,CAACE,EAAMrL,KAGb,IAFqB4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,IAGhE,OAGD,MAAM+kE,EAAqB,IAAIvmE,IAE/B0B,EAAKmB,YAAY,+BAAgCT,IAChDmkE,EAAmBh+C,IAAInmB,EAAOC,OAAO,IAGtCX,EAAKE,WAAWlI,IACf,GAAgC,cAA5BA,EAAK4P,KAAKvG,eAA6D,mBAA5BrJ,EAAK4P,KAAKvG,cAAoC,CAC5F,MAAMyjE,ECnBV,SAA4C1vE,GAE3C,MAAM0vE,EAAiB,GAEjB32C,EAAaC,EAAmBh5B,IAChCf,MAAEA,GAAU85B,EAGlB,GAAqB,IAAjB95B,EAAMO,QAAgBP,EAAM,IAAMq3B,GAAclsB,IAAInL,EAAM,GAAGe,MAAMiM,eACtE,MAAO,CAAChN,EAAM,IAGf,IAAI0wE,GAAkB,EA4CtB,OA1CA52C,EAAW/5B,MAAM02B,IAChB,GAAIi6C,EAAiB,OAErB,GAAuB,aAAnBj6C,EAAUj2B,KACb,OAAO,EAGR,GAAuB,SAAnBi2B,EAAUj2B,KACb,OAGD,MAAM25B,EAAiB1D,EAAU11B,MAAMiM,cAGvC,IAAKwO,GAAsB2e,GAK1B,OAHAu2C,GAAkB,OAClBD,EAAelwE,OAAS,GAMzB,GAAIm5B,GAAWS,GACd,OAID,GAAI1B,GAA2BttB,IAAIgvB,GAClC,OAID,MAAM92B,KAAEA,GAAS0yB,GAAaU,GAE1BpzB,GAAiB,KAATA,GAIZotE,EAAe5tE,KAAK4zB,EAAU,IAGxBg6C,CACP,CDtC0BE,CAAkBhtE,EAAK5C,OAE9C,GAA8B,IAA1B0vE,EAAelwE,OAClB,OAGD,IAAK,MAAMqwE,KAAqBH,EAAgB,CAC/C,GAAIt4C,GAAsBhtB,IAAIylE,EAAkB7vE,MAAMiM,eACrD,SAGD,GAAIwjE,EAAmBrlE,IAAIylE,EAAkB7vE,OAC5C,SAGD,MAAM8vE,EAAQt4D,GAAsB5U,GAEpCuB,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAASqlE,EAAkB7vE,OAC7CV,KAAMsD,EACN6B,MAAOqrE,EAAQD,EAAkB9tE,YACjC2C,SAAUorE,EAAQD,EAAkBhuE,gBAEtC,CACD,IACC,EAIJkE,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAtDQ,CACZC,IAAK,+DERN,MAAM/G,GAAW,gCAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAgB,IAAM,8BACtBT,wBAAyB,IAAM,uDAC/BC,wBAAyB,IAAM,8DAS1B3K,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,UAAWrF,EAAS3D,IAEtD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,oBAAqB,uBAO3C6rB,GAA0B,CACzB5qB,OACArL,SACA6P,gBAAiBkD,EAAQH,0BACzB5C,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACkpB,EAAK5wB,EAAOxF,IACbm2B,GAAM,CACLC,MACA5wB,QACAxF,QACA6M,YAAapB,EACb4qB,SAAU,SACVC,KAAM1pB,EAAQS,SAAW,KAE1B,MACF,CACF,EAGFvG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAzCQ,CACZC,IAAK,sEACLgB,SAAS,GCPV,MAAM/H,GAAW,wBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWwJ,GAAQ,wBAAA3M,OAA6B2M,EAAQ,OAQnDjO,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,MAOtB0C,EAAKE,WAAWlI,IACf,MAAM4P,EAAO5P,EAAK4P,KAEb0Z,GAAyB1Z,KAI1BwZ,GAAiBxZ,IAKjBzP,EAAsB,CAACyP,EAAMG,GAAkBH,IAAQ9H,IAI3DvG,EAAO,CACNG,QAASyC,GAASyD,SAASgI,GAC3B7N,KAAM6N,EACNlT,KAAMsD,EACNrD,SACA8E,SAAAA,KACC,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA/CQ,CACZC,IAAK,+DCPN,MAAM/G,GAAW,2BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,gCASLzE,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAqBb,SAASoV,EAAMrV,EAAMU,GAEpB,MAAM+vE,EAAe,GAGrB,GAAK/vE,EAAM6F,SAAS,OAIpBmF,EAAYhL,GAAOhB,MAAM02B,IAExB,GAAuB,aAAnBA,EAAUj2B,MAAyD,QAAlCi2B,EAAU11B,MAAMiM,cACpD,OAAO,EAIR,GAAuB,SAAnBypB,EAAUj2B,KACb,OAGD,MAAM8D,EAAQ,6BAA6B+Y,KAAKoZ,EAAU11B,OAI1D,GAAa,MAATuD,GAA6B,MAAZA,EAAM,IAA0B,MAAZA,EAAM,GAC9C,OAQD,MAAMkB,EAAQixB,EAAU3zB,YAAcwB,EAAMkB,MAAQ,EAAIlB,EAAM,GAAG/D,OAK3D6wB,EAAa9sB,EAAM,GAAG/D,OAAS,EAAIiF,EAAQA,EAAQ,EAGnDC,EAAWD,EAAQlB,EAAM,GAAG/D,OAElC,GAAIqM,EAAQM,IAMX,YALA4jE,EAAa/hC,QAAQ,CACpB3d,aACA3rB,aAMF,MAAM8pE,EAAYtgE,GAAS5O,GAAQya,GAAiBza,GAAQkY,GAAsBlY,GAElF6E,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,OAEAmF,MAAO+pE,EAAY/pE,EACnBlF,SACA8E,SAAAA,IACC,IAGC0rE,EAAavwE,QAChB,IAAK,MAAMivE,KAAesB,EAAc,CACvC,MAAM1/C,EAAao+C,EAAYp+C,WACzB3rB,EAAW+pE,EAAY/pE,SAEzBwJ,GAAS5O,GACZA,EAAKiM,OAASykE,GAAoB1wE,EAAKiM,OAAQ8kB,EAAY3rB,GAE3DpF,EAAKU,MAAQgwE,GAAoB1wE,EAAKU,MAAOqwB,EAAY3rB,EAE3D,CAEF,CAhGqByE,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,MAMjEE,EAAKmB,aAAaT,IACiB,WAA9BA,EAAO3J,KAAKsK,eAIhB0I,EAAMrJ,EAAQA,EAAOC,OAAO,IAG7BX,EAAKE,WAAWlI,GAAS+R,EAAM/R,EAAMA,EAAK5C,SAkF1C,EAUF,SAASgwE,GAAoBnvE,EAAOwvB,EAAY3rB,GAC/C,OAAO7D,EAAMe,MAAM,EAAGyuB,GAAcxvB,EAAMe,MAAM8C,EACjD,CAEAqB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAxHQ,CACZC,IAAK,iEACLgB,SAAS,GCTV,MAAM/H,GAAW,4BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWwJ,GAAQ,6BAAA3M,OAAkC2M,EAAQ,OASxDjO,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCb,UAAU,EACVD,OAAQe,EACRhB,SAAU,CACT2gB,iBAAkB,CAACniB,EAAUD,OAShC0C,EAAKE,WAAWlI,IACf,MAAM4P,EAAO5P,EAAK4P,KACZ4a,EAAiBza,GAAkBH,GAGrCzO,EAAe4G,EAAkB,mBAAoByiB,IAOzC,MAAZ5a,EAAK,IAA0B,MAAZA,EAAK,I/QwP7B,SAMQW,GACR,MAAM88D,EAAQ98D,EAAWlH,cAIzB,MAAc,2BAAVgkE,GAIgC,IAAhCt9D,GAAcs9D,GAAOzwE,QAIlBuT,GAAW3I,IAAIuI,GAAkBs9D,GACzC,C+QxQO78D,CAA0BZ,KAI3B3G,EAAQM,IACXvJ,EAAK4P,KAAOY,GAA0BxQ,EAAK4P,MAK5CrO,EAAO,CACNG,QAASyC,GAASyD,SAASgI,GAC3B7N,KAAM6N,EACNlT,KAAMsD,EACNrD,SACA8E,SAAAA,KACC,GACD,EAIJ0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhEQ,CACZC,IAAK,kEACLgB,SAAS,GCPV,MAAM/H,GAAW,2BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWwJ,GAAQ,wBAAA3M,OAA6B2M,EAAQ,OAQnDjO,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,MAOtB0C,EAAKE,WAAWlI,IACf,MAAM4P,EAAO5P,EAAK4P,KAEb0Z,GAAyB1Z,KAI1BwZ,GAAiBxZ,IAKhBzP,EAAsB,CAACyP,EAAMG,GAAkBH,IAAQ9H,IAI5DvG,EAAO,CACNG,QAASyC,GAASyD,SAASgI,GAC3B7N,KAAM6N,EACNlT,KAAMsD,EACNrD,SACA8E,SAAAA,KACC,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA/CQ,CACZC,IAAK,kECPN,MAAM/G,GAAW,gBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC/B,EAAQ+B,IAA0B/B,aAAAA,OAAAA,sBAAkB+B,EAAQ,OASlE5F,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAAC,QAAS,UAErB,CACCC,OAAQe,EACRhB,SAAU,CACTsqB,gBAAiB,CAAC9rB,EAAUD,IAE7B2B,UAAU,KAQZe,EAAKE,WAAWlI,IACf,MAAM4P,EAAO5P,EAAK4P,KAElB,IAAK0Z,GAAyB1Z,GAC7B,OAGD,GAAIwZ,GAAiBxZ,GACpB,OAGD,MAAMnR,OAAEA,GAAWuB,EAEnB,IAAKvB,EAAQ,MAAM,IAAI+D,MAAM,iCAE7B,GAAIkP,GAAOjT,GAAS,CACnB,MAAMkT,SAAEA,GAAalT,EAErB,GAAIkT,GAAYxQ,EAAe4G,EAAkB,kBAAmB4J,GACnE,MAEF,CAEA,MAAM27D,EAA2B,UAAZxlE,EAAsB8H,EAAKvG,cAAgBuG,EAAKtG,cAEjEsG,IAAS09D,IAITrkE,EAAQM,IACXvJ,EAAK4P,KAAO09D,EAKb/rE,EAAO,CACNG,QAASyC,GAAS4E,SAAS6G,EAAM09D,GACjCvrE,KAAM6N,EACNlT,KAAMsD,WACNyB,GACA9E,WACC,GACD,EAIJwG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5EQ,CACZC,IAAK,sDACLgB,SAAS,GCXV,MAAM/H,GAAW,6BAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAe,IAAM,kCACrBK,cAAe,IAAM,kCACrBpB,wBAAyB,IAAM,4DAC/BC,wBAAyB,IAAM,8DAS1B/K,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,QAAS,qBAAsB,wBAOrD6rB,GAA0B,CACzB5qB,OACArL,SACA6P,gBAAiBkD,EAAQjS,MACzBkP,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACkpB,EAAK5wB,EAAOxF,IACbm2B,GAAM,CACLC,MACA5wB,QACAxF,QACA6M,YAAapB,EACb4qB,SAAU,QACVC,KAAM,MAEP,MACF,CACF,EAGFxvB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAzCQ,CACZC,IAAK,mEACLgB,SAAS,GCnBV,MAAqB+jE,sqvBCcf9rE,GAAW,sBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWwJ,GAAQ,gCAAA3M,OAAqC2M,EAAQ,OAQ3DjO,GAAO,CAAC2E,EAASC,KACtB,MAAMylE,EAAqB,IAAIlnE,IAAImnE,IAEnC,MAAO,CAACzlE,EAAMrL,KAiBb,IAhBqB4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQe,EACRhB,SAAU,CACT2gB,iBAAkB,CAACniB,EAAUD,GAC7BooE,cAAe,CAACxoE,GAChBmsB,gBAAiB,CAAC9rB,EAAUD,GAC5B4G,cAAe,CAAC3G,EAAUD,IAE3B2B,UAAU,IAKX,OAGD,MAAM0mE,EAAsB5lE,GAAoBA,EAAiB2lE,cAEjE1lE,EAAKE,WAKL,SAAwBlI,GACvB,MAAM4P,EAAO5P,EAAK4P,KAElB,IAAK0Z,GAAyB1Z,GAC7B,OAGD,IAAK6hB,GAA4BzxB,GAChC,OAGD,GAAIopB,GAAiBxZ,GACpB,OAGD,IAAK+9D,GAAuB59D,GAAcH,GACzC,OAGD,GAAIzO,EAAe4G,EAAkB,mBAAoB6H,GACxD,OAGD,MAAMnR,EAASuB,EAAKvB,OAEpB,GACCA,GACAiT,GAAOjT,IACP0C,EAAe4G,EAAkB,kBAAmBtJ,EAAOkT,UAE3D,OAID,IAAIjV,EAAO+B,EAEX,KAAO/B,GAAsB,SAAdA,EAAKG,MAAiB,CACpC,GAAIyO,GAAS5O,IAASyE,EAAe4G,EAAkB,gBAAiBrL,EAAKqC,MAC5E,OAGDrC,EAAOA,EAAK+B,MACb,CAEA,GAAI+uE,EAAmBhmE,IAAIoI,EAAKvG,eAC/B,OAGD9H,EAAO,CACNG,QAASyC,GAASyD,SAASgI,GAC3BlT,KAAMsD,EACNrD,kBACA8E,GACAM,KAAM6N,GAER,IACA,EAGFzM,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjGQ,CACZC,IAAK,6DCXN,MAAM/G,GAAW,0CAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW7I,GAAI,oBAAA0F,OAAyB1F,EAAI,OAQvCoE,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,MAOtB0C,EAAKqK,WAAW2c,IACVwxC,GAAqBxxC,IAIrBA,EAASrd,SAAS1O,SAAS,MAIhC4jE,GAAc73C,EAASrd,SAAUhV,EAAQqyB,GAAW4+C,IACnDA,EAAa5oB,gBAAgB6oB,IAC5B,MAAMC,EAAgBD,EAAcE,mBAEpC,IAAK5tE,EAAsB2tE,EAAehmE,GACzC,OAGD,MAAMjG,EAAQgsE,EAAc1uE,YAAc0uE,EAAc7iB,SAAS,aAC3DlpD,EAAWD,EAAQisE,EAAclxE,OAEvC2E,EAAO,CACNG,QAASyC,GAASyD,SAASkmE,GAC3BpxE,KAAMsyB,EACNntB,QACAC,WACAnF,SACA8E,SAAAA,IACC,GACD,GACD,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAtDQ,CACZC,IAAK,iFCRN,MAAM/G,GAAW,2CAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW8tC,GAAQ,wBAAAjxC,OAA6BixC,EAAQ,OAQnDvyC,GAAQ2E,GACN,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,KAIX,OAGD,MAAMuK,EAAgB,IAAIxJ,IAAI,CAACwB,GAASV,QAExCY,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,SAAEA,GAAaqd,EAEhBrd,EAAS1O,SAAS,MAAS0O,EAAS1O,SAAS,MAIlD4jE,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAa5oB,gBAAgB6oB,IAC5B,MAAMn4B,SAAEA,GAAam4B,EAErB,IAAKn4B,GAAY5lC,EAActI,IAAIkuC,GAClC,OAGD,MAAM7zC,EAAQgsE,EAAc1uE,YAAc0uE,EAAc7iB,SAAS,YAC3DlpD,EAAWD,EAAQ6zC,EAAS94C,OAElC2E,EAAO,CACNG,QAASyC,GAASyD,SAAS8tC,GAC3Bh5C,KAAMsyB,EACNntB,QACAC,WACAnF,SACA8E,SAAAA,IACC,GACD,GACD,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA1DQ,CACZC,IAAK,kFCAN,MAAM/G,GAAW,yBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,kCACVnB,SAAU,sCASLzE,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KAwBb,IAvBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAAC,SAAU,QAAS,oBAAqB,qBAEpD,CACCC,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,gBAAiB,eAAgB,gBAC1CD,OAAQ,CACP,aACA,4BACA,eACA,8BACA,iBAGF/E,UAAU,IAKX,OAGD,MAAMiC,EAAqCpB,EAE3CE,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAID,GAAIljB,GAAkBkjB,GACrB,OAID,GAAI7tB,EAAe4G,EAAkB,SAAU,iBAAkB,CAChE,MAAM0uB,EAAWzH,EAAS7wB,OAE1B,GAAIs4B,GAA8B,YAAlBA,EAAS55B,KACxB,MAEF,CAGA,GAAIsE,EAAe4G,EAAkB,SAAU,iBAAmByD,GAAcwjB,GAC/E,OAGD,MAAM7iB,EAAW6iB,EAASvwB,QAAmC,SAAzBuwB,EAASvwB,OAAO5B,KAGpD,GAAIsE,EAAe4G,EAAkB,SAAU,iBAAmBoE,EACjE,OAID,GAAIjD,EAAYjG,SAAS,eAAiB+J,GAAmBgiB,EAASvvB,YACrE,OAGD,IAAI4M,EAAwBnD,EAAYjG,SAAS,WAI/C9B,EAAe4G,EAAkB,SAAU,iBAAmByD,GAAcwjB,IAC5E7tB,EAAe4G,EAAkB,SAAU,eAAiBimE,GAAYh/C,IACxE7tB,EAAe4G,EAAkB,SAAU,gCAC3CoE,GACA6hE,GAAYh/C,IACZ7tB,EAAe4G,EAAkB,SAAU,8BClGhD,SAAkCrL,GACjC,MAAM+5B,EAAW/5B,EAAKyB,OAEtB,YACcd,IAAbo5B,GACkB,YAAlBA,EAAS55B,OACRgO,GAAoB4rB,IACrBA,EAAS5sB,QACT4sB,EAAS5sB,OAAOxH,OAChBo0B,EAAS5sB,OAAO9G,KAChB0zB,EAAS5sB,OAAOxH,MAAMT,OAAS60B,EAAS5sB,OAAO9G,IAAInB,IAErD,CDuFKqsE,CAAyBj/C,IACzB7tB,EAAe4G,EAAkB,SAAU,iBAAmBoE,KAE/DE,GAAyBA,GAM1B,GAAIA,IAHuBpC,GAAa+kB,EAAS/uB,KAAKzC,QAIrD,OAID,GAAIyL,EAAQM,IAAK,CAChB,MAAMG,EAAUT,EAAQS,QAExB,GAAuB,iBAAZA,EACV,MAAM,IAAIlH,MAAkDkH,4CAAAA,OAAAA,IAS7D,YANI2C,EACH5C,EAAmBulB,EAAUtlB,GAE7BqC,GAAuBijB,EAAUtlB,GAInC,CAEA,MAAMhI,EAAU2K,EAAwBlI,GAAS4E,SAAW5E,GAASyD,SAErErG,EAAO,CACNG,UACAhF,KAAMsyB,EACNryB,SACA8E,SAAAA,IACC,GACD,EAQJ,SAASusE,GAAYh/C,GACpB,MAAMyH,EAAW3sB,GAAoCklB,GAErD,OAAmB,MAAZyH,GAAsC,SAAlBA,EAAS55B,IACrC,CAEAsG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAzIQ,CACZC,IAAK,+DACLgB,SAAS,GEhBV,MAAM/H,GAAW,8CAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW8tC,GAAQ,wBAAAjxC,OAA6BixC,EAAQ,OAQnDvyC,GAAQ2E,GACN,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,KAIX,OAGD,MAAMuK,EAAgB,IAAIxJ,IAAI,CAACwB,GAASV,QAExCY,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,SAAEA,GAAaqd,EAEhBrd,EAAS1O,SAAS,MAAS0O,EAAS1O,SAAS,MAIlD4jE,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAa5oB,gBAAgB6oB,IAC5B,MAAMn4B,SAAEA,GAAam4B,EAErB,IAAKn4B,IAAa5lC,EAActI,IAAIkuC,GACnC,OAGD,MAAM7zC,EAAQgsE,EAAc1uE,YAAc0uE,EAAc7iB,SAAS,YAC3DlpD,EAAWD,EAAQ6zC,EAAS94C,OAElC2E,EAAO,CACNG,QAASyC,GAASyD,SAAS8tC,GAC3Bh5C,KAAMsyB,EACNntB,QACAC,WACAnF,SACA8E,SAAAA,IACC,GACD,GACD,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA1DQ,CACZC,IAAK,qFCNN,MAAM/G,GAAW,yCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,CAACwJ,EAAUO,IAAqCP,wBAAAA,OAAAA,6BAA2BO,EAAQ,OAQxFxO,GAAQ2E,GACN,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC+J,GAA6BvL,EAAUD,MAIlD,OAGD,MAAMsoC,EAAYrpC,OAAO4nB,KAAKrkB,GAE9BE,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMk/C,EAActgC,EAAUr8B,MAAMI,GACnCxR,EAAsB6uB,EAASrd,SAAUA,KAG1C,IAAKu8D,EACJ,OAGD,MAAMC,EAAuBrmE,EAAQomE,GAEhCC,GAILn/C,EAAS9mB,WAAWlI,IACnB,MAAM4P,KAAEA,GAAS5P,EAEbG,EAAsByP,EAAMu+D,IAC/B5sE,EAAO,CACNG,QAASyC,GAASyD,SAASgI,EAAMof,EAASrd,UAC1CjV,KAAMsD,EACNrD,kBACA8E,GACAM,KAAM6N,GAER,GACC,GACD,EAIJzM,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA1DQ,CACZC,IAAK,gFCCN,IAAA4lE,GAAA,SAAgEhtE,GAC/DA,EAAQ4G,KAAKqK,WAAWlP,IACvB,IAAKq9D,GAAqBr9D,GACzB,OAGD,IAAKA,EAAKwO,SAAS1O,SAAS,OAASE,EAAKwO,SAAS1O,SAAS,KAC3D,OAGD,IAAI4vB,GAAW,EACf,MAAMlhB,EAAWxO,EAAKlD,KAAK0R,SAAWxO,EAAKlD,KAAK0R,SAASzR,IAAMiD,EAAKwO,SAE9DmpD,EAAgB+L,GAAcl1D,EAAUvQ,EAAQzE,OAAQwG,GAAOyqE,IACpEA,EAAa5oB,gBAAgB6oB,IAC5B,MAAMn4B,EAAWm4B,EAAcn4B,SAE/B,IAAKA,EACJ,OAGD,MAAM24B,EAAsBR,EAAcpuE,WAE1C6rB,GAAY,CAAEzhB,OAAQwkE,EAAqB9iD,OAAQmqB,IAAa/0C,IAC/D,MAAMkB,EAAQT,EAAQoiE,oBAAsB7iE,EAAM8sB,WAAa9sB,EAAMmB,SAAW,GAsBnF,SAAuB+H,EAAQhI,EAAOnF,EAAMmxE,EAAen4B,GAC1Dt0C,EAAQoL,gBAAgB,CACvB3C,SACAhI,QACA4K,IAAMyF,IACD9Q,EAAQmI,KAAOnI,EAAQmI,IAAIskE,GAC9Bh7C,GAAW,EAKZtxB,EAAO,CACNG,QAASwQ,EAAIrO,QACZzC,EAAQoiE,oBACL9tB,EAASjnC,OAAO,GAChBinC,EAASjnC,OAAOinC,EAAS94C,OAAS,GACrC84C,GAEDh5C,OACAmF,MAAOgsE,EAAc1uE,YAAc0C,EACnClF,OAAQyE,EAAQzE,OAChB8E,SAAUL,EAAQuL,iBACjB,GAGL,CA7CG2hE,CAAcD,EAAqBxsE,EAAOsB,EAAM0qE,EAAen4B,EAAS,GACvE,GACD,IAGC7iB,GAAYioC,IACV33D,EAAKlD,KAAK0R,SAGdxO,EAAKlD,KAAK0R,SAASzR,IAAM46D,EAFzB33D,EAAKwO,SAAWmpD,EAsClB,GAED,ECpFD,MAAMr5D,GAAW,2CAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAiBonC,GAA8CA,iCAAAA,OAAAA,EAAW,KAC1E5mC,eAAiB4mC,GAAQ,iCAAAjxC,OAAsCixC,EAAQ,OASlEvyC,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBqnE,GAAsC,CACrCpmE,OACArL,SACA6P,gBAAiBkD,EAAQlS,OACzBmP,gBAAiBlL,GACjB+hE,qBAAqB,EACrBj6D,IAAKN,EAAQM,IACTskE,IACD,MAAMU,EAAUV,EAAc5tE,KAAKyS,QAAUm7D,EAAc5tE,KAAKyS,OAAO84C,UACjEgjB,EAAeD,GAAWA,EAAQ9wE,OAGlCgxE,UAAEA,EAASC,aAAEA,GAAiBF,EACjC,CACAC,UAAWD,EACXE,aAAat+C,GACZm+C,EAAQ9wE,MAAQ2yB,CACjB,GAEA,CACAq+C,UACEZ,EAAcn7D,OAAO84C,WAAaqiB,EAAcn7D,OAAO84C,UAAU/tD,OAAU,GAC7EixE,aAAat+C,GACPy9C,EAAcn7D,OAAO84C,YAAWqiB,EAAcn7D,OAAO84C,UAAY,IAEtEqiB,EAAcn7D,OAAO84C,UAAU/tD,MAAQ2yB,CACxC,GAGH,MAAgB,WAAZtoB,GACH4mE,EAAaD,EAAU5qE,QAAQ,OAAQ,OAEhC,GAGQ,UAAZiE,IACH4mE,EAAaD,EAAU5qE,QAAQ,OAAQ,MAEhC,EAGI,EAEZ,MACF,CACF,EAGFV,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArEQ,CACZC,IAAK,iFACLgB,SAAS,GCPV,MAAM/H,GAAW,uBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW7I,GAAI,uBAAA0F,OAA4B1F,EAAI,OAQ1CoE,GAAQ2E,GACN,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,KAIX,OAGD,MAAMuK,EAAgB,CAAChI,GAASV,OAEhCY,EAAKmB,aAAaT,IACjB,MAAM3J,EAAO2J,EAAO3J,KAEf0J,EAAuBC,KAIxBoH,EAAc7M,SAAS8M,GAAkBhR,GAAMsK,gBAInD9H,EAAO,CACNG,QAASyC,GAASyD,SAAS7I,GAC3BrC,KAAMgM,EACN/L,kBACA8E,GACAM,gBAAUhD,KACT,GACD,EAIJoE,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5CQ,CACZC,IAAK,8DCRN,IAAAmmE,GAAA,SAAqDjyE,GAEpD,GAAkB,eAAdA,EAAKG,KACR,OAAO,EAIR,GAAIH,EAAKU,MAAM8J,WAAW,MAAQxK,EAAKU,MAAM+e,SAAS,KACrD,OAAO,EAIR,QAAoB9e,IAAhBX,EAAK+B,QAAwC,OAAhB/B,EAAK+B,OAAiB,CACtD,MAAMA,EAAS/B,EAAK+B,OAEpB,GAAI/B,IAAS+B,EAAOgN,MACnB,OAAO,EAGR,GAAI/O,IAAS+B,EAAO4wB,KACnB,OAAO,CAET,CAEA,OAAO,CACP,ECvBD,MAAM5tB,GAAW,sCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW2mD,GAAU,0BAAA9pD,OAA+B8pD,EAAU,OAQzDprD,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,MAOZyC,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAE1Bk1D,GAAcl1D,EAAUhV,EAAQqyB,GAAW4/C,IAC1CA,EAAaxpB,iBAAiBypB,IAC7B,IAAKF,GAA2BE,GAC/B,OAGD,MAAMzxE,MAAEA,GAAUyxE,EACZ/2D,EA2BX,SAA6B1a,GAC5B,OAAOA,EAAMyG,QAAQ,OAAQ,IAC9B,CA7B6BirE,CAAoB1xE,GAE5C,IAAK0K,EAAQ7E,SAAS6U,GACrB,OAGD,MAAQ3Y,YAAa0C,EAAK5B,KAAEA,GAAS4uE,EAC/B/sE,EAAWD,GAAU5B,GAAQA,EAAK7C,OAAUA,GAAOR,OAEzD2E,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAASkQ,GAC3Bpb,KAAMsyB,EACNntB,QACAC,YACC,GACD,GACD,GACD,EAYJqB,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjEQ,CACZC,IAAK,6ECVN,MAAM/G,GAAW,0CAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAgB0mC,GAA6CA,gCAAAA,OAAAA,EAAW,KACxErmC,cAAgBqmC,GAAQ,gCAAAjxC,OAAqCixC,EAAQ,OAShEvyC,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KACb,MAAM+S,EAAUvC,GAAkB,QAASrF,EAAS3D,IAC/BoC,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBqnE,GAAsC,CACrCpmE,OACArL,SACA6P,gBAAiBkD,EAAQjS,MACzBkP,gBAAiBlL,GACjB+hE,qBAAqB,EACrBj6D,IAAKN,EAAQM,IACTskE,IAED,MAAMkB,cAAEA,EAAaC,iBAAEA,GAAqB,MAC3C,MAAMC,EAAcpB,EAAc5tE,KAAKy1C,SAEvC,GAAIu5B,EACH,MAAO,CACNF,cAAeE,EAAYjwE,MAC1B6uE,EAAcn4B,SAAWm4B,EAAcn4B,SAAS94C,OAAS,GAE1DoyE,iBAAiB5+C,UACTy9C,EAAc5tE,KAAKy1C,SAErBm4B,EAAc5tE,KAAKyS,SAAQm7D,EAAc5tE,KAAKyS,OAAS,IAEvDm7D,EAAc5tE,KAAKyS,OAAOgjC,WAC9Bm4B,EAAc5tE,KAAKyS,OAAOgjC,SAAW,IAEtCm4B,EAAc5tE,KAAKyS,OAAOgjC,SAASj4C,MAAQ2yB,CAC5C,GAIF,MAAM8+C,EACLrB,EAAc5tE,KAAKyS,QAAUm7D,EAAc5tE,KAAKyS,OAAOgjC,SAClDy5B,EAAmBD,GAAqBA,EAAkBzxE,MAEhE,OAAI0xE,EACI,CACNJ,cAAeI,EACfH,iBAAiB5+C,GAChB8+C,EAAkBzxE,MAAQ2yB,CAC3B,GAIK,CACN2+C,cACElB,EAAcn7D,OAAOgjC,UAAYm4B,EAAcn7D,OAAOgjC,SAASj4C,OAAU,GAC3EuxE,iBAAiB5+C,GACXy9C,EAAcn7D,OAAOgjC,WAAUm4B,EAAcn7D,OAAOgjC,SAAW,IAEpEm4B,EAAcn7D,OAAOgjC,SAASj4C,MAAQ2yB,CACvC,EAED,EA3C2C,GA6C5C,MAAgB,WAAZtoB,GACHknE,EAAiBD,EAAclrE,QAAQ,OAAQ,OAExC,GAGQ,UAAZiE,IACHknE,EAAiBD,EAAclrE,QAAQ,OAAQ,MAExC,EAGI,EAEZ,MACF,EAIJV,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA7FQ,CACZC,IAAK,gFACLgB,SAAS,GCPV,MAAM/H,GAAW,mDAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWwJ,GAAQ,yBAAA3M,OAA8B2M,EAAQ,OAQpDjO,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,KAMjE0hB,GAAqBxhB,GAAOsiB,IAC3B,MAAMX,EAAQ,IAAIrjB,IAElBgkB,GAAUtqB,IACT,MAAM4P,EAAO5P,EAAK4P,KAElB,IAAK0Z,GAAyB1Z,GAC7B,OAGD,IAAKwZ,GAAiBxZ,GACrB,OAGmB+Z,EAAMniB,IAAIoI,GAG7BrO,EAAO,CACNG,QAASyC,GAASyD,SAASgI,GAC3BlT,KAAMsD,EACNrD,kBACA8E,GACAM,KAAM6N,IAMR+Z,EAAMkF,IAAIjf,EAAK,GACd,GACD,EAIJzM,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjDQ,CACZC,IAAK,0FCIN,IAAA4mE,GAAA,SAAyDtoE,GACxD,IAAI+rB,EAEJ/rB,EAAKkB,KAAKqK,WAAWlP,IACpB,IAAKq9D,GAAqBr9D,GACzB,OAGD0vB,GAAW,EACX,MAAMlhB,EAAWxO,EAAKlD,KAAK0R,SAAWxO,EAAKlD,KAAK0R,SAASzR,IAAMiD,EAAKwO,SAE9DmpD,EAAgB+L,GAAcl1D,EAAU7K,EAAKnK,OAAQwG,GAAOyqE,IACjEA,EAAaxoB,iBAAiB1oD,IAE7B,IAAKiyE,GAA2BjyE,GAC/B,OAID,GAAI,KAAK4C,KAAK5C,EAAKU,OAClB,OAKD,GAA0B,WAAtB0J,EAAKuoE,eAA8B3yE,EAAKyB,OAC3C,OAGD,MAAMmxE,EAAmB5yE,EAAK+B,QAAU/B,EAAK+B,OAAOA,OAGpD,GAAI6wE,GAA8C,WAA1BA,EAAiBzyE,KACxC,OAGD,MAAMsC,EAAczC,EAAKyC,YACnB0C,EACLnF,EAAKU,MAAMR,OAAS,GAA2B,WAAtBkK,EAAKuoE,aAC3BlwE,EACAA,EAAczC,EAAKU,MAAMR,OAAS,GAsBzC,SAAeiN,EAAQ0kD,EAAY1sD,EAAOnF,EAAMyC,GAC/C2H,EAAK0F,gBAAgB,CACpB3C,SACAhI,QACA+K,UAAW2hD,EAAWnxD,MACtBqP,IAAM/K,IACDoF,EAAKyC,KAAOzC,EAAKyC,IAAIglD,GACxB17B,GAAW,EAKZtxB,EAAO,CACNG,UACAhF,OACAmF,MAAO1C,EACPxC,OAAQmK,EAAKnK,OACb8E,SAAUqF,EAAK6F,iBACd,GAGL,CAzCGoF,CAAMJ,EAAUjV,EAAMmF,EAAOsB,EAAMhE,EAAY,GAC9C,IAGC0zB,GAAYioC,IACV33D,EAAKlD,KAAK0R,SAGdxO,EAAKlD,KAAK0R,SAASzR,IAAM46D,EAFzB33D,EAAKwO,SAAWmpD,EAIlB,GAgCD,ECjGD,MAAMr5D,GAAW,mCAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAiBigD,GAAgDA,iCAAAA,OAAAA,EAAa,KAC9Ez/C,eAAiBy/C,GAAU,iCAAA9pD,OAAsC8pD,EAAU,OAStEprD,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBqoE,GAA+B,CAC9BpnE,OACArL,SACA6P,gBAAiBkD,EAAQlS,OACzB6xE,aAAc,SACd1iE,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACTglD,GACe,WAAZzmD,GACHymD,EAAW77C,OAAOlV,OAAS,KAEpB,GAGQ,UAAZsK,IACHymD,EAAW77C,OAAOlV,OAAS,IAEpB,GAKR,MACF,CACF,EAGF2F,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhDQ,CACZC,IAAK,yEACLgB,SAAS,GCNV,MAAM/H,GAAW,mCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW2mD,GAAU,0BAAA9pD,OAA+B8pD,EAAU,OAQzDprD,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,MAOZyC,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAE1Bk1D,GAAcl1D,EAAUhV,EAAQqyB,GAAW4/C,IAC1CA,EAAaxpB,iBAAiBypB,IAC7B,IAAKF,GAA2BE,GAC/B,OAGD,MAAMzxE,MAAEA,GAAUyxE,EACZ/2D,EA2BX,SAA6B1a,GAC5B,OAAOA,EAAMyG,QAAQ,OAAQ,IAC9B,CA7B6BirE,CAAoB1xE,GAE5C,GAAI0K,EAAQ7E,SAAS6U,GACpB,OAGD,MAAQ3Y,YAAa0C,EAAK5B,KAAEA,GAAS4uE,EAC/B/sE,EAAWD,GAAU5B,GAAQA,EAAK7C,OAAUA,GAAOR,OAEzD2E,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAASkQ,GAC3Bpb,KAAMsyB,EACNntB,QACAC,YACC,GACD,GACD,GACD,EAYJqB,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjEQ,CACZC,IAAK,0ECVN,MAAM/G,GAAW,kCAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAgBu/C,GAA+CA,gCAAAA,OAAAA,EAAa,KAC5El/C,cAAgBk/C,GAAU,gCAAA9pD,OAAqC8pD,EAAU,OASpEprD,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBqoE,GAA+B,CAC9BpnE,OACArL,SACA6P,gBAAiBkD,EAAQjS,MACzB4xE,aAAc,QACd1iE,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACTglD,GACe,WAAZzmD,GACHymD,EAAW77C,OAAOjV,MAAQ,KAEnB,GAGQ,UAAZqK,IACHymD,EAAW77C,OAAOjV,MAAQ,IAEnB,GAKR,MACF,CACF,EAGF0F,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhDQ,CACZC,IAAK,wEACLgB,SAAS,GCPV,MAAM/H,GAAW,4BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAW3L,GAAqCA,2BAAAA,OAAAA,EAAQ,KACxDwK,SAAWxK,GAAK,6BAAAqH,OAAkCrH,EAAK,OAWlD+F,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBiB,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,SAAEA,GAAaqd,EA4CrB,SAASpoB,EAASlF,EAAS6tE,GAC1B,MAAM1tE,EAAQ0tE,EAASpwE,YAAcowE,EAASvkB,SAAS,SAEjDlpD,EAAWD,GADH0tE,EAAStvE,KAAK7C,OAASmyE,EAASnyE,OAAS,IACxBR,OAE/B2E,EAAO,CACNG,UACAG,QACAC,WACAnF,kBACA8E,GACA/E,KAAMsyB,GAER,CAvDKrd,EAAS1O,SAAS,MAAS0O,EAAS1O,SAAS,MAIlD4jE,GCxCH,SAA0C73C,GACzC,MAAM/uB,EAAO+uB,EAAS/uB,KAEtB,OAAQA,EAAK0R,UAAY1R,EAAK0R,SAASzR,KAAQ8uB,EAASrd,QACxD,CDoCgB69D,CAAgBxgD,GAAWryB,EAAQqyB,GAAW4+C,IAC3D,IAAI6B,GAAgB,EAEpB7B,EAAa5oB,gBAAgB6oB,IAC5B,MAAMn4B,SAAEA,EAAQt4C,MAAEA,EAAKkuD,OAAEA,GAAWuiB,EAE/Bn4B,GAAat4C,IAIbkuD,GAAsB,WAAZxjD,IACVmB,EAAQM,KACXkmE,GAAgB,EAChB5B,EAAcxkB,UAtCK,KAwCnBziD,EAASzC,GAAS4E,SAAS3L,GAAQywE,IAIjCviB,GAAsB,UAAZxjD,IACTmB,EAAQM,KACXkmE,GAAgB,EAChB5B,EAAcxkB,UAAY,MAE1BziD,EAASzC,GAASyD,SAASxK,GAAQywE,IAErC,IAGG4B,IACHzgD,EAASrd,SAAWi8D,EAAanuE,WAClC,GAoBD,GACC,EAIJ0D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAxFQ,CACZC,IAAK,kEACLgB,SAAS,GEFV,IAAAkmE,GAAA,SAA6D5oE,GAC5DA,EAAKkB,KAAKqK,WAAWlP,IACpB,IAAKq9D,GAAqBr9D,GACzB,OAGD,MAAMwO,EAAWxO,EAAKlD,KAAK0R,SAAWxO,EAAKlD,KAAK0R,SAASzR,IAAMiD,EAAKwO,SAEpE2Z,GACC,CACCzhB,OAAQ8H,EACR4Z,OAAQ,IACRQ,kBAAmB,SAEnBprB,KAWH,SAAwBkJ,EAAQhI,EAAOnF,GACtCoK,EAAK0F,gBAAgB,CACpB3C,SACAhI,QACA4K,IAAM/K,IACDoF,EAAKyC,KAAOzC,EAAKyC,IAAI7M,EAAMmF,IAI/BN,EAAO,CACNG,UACAhF,OACAmF,QACAlF,OAAQmK,EAAKnK,OACb8E,SAAUqF,EAAK6F,iBACd,GAGL,CA5BGgjE,CAAeh+D,EAAUhR,EAAM8sB,WAAYtqB,EAAK,GAEjD,GA2BF,ECrDD,MAAM1B,GAAW,qCAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAgB,IAAM,8BACtBT,wBAAyB,IAAM,mDAC/BC,wBAAyB,IAAM,0DAS1B3K,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,UAAWrF,EAAS3D,IAEtD,MAAO,CAAC6D,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,oBAAqB,sBAI1C,OAID,IAAIw6D,EAoBJ,GAlBAmO,GAAmC,CAClC1nE,OACArL,SACA6P,gBAAiBkD,EAAQH,0BACzB5C,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACylB,EAAUntB,KACX0/D,EAAUA,GAAW,IAAI/tD,IACzB,MAAMywD,EAAe1C,EAAQl3C,IAAI2E,IAAa,GAK9C,OAHAi1C,EAAa/kE,KAAK2C,GAClB0/D,EAAQ7wD,IAAIse,EAAUi1C,IAEf,CAAI,EAEX,OAGA1C,EACH,IAAK,MAAOvyC,EAAUi1C,KAAiB1C,EAAQ/8D,UAAW,CACzD,IAAImN,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAE9E,IAAK,MAAM9P,KAASoiE,EAAaj5C,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CACvD,IAAIirE,EAAiBj+D,EAAS3S,MAAM,EAAG6C,GACvC,MAAMguE,EAAgBl+D,EAAS3S,MAAM6C,GAErC,GAAIiG,EAAQZ,WAAW,UAAW,CACjC,MAAM2P,EAAa+4D,EAAex9D,OAAO,QAErCyE,GAAc,EACjB+4D,EACCA,EAAe5wE,MAAM,EAAG6X,GACxB5N,EAAQS,QACRkmE,EAAe5wE,MAAM6X,GAEtB+4D,GAAkB3mE,EAAQS,OAE5B,KAAuB,qBAAZ5B,IACV8nE,EAAiBA,EAAe/rE,QAAQ,OAAQ,KAGjD8N,EAAWi+D,EAAiBC,CAC7B,CAEI7gD,EAAS/uB,KAAK0R,SACjBqd,EAAS/uB,KAAK0R,SAASzR,IAAMyR,EAE7Bqd,EAASrd,SAAWA,CAEtB,CACD,CACA,EAGFxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA9EQ,CACZC,IAAK,2EACLgB,SAAS,GCRV,MAAM/H,GAAW,oCAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAe,IAAM,6BACrBb,uBAAwB,IAAM,kDAC9BC,uBAAwB,IAAM,yDASzBjL,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,UAAWrF,EAAS3D,IAEtD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,oBAAqB,uBAO3CiB,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAMD,MAAMrd,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAG1Em+D,EAAa,GA4CnB,GA1CAxkD,GACC,CACCzhB,OAAQ8H,EACR4Z,OAAQ,IACRQ,kBAAmB,SAEnBprB,IACA,MAAMovE,EAAYp+D,EAAS3S,MAAM2B,EAAMmB,UAIvC,GAAI,WAAWxC,KAAKywE,GACnB,OAID,MAAMC,EAAoB,WAAW1wE,KAAKywE,GACvCp+D,EAASvS,QAAQ,KAAMuB,EAAMmB,UAAY,EACzCnB,EAAM8sB,WAET/d,EAAQD,aAAa,CACpB5F,OAAQ8H,EACR9P,MAAOmuE,EACPvjE,IAAMC,IACDzD,EAAQM,IACXumE,EAAW5wE,KAAK8wE,EAAoB,GAKrCzuE,EAAO,CACNG,QAASgL,EACThQ,KAAMsyB,EACNntB,MAAOlB,EAAM8sB,WACb9wB,SACA8E,SAAAA,IACC,GAEF,IAIAquE,EAAWlzE,OAAQ,CACtB,IAAIk+D,EAAgBnpD,EAEpB,IAAK,MAAM9P,KAASiuE,EAAW9kD,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CACrD,MAAMirE,EAAiB9U,EAAc97D,MAAM,EAAG6C,GAC9C,IAAIguE,EAAgB/U,EAAc97D,MAAM6C,GAEpCiG,EAAQZ,WAAW,UACtB2oE,EAAgB5mE,EAAQS,QAAUmmE,EACxB/nE,EAAQZ,WAAW,sBAC7B2oE,EAAgBA,EAAchsE,QAAQ,OAAQ,KAG/Ci3D,EAAgB8U,EAAiBC,CAClC,CAEI7gD,EAAS/uB,KAAK0R,SACjBqd,EAAS/uB,KAAK0R,SAASzR,IAAM46D,EAE7B9rC,EAASrd,SAAWmpD,CAEtB,IACC,CACF,EAGF33D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAtGQ,CACZC,IAAK,0EACLgB,SAAS,GCLV,IAAAymE,GAAA,SAAyDvzE,GACxD,GAAkB,WAAdA,EAAKG,KAAmB,CAC3B,MAAMqzE,EAAuBxzE,EAAKU,MAAMiM,cAAcxF,QAAQ,KAAM,IAEpE,OACCmiE,GAAiCx+D,IAAI0oE,IACrCrK,GAAgCr+D,IAAI0oE,EAEtC,CAEA,OAAO,CACP,ECpBDC,GAAA,SAA+C/yE,GAC9C,OAAOiI,OAAO+qE,UAAUhzE,IAA2B,iBAAVA,GAAsBA,GAAS,CACxE,ECMD,MAAMqE,GAAW,yBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,eAAAgI,OACzC,IAARhI,EAAY,WAAa,eAStB0G,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAyBb,SAAS6+D,EAAcwL,EAAch4C,GACpC,MAAMja,EAAQiyD,EAAarjE,QAAO,CAAC0sE,EAAOz6D,MAElB,aAAnBA,EAAU/Y,MAAuBozE,GAA+Br6D,KACnE4lD,EAAc5lD,EAAWoZ,GAGH,cAAnBpZ,EAAU/Y,MAKVsE,EAAe4G,EAAkB,mBAAoB6N,EAAU41C,WAH3D6kB,EAQRA,GAAS,IAGP,GAEH,GAA0B,SAAtBrJ,EAAanqE,MAAyC,WAAtBmqE,EAAanqE,MAAqBkY,EAAQjN,EAAS,CACtF,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CAzDqBpL,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAUopE,IAEX,CACCnpE,OAAQe,EACRhB,SAAU,CACTupE,iBAAkB,CAAC/qE,EAAUD,IAE9B2B,UAAU,KA+CZe,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAI1B,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAC/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAWuhD,GAClD/U,EAAc+U,EAAWvhD,IAG5B,GACC,EAIJ7rB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KApFQ,CACZC,IAAK,gECfN,MAAM/G,GAAW,8CAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW4oE,GAAiB,eAAA/rE,OAAoB+rE,EAAiB,OAS5DrtE,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,KAOTE,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,IAAI6D,GAAW,EACf,MAAMlhB,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAIhF,GAAIA,EAAS1O,SAAS,MAAO,OAE7B,MAAM63D,EAAgB+L,GAAcl1D,EAAUhV,EAAQqyB,GAAW4/C,IAChEA,EAAaxpB,iBAAiBypB,IAC7B,GAA6B,MAAzBA,EAAezxE,MAClB,OAGD,MAAMA,EAAQyxE,EAAepvE,WAE7B,GACCrC,EAAM6F,SAAS,OACf7F,EAAM6F,SAAS,OACf7F,EAAM6F,SAAS,OACf7F,EAAM6F,SAAS,MACd,CACD,GAAIgG,EAAQM,KAAO,QAAQjK,KAAKlC,GAS/B,OARAy1B,GAAW,EAENg8C,EAAe5uE,OAAM4uE,EAAe5uE,KAAO,CAAA,GAEhD4uE,EAAe5uE,KAAK7C,MAAQ,IAC5ByxE,EAAehtB,eAAiBgtB,EAAehtB,eAAeh+C,QAAQ,OAAQ,SAC9EgrE,EAAe/sB,cAAgB+sB,EAAe/sB,cAAcj+C,QAAQ,OAAQ,KAK7EtC,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAASxK,GAC3BV,KAAMsyB,EACNntB,MAAOgtE,EAAe1vE,aAExB,IACC,IAGC0zB,GAAYioC,IACV9rC,EAAS/uB,KAAK0R,SAGlBqd,EAAS/uB,KAAK0R,SAASzR,IAAM46D,EAF7B9rC,EAASrd,SAAWmpD,EAItB,GACC,EAIJ33D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA9EQ,CACZC,IAAK,oFACLgB,SAAS,GCNV,MAAM/H,GAAW,2BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,wBAAAlN,OAA6BkN,EAAQ,OAQnDxO,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAkBb,IAjBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,IAEtB,CACC0B,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,gBACTwkE,UAAW,CAACvrE,IAEb+B,UAAU,IAKX,OAGD,MAAMypE,EAAoBvvE,EAAe4G,EAAkB,SAAU,gBAC/D0oE,EAAY1oE,GAAoBA,EAAiB0oE,UAEvDzoE,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAA1B,CAIA,GAAI0hD,EAAmB,CACtB,MAAMjyE,OAAEA,GAAWuwB,EAGnB,GAFsBvwB,GAA0B,SAAhBA,EAAO5B,KAGtC,MAEF,CAEA,GAAI4zE,EACHzhD,EAAS4e,UAAU9wB,SAASnL,IACvBxR,EAAsBwR,EAAU7J,IACnCvG,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAAS+J,GAC3BjV,KAAMsyB,EACNjtB,KAAM4P,GAER,QAEK,CACN,MAAMA,SAAEA,EAAQ1R,KAAEA,GAAS+uB,EAE3B,GAAI7uB,EAAsBwR,EAAU7J,GAAU,CAC7C,MAAM/F,EAAQ9B,EAAK0R,UAAY1R,EAAK0R,SAASzR,KAAQyR,EAErDpQ,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAAS+J,GAC3BjV,KAAMsyB,EACNjtB,QAEF,CACD,CArCA,CAqCA,GACC,EAIJoB,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhFQ,CACZC,IAAK,kECXN,MAAM/G,GAAW,0BAEX0C,GAAWD,EAAazC,GAAU,CACvCqV,WAAY,oCAkCP65D,GAAgC,IAAIjwE,OAAM,KAAA+D,OA3BlB,CAC7B,KACA,KACA,IACA,IACA,IACA,IACA,SACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,SACA,SACA,IACA,IACA,KAG2EuuB,KAAK,IAAQ,OAanF7vB,GAAQ2E,GACN,CAACE,EAAMrL,KAGb,IAFqB4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,IAGhE,OAOD,MAAMnB,EAAW,CAACjK,EAAMU,KACvB,MAAMwzE,EAAQxzE,GApBgB4X,KAChC,MAAMrY,EAASg0E,GAA8Bj3D,KAAK1E,GAElD,OAAQrY,GAAUA,EAAO,IAAO,IAAI,EAiBXk0E,CAAwBzzE,GAE3CwzE,GACHrvE,EAAO,UACNE,GACA9E,SACA+E,QAASyC,GAAS2S,WAClBpa,OACAqF,KAAM6uE,GAER,EAGD5oE,EAAKmB,aAAaT,IACjB/B,EAAS+B,EAAQA,EAAO3J,MACxB4H,EAAS+B,EAAQA,EAAOC,QACxBhC,EAAS+B,EAAQA,EAAOzI,KAAKzC,QAC7BmJ,EAAS+B,EAAQA,EAAOzI,KAAKxC,OAC7BkJ,EAAS+B,EAAQA,EAAOzI,KAAK6I,WAC7BnC,EAAS+B,EAAQA,EAAOzI,KAAK2R,QAAQ,IAGtC5J,EAAKqK,WAAW2c,IACfroB,EAASqoB,EAAUA,EAASrd,UAC5BhL,EAASqoB,EAAUA,EAAS/uB,KAAKzC,QACjCmJ,EAASqoB,EAAUA,EAAS/uB,KAAKxC,OACjCkJ,EAASqoB,EAAUA,EAAS/uB,KAAK2R,QAAQ,IAG1C5J,EAAKE,WAAWlI,IACf2G,EAAS3G,EAAMA,EAAK4P,MACpBjJ,EAAS3G,EAAMA,EAAK5C,OACpBuJ,EAAS3G,EAAMA,EAAKC,KAAKzC,QACzBmJ,EAAS3G,EAAMA,EAAKC,KAAK2R,QAAQ,GAChC,EAIJzO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjGQ,CACZC,IAAK,iECHN,MAAM/G,GAAW,2BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,KAAAgI,OACzC,IAARhI,EAAY,aAAe,iBASxB0G,GAAQ2E,GACN,CAACE,EAAMrL,KAcb,SAAS6+D,EAAcwL,EAAch4C,GACpC,MAAMja,EAAQiyD,EAAarjE,QAAO,CAAC0sE,EAAOz6D,KAElB,aAAnBA,EAAU/Y,MACb2+D,EAAc5lD,EAAWoZ,GAGH,eAAnBpZ,EAAU/Y,OAAuBwzE,GAAS,GAEvCA,IACL,GAEH,GAA0B,SAAtBrJ,EAAanqE,MAAyC,WAAtBmqE,EAAanqE,MAAqBkY,EAAQjN,EAAS,CACtF,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CApCqBpL,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAUopE,MAoCXnoE,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAI1B,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAC/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAWuhD,GAClD/U,EAAc+U,EAAWvhD,IAG5B,GACC,EAIJ7rB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA/DQ,CACZC,IAAK,kECbN,MAAM/G,GAAW,mCAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAgB,IAAM,mCACtBQ,eAAgB,IAAM,mCACtBnB,yBAA0B,IAAM,yDAChCC,yBAA0B,IAAM,2DAS3BzK,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,QAAS,qBAAsB,uBAIpD,OAID,IAAIw6D,EAoBJ,GAlBAmO,GAAmC,CAClC1nE,OACArL,SACA6P,gBAAiBkD,EAAQlS,OACzBmP,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACylB,EAAUntB,KACX0/D,EAAUA,GAAW,IAAI/tD,IACzB,MAAMywD,EAAe1C,EAAQl3C,IAAI2E,IAAa,GAK9C,OAHAi1C,EAAa/kE,KAAK2C,GAClB0/D,EAAQ7wD,IAAIse,EAAUi1C,IAEf,CAAI,EAEX,OAGA1C,EACH,IAAK,MAAOvyC,EAAUi1C,KAAiB1C,EAAQ/8D,UAAW,CACzD,IAAImN,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAE9E,IAAK,MAAM9P,KAASoiE,EAAaj5C,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CACvD,IAAIirE,EAAiBj+D,EAAS3S,MAAM,EAAG6C,GACvC,MAAMguE,EAAgBl+D,EAAS3S,MAAM6C,GAEjCiG,EAAQ7E,SAAS,UACpB2sE,EAAiBA,EAAe/rE,QAAQ,OAAQ,KACtCiE,EAAQ7E,SAAS,WAC3B2sE,EAAiBA,EAAe/rE,QAAQ,OAAQ,KAGjD8N,EAAWi+D,EAAiBC,CAC7B,CAEI7gD,EAAS/uB,KAAK0R,SACjBqd,EAAS/uB,KAAK0R,SAASzR,IAAMyR,EAE7Bqd,EAASrd,SAAWA,CAEtB,CACD,CACA,EAGFxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArEQ,CACZC,IAAK,yEACLgB,SAAS,GCTV,MAAM/H,GAAW,2CAEX0C,GAAWD,EAAazC,GAAU,CACvC2mB,gBAAiB,kCACjBC,gBAAiB,kCACjBC,gBAAiB,mCACjBC,gBAAiB,qCASZplB,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAO,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBiB,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,IAAKA,EAASrd,SAAS1O,SAAS,KAC/B,OAGD,MAAM0O,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAEhF,IAAIkhB,EACJ,MAAMioC,EAAgB+L,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAChEA,EAAa5oB,gBAAgB6oB,IAC5B,MAAMiD,EAA0BjD,EAAcpuE,WAE9C6rB,GAAY,CAAEzhB,OAAQinE,EAAyBvlD,OAAQ,MAAQ5qB,IAC9D,MAAMowE,EAAoE,MAAlDD,EAAwBnwE,EAAM8sB,WAAa,GAC7D5rB,EAAQgsE,EAAc1uE,YAAcwB,EAAM8sB,WAAa,EAE7D,GAAIsjD,GAA+B,UAAZjpE,EAAqB,CAC3C,GAAImB,EAAQM,IAIX,OAHAspB,GAAW,OACXm+C,EAAUnD,GAKXjnE,EAASzC,GAASkkB,gBAAiBxmB,EACpC,CAEA,IAAKkvE,GAA+B,WAAZjpE,EAAsB,CAC7C,GAAImB,EAAQM,IAIX,OAHAspB,GAAW,OACXm+C,EAAUnD,GAKXjnE,EAASzC,GAASikB,gBAAiBvmB,EACpC,KAGDypB,GAAY,CAAEzhB,OAAQinE,EAAyBvlD,OAAQ,MAAQ5qB,IAC9D,MAAMswE,EAAoE,MAAlDH,EAAwBnwE,EAAM8sB,WAAa,GAC7D5rB,EAAQgsE,EAAc1uE,YAAcwB,EAAM8sB,WAAa,EAE7D,GAAIwjD,GAA+B,UAAZnpE,EAAqB,CAC3C,GAAImB,EAAQM,IAIX,OAHAspB,GAAW,OACXq+C,EAASrD,GAKVjnE,EAASzC,GAASokB,gBAAiB1mB,EACpC,CAEA,IAAKovE,GAA+B,WAAZnpE,EAAsB,CAC7C,GAAImB,EAAQM,IAIX,OAHAspB,GAAW,OACXq+C,EAASrD,GAKVjnE,EAASzC,GAASmkB,gBAAiBzmB,EACpC,IACC,GACD,IAeH,SAAS+E,EAASlF,EAASG,GAC1BN,EAAO,CACNG,UACAG,QACAlF,kBACA8E,GACA/E,KAAMsyB,GAER,CApBI6D,GAAYioC,IACV9rC,EAAS/uB,KAAK0R,SAGlBqd,EAAS/uB,KAAK0R,SAASzR,IAAM46D,EAF7B9rC,EAASrd,SAAWmpD,EAkBtB,GACC,EAMH,SAASkW,EAAUnD,GAClB,MAAMsD,EAAkBtD,EAAc5tE,KAAKyS,QAAUm7D,EAAc5tE,KAAKyS,OAAO84C,UACzE4lB,EAAgBD,GAAmBA,EAAgB3zE,QAGnD6zE,WAAEA,EAAUC,cAAEA,GAAkBF,EACnC,CACAC,WAAYD,EACZE,cAAclhD,GACb+gD,EAAgB3zE,OAAS4yB,CAC1B,GAEA,CACAihD,WACExD,EAAcn7D,OAAO84C,WAAaqiB,EAAcn7D,OAAO84C,UAAUhuD,QAAW,GAC9E8zE,cAAclhD,GACRy9C,EAAcn7D,OAAO84C,YAAWqiB,EAAcn7D,OAAO84C,UAAY,IAEtEqiB,EAAcn7D,OAAO84C,UAAUhuD,OAAS4yB,CACzC,GAGa,WAAZtoB,EACHwpE,EAAcD,EAAWxtE,QAAQ,OAAQ,MACnB,UAAZiE,GACVwpE,EAAcD,EAAWxtE,QAAQ,OAAQ,IAE3C,CAKA,SAASqtE,EAASrD,GACjB,MAAMzhD,EAAMyhD,EAAcn4B,SACvBm4B,EAAcziB,YACb,cACA,QACD,YAEGT,EAAYkjB,EAAc5tE,KAAKyS,QAAUm7D,EAAc5tE,KAAKyS,OAAO0Z,GACnEmlD,EAAW5mB,GAAaA,EAAUltD,MAElCiV,EAASm7D,EAAcn7D,OAAO0Z,IAG9B3uB,MAAEA,EAAK+zE,SAAEA,GAAaD,EACzB,CACA9zE,MAAO8zE,EACPC,SAASphD,GACRu6B,EAAUltD,MAAQ2yB,CACnB,GAEA,CACA3yB,MAAQiV,GAAUA,EAAOjV,OAAU,GACnC+zE,SAASphD,GACHy9C,EAAcn7D,OAAO0Z,KAAMyhD,EAAcn7D,OAAO0Z,GAAO,IAG5DyhD,EAAcn7D,OAAO0Z,GAAK3uB,MAAQ2yB,CACnC,GAGa,WAAZtoB,EACH0pE,EAAS/zE,EAAMoG,QAAQ,OAAQ,MACT,UAAZiE,GACV0pE,EAAS/zE,EAAMoG,QAAQ,OAAQ,IAEjC,GAGDV,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5LQ,CACZC,IAAK,iFACLgB,SAAS,GCRV,MAAM/H,GAAW,4BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,YAAAgI,OAAmB,IAARhI,EAAY,QAAU,aAQ/E0G,GAAQ2E,GACN,CAACE,EAAMrL,KAcb,SAAS6+D,EAAcwL,EAAch4C,GAuBpC,GAtBcg4C,EAAarjE,QAAO,CAAC0sE,EAAOz6D,MAElB,aAAnBA,EAAU/Y,MAAuBozE,GAA+Br6D,KACnE4lD,EAAc5lD,EAAWoZ,GAKN,WAAnBpZ,EAAU/Y,OACT+Y,EAAUxY,MAAM6F,SAAS,OACzBsiE,GAA6B/9D,IAAIoO,EAAUxY,MAAMiM,cAAcrK,MAAM,MAKhD,WAAnB4W,EAAU/Y,OACbwzE,GAAS,GAJFA,IAQN,GAESvoE,EAAS,CACpB,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CA/CqBpL,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAUopE,MA+CXnoE,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAI1B,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAC/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAW4+C,IAClDpS,EAAcoS,EAAc5+C,EAAS,GAGxC,GACC,EAIJ7rB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA1EQ,CACZC,IAAK,mECbN,MAAM/G,GAAW,2BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAWtM,GAAG,yBAAAgI,OAA8BhI,EAAG,WAAAgI,OAAkB,IAARhI,EAAY,OAAS,WASzE0G,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAM6uC,EAAsBhwC,EAAU,EAEtC,MAAO,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU3B,IAIV,OAGD,MAAM2yC,EAA4B,IAAIr3C,0BAAmBo3C,EAAsB,EAAM,OAC/EE,EAA0B,IAAIt3C,oBAAao3C,EAAsB,EAAM,OACvEG,EAA0BhvC,EAAQM,IAAM,KAAKI,OAAOmuC,GAAuB,GAC3EI,EAA4BjvC,EAAQM,IAAM,OAAOI,OAAOmuC,GAAuB,GAErF9vC,EAAKqK,WAAW2c,IACf,MAAMrd,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAEhF,GAAI1I,EAAQM,IAAK,CAChB,MAAMkoE,EAAoB9/D,EACxB9N,QAAQ,IAAInD,OAAOs3C,EAAyB,MAAOC,GACnDp0C,QAAQ,IAAInD,OAAOq3C,EAA2B,MAAOG,GAEnDlpB,EAAS/uB,KAAK0R,SACjBqd,EAAS/uB,KAAK0R,SAASzR,IAAMuxE,EAE7BziD,EAASrd,SAAW8/D,CAEtB,MACCz5B,EAAwB14C,KAAKqS,IAC7BomC,EAA0Bz4C,KAAKqS,KAE/BpQ,EAAO,CACNG,QAASyC,GAAS4E,SAASjB,GAC3BpL,KAAMsyB,EACNntB,MAAO,EACPlF,SACA8E,SAAAA,IAEF,GACC,CACF,EAGF0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAvDQ,CACZC,IAAK,iEACLgB,SAAS,GCFV,MAAM/H,GAAW,yBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,eAAAgI,OACzC,IAARhI,EAAY,WAAa,eAStB0G,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAyBb,SAAS6+D,EAAcwL,EAAch4C,GACpC,MAAMja,EAAQiyD,EAAarjE,QAAO,CAAC0sE,EAAOz6D,KAGlB,aAAnBA,EAAU/Y,MACb2+D,EAAc5lD,EAAWoZ,GAG1B,MAAM0iD,EAAgB97D,EAAUzX,OAC1BwzE,EAAqBD,GAAiBA,EAAct0E,MAQ1D,MANuB,cAAnBwY,EAAU/Y,OACRsE,EAAe4G,EAAkB,yBAA0B4pE,KAC/DtB,GAAS,IAIJA,CAAK,GACV,GAEH,GAA0B,SAAtBrJ,EAAanqE,MAAyC,WAAtBmqE,EAAanqE,MAAqBkY,EAAQjN,EAAS,CACtF,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CAvDqBpL,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAUopE,IAEX,CACCnpE,OAAQe,EACRhB,SAAU,CACT6qE,uBAAwB,CAACrsE,IAE1B0B,UAAU,KA6CZe,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAID,MAAM4e,EAAY,GAElBitB,KACEvC,QAAQtpC,EAASrd,UACjBvV,MAAMM,IACY,aAAdA,EAAKG,MACR+wC,EAAU1uC,KAAK4E,OAAOpH,GAAM0d,OAC7B,IAGF,IAAK,MAAMzI,KAAYi8B,EACtB,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAC/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAWuhD,GAClD/U,EAAc+U,EAAWvhD,IAG5B,GACC,EAIJ7rB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA7FQ,CACZC,IAAK,gECVN,MAAM/G,GAAW,kBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,QAAAgI,OAAe,IAARhI,EAAY,WAAa,eAQ9E0G,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAyBb,SAAS6+D,EAAcwL,EAAch4C,GACpC,MAAMja,EAAQiyD,EAAarjE,QAAO,CAAC0sE,EAAOz6D,KAgC3C,IAA+ClZ,EApB7C,OAToB,aAAnBkZ,EAAU/Y,MACTozE,GAA+Br6D,KA8BnB,YAF+BlZ,EA3BJkZ,GA6BpC/Y,OACLsE,EAAe4G,EAAkB,uCAAwCrL,EAAKU,UA5B7Eo+D,EAAc5lD,EAAWoZ,GAGH,OAAnBpZ,EAAU/Y,OAAewzE,GAAS,GAE/BA,CAAK,GACV,GAEH,GAA0B,SAAtBrJ,EAAanqE,MAAyC,WAAtBmqE,EAAanqE,MAAqBkY,EAAQjN,EAAS,CACtF,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CAnDqBpL,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAUopE,IAEX,CACCnpE,OAAQe,EACRhB,SAAU,CACT8qE,qCAAsC,CAACtsE,EAAUD,IAElD2B,UAAU,KAoDZe,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAI1B,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAC/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAWuhD,GAClD/U,EAAc+U,EAAWvhD,IAG5B,GACC,EAIJ7rB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAzFQ,CACZC,IAAK,yDCbN,MAAMkxD,cACLA,GAAaI,YACbA,GAAWM,YACXA,GAAWJ,YACXA,GAAW/S,aACXA,GAAY8S,MACZA,IACG+X,GAGErwE,GAAW,wBACX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAWlM,GAAI,YAAA4H,OAAiB5H,EAAI,mCAe/Bk1E,GAAoBr1E,GACzBg9D,GAAch9D,IACdo9D,GAAYp9D,IACZ09D,GAAY19D,IACZs9D,GAAYt9D,IACZuqD,GAAavqD,IACbq9D,GAAMr9D,GAMDs1E,GAASt1E,GACdg9D,GAAch9D,SAAwBW,IAAfX,EAAKU,OAAoD,SAA7BV,EAAKU,MAAMiM,cAoBzDlG,GAAO,CAAC2E,EAASi7B,EAAG95B,IAClB,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,cAKtBiB,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GAAW,OAErC,MAAMrd,EAAWqd,EAASrd,SAE1B,IAAKA,EAAS1O,SAAS,SAAU,OAEjC,IAAKy6C,GAAyB/rC,GAAW,OAEzC,MAAMmpD,EAAgB+L,GAAcl1D,EAAUhV,EAAQqyB,GAAWuhD,IAChEA,EAAU5qB,aAAa2Q,IACtB,GAAK0b,GAAM1b,GAAX,CAEA,GAAgB,YAAZxuD,EAAuB,CAC1B,MAAM3J,EAAOm4D,EAAOn4D,OAGpB,KAF0BA,GAAQ6zE,GAAM7zE,IAEhB,OAExB,GAAI8K,EAAQM,IAAK,OAmEvB,SAAoB0oE,GACnB,MAAMC,EAAgDtkC,IACrD,IAAK,MAAM30B,KAAK20B,EACf9nC,EAAOmT,EAAE5c,MAAM,IACf4c,EAAE5c,MAAM,GAAGwlD,eAAiB,IAC5B5oC,EAAE5c,MAAM,GAAGylD,cAAgB,EAC5B,GAEMqwB,KAASC,GAAQH,EAAY51E,MACpC,IAAIK,EAAOu1E,EAAY/zE,OAEvB,GAAY,MAARi0E,GAAsC,IAAtBA,EAAK91E,MAAMO,OAAc,OAE7CkJ,EAAOqsE,EAAK91E,MAAM,IAClB81E,EAAK91E,MAAM,GAAGwlD,eAAiB,GAC/BswB,EAAK91E,MAAM,GAAGylD,cAAgB,GAC9BowB,EAAmBE,GAEnB,KAAOJ,GAAMt1E,IAAO,CACnB,MAAMkxC,EAAYlxC,EAAKL,MACjB8B,EAAOzB,EAEbw1E,EAAmBtkC,GACnBqkC,EAAY51E,MAAQ41E,EAAY51E,MAAMoI,OAAOmpC,GAC7ClxC,EAAOA,EAAKwB,OACZC,EAAK8xB,QACN,CACD,CA9F8BoiD,CAAWl0E,EACpC,KAAO,CACN,MAAMyvC,EAAY0oB,EAAOj6D,MAEzB,GA9CY8wC,KACjB,GAAIA,EAAKvwC,OAAS,EAAG,OAAO,EAE5BkJ,EAAOqnC,EAAK,GAAI,uBAChB,MAAO1hC,EAAO6mE,GAAUnlC,EAAK,GAAG9wC,MAEhC,OAAKoP,IAED6mE,GAEGP,GAAiBtmE,KAAWumE,GAAMvmE,EAAM,EAoCtC8mE,CAAS3kC,GAAY,OASzB,GANC3kC,EAAQM,KACRqkC,EAAUhxC,OAAS,GACnBgxC,EAAU,KACqB,IAA9BA,EAAU,GAAGvxC,MAAMO,QACnBgxC,EAAU/oC,OAAM,EAAGxI,WAA6B,IAAjBA,EAAMO,UAE1B,OA0BnB,SAAmB41E,GAClB,MAAMC,EAAkBD,EAAIn2E,MAC1B6yB,QAAO,EAAG7yB,WAAYA,EAAM,IAAM01E,GAAiB11E,EAAM,MACzDoW,KAAKwG,IACLnT,EAAOmT,EAAE5c,MAAM,IACf4c,EAAE5c,MAAM,GAAGwlD,eAAiB,GAC5B5oC,EAAE5c,MAAM,GAAGylD,cAAgB,GAEpB7oC,KAEHy5D,EAAgBD,EAAgB9jC,QAEtC7oC,EAAO4sE,GACP5sE,EAAO0sE,EAAI/zE,QAEX+zE,EAAI1kC,QACJ0kC,EAAIn2E,MAAM6C,KAAKwzE,GAEf,IAAK,MAAMz5D,KAAKw5D,EAAiB,CAChC,MAAMpjD,EAAOmjD,EAAI/zE,OAAO4wB,KAExBmjD,EAAI/zE,OAAO8jC,YAAYlT,EAAMA,EAAKwS,MAAM,CAAExlC,MAAO,CAAC4c,KACnD,CACD,CAjD0B05D,CAAUrc,EAC/B,CAEAxwD,EAAOwwD,EAAOzsD,QAAUysD,EAAOzsD,OAAO9G,KAEtCxB,EAAO,CACNG,QAASyC,GAAS4E,SAASjB,GAC3BpL,KAAMsyB,EACNntB,MAAOy0D,EAAOn3D,YACd2C,SAAUw0D,EAAOzsD,OAAO9G,IAAIi7B,OAC5BrhC,SACA8E,SAAAA,IAhCmB,CAiClB,GACD,IAGCwH,EAAQM,KAAOuxD,IAClB9rC,EAASrd,SAAWmpD,EACrB,GACC,EAgEJ33D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5KQ,CACZC,IAAK,8DACLgB,SAAS,GCfV,MAAM/H,GAAW,sBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAU/Q,IAAyB+Q,aAAAA,OAAAA,iCAA+B/Q,EAAO,OAQ/EuC,GAAQ2E,GACN,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACzB,EAAUC,KAIrB,OAGD,MAAM0R,EAAoB1R,EAASuC,GAAW,IAAIpH,OAAOoH,GAAWA,EAEpEE,EAAKqK,WAAW2c,IACVwxC,GAAqBxxC,IAI1B63C,GAAc73C,EAASrd,SAAUhV,EAAQqyB,GAAW4/C,IACnDA,EAAarpB,SAASyhB,IACrB,GAAI/vD,EAAkB3X,KAAK0nE,EAAa5pE,OACvC,OAGD,MAAMuU,EAAW7N,OAAOkjE,GAExBzlE,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAAS4E,SAClBpH,YAAa,CAACgQ,EAAU7J,GACxBpL,KAAMsyB,EACNjtB,KAAM4P,GACL,GACD,GACD,GACD,EAIJxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA/CQ,CACZC,IAAK,6DCLN,MAAM/G,GAAW,qCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,4BAAAlN,OAAiCkN,EAAQ,OAQvDxO,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,MAOtB0C,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAErBA,EAAS1O,SAAS,MAIvB4jE,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAajoB,aAAaitB,IACzB,MAAMx1E,EAAQw1E,EAAWx1E,MAGzB,GAA0B,OAAtBA,EAAM4B,MAAM,EAAG,GAClB,OAGD,MAAMD,EAAO3B,EAAM4B,MAAM,GAErBmB,EAAsB4P,GAAkBhR,GAAO+I,IAInDvG,EAAO,CACNQ,KAAM3E,EACNsE,QAASyC,GAASyD,SAASxK,GAC3BV,KAAMsyB,EACNryB,SACA8E,SAAAA,IACC,GACD,GACD,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA3DQ,CACZC,IAAK,4ECRN,IAAAqqE,GAAA,SAA6ClhE,GAC5C,QAAI8jB,GAAyBjuB,IAAImK,MAK7B,sBAAsBrS,KAAKqS,EAK/B,ECNDmhE,GAAA,SAAuDp2E,GAKtD,IAAKA,EAAK+B,SAAW/B,EAAK+B,OAAOA,OAChC,OAAO,EAGR,MAAMs0E,EAAsBr2E,EAAK+B,OAAOA,OAClCu0E,EAAaD,EAAoBl2E,KACjCo2E,EAAcF,EAAoB31E,MAExC,GAAI61E,EAAa,CAChB,MAAM/C,EAAuB+C,EAAY5pE,cAAcxF,QAAQ,KAAM,IAErE,GACgB,WAAfmvE,IACCpN,GAA6Bp+D,IAAI0oE,IACjCrK,GAAgCr+D,IAAI0oE,IACpCnK,GAAwBv+D,IAAI0oE,IAC5B1K,GAAyBh+D,IAAI0oE,IAE9B,OAAO,CAET,CAGA,QAAIxzE,EAAKyB,QAA+B,YAArBzB,EAAKyB,OAAOtB,SAI3BH,EAAKU,MAAM8J,WAAW,QAKtBxK,EAAKU,MAAM8J,WAAW,OAAQxK,EAAKU,MAAM+e,SAAS,MAKtD,ECxCD,MAAM1a,GAAW,oBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,UAAAgI,OACzC,IAARhI,EAAY,WAAa,eAStB0G,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAkBb,IAjBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAUopE,IAEX,CACCnpE,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,aAAc,QAAS,aAAc,gBAC9CinE,YAAa,CAAC3tE,EAAUD,IAEzB2B,UAAU,IAKX,OAGD,MAAMksE,EAAmBhyE,EAAe4G,EAAkB,SAAU,cAC9DqrE,EAAcjyE,EAAe4G,EAAkB,SAAU,SACzDsrE,EAAmBlyE,EAAe4G,EAAkB,SAAU,cAC9DurE,EAAoBnyE,EAAe4G,EAAkB,SAAU,gBAMrE,SAASyzD,EAAcwL,EAAch4C,GACpC,MAAMja,EAAQiyD,EAAarjE,QAAO,CAAC0sE,EAAOz6D,KAMzC,OAJuB,aAAnBA,EAAU/Y,MAAuBozE,GAA+Br6D,KACnE4lD,EAAc5lD,EAAWoZ,GAGtB7tB,EAAe4G,EAAkB,cAAe6N,EAAUxY,QAI1D+1E,GAoER,SAAuCz2E,GACtC,IAAKA,EAAK+B,OAAQ,OAAO,EAEzB,MAAM00B,EAAYz2B,EAAK+B,OAAOpC,MAAM+C,QAAQ1C,GAE5C,OAAOA,EAAK+B,OAAOpC,MAAM2C,MAAM,EAAGm0B,GAAWjiB,MAAMwH,GAiDpD,SAAgChc,GAC/B,QAAKA,IAEEy9D,GAAaz9D,IAAS6I,EAAS7I,EAAKU,QAAU2rE,GAAiBrsE,EAAKU,OAC5E,CArD0Dm2E,CAAuB76D,IACjF,CA1E4B86D,CAA8B59D,IAIlDw9D,GA4ER,SAAkC12E,GACjC,IAAKA,EAAK+B,OAAQ,OAAO,EAEzB,MAAM00B,EAAYz2B,EAAK+B,OAAOpC,MAAM+C,QAAQ1C,GAE5C,OAAOA,EAAK+B,OAAOpC,MAAM2C,MAAM,EAAGm0B,GAAWjiB,MAAMwH,GA+CpD,SAA2Bhc,GAC1B,QAAKA,IAEEy9D,GAAaz9D,IAAwB,MAAfA,EAAKU,MACnC,CAnD0Dq2E,CAAkB/6D,IAC5E,CAlFuBg7D,CAAyB99D,IAIxCy9D,GAoFR,SAA6B32E,GAC5B,GAAIA,EAAKyB,SAAWg8D,GAAaz9D,EAAKyB,QACrC,OAAO,EAGR,OAAOzB,EAAKwB,SAAWi8D,GAAaz9D,EAAKwB,OAC1C,CA1F4By1E,CAAoB/9D,IAIxC09D,KA4F0B52E,EA5FoBkZ,GA6FzCzX,QAqCb,SAAiCzB,GAChC,OAAOy9D,GAAaz9D,IAAwB,MAAfA,EAAKU,KACnC,CAvCuBw2E,CAAwBl3E,EAAKyB,SA5GxCkyE,GAmBe,QAAnBz6D,EAAU/Y,MAAmBi2E,GAA6Bl9D,KAIpC,QAAnBA,EAAU/Y,KAAiBwzE,EAAQ,EAHlCA,EAuFZ,IAAkC3zE,CApFqB,GACjD,GAEH,GAA0B,SAAtBsqE,EAAanqE,MAAyC,WAAtBmqE,EAAanqE,MAAqBkY,EAAQjN,EAAS,CACtF,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CAEA3J,EAAKqK,WAAW2c,IACf,MAAM4e,EAAY5e,EAAS4e,UAE3B,GAAK4yB,GAAqBxxC,KAItB4e,EAAU18B,MAAM+H,GAAM45D,GAAmB55D,KAI7C,IAAK,MAAMtH,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAC1D0uB,GAAyBqqB,IAI9BlB,GAAckB,EAAkBprE,EAAQqyB,GAAWuhD,GAClD/U,EAAc+U,EAAWvhD,IAG5B,GACC,EAsDJ,SAASmrC,GAAaz9D,GACrB,QAAKA,GAEgB,eAAdA,EAAKG,IACb,CA8BAsG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KApMQ,CACZC,IAAK,2DCnBN,MAAM/G,GAAW,iDAEX0C,GAAWD,EAAazC,GAAU,CACvC2mB,gBAAiB,kCACjBC,gBAAiB,kCACjBC,gBAAiB,mCACjBC,gBAAiB,qCASZplB,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBiB,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,IAAKA,EAASrd,SAAS1O,SAAS,KAC/B,OAGD,IAAI4vB,GAAW,EACf,MAAMlhB,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAC1EmpD,EAAgB+L,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAChEA,EAAajoB,aAAaitB,IACzB,IAAKA,EAAWh2E,OACf,OAGD,MAAMi3E,EAAcjB,EAAWngE,KAAK/V,GAASoH,OAAOpH,KAAOs2B,KAAK,KAC1D+9C,EAAkB8C,EAAY3sE,WAAW,KACzC8wB,EAAY46C,EAAWzzE,YAAcyzE,EAAWx1E,MAAMR,OAAS,EAEjEm0E,GAA+B,UAAZjpE,IAClBmB,EAAQM,KACXspB,GAAW,EACXihD,GAAwBlB,EAAY,KAEpChsE,EAASzC,GAASkkB,gBAAiB2P,IAIhC+4C,GAA+B,WAAZjpE,IACnBmB,EAAQM,KACXspB,GAAW,EACXihD,GAAwBlB,EAAY,MAEpChsE,EAASzC,GAASikB,gBAAiB4P,IAIrC,MAAMi5C,EAAkB4C,EAAY13D,SAAS,KACvC8b,EAAaD,EAAY67C,EAAYj3E,OAAS,EAEhDq0E,GAA+B,UAAZnpE,IAClBmB,EAAQM,KACXspB,GAAW,EACXkhD,GAAsBnB,EAAY,KAElChsE,EAASzC,GAASokB,gBAAiB0P,IAIhCg5C,GAA+B,WAAZnpE,IACnBmB,EAAQM,KACXspB,GAAW,EACXkhD,GAAsBnB,EAAY,MAElChsE,EAASzC,GAASmkB,gBAAiB2P,GAErC,GACC,IAeH,SAASrxB,EAASlF,EAASG,GAC1BN,EAAO,CACNG,UACAG,QACAlF,kBACA8E,GACA/E,KAAMsyB,GAER,CApBI6D,GAAYioC,IACV9rC,EAAS/uB,KAAK0R,SAGlBqd,EAAS/uB,KAAK0R,SAASzR,IAAM46D,EAF7B9rC,EAASrd,SAAWmpD,EAkBtB,GACC,EASJ,SAASgZ,GAAwBp3E,EAAMU,GACtC,MAAMmuB,EAAS7uB,EAAK+O,MAEA,aAAhB8f,EAAO1uB,KACVi3E,GAAwBvoD,EAAQnuB,GAEhCmuB,EAAO7Y,OAAOlV,OAASJ,CAEzB,CAOA,SAAS22E,GAAsBr3E,EAAMU,GACpC,MAAMmuB,EAAS7uB,EAAK2yB,KAEA,aAAhB9D,EAAO1uB,KACVk3E,GAAsBxoD,EAAQnuB,GAE9BmuB,EAAO7Y,OAAOjV,MAAQL,CAExB,CAEA+F,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAxIQ,CACZC,IAAK,uFACLgB,SAAS,GCRV,MAAM/H,GAAW,4BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,6BAAAlN,OAAkCkN,EAAQ,OASxDxO,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQe,EACRhB,SAAU,CACTsqB,gBAAiB,CAAC9rB,EAAUD,IAE7B2B,UAAU,KAQZe,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAE1Bk1D,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAajoB,aAAaitB,IACzB,MAAMx1E,MAAEA,GAAUw1E,E/T0OrB,IAMQriE,K+T9O0BnT,E/T+O3B8S,GAAU1I,IAAI+I,EAAWlH,kB+T3OzBlI,EAAe4G,EAAkB,kBAAmB3K,KAIpD6L,EAAQM,IACXylB,EAASrd,SAAWnB,GAA0BmB,GAK/CpQ,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAASxK,GAC3BV,KAAMsyB,EACNjtB,KAAM3E,KACL,GACD,GACD,GACD,EAIJ+F,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjEQ,CACZC,IAAK,kEACLgB,SAAS,GCLV,MAAM/H,GAAW,8BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,wCAAAlN,OAA6CkN,EAAQ,OAOnEqiE,GAAqB,CAAC,IAAK,IAAK,KAoCtC,MAAM7wE,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAiBb,IAhBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,EAAC,IAEZ,CACCC,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,YAAa,QAAS,OAEhChF,UAAU,IAKX,OAGD,MAAMgtE,EAAW9yE,EAAe4G,EAAkB,SAAU,MACtDmsE,EAAc/yE,EAAe4G,EAAkB,SAAU,SACzDosE,EAAkBhzE,EAAe4G,EAAkB,SAAU,aAEnEC,EAAKqK,WAAW2c,IAxDlB,IAA8B5xB,EAyD3B,GAAKojE,GAAqBxxC,MAItBk7C,GAAel7C,KA7DQ5xB,EAiED4xB,EAASrd,SAhE9BqiE,GAAmB9iE,MAAMhE,GAAS9P,EAAM6F,SAASiK,OAiGtD,IAAK,MAAM66D,KAAoBnD,GAAuB51C,EAASrd,SAAUqd,GACnE0uB,GAAyBqqB,IAI9BlB,GAAckB,EAAkBprE,EAAQqyB,EAAUwsC,GA/BnD,SAASA,EAAc4Y,GACtBA,EAAYvuB,UAAUwuB,IACrB,IAAKvB,GAA6BuB,GAAU,OAE5C,MAAMC,EAAiBD,EAAQ51E,OAE/B,GAAI61E,GAAkD,IAAhCA,EAAej4E,MAAMO,OAC1C,OAGD,MAAM23E,EA1EX,SAAuB73E,GACtB,MAAMC,EAAS,GAGf,IAAI63E,EAAY93E,EAEhB,MAAQ83E,EAAYA,EAAUt2E,SACN,eAAnBs2E,EAAU33E,MAIS,OAAnB23E,EAAU33E,MAAoC,UAAnB23E,EAAU33E,MAAuC,cAAnB23E,EAAU33E,MAIvEF,EAAOuC,KAAKs1E,GAGb,OAAO73E,CACR,CAuD2B83E,CAAcJ,GAEpC,IAAK,MAAMrN,KAAgBuN,EAC1B,GACwB,OAAtBvN,EAAanqE,OAAkBo3E,GACT,UAAtBjN,EAAanqE,OAAqBq3E,GACZ,cAAtBlN,EAAanqE,OAAyBs3E,EACtC,CAGDvtE,EAFiB,CAACytE,KAAYE,GAAevhD,KAAK,IAAIynB,YAGvD,CACD,GAEF,CAaA,SAAS7zC,EAAS+K,GACjBpQ,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAASyD,SAAS+J,GAC3B5P,KAAM4P,GAER,IACC,EAIJxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAtIQ,CACZC,IAAK,qECTN,MAAM/G,GAAW,yBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAU/Q,IAAyB+Q,aAAAA,OAAAA,iCAA+B/Q,EAAO,OAQ/EuC,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAiBb,IAhBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAACzB,EAAUC,IAEtB,CACCyB,OAAQe,EACRhB,SAAU,CACT2tE,uBAAwB,CAACxvE,IAE1B+B,UAAU,IAKX,OAGD,MAAM0tE,EAA+BrzE,QACpCyG,GAAoBA,EAAiB2sE,wBAGhCz9D,EAAoB1R,EAASuC,GAAW,IAAIpH,OAAOoH,GAAWA,EA+BpE,SAAS0zD,EAAcwL,EAAch4C,GACpCg4C,EAAa9hB,aAAa0vB,IACzB,MAAMx3E,MAAEA,EAAO+B,YAAa0C,GAAU+yE,EAEtC,GAAI39D,EAAkB3X,KAAKlC,GAC1B,OAGD,MAAMuU,EAAW7N,OAAO8wE,GAQlB9yE,EAAWD,EAAQ8P,EAAS/U,OAElC2E,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAAS4E,SAClBpH,YAAa,CAACgQ,EAAU7J,GACxBpL,KAAMsyB,EACNntB,QACAC,YACC,GAEJ,CAzDAkG,EAAKqK,WAAW2c,IACf,MAAMrd,SAAEA,EAAQi8B,UAAEA,GAAc5e,EAEhC,GAAKwxC,GAAqBxxC,KAItB4e,EAAU18B,MAAM+H,GAAM45D,GAAmB55D,KAK7C,GAAI07D,GAyDP,SAAmChjE,GAClC,IAAK,MAAOnV,EAAG0Q,KAASpQ,MAAMiuB,KAAKpZ,GAAUnN,UAAW,CACvD,GAAa,MAAT0I,EACH,SAGD,MAAM2nE,EAAWljE,EAASlD,OAAOjS,EAAI,GAErC,GAAIq4E,IAAa1a,GAAa0a,GAC7B,OAAO,EAGR,MAAM54B,EAAWtqC,EAASlD,OAAOjS,EAAI,GAErC,GAAIy/C,IAAake,GAAale,GAC7B,OAAO,CAET,CAEA,OAAO,CACR,CA7EuC64B,CAA0BnjE,GAC7D,IAAK,MAAMojE,KAAkBlQ,GAAsBlzD,EAAUqd,GACvD0uB,GAAyBq3B,IAI9BlO,GAAckO,EAAgBp4E,EAAQqyB,GAAW/V,GAAMuiD,EAAcviD,EAAG+V,UAGzE63C,GAAcl1D,EAAUhV,EAAQqyB,GAAW/V,GAAMuiD,EAAcviD,EAAG+V,IACnE,GAmCD,EAsCF,SAASmrC,GAAa9/C,GACrB,MAAO,UAAU/a,KAAK+a,EACvB,CAEAlX,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAtIQ,CACZC,IAAK,gECRN,MAAM/G,GAAW,uCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,8BAAAlN,OAAmCkN,EAAQ,OAQzDxO,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,MAOtB0C,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAErBA,EAAS1O,SAAS,OAIvB4jE,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAajoB,aAAaitB,IACzB,MAAMx1E,EAAQw1E,EAAWx1E,MAGzB,GAAwB,MAApBA,EAAMqR,OAAO,GAChB,OAGD,MAAM1P,EAAO3B,EAAM4B,MAAM,GAErBmB,EAAsB4P,GAAkBhR,GAAO+I,IAInDvG,EAAO,CACNM,MAAO+wE,EAAWzzE,YAClBuC,QAASyC,GAASyD,SAASxK,GAC3BV,KAAMsyB,EACNjtB,KAAM3E,EACNT,SACA8E,SAAAA,IACC,GACD,GACD,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5DQ,CACZC,IAAK,8ECRN,MAAM/G,GAAW,+BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC/B,EAAQ+B,IAA0B/B,aAAAA,OAAAA,sBAAkB+B,EAAQ,OASlE5F,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,QAAS,YAOrBiB,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGgBA,EAASrd,SAEZ1O,SAAS,MAIvB23D,GAAkBj+D,EAAQqyB,GAAW4+C,IACpCA,EAAajoB,aAAaitB,IACzB,MAAMoC,EAAgBpC,EAAWx1E,MAEjC,IAAKsgD,GAAyBs3B,GAC7B,OAGD,IACEA,EAAc/xE,SAAS,QACvBsiE,GAA6B/9D,IAAIwtE,EAAc3rE,cAAcrK,MAAM,IAEpE,OAGD,MAAMi2E,EACO,UAAZntE,EAAsBktE,EAAc3rE,cAAgB2rE,EAAc1rE,cAE/D0rE,IAAkBC,IAIlBhsE,EAAQM,IACXqpE,EAAWx1E,MAAQ63E,EAKpB1zE,EAAO,CACNG,QAASyC,GAAS4E,SAASisE,EAAeC,GAC1Cv4E,KAAMsyB,EACNntB,MAAO+wE,EAAWzzE,qBAClBsC,GACA9E,WACC,GACD,GACD,GACD,EAIJwG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAvEQ,CACZC,IAAK,qEACLgB,SAAS,GCPV,MAAM/H,GAAW,kCAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,cAAAgI,OACzC,IAARhI,EAAY,WAAa,eAStB0G,GAAQ2E,GACN,CAACE,EAAMrL,KAgBb,SAAS6+D,EAAcwL,EAAch4C,GACpC,IAAIkmD,EAAgB,EAcpB,GAZAlO,EAAat9C,MAAM9T,KAEK,aAAnBA,EAAU/Y,MAAuBozE,GAA+Br6D,KACnE4lD,EAAc5lD,EAAWoZ,GAIH,eAAnBpZ,EAAU/Y,MACbq4E,GACD,IAIsB,SAAtBlO,EAAanqE,MACS,WAAtBmqE,EAAanqE,MACbq4E,EAAgBptE,EACf,CACD,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CA7CqBpL,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAUopE,MA6CXnoE,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAK1B,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAE/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAW/V,GAAMuiD,EAAcviD,EAAG+V,IAE5E,GACC,EAIJ7rB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAxEQ,CACZC,IAAK,yECRN,MAAM/G,GAAW,qCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,+CAAAlN,OAAoDkN,EAAQ,OAQ1ExO,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQe,EACRhB,SAAU,CACTouE,qBAAsB,CAAC5vE,EAAUD,IAElC2B,UAAU,KAQZe,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAIrBA,EAAS1O,SAAS,MAIvB4jE,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAajoB,aAAaitB,IACzB,MAAMx1E,EAAQw1E,EAAWx1E,MAEzB,IAAKsgD,GAAyBtgD,GAC7B,OAID,GAA0B,OAAtBA,EAAM4B,MAAM,EAAG,GAClB,OAGD,GAAImC,EAAe4G,EAAkB,uBAAwB6qE,EAAWx1E,MAAM4B,MAAM,IACnF,OAGD,MAAMD,EAAO3B,EAAM4B,MAAM,GAErB+Q,GAAchR,IAAS4mE,GAAen+D,IAAIzI,EAAKsK,gBAInD9H,EAAO,CACNG,QAASyC,GAASyD,SAASxK,GAC3BV,KAAMsyB,EACNntB,MAAO+wE,EAAWzzE,qBAClBsC,GACA9E,SACAoF,KAAM3E,GACL,GACD,GACD,GACD,EAIJ+F,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5EQ,CACZC,IAAK,4ECTN,MAAM/G,GAAW,wCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,4BAAAlN,OAAiCkN,EAAQ,OAQvDxO,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,MAOtB0C,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAErBA,EAAS1O,SAAS,MAIvB4jE,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAajoB,aAAaitB,IACzB,MAAMx1E,EAAQw1E,EAAWx1E,MAGzB,GAA0B,OAAtBA,EAAM4B,MAAM,EAAG,GAClB,OAGD,MAAMD,EAAO3B,EAAM4B,MAAM,GAEpBmB,EAAsB4P,GAAkBhR,GAAO+I,IAIpDvG,EAAO,CACNQ,KAAM3E,EACNsE,QAASyC,GAASyD,SAASxK,GAC3BV,KAAMsyB,EACNryB,SACA8E,SAAAA,IACC,GACD,GACD,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA3DQ,CACZC,IAAK,+ECPN,MAAM/G,GAAW,oBACXgS,GAAY,QAEZtP,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,iCAQLzE,GAAQ2E,GACN,CAACE,EAAMrL,KA4Eb,SAASy4E,EAAkB14E,EAAMU,EAAOi4E,GAElC5hE,GAAUnU,KAAKlC,IAIpBgL,EAAYhL,GAAOhB,MAAM02B,IACxB,GAAuB,WAAnBA,EAAUj2B,KACb,OAGD,IAAK4W,GAAUnU,KAAKwzB,EAAU11B,OAC7B,OAGD,MAAM+1B,EAAYkiD,EAAS34E,GAE3B6E,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,OACAmF,MAAOsxB,EAAYL,EAAU3zB,YAC7B2C,SAAUqxB,EAAYL,EAAU7zB,eAChCtC,SACA8E,SAAAA,IACC,GAEJ,CArGqB8E,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,KAMjEE,EAAK5L,MAAMM,IACV,OAAQA,EAAKG,MACZ,IAAK,SACJu4E,EAAkB14E,EAAMA,EAAKiM,OAAQwO,IACrC,MACD,IAAK,OACJi+D,EAAkB14E,EAAMA,EAAKU,MAAOwX,IACpC,MACD,IAAK,QAUP,SAAmBoa,GAElB,IAAKvb,GAAUnU,KAAK0vB,EAASrd,UAC5B,OAGD,IAAK+rC,GAAyB1uB,EAASrd,UACtC,OAGDk1D,GAAc73C,EAASrd,SAAUhV,EAAQqyB,GAAW4+C,IACnDA,EAAa5oB,gBAAgB6oB,IAC5B,MAAMzwE,MAAEA,EAAKisD,UAAEA,GAAcwkB,EAE7B,IAAKzwE,IAAUqW,GAAUnU,KAAKlC,GAC7B,OAGD,MAAM46B,EAAY,CAEjB61C,EAAcriB,UAEdqiB,EAAcn4B,UAAY,IACzB/xC,QACD,CAAC9B,EAAOmT,IAAQnT,EAAQmT,EAAIpY,QAG5BixE,EAAc1uE,YAAc,GAGvBm2E,EAAcl4E,EAAMR,OAAoC,GAA1BysD,GAAa,IAAIzsD,OAErD2E,EAAO,CACNG,QAASyC,GAASyD,SAClBlL,KAAMsyB,EACNntB,MAAOm2B,EACPl2B,SAAUk2B,EAAYs9C,EACtB34E,SACA8E,SAAAA,IACC,GACD,GAEJ,CAnDG8zE,CAAU74E,GACJ,GAqFT,EAIFyG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAlHQ,CACZC,IAAK,2DCIN,MAAM/G,GAAW,mCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,6CAAAlN,OAAkDkN,EAAQ,OAQxExO,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQe,EACRhB,SAAU,CACT65D,oBAAqB,CAACr7D,EAAUD,IAEjC2B,UAAU,KAuFZe,EAAK5L,MAAMM,IACV,IAAIiV,EAAW,KAEf,GAAkB,SAAdjV,EAAKG,KAAiB,CACzB,IAAK2jE,GAAqB9jE,GACzB,OAGDiV,EAAWjV,EAAKiV,QACjB,MAAO,GAAIrG,GAAS5O,IAAuB,SAAdA,EAAKqC,MAAmBrC,EAAKiM,OAAQ,CACjE,IAAKF,EAAuB/L,GAC3B,OAGDiV,EAAWjV,EAAKiM,MACjB,CAIKgJ,GAMAA,EAAS1O,SAAS,MApGxB,SAAe0O,EAAUjV,GACxBmqE,GAAcl1D,EAAUhV,EAAQD,GAAOkxE,IACtCA,EAAajoB,aAAaitB,IACzB,MAAMx1E,EAAQw1E,EAAWx1E,MAEzB,IAAKsgD,GAAyBtgD,GAC7B,OAGD,GC1DL,SAA2CuU,GAC1C,OAAOA,EAASzK,WAAW,MAC3B,CDwDQsuE,CAAiBp4E,GACpB,OAID,GAA0B,OAAtBA,EAAM4B,MAAM,EAAG,GAClB,OAGD,GAAImC,EAAe4G,EAAkB,sBAAuB6qE,EAAWx1E,MAAM4B,MAAM,IAClF,OAGD,IAAI6C,EAAQ,KACZ,MAAM9C,EAAO3B,EAAM4B,MAAM,GAAGqK,cAE5B,GAAIiC,GAAS5O,IAAuB,SAAdA,EAAKqC,KAAiB,CAC3C,GAAI+mE,GAAwBt+D,IAAIzI,GAC/B,OAGD8C,EAAQsV,GAAiBza,GAAQk2E,EAAWzzE,WAC7C,KAAO,CACN,GAAI4Q,GAAchR,IAASonE,GAAc3+D,IAAIzI,IAAS4mE,GAAen+D,IAAIzI,GACxE,OAID,IAAI02E,EAAoB7C,EAExB,GAKC,GAJA6C,EACCA,EAAkBt3E,OAGfs3E,GAA6D,OAAxCA,EAAkBr4E,MAAM4B,MAAM,EAAG,GACzD,YAEOy2E,GAET,GAAIA,EAAmB,CACtB,MAAMC,EAAyBD,EAAkBr4E,MAAMiM,cAAcrK,MAAM,GAE3E,GACCymE,GAA8Bj+D,IAAIkuE,IAClCxP,GAA6B1+D,IAAIzI,GAEjC,MAEF,CAEA8C,EAAQ+wE,EAAWzzE,WACpB,CAEAoC,EAAO,CACNG,QAASyC,GAASyD,SAASxK,GAC3BV,OACAmF,iBACAJ,GACA9E,SACAoF,KAAM3E,GACL,GACD,GAEJ,CA+BC2U,CAAMJ,EAAUjV,EAAK,GACpB,EAIJyG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA3IQ,CACZC,IAAK,0EErBN,MAAM/G,GAAW,yCAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAWie,GAAC,YAAAviB,OAAiBuiB,EAAC,oCASzB7jB,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAIrB,OAGD,IAAI4uE,EAAa,GAED,WAAZ7tE,EACH6tE,EAAa,IACS,WAAZ7tE,IACV6tE,EAAa,MAGd3tE,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAG1B,IAAKA,EAAS1O,SAAS,KACtB,OAGD,MAAM63D,EAAgB+L,GAAcl1D,EAAUhV,EAAQqyB,GAAW4e,IAChEA,EAAU+X,aAAa2Q,IACtB,MAAM0e,EAAgB1e,EAAOl5D,MAAMyG,QAAQ,KAAM,IAEjD,IAAK0hE,GAA6B/9D,IAAIwtE,EAAc3rE,eACnD,OAGD,MAAMusE,EAAWtf,EAAOl5D,MAAM8J,WAAW,OAEzB,WAAZY,GAAyB8tE,KAIb,WAAZ9tE,GAAwB8tE,IAIxB3sE,EAAQM,IACX+sD,EAAO9zB,YAAY8zB,EAAOz0B,MAAM,CAAEzkC,MAAOu4E,EAAaX,KAKvDzzE,EAAO,CACNG,QAASyC,GAAS4E,SAASjB,GAC3BpL,KAAMsyB,EACNntB,MAAOy0D,EAAOn3D,YACd2C,SAAUw0D,EAAOn3D,aAAey2E,EAAW,EAAI,GAC/Cj5E,SACA8E,SAAAA,MACC,GACD,IAGCwH,EAAQM,KAAOuxD,IAClB9rC,EAASrd,SAAWmpD,EACrB,GACC,EAIJ33D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAjFQ,CACZC,IAAK,+EACLgB,SAAS,GCHV,MAAM/H,GAAW,uBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC/B,EAAQ+B,IAA0B/B,aAAAA,OAAAA,sBAAkB+B,EAAQ,OAQlE5F,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAoCb,SAASoV,EAAMrV,EAAMU,GAEpB,IAAKA,EAAM6F,SAAS,KACnB,OAGD,MAAM2M,EAAO,SAAUlT,EAAOA,EAAKkT,UAAOvS,EAEtC8D,EAAe4G,EAAkB,mBAAoB6H,IAIzDxH,EAAYhL,GAAOhB,MAAM02B,IACxB,MAAMpzB,KAAEA,GAAS0yB,GAAaU,GAE9B,GAAI3xB,EAAe4G,EAAkB,cAAerI,GACnD,OAID,GAAuB,aAAnBozB,EAAUj2B,MAAyD,QAAlCi2B,EAAU11B,MAAMiM,cACpD,OAAO,EAIR,GAAuB,SAAnBypB,EAAUj2B,KACb,OAGD,MAAM8D,EAAQ,aAAa+Y,KAAKoZ,EAAU11B,OAE1C,GAAa,MAATuD,GAA6B,MAAZA,EAAM,IAA0B,MAAZA,EAAM,GAC9C,OAGD,GAAIA,EAAM,GAAG/D,QAAUkL,EACtB,OAGD,MAAM8jE,EAAYtgE,GAAS5O,GAAQya,GAAiBza,GAAQkY,GAAsBlY,GAC5EsK,EAAS3B,OAAO64C,WAAWv9C,EAAM,IAEvCY,EAAO,CACN5E,kBACA8E,GACA/E,OACAmF,MAAO+pE,EAAY94C,EAAU3zB,YAAcwB,EAAMkB,MACjDE,KAAMiF,EAAOvH,WACbiC,QAASyC,GAAS4E,SAAS/B,EAAQA,EAAO6uE,QAAQ/tE,KACjD,GAEJ,CAtFqBvB,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAAC3B,IAEZ,CACC6B,UAAU,EACVD,OAAQe,EACRhB,SAAU,CACT2gB,iBAAkB,CAACniB,EAAUD,GAC7BwwE,YAAa,CAACvwE,EAAUD,QAS3B0C,EAAKmB,aAAaT,IACiB,WAA9BA,EAAO3J,KAAKsK,eAIhB0I,EAAMrJ,EAAQA,EAAOC,OAAO,IAG7BX,EAAKE,WAAWlI,GAAS+R,EAAM/R,EAAMA,EAAK5C,SAyD1C,EAIF+F,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAnGQ,CACZC,IAAK,8DCFN,MAAM/G,GAAW,2BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,IAAqBkV,aAAAA,OAAAA,mDAAiDlV,EAAG,OAsBzFs5E,GAAkBC,IACvB,MAAMC,EATwB,CAAEtxE,EAAG,EAAGC,EAAG,EAAG4U,EAAG,GAW/C,IAAK,MAAM7U,EAAEA,EAACC,EAAEA,EAAC4U,EAAEA,KAAOw8D,EACzBC,EAAItxE,GAAKA,EACTsxE,EAAIrxE,GAAKA,EACTqxE,EAAIz8D,GAAKA,EAGV,OAAOy8D,CAAG,EAIL9yE,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAoBb,IAnBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAERmvE,GAAS3wE,EAAS2wE,IAAS,gBAAgB52E,KAAK42E,KAGnD,CACClvE,OAAQe,EACRhB,SAAU,CACTsqB,gBAAiB,CAAC9rB,EAAUD,IAE7B2B,UAAU,IAKX,OASD,MAcMkvE,EAAuBz5E,GAC5BA,EAAKiH,QAAO,CAACyyE,EAAS3hE,KACrB,MAAM4hE,EAAmBC,EAAgB7hE,GAEzC,OAAOqzD,GAAQuO,EAAkBD,GAAW,EAAIC,EAAmBD,CAAO,GAtE/C,CAAEzxE,EAAG,EAAGC,EAAG,EAAG4U,EAAG,IAkIxC88D,EAAmB55E,IACxB,GAzBsCA,KAKtC,MAAMsO,EAAatO,EAAK+B,QAAU/B,EAAK+B,OAAOA,OAE9C,GAAIuM,GAAkC,WAApBA,EAAWnO,MAAqBmO,EAAW5N,MAAO,CACnE,MAAMm5E,EAAcvrE,EAAW5N,MAAMiM,cAAcxF,QAAQ,KAAM,IAEjE,OACC+hE,GAA6Bp+D,IAAI+uE,IAAgBxQ,GAAwBv+D,IAAI+uE,EAE/E,CAEA,OAAO,CAAK,EAURC,CAA8B95E,GACjC,MApI2B,CAAEiI,EAAG,EAAGC,EAAG,EAAG4U,EAAG,GAuI7C,OAAQ9c,EAAKG,MACZ,IAAK,YACL,IAAK,QACL,IAAK,KACL,IAAK,MACJ,MAxFwBH,IACtByE,EAAe4G,EAAkB,kBAAmBrL,EAAK+C,YArDjC,CAAEkF,EAAG,EAAGC,EAAG,EAAG4U,EAAG,GAyDtCguD,GAAoB9qE,GAmFlB+5E,CAAkB/5E,GAC1B,IAAK,SACJ,MA/DwBA,KAG1B,MAAMg6E,EAAWh6E,EAAKU,MAAMiM,cAE5B,GAAiB,WAAbqtE,EACH,MArF2B,CAAE/xE,EAAG,EAAGC,EAAG,EAAG4U,EAAG,GAwF7C,IAAIm9D,EAEJ,GAAIx1E,EAAe4G,EAAkB,kBAAmB2uE,GACvDC,EA3F2B,CAAEhyE,EAAG,EAAGC,EAAG,EAAG4U,EAAG,OA4FtC,IAAIqsD,GAAgCr+D,IAAIkvE,EAAS7yE,QAAQ,KAAM,KAErE,OAAO2jE,GAAoB9qE,GAE3Bi6E,EAAiBnP,GAAoB9qE,EAAKmlC,MAAM,CAAExlC,MAAO,KAC1D,CAEA,OAAO05E,GAAe,CAACY,EAAgBR,EAAoBz5E,IAAO,EA2CzDk6E,CAAkBl6E,GAC1B,IAAK,WAEJ,OAAOq5E,GAAer5E,EAAK+V,KAAKiG,GAAM49D,EAAgB59D,MACvD,QACC,MAnJ0B,CAAE/T,EAAG,EAAGC,EAAG,EAAG4U,EAAG,GAmJlB,GAIrB7U,EAAGC,EAAG4U,GAAK1R,EAAQ6K,MAAM,KAAKF,KAAKwG,GAAM5T,OAAO64C,WAAWjlC,KAElE9S,EAAaxB,GACbwB,EAAavB,GACbuB,EAAaqT,GAEb,MAAMq9D,EAAiB,CAAElyE,IAAGC,IAAG4U,KAE/BxR,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAK1B,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAE1D0uB,GAAyBqqB,IAI9BlB,GAAckB,EAAkBprE,EAAQqyB,GAAW4+C,IAE9C9F,GAAQqO,EAAoBvI,GAAeiJ,GAAkB,GAChEt1E,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAASg/D,EAAkBjgE,GAC7C/F,KAAM4P,GAER,GAGH,GACC,EAIJxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA3MQ,CACZC,IAAK,kECpBN,MAAM/G,GAAW,cAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,uBACVnB,SAAU,2BAQLzE,GAAQ2E,GACN,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,aAKpBiB,EAAK6B,QAEN7B,EAAK6B,OAAO26B,QAES,mBAArBx8B,EAAK6B,OAAO6nB,WAGMr0B,IAAlB2K,EAAKg4B,SAEL,OAGD,MAAM0G,OAAEA,GAAW1+B,EAAK6B,OAAO5L,MAEf,WAAZ6J,GAAyB4+B,GAC5BnlC,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAAS4E,SAClBrM,KAAMsL,EACNpG,KAAM,IAIQ,UAAZkG,GAAuB4+B,GAC1BnlC,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAASyD,SAClBlL,KAAMsL,EACNpG,KAAM,GAER,EAIFuB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KApDQ,CACZC,IAAK,gxFCEN,MAAM/G,GAAW,2BAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,qCAAAlN,OAA0CkN,EAAQ,OAQhExO,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,kBAAmB,qBAC5B6qE,iBAAkB,CAACvxE,EAAUD,GAC7B4tE,YAAa,CAAC3tE,EAAUD,IAEzB2B,UAAU,KAQZe,EAAKqK,WAAW2c,IACf,MAAMrd,EAAWqd,EAASrd,SACpBi8B,EAAY5e,EAAS4e,UAEtB4yB,GAAqBxxC,KAItB4e,EAAU18B,MAAM+H,GAAM45D,GAAmB55D,MAI7C4tD,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAa/nB,UAAUwuB,IACtB,IAAKvB,GAA6BuB,GACjC,OAGD,GACClzE,EAAe4G,EAAkB,SAAU,oBCvDjD,SAA0C4J,GACzC,IAAK,SAASrS,KAAKqS,GAClB,OAAO,EAGR,IAAKA,EAAS1O,SAAS,KACtB,OAAO,EAGR,MAAM8zE,EAAoBplE,EAAStI,cAEnC,OAAI0tE,IAAsBplE,IAItBqlE,GAAQ/zE,SAAS8zE,KAIjB1R,GAAkB79D,IAAIuvE,KAItBE,GAAWh0E,SAAS8zE,EAKxB,CD4BKG,CAAgB7C,EAAQj3E,OAExB,OAGD,GACC+D,EAAe4G,EAAkB,SAAU,sBACZ,iBAAtBssE,EAAQlsB,UAEjB,OAGD,GAAIhnD,EAAe4G,EAAkB,mBAAoBssE,EAAQlsB,WAChE,OAGD,GAAIhnD,EAAe4G,EAAkB,cAAessE,EAAQj3E,OAC3D,OAGD,MAAM+5E,EAAU9C,EAAQj3E,MAClBg6E,EAAmBD,EAAQ9tE,cAGhCg8D,GAAkB79D,IAAI4vE,IAEtBJ,GAAQ/zE,SAASk0E,IACjBF,GAAWh0E,SAASm0E,IAKrB71E,EAAO,CACNG,QAASyC,GAASyD,SAASuvE,GAC3Bz6E,KAAMsyB,EACNntB,MAAOwyE,EAAQl1E,qBACfsC,GACA9E,SACAoF,KAAMo1E,GACL,GACD,IACD,GACD,EAIJh0E,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA9FQ,CACZC,IAAK,kEEVN,MAAM/G,GAAW,qBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC/B,EAAQ+B,IAA0B/B,aAAAA,OAAAA,sBAAkB+B,EAAQ,OASlE5F,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAAC,QAAS,UAErB,CACCC,OAAQe,EACRhB,SAAU,CACTmsE,YAAa,CAAC3tE,EAAUD,IAEzB2B,UAAU,KAQZe,EAAKqK,WAAW2c,IACf,IAAIkzC,EAAclzC,EAAS/uB,KAAK0R,UAAYqd,EAAS/uB,KAAK0R,SAASzR,IACnE,MAAMyR,EAAWuwD,GAA4BlzC,EAASrd,SAChDi8B,EAAY5e,EAAS4e,UAEtB4yB,GAAqBxxC,KAItB4e,EAAU18B,MAAM+H,GAAM45D,GAAmB55D,MAI7C4tD,GAAcl1D,EAAUhV,EAAQqyB,GAAWolD,IAC1CA,EAAYvuB,UAAU4S,IACrB,IAAKqa,GAA6Bra,GACjC,OAGD,GAAI6M,GAA0B99D,IAAIixD,EAAIr7D,OACrC,OAGD,GAAI+D,EAAe4G,EAAkB,cAAe0wD,EAAIr7D,OACvD,OAGD,MAAM+B,EAAcs5D,EAAIt5D,YAClB/B,EAAQq7D,EAAIr7D,MAEZi6E,EAA4B,UAAZvvE,EAAsB1K,EAAMiM,cAAgBjM,EAAMkM,cAExE,GAAIlM,IAAUi6E,EAId,GAAIpuE,EAAQM,IACX,GAAI24D,EAAa,CAMhB,GALAA,EACCA,EAAYljE,MAAM,EAAGG,GACrBk4E,EACAnV,EAAYljE,MAAMG,EAAc/B,EAAMR,QAET,MAA1BoyB,EAAS/uB,KAAK0R,SACjB,MAAM,IAAInP,MAAM,sCAGjBwsB,EAAS/uB,KAAK0R,SAASzR,IAAMgiE,CAC9B,MACClzC,EAASrd,SACRqd,EAASrd,SAAS3S,MAAM,EAAGG,GAC3Bk4E,EACAroD,EAASrd,SAAS3S,MAAMG,EAAc/B,EAAMR,aAM/C2E,EAAO,CACNG,QAASyC,GAAS4E,SAAS3L,EAAOi6E,GAClC36E,KAAMsyB,EACNntB,MAAO1C,WACPsC,GACA9E,UACC,GACD,IACD,GACD,EAIJwG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArGQ,CACZC,IAAK,2DACLgB,SAAS,GCRV,MAAM/H,GAAW,gBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAWie,GAAC,YAAAviB,OAAiBuiB,EAAC,aAYzB7jB,GAAO,CAAC2E,EAASC,EAAkBkB,KACxC,MAAMquE,EAA2B,WAAZxvE,EALC,IACA,IAKhByvE,EAA6B,WAAZzvE,EALD,IADA,IAQtB,MAAO,CAACE,EAAMrL,KAiBb,IAhBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAAC,SAAU,WAEtB,CACCC,OAAQe,EACRhB,SAAU,CACTywE,YAAa,CAACtyE,IAEf+B,UAAU,IAKX,OAGD,MAAMuwE,GACLzvE,QAAqD1K,IAAjC0K,EAAiByvE,aAClCzvE,EAAiByvE,YA8HrB,SAASpC,EAAkB14E,EAAMU,EAAOi4E,GAEvC,MAAMlI,EAAe,GAGrB,GAAK/vE,EAAM6F,SAASs0E,MAIhBjsE,GAAS5O,IAAuB,YAAdA,EAAKqC,MAA3B,CAMAqJ,EAAYhL,GAAOhB,MAAM02B,IACxB,GAAuB,WAAnBA,EAAUj2B,MAAqBi2B,EAAUx1B,QAAUi6E,EAAgB,CACtE,MAAME,EAAc3kD,EAAU11B,MAAM6F,SAASq0E,GAE7C,GAAIE,GAAeC,EAElB,OAGD,MAAMz/C,EAAYlF,EAAU3zB,YAG5B,GAAI8J,EAAQM,MAAQkuE,EAAa,CAChC,MAAMx/C,EAAaD,EAAYlF,EAAU11B,MAAMR,OAAS26E,EAAe36E,OAEvEuwE,EAAajuE,KAAK84B,EAAWC,EAC9B,MACC12B,EAAO,CACNG,QAASyC,GAAS4E,SAASjB,GAC3BpL,OACAmF,MAAOwzE,EAAS34E,GAAQs7B,EACxBr7B,SACA8E,SAAAA,IAGH,KAGD,IAAK,MAAMi2E,KAAYvK,EAClB7hE,GAAS5O,GACZA,EAAKiM,OAASgvE,GAAaj7E,EAAKiM,OAAQ+uE,EAAUJ,GAElD56E,EAAKU,MAAQu6E,GAAaj7E,EAAKU,MAAOs6E,EAAUJ,EAlClD,CAqCD,CA7KAtvE,EAAK5L,MAAMM,IACV,OAAQA,EAAKG,MACZ,IAAK,SACJu4E,EAAkB14E,EAAMA,EAAKiM,OAAQwO,IACrC,MACD,IAAK,OACJi+D,EAAkB14E,EAAMA,EAAKU,MAAOwX,IACpC,MACD,IAAK,QAUP,SAAmBoa,GAClB,IAAKwxC,GAAqBxxC,GACzB,OAGD,IAAKA,EAASrd,SAAS1O,SAAS,OAAS+rB,EAASrd,SAAS1O,SAAS,KACnE,OAID,MAAMkqE,EAAe,GAErBtG,GAAc73C,EAASrd,SAAUhV,EAAQqyB,GAAW4+C,IACnD,IAAI6B,GAAgB,EAEpB7B,EAAa5oB,gBAAgB6oB,IAC5B,GAAKA,EAAcviB,OAAnB,CAIA,GAAIuiB,EAAcxkB,YAAciuB,GAAgBE,EAAa,CAC5DpxE,EAAaynE,EAAczwE,OAC3B,MAAMw6E,EAAqB/J,EAAczwE,MAAM6F,SAASq0E,GAGxD,GAFyBzJ,EAAczwE,MAAM6F,SAASs0E,GAGrD,OAGGK,IACC3uE,EAAQM,KACXkmE,GAAgB,EAChB5B,EAAcxkB,UAAYkuB,GAE1Bh2E,EAAO,CACNG,QAASyC,GAAS4E,SAAqB,WAAZjB,EAAuB,SAAWA,GAC7DpL,KAAMsyB,EACNntB,MAAOgsE,EAAc1uE,YAAc0uE,EAAc7iB,SAAS,SAC1DruD,SACA8E,SAAAA,KAIJ,CAEA,GAAIosE,EAAcxkB,YAAckuB,EAAgB,CAC/C,GAAIC,EAAa,CAChBpxE,EAAaynE,EAAczwE,OAC3B,MAAMw6E,EAAqB/J,EAAczwE,MAAM6F,SAASq0E,GAGxD,GAFyBzJ,EAAczwE,MAAM6F,SAASs0E,GAgBrD,YAbItuE,EAAQM,KACXkmE,GAAgB,EAChB5B,EAAcxkB,UAAYiuB,GAE1B/1E,EAAO,CACNG,QAASyC,GAAS4E,SAASjB,GAC3BpL,KAAMsyB,EACNntB,MAAOgsE,EAAc1uE,YAAc0uE,EAAc7iB,SAAS,SAC1DruD,SACA8E,SAAAA,MAOH,GAAIm2E,EACH,MAEF,CAEI3uE,EAAQM,KACXkmE,GAAgB,EAChB5B,EAAcxkB,UAAYiuB,GAE1B/1E,EAAO,CACNG,QAASyC,GAAS4E,SAASjB,GAC3BpL,KAAMsyB,EACNntB,MAAOgsE,EAAc1uE,YAAc0uE,EAAc7iB,SAAS,SAC1DruD,SACA8E,SAAAA,IAGH,CAnEA,CAmEA,IAGGguE,IACHzgD,EAASrd,SAAWi8D,EAAanuE,WAClC,IAGD,IAAK,MAAMi4E,KAAYvK,EACtBn+C,EAASrd,SAAWgmE,GAAa3oD,EAASrd,SAAU+lE,EAAUJ,EAEhE,CAzGG/B,CAAU74E,GACJ,GAmKT,CACA,EASF,SAASi7E,GAAaztE,EAAQrI,EAAOgC,GACpC,OAAOqG,EAAOrJ,UAAU,EAAGgB,GAASgC,EAAUqG,EAAOrJ,UAAUgB,EAAQgC,EAAQjH,OAChF,CAEAuG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KApOQ,CACZC,IAAK,sDACLgB,SAAS,GCXV,MAAM/H,GAAW,yCAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAU,CAACkP,EAAY/N,IAA0B+N,aAAAA,OAAAA,sBAAsB/N,EAAQ,OAQ1E8uE,GAAkC,IAAIvxE,IAAI,CAC/C,SACA,UACA,eACA,gBACA,eACA,eACA,aAGKwxE,GAAoB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,QAoFpE,MAAM30E,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CAAEuF,OAAQc,KAMjEE,EAAKE,WAAWlI,IACf,IAAKyxB,GAA4BzxB,KAAUspB,GAAyBtpB,EAAK4P,MACxE,OAGD,MAAMA,EAAO5P,EAAK4P,KACZxS,EAAQ4C,EAAK5C,MAEb26E,EAAiBhoE,GAAkBH,EAAKvG,eAE9C,GAhGH,SAA8BjM,GAC7B,OAAO06E,GAAkB5mE,MAAMhE,GAAS9P,EAAM6F,SAASiK,IACxD,CA8FO8qE,CAAqB56E,KAxFCgU,EAwF8B2mE,GAvFnDF,GAAgCrwE,IAAI4J,IAwFxC,OAzFJ,IAA6BA,EA6F1B,MAAM6mE,EAAoB,GAU1B,GARA7vE,EAAYhL,GAAOhB,MAAM02B,IACD,SAAnBA,EAAUj2B,MAIdo7E,EAAkB/4E,KAAKkJ,EAAY1K,UAAUo1B,GAAW,IAGrDmlD,EAAkBr7E,QAAU,GAAKq7E,EAAkBr7E,OAAS,EAC/D,OAGD,MAMMs7E,EAtGT,SAAqBC,EAAKlvD,EAAOmvD,EAAQpvD,GACxC,MAAMqvD,EAAWF,EAAI9uE,cACfivE,EAAarvD,EAAM5f,cACnBkvE,EAAcH,GAAUA,EAAO/uE,cAC/BmvE,EAAYxvD,GAAQA,EAAK3f,cAE/B,OAsBD,SAA+B8uE,EAAKlvD,EAAOmvD,EAAQpvD,GAClD,OAAImvD,IAAQlvD,IAIJkvD,IAAQC,IAAWA,IAAWpvD,IAASA,KAAYovD,IAAWpvD,EACvE,CA5BKyvD,CAAsBJ,EAAUC,EAAYC,EAAaC,GACrD,CAACL,GAoCV,SAAgCA,EAAKlvD,EAAOmvD,EAAQpvD,GACnD,OAAQmvD,IAAQC,GAAUnvD,IAAUD,GAAUmvD,IAAQC,IAAWpvD,GAAQmvD,IAAQlvD,CAClF,CAnCKyvD,CAAuBL,EAAUC,EAAYC,EAAaC,GACtD,CAACL,EAAKlvD,GA2Cf,SAAkC0vD,EAAM1vD,EAAO2vD,EAAS5vD,GACvD,OAAOC,IAAUD,CAClB,CA1CK6vD,CAAyBR,EAAUC,EAAYC,EAAaC,GACxD,CAACL,EAAKlvD,EAAOmvD,GAGd,CAACD,EAAKlvD,EAAOmvD,EAAQpvD,EAC7B,CA6EwB8vD,CACpBb,EAAkB,IAAM,GACxBA,EAAkB,IAAM,GACxBA,EAAkB,IAAM,GACxBA,EAAkB,IAAM,IAEe/oD,OAAO5tB,SAAS0xB,KAAK,KACvD+lD,EAAmBd,EAAkBjlD,KAAK,KAE5CklD,EAAmB7uE,gBAAkB0vE,EAAiB1vE,gBAItDJ,EAAQM,IACXvJ,EAAK5C,MAAQ4C,EAAK5C,MAAMyG,QAAQzG,EAAO86E,GAEvC32E,EAAO,CACNG,QAASyC,GAASyD,SAASxK,EAAO86E,GAClCx7E,KAAMsD,EACNrD,SACA8E,SAAAA,KAEF,GACC,EAIJ0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArKQ,CACZC,IAAK,+EACLgB,SAAS,GCRV,MAAM/H,GAAW,YAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC/B,EAAQ+B,IAA0B/B,aAAAA,OAAAA,sBAAkB+B,EAAQ,OASlE5F,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KAiBb,SAASoV,EAAMrV,EAAMs8E,EAAc3D,GAElC,MAAMjS,EAAW,GAMjB,SAAS6V,EAAanmD,GACrB,MAAMhzB,OAAEA,EAAMJ,KAAEA,GAAS0yB,GAAaU,GAEtC,IAAKhzB,IAAWJ,EAAM,OAAO,EAE7B,MAAMw5E,EAA2B,UAAZpxE,EAAsBpI,EAAK2J,cAAgB3J,EAAK4J,cAErE,GAAI5J,IAASw5E,EACZ,OAAO,EAGR,MAAMr3E,EAAQwzE,EAAS34E,GAQvB,OANA0mE,EAASlkE,KAAK,CACb2C,MAAOA,EAAQixB,EAAU3zB,YAAcW,EAAOlD,OAC9CkF,SAAUD,EAAQixB,EAAU7zB,eAC5ByC,QAASyC,GAAS4E,SAASrJ,EAAMw5E,MAG3B,CACR,CAEA,MAAM1jE,EAAcpN,EAAY4wE,GAAc58E,MAAM02B,IAEnD,IAAI4pB,GAAU,EACd,MAAMt/C,EAAQ01B,EAAU11B,MAExB,GAAuB,aAAnB01B,EAAUj2B,MAA+C,QAAxBO,EAAMiM,cAC1C,OAAO,EAGJjM,EAAM6F,SAAS,MAClB7F,EAAMuV,MAAM,KAAKzB,MAAMogB,GACf2nD,WACHnmD,GAAS,GAAA,CACZ3zB,YAAa/B,EAAMgC,QAAQkyB,GAAOA,EAAI10B,OAAS,EAC/CQ,MAAOk0B,OAKVorB,EAAUu8B,EAAanmD,GAEnB4pB,GAAWzzC,EAAQM,MACtBupB,EAAU11B,MAAoB,UAAZ0K,EAAsB1K,EAAMiM,cAAgBjM,EAAMkM,cACrE,IAGD,GAAI85D,EAASxmE,OACZ,GAAIqM,EAAQM,IACP,SAAU7M,GAAsB,UAAdA,EAAKqC,KAC1BrC,EAAKiM,OAAS6M,EAAY/V,WAChB,UAAW/C,IACrBA,EAAKU,MAAQoY,EAAY/V,iBAG1B,IAAK,MAAMgN,KAAO22D,EACjB7hE,EAAO,CACNM,MAAO4K,EAAI5K,MACXC,SAAU2K,EAAI3K,SACdJ,QAAS+K,EAAI/K,QACbhF,OACAC,SACA8E,SAAAA,IAKL,CA5FqB8E,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,QAAS,aA4FrBiB,EAAKmB,aAAaT,KACZ,WAAWpJ,KAAKoJ,EAAO3J,OAAW,aAAc2J,IAIrDqJ,EAAMrJ,EAAQA,EAAOC,OAAQwO,GAAiB,IAE/CnP,EAAKE,WAAWlI,GAAS+R,EAAM/R,EAAMA,EAAK5C,MAAOwX,MAAuB,EAI1EzR,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAnHQ,CACZC,IAAK,kDACLgB,SAAS,GCVV,MAAM01D,GAAcC,GAAsCngC,QAUpDv9B,GAAW,kBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWlI,GAAI,4BAAA+E,OAAiC/E,EAAI,OAQ/CyD,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KA0Bb,SAASoV,EAAMrV,EAAMU,EAAOi4E,GAI3B,MAAM7/D,EAAcpN,EADpBhL,EAAQA,EAAMyG,QAAQ,MAAO,MAG7B2R,EAAYpZ,MAAM02B,IAGjB,GACoB,aAAnBA,EAAUj2B,OACyB,QAAlCi2B,EAAU11B,MAAMiM,eAChBlI,EAAe4G,EAAkB,kBAAmB+qB,EAAU11B,QAE/D,OAAO,EAGR,MAAM0C,OAAEA,EAAMJ,KAAEA,GAAS0yB,GAAaU,GAEtC,IAAKhzB,IAAWJ,EACf,OAGD,GAAIyB,EAAe4G,EAAkB,cAAerI,GACnD,OAGD,GAAIk2B,GAAMpuB,IAAI9H,EAAK2J,gBAAyC,MAAvB3J,EAAK2J,cACzC,OAGD,GAA2B,MAAvB3J,EAAK2J,cAAuB,CAC/B,GACCiC,GAAS5O,IACK,UAAdA,EAAKqC,MACLrC,EAAKiM,OAAOU,cAAcpG,SAAS,cAClC,CACD,IAAIk2E,GAAa,EAgBjB,GAdAja,GAAYxiE,EAAKiM,QAAQvM,MAAK,CAACg9E,EAAWva,EAAIwa,KAC7C,MAAMC,EAAgBD,EAAWA,EAAWz8E,OAAS,GAErD,GACCw8E,EAAUh8E,MAAMiM,cAAcpG,SAAS,eACvCq2E,GACAA,EAAcn6E,cAAgB2zB,EAAU3zB,YAIxC,OAFAg6E,GAAa,GAEN,CACR,IAGGA,EACH,MAEF,CAEA,GAAkB,SAAdz8E,EAAKG,KAAiB,CACzB,GAAgC,qBAA5BH,EAAKkT,KAAKvG,cACb,OAGD,GAAI,gCAAgC/J,KAAKlC,GAAQ,CAChD,MAAMm8E,EAAW/jE,EAAYnZ,MAAMkV,MACjCmH,GAAqC,cAA/B3I,GAAkB2I,EAAEtb,SAG5B0I,EAAOyzE,GACPzzE,EAAO,UAAWyzE,GAClB,MAAMC,EAAmBD,EAASl9E,MAAMk9E,EAASl9E,MAAMO,OAAS,GAEhEkJ,EAAO0zE,GAGP,GAF+BA,EAAiBr6E,aAElB2zB,EAAU3zB,YACvC,MAEF,CACD,CACD,CAEA,MAAM0C,EAAQwzE,EAAS34E,GAEvB6E,EAAO,CACNM,MAAOA,EAAQixB,EAAU3zB,YAAcW,EAAOlD,OAC9CkF,SAAUD,EAAQixB,EAAU7zB,eAC5ByC,QAASyC,GAASyD,SAASlI,GAC3BhD,OACAC,SACA8E,SAAAA,IACC,GAEJ,CAtHqB8E,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCd,OAAQe,EACRhB,SAAU,CACT+uE,YAAa,CAACvwE,EAAUD,GACxBgyC,gBAAiB,CAAC/xC,EAAUD,IAE7B2B,UAAU,MA8GZe,EAAKmB,YAAY,YAAaT,IACxBD,EAAuBC,IAI5BqJ,EAAMrJ,EAAQA,EAAOC,OAAQwO,GAAiB,IAE/CnP,EAAKE,WAAWlI,IACVyxB,GAA4BzxB,IAIjC+R,EAAM/R,EAAMA,EAAK5C,MAAOwX,GAAsB,IAC7C,EAIJzR,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAlJQ,CACZC,IAAK,yDCRN,IAAAixE,GAAA,SAA0D3yE,GACzDA,EAAKkB,KAAKE,WAAWlI,IACpB,IAAKyxB,GAA4BzxB,KAAUspB,GAAyBtpB,EAAK4P,MACxE,OAGD,MAAMoe,EAAahuB,EAAKP,WAExB6rB,GACC,CACCzhB,OAAQmkB,EACRzC,OAAQ,IACRQ,kBAAmB,SAEnBprB,IACA,MAAM+4E,EAAoB5yE,EAAK6yE,eAC5B7yE,EAAK6yE,eAAe3rD,EAAYrtB,GAChCA,EAAM8sB,YAEiB,IAAtBisD,GAeP,SAAoB7vE,EAAQhI,EAAOnF,GAClCoK,EAAK0F,gBAAgB,CACpB3C,SACAhI,QACA4K,IAAM/K,IACDoF,EAAKyC,KAAOzC,EAAKyC,IAAI7M,EAAMmF,IAI/BN,EAAO,CACNG,UACAhF,OACAmF,QACAlF,OAAQmK,EAAKnK,OACb8E,SAAUqF,EAAK6F,iBACd,GAGL,CA7BGo3D,CAAW/1C,EAAY0rD,EAAmB15E,EAAK,GAEhD,GA4BF,EC/DD,MAAMyB,GAAW,kCAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAgB,IAAM,8BACtBT,wBAAyB,IAAM,mDAC/BC,wBAAyB,IAAM,0DAQ1B3K,GAAQ2E,IACb,MAAM4H,EAAUvC,GAAkB,UAAWrF,EAAS3D,IAEtD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,oBAAqB,uBAO3C0yE,GAAgC,CAC/BzxE,OACArL,SACA6P,gBAAiBkD,EAAQH,0BACzB5C,gBAAiBlL,IAChB,CACF,EAGF0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA7BQ,CACZC,IAAK,yECNN,MAAM/G,GAAW,6BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC/B,EAAQ+B,IAA0B/B,aAAAA,OAAAA,sBAAkB+B,EAAQ,OASlE5F,GAAO,CAAC2E,EAASgL,EAAmB7J,IAClC,CAACjB,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,QAAS,YAOrBiB,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAKD,IAFiBA,EAASrd,SAEZ1O,SAAS,KACtB,OAGD,MAAM63D,EAAgB+L,GACrB73C,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAC/DhV,EACAqyB,GACC4+C,IACAA,EAAajoB,aAAaitB,IACzB,MAAMtc,EAASsc,EAAWx1E,MAE1B,IAAKsgD,GAAyB4Y,GAC7B,OAGD,GACCA,EAAOrzD,SAAS,OAChBsiE,GAA6B/9D,IAAI8uD,EAAOjtD,cAAcrK,MAAM,IAE5D,OAGD,MAAM46E,EACO,UAAZ9xE,EAAsBwuD,EAAOjtD,cAAgBitD,EAAOhtD,cAEjDgtD,IAAWsjB,IAIX3wE,EAAQM,IACXqpE,EAAWx1E,MAAQw8E,EAKpBr4E,EAAO,CACNG,QAASyC,GAAS4E,SAASutD,EAAQsjB,GACnCl9E,KAAMsyB,EACNntB,MAAO+wE,EAAWzzE,qBAClBsC,GACA9E,WACC,GACD,IAIAsM,EAAQM,KAAOuxD,IACd9rC,EAAS/uB,KAAK0R,SACjBqd,EAAS/uB,KAAK0R,SAASzR,IAAM46D,EAE7B9rC,EAASrd,SAAWmpD,EAEtB,GACC,EAIJ33D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KApFQ,CACZC,IAAK,mEACLgB,SAAS,GCRV,MAAM/H,GAAW,+BAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAe,IAAM,kCACrBK,cAAe,IAAM,kCACrBpB,wBAAyB,IAAM,wDAC/BC,wBAAyB,IAAM,0DAS1B/K,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,QAAS,qBAAsB,uBAIpD,OAID,IAAIw6D,EA0BJ,GAxBAkY,GAAgC,CAC/BzxE,OACArL,SACA6P,gBAAiBkD,EAAQjS,MACzBkP,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACswE,EAAUh4E,KAGX,GAAIA,GAFe+S,GAAsBilE,GAGxC,OAAO,EAGRtY,EAAUA,GAAW,IAAI/tD,IACzB,MAAMywD,EAAe1C,EAAQl3C,IAAIwvD,IAAa,GAK9C,OAHA5V,EAAa/kE,KAAK2C,GAClB0/D,EAAQ7wD,IAAImpE,EAAU5V,IAEf,CAAI,EAEX,OAGA1C,EACH,IAAK,MAAOvhE,EAAMikE,KAAiB1C,EAAQ/8D,UAC1C,IAAK,MAAM3C,KAASoiE,EAAaj5C,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CACvD,MAAMvH,EAAQ2C,EAAoBC,GAC5Bu1C,EAAa1zC,EAAQ+S,GAAsB5U,GAC3C85E,EAAc18E,EAAM4B,MAAM,EAAGu2C,EAAa,GAChD,IAAIwkC,EAAa38E,EAAM4B,MAAMu2C,EAAa,GAEtCztC,EAAQZ,WAAW,UACtB6yE,EAAaA,EAAWl2E,QAAQ,OAAQ,KAC9BiE,EAAQZ,WAAW,WAC7B6yE,EAAaA,EAAWl2E,QAAQ,OAAQ,KAGzCuR,GAAoBpV,EAAM85E,EAAcC,EACzC,CAEF,CACA,EAGF52E,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArEQ,CACZC,IAAK,qEACLgB,SAAS,GCOV,MAAM/H,GAAW,qBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC/B,EAAQ+B,IAA0B/B,aAAAA,OAAAA,sBAAkB+B,EAAQ,OASlE+uE,GAAoB,IAAIxxE,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MACjD0zE,GAAe,IAAI1zE,IAAI,CAAC,WAAY,iBAAkB,iBACtD2zE,GAAkB,IAAI3zE,IAAI,CAAC,cAAe,oBAAqB,oBAE/D4zE,GAAkC,IAAI1mE,IAE5C,IAAK,MAAM+5B,KAAQ/X,GAClB0kD,GAAgCxpE,IAAI68B,EAAKlkC,cAAekkC,GAIzD,MAAMpqC,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAAC,QAAS,UAErB,CACCC,OAAQe,EACRhB,SAAU,CACT2gB,iBAAkB,CAACniB,EAAUD,GAC7B60E,eAAgB,CAAC50E,EAAUD,GAC3BgyC,gBAAiB,CAAC/xC,EAAUD,GAC5B80E,qBAAsB,CAACl1E,IAExB+B,UAAU,KAQZe,EAAKE,WAAWlI,IACf,MAAM4P,EAAO5P,EAAK4P,KACZyqE,EAAgBr6E,EAAK4P,KAAKvG,cAC1BjM,EAAQ4C,EAAK5C,MAEb+c,EAAS/R,EAAYrI,EAAoBC,IAE/C,IAAI08C,GAAU,EAEdviC,EAAO/d,MAAMM,IACZ,MAAM85B,EAAiB95B,EAAKU,MAAMiM,cAGlC,GAAIqsB,GAAqBluB,IAAIgvB,GAC5B,OAID,GACe,aAAd95B,EAAKG,OACe,QAAnB25B,GACmB,QAAnBA,GACmB,YAAnBA,GACmB,aAAnBA,GACmB,SAAnBA,GAED,OAAO,EAKR,GACe,aAAd95B,EAAKG,MACLsE,EAAe4G,EAAkB,kBAAmByuB,GAEpD,OAAO,EAGR,MAAM2kC,EAAUz+D,EAAKU,OAEfsC,KAAEA,GAAS0yB,GAAa11B,GAG9B,GACe,SAAdA,EAAKG,OACJgb,GAAsBnb,EAAKU,QAC5BA,EAAM6F,SAAS,MACf60E,GAAkBtwE,IAAI2zD,IACtBz7D,EAEA,OAGD,GACmB,cAAlB26E,IACCvlD,GAA2BttB,IAAIgvB,KAC/BhC,GAAsBhtB,IAAIgvB,GAE3B,OAGD,GAAsB,mBAAlB6jD,IAAuC7lD,GAAsBhtB,IAAIgvB,GACpE,OAGD,GACmB,SAAlB6jD,IACC9lD,GAAsB/sB,IAAIgvB,KAC1B5C,GAAmBpsB,IAAIgvB,GAExB,OAGD,GAAsB,gBAAlB6jD,IAAoCzmD,GAAmBpsB,IAAIgvB,GAC9D,OAGD,GACmB,sBAAlB6jD,GCjJL,SAA6Dj9E,GAC5D,MAAMo5B,EAAiBp5B,EAAMiM,cAE7B,OACC6rB,GAAyB1tB,IAAIgvB,KAC7BnxB,OAAO0T,SAAS1T,OAAOsU,SAAS6c,EAAgB,IAMjD,CDuII8jD,CAAmC9jD,GAEnC,OAGD,GAAsB,kBAAlB6jD,GEvJR,SAAyDj9E,GACxD,MAAMo5B,EAAiBp5B,EAAMiM,cAE7B,OACC8rB,GAAqB3tB,IAAIgvB,KACzBnxB,OAAO0T,SAAS1T,OAAOsU,SAAS6c,EAAgB,IAMjD,CF4I4C+jD,CAA+B/jD,GACvE,OAGD,GAAIwjD,GAAaxyE,IAAI6yE,KAAmBtlD,GAAgBvtB,IAAIgvB,GAC3D,OAGD,GAAIyjD,GAAgBzyE,IAAI6yE,KAAmBrlD,GAAmBxtB,IAAIgvB,GACjE,OAGD,GAAsB,cAAlB6jD,IAAkCplD,GAAiBztB,IAAIgvB,GAC1D,OAGD,GACmB,eAAlB6jD,IACC9kD,GAA2B/tB,IAAIgvB,KAC/BpB,GAAsB5tB,IAAIgvB,GAE3B,OAGD,GAAsB,oBAAlB6jD,IAAwCjlD,GAAsB5tB,IAAIgvB,GACrE,OAGD,GAAIr1B,EAAe4G,EAAkB,iBAAkBozD,GACtD,OAGD,GAAIh6D,EAAe4G,EAAkB,mBAAoB6H,GACxD,OAGD,MAAM4qE,EAAmBrf,EAAQsf,oBACjC,IAAIC,EAAkB,KAGtB,MAAMN,EACJryE,GAAoBA,EAAiBqyE,uBAAyB,EAchE,OAPCM,EAJY,UAAZ5yE,GACAoyE,GAAgC1yE,IAAIgzE,IACpCJ,EAEkBF,GAAgC7vD,IAAImwD,GAChC,UAAZ1yE,EACQqzD,EAAQ9xD,cAER8xD,EAAQ7xD,cAGvB6xD,IAAYuf,EAIZzxE,EAAQM,KACXmzC,GAAU,OACVhgD,EAAKU,MAAQs9E,SAKdn5E,EAAO,CACNG,QAASyC,GAAS4E,SAASoyD,EAASuf,GACpCh+E,KAAMsD,EACN6B,MAAO+S,GAAsB5U,GAAQtD,EAAKyC,YAC1CxC,SACA8E,SAAAA,UAhBD,CAiBE,IAGCwH,EAAQM,KAAOmzC,IAClB18C,EAAK5C,MAAQ+c,EAAO1a,WACrB,GACC,EAIJ0D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAlNQ,CACZC,IAAK,2DACLgB,SAAS,GG1BV,MAAM/H,GAAW,iCAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAe,IAAM,6BACrBb,uBAAwB,IAAM,kDAC9BC,uBAAwB,IAAM,yDASzBjL,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,UAAWrF,EAAS3D,IAEtD,MAAO,CAAC6D,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,oBAAqB,sBAI1C,OAID,IAAIw6D,EAwCJ,GAtCAkY,GAAgC,CAC/BzxE,OACArL,SACA6P,gBAAiBkD,EAAQD,aACzB9C,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACswE,EAAUh4E,KAGX,GAAIA,GAFe+S,GAAsBilE,GAGxC,OAAO,EAGRtY,EAAUA,GAAW,IAAI/tD,IACzB,MAAMywD,EAAe1C,EAAQl3C,IAAIwvD,IAAa,GAK9C,OAHA5V,EAAa/kE,KAAK2C,GAClB0/D,EAAQ7wD,IAAImpE,EAAU5V,IAEf,CAAI,EAEX,KACH0V,eAAgB,CAAC3rD,EAAYrtB,KAC5B,MAAMovE,EAAY/hD,EAAWntB,UAAUF,EAAMmB,SAAUksB,EAAWpxB,QAIlE,OAAI,cAAc0C,KAAKywE,KAKhB,cAAczwE,KAAKywE,GACvB/hD,EAAW5uB,QAAQ,KAAMuB,EAAMmB,UAAY,EAC3CnB,EAAM8sB,WAAU,IAIjB8zC,EACH,IAAK,MAAOvhE,EAAMikE,KAAiB1C,EAAQ/8D,UAC1C,IAAK,MAAM3C,KAASoiE,EAAaj5C,MAAK,CAACrmB,EAAGC,IAAMD,EAAIC,IAAGumC,UAAW,CACjE,MAAM/tC,EAAQ2C,EAAoBC,GAC5Bu1C,EAAa1zC,EAAQ+S,GAAsB5U,GAC3C85E,EAAc18E,EAAM4B,MAAM,EAAGu2C,EAAa,GAChD,IAAIwkC,EAAa38E,EAAM4B,MAAMu2C,EAAa,GAEtCztC,EAAQZ,WAAW,UACtB6yE,EAAa9wE,EAAQS,QAAUqwE,EACrBjyE,EAAQZ,WAAW,sBAC7B6yE,EAAaA,EAAWl2E,QAAQ,OAAQ,KAGzCuR,GAAoBpV,EAAM85E,EAAcC,EACzC,CAEF,CACA,EAGF52E,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAnFQ,CACZC,IAAK,uEACLgB,SAAS,GCPV,MAAM/H,GAAW,oBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWlI,GAAI,oBAAA+E,OAAyB/E,EAAI,OAQvCyD,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAkBb,IAjBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAACxB,IAEZ,CACC0B,UAAU,EACVD,OAAQe,EACRhB,SAAU,CACTuwC,gBAAiB,CAAC/xC,EAAUD,GAC5BoiB,iBAAkB,CAAC5W,GAA6BvL,EAAUD,OAM5D,OAGD,MAAMwK,EAAgB,CAAChI,GAASV,OAShC,SAAS2K,EAAMrV,EAAMU,EAAOi4E,GAI3BjtE,EADAhL,EAAQA,EAAMyG,QAAQ,MAAO,MACVzH,MAAM02B,IACxB,GAAuB,aAAnBA,EAAUj2B,KAAqB,CAClC,MAAM25B,EAAiB1D,EAAU11B,MAAMiM,cAGvC,GAAuB,QAAnBmtB,EACH,OAAO,EAGR,GAAIr1B,EAAe4G,EAAkB,kBAAmByuB,GACvD,OAAO,CAET,CAEA,MAAM12B,OAAEA,EAAMJ,KAAEA,GAAS0yB,GAAaU,GAEtC,IAAKpzB,IAASI,GAAWJ,GAAQoQ,EAAc7M,SAASvD,EAAK2J,eAC5D,OAGD,GACC,SAAU3M,GACVqL,GACA5G,EAAe4G,EAAiB2f,iBAAkBhoB,EAAK2J,cAAe3M,EAAKkT,MAE3E,OAGD,MAAM/N,EAAQwzE,EAAS34E,GAEvB6E,EAAO,CACNM,MAAOA,EAAQixB,EAAU3zB,YAAcW,EAAOlD,OAC9CkF,SAAUD,EAAQixB,EAAU7zB,eAC5ByC,QAASyC,GAASyD,SAASlI,GAC3BhD,OACAC,SACA8E,SAAAA,IACC,GAEJ,CAEAuG,EAAKmB,YAAY,YAAaT,GAAWqJ,EAAMrJ,EAAQA,EAAOC,OAAQwO,MACtEnP,EAAKE,WAAWlI,GAAS+R,EAAM/R,EAAMA,EAAK5C,MAAOwX,KAAuB,EAI1EzR,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA3FQ,CACZC,IAAK,2DCNN,MAAM/G,GAAW,wBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAW4xE,GAAI,yBAAAl2E,OAA8Bk2E,EAAI,mBAO5CC,GAAmB,IAAIt0E,IAAI,CAAC,kBAAmB,qBAG/CnD,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAiBb,IAhBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU3B,GAEX,CACC4B,OAAQe,EACRhB,SAAU,CACTkF,OAAQ,CAAC,UAEVhF,UAAU,IAKX,OAGD,MAAM4zE,EAAU/yE,EACVgzE,EAAc35E,EAAe4G,EAAkB,SAAU,SA8D/D,SAASgzE,EAAiB3pD,GACzB,MAAM1xB,KAAEA,EAAII,OAAEA,GAAWsxB,EAEzB,GAAa,OAAT1xB,GAA4B,OAAXI,EAAiB,OAAO,EAE7C,MAAMk7E,EAAU31E,OAAOvF,GAEvB,GAAIk7E,GAAW,EACd,OAAO,EAGR,MAAMC,EAAWv7E,EAAK2J,cAEtB,QAAiB,OAAb4xE,GAAqBD,EAAUH,MAIlB,MAAbI,GAA8B,IAAVD,EAAiBH,EAK1C,CAQA,SAASj0E,EAAS5G,EAAM83B,EAAQl7B,GAC/B,MAAMiF,EAAQ+S,GAAsB5U,GAAQ83B,EACtCh2B,EAAWD,EAAQjF,EAEzB2E,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAAS4E,SAAS8xE,GAC3Bh5E,QACAC,WACApF,KAAMsD,GAER,CAtGAgI,EAAKE,WAAWlI,IACf,MAAMqB,EAAe0O,GAAkB/P,EAAK4P,KAAKvG,eAC3C6xE,EAAgBl7E,EAAK5C,MACrBoY,EAAcpN,EAAYrI,EAAoBC,IACpD,IAAIm7E,EAAiB,EAErB3lE,EAAYpZ,MAAMM,IACjB,MAAMU,MAAEA,EAAK+B,YAAEA,GAAgBzC,EACzB00B,EAAYgB,GAAa11B,IAG9Bub,GAAuBzQ,IAAInG,IAqC9B,SAA2BA,GAC1B,GAAIy5E,GAAeF,GAAiBpzE,IAAInG,GACvC,OAAO,EAGR,OAAO,CACR,CA1CI+5E,CAAkB/5E,IAClB05E,EAAiB3pD,IAElBxqB,EAAS5G,EAAM,EAAGk7E,EAAct+E,QAG5Bsb,GAAwB1Q,IAAInG,KAEjC85E,EAcF,SAA4B/pD,EAAWh0B,EAAOi+E,GAC7C,MAAM37E,KAAEA,GAAS0xB,EAEJ,OAAT1xB,GAAe27E,IAEL,MAAVj+E,IAAei+E,EAAiB,GAEpC,OAAOA,CACR,CAtBmBC,CAAmBlqD,EAAWh0B,EAAO+9E,GAElDJ,EAAiB3pD,IAAe0pD,GAAkC,IAAnBK,GAEnDv0E,EAAS5G,EAAMb,EAAa/B,EAAMR,QAAO,GACxC,GA6EH,EAIFuG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5IQ,CACZC,IAAK,+DCXN,MAAM/G,GAAW,gCAEX0C,GAAWD,EAAazC,GAAU,CACvC6M,eAAgB,IAAM,mCACtBQ,eAAgB,IAAM,mCACtBnB,yBAA0B,IAAM,yDAChCC,yBAA0B,IAAM,2DAS3BzK,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,QAAS,qBAAsB,uBAIpD,OAID,IAAIw6D,EA0BJ,GAxBAkY,GAAgC,CAC/BzxE,OACArL,SACA6P,gBAAiBkD,EAAQlS,OACzBmP,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACswE,EAAUh4E,KAGX,GAAIA,GAFe+S,GAAsBilE,GAGxC,OAAO,EAGRtY,EAAUA,GAAW,IAAI/tD,IACzB,MAAMywD,EAAe1C,EAAQl3C,IAAIwvD,IAAa,GAK9C,OAHA5V,EAAa/kE,KAAK2C,GAClB0/D,EAAQ7wD,IAAImpE,EAAU5V,IAEf,CAAI,EAEX,OAGA1C,EACH,IAAK,MAAOvhE,EAAMikE,KAAiB1C,EAAQ/8D,UAC1C,IAAK,MAAM3C,KAASoiE,EAAaj5C,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CACvD,MAAMvH,EAAQ2C,EAAoBC,GAC5Bu1C,EAAa1zC,EAAQ+S,GAAsB5U,GACjD,IAAI85E,EAAc18E,EAAM4B,MAAM,EAAGu2C,GACjC,MAAMwkC,EAAa38E,EAAM4B,MAAMu2C,GAE3BztC,EAAQZ,WAAW,UACtB4yE,EAAcA,EAAYj2E,QAAQ,OAAQ,KAChCiE,EAAQZ,WAAW,WAC7B4yE,EAAcA,EAAYj2E,QAAQ,OAAQ,KAG3CuR,GAAoBpV,EAAM85E,EAAcC,EACzC,CAEF,CACA,EAGF52E,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArEQ,CACZC,IAAK,sEACLgB,SAAS,GCVV,MAAM/H,GAAW,0CAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAW+J,GAAQ,8BAAAlN,OAAmCkN,EAAQ,OAQzDxO,GAAQ2E,GACN,CAACE,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACxB,EAAUD,MAOtB0C,EAAKqK,WAAW2c,IACf,IAAKwxC,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAErBA,EAAS1O,SAAS,OAIvB4jE,GAAcl1D,EAAUhV,EAAQqyB,GAAW4+C,IAC1CA,EAAajoB,aAAaitB,IACzB,MAAMx1E,EAAQw1E,EAAWx1E,MAGzB,GAAwB,MAApBA,EAAMqR,OAAO,GAChB,OAGD,MAAM1P,EAAO3B,EAAM4B,MAAM,GAEpBmB,EAAsB4P,GAAkBhR,GAAO+I,IAIpDvG,EAAO,CACNM,MAAO+wE,EAAWzzE,YAClBuC,QAASyC,GAASyD,SAASxK,GAC3BV,KAAMsyB,EACNjtB,KAAM3E,EACNT,SACA8E,SAAAA,IACC,GACD,GACD,GACD,EAIJ0B,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA5DQ,CACZC,IAAK,iFCNN,MAAM/G,GAAW,cACX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAWsR,GAAC,2BAAA5V,OAAgC4V,KASvClX,GAAO,CAAC2E,EAASC,EAAmB,CAAA,EAAIkB,IACtC,CAACjB,EAAMrL,KAqBb,IApBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAAC3B,EAAU,QAEtB,CACC4B,OAAQe,EACRhB,SAAU,CACTw0E,gBAAiB,CAACn2E,EAAU,QAC5B4G,OAAQ,CAAC,QAAS,QAAS,SAC3BC,OAAQ,CAAC,QAAS,QAAS,iBAC3BuvE,mBAAoB,CAAC,QAAS,+BAC9BC,mBAAoB,CAACv2E,IAEtB+B,UAAU,IAKX,OAGD,MAAMy0E,EAAat2E,EAAS0C,GAAWA,EAAU,KAC3C6zE,EAA2B,MAAdD,EAAqB,KAAO,IAAI/xE,OAAO+xE,GACpDE,EAA0B,QAAZ9zE,EAAoB,MAAQ,QAG1CyzE,EAAkBxzE,EAAiBwzE,gBAEnCE,EAAqB1zE,EAAiB0zE,mBAKtCI,EAAsBhb,IAC3B,MAAM9rD,EAAsB,MAAd2mE,EAAqB7a,EAAQA,EAAQ6a,EAC7CI,EAAkC,IAAV/mE,EAAc6mE,EAAiBA,GAAAA,OAAAA,EAAc,KAE3E,MAAU7mE,GAAAA,OAAAA,cAAS+mE,EAAqB,EA2GzC,SAASC,EAAiBr/E,EAAMmkE,EAAQ,GACvC,IAAKnkE,EAAK+B,OAAQ,MAAM,IAAI+D,MAAM,iCAElC,GAAIyI,GAAOvO,EAAK+B,QACf,OAAOoiE,EAySX,SAAgC74D,EAAMuzE,EAAiB5tC,GACtD,MAAM3N,EAAWg8C,GAAYh0E,GAE7B,IAAKg4B,EACJ,OAAO,EAGR,IAAKh4B,EAAK6B,OACT,MAAM,IAAIrH,MAAM,oCAIjB,MAAMqH,EAAS7B,EAAK6B,OAEdoyE,EAAcpyE,EAAO0xE,gBAE3B,GAAIn2E,EAAS62E,IAAgB52E,OAAO62E,cAAcD,GACjD,OAAOA,EAGR,MAAME,EAsGP,SAA8Bn0E,EAAMuzE,EAAiBa,GAIpD,SAASC,EAAeh9C,GACvB,MAAMi9C,EAAWj9C,EAAO1+B,MAAM,OACxB47E,EAAWD,EAAWA,EAAS1/E,OAAS,EAExC4/E,EAAan9C,EAAO1+B,MAAM,MAGhC,OAAO47E,GAFYC,EAAajkE,KAAKK,MAAM4jE,EAAW5/E,OAASw/E,KAAgB,EAGhF,CAEA,IAAIK,EAAqB,EAEzB,GAAKr3E,EAASm2E,IAAqBl2E,OAAO62E,cAAcX,GAuBvDkB,EAAqBlB,MAvBoD,CACzE,IAAKvzE,EAAK6B,OAAQ,MAAM,IAAIrH,MAAM,oCAElC,IAAIqH,EAAS7B,EAAK6B,OAAO5L,MAAMq+B,IAE/BzyB,EAASA,EAAOhG,QAAQ,aAAc64E,IACrC,MAAM/7E,EAAQqH,EAAK/H,KAAKogE,YAAc,oBAAoB3mD,KAAK1R,EAAK/H,KAAKogE,YAEzE,OAAI1/D,EACIA,EAAM,GAAK+7E,EAGZ,EAAE,IAGV,MAAMC,EAAU9yE,EAAOlJ,MAAM,mBAE7B,GAAIg8E,EACH,OAAOpkE,KAAKY,OAAOwjE,EAAQlqE,KAAK4sB,GAAWg9C,EAAeh9C,MAG3Do9C,EAAqB,CACtB,CAIA,MAAME,EAAU,GACVC,EAAe50E,EAAK/H,KAAKogE,YAAc,sBAAsB3mD,KAAK1R,EAAK/H,KAAKogE,YAGlF,GAAIuc,EAAc,CACjB,IAAIC,EAAWx3E,OAAOy3E,iBAClBtgF,EAAI,EAER,OAASA,EAAIogF,EAAahgF,QAAQ,CACjC,MAAMmgF,EAAcH,EAAapgF,GAEjC4J,EAAa22E,GACb,MAAMzvC,EAAU+uC,EAAeU,GAE/B,GAAIzvC,EAAUuvC,IACbA,EAAWvvC,EAEM,IAAbuvC,GACH,KAGH,CAEIA,IAAax3E,OAAOy3E,kBACvBH,EAAQz9E,KAAK,IAAIpC,MAAM+/E,GAAUG,KAAK,KAAKhqD,KAAK,IAElD,CAEA,MAAMv1B,EAAQuK,EAAK/H,KAAKxC,MAExB,GAAIA,EAAO,CACV,IAAIw/E,EAEJ,GAAIx/E,EAAM0e,SAAS,MAAO,CAEzB,MAAM6jB,EAAWh4B,EAAKg4B,SAEtB,GAAIA,EAAU,CACb,MAAMk9C,EAAWl9C,EAAS3jC,MAAM2jC,EAAS3jC,MAAM+C,QAAQ4I,GAAQ,GAE/Di1E,EAAWC,EAAWA,EAASj9E,KAAKogE,WAAargC,EAAS//B,KAAKkgE,SAChE,KAAO,CAEN,MAAM1hE,EAASuJ,EAAKvJ,OAEpB,IAAKA,EAAQ,MAAM,IAAI+D,MAAM,oCAE7B,MAAM06E,EAAWz+E,EAAOpC,MAAMoC,EAAOpC,MAAM+C,QAAQ4I,GAAQ,GAE3Di1E,EAAWC,EAAWA,EAASj9E,KAAKogE,WAAar4D,EAAK/H,KAAKkgE,SAC5D,CACD,MACC8c,EAAWx/E,EAGRw/E,GAAUN,EAAQz9E,KAAK+9E,EAASt8E,MAAM,WAAW,GACtD,CAEA,GAAIg8E,EAAQ//E,OACX,OAAO2b,KAAK9b,OAAOkgF,EAAQlqE,KAAK4sB,GAAWg9C,EAAeh9C,MAAYo9C,EAGvE,OAAOA,CACR,CA/MwBU,CAAqBn1E,EAAMuzE,GAAiB,IA+BpE,SAA4Bv7C,EAAU2N,GACrC,IAAK3N,EAASn2B,OAAQ,MAAM,IAAIrH,MAAM,wCAGtC,MAAM46E,EAAYp9C,EAASn2B,OAE3B,IAAIuyE,EAAagB,EAAUhB,WAE3B,GAAIh3E,EAASg3E,IAAe/2E,OAAO62E,cAAcE,GAChD,OAAOA,EAGR,MACMO,EADS38C,EAASn2B,OAAO5L,MAAMq+B,IACd37B,MAAM,eAE7B,GAAIg8E,EAAS,CAEZ,MAAMU,EAAS,IAAI7pE,IACnB,IAAI8pE,EAAiB,EACjBC,EAA0B,EAK9B,MAAMC,EAAQC,IACb,GAAIA,GAGH,GAFAH,EAAiB/kE,KAAKmO,IAAI+2D,EAAsBF,IAA4BD,EAExEA,EAAiB,EAAG,CACvB,MAAMI,EAAQL,EAAOhzD,IAAIizD,GAErBI,EACHL,EAAO3sE,IAAI4sE,EAAgBI,EAAQ,GAEnCL,EAAO3sE,IAAI4sE,EAAgB,EAE7B,OAEAA,EAAiB,EAGlBC,EAA0BE,CAAmB,EAG9C,IAAK,MAAME,KAAiBhB,EAC3Ba,EAAKG,EAAc/gF,QAGpB,IAAIghF,EAAY,EAEhB,IAAK,MAAOC,EAAgBH,KAAUL,EAAO74E,UACxCk5E,EAAQE,IACXA,EAAYF,EACZtB,EAAayB,EAGhB,CAMA,OAJAzB,EACC/2E,OAAO+2E,IAAgBO,GAAWA,EAAQ,IAAMA,EAAQ,GAAG//E,QAAWyI,OAAOsoC,IAAU,EACxFyvC,EAAUhB,WAAaA,EAEhBA,CACR,CA7FE0B,CAAmB99C,EAAU2N,KAK9B,OAFA9jC,EAAO0xE,gBAAkBY,EAElBA,CACR,CApUmB4B,CAAuBrhF,EAAK+B,OAAQ88E,EAAiBzzE,GAGrE,IAAIk2E,EAkBJ,OAbAA,EAAkBjC,EAAiBr/E,EAAK+B,OAAQoiE,EAAQ,GAMvD1/D,EAAe4G,EAAkB,SAAU,WAC1C2J,GAAOhV,IAAS4O,GAAS5O,KAC1ByO,GAASzO,IAETshF,IAGMA,CACR,CAiEA,SAASC,EAAkBp0E,EAAQq0E,EAAoBxhF,GACtD,IAAKmN,EAAO5G,SAAS,MACpB,OAKD,MAAMkqE,EAAe,GAIrB,IAAIgR,EAAqB,EAEzB,MAAMC,EAAqBj9E,EAAe4G,EAAkB,SAAU,iBAuHtE,GArHAujB,GACC,CACCzhB,SACA0hB,OAAQ,KAER8yD,cAAeD,IAEhB,CAACz9E,EAAOssB,KACP,MAAMqxD,EAA6B,YAAYh/E,KAAKuK,EAAO7K,MAAM2B,EAAM8sB,WAAa,IAEpF,GAAI2wD,IAAuBE,GAA8B39E,EAAMmsB,cAC9D,OAGD,IAAIyxD,EAAsBL,EAG1B,IAAKE,GAAsBz9E,EAAMmsB,aAAc,CAE3B,IAAfG,IAAkBkxD,GAAsB,GAG5C,IAAI/qE,EAAezS,EAAM8sB,WAEY,OAAjC5jB,EAAOlJ,EAAM8sB,WAAa,IAC7Bra,IAGiC,YAAY9T,KAAKuK,EAAO7K,MAAM,EAAGoU,MAGlE+qE,GAAsB,GAGK,YAAY7+E,KAAKuK,EAAO7K,MAAM,EAAGoU,MAG5D+qE,GAAsB,GAiBvB,OAd6B,YAAY7+E,KAAKuK,EAAO7K,MAAM2B,EAAM8sB,WAAa,MAG7E0wD,GAAsB,GAGvBI,GAAuBJ,EAInBG,IACHH,GAAsB,GAGfp2E,EAAiByzE,oBACxB,IAAK,QACC8C,IAA8B7C,IAClC8C,GAAuB,GAGxB,MACD,IAAK,8BACJ,GAAI7hF,EAAK+B,SAAW/B,EAAKsL,OAAQ,CAC5Bs2E,IAA+B7C,IAClC8C,GAAuB,GAGxB,KACD,CAEKD,IAA8B7C,IAClC8C,GAAuB,GAGxB,MACD,QACKD,IAA+B7C,IAClC8C,GAAuB,GAG3B,CAKA,MAAMC,EAA2B,cAAc9kE,KAAK7P,EAAO7K,MAAM2B,EAAM8sB,WAAa,IAEpF,IAAK+wD,EACJ,OAGD,MAAMC,EAAoBD,EAAyB,IAAM,GACnDE,EAAsB/C,EAAWhyE,OACtC40E,EAAsB,EAAIA,EAAsB,GAG7CE,IAAsBC,IACrBz1E,EAAQM,IAEX4jE,EAAa/hC,QAAQ,CACpBszC,sBACAC,mBAAoBF,EACpBhxD,WAAY9sB,EAAM8sB,aAGnBlsB,EAAO,CACNG,QAASyC,GAAS4E,SAAS8yE,EAAmB0C,IAC9C7hF,OACAmF,MAAOlB,EAAM8sB,WAAagxD,EAAkB7hF,OAAS,EACrDD,SACA8E,SAAAA,KAGH,IAIE0rE,EAAavwE,OAAQ,CACxB,GAAI8U,GAAOhV,GACV,IAAK,MAAMmvE,KAAesB,EACzBzwE,EAAKiV,SAAWitE,GACfliF,EAAKiV,SACLk6D,EAAY8S,mBACZ9S,EAAY6S,oBACZ7S,EAAYp+C,YAKf,GAAI+nB,GAAc94C,GAAO,CACxB,MAAMmiF,EAAWniF,EAAKkT,KAChBkvE,EAAcpiF,EAAKuD,KAAK2R,QAE9B,IAAKrM,EAASu5E,GACb,MAAM,IAAI//B,UAAU,2CAGrB,IAAK,MAAM8sB,KAAesB,EACrBtB,EAAYp+C,WAAaoxD,EAASjiF,OAASkiF,EAAYliF,OAC1DF,EAAKuD,KAAK2R,QAAUgtE,GACnBE,EACAjT,EAAY8S,mBACZ9S,EAAY6S,oBACZ7S,EAAYp+C,WAAaoxD,EAASjiF,QAGnCF,EAAKU,MAAQwhF,GACZliF,EAAKU,MACLyuE,EAAY8S,mBACZ9S,EAAY6S,oBACZ7S,EAAYp+C,WAAaoxD,EAASjiF,OAASkiF,EAAYliF,OAI3D,CAEA,GAAI0O,GAAS5O,GAAO,CACnB,MAAM2U,EAAa3U,EAAKqC,KAClBggF,EAAkBriF,EAAKuD,KAAK6I,UAC5Bk2E,EAAetiF,EAAKiM,OAE1B,IAAKpD,EAASw5E,GACb,MAAM,IAAIhgC,UAAU,6CAGrB,IAAK,MAAM8sB,KAAesB,EAErBtB,EAAYp+C,WAAa,EAAIpc,EAAWzU,OAASmiF,EAAgBniF,OACpEF,EAAKuD,KAAK6I,UAAY81E,GACrBG,EACAlT,EAAY8S,mBACZ9S,EAAY6S,oBACZ7S,EAAYp+C,WAAapc,EAAWzU,OAAS,GAG9CF,EAAKiM,OAASi2E,GACbI,EACAnT,EAAY8S,mBACZ9S,EAAY6S,oBACZ7S,EAAYp+C,WAAapc,EAAWzU,OAASmiF,EAAgBniF,OAAS,EAI1E,CACD,CACD,CA1YAoL,EAAK5L,MAAMM,IACV,GAAIuO,GAAOvO,GAEV,OAGD,MAAMuiF,EAAYlD,EAAiBr/E,GAG7Bc,GAAUd,EAAKuD,KAAKzC,QAAU,IAAIqG,QAAQ,QAAS,IACnDpG,EAAmC,iBAApBf,EAAKuD,KAAKxC,MAAqBf,EAAKuD,KAAKxC,MAAQ,GAChEgB,EAAS/B,EAAK+B,OAEpB,IAAKA,EAAQ,MAAM,IAAI+D,MAAM,iCAE7B,MAAM08E,EAAkCvD,EAAWhyE,OAAOs1E,GAOpDE,EAA+B,SAAhB1gF,EAAO5B,MAAmB4B,EAAOgN,QAAU/O,EAC1D0iF,EAAqB5hF,EAAO0nC,YAAY,QAOpB,IAAxBk6C,GACCD,KACEnD,GAAYv9E,IACZA,EAAOwB,KAAKogE,YAAc5hE,EAAOwB,KAAKogE,WAAWlkD,SAAS,SAC9D3e,EAAOwB,MAAMogF,EAAqB,KAAOF,IAErCj2E,EAAQM,KACP41E,GAAgB55E,EAAS7I,EAAKuD,KAAKzC,UACtCd,EAAKuD,KAAKzC,OAASd,EAAKuD,KAAKzC,OAAOqG,QACnC,kBACAq7E,IAIFxiF,EAAKuD,KAAKzC,OAAS6hF,GAAe3iF,EAAKuD,KAAKzC,OAAQ0hF,IAEpD39E,EAAO,CACNG,QAASyC,GAAS4E,SAAS8yE,EAAmBoD,IAC9CviF,OACAC,SACA8E,SAAAA,MASH,MAAM69E,EAAoB7D,EAAqBwD,EAAY,EAAIA,EACzDM,EAAkC5D,EAAWhyE,OAAO21E,IAGxD5tE,GAAOhV,IAAS4O,GAAS5O,KAC1ByO,GAASzO,IACTe,GACAA,EAAMwF,SAAS,OACfxF,EAAMuB,MAAMvB,EAAMynC,YAAY,MAAQ,KAAOq6C,IAEzCt2E,EAAQM,IACX7M,EAAKuD,KAAKxC,MAAQ4hF,GAAe3iF,EAAKuD,KAAKxC,MAAO8hF,GAElDh+E,EAAO,CACNG,QAASyC,GAAS4E,SAAS8yE,EAAmByD,IAC9C5iF,OACAmF,MAAOnF,EAAK+C,WAAW7C,OAAS,EAChCD,SACA8E,SAAAA,MAMC+zC,GAAc94C,IAoDnB,SAAoBsD,EAAMw/E,GACzB,IAAKx/E,EAAK5C,MAAM6F,SAAS,MACxB,OAGD,GAAI9B,EAAe4G,EAAkB,SAAU,SAC9C,OAGD,MAAMimB,EAAahuB,EAAKP,WAClBggF,EAAat+E,EAAe4G,EAAkB,SAAU,SAC3Dy3E,EACAA,EAAY,EAEfvB,EAAkBjwD,EAAYyxD,EAAYz/E,EAC3C,CAlEE0/E,CAAWhjF,EAAMuiF,GAIdvtE,GAAOhV,IAoEZ,SAAuBsyB,EAAU2wD,GAChC,MAAMhuE,EAAWqd,EAASrd,SAItBqd,EAASrmB,SACZg3E,GAAa,GAGd1B,EAAkBtsE,EAAUguE,EAAW3wD,EACxC,CA7EEwsC,CAAc9+D,EAAMuiF,GAIjB3zE,GAAS5O,IA+Ed,SAA2BgM,EAAQi3E,GAClC,GAAIx+E,EAAe4G,EAAkB,SAAU,SAC9C,OAKD,MAAM63E,EACLz+E,EAAe4G,EAAkB,SAAU,UAC3B,SAAhBW,EAAO3J,MACS,YAAhB2J,EAAO3J,KACJ4gF,EACAA,EAAY,EAEhB1B,EAAkBzsE,GAAkB9I,GAAQ0R,OAAQwlE,EAAYl3E,EACjE,CA7FEm3E,CAAkBnjF,EAAMuiF,EACzB,GA2SD,EA0CF,SAASjD,GAAYt/E,GAEpB,MAAMsjC,EAAWtjC,EAAKsjC,SAEtB,GAAIA,EACH,OAAOA,EAGR,MAAMh4B,EAAOtL,EAAKsL,OAGlB,OAAOA,GAAQA,EAAKg4B,QACrB,CA6LA,SAASq/C,GAAerqE,EAAKe,GAC5B,OAAKxQ,EAASyP,GAIPA,EAAInR,QAAQ,oBAAmB,KAAAY,OAAOsR,IAHrCf,CAIT,CAQA,SAAS4pE,GAAmB3gF,EAAO6hF,EAAcC,EAAetyD,GAC/D,MAAMqK,EAASrK,EAAa,EAI5B,OAHoBxvB,EAAMe,MAAM,EAAG84B,GAGdioD,EAFH9hF,EAAMe,MAAM84B,EAASgoD,EAAaljF,OAGrD,CAEAuG,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAzsBQ,CACZC,IAAK,oDACLgB,SAAS,GCZV,MAAM/H,GAAW,kCAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAe,IAAM,kCACrBK,cAAe,IAAM,kCACrBpB,wBAAyB,IAAM,wDAC/BC,wBAAyB,IAAM,0DAS1B/K,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,QAAS,qBAAsB,uBAIpD,OAID,IAAIw6D,EAoBJ,GAlBAmO,GAAmC,CAClC1nE,OACArL,SACA6P,gBAAiBkD,EAAQjS,MACzBkP,gBAAiBlL,GACjB8H,IAAKN,EAAQM,IACV,CAACylB,EAAUntB,KACX0/D,EAAUA,GAAW,IAAI/tD,IACzB,MAAMywD,EAAe1C,EAAQl3C,IAAI2E,IAAa,GAK9C,OAHAi1C,EAAa/kE,KAAK2C,GAClB0/D,EAAQ7wD,IAAIse,EAAUi1C,IAEf,CAAI,EAEX,OAGA1C,EACH,IAAK,MAAOvyC,EAAUi1C,KAAiB1C,EAAQ/8D,UAAW,CACzD,IAAImN,EAAWqd,EAAS/uB,KAAK0R,SAAWqd,EAAS/uB,KAAK0R,SAASzR,IAAM8uB,EAASrd,SAE9E,IAAK,MAAM9P,KAASoiE,EAAaj5C,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CACvD,MAAMirE,EAAiBj+D,EAAS3S,MAAM,EAAG6C,EAAQ,GACjD,IAAIguE,EAAgBl+D,EAAS3S,MAAM6C,EAAQ,GAEvCiG,EAAQZ,WAAW,UACtB2oE,EAAgBA,EAAchsE,QAAQ,OAAQ,KACpCiE,EAAQZ,WAAW,WAC7B2oE,EAAgBA,EAAchsE,QAAQ,OAAQ,KAG/C8N,EAAWi+D,EAAiBC,CAC7B,CAEI7gD,EAAS/uB,KAAK0R,SACjBqd,EAAS/uB,KAAK0R,SAASzR,IAAMyR,EAE7Bqd,EAASrd,SAAWA,CAEtB,CACD,CACA,EAGFxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArEQ,CACZC,IAAK,wEACLgB,SAAS,GCPV,MAAM/H,GAAW,qBAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAUlV,wBACPkV,EAAQ,2BAAAlN,OAA0BhI,EAAG,KAAAgI,OAAY,IAARhI,EAAY,QAAU,aAQxE0G,GAAQ2E,GACN,CAACE,EAAMrL,KAcb,SAAS6+D,EAAcwL,EAAch4C,GACpC,MAAMja,EAAQiyD,EAAarjE,QAAO,CAAC0sE,EAAOz6D,MAElB,aAAnBA,EAAU/Y,MAAuBozE,GAA+Br6D,KACnE4lD,EAAc5lD,EAAWoZ,GAGH,UAAnBpZ,EAAU/Y,OAAkBwzE,GAAS,GAElCA,IACL,GAEH,GAA0B,SAAtBrJ,EAAanqE,MAAyC,WAAtBmqE,EAAanqE,MAAqBkY,EAAQjN,EAAS,CACtF,MAAM6J,EAAWq1D,EAAavnE,WAE9B8B,EAAO,UACNE,GACA9E,SACAD,KAAMsyB,EACNttB,QAASyC,GAAS4E,SAAS4I,EAAU7J,GACrC/F,KAAM4P,GAER,CACD,CApCqBpL,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAUopE,MAoCXnoE,EAAKqK,WAAW2c,IACf,GAAKwxC,GAAqBxxC,GAI1B,IAAK,MAAMrd,KAAYqd,EAAS4e,UAC/B,IAAK,MAAMm6B,KAAoBnD,GAAuBjzD,EAAUqd,GAC/D63C,GAAckB,EAAkBprE,EAAQqyB,GAAWuhD,GAClD/U,EAAc+U,EAAWvhD,IAG5B,GACC,EAIJ7rB,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA/DQ,CACZC,IAAK,4DCXN,MAAM/G,GAAW,0BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAU,CAAC4I,EAAU/Q,IAAyB+Q,aAAAA,OAAAA,iCAA+B/Q,EAAO,OAQ/EuC,GAAQ2E,GACN,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAACzB,EAAUC,KAIrB,OAGD,MAAM0R,EAAoB1R,EAASuC,GAAW,IAAIpH,OAAOoH,GAAWA,EAEpEE,EAAKqK,WAAW2c,IACf,GAAIA,EAASvwB,QAAmC,SAAzBuwB,EAASvwB,OAAO5B,KACtC,OAGD,IAAK2jE,GAAqBxxC,GACzB,OAGD,MAAMrd,EAAWqd,EAASrd,SAEtBsF,EAAkB3X,KAAKqS,IAI3BpQ,EAAO,CACN5E,kBACA8E,GACAC,QAASyC,GAAS4E,SAClBpH,YAAa,CAACgQ,EAAU7J,GACxBpL,KAAMsyB,EACNjtB,KAAM4P,GACL,GACD,EAIJxO,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA/CQ,CACZC,IAAK,iECNN,MAAM/G,GAAW,2CAEX0C,GAAWD,EAAazC,GAAU,CACvCuN,cAAe,IAAM,6CACrBK,cAAe,IAAM,+CAShBlM,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAMyG,EAAUvC,GAAkB,QAASrF,EAAS3D,IAEpD,MAAO,CAAC6D,EAAMrL,KACQ4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU,CAAC,SAAU,YAOtBiB,EAAKmB,YAAY,YAAaT,IAE7B,MAAM66D,EAAqB,GAErBh6D,EAAMN,EAAQM,IAAO1H,GAAU0hE,EAAmBrkE,KAAK2C,GAAS,KAMtE,GAJAyhE,GAAkB56D,GAAQ,CAAC/H,EAAOgI,EAAQjM,MAgC3C,SAA4BiE,EAAOgI,EAAQjM,EAAM6M,GAChD,MAAMzH,EAAWnB,EAAM8sB,WAAa9sB,EAAM4qB,OAAO3uB,OAAS,EAE1D8S,EAAQjS,MAAM,CACboM,OAAQlB,EACR9G,MAAOC,EACP2K,IAAMC,IACDnD,EACHA,EAAIzH,GAKLP,EAAO,CACNG,QAASgL,EACThQ,OACAmF,MAAOC,EAAWqV,GAAiBza,GAAQ,EAC3CC,SACA8E,SAAAA,IACC,GAGL,CArDEu+E,CAAmBr/E,EAAOgI,EAAQjM,EAAM6M,EAAI,IAGzCg6D,EAAmB3mE,OAAQ,CAC9B,IAAI+L,EAASD,EAAOzI,KAAK0I,OAASD,EAAOzI,KAAK0I,OAAOzI,IAAMwI,EAAOC,OAElE,IAAK,MAAM9G,KAAS0hE,EAAmBv4C,MAAK,CAACrmB,EAAGC,IAAMA,EAAID,IAAI,CAC7D,MAAM8+D,EAAiB96D,EAAO3J,MAAM,EAAG6C,EAAQ,GACzC6hE,EAAgB/6D,EAAO3J,MAAM6C,EAAQ,GAE3B,WAAZiG,EACHa,EAAS86D,EAAiBC,EAAc7/D,QAAQ,OAAQ,KAClC,UAAZiE,IACVa,EAAS86D,EAAiBC,EAAc7/D,QAAQ,OAAQ,IAE1D,CAEI6E,EAAOzI,KAAK0I,OACfD,EAAOzI,KAAK0I,OAAOzI,IAAMyI,EAEzBD,EAAOC,OAASA,CAElB,IA+BD,CACA,EAGFxF,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KArFQ,CACZC,IAAK,iFACLgB,SAAS,GCbV,MAAM01D,GAAcC,GAAsCngC,QASpDv9B,GAAW,uBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWlI,GAAI,oBAAA+E,OAAyB/E,EAAI,OAuBvCyD,GAAO,CAAC2E,EAASC,IACf,CAACC,EAAMrL,KAkBb,IAjBqB4J,EACpB5J,EACA8E,GACA,CACCuF,OAAQc,EACRf,SAAU,CAACxB,IAEZ,CACC0B,UAAU,EACVD,OAAQe,EACRhB,SAAU,CACT2gB,iBAAkB,CAAC5W,GAA6BvL,EAAUD,IAC1D28D,wBAAyB,CAACnxD,GAA6BvL,EAAUD,OAMnE,OAGD,MAAMwK,EAAgB,CAAChI,GAASV,OAUhC,SAAS2K,EAAMrV,EAAMy2B,EAAWL,EAAW70B,EAAOmD,GACjD,MAAMtB,OAAEA,EAAMJ,KAAEA,GAAS0yB,GAAaU,GAGjCpzB,GAASI,KAAWJ,GAASoQ,EAAc7M,SAASvD,EAAK2J,kBAK1DlI,EAAeC,EAAS1B,EAAK2J,cAAepL,IAIhDsD,EAAO,CACNM,MAAOsxB,EAAYL,EAAU3zB,YAAcW,EAAOlD,OAClDkF,SAAUqxB,EAAYL,EAAU7zB,eAChCyC,QAASyC,GAASyD,SAASlI,GAC3BhD,OACAC,SACA8E,SAAAA,KAEF,CA4DAuG,EAAKmB,YAAY,YAAaT,IAAWu3E,OAnDrBvjF,EAmDgCgM,EAnD1BtL,EAmDkCsL,EAAOC,OAnDlC0sE,EAmD0Cl+D,QAlD1E+nD,GAAYxiE,EAAKiM,QAAQvM,KAAK,oBAAqBgjE,IAClD,MAAMhoD,EA1EmBgoD,KAC5B,MAAMhiE,EAAQgiE,EAAiBhiE,MAAMiM,cAE/B1I,EAAQ,eAAe+Y,KAAKtc,GAElC,OAAOuD,EAAQA,EAAM,QAAKtD,CAAS,EAqEd6iF,CAAoB9gB,GAChC6T,EAAc7T,EAAiB3gE,OAAOrB,MAE5CgL,EAAYhL,GAAOhB,MAAM02B,IAGD,SAAnBA,EAAUj2B,MAAoBo2E,EAAYhwE,SAAS6vB,EAAU11B,QAIjE2U,EACCrV,EACA24E,EAAS34E,GACTo2B,EACA1b,EACArP,EAAmBA,EAAiBk6D,wBAA0B,CAAE,EAChE,GACA,IAnBJ,IAAoBvlE,EAAMU,EAAOi4E,CAmD2D,IAC5FrtE,EAAKE,WAAWlI,IAASmgF,OAtBNzjF,EAsBgBsD,EAtBV5C,EAsBgB4C,EAAK5C,MAtBdi4E,EAsBqBzgE,QAjBpDxM,EAFAhL,EAAQA,EAAMyG,QAAQ,MAAO,MAEVzH,MAAM02B,IAExB,GAAuB,aAAnBA,EAAUj2B,MAAyD,QAAlCi2B,EAAU11B,MAAMiM,cACpD,OAAO,EAGR0I,EACCrV,EACA24E,EAAS34E,GACTo2B,EACAp2B,EAAKkT,KACL7H,EAAmBA,EAAiB2f,iBAAmB,CAAE,EACzD,IAjBH,IAAmBhrB,EAAMU,EAAOi4E,CAsB2C,GAAC,EAI9ElyE,GAAK6M,oBAAqB,EAE1B7M,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KA/IQ,CACZC,IAAK,8DCNN,MAAM/G,GAAW,yBAEX0C,GAAWD,EAAazC,GAAU,CACvCmG,SAAWxK,GAAK,6BAAAqH,OAAkCrH,EAAK,OAQlDgjF,GAAgB,CAAC,WAAY,QAAS,OAAQ,OAa9Cj9E,GAAO,CAAC2E,EAASC,EAAkBkB,IACjC,CAACjB,EAAMrL,KACQ4J,EACpB5J,EACA8E,GACA,CAAEuF,OAAQc,GACV,CACCb,UAAU,EACVD,OAAQe,EACRhB,SAAU,CACTs5E,aAAc,CAAC96E,OASlByC,EAAKE,WAAWlI,IACf,MAAM5C,MAAEA,GAAU4C,EAElB,IACEyxB,GAA4BzxB,KAC5BspB,GAAyBtpB,EAAK4P,QAC9BxS,EAAM8J,WAAW,KAElB,OAGD,GAAI/F,EAAe4G,EAAkB,eAAgBgI,GAAkB3S,IACtE,OAGD,MAAMoY,EAAcpN,EAAYhL,GAEhCoY,EAAYpZ,MAAMM,IACjB,IA5CeU,KAClB,MAAMkjF,EAAaljF,EAAMiM,cAEzB,OAAO+2E,GAAclvE,MAAM2D,GAAWyrE,EAAWp5E,WAAW2N,IAAQ,EAyC5D0rE,CAAU7jF,EAAKU,OACnB,OAGD,IvWuPU,SAACA,GACb,OAAOgT,GAAgB5I,IAAIpK,EAAMiM,cAClC,CuWzPQmH,CAA+B9T,EAAKU,OACxC,OAGD,GAAI6L,EAAQM,IAGX,YAFA7M,EAAKU,MAAQoT,GAA0B9T,EAAKU,QAK7C,MAAMqwB,EAAaztB,EAAK4P,KAAKhT,QAAUoD,EAAKC,KAAK2R,SAAW,IAAIhV,OAASF,EAAKyC,YAE9EoC,EAAO,CACNG,QAASyC,GAASyD,SAASlL,EAAKU,OAChCV,KAAMsD,EACN6B,MAAO4rB,EACP3rB,SAAU2rB,EAAa/wB,EAAKU,MAAMR,OAClCD,SACA8E,SAAAA,IACC,IAGH2T,GAAoBpV,EAAMwV,EAAY/V,WAAW,GAChD,EAIJ0D,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAxFQ,CACZC,IAAK,+DACLgB,SAAS,GCdV,MAAM/H,GAAW,6BAEX0C,GAAWD,EAAazC,GAAU,CACvCsH,SAAWtM,GAAG,yBAAAgI,OAA8BhI,EAAG,WAAAgI,OAAkB,IAARhI,EAAY,OAAS,WASzE0G,GAAO,CAAC2E,EAASgL,EAAmB7J,KACzC,MAAM6uC,EAAsBhwC,EAAU,EAEtC,MAAO,CAACE,EAAMrL,KAMb,IALqB4J,EAAgB5J,EAAQ8E,GAAU,CACtDuF,OAAQc,EACRf,SAAU3B,IAIV,OAGD,MAAM2yC,EAA4B,IAAIr3C,0BAAmBo3C,EAAsB,EAAM,OAC/EE,EAA0B,IAAIt3C,oBAAao3C,EAAsB,EAAM,OACvEG,EAA0BhvC,EAAQM,IAAM,KAAKI,OAAOmuC,GAAuB,GAC3EI,EAA4BjvC,EAAQM,IAAM,OAAOI,OAAOmuC,GAAuB,GAErF9vC,EAAKE,WAAWlI,IACf,MAAM5C,EAAQ2C,EAAoBC,GAElC,GAAIiJ,EAAQM,IAAK,CAChB,MAAMi3E,EAAiBpjF,EACrByG,QAAQ,IAAInD,OAAOs3C,EAAyB,MAAOC,GACnDp0C,QAAQ,IAAInD,OAAOq3C,EAA2B,MAAOG,GAEvD9iC,GAAoBpV,EAAMwgF,EAC3B,MAAWxoC,EAAwB14C,KAAKlC,IAAU26C,EAA0Bz4C,KAAKlC,KAChFmE,EAAO,CACNG,QAASyC,GAAS4E,SAASjB,GAC3BpL,KAAMsD,EACN6B,MAAO,EACPlF,SACA8E,aAEF,GACC,CACF,EAGF0B,GAAK1B,SAAWA,GAChB0B,GAAKgB,SAAWA,GAChBhB,GAAKoF,KAhDQ,CACZC,IAAK,mEACLgB,SAAS,GCVV,MAAMxG,GAAQ,CACb,uBAAwBy9E,GACxB,wBAAyBC,EACzB,uBAAwBC,GACxB,0BAA2BC,GAC3B,4BAA6BC,GAC7B,oBAAqBC,EACrB,6BAA8BC,GAC9B,iCAAkCC,GAClC,2BAA4BC,GAC5B,qBAAsBC,GACtB,2BAA4BC,GAC5B,iCAAkCC,GAClC,kCAAmCC,GACnC,wCAAyCC,GACzC,oCAAqCC,GACrC,qCAAsCC,GACtC,kCAAmCC,GACnC,mCAAoCC,GACpC,iBAAkBC,GAClB,oCAAqCC,GACrC,qCAAsCC,GACtC,kCAAmCC,GACnC,mCAAoCC,GACpC,0BAA2BC,GAC3B,kBAAmBC,GACnB,iBAAkBC,GAClB,mBAAoBC,GACpB,cAAeC,GACf,eAAgBC,GAChB,uBAAwBC,GACxB,4BAA6BC,GAC7B,mBAAoBC,GACpB,kBAAmBC,GACnB,4BAA6BC,GAC7B,+BAAgCC,GAChC,uBAAwBC,GACxB,oCAAqCC,GACrC,0CAA2CC,GAG3C,0BAA2BC,GAC3B,+BAAgCC,GAChC,gCAAiCC,GACjC,mDAAoDC,GAGpD,4CAA6CC,GAG7C,qDAAsDC,GAGtD,oDAAqDC,GAGrD,4CAA6CC,GAG7C,6CAA8CC,GAG9C,0CAA2CC,GAG3C,2CAA4CC,GAG5C,iDAAkDC,GAGlD,uCAAwCC,GACxC,kCAAmCC,GACnC,gCAAiCC,GACjC,iCAAkCC,GAClC,gCAAiCC,GACjC,2BAA4BC,GAC5B,kCAAmCC,GACnC,yCAA0CC,GAC1C,4CAA6CC,GAG7C,0CAA2CC,GAG3C,6CAA8CC,GAG9C,gDAAiDC,GAGjD,0BAA2BC,GAC3B,iCAAkCC,GAClC,uBAAwBC,GACxB,wBAAyBC,GACzB,qCAAsCC,GACtC,+BAAgCC,GAChC,gCAAiCC,GACjC,6BAA8BC,GAC9B,8BAA+BC,GAC/B,2BAA4BC,GAC5B,oDAAqDC,GAGrD,2BAA4BC,GAC5B,qBAAsBC,GACtB,sBAAuBC,GACvB,sCAAuCC,GACvC,oCAAqCC,GACrC,kCAAmCC,GACnC,sBAAuBC,GACvB,mCAAoCC,GACpC,sCAAuCC,GACvC,4BAA6BC,GAC7B,sBAAuBC,GACvB,kBAAmBC,GACnB,wCAAyCC,GACzC,oCAAqCC,GACrC,6BAA8BC,GAC9B,yBAA0BC,GAC1B,sBAAuBC,GACvBC,WAAYC,GACZ,kBAAmBC,GACnB,kBAAmBC,GACnB,oBAAqBC,GACrB,kCAAmCC,GACnC,mCAAoCC,GACpC,kCAAmCC,GACnC,0BAA2BC,GAC3B,qCAAsCC,GACtC,gCAAiCC,GACjC,sCAAuCC,GACvC,wCAAyCC,GACzC,yCAA0CC,GAC1C,2CAA4CC,GAG5C,4CAA6CC,GAG7C,uCAAwCC,GACxC,wCAAyCC,GACzC,qCAAsCC,GACtC,sCAAuCC,GACvC,8BAA+BC,GAC/B,4BAA6BC,GAC7B,+BAAgCC,GAChC,yBAA0BC,GAC1B,kBAAmBC,GACnB,sBAAuBC,GACvB,oBAAqBC,GACrB,sBAAuBC,GACvB,mCAAoCC,GACpC,qCAAsCC,GACtC,0BAA2BC,GAC3B,mCAAoCC,GACpC,wBAAyBC,GACzB,sBAAuBC,GACvB,uBAAwBC,GACxB,2BAA4BC,GAC5B,wBAAyBC,GACzB,gBAAiBC,GACjB,2BAA4BC,GAC5B,sBAAuBC,GACvB,4BAA6BC,GAC7B,yBAA0BC,GAC1B,yCAA0CC,GAC1C,2CAA4CC,GAG5C,0CAA2CC,GAG3C,2CAA4CC,GAG5C,8CAA+CC,GAG/C,0CAA2CC,GAG3C,2CAA4CC,GAG5C,4BAA6BC,GAC7B,yBAA0BC,GAC1B,mCAAoCC,GACpC,sCAAuCC,GACvC,kCAAmCC,GACnC,mCAAoCC,GACpC,8CAA+CC,GAG/C,2BAA4BC,GAC5B,sBAAuBC,GACvB,oCAAqCC,GACrC,qCAAsCC,GACtC,kCAAmCC,GACnC,mCAAoCC,GACpC,yBAA0BC,GAC1B,qBAAsBC,GACtB,2BAA4BC,GAC5B,kCAAmCC,GACnC,2BAA4BC,GAC5B,kBAAmBC,GACnB,4BAA6BC,GAC7B,2BAA4BC,GAC5B,oBAAqBC,GACrB,yBAA0BC,GAC1B,0BAA2BC,GAC3B,8BAA+BC,GAC/B,4BAA6BC,GAC7B,wBAAyBC,GACzB,qCAAsCC,GACtC,6BAA8BC,GAC9B,wCAAyCC,GACzC,mCAAoCC,GACpC,iDAAkDC,GAGlD,uCAAwCC,GACxC,+BAAgCC,GAChC,yCAA0CC,GAC1C,0CAA2CC,GAG3C,qCAAsCC,GACtC,qBAAsBC,GACtB,2BAA4BC,GAC5B,yCAA0CC,GAC1C,oBAAqBC,GACrB,gBAAiBC,GACjB,wBAAyBC,GACzB,cAAeC,GACf,oBAAqBC,GACrB,YAAaC,GACb,uBAAwBC,GACxB,kBAAmBC,GACnB,qBAAsBC,GACtB,iCAAkCC,GAClC,kCAAmCC,GACnC,+BAAgCC,GAChC,gCAAiCC,GACjC,6BAA8BC,GAC9B,yBAA0BC,GAC1BC,YAAaC,ICpOd,IAAAC,GAAA,SACCC,EACArrF,EAGAuO,GAEA,GAAI88E,QACH,OAAO,KAGR,IAAKhwF,MAAMC,QAAQ+vF,GAClB,MAAO,CAACA,GAIT,GAAIA,EAAYlwF,OAAS,IAAyB,OAAnBkwF,EAAY,SAAkCzvF,IAAnByvF,EAAY,IACrE,OAAO,KAGR,QAA2BzvF,IAAvB2S,EAAkC,CACrC,MAAM7M,EAAOH,GAAMvB,GAEf0B,GAAQ,uBAAwBA,IACnC6M,EAAqB7M,EAAK6M,mBAE5B,CAEA,OAAKA,EAOsB,IAAvB88E,EAAYlwF,QAAgBE,MAAMC,QAAQ+vF,EAAY,KAI/B,IAAvBA,EAAYlwF,SAAiB4I,EAAcsnF,EAAY,KAAOtnF,EAAcsnF,EAAY,IAHpFA,EASD,CAAuCA,GAhBtCA,CAiBR,EClED,ICOAC,GAAA,SAAwCC,EAASC,EAAQr0D,EAAMD,GAAQC,OAItE,IAAIgN,EAAOsnD,GAAYC,OAAOH,EAASC,GAUvC,GARKrnD,IACJA,EAAOsnD,GAAYC,OAAOv0D,EAAKq0D,IAG3BrnD,IACJA,EAAOsnD,GAAYC,OAAOC,GAAeH,KAGrCrnD,EACJ,MAAM94B,GAAsCmgF,mBAAAA,OAAAA,EAA4C,sCAGzF,OAAOrnD,CACP,EC5BG5mC,GAAQlC,MAAM0C,UAAUR,MAe5B,SAASquF,GAAOr8E,EAAQ43C,GACvB,OAAI9rD,MAAMC,QAAQiU,GACVA,EAAOrN,QAAO,SAAUhH,EAAQS,GACtC,OAAOT,EAAO8H,OAAOmkD,EAAGxrD,GACxB,GAAE,IAEGwrD,EAAG53C,EACX,CAEA,SAASs8E,GAAM1nD,EAAM2nD,GACpB,IAAcC,EAEd,MAAgB,MAAZD,EAAK,IACRC,EAAWD,EAAK3zE,OAAO,IACP,MAAZgsB,EAAK,GACG,GAEA,KAEM6nD,GAAKz6D,KAAK4S,EAAM4nD,IAE5BC,GAAKz6D,KAAK4S,EAAM2nD,EACxB,CC5BA,SAASG,GAAyBhrF,GACjC,IAAKA,EAAOM,MAAO,OAAON,EAG1B,MAAMirF,EAAkB,CAAA,EAExB,IAAK,MAAOlsF,EAAUmsF,KAAoBrpF,OAAOC,QAAQ9B,EAAOM,OAAQ,CACvE,MAAMG,EAAOH,GAAMvB,IAAciB,EAAOmrF,iBAAmBnrF,EAAOmrF,gBAAgBpsF,GAGjFksF,EAAgBlsF,GADb0B,EACyB0pF,GAC3Be,EACAnsF,EACA0B,EAAK6M,oBAGsB,EAE9B,CAIA,OAFAtN,EAAOM,MAAQ2qF,EAERjrF,CACR;;;;;;GCoCA,SAASorF,GAAsBl1D,GAC9B,OAAOgZ,UACN,IAAKm8C,EACJ,OAAO,KAGR,MAAMC,EAAYpoD,GAAKxB,QAAQ2pD,EAAkBE,UAAY,KACvDvrF,OAAEA,GAAWqrF,EAEbG,EA8DR,SAAyBxrF,EAAQsrF,EAAWp1D,GACvCl2B,EAAOyrF,cACVzrF,EAAOyrF,YAAc,CAACzrF,EAAOyrF,aAAa/mF,OAAOqL,KAAK86E,GACjD3nD,GAAKU,WAAWinD,EAAK1pF,QAAQ,KAAM,KAAa0pF,EF5IvD,WAIC,OADOvuF,GAAMiG,KAAKy6C,UAAW,GACjB/7C,QAAO,SAAUhH,EAAQyxF,GACpC,OAAOf,GAAO1wF,GAAQ,SAAUipC,GAC/B,OAAOynD,GAAOe,GAAO,SAAUb,GAC9B,OAAOD,GAAM1nD,EAAM2nD,EACpB,GACD,GACA,GAAE,GACJ,CEmIUc,CAASL,EAAWT,MAIzB7qF,EAAO6uC,UACV7uC,EAAO6uC,QAAU,CAAC7uC,EAAO6uC,SAASnqC,OAAOqL,KAAKw6E,GAAWF,GAAciB,EAAWf,EAAQr0D,MAGvFl2B,EAAO4rF,aACV5rF,EAAO4rF,WAaT,SAA8BA,EAAYN,GAGzC,OAF6BlxF,MAAMC,QAAQuxF,GAAcA,EAAa,CAACA,IAE3C77E,KAAKxB,GACZ,iBAATA,EACH87E,GAAciB,EAAW/8E,GAG1B,CAAC87E,GAAciB,EAAW/8E,EAAK,IAAKA,EAAK,KAElD,CAvBsBs9E,CAAqB7rF,EAAO4rF,WAAYN,IAG7D,OAAOtrF,CACR,CAhF0B8rF,CAAgB9rF,EAAQsrF,EAAWp1D,GAE3D,MAAO,CACNl2B,OAAQwrF,EACRD,SAAUF,EAAkBE,SAC5B,CAEH,CCrFA,MAAMlqD,YAAEA,IAAgB0qD,GAMlBC,GADmC,SAAzB/1D,GAAQE,IAAIgX,SACDlX,GAAQC,WAAQv7B,EAW3C,IAAAsxF,GAAA,SAA0CvtF,EAAU,IACnD,MAAMw3B,EAAMx3B,EAAQw3B,KAAOD,GAAQC,MAEnC,MAAO,CACNg2D,kBAAextF,GAAO,CAAA,EAAA,CAAEw3B,QAExBi2D,gBAAiB9qD,GAAY,GAAI,CAChCo0B,UAAW22B,GAAoCl2D,GAC/Cm2D,QAASL,KAGVM,sBAAuB,IAAIx7E,IAC3By7E,oBAAqB,IAAIz7E,IACzB07E,WAAY,IAAIC,GAAU/tF,EAAQguF,cAAehuF,EAAQiuF,eAE1D,EC7BD,ICFAC,GAAiBplF,GAA4B,iBAAXA,EAAsBA,EAAOrG,QCD/D,GAAmB0rF,aAAY,GAAS,MACvC,MAAM3uF,EAAU,CACf,+HACA,4DACCoyB,KAAK,KAEP,OAAO,IAAItyB,OAAOE,EAAS2uF,OAAYlyF,EAAY,IACnD,EDNsEmyF,GAAa,IAAMtlF,YEA1F,MAAMulF,GAAuBtwC,IACxB95C,OAAOqqF,MAAMvwC,KAOhBA,GAAa,OACZA,GAAa,MACC,OAAdA,GACc,OAAdA,GAEC,OAAUA,GAAaA,GAAa,OAAwB,QAAdA,GAE9C,OAAUA,GAAaA,GAAa,OAEpC,OAAUA,GAAaA,GAAa,OAEpC,OAAUA,GAAaA,GAAa,OAEpC,OAAUA,GAAaA,GAAa,OAEpC,OAAUA,GAAaA,GAAa,OAEpC,OAAUA,GAAaA,GAAa,OAEpC,OAAUA,GAAaA,GAAa,OAEpC,OAAUA,GAAaA,GAAa,OACpC,OAAUA,GAAaA,GAAa,OAEpC,QAAWA,GAAaA,GAAa,QAErC,QAAWA,GAAaA,GAAa,QAErC,QAAWA,GAAaA,GAAa,SASzCzkB,GAAiB+0D,GACjB/0D,GAAesE,QAAUywD,aC5CzB,MAAME,GAAczlF,IACnB,GAAsB,iBAAXA,GAAyC,IAAlBA,EAAOtN,OACxC,OAAO,EAKR,GAAsB,KAFtBsN,EAASolF,GAAUplF,IAERtN,OACV,OAAO,EAGRsN,EAASA,EAAOrG,QCZR,w9TDY8B,MAEtC,IAAI+rF,EAAQ,EAEZ,IAAK,IAAIpzF,EAAI,EAAGA,EAAI0N,EAAOtN,OAAQJ,IAAK,CACvC,MAAMoC,EAAOsL,EAAO2lF,YAAYrzF,GAG5BoC,GAAQ,IAASA,GAAQ,KAAQA,GAAQ,MAKzCA,GAAQ,KAASA,GAAQ,MAKzBA,EAAO,OACVpC,IAGDozF,GAASH,GAAqB7wF,GAAQ,EAAI,GAC3C,CAEA,OAAOgxF,CAAK,EAGbl1D,GAAiBi1D,GAEjBj1D,GAAesE,QAAU2wD,GErCzB,IAAAG,GAAA,SAAoCC,EAAUh7E,GAC7C,OAAiB,IAAVA,EAAcg7E,EAAQ,GAAAtrF,OAAMsrF,EAAW,IAC9C,ECTD,IAAiBC,GAAA,CAACC,EAAMj3D,EAAOL,GAAQK,QACtC,MAAMnkB,EAASo7E,EAAK/oF,WAAW,KAAO,GAAsB,IAAhB+oF,EAAKrzF,OAAe,IAAM,KAChE81B,EAAWsG,EAAK55B,QAAQyV,EAASo7E,GACjCC,EAAqBl3D,EAAK55B,QAAQ,MACxC,OAAqB,IAAdszB,KAA4C,IAAxBw9D,GAA6Bx9D,EAAWw9D,EACnE,ECFD,MAAMr3D,IAACA,IAAOF,GAEd,IAAIw3D,GAuBJ,SAASC,GAAevvB,GACvB,OAAc,IAAVA,GAIG,CACNA,QACAwvB,UAAU,EACVC,OAAQzvB,GAAS,EACjB0vB,OAAQ1vB,GAAS,EAEnB,CAEA,SAAS2vB,GAAcC,EAAYC,GAClC,GAAmB,IAAfP,GACH,OAAO,EAGR,GAAIH,GAAQ,cACXA,GAAQ,eACRA,GAAQ,mBACR,OAAO,EAGR,GAAIA,GAAQ,aACX,OAAO,EAGR,GAAIS,IAAeC,QAA8BrzF,IAAf8yF,GACjC,OAAO,EAGR,MAAMh3E,EAAMg3E,IAAc,EAE1B,GAAiB,SAAbt3D,GAAI83D,KACP,OAAOx3E,EAGR,GAAyB,UAArBwf,GAAQO,SAAsB,CAGjC,MAAM03D,ECtEqB,GDsEIj+E,MAAM,KACrC,OACCtN,OAAOurF,EAAU,KAAO,IACxBvrF,OAAOurF,EAAU,KAAO,MAEjBvrF,OAAOurF,EAAU,KAAO,MAAQ,EAAI,EAGrC,CACR,CAEA,GAAI,OAAQ/3D,GACX,MAAI,CAAC,SAAU,WAAY,WAAY,YAAa,iBAAkB,aAAa3nB,MAAK2/E,GAAQA,KAAQh4D,MAAwB,aAAhBA,GAAIi4D,QAC5G,EAGD33E,EAGR,GAAI,qBAAsB0f,GACzB,MAAO,gCAAgCv5B,KAAKu5B,GAAIk4D,kBAAoB,EAAI,EAGzE,GAAsB,cAAlBl4D,GAAIm4D,UACP,OAAO,EAGR,GAAI,iBAAkBn4D,GAAK,CAC1B,MAAMua,EAAUz5B,UAAUkf,GAAIo4D,sBAAwB,IAAIt+E,MAAM,KAAK,GAAI,IAEzE,OAAQkmB,GAAIq4D,cACX,IAAK,YACJ,OAAO99C,GAAW,EAAI,EAAI,EAC3B,IAAK,iBACJ,OAAO,EAGV,CAEA,MAAI,iBAAiB9zC,KAAKu5B,GAAI83D,MACtB,EAGJ,8DAA8DrxF,KAAKu5B,GAAI83D,OAIvE,cAAe93D,GAHX,EAOD1f,CACR,CEvHA,SAASg4E,GAAaC,GACrB,GAAI,YAAY9xF,KAAK8xF,GAAgB,CAEpC,MAAM1kF,EAAI,mBAAmBgN,KAAK03E,GAClC,MAAO,CACNC,MAAO,EACPC,MAAO33E,SAASjN,EAAE,GAAI,IACtB6kF,MAAO53E,SAASjN,EAAE,GAAI,IAExB,CAEA,MAAM8kF,GAAYJ,GAAiB,IAAIz+E,MAAM,KAAKF,KAAIiG,GAAKiB,SAASjB,EAAG,MACvE,MAAO,CACN24E,MAAOG,EAAS,GAChBF,MAAOE,EAAS,GAChBD,MAAOC,EAAS,GAElB,CAEA,SAASC,GAAkBC,GAC1B,MAAM74D,IAACA,GAAOF,GAEd,GAAI,oBAAqBE,EACxB,QAASA,EAAI84D,gBAAgB/0F,OAAS,GAA2C,IAAtC+c,SAASkf,EAAI84D,gBAAiB,KAG1E,GAAI3B,GAAQ,iBAAmBA,GAAQ,kBAAoBA,GAAQ,oBAAsBA,GAAQ,mBAChG,OAAO,EAGR,GAAIA,GAAQ,mBAAqBA,GAAQ,oBACxC,OAAO,EAIR,GAAI,YAAan3D,EAChB,OAAO,EAIR,IFiFD,SAAyB64D,GAExB,OAAOtB,GADOI,GAAckB,EAAQA,GAAUA,EAAOE,OAEtD,CEpFMpB,CAA4BkB,GAChC,OAAO,EAGR,GAAIA,IAAWA,EAAOE,MACrB,OAAO,EAGR,GAAyB,UAArBj5D,GAAQO,SACX,OAAO,EAGR,GAAI,OAAQL,EACX,OAAO,EAGR,GAAI,qBAAsBA,EACzB,OAAO,EAGR,GAAI,iBAAkBA,EAAK,CAC1B,MAAMua,EAAU+9C,GAAat4D,EAAIo4D,sBAEjC,OAAQp4D,EAAIq4D,cACX,IAAK,YACJ,OAAsB,IAAlB99C,EAAQi+C,MACJj+C,EAAQk+C,OAAS,EAGlBl+C,EAAQi+C,MAAQ,EACxB,IAAK,UACJ,OAAOj+C,EAAQi+C,OAAS,SACzB,IAAK,SACJ,OAAOj+C,EAAQi+C,MAAQ,GAAuB,IAAlBj+C,EAAQi+C,OAAej+C,EAAQk+C,OAAS,GAGvE,CAEA,GAAI,gBAAiBz4D,EAAK,CAEzB,GAAwB,WAApBA,EAAIg5D,YACP,OAAO,EAGR,MAAMz+C,EAAU+9C,GAAat4D,EAAIg5D,aACjC,OAAOz+C,EAAQi+C,MAAQ,GAAKj+C,EAAQk+C,OAAS,EAC9C,CAEA,OAAO,CACR,CFrFItB,GAAQ,aACXA,GAAQ,cACRA,GAAQ,gBACRA,GAAQ,eACRG,GAAa,GACHH,GAAQ,UAClBA,GAAQ,WACRA,GAAQ,eACRA,GAAQ,mBACRG,GAAa,GAGV,gBAAiBt3D,KAEnBs3D,GADuB,SAApBt3D,GAAIE,YACM,EACiB,UAApBF,GAAIE,YACD,EAE2B,IAA3BF,GAAIE,YAAYn8B,OAAe,EAAI2b,KAAKY,IAAIQ,SAASkf,GAAIE,YAAa,IAAK,IA0GjFq3D,GAAeI,IAAc,GGpIV,IHqInBJ,GAAeI,IAAc,GGrIV,IDgGV,MAAAsB,GACTL,GAAkB94D,GAAQo5D,QAC1BN,GAAkB94D,GAAQq5D,QE/FnC,MAAMC,GAAM,KACNC,GAAM,IACNC,GAAM,IASZ,IAAAC,GAAA,SAAuCrlF,EAAMvE,GAC5C,OAAI6pF,GACI,CAACJ,GAAK,IAAKE,GAAKA,GAAK3pF,EAAK0pF,GAAKnlF,EAAMklF,GAAK,IAAKE,GAAKA,GAAKD,IAAKl/D,KAAK,IAGpEjmB,CACP,ECfD,aAAQ8W,OAAQ+V,aAAKE,GAAS5c,KAAEA,OAAM0G,GAAK3D,MAAAA,IAAUqyE,GAgBrD,MAAMC,GAAc,CACnBC,KAAMt1E,GACN+vB,QAASppB,GACT+Y,MAAOhZ,GACP6uE,QARD,SAAcx5E,GACb,OAAOA,CACR,GASMy5E,GAAU,CACfF,KAAMt1E,GAAK,KACX+vB,QAASppB,GAAO,KAChB+Y,MAAOhZ,GAAI,KACX6uE,QAASxyE,GAAM,MAsEhB,SAAS0yE,GAAgBC,GACxB,MAAMhD,EAAQgD,EAAa,GAI3B,GAFAzsF,EAAaypF,IAERj3D,GAAQo5D,OAAOH,MACnB,OAAOhC,EAGR,MAAMiD,EAAiBl6D,GAAQo5D,OAAOe,QAAU,GAAK,GAAKn6D,GAAQo5D,OAAOe,QACnEC,EAAYxuF,OAAOyM,OAAO4hF,GAAcjvF,QAAO,CAACgB,EAAGC,IAAMD,EAAIC,IAGnE,OAAIiuF,EAAiBE,EAxGA,EAyGbnD,EAGDiD,GAAkBE,EAAYnD,EA5GhB,EA6GtB,CAQA,SAASz2D,GAAUh1B,EAAU0F,EAAQ+uB,GACpC,IAAKz0B,EAASvH,OAAQ,MAAO,GAE7B,MAAMo2F,EAAkB,IAAI7uF,GAAU6mB,MAAK,CAACrmB,EAAGC,KAEzCD,EAAE/C,MAAQgD,EAAEhD,MAAc,EAG3B+C,EAAE/C,OAASgD,EAAEhD,KAAa,EAE1B+C,EAAE/C,KAAOgD,EAAEhD,MAAc,EAEzB+C,EAAE/C,KAAOgD,EAAEhD,KAAa,EAExB+C,EAAEq5B,OAASp5B,EAAEo5B,QAAgB,EAE7Br5B,EAAEq5B,OAASp5B,EAAEo5B,OAAe,EAEzB,IAQF40D,EAAe,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAkBlD,IAAI1rC,EAAS,KAUb,SAAS+rC,EAAkBvxF,GAC1B,IAAI/E,EAAS+E,EAAQqL,KAErBpQ,EAASA,EAEPkH,QAAQ,oBAAqB,KAC7BA,QAAQ,MAAO,IAEjB,MAAMqvF,EAAU,KAAAzuF,OAAQ/C,EAAQyB,KAAO,KAMvC,OAJIxG,EAAOwf,SAAS+2E,KACnBv2F,EAASA,EAAOqC,MAAM,EAAGrC,EAAOuoC,YAAYguD,KAGtCv2F,CACR,CAvBIkN,IACHq9C,aAvFF,SAAiBisC,EAAWv6D,GAC3B,GAAIu6D,EAAUjsF,WAAW,KACxB,OAAO4yB,GAAUq5D,GAGlB,MAAMC,EAAWxtD,GAAK2C,SAAS3P,EAAKu6D,GAAWxgF,MAAMizB,GAAK4C,KAAKxV,KAAK,KAEpE,OAAOo/D,GAAagB,EAAQ,UAAA3uF,OAAY0uF,GACzC,CA+EeE,CAAQxpF,EAAQ+uB,GAAQ,OAwBtC,MAAM06D,EAAkBN,EAAgBvgF,KAAK/Q,IAC5C,MAAME,KAAEA,EAAIo8B,OAAEA,EAAM56B,SAAEA,GAAa1B,EAI7B2mE,EAAM,CACXzmE,EAAOA,EAAKnC,WAAa,GACzBu+B,EAASA,EAAOv+B,WAAa,GAC7BizF,GAAQtvF,GAAYmvF,GAAYnvF,GAAUsvF,GAAQtvF,IAAaA,EAC/D6vF,EAAkBvxF,GAClBk4B,GAAIl4B,EAAQyB,MAAQ,KAKrB,OAtDD,SAAyB2vF,GACxB,IAAK,MAAO1mE,EAAKhvB,KAAUmH,OAAOC,QAAQsuF,GAAU,CACnD,MAAMS,EAAkBn2F,EAAQA,EAAMqC,WAAarC,EAC7CwyF,EAAQgD,EAAaxmE,GAE3BjmB,EAAaypF,GACbgD,EAAaxmE,GAAO7T,KAAK9b,IAAImzF,EAAOD,GAAY4D,GACjD,CAGD,CA0CCC,CAAgBnrB,GAETA,CAAG,IA6BX,OA1BAnhB,GAAUusC,GACRA,MAAMH,EAAiB,CACvBI,OAAQD,GAAME,oBAAoB,QAClCb,QAAS,CACR,EAAG,CAAEc,UAAW,QAAShE,MAAOgD,EAAa,GAAIiB,aAAc,GAC/D,EAAG,CAAED,UAAW,OAAQhE,MAAOgD,EAAa,IAC5C,EAAG,CAAEgB,UAAW,SAAUhE,MAAOgD,EAAa,IAC9C,EAAG,CACFgB,UAAW,OACXhE,MAAO+C,GAAgBC,GACvBkB,SAAUnB,GAAgBC,GAAgB,GAE3C,EAAG,CAAEgB,UAAW,OAAQhE,MAAOgD,EAAa,GAAIiB,aAAc,IAE/DE,mBAAoB,KAAM,IAE1BphF,MAAM,MACNF,KAKCuhF,GAAOA,EAAGnwF,QAAQ,iBAAiB,CAACowF,EAAIC,EAAIC,IAAOv6D,GAAG,GAAAn1B,OAAIyvF,EAAE,KAAAzvF,OAAI0vF,QAEjEnhE,KAAK,MAEAk0B,CACR,CAKA,IAAAktC,GAAA,SAA0CC,EAASC,GAClD,IAAIptC,EArLL,SAAiCmtC,GAChC,MAAME,EAA2BF,EAAQ7pB,SAAS7tE,GACjDA,EAAO63F,sBAAsB/hF,KAAKw6B,GAAYA,EAAQlgC,SAIvD,MAFoC,IAAI,IAAIzG,IAAIiuF,IAEb5wF,QAAO,CAACujD,EAAQja,KAClDia,GAAUtjC,GAAI,oBAGd,GAAAnf,OAFAyiD,GAAUja,EAEM,QACd,KACJ,CAyKcwnD,CAAwBJ,GAErCntC,GArND,SAA+BmtC,GAC9B,MAAMK,EAAyBL,EAAQ7pB,SAAS7tE,GAAWA,EAAOg4F,eAElE,GAAsC,IAAlCD,EAAuB93F,OAC1B,MAAO,GAGR,MAAMg4F,EAAW,IAAItuF,IAErB,OAAOouF,EAAuB/wF,QAAO,CAACujD,EAAQja,IACzC2nD,EAASptF,IAAIylC,EAAQlgC,MAAcm6C,GAEvC0tC,EAAS/lE,IAAIoe,EAAQlgC,MAErBm6C,GAAUrjC,GAAO,yBACjBqjC,GAAUja,EAAQlgC,KAEdkgC,EAAQ4nD,YACX3tC,GAAUttB,GAAI,UACdstB,GAAUttB,GAAIE,GAAUmT,EAAQ4nD,aAGjC,GAAApwF,OAAUyiD,EAAM,QACd,KACJ,CA6LW4tC,CAAsBT,GAEhC,IAAIU,EAAa,EACbC,EAAe,EA0CnB,GAxCA9tC,EAASmtC,EAAQ1wF,QAAO,CAACsxF,EAAOt4F,KAE/B,GAAIA,EAAOu4F,YACV,IAAK,MAAMt4D,KAASjgC,EAAOu4F,YAC1Bv4F,EAAOuwC,SAAShuC,KAAK,CACpB0C,KAAMg7B,EAAMh7B,KACZo8B,OAAQpB,EAAMoB,OACd76B,KAAMy5B,EAAM/1B,cACZzD,SAAU,QACV2J,eAAS6vB,EAAM7vB,KAAS6vB,MAAAA,OAAAA,EAAM/1B,cAAa,OAE5CkuF,GAAc,EAIhBE,GAAS97D,GACRx8B,EAAOuwC,SACPvwC,EAAOkN,QAAU,GAChByqF,GAAeA,EAAY17D,KAAQD,GAAQC,OAG7C,IAAK,MAAMqU,KAAWtwC,EAAOuwC,SAC5B,OAAQD,EAAQ7pC,UACf,IAAK,QACJ2xF,GAAc,EACd,MACD,IAAK,UACJC,GAAgB,EAChB,MACD,QACC,MAAM,IAAIxyF,MAAK,sBAAAiC,OAAuBwoC,EAAQ7pC,SAAY,MAI7D,OAAO6xF,CAAK,GACV/tC,GAGHA,EAASA,EAAO9sC,OAED,KAAX8sC,EAAe,CAClBA,EAAM,KAAAziD,OAAQyiD,EAAY,QAE1B,MAAMmpB,EAAQ0kB,EAAaC,EAE3B,GAAI3kB,EAAQ,EAAG,CACd,MAAM8kB,EACL,GAAG9kB,OAAAA,EAASyf,KAAAA,OAAAA,GAAU,UAAWzf,IAAM,KAAA5rE,OAClCswF,EAAcjF,KAAAA,OAAAA,GAAU,QAASiF,IACjCC,KAAAA,OAAAA,EAAgBlF,KAAAA,OAAAA,GAAU,UAAWkF,GAAgB,KAE3D9tC,GAAM,GAAAziD,OAAO0wF,EAAW,OACzB,CACD,CAEA,OAAOjuC,CACP,ECvTD,MAAMptB,UAAEA,GAASlW,IAAEA,GAAGC,OAAEA,GAAM+V,IAAEA,GAAG3Z,MAAEA,IAAUqyE,GAoG/C,SAAS8C,GAAQ/nD,EAAOgoD,GAEvB,MAAM14F,EAAS,CAAA,EAEf,IAAK,MAAMsU,KAAQo8B,EAAO,CACzB,MAAMjhB,EAAMipE,EAAMpkF,GAClB,IAAIi8B,EAAWvwC,EAAOyvB,QAEL/uB,IAAb6vC,IACHvwC,EAAOyvB,GAAO8gB,EAAW,IAG1BA,EAAShuC,KAAK+R,EACf,CAEA,OAAOtU,CACR,CAMA,SAAS24F,GAASzrF,GACjB,OAAKA,GAAUA,EAAO3C,WAAW,KAChC,GAAAzC,OAAUoF,GAGJuoF,GAAavoF,EAAM,UAAApF,OAAYoF,GACvC,CAOA,SAAS0rF,GAASpyF,EAAMqyF,GACvB,OAAIA,GAAYA,EAAShtF,IACjB4pF,GAAajvF,EAAMqyF,EAAShtF,KAG7BrF,CACR,CCxIA,MAAMsyF,GAAa,CAClBC,QCHD,SAA2CrB,GAC1C,OAAOA,EACL7pB,SAAS7tE,GACTA,EAAOuwC,SAASz6B,KACdw6B,GACA,GAAGtwC,OAAAA,EAAOkN,OAAM,MAAA,QAAApF,OACRwoC,EAAQrrC,WACTqrC,OAAAA,OAAAA,EAAQjP,OAAM,gBAClBiP,EAAQ7pC,SAAa,OAAA,GAAAqB,OACrBwoC,EAAQlgC,UAGbimB,KAAK,KACP,EDTA2iE,OEFD,SAA0CtB,EAASC,GAClD,MAAMsB,EAAQ,oBACRJ,EAAWlB,EAAYnyF,aAE7B,OAAOkyF,EACL7pB,SAAQ,EAAG3gE,SAAQqjC,cACnBA,EAASz6B,KAAI,EAAG7Q,OAAMo8B,SAAQK,UAASC,YAAWvxB,OAAM3J,WAAUD,WACjE,MAAM+O,EAeV,SAAsBA,EAAKsjF,GAC1B,IAAKA,EAAU,OAAOtjF,EAEtB,MAAM1J,EAAMgtF,EAAShtF,iBAAYgtF,EAAShtF,KAAQ,GAC5CgB,EAAUgsF,EAAShsF,QAAU,mBAAqB,GAExD,MAAA,GAAA/E,OAAUyN,GAAGzN,OAAG+E,GAAO/E,OAAG+D,EAC3B,CAtBgBqtF,CAAa9oF,EAAMyoF,EAASryF,IAExC,YAAmB9F,IAAZghC,EAAqB,KAAA55B,OACpBrB,EAAQ,UAAAqB,OAASoF,EAAM,UAAApF,OAAS7C,EAAI,SAAA6C,OAAQu5B,EAAM,WAAAv5B,OAAUmxF,EAAU1jF,MAAAA,OAAAA,GACtE9O,KAAAA,OAAAA,EAAiByG,UAAAA,OAAAA,EAAejI,UAAAA,OAAAA,kBAAYo8B,EAAM,aAAAv5B,OAAY45B,EAAO,eAAA55B,OAAc65B,EAAS,WAAA75B,OAAUmxF,EAAK,MAAAnxF,OAAKyN,EAAK,MAG9H8gB,KAAK,KACP,EFZAgV,KGHD,SAAwCqsD,GACvC,MAAMyB,EAAiBzB,EAAQ5hF,KAAK9V,GACnC4H,OAAOC,QAAQ7H,GACbuyB,QAAO,EAAE9C,MAAUA,EAAIllB,WAAW,OAClCvD,QAAO,CAAuC6L,GAAM4c,EAAKhvB,MACzDoS,EAAI4c,GAAOhvB,EAEJoS,IACL,CAAA,KAGL,OAAO7H,KAAKjK,UAAUo4F,EACtB,EHRA5rF,OAAQkqF,GACR2B,IfPD,SAAuC1B,GACtC,MAAMz1D,EAAQ,CAAA,sBAAAn6B,OAAuB4vF,EAAQz3F,SAE7C,IAAK,MAAOiF,EAAOlF,KAAW03F,EAAQ7vF,UAOrC,GANAo6B,EAAM1/B,KAAI,GAAAuF,OACN9H,EAAOq5F,QAAU,SAAW,KAAI,KAAAvxF,OAAI5C,EAAQ,EAAOlF,OAAAA,OAAAA,EAAOs5F,QAAU,WAAa,IACnFt5F,OAAAA,EAAOkN,SAILlN,EAAOuwC,SAAStwC,OAAS,EAAG,CAC/BgiC,EAAM1/B,KAAK,MAAO,aAElB,IAAK,MAAM+tC,KAAWtwC,EAAOuwC,SAC5BtO,EAAM1/B,KACW+tC,gBAAAA,OAAAA,EAAQlgC,KACRkgC,KAAAA,gBAAAA,OAAAA,EAAQ7pC,UAEV6pC,WAAAA,cAAAA,OAAAA,EAAQrrC,MAAI,gBAAA6C,OACVwoC,EAAQjP,QAAM,iBAAAv5B,OACbwoC,EAAQ5O,SAAO,mBAAA55B,OACbwoC,EAAQ3O,WAAS,gBAAA75B,OACpBwoC,EAAQ9pC,OAI1By7B,EAAM1/B,KAAK,MACZ,CAKD,OAFA0/B,EAAM1/B,KAAK,IAEJ0/B,EAAM5L,KAAK,KAClB,EezBAkjE,KIRD,SAAwC7B,GACvC,MAAMz1D,EAAQy1D,EAAQ7pB,SAAS7tE,GAC9BA,EAAOuwC,SAASz6B,KACdw6B,GACA,UAAGtwC,EAAOkN,OAAM,KAAApF,OAAIwoC,EAAQrrC,KAAQqrC,KAAAA,OAAAA,EAAQjP,OAAM,MAAA,GAAAv5B,OAC/CwoC,EAAQlgC,KAASkgC,MAAAA,OAAAA,EAAQ7pC,SAAQ,WAGjCitE,EAAQzxC,EAAMhiC,OACpB,IAAIsqD,EAAStoB,EAAM5L,KAAK,IAMxB,OAJIq9C,EAAQ,IACXnpB,GAAM,KAAAziD,OAAS4rE,EAAK,YAAA5rE,OAAqB,IAAV4rE,EAAc,IAAM,GAAM,OAGnDnpB,CACP,EJPAivC,QDGD,SAA2C9B,EAASC,GACnD,IAAIptC,EAASkvC,GAAgB/B,EAASC,GAEvB,KAAXptC,IACHA,EAAS,MAGV,MAAMmvC,EAAehC,EAAQnlE,QAAQvyB,GAAWA,EAAOs5F,UAASr5F,OAC1D05F,EAAiBD,EACjBhC,GAAAA,OAAAA,EAAQz3F,OAASy5F,EAAY,QAAA5xF,OAAO4vF,EAAQz3F,QAC/Cy3F,EAAQz3F,OAEXsqD,GAAUptB,GAAaw8D,GAAAA,OAAAA,EAAkBxG,KAAAA,OAAAA,GAAU,SAAUuE,EAAQz3F,QAAoB,eAEzF,IAAK,MAAMD,KAAU03F,EAAS,CAC7B,IAAIkC,EAAat2E,GAEbtjB,EAAOq5F,QACVO,EAAa3yE,GACHjnB,EAAOuwC,SAAStwC,OAC1B25F,EAAa1yE,GACHlnB,EAAOs5F,UACjBM,EAAa38D,IAGd,IAAI48D,EAAalB,GAAS34F,EAAOkN,QAE7BlN,EAAOs5F,UACVO,GAAc,cAGftvC,GAAUqvC,EAAeC,IAAAA,OAAAA,EAAe,MACzC,CAEA,MAAMtpD,EAAWmnD,EAAQ7pB,SAASryD,GAAMA,EAAE+0B,WAE1C,GAAwB,IAApBA,EAAStwC,OACZsqD,GAAU,2BACJ,CACN,MAAMuvC,EAAqBrB,GAAQloD,GAAWjyB,GAAMA,EAAE7X,WACtD,IAAIszF,GAAuB,EAK3B,MAAMC,EAAiBvzF,IACtB,MAAMggE,EAAWqzB,EAAmBrzF,GAEpC,QAAiB/F,IAAb+lE,EAAwB,OAE5Blc,GAAU,KACVA,GAAUptB,GAAaspC,GAAAA,OAAAA,EAASxmE,OAAM,KAAA6H,OAAIqrF,GAAU1sF,EAAUggE,EAASxmE,QAAkB,aAEzF,MAAMg6F,EAAiBxB,GAAQhyB,GAAWnoD,GAAMA,EAAE9X,OAC5CqyF,EAAWlB,EAAYnyF,aAE7B,IAAK,MAAOgB,EAAMgqC,KAAS5oC,OAAOC,QAAQoyF,GAAiB,CAC1D,MAAMruF,EAAOitF,EAASryF,GAChBqG,EAAUjB,GAAQA,EAAKiB,QAAU,mBAAqB,GAE5D09C,GAAUttB,GAAQ27D,IAAAA,OAAAA,GAASpyF,EAAMoF,gBAAU4kC,EAAKvwC,QAAM6H,OAAG+E,EAAY,QAEhEktF,GAAwBnuF,GAAQA,EAAKiB,UACzCktF,GAAuB,EAEzB,GAGDC,EAAc,SACdA,EAAc,WAEVD,IACHxvC,GAAUrjC,GAAO,0DAEnB,CAEA,MAAA,GAAApf,OAAUyiD,EAAM,KAChB,GM5FD,IAAe2vC,GAAA,MAAAjlD,IAAoB,CACjClvC,OAAQuoC,GAAUjpC,EAAU4sF,SAASlsF,UCCvC,MAAMo0F,WAAmB/oD,GACvBC,kBACEhwC,KAAK4/B,UAAYA,GAAU5/B,KAAKC,MAAO,CAAEu+B,cAAc,GACzD,CAEAnoB,QAAQjW,GACN,IAAI1B,EAAO,IAAIguC,GACf1sC,KAAKowC,KAAK1xC,EAAM0B,EAAM,IACtB,IAAIO,EACFX,KAAKC,MAAM+oC,WAAW5oC,EAAM,KAC5BJ,KAAKC,MAAM+oC,WAAWhpC,KAAKC,MAAMq+B,IAAI1/B,OAAS,GAChDF,EAAKmN,OAAO9G,IAAM,CAChB+0B,OAAQ15B,EAAM,GACdwD,KAAMjD,EAAIiD,KACVo8B,OAAQr/B,EAAI0oC,KAGd,IAAIt6B,EAAO3O,EAAM,GAAGY,MAAM,GAG1B,GAFuB,OAAnB+N,EAAK/N,OAAO,KAAa+N,EAAOA,EAAK/N,MAAM,GAAI,IAE/C,QAAQM,KAAKyN,GACfrQ,EAAKqQ,KAAO,GACZrQ,EAAKuD,KAAK+oB,KAAOjc,EACjBrQ,EAAKuD,KAAKgpB,MAAQ,OACb,CACL,IAAItoB,EAAQoM,EAAKpM,MAAM,wBACvBjE,EAAKqQ,KAAOpM,EAAM,GAClBjE,EAAKuD,KAAK+oB,KAAOroB,EAAM,GACvBjE,EAAKuD,KAAKgpB,MAAQtoB,EAAM,EAC1B,CACF,CAEAX,KAAKtB,GACCA,EAAO9B,OAAS,GAAK8B,EAAOwS,MAAK1U,GAAc,SAATA,EAAE,MAC1C2hC,MAAMn+B,KAAKtB,EAEf,CAEA6vC,kBAAmB,CAEnBC,YAAY9vC,GACVV,KAAK0U,QAAUhU,EAAO+T,KAAIjW,GAAKA,EAAE,KAAIw2B,KAAK,GAC5C,CAEAqc,kBACErxC,KAAKsvC,QAAQrtC,KAAKxC,OAAS,GAC7B,CAEAiyC,cAAe,CAEfP,cAAczyC,GACZA,EAAKqC,KAAO,EACd,CAEA8vC,wBAAwBnwC,GACtB,IAGIq4F,EAAWC,EAHXl7F,EAAQkC,KAAKlC,MAAM4C,GACvB,IAAc,IAAV5C,EAAiB,OAGrB,IAAKi7F,EAAYj7F,EAAQ,EAAGi7F,GAAa,GACV,SAAzBr4F,EAAOq4F,GAAW,GADoBA,KAG5C,GAAkB,IAAdA,EAAiB,OAErB,IAAKC,EAAUD,EAAY,EAAGC,GAAW,EAAGA,IAC1C,GAA2B,UAAvBt4F,EAAOs4F,GAAS,GAAgB,CAClCA,GAAW,EACX,KACF,CAGF,IAAIjrD,EAAQrtC,EAAOM,MAAM+3F,GACrBrkF,EAAShU,EAAOM,MAAMg4F,EAASD,GACnCr4F,EAAO6sC,OAAOyrD,EAASt4F,EAAO9B,OAASo6F,GACvCh5F,KAAK0U,OAASA,EAAOD,KAAIjW,GAAKA,EAAE,KAAIw2B,KAAK,IAEzCh1B,KAAKgC,KAAK+rC,EACZ,CAEAmD,uBAAwB,CAExBf,UAME,IALInwC,KAAKsvC,QAAQjxC,OAAS2B,KAAKsvC,QAAQjxC,MAAMO,SAC3CoB,KAAKsvC,QAAQrtC,KAAKmvB,UAAYpxB,KAAKoxB,WAErCpxB,KAAKsvC,QAAQrtC,KAAKxC,OAASO,KAAKsvC,QAAQrtC,KAAKxC,OAAS,IAAMO,KAAK0U,OAE1D1U,KAAKsvC,QAAQ7uC,QAClBT,KAAKsvC,QAAUtvC,KAAKsvC,QAAQ7uC,OAC5BT,KAAKsvC,QAAQrtC,KAAKxC,MAAQ,EAE9B,EC3FF,IAAAw5F,GAAA,SAAoC36D,EAAKx1B,GACvC,IAAI7I,EAAQ,IAAIk/B,GAAMb,EAAKx1B,GAEvB8oC,EAAS,IAAIknD,GAAW74F,GAG5B,OAFA2xC,EAAOrwC,QAEAqwC,EAAO5nC,IACf,ECTD,MAAMqgC,GAAa6uD,GAAmCl4D,QAWhDm4D,GAAmBhmD,KAQzB,IAAiBimD,GAAA,eAAgCp1F,EAAWZ,EAAU,CAAA,GACrE,MAAMi2F,EAASj2F,EAAQgyF,SAAWpxF,EAAUitF,oBAAoB5kE,IAAIjpB,EAAQgyF,eAAY/1F,EAExF,GAAIg6F,EACH,OAAOA,EAGR,GAAIr1F,EAAU4sF,SAASv9C,OAAQ,CAC9B,IAAIzU,EAAQ,+CAOZ,OALAA,GAC+B,QAA9B56B,EAAU4sF,SAASv9C,OAChB,6FACgG,iGAE7FU,QAAQC,OAAO,IAAIxvC,MAAMo6B,GACjC,CAEA,MAAMyU,EAASjwC,EAAQk2F,aAkDxB,SAAyBA,GACxB,IAAIC,EAEJ,GAA4B,iBAAjBD,EAA2B,CACrC,IACCC,EAAWC,QAAQF,EAgBpB,CAfE,MAAO16D,GACR,GACCA,GACiB,iBAAVA,GAEQ,qBAAfA,EAAMh+B,MAENg+B,EAAMl7B,QAAQuB,SAASq0F,GAEvB,MAAM,IAAI90F,MAC+B80F,wCAAAA,OAAAA,mCAAqCA,EAAY,wDAAA7yF,OAAuDm4B,IAIlJ,MAAMA,CACP,CAaA,OAPK26D,EAASh4F,QACbg4F,EAAW,CACVh4F,MAAOg4F,EACP75F,UAAWyzC,GAAQzzC,YAId65F,CACR,CAEA,GAA4B,iBAAjBD,EAA2B,CACrC,GAAkC,mBAAvBA,EAAa/3F,MAGvB,MAAM,IAAIw/C,UAET,iJAGF,OAPCw4C,EAAQtvD,GAAA,GAAQqvD,GAOVC,CACR,CAEA,MAAM,IAAI/0F,MAA0D,oDACrE,CAnGIi1F,CAAgBr2F,EAAQk2F,cA4H5B,SAAmBt1F,EAAWoxF,GAC7B,MAAMsE,EAAgBtE,EAAWxtD,GAAK+xD,QAAQvE,GAAUp0F,MAAM,GAAGqK,cAAgB,GAC3EuuF,EAAa,CAAC,MAAO,OAAQ,WAE/BC,GAA6BH,IAChC3xF,QAAQ9B,KACJmvF,GAAAA,OAAAA,sGAAoGyE,GAA6BH,GACpI,yCAGF,MAAO,CACNn4F,MACCyC,EAAU4sF,SAASrlF,KAAOquF,EAAW30F,SAASy0F,GAC3CT,GACA9lD,GAAQ5xC,MACZ7B,UAAWyzC,GAAQzzC,UAErB,CA5IIo6F,CAAU91F,EAAWZ,EAAQgyF,UAE1B2E,EAAiB,CACtBhtE,KAAM3pB,EAAQgyF,SACd/hD,UAID,IAAI2mD,EAQJ,QANqB36F,IAAjB+D,EAAQxC,KACXo5F,EAAU52F,EAAQxC,KACRwC,EAAQgyF,WAClB4E,QAAgBC,aAAEC,SAACC,SAAS/2F,EAAQgyF,SAAU,cAG/B/1F,IAAZ26F,EACH,OAAOjmD,QAAQC,OAAO,IAAIxvC,MAAM,8BAGjC,GAAIpB,EAAQg3F,gBAAkBh3F,EAAQg3F,eAAex7F,OAAQ,CACxDoF,EAAU4sF,SAASrlF,MACtBxD,QAAQ9B,KACP,oGAEDjC,EAAU4sF,SAASrlF,KAAM,GAG1B,MAAM8uF,EAAaj3F,EAAQxC,KAAOwC,EAAQk3F,aAAel3F,EAAQgyF,SAEjE,IAAK,MAAMmF,KAAiBn3F,EAAQg3F,eACnCJ,EAAUO,EAAcP,EAASK,EAEnC,CAEA,MAAMG,QAAsB,IAAInwD,GAAW8uD,GAAkBa,EAASD,GAMtE,OAJI32F,EAAQgyF,UACXpxF,EAAUitF,oBAAoBv+E,IAAItP,EAAQgyF,SAAUoF,GAG9CA,CACP,EA2DD,MAAMX,GAA+B,CACpCY,KAAM,eACNC,GAAI,+BACJC,IAAK,+BACLC,KAAM,eACNC,GAAI,mBACJC,KAAM,eACNC,IAAK,UACLC,KAAM,eACNC,OAAQ,eACRC,GAAI,+BACJC,IAAK,+BACLC,IAAK,eACLC,IAAK,eACLC,IAAK,gBC5JN,ICQAC,GAAA,SAA8C38D,GAE7C,MAAyD,WAAfA,EAAMh+B,IAChD,ECED,MAAM46F,GAAY,MAkBlB,SAASC,GAAmBplF,EAAShS,EAAOq3F,EAAaniC,EAAax0D,EAAK42F,GAC1E,MAAO,CACNtlF,UACAhS,QACAU,IAAKA,QAAO1F,EACZq8F,cACAC,UAAgC,kBAAdA,EAA0BA,OAAYt8F,EACxDk6D,cAEF,CAQA,IAAAqiC,GAAA,SAA+C5xF,EAAMrL,GACpDA,EAAOqF,UAAYrF,EAAOqF,WAAa,CACtCW,eAAgB,CAAE,EAClBV,eAAgB,CAAE,EAClBC,eAAgB,CAAE,EAClBC,aAAc,CAAC,GAOhB,MAAMQ,EAAiB,CACtB62F,CAACA,IAAY,IASd,IAAIK,EAuDJ,OA7DAl9F,EAAOqF,UAAUW,eAAiBA,EAQlCqF,EAAKkP,cAAc7C,IAClB,GAAIwlF,EAIH,YAFIA,IAAcxlF,IAASwlF,EAAY,OAKxC,MAAMC,EAAczlF,EAAQnW,OAG5B,GAEGiqB,GAAwB9T,KACzBE,GAAmBF,KACnBylF,GACqB,YAArBA,EAAYj9F,OACXwX,EAAQtH,KAAK9J,SAAS,QAAS62F,EAAY/sF,KAAK7F,WAAW,MAK7D,YAFA6yF,EAAa1lF,GAKd,IAAI4yB,EAAY5yB,EAAQxK,QAAUwK,EAAQxK,OAAO9G,KAAOsR,EAAQxK,OAAO9G,IAAInB,MAAS,EACpF,MAAMo4F,EAAc3lF,EAAQwtB,QAE5B,IAAIyL,EAAUwsD,EAEd,MAAQ3xE,GAAwBmlB,KAAa/4B,GAAmB+4B,IAAU,CACzE,MAAM2sD,EAAe3sD,EAAQzjC,QAAUyjC,EAAQzjC,OAAO9G,KAAOuqC,EAAQzjC,OAAO9G,IAAInB,MAAS,EAEzF,GAAIqlC,EAAW,IAAMgzD,EAAa,MAElCD,EAAYjtF,MAAI,KAAAtI,OAAS6oC,EAAQvgC,MAE7BitF,EAAYnwF,QAAUyjC,EAAQzjC,SACjCmwF,EAAYnwF,OAAO9G,IAAMuqC,EAAQzjC,OAAO9G,KAGzC82F,EAAYvsD,EACZ,MAAMpvC,EAAOovC,EAAQpvC,OAErB,IAAKA,GAAsB,YAAdA,EAAKrB,KAAoB,MAEtCywC,EAAUpvC,EACV+oC,EAAWgzD,CACZ,CAEAF,EAAaC,EAAY,IAGnBr9F,EAoCP,SAASu9F,EAAY7lF,EAASzS,EAAMH,EAAU81D,GAC7C,GAAI4iC,EAAeX,IAClB,MAAMnlF,EAAQuoB,MAAM,uCAAwC,CAC3DsB,OAAQ,cAIV,GAAIz8B,IAAa+3F,GAChB,IAAK,MAAMY,KAAoB71F,OAAO4nB,KAAKxpB,GAAiB,CAC3D,GAAIw3F,EAAeC,GAAmB,SAEtC,MAAMC,EAASD,IAAqBZ,GAEpCc,EAAmBjmF,EAASzS,EAAMw4F,EAAkBC,EAAQ9iC,GAC5DgjC,EAAiB34F,EAAMw4F,EAAkBC,EAC1C,KACM,CACN,GAAIF,EAAe14F,GAClB,MAAM4S,EAAQuoB,MAAK,IAAAn4B,OAAKhD,EAAuC,+BAAA,CAC9Dy8B,OAAQ,cAIVo8D,EAAmBjmF,EAASzS,EAAMH,GAAU,EAAM81D,GAClDgjC,EAAiB34F,EAAMH,GAAU,EAClC,CACD,CAmGA,SAASs4F,EAAa1lF,GAGrB,GAAKE,GAAmBF,GAIxB,OAAQD,GAAwBC,IAC/B,KAAKL,IApKP,SAAmCK,GAClC,GAAIA,EAAQxK,QAAUwK,EAAQxK,OAAOxH,MAAO,CAC3C,MAAMT,EAAOyS,EAAQxK,OAAOxH,MAAMT,KAC5B21D,EAAcijC,EAAenmF,EAAQtH,MAE3C,IAAK,MAAMtL,KAAYg5F,EAAgBzmF,GAAsBK,EAAQtH,MACpEmtF,EAAY7lF,EAASzS,EAAMH,EAAU81D,EAEvC,CACD,CA4JGmjC,CAA0BrmF,GAC1B,MACD,KAAKJ,IAzJP,SAAuCI,GACtC,GAAIA,EAAQxK,QAAUwK,EAAQxK,OAAO9G,IAAK,CACzC,MAAMnB,EAAOyS,EAAQxK,OAAO9G,IAAInB,KAC1B21D,EAAcijC,EAAenmF,EAAQtH,MAE3C,IAAK,MAAMtL,KAAYg5F,EAAgBxmF,GAA2BI,EAAQtH,MACzEmtF,EAAY7lF,EAASzS,EAAO,EAAGH,EAAU81D,EAE3C,CACD,CAiJGojC,CAA8BtmF,GAC9B,MACD,KAAKN,IA5GP,SAA+BM,GAC9B,MAAMkjD,EAAcijC,EAAenmF,EAAQtH,MAE3C,IAAK,MAAM6tF,KAAiBH,EAAgB1mF,GAAiBM,EAAQtH,MAAO,CAC3E,MAAM8tF,EAAaD,IAAkBpB,GAErC,GAAIW,EAAeS,GAClB,MAAMvmF,EAAQuoB,MACbi+D,EACG,uCAAsC,IAAAp2F,OAClCm2F,EAAa,+BACpB,CACC18D,OAAQ,cAKX,GAAI7pB,EAAQxK,QAAUwK,EAAQxK,OAAOxH,MAAO,CAC3C,MAAMT,EAAOyS,EAAQxK,OAAOxH,MAAMT,KAElC,GAAIi5F,EACH,IAAK,MAAMp5F,KAAY8C,OAAO4nB,KAAKxpB,GAClC23F,EAAmBjmF,EAASzS,EAAMH,EAAUA,IAAa+3F,GAAWjiC,QAGrE+iC,EAAmBjmF,EAASzS,EAAMg5F,GAAe,EAAMrjC,EAEzD,CACD,CACD,CAgFGujC,CAAsBzmF,GACtB,MACD,KAAKH,IA7EP,SAA8BG,GAC7B,IAAK,MAAM0mF,KAAgBN,EAAgBvmF,GAAgBG,EAAQtH,MAAO,CAEzE,MAAMsxB,EAAUhqB,EAAQxK,QAAUwK,EAAQxK,OAAO9G,KAAOsR,EAAQxK,OAAO9G,IAAInB,KAI3E,GAFAuE,EAAak4B,GAET08D,IAAiBvB,GA0BrB,GAAIW,EAAeX,UAA+Cn8F,IAAjCsF,EAAeo4F,GAE/Cp4F,EAAeo4F,GAAgBp4F,EAAwB,IAAE8P,KACxD,EAAGpQ,QAAOU,MAAKw0D,iBACdkiC,GAAmBplF,EAAShS,GAAO,EAAOk1D,EAAax0D,GAAK,KAG9Dw3F,EAAiBl8D,EAAS08D,GAAc,OAPzC,CAYA,IAAIZ,EAAeY,GAMnB,MAAM1mF,EAAQuoB,MAAK,IAAAn4B,OAAKs2F,EAAuC,2BAAA,CAC9D78D,OAAQ,cANRq8D,EAAiBl8D,EAAS08D,GAAc,EAHzC,KApCA,CACC,GACCx2F,OAAOyM,OAAOrO,GAAgBkC,OAAOjC,IACpC,GAAsB,IAAlBA,EAAOhG,OAAc,OAAO,EAEhC,MAAMo+F,EAAYp4F,EAAOA,EAAOhG,OAAS,GAEzC,OAAOo+F,GAAsC,iBAAlBA,EAAUj4F,GAAgB,IAGtD,MAAMsR,EAAQuoB,MAAM,8BAA+B,CAClDsB,OAAQ,cAIV,IAAK,MAAOz8B,EAAUmB,KAAW2B,OAAOC,QAAQ7B,GAAiB,CAChE,MAAMq4F,EAAYp4F,EAAOA,EAAOhG,OAAS,GAEpCo+F,GAAcA,EAAUj4F,KAC5Bw3F,EAAiBl8D,EAAS58B,EAAUA,IAAa+3F,GAEnD,CAGD,CAuBD,CACD,CAuBGyB,CAAqB5mF,GAGxB,CAOA,SAASomF,EAAgBnmF,EAAS4mF,GAEjC,MAAMC,EAAWD,EAASl8F,MAAMsV,EAAQ1X,QAAQ+V,MAAM,cAAc,GAEpEvM,EAAa+0F,GACb,MAAMn4F,EAAQm4F,EACZ/gF,OACAzH,MAAM,KACNuc,OAAO5tB,SACPmR,KAAK0F,GAAMA,EAAEiC,SAEf,OAAqB,IAAjBpX,EAAMpG,OACF,CAAC48F,IAGFx2F,CACR,CAMA,SAASw3F,EAAeU,GACvB,MAAME,EAAmBF,EAAS97F,QAAQ,MAE1C,IAA0B,IAAtBg8F,EAEJ,OAAOF,EAASl8F,MAAMo8F,EAAmB,GAAGhhF,MAC7C,CASA,SAASkgF,EAAmBjmF,EAASzS,EAAMH,EAAU44F,EAAQ9iC,GAC5D,MAAM8jC,EAAW5B,GAAmBplF,EAASzS,EAAMy4F,EAAQ9iC,IA+B5D,SAA0B91D,GACpBkB,EAAelB,KACnBkB,EAAelB,GAAYkB,EAAwB,IAAE8P,KACpD,EAAG4B,UAAShS,QAAOU,MAAKw0D,iBACvBkiC,GAAmBplF,EAAShS,GAAO,EAAOk1D,EAAax0D,GAAK,KAGhE,CApCCu4F,CAAiB75F,GAEjB,MAAMqB,EAAQH,EAAelB,GAE7BqE,EAAOhD,GACPA,EAAM5D,KAAKm8F,EACZ,CAOA,SAASd,EAAiB34F,EAAMH,EAAU44F,GACzC,MAAMz3F,EAASD,EAAelB,GACxB85F,EAAmB34F,EAASA,EAAOA,EAAOhG,OAAS,GAAK,KAEzD2+F,IAKLA,EAAiBx4F,IAAMnB,EACvB25F,EAAiB5B,UAAYU,EAC9B,CAkBA,SAASF,EAAe14F,GACvB,MAAMmB,EAASD,EAAelB,GAE9B,IAAKmB,EAAQ,OAAO,EAEpB,MAAMo4F,EAAYp4F,EAAOA,EAAOhG,OAAS,GAEzC,QAAKo+F,IAEAA,EAAUj4F,GAGhB,CACA,ECzZD,MAAMy4F,GAAM,IAAIC,YAAY,OA+GtBC,GAAW,CAAC/2F,EAAGC,KACjB,GAAID,EAAE/H,OAASgI,EAAEhI,OAAQ,CACrB,MAAM++F,EAAM/2F,EACZA,EAAID,EACJA,EAAIg3F,CACR,CACA,OAAiB,IAAb/2F,EAAEhI,OACK+H,EAAE/H,OAET+H,EAAE/H,QAAU,GAvHH,EAAC+H,EAAGC,KACjB,MAAM8T,EAAI/T,EAAE/H,OACN8P,EAAI9H,EAAEhI,OACNg/F,EAAM,GAAMljF,EAAI,EACtB,IAAImjF,GAAM,EACNC,EAAK,EACLC,EAAKrjF,EACLlc,EAAIkc,EACR,KAAOlc,KACHg/F,GAAI72F,EAAEpJ,WAAWiB,KAAO,GAAKA,EAEjC,IAAKA,EAAI,EAAGA,EAAIkQ,EAAGlQ,IAAK,CACpB,IAAIw/F,EAAKR,GAAI52F,EAAErJ,WAAWiB,IAC1B,MAAMy/F,EAAKD,EAAKF,EAChBE,IAAQA,EAAKH,GAAMA,EAAMA,EACzBC,KAAQE,EAAKH,GACbA,GAAMG,EACFF,EAAKF,GACLG,IAEAF,EAAKD,GACLG,IAEJD,EAAMA,GAAM,EAAK,EACjBD,EAAMA,GAAM,IAAOI,EAAKH,GACxBA,GAAMG,CACV,CAEA,IADAz/F,EAAIkc,EACGlc,KACHg/F,GAAI72F,EAAEpJ,WAAWiB,IAAM,EAE3B,OAAOu/F,CAAE,EAyFEG,CAASv3F,EAAGC,GAvFX,EAACA,EAAGD,KAChB,MAAM+T,EAAI/T,EAAE/H,OACN8P,EAAI9H,EAAEhI,OACNu/F,EAAM,GACNC,EAAM,GACNC,EAAQ9jF,KAAK+jF,KAAK5jF,EAAI,IACtB6jF,EAAQhkF,KAAK+jF,KAAK5vF,EAAI,IAC5B,IAAK,IAAIlQ,EAAI,EAAGA,EAAI6/F,EAAO7/F,IACvB4/F,EAAI5/F,IAAM,EACV2/F,EAAI3/F,GAAK,EAEb,IAAI0d,EAAI,EACR,KAAOA,EAAIqiF,EAAQ,EAAGriF,IAAK,CACvB,IAAI4hF,EAAK,EACLD,GAAM,EACV,MAAMx5F,EAAY,GAAJ6X,EACRsiF,EAAOjkF,KAAKY,IAAI,GAAIzM,GAAKrK,EAC/B,IAAK,IAAI0kB,EAAI1kB,EAAO0kB,EAAIy1E,EAAMz1E,IAC1By0E,GAAI52F,EAAErJ,WAAWwrB,KAAO,GAAKA,EAEjC,IAAK,IAAIvqB,EAAI,EAAGA,EAAIkc,EAAGlc,IAAK,CACxB,MAAMw/F,EAAKR,GAAI72F,EAAEpJ,WAAWiB,IACtBigG,EAAML,EAAK5/F,EAAI,GAAM,KAAOA,EAAK,EACjCkgG,EAAMP,EAAK3/F,EAAI,GAAM,KAAOA,EAAK,EACjCy/F,EAAKD,EAAKF,EACVa,IAASX,EAAKU,GAAMb,GAAMA,EAAMA,EAAMG,EAAKU,EACjD,IAAIE,EAAKd,IAAOa,EAAKd,GACjBgB,EAAKhB,EAAKc,EACTC,IAAO,GAAMH,IACdL,EAAK5/F,EAAI,GAAM,IAAM,GAAKA,GAEzBqgG,IAAO,GAAMH,IACdP,EAAK3/F,EAAI,GAAM,IAAM,GAAKA,GAE9BogG,EAAMA,GAAM,EAAKH,EACjBI,EAAMA,GAAM,EAAKH,EACjBb,EAAKgB,IAAOZ,EAAKW,GACjBd,EAAKc,EAAKX,CACd,CACA,IAAK,IAAIl1E,EAAI1kB,EAAO0kB,EAAIy1E,EAAMz1E,IAC1By0E,GAAI52F,EAAErJ,WAAWwrB,IAAM,CAE/B,CACA,IAAI+0E,EAAK,EACLD,GAAM,EACV,MAAMx5F,EAAY,GAAJ6X,EACRsiF,EAAOjkF,KAAKY,IAAI,GAAIzM,EAAIrK,GAASA,EACvC,IAAK,IAAI0kB,EAAI1kB,EAAO0kB,EAAIy1E,EAAMz1E,IAC1By0E,GAAI52F,EAAErJ,WAAWwrB,KAAO,GAAKA,EAEjC,IAAI22D,EAAQhxE,EACZ,IAAK,IAAIlQ,EAAI,EAAGA,EAAIkc,EAAGlc,IAAK,CACxB,MAAMw/F,EAAKR,GAAI72F,EAAEpJ,WAAWiB,IACtBigG,EAAML,EAAK5/F,EAAI,GAAM,KAAOA,EAAK,EACjCkgG,EAAMP,EAAK3/F,EAAI,GAAM,KAAOA,EAAK,EACjCy/F,EAAKD,EAAKF,EACVa,IAASX,EAAKU,GAAMb,GAAMA,EAAMA,EAAMG,EAAKU,EACjD,IAAIE,EAAKd,IAAOa,EAAKd,GACjBgB,EAAKhB,EAAKc,EACdjf,GAAUkf,IAAQlwF,EAAI,EAAM,EAC5BgxE,GAAUmf,IAAQnwF,EAAI,EAAM,EACvBkwF,IAAO,GAAMH,IACdL,EAAK5/F,EAAI,GAAM,IAAM,GAAKA,GAEzBqgG,IAAO,GAAMH,IACdP,EAAK3/F,EAAI,GAAM,IAAM,GAAKA,GAE9BogG,EAAMA,GAAM,EAAKH,EACjBI,EAAMA,GAAM,EAAKH,EACjBb,EAAKgB,IAAOZ,EAAKW,GACjBd,EAAKc,EAAKX,CACd,CACA,IAAK,IAAIl1E,EAAI1kB,EAAO0kB,EAAIy1E,EAAMz1E,IAC1By0E,GAAI52F,EAAErJ,WAAWwrB,IAAM,EAE3B,OAAO22D,CAAK,EAcLof,CAAQn4F,EAAGC,EAAE,ECpExB,MAAMoqC,GAAQ,IAAIx7B,IAQlB,IAAiBupF,GAAA,SAAgCC,EAAiBC,EAAazE,GAC9E,MAAM0E,EAAcluD,GAAMxnC,IAAIw1F,GACFhuD,GAAM3kB,IAAI2yE,GArDvC,SAA4Bv7F,GAC3B,MAAMy7F,EAAcpgG,MAAMiuB,KAAK,CAAEnuB,OARD,IAUhC,IAAK,IAAIJ,EAAI,EAAGA,EAAI0gG,EAAYtgG,OAAQJ,IACvC0gG,EAAY1gG,GAAK,GAGlB,IAAK,MAAM2gG,KAAiB54F,OAAO4nB,KAAKnpB,IAAQ,CAC/C,MAAM04F,EAAW0B,GAAqBD,EAAe17F,GAEjDi6F,GAjB2B,GAkB9BwB,EAAYxB,EAAW,GAAGx8F,KAAKi+F,EAEjC,CAGA,IAAIxgG,EAAS,GAEb,IAAK,MAAOH,EAAG6gG,KAAeH,EAAY14F,UACzC,GAAI64F,EAAWzgG,OAAS,EAAG,CAC1B,GAAIJ,EAAI,EACP,OAAO6gG,EAAWr+F,MAAM,EA3BE,GA8B3BrC,EAASA,EAAO8H,OAAO44F,EACxB,CAGD,OAAO1gG,EAAOqC,MAAM,EAlCS,EAmC9B,CAyBIs+F,CAAmBN,GAEtBhuD,GAAMt+B,IAAIssF,EAAiBE,GAC3B1E,EAAcv0F,KArBf,SAAuBxC,EAAUy7F,EAAc,IAC9C,MAAA,gBAAAz4F,OAAuBhD,EAAQ,KAAAgD,OAC9By4F,EAAYtgG,OAAS,EAAqBsgG,iBAAAA,OAAAA,EAAYlqE,KAAK,WAAW,GAExE,CAiBoBuqE,CAAcP,EAAiBE,GAAc,CAC/D95F,SAAU,QACVD,KAAM65F,EACNtgG,KAAMugG,EACNp7F,MAAO,GAER,ECpDD,IAAiB27F,GAAA,eAA0Bx7F,EAAWZ,EAAU,CAAA,GAC/D,IAAKA,EAAQgyF,eAA6B/1F,IAAjB+D,EAAQxC,OAAuBwC,EAAQq8F,sBAC/D,OAAO1rD,QAAQC,OAAO,IAAIxvC,MAAM,8DAGjC,MAAMk7F,OAAiCrgG,IAAjB+D,EAAQxC,KAExB++F,EAAgBD,EAAgBt8F,EAAQk3F,aAAel3F,EAAQgyF,SAErE,QAAsB/1F,IAAlBsgG,IAAgC/3D,GAAKU,WAAWq3D,GACnD,OAAID,EACI3rD,QAAQC,OAAO,IAAIxvC,MAAM,0CAG1BuvC,QAAQC,OAAO,IAAIxvC,MAAM,sCASjC,QL9CD,WAA2B,EKwCFo7F,GAAwC55D,OAAOv3B,IACtE,GAAIixF,GAAiBnE,GAAoB9sF,GAAM,OAAO,EAEtD,MAAMA,CAAG,IAIT,OAAOrL,EAAQq8F,sBACZl5F,OAAO29B,OAAO9gC,EAAQq8F,sBAAuB,CAC7Cz7F,UAsEG,CACNC,eAAgB,CAAE,EAClBC,eAAgB,CAAE,EAClBC,aAAc,CAAE,EAChBQ,eAAgB,CAAE,EAClBszF,SAAS,EACT5yF,gBAAgB,EAChBC,kBAAkB,KA3Efu6F,GAAyBF,GAGJ37F,EAAU4sF,SAASkP,WAG5C,IAAIC,EAFQ/7F,EAAU4sF,SAASh2D,IAI/B,IACCmlE,QAAsBlH,GAAiB70F,EAOxC,CANE,MAAOyK,GACR,IAAIixF,IAAiBnE,GAAoB9sF,GAGxC,MAAMA,EAFNsxF,QAAsBlH,GAAiB70F,EAIzC,CAEA,IAAK+7F,EACJ,OAAOhsD,QAAQC,OAAO,IAAIxvC,MAAM,0BAGjC,MAAME,EAASq7F,EAAcr7F,OACvB+6F,EAAwBr8F,EAAQq8F,sBAEtC,GAAIr8F,EAAQ4tC,QACXhtC,EAAUktF,WAAW8O,iBAAiBt7F,GAElCtB,EAAQgyF,WAAapxF,EAAUktF,WAAW+O,eAAe78F,EAAQgyF,WACpE,OAAOqK,EACJl5F,OAAO29B,OAAOu7D,EAAuB,CACrCz7F,UAqCE,CACNC,eAAgB,CAAE,EAClBC,eAAgB,CAAE,EAClBC,aAAc,CAAE,EAChBQ,eAAgB,CAAE,EAClBszF,SAAS,EACT5yF,gBAAgB,EAChBC,kBAAkB,KA1Cdu6F,GAAyBF,GAK9B,MAOMnF,EACLiF,SACOrG,GAAiBp1F,EAAW,CAClCpD,KAAMwC,EAAQxC,KACd05F,aAAcl3F,EAAQk3F,aACtBlF,SAAUuK,EACVvF,eAAgB11F,EAAO01F,eACvBd,aAAc50F,EAAO40F,eAGjB4G,EAAyB35F,OAAO29B,OAAOs2D,EAAe,CAC3Dx2F,UAlBuB,CACvBC,eAAgB,CAAE,EAClBC,eAAgB,CAAE,EAClBC,aAAc,CAAE,EAChBQ,eAAgB,CAAC,KAmBlB,aC/FD,SAA2Bw7F,EAAkB3F,EAAe91F,GAU3D,IAAIgH,EATJ8uF,EAAcx2F,UAAUC,eAAiB,GACzCu2F,EAAcx2F,UAAUE,eAAiB,GACzCs2F,EAAcx2F,UAAUG,aAAe,GACvCq2F,EAAcx2F,UAAUqB,gBAAiB,EACzCm1F,EAAcx2F,UAAUsB,kBAAmB,EAC3Ck1F,EAAcx2F,UAAUI,MAAQM,EAAON,MACvCo2F,EAAcx2F,UAAUU,OAASA,EAIjC,MAAM07F,EAAa5F,EAAcxwF,KAEjC,GAAIo2F,EAAY,CACf,KAAM,SAAUA,GACf,MAAM,IAAI57F,MAAM,mCAGjB,MAAM67F,EAAeD,EAAWv0F,QAAUu0F,EAAWv0F,OAAO5L,MAAMq+B,IAAI37B,MAAM,SAE5E+I,EAAU20F,EAAeA,EAAa,GrBrCrB,KqBuCjBzE,GAAqBwE,EAAY5F,EAClC,CAEA,MAAM8F,EAwFP,UAAyBt8F,UAAEA,IAE1B,OAAIA,EAAUW,eAAeE,MAAOb,EAAUW,eAAeE,IAAIjG,MAGlE,CA7F6B2hG,CAAgB/F,GAEvC8F,IACJ9F,EAAcx2F,UAAUw8F,mBAAoB,GAG7C,MAAMC,EACLL,GAA8C,aAAhCA,EAAWz4F,YAAY5G,KAAsBq/F,EAAW/hG,MAAQ,CAAC+hG,GAO1EM,EAAe,GAEfC,EAAap6F,OAAO4nB,KAAKnpB,IACzB47F,EAAYl8F,EAAOM,MACtBuB,OAAO4nB,KAAKzpB,EAAOM,OAAOgoB,MAAK,CAACrmB,EAAGC,IAAM+5F,EAAWv/F,QAAQuF,GAAKg6F,EAAWv/F,QAAQwF,KACpF,GAEH,IAAK,MAAMnD,KAAYm9F,EAAW,CACjC,MAAMC,EACL77F,GAAMvB,IAAciB,EAAOmrF,iBAAmBnrF,EAAOmrF,gBAAgBpsF,GAEtE,QAAqBpE,IAAjBwhG,EAA4B,CAC/BH,EAAax/F,KACZ6yC,QAAQlvC,IACP47F,EAAahsF,KAAKwqF,GACjBF,GAAuBt7F,EAAUw7F,EAAazE,OAKjD,QACD,CAEA,MAAMsG,EAAep8F,EAAOM,OAASN,EAAOM,MAAMvB,GAElD,GAAqB,OAAjBq9F,GAA6C,OAApBA,EAAa,GACzC,SAGD,MAAMC,EAAgBD,EAAa,GAC7B/2F,EAAmB+2F,EAAa,GAGhCE,EAAkBt8F,EAAOs8F,iBAAmB,QAE5CC,EAAcl3F,IAAoD,IAAhCA,EAAiBk3F,aAAwB,EAE7EA,IACHzG,EAAcx2F,UAAUk9F,gBAAiB,GAG1C1G,EAAcx2F,UAAUC,eAAeR,GACrCsG,GAAoBA,EAAiB3E,UAAa47F,EACpDxG,EAAcx2F,UAAUE,eAAeT,GAAYsG,GAAoBA,EAAiBrG,QACxF82F,EAAcx2F,UAAUG,aAAaV,GAAYo9F,EAAat2F,MAAQ,GAEtEm2F,EAAax/F,KACZ6yC,QAAQlvC,IACP47F,EAAahsF,KAAKwqF,GACjB4B,EAAaE,EAAeh3F,EAAkB,CAC7CwB,KACE01F,GACDd,EAAiB50F,KAEjB+0F,IACC9F,EAAcx2F,UAAUW,eAAelB,GACzCiI,WAPDm1F,CAQG5B,EAAazE,MAIpB,CAEA,OAAOzmD,QAAQlvC,IAAI67F,EACpB,CDVOS,CAAkBn9F,EAAU4sF,SAAUsP,EAAwBx7F,GAE7Dw7F,CACP,EAqBD,SAASL,GAAyBzK,GACjC,MAAO,CACNprF,KAAM,CACL6B,OAAQ,CACP5L,MAAO,CAAEggC,KAAMm1D,KAGjBjvF,SAAU,GACV2C,UAAMzJ,EACN2E,UAxBM,CACNC,eAAgB,CAAE,EAClBC,eAAgB,CAAE,EAClBC,aAAc,CAAE,EAChBQ,eAAgB,CAAE,EAClBszF,SAAS,EACT5yF,gBAAgB,EAChBC,kBAAkB,GAkBlBW,KAAM,OAER,WErIAy2B,GAAiB,CAACt5B,EAAU,MAC3B,MAAOw3B,EAAKwmE,GA4Bb,SAAkBh+F,GACjB,MAAO,UAAWA,CACnB,CA9BgCi+F,CAASj+F,GACrC,CAACu3B,GAAQC,MAAO,CAAEl2B,OAAQtB,IAC1B,CAACA,EAAQw3B,KAAOD,GAAQC,MAAOx3B,GAC5BY,EAAY2sF,GAAgByQ,GAElC,MAAO,CACNpyD,cAAe,YACfiD,KAAKjoC,GAAMrL,OAAEA,IACZ,IAAIy2F,EAAWprF,EAAK6B,QAAU7B,EAAK6B,OAAO5L,MAAMggC,KAMhD,OAJIm1D,IAAaxtD,GAAKU,WAAW8sD,KAChCA,EAAWxtD,GAAK5S,KAAK4F,EAAKw6D,IAGpBoK,GAAWx7F,EAAW,CAC5BoxF,WACAqK,sBAAuB9gG,GAEzB,EACA,EAGF+9B,GAAeyW,SAAU,EChBzB,ICLiBmuD,GAAA,eAChBt9F,EACAw2F,EACApF,EACAmM,GAEA,IAAIC,ECXL,SAAuDhH,EAAe+G,GAErE,IAAIC,EAEA31F,EAEJ,GAAI2uF,GAAiBA,EAAcxwF,KAAM,CACpCwwF,EAAcxwF,KAAK6B,SACtBA,EAAS2uF,EAAcxwF,KAAK6B,OAAO5L,MAAMggC,MAEpCp0B,GAAU,OAAQ2uF,EAAcxwF,KAAK6B,OAAO5L,QAChD4L,EAAS2uF,EAAcxwF,KAAK6B,OAAO5L,MAAM2oC,KAI3C,MAGM+tD,EAHsB6D,EAAcr0F,SAAS+qB,QACjDxtB,GAAsC,gBAA1BA,EAAQmF,gBAEmB4L,KAAKgtF,IACtC,CACN1yF,KAAM0yF,EAAmB1yF,KACzB8nF,UAAW4K,EAAmBC,uBAO1BlL,EAHwBgE,EAAcr0F,SAAS+qB,QACnDxtB,GAAsC,kBAA1BA,EAAQmF,gBAE8B4L,KAAKktF,IACjD,CACN5yF,KAAM4yF,EAAqB5yF,SAIvBmoF,EAAcsD,EAAcr0F,SAAS+qB,QACzCxtB,GAAsC,eAA1BA,EAAQmF,gBAItB2xF,EAAcr0F,SAAWq0F,EAAcr0F,SAAS+qB,QAC9CxtB,GAC0B,gBAA1BA,EAAQmF,eACkB,kBAA1BnF,EAAQmF,eACkB,eAA1BnF,EAAQmF,gBAIV24F,EAAkB,CACjB31F,SACA8qF,eACAH,wBAEAU,cACAc,QAASwC,EAAcx2F,UAAUqB,eACjC6pC,SAAUsrD,EAAcr0F,SAASsO,KAAK/Q,IAC9B,CACNE,KAAMF,EAAQE,KACdo8B,OAAQt8B,EAAQs8B,OAChBK,QAAS38B,EAAQ28B,QACjBC,UAAW58B,EAAQ48B,UACnBn7B,KAAMzB,EAAQyB,KACdC,SAAU1B,EAAQ0B,SAClB2J,KAAMrL,EAAQqL,SAGhBkpF,QAASuC,EAAcx2F,UAAUi0F,QACjC2J,eAAgBpH,EAEjB,KAAM,KAAI+G,EAwBV,MAAM,IAAI/8F,MACT,2FAxBD,GAA4B,mBAAxB+8F,EAAexgG,KAClB,MAAMwgG,EAGPC,EAAkB,CACjB31F,OAAQ01F,EAAethE,MAAQ,gBAC/B02D,aAAc,GACdH,sBAAuB,GACvBU,YAAa,GACbc,SAAS,EACT9oD,SAAU,CACT,CACCtrC,KAAM29F,EAAe39F,KACrBo8B,OAAQuhE,EAAevhE,OACvBK,QAASkhE,EAAelhE,QACxBC,UAAWihE,EAAejhE,UAC1Bn7B,KAAMo8F,EAAexgG,KACrBqE,SAAU,QACV2J,eAASwyF,EAAenhE,OAAWmhE,MAAAA,OAAAA,EAAexgG,KAAI,OAQ1D,CAEA,OAAOygG,CACP,CDvFsBK,CAA6BrH,EAAe+G,GAElE,MAAMxB,QAAsBlH,GAAiB70F,GAEvCU,EAA2B,OAAlBq7F,EAAyB,CAAA,EAAKA,EAAcr7F,OACrDu7B,EAAOuhE,EAAgB31F,QAAW01F,GAAkBA,EAAethE,KAEzE,GAAIv7B,EAAOo9F,iBACV,IAAK,MAAMC,KAAmBr9F,EAAOo9F,iBAAkB,CAGtD,MAAMpjE,EAAWqjE,EAAgBP,EAAiBvhE,GAE9CvB,IACH8iE,EAAkB9iE,EAEpB,CAGD,OAAO8iE,CACP,EEvCD,MAAMQ,YAAEA,IAAgBC,GAAkBjhE,QAO1C,IAAAkhE,GAAA,SAA0CC,EAASC,GAClD,MAAMC,EAAiBD,EAAUlxE,OAAO8wE,IAElCM,EAAoB,IAAIh6F,IAAI85F,EAAUlxE,QAAQ5e,IAAO+vF,EAAep9F,SAASqN,MAE7EiwF,EAAmB,IAAIj6F,IAAI65F,EAAQjxE,OAAOmxE,IAGhD,OAAOD,EAAUlxE,QAAQ5e,GAAMgwF,EAAkB94F,IAAI8I,IAAMiwF,EAAiB/4F,IAAI8I,IAChF,EChBD,MAAMkwF,WAA0Bh+F,MAI/BmD,YAAY86F,GACXtiE,QAEwB,iBAAbsiE,IACVA,EAAW,CAACA,IAGb,MAAM7/F,EAAU6/F,EAASvxE,QAAQ1yB,IAAOA,EAAE0K,WAAW,OAAM8rB,KAAK,MAEhEh1B,KAAK0D,QAA4Cd,kCAAAA,OAAAA,EAAsB,gBACxE,ECdD,MAAM8/F,WAA6Bl+F,MAClCmD,cACCw4B,QAEAngC,KAAK0D,QAAgK,sJACtK,ECkBD,IAAAi/F,GAAA,SAAkDhkG,EAAQikG,GAEzD,IAAKjkG,EAAQ,OAAO,KAEpB,MAAM6iG,EAAkB7iG,EAAOqF,UAG/B,IAAKw9F,EAAgB98F,OAAQ,OAAO,KAEpC,MAAMoqF,EAAc0S,EAAgB98F,OAAOk+F,GAG3C,IAAInnE,EAEAr4B,EAEAtE,MAAMC,QAAQ+vF,IACjBrzD,EAAUqzD,EAAY,GACtB1rF,EAAU0rF,EAAY,IAAM,KAE5BrzD,EAAUqzD,IAAe,EACzB1rF,EAAU,CAAA,GAkBX,OAfqBmF,EACpB5J,EACAikG,EACA,CACC55F,OAAQyyB,EACR1yB,SAAU,EAAC,GAAM,IAElB,CACCC,OAAQ5F,EACR2F,SAAU,CACTiF,OAAQ,CAACzG,EAAUD,QASjBm0B,GAAYr4B,EAAQ4K,QAElB,CACNytB,EACA,CACCztB,OAAQ5K,EAAQ4K,QAAU,GAC1B5I,SAAUhC,EAAQgC,UAAYo8F,EAAgB98F,OAAOs8F,iBAAmB,SAEzEQ,GAZyB,IAc1B,ECjEgBqB,GAAA,SAAqBpuF,EAAK2Z,EAAK3C,GAC/C,GAAIhX,EAAIjL,IAAI4kB,GAAM,OAAyB3Z,EAAI4X,IAAI+B,GAEnD,MAAMhvB,EAAQqsB,IAId,OAFAhX,EAAI/B,IAAI0b,EAAKhvB,GAENA,CACP,ECwED,SAAS0jG,GAAiB7zD,EAASnqC,GAClC,MAAMlB,EAAOqrC,EAAQrrC,KAGrB,OACCkB,EAAMT,OAAST,SACCvE,IAAdyF,EAAMC,KAAqBD,EAAMC,KAAOnB,QAAuBvE,IAAdyF,EAAMC,IAE3D,CCxCA,SAASg+F,GAAsB3/F,GAC9B,SAAKA,IAAYA,EAAQ,KAElBE,QAAQF,EAAQ,GAAG4/F,eAC3B,CC7CA,IAAiBC,GAAA,SAA4BC,EAAkBC,EAAahoE,EAAWP,IDPvF,SAAyCy7D,GACxC,IAAK,MAAM13F,KAAU03F,EAAS,CAE7B,IAAK13F,EAAOijG,eACX,SAID,MAAMwB,EAAYzkG,EAAOijG,eAAe59F,UAAUW,eAElD,IAAKy+F,EAAW,SAEhB,MAAM1+F,EAAS/F,EAAOijG,eAAe59F,UAAUU,OAE/C,GAAKA,GAAWA,EAAOM,OAIlBuB,OAAOyM,OAAOtO,EAAOM,OAAOkO,MAAM/N,GAAS49F,GAAsB59F,KAItE,IAAK,MAAOA,EAAMP,KAAW2B,OAAOC,QAAQ48F,GAC3C,IAAK,MAAMt+F,KAASF,EACdm+F,GAAsBr+F,EAAOM,MAAMG,IAAS,KAI5CL,EAAMuR,QAAQxK,QAAW/G,EAAMuR,QAAQxK,OAAOxH,OAEnD1F,EAAOuwC,SAAShuC,KAAK,CACpB6N,KAAI,SAAAtI,OAAWtB,EAA2B,yBAC1CA,KAAM,iBACNvB,KAAMkB,EAAMuR,QAAQxK,OAAOxH,MAAMT,KACjCo8B,OAAQl7B,EAAMuR,QAAQxK,OAAOxH,MAAM27B,OACnCK,QAASv7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAInB,KAC9D08B,UAAWx7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAIi7B,OAChE56B,SAAU,SAId,CACA,CClCA49F,CAAeE,GFPhB,SAA2C7M,GAC1C,IAAK,MAAM13F,KAAU03F,EAAS,CAC7B,MAAMgN,EAAWV,GAAwBhkG,EAAOijG,eAAgB,0BAEhE,IAAKyB,EAAU,SAEf,MAAO5nE,EAASr4B,EAASo+F,GAAmB6B,EAEtCD,EAAY5B,EAAgB78F,eAElC,IAAKy+F,EAAW,SAEhB,MAAMl+F,EAAmBs8F,EAAgBt8F,kBAAoB,GAQvDo+F,EAAiB,IAAI9tF,IAE3B,IAAK,MAAMy5B,KAAW/pC,EAAkB,CACvC,MAAMC,EAAO8pC,EAAQ9pC,KACfo+F,EAAaH,EAAUj+F,GAE7B,GAAIo+F,EACH,IAAK,MAAMz+F,KAASy+F,EACfT,GAAiB7zD,EAASnqC,IAC7B+9F,GAAYS,EAAgBx+F,EAAMuR,SAAS,IAAM,IAAI/N,MAAOuoB,IAAI1rB,GAKnE,IAAK,MAAML,KAASs+F,EAAUv+F,KAAO,GAChCi+F,GAAiB7zD,EAASnqC,IAC7B+9F,GAAYS,EAAgBx+F,EAAMuR,SAAS,IAAM,IAAI/N,MAAOuoB,IAAI1rB,EAGnE,CAEA,MAAMq+F,EAAmB,IAAIl7F,KAAK86F,EAAUv+F,KAAO,IAAI4P,KAAK3P,GAAUA,EAAMuR,WAE5E,IAAK,MAAOlR,EAAMP,KAAW2B,OAAOC,QAAQ48F,GAC3C,IAAK,MAAMt+F,KAASF,EAAQ,CAC3B,GAAa,QAATO,GAAkBq+F,EAAiBh6F,IAAI1E,EAAMuR,SAAU,SAE3D,GAAIolB,IAAYt4B,EAAeC,EAAS,SAAU+B,GAAO,SAEzD,MAAMs+F,EAASH,EAAej3E,IAAIvnB,EAAMuR,UAAY,IAAI/N,KAK3C,QAATnD,EAAiC,IAAhBs+F,EAAO56D,KAAa46D,EAAOj6F,IAAIrE,KAI/CL,EAAMuR,QAAQxK,QAAW/G,EAAMuR,QAAQxK,OAAOxH,OAEnD1F,EAAOuwC,SAAShuC,KAAK,CACpB6N,KAAI,yBAAAtI,OAA2BtB,EAAO,KACtCA,KAAM,6BACNvB,KAAMkB,EAAMuR,QAAQxK,OAAOxH,MAAMT,KACjCo8B,OAAQl7B,EAAMuR,QAAQxK,OAAOxH,MAAM27B,OACnCK,QAASv7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAInB,KAC9D08B,UAAWx7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAIi7B,OAChE56B,SAAUhC,EAAQgC,UAEpB,CAEF,CACA,CEhEAs+F,CAAiBR,GCZlB,SAA+C7M,GAC9C,IAAK,MAAM13F,KAAU03F,EAAS,CAC7B,MAAMgN,EAAWV,GAAwBhkG,EAAOijG,eAAgB,8BAEhE,IAAKyB,EAAU,SAEf,MAAO5nE,EAASr4B,EAASo+F,GAAmB6B,EAEtCM,GAAenC,EAAgB98F,QAAU,CAAE,GAAEM,OAAS,GAEtD4+F,EAAY,IAAIt7F,IAAI/B,OAAO4nB,KAAKw1E,IAEtCC,EAAU/yE,IAAI,OAEd,IAAK,MAAO1rB,EAAMo+F,KAAeh9F,OAAOC,QAAQg7F,EAAgB78F,gBAC/D,IAAIi/F,EAAUp6F,IAAIrE,IAEds2B,IAAYt4B,EAAeC,EAAS,SAAU+B,GAElD,IAAK,MAAML,KAASy+F,GACdz+F,EAAM42F,aAAgB52F,EAAM62F,YAI5B72F,EAAMuR,QAAQxK,QAAW/G,EAAMuR,QAAQxK,OAAOxH,OAEnD1F,EAAOuwC,SAAShuC,KAAK,CACpB6N,KAAI,SAAAtI,OAAWtB,EAAqB,oBACpCA,KAAM,kCACNvB,KAAMkB,EAAMuR,QAAQxK,OAAOxH,MAAMT,KACjCo8B,OAAQl7B,EAAMuR,QAAQxK,OAAOxH,MAAM27B,OACnCK,QAASv7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAInB,KAC9D08B,UAAWx7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAIi7B,OAChE56B,SAAUhC,EAAQgC,UAItB,CACA,CDzBAy+F,CAAqBX,GEVtB,SAAkD7M,GACjD,IAAK,MAAM13F,KAAU03F,EAAS,CAC7B,MAAMgN,EAAWV,GAChBhkG,EAAOijG,eACP,iCAGD,IAAKyB,EAAU,SAEf,MAAO5nE,EAASr4B,EAASo+F,GAAmB6B,EAGtCS,EAAkB,IAAIx7F,IAE5B,IAAK,MAAOnD,EAAMo+F,KAAeh9F,OAAOC,QAAQg7F,EAAgB78F,gBAC/D,IAAK,MAAMG,KAASy+F,EACfz+F,EAAMy0D,aAENuqC,EAAgBt6F,IAAI1E,EAAMuR,WAE1BolB,IAAYt4B,EAAeC,EAAS,SAAU+B,IAUlD2+F,EAAgBjzE,IAAI/rB,EAAMuR,SAIrBvR,EAAMuR,QAAQxK,QAAW/G,EAAMuR,QAAQxK,OAAOxH,OAEnD1F,EAAOuwC,SAAShuC,KAAK,CACpB6N,KAAI,gBAAAtI,OAAkBtB,EAAgC,8BACtDA,KAAM,oCACNvB,KAAMkB,EAAMuR,QAAQxK,OAAOxH,MAAMT,KACjCo8B,OAAQl7B,EAAMuR,QAAQxK,OAAOxH,MAAM27B,OACnCK,QAASv7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAInB,KAC9D08B,UAAWx7B,EAAMuR,QAAQxK,OAAO9G,KAAOD,EAAMuR,QAAQxK,OAAO9G,IAAIi7B,OAChE56B,SAAUhC,EAAQgC,YAlBbq2B,GAAoB,QAATt2B,GAAgB2+F,EAAgBjzE,IAAI/rB,EAAMuR,SAsB9D,CACA,CFrCA0tF,CAAwBb,GAExB,MAQM5M,EAAc,CACnB17D,MACAo9D,QAVekL,EAAiBhwF,MAC/BvU,GACAA,EAAOq5F,SACPr5F,EAAOu4F,YAAYt4F,OAAS,GAC5BD,EAAOuwC,SAASh8B,MAAM+7B,GAAiC,UAArBA,EAAQ7pC,aAO3CixF,QAAS,GACTntC,OAAQ,GACR86C,iBAAkB,GAClB7/F,aAAc8/F,GAAgBf,IAG/B,QAAoB7jG,IAAhB8jG,EAA2B,CAC9B,MAAMe,EAAgBhB,EAAiBv9F,QAAO,CAACoR,EAAOkpB,IAASlpB,EAAQkpB,EAAKiP,SAAStwC,QAAQ,GAEzFslG,EAAgBf,IACnB7M,EAAY6N,oBAAsB,CAAEhB,cAAae,iBAEnD,CAKA,OAHA5N,EAAYptC,OAAS/tB,EAAU+nE,EAAkB5M,GACjDA,EAAYD,QAAU6M,EAEf5M,CACP,EAKD,SAAS2N,GAAgBG,GACxB,MAAOC,GAAcD,EAErB,YAAmB/kG,IAAfglG,QAE8BhlG,IAA9BglG,EAAWzC,eAFsB,GAI9ByC,EAAWzC,eAAe59F,UAAUG,YAC5C,CGlEA,MAAMmgG,GAAQC,KAmBRC,GAAuB,CAAC,sBAiS9B,SAAS1vD,GAAY9wC,EAAW46B,EAAOw2D,GACtC,GAAmB,mBAAfx2D,EAAM79B,KACT,OAAOugG,GAAsBt9F,OAAW3E,EAAW+1F,EAAUx2D,GAG9D,MAAMA,CACP,CC5SA,MAAM56B,GAAYuC,OAAO29B,OAAO8K,GAAe,CAC9Cy1D,KDkBD7wD,gBAA0B8wD,gBACzBA,GAAkB,EAClB1zD,MAAO2zD,GAAW,EAAKvT,cACvBA,EAAaC,cACbA,EAAazwF,KACbA,EAAI05F,aACJA,EAAY51F,OACZA,EAAMkgG,cACNA,EAAa9E,WACbA,EAAUxG,aACVA,EAAY1+D,IACZA,EAAMD,GAAQC,MAAKiqE,sBACnBA,EAAqBC,MACrBA,EAAKv5F,IACLA,EAAG4vB,UACHA,EAAS4pE,cACTA,EAAatgG,eACbA,EAAcugG,WACdA,EAAUvnC,cACVA,EAAa0lC,YACbA,EAAW/+F,MACXA,EAAK6gG,8BACLA,EAA6BC,2BAC7BA,EAA0BC,uBAC1BA,EAAsB9xD,OACtBA,IAIA,MAAM+xD,EAA8B,iBAATxkG,EAE3B,IAAMkkG,IAAUM,GAAiBN,IAAUlkG,GAAQwkG,GAClD,OAAOrxD,QAAQC,OACd,IAAIxvC,MAAM,+EAQZ,IAAI29F,EASAkD,EAPJ,IACClD,EAAUmD,IAGX,CAFE,MAAO1mE,GACR,OAAOmV,QAAQC,OAAOpV,EACvB,CAKA,IACCymE,EAkMF,SAA8BE,GAC7B,GAAwB,iBAAbA,EAAuB,CACjC,MAAMF,EAAoB5N,GAAW8N,GAErC,QAA0BlmG,IAAtBgmG,EACH,MAAM,IAAI7gG,MACiCghG,0CAAAA,OExR9C,SAAkDpiG,EAAU,IAC3D,IAAI8lD,EAAS3iD,OAAO4nB,KAAKspE,IACvBhjF,KAAK1T,GAAI,IAAA0F,OAAS1F,EAAO,OACzBi0B,KAAK,MAMP,OAJI5xB,EAAQqiG,QACXv8C,EAASA,EAAOrjD,QAAQ,gBAAiB,WAGnCqjD,CACP,CF8Q6Cs8C,GAC1C,mBAGF,OAAOH,CACR,CAEA,GAAwB,mBAAbE,EACV,OAAOA,EAKR,OAFAz9F,EAAO2vF,GAAWztD,MAEXytD,GAAWztD,IACnB,CAtNsB07D,CAAqBvqE,EAG1C,CAFE,MAAOyD,GACR,OAAOmV,QAAQC,OAAOpV,EACvB,CAEA,MAAM56B,EAAY2sF,GAAgB,CACjCS,gBACAC,gBACA3sF,SACAo7F,aACA8E,gBACAhqE,MACAn2B,iBACAugG,aACAG,yBACAD,6BACAD,gCACA5xD,SACAimD,eACA/tF,MACAnH,UAGD,IAAK0gG,EAAO,CACX,MAAMa,OACYtmG,IAAjBi7F,GAA+B1yD,GAAKU,WAAWgyD,GAE5CA,EADA1yD,GAAK5S,KAAK4F,EAAK0/D,GAInB,GACCqL,IACCzD,GAAgBC,EAAS,CAACv6D,GAAK2C,SAAS3P,EAAK+qE,KAAwB/mG,OAEtE,OAAOqkG,GAAmB,GAAIE,EAAakC,EAAmBzqE,GAG/D,IAAI4mE,EAEJ,IACC,MAAMhH,QAAsBgF,GAAWx7F,EAAW,CACjDpD,OACA05F,aAAcqL,IAGfnE,QAAwBF,GAAsBt9F,EAAWw2F,EAG1D,CAFE,MAAO57D,GACR4iE,QAAwB1sD,GAAY9wC,EAAW46B,EAChD,CAEA,MAAM47D,EAAgBgH,EAAgBI,eAChCtL,EAAc2M,GAAmB,CAACzB,GAAkB2B,EAAakC,EAAmBzqE,GAgB1F,OAbCrvB,GACAivF,IACCA,EAAcx2F,UAAUi0F,UACxBuC,EAAcx2F,UAAUk9F,iBAEzB5K,EAAYptC,QACVsxC,EAAcx2F,UAAUw8F,mBAAqBhG,EAAc1xF,KAEzD0xF,EAAcxwF,KAAKvI,SAAS+4F,EAAc1xF,KAAKuqC,QAE/CzyC,GAGE01F,CACR,CAEA,IAAImM,EAAW,CAACqC,GAAO17F,OAAOqL,KAAKi1D,IAClC,MAAMk8B,EAAWb,GAAiBA,EAAcnqE,KAAQA,EAClDirE,EAAgBj+D,GAAKU,WAAWohC,GAEnC9hC,GAAKqF,UAAUy8B,GADf9hC,GAAK5S,KAAK4wE,EAASl8B,GAGtB,OAAIuwB,aAAGpyD,WAAWg+D,GAEVC,GAASC,WG/JF,SAASn+D,EAAMo+D,GAC9B,GAAoB,iBAATp+D,EACT,MAAM,IAAImZ,UAAU,gCAGtB,GAAa,OAATnZ,GAA0B,MAATA,EAAc,MAAO,IAE1C,IAAIme,EAAMne,EAAKhpC,OACf,GAAImnD,GAAO,EAAG,OAAOne,EAKrB,IAAI/wB,EAAS,GACb,GAAIkvC,EAAM,GAAiB,OAAZne,EAAK,GAAa,CAC/B,IAAIq+D,EAAKr+D,EAAK,GACF,MAAPq+D,GAAqB,MAAPA,GAAoC,SAArBr+D,EAAK5mC,MAAM,EAAG,KAC9C4mC,EAAOA,EAAK5mC,MAAM,GAClB6V,EAAS,KAEb,CAEA,IAAIqvF,EAAOt+D,EAAKjzB,MAAM,UAItB,OAHsB,IAAlBqxF,GAAqD,KAA1BE,EAAKA,EAAKtnG,OAAS,IAChDsnG,EAAK7kG,MAEAwV,EAASqvF,EAAKlxE,KAAK,IAC5B,CHoI8BmxE,CAAcz8B,IAGnCA,CAAK,IAGRm7B,IACJpC,EAAWA,EAASh8F,OAAO+9F,GAAqB/vF,KAAK86E,GAAI,IAAA9oF,OAAS8oF,OAG9DoV,GACJ3gG,EAAUktF,WAAWkV,UAGtB,MAMMR,EANsB37D,GAAAA,GAAA,CAC3BrP,OACImqE,GAAiB,IAAE,GAAA,CACvBl6D,UAAU,IAG4BjQ,IAEvC,IAAIwnE,QAAkBiE,KAGtB,MAAMC,EAA8BlE,EAAUxjG,OAQ9C,IAAIskG,EAEJ,GAPAd,EAAYF,GACXC,EACAC,EAAU3tF,KAAKnC,GAAMs1B,GAAK2C,SAASq7D,EAAStzF,MAKzC8vF,EAAUxjG,OAAQ,CASrB,MAAM2nG,EARkBnE,EAAU3tF,KAAK2gF,GACZxtD,GAAKU,WAAW8sD,GAEvCxtD,GAAKqF,UAAUmoD,GADfxtD,GAAK5S,KAAK4wE,EAASxQ,KAMuB3gF,KAAIm/B,UAGjD,IACC,MAAM4mD,QAAsBgF,GAAWx7F,EAAW,CACjDoxF,SAAUoR,EACVx1D,MAAO2zD,IAcR,IAVEnK,EAAcx2F,UAAUqB,gBAAkBm1F,EAAcx2F,UAAUsB,mBACnEq/F,IAEAL,GAAK,GAAA79F,OAAI+/F,EAAmE,qDAC5ExiG,EAAUktF,WAAWuV,YAAYD,IAOjChM,EAAcxwF,MACdwwF,EAAc1xF,OACb0xF,EAAcx2F,UAAUi0F,SACzB1sF,IACCivF,EAAcx2F,UAAUw8F,kBACxB,CACD,MAAMkG,EAAWlM,EAAcxwF,KAAKvI,SAAS+4F,EAAc1xF,KAAKuqC,QAG/DmnD,EAAcxwF,MACdwwF,EAAcxwF,KAAK6B,QACnB2uF,EAAcxwF,KAAK6B,OAAO5L,MAAMq+B,MAAQooE,SAElCC,IAER,CAEA,OAAOrF,GAAsBt9F,EAAWw2F,EAMzC,CALE,MAAO57D,GAIR,OAFA56B,EAAUktF,WAAWuV,YAAYD,GAE1B1xD,GAAY9wC,EAAW46B,EAAO4nE,EACtC,KAGDtD,QAAyBnvD,QAAQlvC,IAAI0hG,EACrC,MACArD,EADUwB,QACe3wD,QAAQlvC,IAAI,IAC3ByhG,QAEevyD,QAAQC,OAAO,IAAI0uD,UAEnB3uD,QAAQC,OAAO,IAAIwuD,GAAkBC,IAW/D,OARIkC,GACH3gG,EAAUktF,WAAW0V,YAGP3D,GAAmBC,EAAkBC,EAAakC,EAAmBzqE,EAKrF,EClQC51B,SACAyyF,cACAoP,apDfD,SAAuCpjG,EAAU0B,GAChD,MAAO,CACN1B,WACA0B,OAED,EoDWA2hG,cdDD,eACC1R,GACAx6D,IAAEA,EAAMD,GAAQC,MAAKl2B,OAAEA,EAAMkgG,cAAEA,EAAa9E,WAAEA,GAAe,IAE7D,IAAK1K,EACJ,OAGD,MAAMpxF,EAAY2sF,GAAgB,CACjCjsF,SACAo7F,aACA8E,gBACAhqE,QAGyBgN,GAAKU,WAAW8sD,GAEvCxtD,GAAKqF,UAAUmoD,GADfxtD,GAAK5S,KAAK4F,EAAKw6D,GAGOpxF,EAAU4sF,SAASkP,WAE5C,MAAMvG,QAAiBV,GAAiB70F,GAExC,OAAKu1F,EAIEA,EAAS70F,YAJhB,CAKA,Ec1BAqiG,aAAcpW,GACdqW,MAAO,CACNzjG,SACA2C,eACAqC,kBACA0+F,iBGRF,SAA0B7jG,EAASqoB,GAClC,IAAKroB,EACJ,MAAM,IAAIoB,MACT,sGAGF,IAAKinB,EAAU,MAAM,IAAIjnB,MAAM,wCAE/B,IAAKpB,EAAQK,SAAU,MAAM,IAAIe,MAAM,iDAEvC,MAAMW,EAAOH,GAAM5B,EAAQK,UAE3B,IAAK0B,EAAM,MAAM,IAAIX,MAAepB,SAAAA,OAAAA,EAAQK,SAA2B,qBAEvE,IAAKL,EAAQ09F,aAAc,MAAM,IAAIt8F,MAAM,qDAE3C,IAAKpB,EAAQ4G,KAAM,MAAM,IAAIxF,MAAM,6CAEnC,MAAM6+F,EAAWxU,GAAsBzrF,EAAQ09F,aAAc19F,EAAQK,UAErE,IAAK4/F,EACJ,OAID,MAAM6D,EAAmB,IAAIp4D,GAE7B3pC,EAAKk+F,EAAS,GAAsBA,EAAS,GAAK,CAAA,EAAlDl+F,CAAsD/B,EAAQ4G,KAAMk9F,GAEpE,IAAK,MAAMj4D,KAAWi4D,EAAiBh4D,WAAYzjB,EAASwjB,EAC7D,GHpBC4nD,UAAW,CACV78E,iDI9BImtF,GACG,KADHA,GAEI,KAFJA,GAGS,IAHTA,GAIU,ICJhB,SAASC,GAAYnnG,EAAOob,EAAG/I,GAC7B,MAAMrS,EAAM2+B,MAAM,wCAAyCvjB,EAAG/I,EAAI,EACpE,CCFA,MAAMqqB,GAAe,IAAIp/B,WAAW,GAC9Bq/B,GAAe,IAAIr/B,WAAW,GAC9Bs/B,GAAY,KAAKt/B,WAAW,GAC5Bu/B,GAAQ,IAAIv/B,WAAW,GACvBw/B,GAAU,KAAKx/B,WAAW,GAC1By/B,GAAQ,IAAIz/B,WAAW,GACvB0/B,GAAO,KAAK1/B,WAAW,GACvB2/B,GAAM,KAAK3/B,WAAW,GACtB4/B,GAAK,KAAK5/B,WAAW,GACrB+/B,GAAmB,IAAI//B,WAAW,GAClCggC,GAAoB,IAAIhgC,WAAW,GACnCigC,GAAa,IAAIjgC,WAAW,GAC5BkgC,GAAc,IAAIlgC,WAAW,GAC7BmgC,GAAY,IAAIngC,WAAW,GAC3B8pG,GAAW,IAAI9pG,WAAW,GAC1BqgC,GAAQ,IAAIrgC,WAAW,GACvBsgC,GAAK,IAAItgC,WAAW,GACpB+pG,GAAQ,IAAI/pG,WAAW,GAEvBugC,GAAY,wBACZypE,GAAc,YACdxpE,GAAc,qCACdC,GAAiB,cAEvB,ICtBiBwpE,GAAA,MACf7/F,YAAY1H,GACVD,KAAKC,MAAQA,EAEbD,KAAKW,IAAM,EACXX,KAAKgK,KAAO,IAAIogC,GAChBpqC,KAAKsvC,QAAUtvC,KAAKgK,KACpBhK,KAAK0U,OAAS,GAEd1U,KAAKynG,aAAc,EACnBznG,KAAK0nG,gBAAaroG,EAClBW,KAAKsjC,UAAOjkC,EAEZW,KAAKgK,KAAK6B,OAAS,CAAE5L,QAAOoE,MAAO,CAAET,KAAM,EAAGo8B,OAAQ,GACxD,CAEAg1B,OACE,IAAI2yC,EACJ,KAAO3nG,KAAKW,IAAMX,KAAK8iC,MAAMlkC,QAAQ,CAGnC,GAFA+oG,EAAO3nG,KAAK8iC,MAAM9iC,KAAKW,KAEnBgnG,EAAKtxF,QACPrW,KAAKqW,QAAQsxF,QACR,GAAIA,EAAKvlE,OACdpiC,KAAKoiC,OAAOulE,QACP,GAAIA,EAAK7pG,MAAO,CACrB,IAAIoC,EAAOF,KAAK4nG,eAAe5nG,KAAKW,KAEpC,GAAIT,EAAK6E,KAAO7E,EAAKkiC,OACnBpiC,KAAKgC,KAAK2lG,OACL,CACL,IAAIE,EAAa3nG,EAAKmhC,OAAOziC,OAAS+oG,EAAKtmE,OAAOziC,OAC7CipG,EAEMA,GAAc3nG,EAAKpC,MAC5BkC,KAAKmF,KAAKwiG,GACDE,IAAe3nG,EAAKpC,OAC7BkC,KAAKgC,KAAK2lG,GAJV3nG,KAAKgC,KAAK2lG,EAMd,CACF,MAAWA,EAAK5iG,IACd/E,KAAKgK,KAAK/H,KAAKxC,MAAQkoG,EAAKnoG,OAE5BQ,KAAKmF,KAAKwiG,GAGZ3nG,KAAKW,KAAO,CACd,CAEA,IAAK,IAAInC,EAAIwB,KAAKU,OAAO9B,OAAS,EAAGJ,GAAK,EAAGA,IAC3C,GAAIwB,KAAKU,OAAOlC,GAAGI,OAAS,EAAG,CAC7B,IAAIyyB,EAAOrxB,KAAKU,OAAOlC,GACvBwB,KAAKgK,KAAK6B,OAAO9G,IAAM,CACrBnB,KAAMytB,EAAK,IAAMA,EAAK,GACtB2O,OAAQ3O,EAAK,IAAMA,EAAK,IAE1B,KACF,CAEJ,CAEAhb,QAAQsxF,GACN,IAAIvnG,EAAQunG,EAAKjnG,OAAO,GACpBhC,EAAO,IAAIguC,GACf1sC,KAAKowC,KAAK1xC,EAAMipG,GAChBjpG,EAAKmN,OAAO9G,IAAM,CAAEnB,KAAMxD,EAAM,GAAI4/B,OAAQ5/B,EAAM,IAClDJ,KAAK8nG,YAAYppG,EAAM0B,EACzB,CAEAgiC,OAAOulE,GACL,IAAII,EAASJ,EAAKjnG,OAAO,GACrBiK,EAASg9F,EAAKjnG,OAAOM,MAAM,GAE3BtC,EAAO,IAAIyrC,GAMf,IALAzrC,EAAKqC,KAAOgnG,EAAO,GAAG/mG,MAAM,GAC5BhB,KAAKowC,KAAK1xC,EAAMipG,GAEE,KAAdjpG,EAAKqC,MAAaf,KAAKmxC,cAAc42D,IAEjCJ,EAAK5iG,KAAO4iG,EAAKK,WACvBhoG,KAAKW,KAAO,EACZgnG,EAAO3nG,KAAK8iC,MAAM9iC,KAAKW,KACvBgK,EAAOzJ,KAAK,CAAC,QAASymG,EAAKnoG,OAASmoG,EAAKtmE,SACzC12B,EAASA,EAAOlE,OAAOkhG,EAAKjnG,QAG9BhC,EAAKuD,KAAK6I,UAAY9K,KAAK4wC,YAAYjmC,GACvC3K,KAAKioG,kBAAkBvpG,EAAMiM,GAC7B3K,KAAKkoG,eAAev9F,GACpB3K,KAAKmoG,WAAWx9F,GAChB3K,KAAKkC,IAAIxD,EAAM,SAAUiM,EAAQo9F,EACnC,CAEA/lG,KAAK2lG,GACH,IAAIjpG,EAAO,IAAImnC,GACf7lC,KAAKowC,KAAK1xC,EAAMipG,GAEhB,IAAI/zF,EAAU,GACV9V,EAAQ,EACRsB,EAAQ,GACRwS,EAAO,GACX,IAAK,IAAIpT,EAAI,EAAGA,EAAImpG,EAAKjnG,OAAO9B,OAAQJ,IAAK,CAC3C,IAAI4B,EAAQunG,EAAKjnG,OAAOlC,GACxB,GAAiB,MAAb4B,EAAM,GAAY,CACpBwT,GAAWxT,EAAM,GACjBtC,EAAQsC,EACRhB,EAAQuoG,EAAKjnG,OAAOM,MAAMxC,EAAI,GAC9B,KACF,CAAwB,YAAb4B,EAAM,IAAiC,UAAbA,EAAM,GACzCwT,GAAWxT,EAAM,GACI,KAAZwT,EACT5T,KAAKooG,QAAQhoG,GAEbwR,GAAQxR,EAAM,EAElB,CAEa,KAATwR,GAAa5R,KAAKqoG,YAAYV,EAAKjnG,OAAO,IAC9ChC,EAAKkT,KAAOA,EAEZ,IAAI1R,EAAOF,KAAK8iC,MAAM9iC,KAAKW,IAAM,GAEjC,MACGT,EAAK6E,MACL7E,EAAKkiC,SACLliC,EAAKpC,OACNoC,EAAKmhC,OAAOziC,OAAS+oG,EAAKtmE,OAAOziC,QAEjCQ,EAAM8B,KAAK,CAAC,QAAShB,EAAKV,OAASU,EAAKmhC,SACxCjiC,EAAQA,EAAMqH,OAAOvG,EAAKQ,QAC1BV,KAAKW,KAAO,EACZT,EAAOF,KAAK8iC,MAAM9iC,KAAKW,IAAM,GAG/B,IAAI0wB,EAAOjyB,EAAMA,EAAMR,OAAS,GAChC,GAAIyyB,GAAoB,YAAZA,EAAK,GAAkB,CACjCjyB,EAAMiC,MACN,IAAIgV,EAAU,IAAIq2B,GAClB1sC,KAAKsvC,QAAQpuC,KAAKmV,GAClBA,EAAQxK,OAAS,CACf5L,MAAOD,KAAKC,MACZoE,MAAO,CAAET,KAAMytB,EAAK,GAAI2O,OAAQ3O,EAAK,IACrCtsB,IAAK,CAAEnB,KAAMytB,EAAK,GAAI2O,OAAQ3O,EAAK,KAErC,IAAIlxB,EAAOf,EAAMA,EAAMR,OAAS,GAC5BuB,GAAoB,UAAZA,EAAK,KACff,EAAMiC,MACNgV,EAAQpU,KAAKzC,OAASW,EAAK,IAE7BH,KAAK8nG,YAAYzxF,EAASgb,EAC5B,CAEA,IAAK,IAAI7yB,EAAIY,EAAMR,OAAS,EAAGJ,EAAI,EAAGA,IAAK,CACzC,IAAIic,EAAIrb,EAAMZ,GAAG,GACjB,GAAU,SAANic,GAAgC,eAAhBrb,EAAMZ,GAAG,GAAqB,CAChDE,EAAKyL,WAAY,EACb3L,EAAI,GAAyB,UAApBY,EAAMZ,EAAI,GAAG,IACxBE,EAAKuD,KAAKkI,UAAY/K,EAAMZ,EAAI,GAAG,GAAK,aACxCY,EAAMmuC,OAAO/uC,EAAI,EAAG,KAEpBE,EAAKuD,KAAKkI,UAAY,aACtB/K,EAAMmuC,OAAO/uC,EAAG,IAElB,KACF,CAAO,GAAU,UAANic,GAAuB,YAANA,GAAyB,YAANA,EAC7C,KAEJ,CAEA/b,EAAKuD,KAAK2R,QAAUA,EAAU5T,KAAK4wC,YAAYxxC,GAC/CY,KAAKkoG,eAAe9oG,GACpBY,KAAKkC,IAAIxD,EAAM,QAASU,EAAOtB,EACjC,CAEAqH,KAAKwiG,GACH,IAAIjpG,EAAO,IAAIwrC,GACflqC,KAAKowC,KAAK1xC,EAAMipG,GAEhB,IAAIh0F,EAAWg0F,EAAKjnG,OAChBR,EAAOF,KAAK8iC,MAAM9iC,KAAKW,IAAM,GAEjC,MAAQT,EAAK6E,KAAO7E,EAAKmhC,OAAOziC,SAAW+oG,EAAKtmE,OAAOziC,QACrD+U,EAASzS,KAAK,CAAC,QAAShB,EAAKV,OAASU,EAAKmhC,SAC3C1tB,EAAWA,EAASlN,OAAOvG,EAAKQ,QAChCV,KAAKW,KAAO,EACZT,EAAOF,KAAK8iC,MAAM9iC,KAAKW,IAAM,GAG/BX,KAAKioG,kBAAkBvpG,EAAMiV,GAC7B3T,KAAKmoG,WAAWx0F,GAChB3T,KAAKkC,IAAIxD,EAAM,WAAYiV,EAC7B,CAIA0tB,OAAOsmE,GACL,IAAItmE,EAASsmE,EAAKtmE,OAAOziC,OACrB0pG,OAAoC,IAApBtoG,KAAK0nG,WASzB,IAPKY,GAAUjnE,GAAQrhC,KAAKuoG,kBAAkBZ,IAEzC3nG,KAAKsjC,MAAQjC,IAChBrhC,KAAKsjC,KAAOjC,EACZrhC,KAAKgK,KAAK/H,KAAKo/B,OAASsmE,EAAKtmE,QAG3BinE,GAAUtoG,KAAK0nG,aAAermE,EAAQ,CACxC,IAAImnE,EAAOnnE,EAASrhC,KAAK0nG,WACzB,GAAIc,EAAO,EACT,GAAIA,IAASxoG,KAAKsjC,KAChBtjC,KAAKyoG,YAAYzoG,KAAK0nG,WAAa1nG,KAAKsjC,KAAMjC,EAAQsmE,QACjD,GAAI3nG,KAAKsvC,QAAQje,KAAKnwB,KAC3BlB,KAAKsvC,QAAUtvC,KAAKsvC,QAAQje,SACvB,CACLrxB,KAAKynG,YAAc,GACnB,IAAK,IAAIjpG,EAAI,EAAGA,EAAIgqG,EAAMhqG,IACxBwB,KAAKynG,aAAe,GAExB,MACK,GAAIe,EAAOxoG,KAAKsjC,MAAS,EAAG,CACjC,IAAI50B,EAAI2yB,EAAUmnE,EAAOxoG,KAAKsjC,KAC9BtjC,KAAKyoG,YAAe/5F,GAAAA,OAAAA,iBAAQA,EAAI1O,KAAKsjC,MAAQjC,EAAQsmE,EACvD,MACE,IAAK,IAAInpG,EAAI,EAAGA,GAAKgqG,EAAOxoG,KAAKsjC,KAAM9kC,IACrCwB,KAAKsvC,QAAUtvC,KAAKsvC,QAAQ7uC,MAGlC,CAEAT,KAAK0nG,WAAarmE,CACpB,CAEA+O,KAAK1xC,EAAMipG,GACT3nG,KAAKqhC,OAAOsmE,GAEP3nG,KAAKsvC,QAAQjxC,QAAO2B,KAAKsvC,QAAQjxC,MAAQ,IAC9C2B,KAAKsvC,QAAQpuC,KAAKxC,GAElBA,EAAKuD,KAAKzC,OAASmoG,EAAKnoG,OAASmoG,EAAKtmE,OAClCrhC,KAAKynG,cACP/oG,EAAKuD,KAAKwlG,YAAcznG,KAAKynG,YAC7BznG,KAAKynG,aAAc,GAErB/oG,EAAKmN,OAAS,CACZxH,MAAO,CAAET,KAAM+jG,EAAKjnG,OAAO,GAAG,GAAIs/B,OAAQ2nE,EAAKjnG,OAAO,GAAG,IACzDT,MAAOD,KAAKC,MAEhB,CAEAkoG,WAAWznG,GACT,IAAK,IAAIN,KAASM,EACC,MAAbN,EAAM,IACRJ,KAAK4+B,MAAM,4BAA6Bx+B,EAAM,GAAIA,EAAM,GAG9D,CAEA8nG,eAAexnG,GACb,IAAK,IAAIN,KAASM,EACC,MAAbN,EAAM,IACRJ,KAAK4+B,MAAM,wBAAyBx+B,EAAM,GAAIA,EAAM,GAG1D,CAEA6nG,kBAAkBvpG,EAAMgC,GACtB,IAAIgoG,EAAYhoG,EAAOA,EAAO9B,OAAS,GACnC8pG,GAA8B,UAAjBA,EAAU,KACzBhoG,EAAOW,MACP3C,EAAKuD,KAAK0mG,WAAaD,EAAU,GAErC,CAEA93D,YAAYlwC,GACV,IAAI/B,EAAS,GACb,IAAK,IAAIH,EAAI,EAAGA,EAAIkC,EAAO9B,SACJ,UAAjB8B,EAAOlC,GAAG,IAAmC,YAAjBkC,EAAOlC,GAAG,IADTA,IAE/BG,GAAU+B,EAAOiwC,QAAQ,GACzBnyC,GAAK,EAKT,OAAOG,CACT,CAEAuD,IAAIxD,EAAMkT,EAAMlR,EAAQkoG,GACtB,IAAIxoG,EAAOvB,EA2BPwyB,EA1BAzyB,EAAS8B,EAAO9B,OAChBQ,EAAQ,GACRmyC,GAAQ,EACZ,IAAK,IAAI/yC,EAAI,EAAGA,EAAII,EAAQJ,GAAK,EAC/B4B,EAAQM,EAAOlC,GACfK,EAAOuB,EAAM,GACA,YAATvB,GAAgC,UAATA,GAAoBL,IAAMI,EAAS,EAC5D2yC,GAAQ,EAERnyC,GAASgB,EAAM,GAGnB,IAAKmxC,EAAO,CACV,IAAIwpD,EAAMr6F,EAAOiF,QAAO,CAACd,EAAKrG,IAAMqG,EAAMrG,EAAE,IAAI,IAC5C0D,EAAMxB,EAAOiF,QAAO,CAACd,EAAKrG,IACf,YAATA,EAAE,IAA6B,WAATA,EAAE,GACnBqG,EAAM,MAAQrG,EAAE,GAAGwC,MAAM,GAAGob,OAAS,MAErCvX,EAAMrG,EAAE,IAEhB,IACHE,EAAKuD,KAAK2P,GAAQ,CAAExS,QAAO8C,OACvB64F,IAAQ74F,IAAKxD,EAAKuD,KAAK2P,GAAMmpF,IAAMA,EACzC,CACAr8F,EAAKkT,GAAQxS,EAGb,IAAK,IAAIZ,EAAIkC,EAAO9B,OAAS,EAAGJ,GAAK,EAAGA,IACtC,GAAIkC,EAAOlC,GAAGI,OAAS,EAAG,CACxByyB,EAAO3wB,EAAOlC,GACd,KACF,CAEG6yB,IAAMA,EAAOu3E,GAElBlqG,EAAKmN,OAAO9G,IAAM,CAChBnB,KAAMytB,EAAK,IAAMA,EAAK,GACtB2O,OAAQ3O,EAAK,IAAMA,EAAK,GAE5B,CAEAu2E,eAAejnG,GACb,IACIgnG,EADAznG,EAAOS,EAEX,KAAOT,EAAOF,KAAK8iC,MAAMlkC,SACvBsB,GAAQ,EACRynG,EAAO3nG,KAAK8iC,MAAM5iC,IACdynG,EAAK5iG,KAAQ4iG,EAAKtxF,WAExB,OAAOsxF,CACT,CAEAG,YAAYppG,EAAM0B,GAChB,IAAI2O,EAAO3O,EAAM,GACA,WAAbA,EAAM,IACR1B,EAAKuD,KAAKukC,QAAS,EACnBz3B,EAAOA,EAAK/N,MAAM,IAElB+N,EAAOA,EAAK/N,MAAM,GAAI,GAGxB,IAAI2B,EAAQoM,EAAKpM,MAAM,2BACnBA,GACFjE,EAAKqQ,KAAOpM,EAAM,GAClBjE,EAAKuD,KAAK+oB,KAAOroB,EAAM,GACvBjE,EAAKuD,KAAK4mG,YAAclmG,EAAM,KAE9BjE,EAAKqQ,KAAO,GACZrQ,EAAKuD,KAAK+oB,KAAO,GACjBtsB,EAAKuD,KAAK4mG,YAAc,GAE5B,CAIAjqE,MAAM1qB,EAAKtQ,EAAMo8B,GACf,MAAMhgC,KAAKC,MAAM2+B,MAAM1qB,EAAKtQ,EAAMo8B,EACpC,CAEAmR,cAAc/wC,GACZJ,KAAK4+B,MAAM,uBAAwBx+B,EAAM,GAAIA,EAAM,GACrD,CAEAioG,YAAYjoG,GACVJ,KAAK4+B,MAAM,2BAA4Bx+B,EAAM,GAAIA,EAAM,GACzD,CAEAmoG,kBAAkBZ,GAChB3nG,KAAK4+B,MAAM,oCAAqC+oE,EAAK7lG,OAAQ,EAC/D,CAEA2mG,YAAY19F,EAAU+9F,EAAMnB,GAC1B,IAAIzzF,EAAG,YAAAzN,OAAesE,EAAQ,qBAAAtE,OAAoBqiG,GAClD9oG,KAAK4+B,MAAM1qB,EAAKyzF,EAAK7lG,OAAQ,EAC/B,CAEAsmG,QAAQhoG,GACNJ,KAAK4+B,MAAM,mCAAoCx+B,EAAM,GAAIA,EAAM,GACjE,GCjYeyD,GAAA,CAAEnE,UCDnB,SAAoChB,EAAMqjC,GACxC,IAAI/qB,EAAM,ILIK,MACfrP,YAAYo6B,GACV/hC,KAAK+hC,QAAUA,CACjB,CAEAriC,UAAUhB,EAAM0yB,GACdpxB,KAAKtB,EAAKG,MAAMH,EAAM0yB,EACxB,CAEApnB,KAAKtL,GACHsB,KAAKiiC,KAAKvjC,GACNA,EAAKuD,KAAKxC,OAAOO,KAAK+hC,QAAQrjC,EAAKuD,KAAKxC,MAC9C,CAEA4W,QAAQ3X,GACN,IAAIssB,EAAOm8E,GACPl8E,EAAQk8E,GACRnnG,KAAKwJ,IAAI9K,EAAKuD,KAAK+oB,QAAOA,EAAOtsB,EAAKuD,KAAK+oB,MAE3CtsB,EAAKuD,KAAKukC,QAEVvb,EADEjrB,KAAKwJ,IAAI9K,EAAKuD,KAAK4mG,aACbnqG,EAAKuD,KAAK4mG,YAEV,GAENnqG,EAAKuD,KAAKwlG,aACZznG,KAAK+hC,QAAQrjC,EAAKuD,KAAKwlG,aAEzBznG,KAAK+hC,QAAQ,KAAO/W,EAAOtsB,EAAKqQ,KAAOkc,EAAOvsB,KAE1CsB,KAAKwJ,IAAI9K,EAAKuD,KAAKgpB,SAAQA,EAAQvsB,EAAKuD,KAAKgpB,OACjDjrB,KAAK+hC,QAAQ,KAAO/W,EAAOtsB,EAAKqQ,KAAOkc,EAAQ,KAAMvsB,GAEzD,CAEAsD,KAAKtD,GACH,IAAIkV,EAAUlV,EAAKuD,KAAK2R,SAAWuzF,GAC/Bj7F,EAASxN,EAAKkT,KAAOgC,EAAU5T,KAAKkiC,SAASxjC,EAAM,SAEnDA,EAAKyL,YACP+B,GAAUxN,EAAKuD,KAAKkI,WAAa,eAGnCnK,KAAK+hC,QAAQ71B,EAAQxN,EACvB,CAEAyG,KAAKzG,GACHsB,KAAKixB,MAAMvyB,EAAMsB,KAAKkiC,SAASxjC,EAAM,YACvC,CAEA0jC,OAAO1jC,GACL,IAAIqC,EAAO,IAAMrC,EAAKqC,KAClB4J,EAASjM,EAAKiM,OAAS3K,KAAKkiC,SAASxjC,EAAM,UAAY,GAEvDsB,KAAKwJ,IAAI9K,EAAKuD,KAAK6I,WACrB/J,GAAQrC,EAAKuD,KAAK6I,UACTH,IACT5J,GAAQ,KAGVf,KAAKixB,MAAMvyB,EAAMqC,EAAO4J,EAC1B,CAEAs3B,KAAKvjC,GACH,IAAI2iC,EAAS3iC,EAAKsL,OAAO/H,KAAKo/B,QAAU8lE,GAExC,IAAK,IAAI3oG,EAAI,EAAGA,EAAIE,EAAKL,MAAMO,OAAQJ,IAAK,CAC1C,IAAIiY,EAAQ/X,EAAKL,MAAMG,GACnBgB,EACFiX,EAAMxU,KAAKzC,OAAOqG,QAAQ,UAAW,IAAM7F,KAAKqhC,OAAO3iC,EAAM2iC,GAC5C,YAAf5qB,EAAM5X,MAAuB4X,EAAMxU,KAAKzC,OAAOyF,SAAS,QAC1DzF,EAASiX,EAAMxU,KAAKzC,QAElBA,GAAQQ,KAAK+hC,QAAQviC,GACzBQ,KAAKN,UAAU+W,EACjB,CACF,CAEAwa,MAAMvyB,EAAM2F,GACV,IAAIuP,EAAUlV,EAAKuD,KAAK0mG,YAAc,GACtC3oG,KAAK+hC,QAAQ19B,EAAQuP,EAASlV,EAAM,SAChCsB,KAAKwJ,IAAI9K,EAAKL,QAAQ2B,KAAKiiC,KAAKvjC,EACtC,CAEA2iC,OAAO3iC,EAAM4kC,GACX,IAAI3kC,EAAS,GACb,KAAOD,EAAK+B,QACV9B,GAAU2kC,EACV5kC,EAAOA,EAAK+B,OAEd,OAAO9B,CACT,CAEA6K,IAAIpK,GACF,YAAwB,IAAVA,CAChB,CAEA8iC,SAASxjC,EAAMkT,GACb,IAAIxS,EAAQV,EAAKkT,GACb1P,EAAMxD,EAAKuD,KAAK2P,GACpB,OAAI1P,GAAOA,EAAI9C,QAAUA,EAChB8C,EAAI64F,KAAO74F,EAAIA,IAEf9C,CAEX,GK7G0B2iC,GAC1B/qB,EAAItX,UAAUhB,EACf,EDF6B6C,MEI9B,SAAgCsK,EAAQ/C,GACtC,IAAI7I,EAAQ,IAAIk/B,GAAMtzB,EAAQ/C,GAE1B8oC,EAAS,IAAI7B,GAAO9vC,GAKxB,OAJA2xC,EAAOlxC,OJaT,SAAmCT,GACjC,IAGIW,EACFV,EACAZ,EACAshC,EACAvP,EACA8M,EACA99B,EACAwvD,EACAC,EACA1xB,EACA99B,EACAH,EACAua,EAfEha,EAAS,GACT49B,EAAMr+B,EAAMq+B,IAAIC,UAgBhB3/B,EAAS0/B,EAAI1/B,OACbk7B,GAAU,EACVl2B,EAAO,EACPjD,EAAM,EAEV,SAASpB,EAASo/B,GAChB,MAAM1+B,EAAM2+B,MAAM,YAAcD,EAAM/6B,EAAMjD,EAAMm5B,EACpD,CAEA,KAAOn5B,EAAM/B,GAAQ,CAYnB,OAXAgC,EAAO09B,EAAI/gC,WAAWoD,IAGpBC,IAASm8B,IACTn8B,IAASq8B,IACRr8B,IAASu8B,IAAMmB,EAAI/gC,WAAWoD,EAAM,KAAOo8B,MAE5CjD,EAASn5B,EACTiD,GAAQ,GAGFhD,GACN,KAAKu8B,GACCmB,EAAI/gC,WAAWoD,EAAM,KAAOo8B,IAC9BjD,EAASn5B,EACTiD,GAAQ,EACRjD,GAAO,EACPD,EAAOQ,KAAK,CAAC,UAAW,OAAQ0C,EAAO,KAEvClD,EAAOQ,KAAK,CAAC,UAAW,KAAM0C,EAAO,IAEvC,MAEF,KAAKq5B,GACL,KAAKF,GACHr8B,EAAOQ,KAAK,CAAC,UAAWo9B,EAAIt9B,MAAML,EAAKA,EAAM,GAAIiD,EAAO,IACxD,MAEF,KAAKo5B,GACL,KAAKE,GACHh9B,EAAOS,EACP,GACET,GAAQ,EACRU,EAAO09B,EAAI/gC,WAAW2C,SACfU,IAASo8B,IAASp8B,IAASs8B,IAEpCx8B,EAAOQ,KAAK,CAAC,QAASo9B,EAAIt9B,MAAML,EAAKT,KACrCS,EAAMT,EAAO,EACb,MAEF,KAAKs9B,GACH98B,EAAOQ,KAAK,CAAC,IAAK,IAAK0C,EAAMjD,EAAMm5B,IACnC,MAEF,KAAK2D,GACH/8B,EAAOQ,KAAK,CAAC,IAAK,IAAK0C,EAAMjD,EAAMm5B,IACnC,MAEF,KAAK8D,GACHl9B,EAAOQ,KAAK,CAAC,IAAK,IAAK0C,EAAMjD,EAAMm5B,IACnC,MAEF,KAAK4D,GACHh9B,EAAOQ,KAAK,CAAC,IAAK,IAAK0C,EAAMjD,EAAMm5B,IACnC,MAEF,KAAKwtE,GACH5mG,EAAOQ,KAAK,CAAC,IAAK,IAAK0C,EAAMjD,EAAMm5B,IACnC,MAEF,KAAKwD,GAGH,GAFAn9B,EAAOO,EAAO9B,OAAS8B,EAAOA,EAAO9B,OAAS,GAAG,GAAK,GACtD8b,EAAI4jB,EAAI/gC,WAAWoD,EAAM,GAEd,QAATR,GACAua,IAAMiiB,IACNjiB,IAAMkiB,IACNliB,IAAMsiB,IACNtiB,IAAMqiB,IACNriB,IAAMwiB,IACNxiB,IAAMuiB,IACNviB,IAAMyiB,GACN,CACAj9B,EAAOS,EACP,GAKE,IAJAy9B,GAAU,EACVl+B,EAAOo+B,EAAIl9B,QAAQ,IAAKlB,EAAO,IACjB,IAAVA,GAAaX,EAAS,WAC1Be,EAAYJ,EACLo+B,EAAI/gC,WAAW+C,EAAY,KAAOu8B,IACvCv8B,GAAa,EACb89B,GAAWA,QAENA,GAET19B,EAAOQ,KAAK,CACV,WACAo9B,EAAIt9B,MAAML,EAAKT,EAAO,GACtB0D,EACAjD,EAAMm5B,EACNl2B,EACA1D,EAAO45B,IAETn5B,EAAMT,CACR,MACEA,EAAOo+B,EAAIl9B,QAAQ,IAAKT,EAAM,GAC9Bw9B,EAAUG,EAAIt9B,MAAML,EAAKT,EAAO,IAElB,IAAVA,GAAe89B,GAAe18B,KAAK68B,GACrCz9B,EAAOQ,KAAK,CAAC,IAAK,IAAK0C,EAAMjD,EAAMm5B,KAEnCp5B,EAAOQ,KAAK,CACV,WACAi9B,EACAv6B,EACAjD,EAAMm5B,EACNl2B,EACA1D,EAAO45B,IAETn5B,EAAMT,GAIV,MAEF,KAAKq9B,GACH78B,EAAOQ,KAAK,CAAC,IAAK,IAAK0C,EAAMjD,EAAMm5B,IACnC,MAEF,KAAK6C,GACL,KAAKC,GACHt9B,EAAQsB,IAAS+7B,GAAe,IAAM,IACtCz8B,EAAOS,EACP,GAKE,IAJAy9B,GAAU,EACVl+B,EAAOo+B,EAAIl9B,QAAQ9B,EAAOY,EAAO,IACnB,IAAVA,GAAaX,EAAS,SAC1Be,EAAYJ,EACLo+B,EAAI/gC,WAAW+C,EAAY,KAAOu8B,IACvCv8B,GAAa,EACb89B,GAAWA,QAENA,GAETD,EAAUG,EAAIt9B,MAAML,EAAKT,EAAO,GAChC0gC,EAAQzC,EAAQxpB,MAAM,MACtB0c,EAAOuP,EAAMhiC,OAAS,EAElByyB,EAAO,GACTw+B,EAAWjsD,EAAOytB,EAClBy+B,EAAa5vD,EAAO0gC,EAAMvP,GAAMzyB,SAEhCixD,EAAWjsD,EACXksD,EAAah2B,GAGfp5B,EAAOQ,KAAK,CACV,SACAo9B,EAAIt9B,MAAML,EAAKT,EAAO,GACtB0D,EACAjD,EAAMm5B,EACN+1B,EACA3vD,EAAO4vD,IAGTh2B,EAASg2B,EACTlsD,EAAOisD,EACPlvD,EAAMT,EACN,MAEF,KAAK29B,GACHC,GAAUxE,UAAY34B,EAAM,EAC5Bm9B,GAAUx8B,KAAKg9B,GAEbp+B,EAD0B,IAAxB49B,GAAUxE,UACLgF,EAAI1/B,OAAS,EAEbk/B,GAAUxE,UAAY,EAE/B54B,EAAOQ,KAAK,CACV,UACAo9B,EAAIt9B,MAAML,EAAKT,EAAO,GACtB0D,EACAjD,EAAMm5B,EACNl2B,EACA1D,EAAO45B,IAETn5B,EAAMT,EACN,MAEF,KAAK28B,GAMH,IALA38B,EAAOS,EACPN,GAAS,EAETwvD,EAAWjsD,EAEJ06B,EAAI/gC,WAAW2C,EAAO,KAAO28B,IAClC38B,GAAQ,EACRG,GAAUA,EAEZO,EAAO09B,EAAI/gC,WAAW2C,EAAO,GACzBG,IACEO,IAASu8B,IAAMmB,EAAI/gC,WAAW2C,EAAO,KAAO68B,IAC9C78B,GAAQ,EACR2vD,GAAY,EACZC,EAAa5vD,GACJU,IAASu8B,IAAMv8B,IAASm8B,IAAWn8B,IAASq8B,IACrD/8B,GAAQ,EACR2vD,GAAY,EACZC,EAAa5vD,GAEbA,GAAQ,GAGZQ,EAAOQ,KAAK,CACV,OACAo9B,EAAIt9B,MAAML,EAAKT,EAAO,GACtB0D,EACAjD,EAAMm5B,EACNl2B,EACA1D,EAAO45B,IAEL+1B,IAAajsD,IACfA,EAAOisD,EACP/1B,EAASg2B,GAEXnvD,EAAMT,EACN,MAEF,QACEwa,EAAI4jB,EAAI/gC,WAAWoD,EAAM,GAErBC,IAASk8B,IAASpiB,IAAM2sF,IAC1BnnG,EAAOo+B,EAAIl9B,QAAQ,KAAMT,EAAM,GAAK,EACvB,IAATT,GAAYX,EAAS,WAEzB4+B,EAAUG,EAAIt9B,MAAML,EAAKT,EAAO,GAChC0gC,EAAQzC,EAAQxpB,MAAM,MACtB0c,EAAOuP,EAAMhiC,OAAS,EAElByyB,EAAO,GACTw+B,EAAWjsD,EAAOytB,EAClBy+B,EAAa5vD,EAAO0gC,EAAMvP,GAAMzyB,SAEhCixD,EAAWjsD,EACXksD,EAAah2B,GAGfp5B,EAAOQ,KAAK,CACV,UACAi9B,EACAv6B,EACAjD,EAAMm5B,EACN+1B,EACA3vD,EAAO4vD,IAGTh2B,EAASg2B,EACTlsD,EAAOisD,EACPlvD,EAAMT,GACGU,IAASk8B,IAASpiB,IAAMoiB,IACjCyqE,GAAYjuE,UAAY34B,EAAM,EAC9B4mG,GAAYjmG,KAAKg9B,GAEfp+B,EAD4B,IAA1BqnG,GAAYjuE,UACPgF,EAAI1/B,OAAS,EAEb2oG,GAAYjuE,UAAY,EAGjC6E,EAAUG,EAAIt9B,MAAML,EAAKT,EAAO,GAEhCQ,EAAOQ,KAAK,CACV,UACAi9B,EACAv6B,EACAjD,EAAMm5B,EACNl2B,EACA1D,EAAO45B,EACP,WAGFn5B,EAAMT,IAEN69B,GAAYzE,UAAY34B,EAAM,EAC9Bo9B,GAAYz8B,KAAKg9B,GAEfp+B,EAD4B,IAA1B69B,GAAYzE,UACPgF,EAAI1/B,OAAS,EAEbm/B,GAAYzE,UAAY,EAGjC54B,EAAOQ,KAAK,CACV,OACAo9B,EAAIt9B,MAAML,EAAKT,EAAO,GACtB0D,EACAjD,EAAMm5B,EACNl2B,EACA1D,EAAO45B,IAETn5B,EAAMT,GAMZS,GACF,CAEA,OAAOD,CACR,CInViBk/B,CAAU3/B,GAC1B2xC,EAAO9O,MLRT,SAAqC7iC,EAAO2gC,GAC1C,IAAImoE,EACAC,EAAa,EACblmE,EAAQlC,EAAMnsB,KAAI7Q,IACpB,IAAIokG,GAAY,EACZ3xF,GAAU,EACVvU,EAASknG,EAAa,EACtB5mE,GAAS,EACTf,EAAS,GACT3gC,EAAS,GACT5C,GAAQ,EAEZ,GAAI8F,EAAKhF,OAAS,EAAG,CAsBnB,GArBmB,UAAfgF,EAAK,GAAG,IACVy9B,EAASz9B,EAAK,GAAG,GACjBlD,EAASkD,EAAK5C,MAAM,KAEpBqgC,EAAS,GACT3gC,EAASkD,IAGNmlG,GAAc1nE,EAAOziC,SACxBmqG,EAA2B,MAAd1nE,EAAO,GAAa,QAAU,OAE1B,UAAf0nE,EACE1nE,EAAOp8B,SAAS,OAClBmiG,GAAYnnG,EAAO6B,EAAQu/B,EAAOjgC,QAAQ,OAEpB,QAAf2nG,GACL1nE,EAAOp8B,SAAS,MAClBmiG,GAAYnnG,EAAO6B,EAAQu/B,EAAOjgC,QAAQ,MAI1CV,EAAO9B,OAAQ,CACjB,IAAK,IAAIJ,EAAIkC,EAAO9B,OAAS,EAAGJ,GAAK,EAAGA,IAAK,CAC3C,IAAIK,EAAO6B,EAAOlC,GAAG,GACrB,GAAa,MAATK,EAAc,CAChBmpG,GAAY,EACZ,KACF,CAAO,GAAa,UAATnpG,GAES,YAATA,GAES,YAATA,EAGT,KAEJ,CACAwX,EAA2B,YAAjB3V,EAAO,GAAG,GACpB0hC,EAA0B,YAAjB1hC,EAAO,GAAG,GAEnB,IAAI2+B,EAAW,EACf,IAAK,IAAI7gC,EAAI,EAAGA,EAAIkC,EAAO9B,OAAS,EAAGJ,IAAK,CAC1C,IAAIK,EAAO6B,EAAOlC,GAAG,GACjB0B,EAAOQ,EAAOlC,EAAI,GAAG,GACZ,MAATK,EACFwgC,GAAY,EACM,MAATxgC,EACTwgC,GAAY,EAEH,MAATxgC,GACa,IAAbwgC,GACU,UAATn/B,GAA6B,YAATA,IAErBpC,GAAQ,EAEZ,CACF,CAEA,IAAIuzB,EAAO3wB,EAAOA,EAAO9B,OAAS,GAC9ByyB,GAAoB,YAAZA,EAAK,KAAkB23E,EAAa33E,EAAK,GACvD,CAEA,MAAO,CACLvvB,SACAu/B,SACAvjC,QACA4C,SACA0hC,SACA/rB,UACA2xF,YACAxoG,OAAQ,GACT,IA4BH,OAzBAsjC,EAAQA,EAAMmmE,aACZ,CAACpkG,EAAKrG,KACJ,IAAKA,EAAEkC,OAAO9B,QAAUJ,EAAEkC,OAAOmG,OAAMqV,GAAc,YAATA,EAAE,KAAmB,CAC/D,IAAI/b,EAAO0E,EAAI,GACXrF,EAAShB,EAAE6iC,OAAS7iC,EAAEkC,OAAO+T,KAAIyH,GAAKA,EAAE,KAAI8Y,KAAK,IACrD70B,EAAKX,OAASA,EAASW,EAAKX,MAC9B,MACEqF,EAAIuoC,QAAQ5uC,GAEd,OAAOqG,CAAG,GAEZ,CAAC,CAAEE,KAAK,EAAMvF,OAAQ,MAGxBsjC,EAAMhkB,SAAQ,CAAC6oF,EAAMnpG,KACnB,GAAU,IAANA,EAAS,OAEb,IAAI2B,EAAO2iC,EAAMtkC,EAAI,GACjB6yB,EAAOlxB,EAAKO,OAAOP,EAAKO,OAAO9B,OAAS,GACxCyyB,GAAoB,YAAZA,EAAK,KACfs2E,EAAKnoG,OAAS6xB,EAAK,GAAKs2E,EAAKnoG,OAC7BW,EAAKO,OAAOW,MACd,IAGKyhC,CACR,CKzGgBomE,CAAWjpG,ECZ5B,SAAgCS,GAC9B,IAAIkD,EAAO,GACPjF,EAAS,CAACiF,GACVy7B,EAAW,EACf,IAAK,IAAIj/B,KAASM,EAChBkD,EAAK1C,KAAKd,GACO,MAAbA,EAAM,GACRi/B,GAAY,EACU,MAAbj/B,EAAM,GACfi/B,GAAY,EACU,YAAbj/B,EAAM,IAAiC,IAAbi/B,IACnCz7B,EAAO,GACPjF,EAAOuC,KAAK0C,IAGhB,OAAOjF,CACR,CDJkCwqG,CAAMv3D,EAAOlxC,SAC9CkxC,EAAOojB,OAEApjB,EAAO5nC,IACf,GEbD,MAAMo/F,GAAQplG,GAAUygG,YACxBzgG,GAAUygG,KAAOrhG,IAAW,IAAAimG,EAI1B,MAHsC,aAAlCjmG,SAAA,QAAAA,EAAAA,EAASsB,cAAT,IAAA2kG,OAAAjmG,EAAAimG,EAAiB/P,gBACnBl2F,EAAQsB,OAAO40F,aAAegQ,IAEzBF,GAAMniG,KAAKjD,GAAWZ,EAAQ,EAEvCY,GAAUwjG,cAAgBA"}