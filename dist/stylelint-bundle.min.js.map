{"version":3,"file":"stylelint-bundle.min.js","sources":["../node_modules/stylelint/lib/utils/vendor.js","../node_modules/stylelint/lib/utils/isAutoprefixable.js","../node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.js","../node_modules/stylelint/lib/utils/report.js","../node_modules/stylelint/lib/utils/ruleMessages.js","../node_modules/stylelint/lib/utils/arrayEqual.js","../node_modules/is-plain-object/dist/is-plain-object.mjs","../node_modules/stylelint/lib/utils/validateTypes.js","../node_modules/stylelint/lib/utils/validateOptions.js","../node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js","../node_modules/postcss-value-parser/lib/parse.js","../node_modules/postcss-value-parser/lib/walk.js","../node_modules/postcss-value-parser/lib/stringify.js","../node_modules/postcss-value-parser/lib/unit.js","../node_modules/postcss-value-parser/lib/index.js","../node_modules/stylelint/lib/utils/getDeclarationValue.js","../node_modules/stylelint/lib/utils/matchesStringOrRegExp.js","../node_modules/stylelint/lib/utils/optionsMatches.js","../node_modules/stylelint/lib/rules/annotation-no-unknown/index.js","../node_modules/stylelint/lib/rules/at-rule-disallowed-list/index.js","../node_modules/stylelint/lib/rules/atRuleNameSpaceChecker.js","../node_modules/stylelint/lib/utils/configurationError.js","../node_modules/stylelint/lib/utils/isSingleLineString.js","../node_modules/stylelint/lib/utils/isWhitespace.js","../node_modules/stylelint/lib/utils/whitespaceChecker.js","../node_modules/stylelint/lib/rules/at-rule-name-newline-after/index.js","../node_modules/stylelint/lib/utils/declarationValueIndex.js","../node_modules/stylelint/lib/utils/hasLessInterpolation.js","../node_modules/stylelint/lib/utils/hasPsvInterpolation.js","../node_modules/stylelint/lib/utils/hasScssInterpolation.js","../node_modules/stylelint/lib/utils/hasTplInterpolation.js","../node_modules/stylelint/lib/utils/hasInterpolation.js","../node_modules/stylelint/lib/utils/isStandardSyntaxValue.js","../node_modules/stylelint/lib/utils/setDeclarationValue.js","../node_modules/stylelint/lib/rules/alpha-value-notation/index.js","../node_modules/stylelint/lib/rules/at-rule-name-case/index.js","../node_modules/stylelint/lib/utils/uniteSets.js","../node_modules/stylelint/lib/reference/atKeywords.js","../node_modules/stylelint/lib/rules/at-rule-no-unknown/index.js","../node_modules/stylelint/lib/rules/at-rule-name-space-after/index.js","../node_modules/stylelint/lib/utils/addEmptyLineBefore.js","../node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/hasEmptyLine.js","../node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/typeGuards.js","../node_modules/stylelint/lib/utils/isSharedLineComment.js","../node_modules/stylelint/lib/utils/isAfterComment.js","../node_modules/stylelint/lib/utils/hasBlock.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isFirstNested.js","../node_modules/stylelint/lib/utils/isFirstNodeOfRoot.js","../node_modules/stylelint/lib/utils/removeEmptyLinesBefore.js","../node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.js","../node_modules/stylelint/lib/rules/at-rule-allowed-list/index.js","../node_modules/stylelint/lib/utils/addEmptyLineAfter.js","../node_modules/stylelint/lib/utils/beforeBlockString.js","../node_modules/stylelint/lib/utils/rawNodeString.js","../node_modules/stylelint/lib/utils/blockString.js","../node_modules/stylelint/lib/utils/hasEmptyBlock.js","../node_modules/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js","../node_modules/stylelint/lib/utils/removeEmptyLinesAfter.js","../node_modules/stylelint/lib/utils/flattenArray.js","../node_modules/stylelint/lib/utils/validateObjectWithArrayProps.js","../node_modules/stylelint/lib/rules/at-rule-property-required-list/index.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-space-before/index.js","../node_modules/stylelint/lib/utils/nextNonCommentNode.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-after/index.js","../node_modules/stylelint/lib/utils/stylelintCommand.js","../node_modules/stylelint/lib/rules/block-no-empty/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-before/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-after/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-before/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxFunction.js","../node_modules/stylelint/lib/utils/isStandardSyntaxColorFunction.js","../node_modules/stylelint/lib/rules/color-function-notation/index.js","../node_modules/stylelint/lib/rules/color-hex-alpha/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-after/index.js","../node_modules/stylelint/lib/rules/color-hex-case/index.js","../node_modules/stylelint/lib/rules/color-no-hex/index.js","../node_modules/stylelint/lib/utils/atRuleParamIndex.js","../node_modules/stylelint/lib/rules/custom-media-pattern/index.js","../node_modules/stylelint/lib/rules/color-no-invalid-hex/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxHexColor.js","../node_modules/stylelint/lib/utils/isValidHex.js","../node_modules/stylelint/lib/reference/properties.js","../node_modules/colord/index.mjs","../node_modules/colord/plugins/hwb.mjs","../node_modules/colord/plugins/lab.mjs","../node_modules/colord/plugins/lch.mjs","../node_modules/stylelint/lib/rules/color-named/colordUtils.js","../node_modules/colord/plugins/names.mjs","../node_modules/stylelint/lib/rules/color-named/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxComment.js","../node_modules/stylelint/lib/rules/comment-no-empty/index.js","../node_modules/stylelint/lib/rules/comment-pattern/index.js","../node_modules/stylelint/lib/rules/color-hex-length/index.js","../node_modules/stylelint/lib/rules/comment-whitespace-inside/index.js","../node_modules/stylelint/lib/utils/isCustomProperty.js","../node_modules/stylelint/lib/utils/isScssVariable.js","../node_modules/stylelint/lib/utils/isStandardSyntaxProperty.js","../node_modules/stylelint/lib/rules/custom-property-pattern/index.js","../node_modules/stylelint/lib/utils/containsString.js","../node_modules/stylelint/lib/rules/comment-word-disallowed-list/index.js","../node_modules/stylelint/lib/rules/custom-property-no-missing-var-function/index.js","../node_modules/stylelint/lib/utils/eachDeclarationBlock.js","../node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js","../node_modules/style-search/index.js","../node_modules/stylelint/lib/rules/declarationBangSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-bang-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-custom-properties/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-bang-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.js","../node_modules/stylelint/lib/rules/declarationColonSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-colon-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js","../node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.js","../node_modules/stylelint/lib/rules/declaration-empty-line-before/index.js","../node_modules/stylelint/lib/utils/getImportantPosition.js","../node_modules/stylelint/lib/rules/declaration-no-important/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-allowed-list/index.js","../node_modules/stylelint/lib/utils/blurInterpolation.js","../node_modules/stylelint/lib/utils/getDimension.js","../node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-colon-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-property-max-values/index.js","../node_modules/stylelint/lib/utils/validateObjectWithProps.js","../node_modules/stylelint/lib/rules/declaration-colon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-property-unit-allowed-list/index.js","../node_modules/stylelint/lib/utils/isNumbery.js","../node_modules/stylelint/lib/reference/keywords.js","../node_modules/stylelint/lib/reference/units.js","../node_modules/stylelint/lib/utils/isValidFontSize.js","../node_modules/stylelint/lib/utils/isVariable.js","../node_modules/stylelint/lib/utils/findFontFamily.js","../node_modules/stylelint/lib/rules/font-family-name-quotes/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-disallowed-list/index.js","../shim/process.js","../node_modules/picocolors/picocolors.js","../node_modules/postcss/lib/tokenize.js","../node_modules/postcss/lib/terminal-highlight.js","../node_modules/postcss/lib/css-syntax-error.js","../node_modules/postcss/lib/symbols.js","../node_modules/postcss/lib/stringifier.js","../node_modules/postcss/lib/stringify.js","../node_modules/postcss/lib/node.js","../node_modules/postcss/lib/declaration.js","../shim/empty.js","../node_modules/postcss/node_modules/nanoid/non-secure/index.js","../node_modules/postcss/lib/previous-map.js","../node_modules/postcss/lib/input.js","../node_modules/postcss/lib/map-generator.js","../node_modules/postcss/lib/container.js","../node_modules/postcss/lib/document.js","../node_modules/postcss/lib/comment.js","../node_modules/postcss/lib/warn-once.js","../node_modules/postcss/lib/warning.js","../node_modules/postcss/lib/result.js","../node_modules/postcss/lib/at-rule.js","../node_modules/postcss/lib/root.js","../node_modules/postcss/lib/list.js","../node_modules/postcss/lib/rule.js","../node_modules/postcss/lib/parser.js","../node_modules/postcss/lib/parse.js","../node_modules/postcss/lib/lazy-result.js","../node_modules/postcss/lib/no-work-result.js","../node_modules/postcss/lib/processor.js","../node_modules/postcss/lib/fromJSON.js","../node_modules/postcss/lib/postcss.js","../node_modules/postcss/lib/postcss.mjs","../node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.js","../node_modules/stylelint/lib/rules/functionCommaSpaceFix.js","../node_modules/stylelint/lib/rules/functionCommaSpaceChecker.js","../node_modules/stylelint/lib/rules/function-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js","../node_modules/stylelint/lib/rules/function-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/font-weight-notation/index.js","../node_modules/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js","../node_modules/stylelint/lib/rules/function-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/function-comma-space-after/index.js","../node_modules/stylelint/lib/reference/functions.js","../node_modules/stylelint/lib/rules/function-name-case/index.js","../node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.js","../node_modules/stylelint/node_modules/balanced-match/index.js","../node_modules/stylelint/lib/utils/functionArgumentsSearch.js","../node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js","../node_modules/stylelint/lib/rules/function-comma-space-before/index.js","../node_modules/stylelint/lib/rules/function-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-disallowed-list/index.js","../node_modules/stylelint/lib/rules/function-parentheses-newline-inside/index.js","../node_modules/stylelint/lib/rules/function-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomFunction.js","../node_modules/stylelint/lib/utils/isStandardSyntaxUrl.js","../node_modules/stylelint/lib/rules/function-url-quotes/index.js","../node_modules/stylelint/lib/utils/getSchemeFromUrl.js","../node_modules/stylelint/lib/rules/function-url-scheme-disallowed-list/index.js","../node_modules/stylelint/lib/rules/function-url-no-scheme-relative/index.js","../node_modules/stylelint/lib/rules/function-url-scheme-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-whitespace-after/index.js","../node_modules/stylelint/lib/rules/keyframes-name-pattern/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxKeyframesName.js","../node_modules/stylelint/lib/utils/isStandardSyntaxSelector.js","../node_modules/stylelint/lib/rules/keyframe-block-no-duplicate-selectors/index.js","../node_modules/stylelint/lib/utils/getAtRuleParams.js","../node_modules/stylelint/lib/utils/setAtRuleParams.js","../node_modules/stylelint/lib/rules/length-zero-no-unit/index.js","../node_modules/stylelint/lib/utils/isMathFunction.js","../node_modules/stylelint/lib/rules/import-notation/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxRule.js","../node_modules/postcss-selector-parser/dist/util/unesc.js","../node_modules/postcss-selector-parser/dist/util/getProp.js","../node_modules/postcss-selector-parser/dist/util/ensureObject.js","../node_modules/postcss-selector-parser/dist/util/stripComments.js","../node_modules/postcss-selector-parser/dist/util/index.js","../node_modules/postcss-selector-parser/dist/selectors/node.js","../node_modules/postcss-selector-parser/dist/selectors/types.js","../node_modules/postcss-selector-parser/dist/selectors/container.js","../node_modules/postcss-selector-parser/dist/selectors/root.js","../node_modules/postcss-selector-parser/dist/selectors/selector.js","../node_modules/cssesc/cssesc.js","../node_modules/postcss-selector-parser/dist/selectors/className.js","../node_modules/postcss-selector-parser/dist/selectors/comment.js","../node_modules/postcss-selector-parser/dist/selectors/id.js","../node_modules/postcss-selector-parser/dist/selectors/namespace.js","../node_modules/postcss-selector-parser/dist/selectors/tag.js","../node_modules/postcss-selector-parser/dist/selectors/string.js","../node_modules/postcss-selector-parser/dist/selectors/pseudo.js","../node_modules/util-deprecate/node.js","../shim/util.js","../node_modules/postcss-selector-parser/dist/selectors/attribute.js","../node_modules/postcss-selector-parser/dist/selectors/universal.js","../node_modules/postcss-selector-parser/dist/selectors/combinator.js","../node_modules/postcss-selector-parser/dist/selectors/nesting.js","../node_modules/postcss-selector-parser/dist/sortAscending.js","../node_modules/postcss-selector-parser/dist/tokenTypes.js","../node_modules/postcss-selector-parser/dist/tokenize.js","../node_modules/postcss-selector-parser/dist/parser.js","../node_modules/postcss-selector-parser/dist/processor.js","../node_modules/postcss-selector-parser/dist/selectors/constructors.js","../node_modules/postcss-selector-parser/dist/selectors/guards.js","../node_modules/postcss-selector-parser/dist/selectors/index.js","../node_modules/postcss-selector-parser/dist/index.js","../node_modules/stylelint/lib/rules/max-nesting-depth/index.js","../node_modules/stylelint/lib/rules/max-empty-lines/index.js","../node_modules/stylelint/lib/rules/custom-property-empty-line-before/index.js","../node_modules/stylelint/lib/rules/linebreaks/index.js","../node_modules/stylelint/lib/utils/transformSelector.js","../node_modules/stylelint/lib/rules/keyframe-selector-notation/index.js","../node_modules/stylelint/lib/utils/isCustomMediaQuery.js","../node_modules/stylelint/lib/utils/isRangeContextMediaFeature.js","../node_modules/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js","../node_modules/postcss-media-query-parser/dist/nodes/Node.js","../node_modules/postcss-media-query-parser/dist/nodes/Container.js","../node_modules/postcss-media-query-parser/dist/parsers.js","../node_modules/postcss-media-query-parser/dist/index.js","../node_modules/stylelint/lib/rules/rangeContextNodeParser.js","../node_modules/stylelint/lib/rules/media-feature-name-allowed-list/index.js","../node_modules/stylelint/lib/rules/max-line-length/index.js","../node_modules/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-before/index.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-after/index.js","../node_modules/stylelint/lib/rules/media-feature-name-case/index.js","../node_modules/stylelint/lib/reference/mediaFeatures.js","../node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/media-feature-name-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/findMediaOperator.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-after/index.js","../node_modules/stylelint/lib/rules/function-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-after/index.js","../node_modules/postcss-resolve-nested-selector/index.js","../node_modules/@csstools/selector-specificity/dist/index.mjs","../node_modules/stylelint/lib/utils/findAtRuleContext.js","../node_modules/stylelint/lib/reference/selectors.js","../node_modules/stylelint/lib/utils/nodeContextLookup.js","../node_modules/stylelint/lib/utils/parseSelector.js","../node_modules/stylelint/lib/rules/no-descending-specificity/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/findNotContiguousOrRectangular.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/index.js","../node_modules/stylelint/lib/rules/no-extra-semicolons/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-before/index.js","../node_modules/stylelint/lib/utils/isKeyframeRule.js","../node_modules/stylelint/lib/rules/no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/no-invalid-double-slash-comments/index.js","../node_modules/stylelint/lib/rules/no-empty-first-line/index.js","../node_modules/stylelint/lib/rules/no-missing-end-of-source-newline/index.js","../node_modules/stylelint/lib/rules/no-empty-source/index.js","../node_modules/stylelint/lib/rules/no-invalid-position-at-import-rule/index.js","../node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.js","../node_modules/stylelint/lib/utils/isOnlyWhitespace.js","../node_modules/stylelint/lib/rules/no-eol-whitespace/index.js","../node_modules/stylelint/lib/rules/no-unknown-animations/index.js","../node_modules/stylelint/lib/utils/findAnimationName.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-before/index.js","../node_modules/stylelint/lib/rules/property-allowed-list/index.js","../node_modules/known-css-properties/index.js","../node_modules/stylelint/lib/rules/property-no-unknown/index.js","../node_modules/stylelint/lib/rules/number-max-precision/index.js","../node_modules/stylelint/lib/rules/rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isAfterSingleLineComment.js","../node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-after/index.js","../node_modules/stylelint/lib/rules/property-case/index.js","../node_modules/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js","../node_modules/stylelint/lib/rules/number-no-trailing-zeros/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxCombinator.js","../node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.js","../node_modules/stylelint/lib/utils/isKeyframeSelector.js","../node_modules/stylelint/lib/rules/selector-class-pattern/index.js","../node_modules/stylelint/lib/rules/number-leading-zero/index.js","../node_modules/stylelint/lib/rules/rule-selector-property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/keyframe-declaration-no-important/index.js","../node_modules/stylelint/lib/rules/no-irregular-whitespace/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-before/index.js","../node_modules/stylelint/lib/rules/selector-attribute-quotes/index.js","../node_modules/stylelint/lib/utils/getRuleSelector.js","../node_modules/stylelint/lib/rules/selectorCombinatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-combinator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/comment-empty-line-before/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-combinator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js","../node_modules/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-id-pattern/index.js","../node_modules/stylelint/lib/utils/isContextFunctionalPseudoClass.js","../node_modules/stylelint/lib/utils/isNonNegativeInteger.js","../node_modules/stylelint/lib/rules/selector-max-attribute/index.js","../node_modules/stylelint/lib/rules/selector-max-combinators/index.js","../node_modules/stylelint/lib/rules/selector-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-max-class/index.js","../node_modules/stylelint/lib/rules/media-feature-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/hue-degree-notation/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.js","../node_modules/stylelint/lib/rules/selector-max-specificity/index.js","../node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-max-pseudo-class/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-disallowed-list/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxTypeSelector.js","../node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.js","../node_modules/stylelint/lib/rules/selector-nested-pattern/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-case/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js","../node_modules/stylelint/lib/rules/selector-type-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomElement.js","../node_modules/stylelint/lib/rules/selector-max-type/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomSelector.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-max-id/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js","../node_modules/stylelint/lib/rules/selector-type-case/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-case/index.js","../node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js","../node_modules/stylelint/lib/rules/selector-not-notation/index.js","../node_modules/stylelint/lib/rules/unicode-bom/index.js","../node_modules/stylelint/lib/rules/string-no-newline/index.js","../node_modules/stylelint/lib/rules/string-quotes/index.js","../node_modules/stylelint/lib/rules/value-keyword-case/index.js","../node_modules/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js","../node_modules/stylelint/lib/utils/isCounterResetCustomIdentValue.js","../node_modules/stylelint/lib/rules/time-min-milliseconds/index.js","../node_modules/stylelint/lib/rules/unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/valueListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/value-list-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-combinator-space-before/index.js","../node_modules/stylelint/lib/rules/unit-case/index.js","../node_modules/stylelint/lib/rules/property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/indentation/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/unit-no-unknown/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-max-universal/index.js","../node_modules/stylelint/lib/rules/index.js","../node_modules/stylelint/lib/normalizeRuleSettings.js","../node_modules/stylelint/lib/createPlugin.js","../node_modules/stylelint/lib/utils/getModulePath.js","../node_modules/globjoin/index.js","../node_modules/stylelint/lib/normalizeAllRuleSettings.js","../node_modules/stylelint/lib/augmentConfig.js","../node_modules/stylelint/lib/createStylelint.js","../node_modules/ansi-regex/index.js","../node_modules/strip-ansi/index.js","../node_modules/is-fullwidth-code-point/index.js","../node_modules/string-width/index.js","../node_modules/emoji-regex/index.js","../node_modules/stylelint/lib/utils/pluralize.js","../node_modules/supports-hyperlinks/node_modules/has-flag/index.js","../node_modules/supports-hyperlinks/node_modules/supports-color/index.js","../shim/os.js","../node_modules/supports-hyperlinks/index.js","../shim/tty.js","../node_modules/stylelint/lib/formatters/terminalLink.js","../node_modules/stylelint/lib/formatters/stringFormatter.js","../node_modules/stylelint/lib/formatters/verboseFormatter.js","../node_modules/stylelint/lib/formatters/index.js","../node_modules/stylelint/lib/formatters/compactFormatter.js","../node_modules/stylelint/lib/formatters/githubFormatter.js","../node_modules/stylelint/lib/formatters/jsonFormatter.js","../node_modules/stylelint/lib/formatters/tapFormatter.js","../node_modules/stylelint/lib/formatters/unixFormatter.js","../shim/getConfigForFile.js","../node_modules/postcss-safe-parser/lib/safe-parser.js","../node_modules/postcss-safe-parser/lib/safe-parse.js","../node_modules/stylelint/lib/getPostcssResult.js","../shim/isPathIgnored.js","../node_modules/stylelint/lib/utils/isPathNotFoundError.js","../node_modules/stylelint/lib/assignDisabledRanges.js","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/stylelint/lib/reportUnknownRuleNames.js","../node_modules/stylelint/lib/lintSource.js","../node_modules/stylelint/lib/lintPostcssResult.js","../node_modules/stylelint/lib/postcssPlugin.js","../node_modules/stylelint/lib/resolveConfig.js","../node_modules/stylelint/lib/createStylelintResult.js","../node_modules/stylelint/lib/createPartialStylelintResult.js","../node_modules/stylelint/lib/utils/filterFilePaths.js","../node_modules/stylelint/lib/utils/noFilesFoundError.js","../node_modules/stylelint/lib/utils/allFilesIgnoredError.js","../node_modules/stylelint/lib/validateDisableSettings.js","../node_modules/stylelint/lib/utils/putIfAbsent.js","../node_modules/stylelint/lib/needlessDisables.js","../node_modules/stylelint/lib/reportDisables.js","../node_modules/stylelint/lib/prepareReturnValue.js","../node_modules/stylelint/lib/invalidScopeDisables.js","../node_modules/stylelint/lib/descriptionlessDisables.js","../node_modules/stylelint/lib/standalone.js","../node_modules/stylelint/lib/index.js","../node_modules/stylelint/lib/utils/getFormatterOptionsText.js","../node_modules/normalize-path/index.js","../node_modules/stylelint/lib/utils/checkAgainstRule.js","../node_modules/sugarss/stringifier.js","../node_modules/sugarss/preprocess.js","../node_modules/sugarss/tokenize.js","../node_modules/sugarss/index.js","../node_modules/sugarss/stringify.js","../node_modules/sugarss/parse.js","../node_modules/sugarss/parser.js","../node_modules/sugarss/liner.js","../index.js"],"sourcesContent":["'use strict';\n\n/**\n * Contains helpers for working with vendor prefixes.\n *\n * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2\n *\n * @namespace vendor\n */\nmodule.exports = {\n\t/**\n\t * Returns the vendor prefix extracted from an input string.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} vendor prefix or empty string\n\t *\n\t * @example\n\t * vendor.prefix('-moz-tab-size') //=> '-moz-'\n\t * vendor.prefix('tab-size')      //=> ''\n\t */\n\tprefix(prop) {\n\t\tconst match = prop.match(/^(-\\w+-)/);\n\n\t\tif (match) {\n\t\t\treturn match[0] || '';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\t/**\n\t * Returns the input string stripped of its vendor prefix.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} String name without vendor prefixes.\n\t *\n\t * @example\n\t * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n\t */\n\tunprefixed(prop) {\n\t\treturn prop.replace(/^-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst vendor = require('./vendor');\n\n/**\n * Extract each list using the internal API of Autoprefixer 10.2.5.\n *\n * @see https://github.com/postcss/autoprefixer/tree/10.2.5\n *\n * @example\n * const autoprefixer = require('autoprefixer');\n * const Browsers = require('autoprefixer/lib/browsers');\n * const Prefixes = require('autoprefixer/lib/prefixes');\n * const utils = require('autoprefixer/lib/utils');\n *\n * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));\n */\n\n/**\n * @example\n * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));\n */\nconst AT_RULES = new Set([\n\t'@-khtml-keyframes',\n\t'@-moz-keyframes',\n\t'@-ms-keyframes',\n\t'@-ms-viewport',\n\t'@-o-keyframes',\n\t'@-o-viewport',\n\t'@-webkit-keyframes',\n\t'@resolution',\n]);\n\n/**\n * @example\n * prefixes.remove.selectors.map((s) => s.prefixed);\n */\nconst SELECTORS = new Set([\n\t':-moz-any-link',\n\t':-moz-full-screen',\n\t':-moz-placeholder',\n\t':-moz-placeholder-shown',\n\t':-moz-read-only',\n\t':-moz-read-write',\n\t':-ms-fullscreen',\n\t':-ms-input-placeholder',\n\t':-webkit-any-link',\n\t':-webkit-full-screen',\n\t'::-moz-placeholder',\n\t'::-moz-selection',\n\t'::-ms-input-placeholder',\n\t'::-webkit-backdrop',\n\t'::-webkit-input-placeholder',\n]);\n\n/**\n * @example\n * Object.entries(autoprefixer.data.prefixes)\n *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))\n *   .map(([key, value]) => key);\n */\nconst PROPERTIES = new Set([\n\t'align-content',\n\t'align-items',\n\t'align-self',\n\t'animation',\n\t'animation-delay',\n\t'animation-direction',\n\t'animation-duration',\n\t'animation-fill-mode',\n\t'animation-iteration-count',\n\t'animation-name',\n\t'animation-play-state',\n\t'animation-timing-function',\n\t'appearance',\n\t'backdrop-filter',\n\t'backface-visibility',\n\t'background-clip',\n\t'background-origin',\n\t'background-size',\n\t'border-block-end',\n\t'border-block-start',\n\t'border-bottom-left-radius',\n\t'border-bottom-right-radius',\n\t'border-image',\n\t'border-inline-end',\n\t'border-inline-start',\n\t'border-radius',\n\t'border-top-left-radius',\n\t'border-top-right-radius',\n\t'box-decoration-break',\n\t'box-shadow',\n\t'box-sizing',\n\t'break-after',\n\t'break-before',\n\t'break-inside',\n\t'clip-path',\n\t'color-adjust',\n\t'column-count',\n\t'column-fill',\n\t'column-gap',\n\t'column-rule',\n\t'column-rule-color',\n\t'column-rule-style',\n\t'column-rule-width',\n\t'column-span',\n\t'column-width',\n\t'columns',\n\t'filter',\n\t'flex',\n\t'flex-basis',\n\t'flex-direction',\n\t'flex-flow',\n\t'flex-grow',\n\t'flex-shrink',\n\t'flex-wrap',\n\t'flow-from',\n\t'flow-into',\n\t'font-feature-settings',\n\t'font-kerning',\n\t'font-language-override',\n\t'font-variant-ligatures',\n\t'grid-area',\n\t'grid-column',\n\t'grid-column-align',\n\t'grid-column-end',\n\t'grid-column-start',\n\t'grid-row',\n\t'grid-row-align',\n\t'grid-row-end',\n\t'grid-row-start',\n\t'grid-template',\n\t'grid-template-areas',\n\t'grid-template-columns',\n\t'grid-template-rows',\n\t'hyphens',\n\t'image-rendering',\n\t'justify-content',\n\t'margin-block-end',\n\t'margin-block-start',\n\t'margin-inline-end',\n\t'margin-inline-start',\n\t'mask',\n\t'mask-border',\n\t'mask-border-outset',\n\t'mask-border-repeat',\n\t'mask-border-slice',\n\t'mask-border-source',\n\t'mask-border-width',\n\t'mask-clip',\n\t'mask-composite',\n\t'mask-image',\n\t'mask-origin',\n\t'mask-position',\n\t'mask-repeat',\n\t'mask-size',\n\t'object-fit',\n\t'object-position',\n\t'order',\n\t'overscroll-behavior',\n\t'padding-block-end',\n\t'padding-block-start',\n\t'padding-inline-end',\n\t'padding-inline-start',\n\t'perspective',\n\t'perspective-origin',\n\t'place-self',\n\t'region-fragment',\n\t'scroll-snap-coordinate',\n\t'scroll-snap-destination',\n\t'scroll-snap-points-x',\n\t'scroll-snap-points-y',\n\t'scroll-snap-type',\n\t'shape-image-threshold',\n\t'shape-margin',\n\t'shape-outside',\n\t'tab-size',\n\t'text-align-last',\n\t'text-decoration',\n\t'text-decoration-color',\n\t'text-decoration-line',\n\t'text-decoration-skip',\n\t'text-decoration-skip-ink',\n\t'text-decoration-style',\n\t'text-emphasis',\n\t'text-emphasis-color',\n\t'text-emphasis-position',\n\t'text-emphasis-style',\n\t'text-orientation',\n\t'text-overflow',\n\t'text-size-adjust',\n\t'text-spacing',\n\t'touch-action',\n\t'transform',\n\t'transform-origin',\n\t'transform-style',\n\t'transition',\n\t'transition-delay',\n\t'transition-duration',\n\t'transition-property',\n\t'transition-timing-function',\n\t'user-select',\n\t'writing-mode',\n]);\n\n/**\n * @example\n * Object.values(prefixes.remove)\n *   .filter((p) => Array.isArray(p.values))\n *   .flatMap((p) => p.values)\n *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'\n *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only\n *\n * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013\n */\nconst PROPERTY_VALUES = new Set([\n\t'-moz-available',\n\t'-moz-box',\n\t'-moz-calc',\n\t'-moz-crisp-edges',\n\t'-moz-element',\n\t'-moz-fit-content',\n\t'-moz-grab',\n\t'-moz-grabbing',\n\t'-moz-inline-box',\n\t'-moz-isolate',\n\t'-moz-isolate-override',\n\t'-moz-linear-gradient',\n\t'-moz-max-content',\n\t'-moz-min-content',\n\t'-moz-plaintext',\n\t'-moz-radial-gradient',\n\t'-moz-repeating-linear-gradient',\n\t'-moz-repeating-radial-gradient',\n\t'-moz-zoom-in',\n\t'-moz-zoom-out',\n\t'-ms-flexbox',\n\t'-ms-grid',\n\t'-ms-inline-flexbox',\n\t'-ms-inline-grid',\n\t'-ms-linear-gradient',\n\t'-ms-radial-gradient',\n\t'-ms-repeating-linear-gradient',\n\t'-ms-repeating-radial-gradient',\n\t'-o-linear-gradient',\n\t'-o-pixelated',\n\t'-o-radial-gradient',\n\t'-o-repeating-linear-gradient',\n\t'-o-repeating-radial-gradient',\n\t'-webkit-box',\n\t'-webkit-calc',\n\t'-webkit-cross-fade',\n\t'-webkit-fill-available',\n\t'-webkit-filter',\n\t'-webkit-fit-content',\n\t'-webkit-flex',\n\t'-webkit-grab',\n\t'-webkit-grabbing',\n\t'-webkit-image-set',\n\t'-webkit-inline-box',\n\t'-webkit-inline-flex',\n\t'-webkit-isolate',\n\t'-webkit-linear-gradient',\n\t'-webkit-max-content',\n\t'-webkit-min-content',\n\t'-webkit-optimize-contrast',\n\t'-webkit-radial-gradient',\n\t'-webkit-repeating-linear-gradient',\n\t'-webkit-repeating-radial-gradient',\n\t'-webkit-sticky',\n\t'-webkit-zoom-in',\n\t'-webkit-zoom-out',\n]);\n\n/**\n * Most identifier types have to be looked up in a unique way,\n * so we're exposing special functions for each.\n */\nmodule.exports = {\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tatRuleName(identifier) {\n\t\treturn AT_RULES.has(`@${identifier.toLowerCase()}`);\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tselector(identifier) {\n\t\treturn SELECTORS.has(identifier.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tmediaFeatureName(identifier) {\n\t\treturn identifier.toLowerCase().includes('device-pixel-ratio');\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tproperty(identifier) {\n\t\tconst ident = identifier.toLowerCase();\n\n\t\t// HACK: `interpolation-mode` does not exist. This is an IE extension for `image-rendering`.\n\t\t//       See <https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#examples>\n\t\tif (ident === '-ms-interpolation-mode') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (vendor.prefix(ident).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn PROPERTIES.has(vendor.unprefixed(ident));\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {boolean}\n\t */\n\tpropertyValue(value) {\n\t\treturn PROPERTY_VALUES.has(value.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {string}\n\t */\n\tunprefix(value) {\n\t\treturn value.replace(/-\\w+-/, '');\n\t},\n};\n","'use strict';\n\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\nmodule.exports = function isStandardSyntaxAtRule(atRule) {\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\nmodule.exports = function report(problem) {\n\tconst { ruleName, result, message, messageArgs, line, node, index, endIndex, word } = problem;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\tconst { start } = (node && node.rangeBy({ index, endIndex })) || {};\n\n\t// If a line is not passed, use the node.rangeBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || (start && start.line);\n\n\tif (!startLine) {\n\t\tthrow new Error('You must pass either a node or a line number');\n\t}\n\n\tconst { ignoreDisables } = result.stylelint.config || {};\n\n\tif (result.stylelint.disabledRanges) {\n\t\tconst ranges =\n\t\t\tresult.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the problem is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\t// Collect disabled warnings\n\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\tconst disabledWarnings =\n\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\trule: ruleName,\n\t\t\t\t\tline: startLine,\n\t\t\t\t});\n\n\t\t\t\tif (!ignoreDisables) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\tif (!result.stylelint.stylelintWarning && severity === 'warning') {\n\t\tresult.stylelint.stylelintWarning = true;\n\t}\n\n\t/** @type {import('stylelint').WarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (problem.start) {\n\t\twarningProperties.start = problem.start;\n\t} else if (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (problem.end) {\n\t\twarningProperties.end = problem.end;\n\t} else if (endIndex) {\n\t\twarningProperties.endIndex = endIndex;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst { customMessages } = result.stylelint;\n\tconst warningMessage = buildWarningMessage(\n\t\t(customMessages && customMessages[ruleName]) || message,\n\t\tmessageArgs,\n\t);\n\n\tresult.warn(warningMessage, warningProperties);\n};\n\n/**\n * @param {import('stylelint').RuleMessage} message\n * @param {import('stylelint').Problem['messageArgs']} messageArgs\n * @returns {string}\n */\nfunction buildWarningMessage(message, messageArgs) {\n\tconst args = messageArgs || [];\n\n\tif (typeof message === 'string') {\n\t\treturn printfLike(message, ...args);\n\t}\n\n\treturn message(...args);\n}\n\n/**\n * @param {string} format\n * @param {Array<unknown>} args\n * @returns {string}\n */\nfunction printfLike(format, ...args) {\n\treturn args.reduce((/** @type {string} */ result, arg) => {\n\t\treturn result.replace(/%[ds]/, String(arg));\n\t}, format);\n}\n","'use strict';\n\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\nfunction ruleMessages(ruleName, messages) {\n\t/** @typedef {keyof T} K */\n\tconst newMessages = /** @type {R} */ ({});\n\n\tfor (const [messageId, messageText] of /** @type {[K, T[K]][]} */ (Object.entries(messages))) {\n\t\tif (typeof messageText === 'string') {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (`${messageText} (${ruleName})`);\n\t\t} else {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (\n\t\t\t\t(...args) => `${messageText(...args)} (${ruleName})`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn newMessages;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.ruleMessages} */ (ruleMessages);\n","'use strict';\n\n/**\n * Tests if two arrays are equal.\n *\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nmodule.exports = function arrayEqual(a, b) {\n\tif (!Array.isArray(a) || !Array.isArray(b)) return false;\n\n\tif (a.length !== b.length) return false;\n\n\treturn a.every((elem, index) => elem === b[index]);\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","'use strict';\n\nconst { isPlainObject: _isPlainObject } = require('is-plain-object');\n\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\nfunction isBoolean(value) {\n\treturn typeof value === 'boolean' || value instanceof Boolean;\n}\n\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\nfunction isFunction(value) {\n\treturn typeof value === 'function' || value instanceof Function;\n}\n\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\nfunction isNullish(value) {\n\treturn value == null;\n}\n\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\nfunction isNumber(value) {\n\treturn typeof value === 'number' || value instanceof Number;\n}\n\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\nfunction isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\nfunction isString(value) {\n\treturn typeof value === 'string' || value instanceof String;\n}\n\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\nfunction isPlainObject(value) {\n\treturn _isPlainObject(value);\n}\n\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\nfunction assert(value, message = undefined) {\n\tif (message) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value, message);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value);\n\t}\n}\n\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\nfunction assertFunction(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\nfunction assertNumber(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\nfunction assertString(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n\tisBoolean,\n\tisFunction,\n\tisNullish,\n\tisNumber,\n\tisRegExp,\n\tisString,\n\tisPlainObject,\n\n\tassert,\n\tassertFunction,\n\tassertNumber,\n\tassertString,\n};\n","'use strict';\n\nconst arrayEqual = require('./arrayEqual');\nconst { isPlainObject } = require('./validateTypes');\n\nconst IGNORED_OPTIONS = new Set(['severity', 'message', 'reportDisables', 'disableFix']);\n\n/** @typedef {import('stylelint').RuleOptions} RuleOptions */\n/** @typedef {import('stylelint').RuleOptionsPossible} Possible */\n/** @typedef {import('stylelint').RuleOptionsPossibleFunc} PossibleFunc */\n\n/**\n * Validate a rule's options.\n *\n * See existing rules for examples.\n *\n * @param {import('stylelint').PostcssResult} result - postcss result\n * @param {string} ruleName\n * @param {...RuleOptions} optionDescriptions - Each optionDescription can\n *   have the following properties:\n *   - `actual` (required): the actual passed option value or object.\n *   - `possible` (required): a schema representation of what values are\n *      valid for those options. `possible` should be an object if the\n *      options are an object, with corresponding keys; if the options are not an\n *      object, `possible` isn't, either. All `possible` value representations\n *      should be **arrays of either values or functions**. Values are === checked\n *      against `actual`. Functions are fed `actual` as an argument and their\n *      return value is interpreted: truthy = valid, falsy = invalid.\n *    - `optional` (optional): If this is `true`, `actual` can be undefined.\n * @return {boolean} Whether or not the options are valid (true = valid)\n */\nfunction validateOptions(result, ruleName, ...optionDescriptions) {\n\tlet noErrors = true;\n\n\tfor (const optionDescription of optionDescriptions) {\n\t\tvalidate(optionDescription, ruleName, complain);\n\t}\n\n\t/**\n\t * @param {string} message\n\t */\n\tfunction complain(message) {\n\t\tnoErrors = false;\n\t\tresult.warn(message, {\n\t\t\tstylelintType: 'invalidOption',\n\t\t});\n\t\tresult.stylelint = result.stylelint || {\n\t\t\tdisabledRanges: {},\n\t\t\truleSeverities: {},\n\t\t\tcustomMessages: {},\n\t\t\truleMetadata: {},\n\t\t};\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\treturn noErrors;\n}\n\n/**\n * @param {RuleOptions} opts\n * @param {string} ruleName\n * @param {(message: string) => void} complain\n */\nfunction validate(opts, ruleName, complain) {\n\tconst possible = opts.possible;\n\tconst actual = opts.actual;\n\tconst optional = opts.optional;\n\n\tif (actual === false && !ruleName.startsWith('report')) {\n\t\treturn complain(\n\t\t\t`Invalid option value \"false\" for rule \"${ruleName}\". Are you trying to disable this rule? If so use \"null\" instead`,\n\t\t);\n\t}\n\n\tif (actual === null || arrayEqual(actual, [null])) {\n\t\treturn;\n\t}\n\n\tconst nothingPossible =\n\t\tpossible === undefined || (Array.isArray(possible) && possible.length === 0);\n\n\tif (nothingPossible && actual === true) {\n\t\treturn;\n\t}\n\n\tif (actual === undefined) {\n\t\tif (nothingPossible || optional) {\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Expected option value for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (nothingPossible) {\n\t\tif (optional) {\n\t\t\tcomplain(\n\t\t\t\t`Incorrect configuration for rule \"${ruleName}\". Rule should have \"possible\" values for options validation`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Unexpected option value ${stringify(actual)} for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (typeof possible === 'function') {\n\t\tif (!possible(actual)) {\n\t\t\tcomplain(`Invalid option ${stringify(actual)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If `possible` is an array instead of an object ...\n\tif (Array.isArray(possible)) {\n\t\tfor (const a of [actual].flat()) {\n\t\t\tif (isValid(possible, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid option value ${stringify(a)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If actual is NOT an object ...\n\tif (!isPlainObject(actual) || typeof actual !== 'object' || actual == null) {\n\t\tcomplain(\n\t\t\t`Invalid option value ${stringify(actual)} for rule \"${ruleName}\": should be an object`,\n\t\t);\n\n\t\treturn;\n\t}\n\n\tfor (const [optionName, optionValue] of Object.entries(actual)) {\n\t\tif (IGNORED_OPTIONS.has(optionName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst possibleValue = possible && possible[optionName];\n\n\t\tif (!possibleValue) {\n\t\t\tcomplain(`Invalid option name \"${optionName}\" for rule \"${ruleName}\"`);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const a of [optionValue].flat()) {\n\t\t\tif (isValid(possibleValue, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid value ${stringify(a)} for option \"${optionName}\" of rule \"${ruleName}\"`);\n\t\t}\n\t}\n}\n\n/**\n * @param {Possible | Possible[]} possible\n * @param {unknown} actual\n * @returns {boolean}\n */\nfunction isValid(possible, actual) {\n\tfor (const possibility of [possible].flat()) {\n\t\tif (typeof possibility === 'function' && possibility(actual)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (actual === possibility) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nfunction stringify(value) {\n\tif (typeof value === 'string') {\n\t\treturn `\"${value}\"`;\n\t}\n\n\treturn `\"${JSON.stringify(value)}\"`;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.validateOptions} */ (validateOptions);\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (p) => `Unexpected vendor-prefixed at-rule \"@${p}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!name.startsWith('-')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.atRuleName(name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = isAutoprefixable.unprefix(atRule.name);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tword: `@${name}`,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n","module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n","function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n","var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n","var parse = require(\"./parse\");\nvar walk = require(\"./walk\");\nvar stringify = require(\"./stringify\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = require(\"./unit\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n","'use strict';\n\n/**\n * @param {import('postcss').Declaration} decl\n * @returns {string}\n */\nmodule.exports = function getDeclarationValue(decl) {\n\tconst raws = decl.raws;\n\n\treturn (raws.value && raws.value.raw) || decl.value;\n};\n","'use strict';\n\n/**\n * Compares a string to a second value that, if it fits a certain convention,\n * is converted to a regular expression before the comparison.\n * If it doesn't fit the convention, then two strings are compared.\n *\n * Any strings starting and ending with `/` are interpreted\n * as regular expressions.\n *\n * @param {string | Array<string>} input\n * @param {string | RegExp | Array<string | RegExp>} comparison\n *\n * @returns {false | {match: string, pattern: (string | RegExp), substring: string}}\n */\nmodule.exports = function matchesStringOrRegExp(input, comparison) {\n\tif (!Array.isArray(input)) {\n\t\treturn testAgainstStringOrRegExpOrArray(input, comparison);\n\t}\n\n\tfor (const inputItem of input) {\n\t\tconst testResult = testAgainstStringOrRegExpOrArray(inputItem, comparison);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {string | RegExp | Array<string | RegExp>} comparison\n */\nfunction testAgainstStringOrRegExpOrArray(value, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstStringOrRegExp(value, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstStringOrRegExp(value, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} value\n * @param {string | RegExp} comparison\n */\nfunction testAgainstStringOrRegExp(value, comparison) {\n\t// If it's a RegExp, test directly\n\tif (comparison instanceof RegExp) {\n\t\tconst match = value.match(comparison);\n\n\t\treturn match ? { match: value, pattern: comparison, substring: match[0] || '' } : false;\n\t}\n\n\t// Check if it's RegExp in a string\n\tconst firstComparisonChar = comparison[0];\n\tconst lastComparisonChar = comparison[comparison.length - 1];\n\tconst secondToLastComparisonChar = comparison[comparison.length - 2];\n\n\tconst comparisonIsRegex =\n\t\tfirstComparisonChar === '/' &&\n\t\t(lastComparisonChar === '/' ||\n\t\t\t(secondToLastComparisonChar === '/' && lastComparisonChar === 'i'));\n\n\tconst hasCaseInsensitiveFlag = comparisonIsRegex && lastComparisonChar === 'i';\n\n\t// If so, create a new RegExp from it\n\tif (comparisonIsRegex) {\n\t\tconst valueMatch = hasCaseInsensitiveFlag\n\t\t\t? value.match(new RegExp(comparison.slice(1, -2), 'i'))\n\t\t\t: value.match(new RegExp(comparison.slice(1, -1)));\n\n\t\treturn valueMatch\n\t\t\t? { match: value, pattern: comparison, substring: valueMatch[0] || '' }\n\t\t\t: false;\n\t}\n\n\t// Otherwise, it's a string. Do a strict comparison\n\treturn value === comparison ? { match: value, pattern: comparison, substring: value } : false;\n}\n","'use strict';\n\nconst matchesStringOrRegExp = require('./matchesStringOrRegExp');\n\n/**\n * Check if an options object's propertyName contains a user-defined string or\n * regex that matches the passed in input.\n *\n * @param {{ [x: string]: any; }} options\n * @param {string} propertyName\n * @param {unknown} input\n *\n * @returns {boolean}\n */\nmodule.exports = function optionsMatches(options, propertyName, input) {\n\treturn Boolean(\n\t\toptions &&\n\t\t\toptions[propertyName] &&\n\t\t\ttypeof input === 'string' &&\n\t\t\tmatchesStringOrRegExp(input, options[propertyName]),\n\t);\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'annotation-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (annotation) => `Unexpected unknown annotation \"${annotation}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/annotation-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAnnotations: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tif (decl.important) return;\n\n\t\t\tif (!decl.value.includes('!')) return;\n\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isAnnotation(node)) return;\n\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst tokenValue = value.slice(1);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAnnotations', tokenValue)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: value,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {valueParser.Node} node\n\t\t */\n\t\tfunction isAnnotation(node) {\n\t\t\treturn node.type === 'word' && node.value.startsWith('!');\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${atRule.name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../utils/isStandardSyntaxAtRule');\nconst report = require('../utils/report');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void, errTarget: string }) => void,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule) => void) | null,\n * }} options\n */\nmodule.exports = function atRuleNameSpaceChecker(options) {\n\toptions.root.walkAtRules((atRule) => {\n\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckColon(\n\t\t\t`@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`,\n\t\t\tatRule.name.length,\n\t\t\tatRule,\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\toptions.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (m) => {\n\t\t\t\tif (options.fix) {\n\t\t\t\t\toptions.fix(node);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: m,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: options.result,\n\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t\terrTarget: `@${node.name}`,\n\t\t});\n\t}\n};\n","'use strict';\n\n/** @typedef {import('stylelint').ConfigurationError} ConfigurationError */\n\n/**\n * Create configurationError from text and set CLI exit code\n * @param {string} text\n * @returns {ConfigurationError}\n */\nmodule.exports = function configurationError(text) {\n\tconst err = /** @type {ConfigurationError} */ (new Error(text));\n\n\terr.code = 78;\n\n\treturn err;\n};\n","'use strict';\n\n/**\n * Check if a string is a single line (i.e. does not contain\n * any newline characters).\n *\n * @param {string} input\n * @return {boolean}\n */\nmodule.exports = function isSingleLineString(input) {\n\treturn !/[\\n\\r]/.test(input);\n};\n","'use strict';\n\n/**\n * Check if a character is whitespace.\n *\n * @param {string} char\n * @returns {boolean}\n */\nmodule.exports = function isWhitespace(char) {\n\treturn [' ', '\\n', '\\t', '\\r', '\\f'].includes(char);\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst isSingleLineString = require('./isSingleLineString');\nconst isWhitespace = require('./isWhitespace');\nconst { assertFunction, isNullish } = require('./validateTypes');\n\n/**\n * @typedef {(message: string) => string} MessageFunction\n */\n\n/**\n * @typedef {Object} Messages\n * @property {MessageFunction} [expectedBefore]\n * @property {MessageFunction} [rejectedBefore]\n * @property {MessageFunction} [expectedAfter]\n * @property {MessageFunction} [rejectedAfter]\n * @property {MessageFunction} [expectedBeforeSingleLine]\n * @property {MessageFunction} [rejectedBeforeSingleLine]\n * @property {MessageFunction} [expectedBeforeMultiLine]\n * @property {MessageFunction} [rejectedBeforeMultiLine]\n * @property {MessageFunction} [expectedAfterSingleLine]\n * @property {MessageFunction} [rejectedAfterSingleLine]\n * @property {MessageFunction} [expectedAfterMultiLine]\n * @property {MessageFunction} [rejectedAfterMultiLine]\n */\n\n/**\n * @typedef {Object} WhitespaceCheckerArgs\n * @property {string} source - The source string\n * @property {number} index - The index of the character to check before\n * @property {(message: string) => void} err - If a problem is found, this callback\n *   will be invoked with the relevant warning message.\n *   Typically this callback will report() the problem.\n * @property {string} [errTarget] - If a problem is found, this string\n *   will be sent to the relevant warning message.\n * @property {string} [lineCheckStr] - Single- and multi-line checkers\n *   will use this string to determine whether they should proceed,\n *   i.e. if this string is one line only, single-line checkers will check,\n *   multi-line checkers will ignore.\n *   If none is passed, they will use `source`.\n * @property {boolean} [onlyOneChar=false] - Only check *one* character before.\n *   By default, \"always-*\" checks will look for the `targetWhitespace` one\n *   before and then ensure there is no whitespace two before. This option\n *   bypasses that second check.\n * @property {boolean} [allowIndentation=false] - Allow arbitrary indentation\n *   between the `targetWhitespace` (almost definitely a newline) and the `index`.\n *   With this option, the checker will see if a newline *begins* the whitespace before\n *   the `index`.\n */\n\n/**\n * @typedef {(args: WhitespaceCheckerArgs) => void} WhitespaceChecker\n */\n\n/**\n * @typedef {{\n *   before: WhitespaceChecker,\n *   beforeAllowingIndentation: WhitespaceChecker,\n *   after: WhitespaceChecker,\n *   afterOneOnly: WhitespaceChecker,\n * }} WhitespaceCheckers\n */\n\n/**\n * Create a whitespaceChecker, which exposes the following functions:\n * - `before()`\n * - `beforeAllowingIndentation()`\n * - `after()`\n * - `afterOneOnly()`\n *\n * @param {\"space\" | \"newline\"} targetWhitespace - This is a keyword instead\n *   of the actual character (e.g. \" \") in order to accommodate\n *   different styles of newline (\"\\n\" vs \"\\r\\n\")\n * @param {\"always\" | \"never\" | \"always-single-line\" | \"always-multi-line\" | \"never-single-line\" | \"never-multi-line\"} expectation\n * @param {Messages} messages - An object of message functions;\n *   calling `before*()` or `after*()` and the `expectation` that is passed\n *   determines which message functions are required\n *\n * @returns {WhitespaceCheckers} The checker, with its exposed checking functions\n */\nmodule.exports = function whitespaceChecker(targetWhitespace, expectation, messages) {\n\t// Keep track of active arguments in order to avoid passing\n\t// too much stuff around, making signatures long and confusing.\n\t// This variable gets reset anytime a checking function is called.\n\t/** @type {WhitespaceCheckerArgs} */\n\tlet activeArgs;\n\n\t/**\n\t * Check for whitespace *before* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction before({\n\t\tsource,\n\t\tindex,\n\t\terr,\n\t\terrTarget,\n\t\tlineCheckStr,\n\t\tonlyOneChar = false,\n\t\tallowIndentation = false,\n\t}) {\n\t\tactiveArgs = {\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr,\n\t\t\terrTarget,\n\t\t\tonlyOneChar,\n\t\t\tallowIndentation,\n\t\t};\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * Check for whitespace *after* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction after({ source, index, err, errTarget, lineCheckStr, onlyOneChar = false }) {\n\t\tactiveArgs = { source, index, err, errTarget, onlyOneChar };\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction beforeAllowingIndentation(obj) {\n\t\tbefore({ ...obj, allowIndentation: true });\n\t}\n\n\tfunction expectBefore(messageFunc = messages.expectedBefore) {\n\t\tif (activeArgs.allowIndentation) {\n\t\t\texpectBeforeAllowingIndentation(messageFunc);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst _activeArgs = activeArgs;\n\t\tconst source = _activeArgs.source;\n\t\tconst index = _activeArgs.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\t\tconst twoCharsBefore = source[index - 2];\n\n\t\tif (isNullish(oneCharBefore)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharBefore === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsBefore) || !isWhitespace(twoCharsBefore))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction expectBeforeAllowingIndentation(messageFunc = messages.expectedBefore) {\n\t\tconst _activeArgs2 = activeArgs;\n\t\tconst source = _activeArgs2.source;\n\t\tconst index = _activeArgs2.index;\n\t\tconst err = _activeArgs2.err;\n\n\t\tconst expectedChar = targetWhitespace === 'newline' ? '\\n' : undefined;\n\t\tlet i = index - 1;\n\n\t\twhile (source[i] !== expectedChar) {\n\t\t\tif (source[i] === '\\t' || source[i] === ' ') {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tassertFunction(messageFunc);\n\t\t\terr(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction rejectBefore(messageFunc = messages.rejectedBefore) {\n\t\tconst _activeArgs3 = activeArgs;\n\t\tconst source = _activeArgs3.source;\n\t\tconst index = _activeArgs3.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\n\t\tif (!isNullish(oneCharBefore) && isWhitespace(oneCharBefore)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction afterOneOnly(obj) {\n\t\tafter({ ...obj, onlyOneChar: true });\n\t}\n\n\tfunction expectAfter(messageFunc = messages.expectedAfter) {\n\t\tconst _activeArgs4 = activeArgs;\n\t\tconst source = _activeArgs4.source;\n\t\tconst index = _activeArgs4.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\t\tconst twoCharsAfter = source[index + 2];\n\t\tconst threeCharsAfter = source[index + 3];\n\n\t\tif (isNullish(oneCharAfter)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (targetWhitespace === 'newline') {\n\t\t\t// If index is followed by a Windows CR-LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\r' &&\n\t\t\t\ttwoCharsAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(threeCharsAfter) || !isWhitespace(threeCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If index is followed by a Unix LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharAfter === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction rejectAfter(messageFunc = messages.rejectedAfter) {\n\t\tconst _activeArgs5 = activeArgs;\n\t\tconst source = _activeArgs5.source;\n\t\tconst index = _activeArgs5.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\n\t\tif (!isNullish(oneCharAfter) && isWhitespace(oneCharAfter)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\treturn {\n\t\tbefore,\n\t\tbeforeAllowingIndentation,\n\t\tafter,\n\t\tafterOneOnly,\n\t};\n};\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected newline after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Get the index of a declaration's value\n *\n * @param {import('postcss').Declaration} decl\n * @returns {number}\n */\nmodule.exports = function declarationValueIndex(decl) {\n\tconst raws = decl.raws;\n\n\treturn [\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.prefix,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t(raws.prop && raws.prop.raw) || decl.prop,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.suffix,\n\t\traws.between || ':',\n\t\t// @ts-expect-error -- TS2339: Property 'prefix' does not exist on type '{ value: string; raw: string; }'.\n\t\traws.value && raws.value.prefix,\n\t].reduce((count, str) => {\n\t\tif (str) {\n\t\t\treturn count + str.length;\n\t\t}\n\n\t\treturn count;\n\t}, 0);\n};\n","'use strict';\n\n/**\n * Check whether a string has less interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has less interpolation\n */\nmodule.exports = function hasLessInterpolation(string) {\n\treturn /@\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has postcss-simple-vars interpolation\n *\n * @param {string} string\n */\nmodule.exports = function hasPsvInterpolation(string) {\n\treturn /\\$\\(.+?\\)/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has scss interpolation\n *\n * @param {string} string\n */\nmodule.exports = function hasScssInterpolation(string) {\n\treturn /#\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has JS template literal interpolation or HTML-like template\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has template literal interpolation\n */\nmodule.exports = function hasTplInterpolation(string) {\n\treturn /\\{.+?\\}/.test(string);\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a string has interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has interpolation\n */\nmodule.exports = function hasInterpolation(string) {\n\t// SCSS or Less interpolation\n\tif (\n\t\thasLessInterpolation(string) ||\n\t\thasScssInterpolation(string) ||\n\t\thasTplInterpolation(string) ||\n\t\thasPsvInterpolation(string)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a value is standard\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxValue(value) {\n\tlet normalizedValue = value;\n\n\t// Ignore operators before variables (example -$variable)\n\tif (/^[-+*/]/.test(value.charAt(0))) {\n\t\tnormalizedValue = normalizedValue.slice(1);\n\t}\n\n\t// SCSS variable (example $variable)\n\tif (normalizedValue.startsWith('$')) {\n\t\treturn false;\n\t}\n\n\t// SCSS namespace (example namespace.$variable)\n\tif (/^.+\\.\\$/.test(value)) {\n\t\treturn false;\n\t}\n\n\t// Less variable\n\tif (normalizedValue.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(normalizedValue)) {\n\t\treturn false;\n\t}\n\n\t// WebExtension replacement keyword used by Chrome/Firefox\n\t// more information: https://developer.chrome.com/extensions/i18n\n\t// and https://github.com/stylelint/stylelint/issues/4707\n\tif (/__MSG_\\S+__/.test(value)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/**\n * @param {Declaration} decl\n * @param {string} value\n * @returns {Declaration} The declaration that was passed in.\n */\nmodule.exports = function setDeclarationValue(decl, value) {\n\tconst raws = decl.raws;\n\n\tif (raws.value) {\n\t\traws.value.raw = value;\n\t} else {\n\t\tdecl.value = value;\n\t}\n\n\treturn decl;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'alpha-value-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/alpha-value-notation',\n\tfixable: true,\n};\n\nconst ALPHA_PROPS = new Set([\n\t'opacity',\n\t'shape-image-threshold',\n\t// SVG properties\n\t'fill-opacity',\n\t'flood-opacity',\n\t'stop-opacity',\n\t'stroke-opacity',\n]);\nconst ALPHA_FUNCS = new Set(['hsl', 'hsla', 'hwb', 'lab', 'lch', 'rgb', 'rgba']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['number', 'percentage'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texceptProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tnumber: {\n\t\t\t\texpFunc: isNumber,\n\t\t\t\tfixFunc: asNumber,\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: isPercentage,\n\t\t\t\tfixFunc: asPercentage,\n\t\t\t},\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\t/** @type {import('postcss-value-parser').Node | undefined} */\n\t\t\t\tlet alpha;\n\n\t\t\t\tif (ALPHA_PROPS.has(decl.prop.toLowerCase())) {\n\t\t\t\t\talpha = findAlphaInValue(node);\n\t\t\t\t} else {\n\t\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\t\tif (!ALPHA_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\t\talpha = findAlphaInFunction(node);\n\t\t\t\t}\n\n\t\t\t\tif (!alpha) return;\n\n\t\t\t\tconst { value } = alpha;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isNumber(value) && !isPercentage(value)) return;\n\n\t\t\t\t/** @type {'number' | 'percentage'} */\n\t\t\t\tlet expectation = primary;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'exceptProperties', decl.prop)) {\n\t\t\t\t\tif (expectation === 'number') {\n\t\t\t\t\t\texpectation = 'percentage';\n\t\t\t\t\t} else if (expectation === 'percentage') {\n\t\t\t\t\t\texpectation = 'number';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (optionFuncs[expectation].expFunc(value)) return;\n\n\t\t\t\tconst fixed = optionFuncs[expectation].fixFunc(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\talpha.value = String(fixed);\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + alpha.sourceIndex;\n\t\t\t\tconst endIndex = index + alpha.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asPercentage(value) {\n\tconst number = Number(value);\n\n\treturn `${Number((number * 100).toPrecision(3))}%`;\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tassert(dimension);\n\n\tconst number = Number(dimension.number);\n\n\treturn Number((number / 100).toPrecision(3)).toString();\n}\n\n/**\n * @template {import('postcss-value-parser').Node} T\n * @param {T} node\n * @returns {T | undefined}\n */\nfunction findAlphaInValue(node) {\n\treturn node.type === 'word' || node.type === 'function' ? node : undefined;\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {import('postcss-value-parser').Node | undefined}\n */\nfunction findAlphaInFunction(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\n\tif (args.length === 4) return args[3];\n\n\tconst slashNodeIndex = node.nodes.findIndex(({ type, value }) => type === 'div' && value === '/');\n\n\tif (slashNodeIndex !== -1) {\n\t\tconst nodesAfterSlash = node.nodes.slice(slashNodeIndex + 1, node.nodes.length);\n\n\t\treturn nodesAfterSlash.find(({ type }) => type === 'word');\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isPercentage(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '%';\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'lower' | 'upper'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tconst expectedName = expectation === 'lower' ? name.toLowerCase() : name.toUpperCase();\n\n\t\t\tif (name === expectedName) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = expectedName;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(name, expectedName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","/**\n * Unite two or more sets\n *\n * @param {Iterable<string>[]} args\n */\nmodule.exports = function uniteSets(...args) {\n\treturn new Set([...args].reduce((result, set) => [...result, ...set], []));\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\n// https://www.w3.org/TR/css-page-3/#syntax-page-selector\nconst pageMarginAtKeywords = new Set([\n\t'top-left-corner',\n\t'top-left',\n\t'top-center',\n\t'top-right',\n\t'top-right-corner',\n\t'bottom-left-corner',\n\t'bottom-left',\n\t'bottom-center',\n\t'bottom-right',\n\t'bottom-right-corner',\n\t'left-top',\n\t'left-middle',\n\t'left-bottom',\n\t'right-top',\n\t'right-middle',\n\t'right-bottom',\n]);\n\n// https://developer.mozilla.org/en/docs/Web/CSS/At-rule\nconst atKeywords = uniteSets(pageMarginAtKeywords, [\n\t'annotation',\n\t'apply',\n\t'character-variant',\n\t'charset',\n\t'container',\n\t'counter-style',\n\t'custom-media',\n\t'custom-selector',\n\t'document',\n\t'font-face',\n\t'font-feature-values',\n\t'import',\n\t'keyframes',\n\t'layer',\n\t'media',\n\t'namespace',\n\t'nest',\n\t'ornaments',\n\t'page',\n\t'property',\n\t'styleset',\n\t'stylistic',\n\t'supports',\n\t'swash',\n\t'viewport',\n]);\n\nmodule.exports = {\n\tatKeywords,\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst { atKeywords } = require('../../reference/atKeywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atRule) => `Unexpected unknown at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (vendor.prefix(name) || atKeywords.has(name.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst atName = `@${name}`;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(atName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t\tword: atName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected single space after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule) => {\n\t\t\t\t\t\tif (typeof atRule.raws.afterName === 'string') {\n\t\t\t\t\t\t\tatRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line before a node. Mutates the node.\n *\n * @template {import('postcss').ChildNode} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineBefore(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.before !== 'string') {\n\t\treturn node;\n\t}\n\n\traws.before = !/\\r?\\n/.test(raws.before)\n\t\t? newline.repeat(2) + raws.before\n\t\t: raws.before.replace(/(\\r?\\n)/, `${newline}$1`);\n\n\treturn node;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node} node\n */\nfunction getNodeLine(node) {\n\treturn node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | undefined} node\n * @returns {Node | undefined}\n */\nmodule.exports = function getPreviousNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn previousNode;\n\t}\n\n\tif (getNodeLine(node) === getNodeLine(previousNode)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\tconst previousNode2 = previousNode.prev();\n\n\tif (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\treturn previousNode;\n};\n","'use strict';\n\n/**\n * Check if a string contains at least one empty line\n *\n * @param {string | undefined} string\n * @returns {boolean}\n */\nmodule.exports = function hasEmptyLine(string) {\n\tif (string === '' || string === undefined) return false;\n\n\treturn /\\n[\\r\\t ]*\\n/.test(string);\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node | void} node\n */\nfunction getNodeLine(node) {\n\treturn node && node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | void} node\n * @returns {Node | void}\n */\nmodule.exports = function getNextNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/** @type {Node | void} */\n\tconst nextNode = node.next();\n\n\tif (!nextNode || nextNode.type !== 'comment') {\n\t\treturn nextNode;\n\t}\n\n\tif (\n\t\tgetNodeLine(node) === getNodeLine(nextNode) ||\n\t\tgetNodeLine(nextNode) === getNodeLine(nextNode.next())\n\t) {\n\t\treturn getNextNonSharedLineCommentNode(nextNode);\n\t}\n\n\treturn nextNode;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n/** @typedef {import('postcss').Node} NodeSource */\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Root}\n */\nmodule.exports.isRoot = function isRoot(node) {\n\treturn node.type === 'root';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Rule}\n */\nmodule.exports.isRule = function isRule(node) {\n\treturn node.type === 'rule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').AtRule}\n */\nmodule.exports.isAtRule = function isAtRule(node) {\n\treturn node.type === 'atrule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Comment}\n */\nmodule.exports.isComment = function isComment(node) {\n\treturn node.type === 'comment';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Declaration}\n */\nmodule.exports.isDeclaration = function isDeclaration(node) {\n\treturn node.type === 'decl';\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').FunctionNode}\n */\nmodule.exports.isValueFunction = function isValueFunction(node) {\n\treturn node.type === 'function';\n};\n\n/**\n * @param {Node} node\n * @returns {node is (Node & {source: NodeSource})}\n */\nmodule.exports.hasSource = function hasSource(node) {\n\treturn Boolean(node.source);\n};\n","'use strict';\n\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst { isRoot, isComment } = require('./typeGuards');\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\tconst aLine = a && a.source && a.source.end && a.source.end.line;\n\tconst bLine = b && b.source && b.source.start && b.source.start.line;\n\n\treturn aLine === bLine;\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nmodule.exports = function isSharedLineComment(node) {\n\tif (!isComment(node)) {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\t!isRoot(parentNode) &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function isAfterComment(node) {\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\treturn !isSharedLineComment(previousNode);\n};\n","'use strict';\n\n/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @return {boolean} True if `statement` has a block (empty or otherwise)\n */\nmodule.exports = function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst hasBlock = require('./hasBlock');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function isBlocklessAtRuleAfterBlocklessAtRule(atRule) {\n\tif (atRule.type !== 'atrule') {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode === undefined) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(previousNode) && !hasBlock(previousNode) && !hasBlock(atRule);\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('./isBlocklessAtRuleAfterBlocklessAtRule');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function isBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule) {\n\tif (!isBlocklessAtRuleAfterBlocklessAtRule(atRule)) {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode && isAtRule(previousNode)) {\n\t\treturn previousNode.name === atRule.name;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst { isComment, hasSource } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} statement\n * @returns {boolean}\n */\nmodule.exports = function isFirstNested(statement) {\n\tconst parentNode = statement.parent;\n\n\tif (parentNode === undefined || parentNode.type === 'root') {\n\t\treturn false;\n\t}\n\n\tif (statement === parentNode.first) {\n\t\treturn true;\n\t}\n\n\t/*\n\t * Search for the statement in the parent's nodes, ignoring comment\n\t * nodes on the same line as the parent's opening brace.\n\t */\n\n\tconst parentNodes = parentNode.nodes;\n\n\tif (!parentNodes) {\n\t\treturn false;\n\t}\n\n\tconst firstNode = parentNodes[0];\n\n\tif (!firstNode) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!isComment(firstNode) ||\n\t\t(typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\\n'))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (!hasSource(firstNode) || !firstNode.source.start) {\n\t\treturn false;\n\t}\n\n\tconst openingBraceLine = firstNode.source.start.line;\n\n\tif (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, node] of parentNodes.entries()) {\n\t\tif (index === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === statement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t!isComment(node) ||\n\t\t\t(hasSource(node) && node.source.end && node.source.end.line !== openingBraceLine)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* istanbul ignore next: Should always return in the loop */\n\treturn false;\n};\n","'use strict';\n\nconst { isRoot } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nmodule.exports = function isFirstNodeOfRoot(node) {\n\tif (isRoot(node)) return false;\n\n\tconst parentNode = node.parent;\n\n\tif (!parentNode) {\n\t\treturn false;\n\t}\n\n\treturn isRoot(parentNode) && node === parentNode.first;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesBefore(node, newline) {\n\tnode.raws.before = node.raws.before ? node.raws.before.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterBlocklessAtRule');\nconst isBlocklessAtRuleAfterSameNameBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before at-rule',\n\trejected: 'Unexpected empty line before at-rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-same-name',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t],\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'always' | 'never'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst isNested = atRule.parent && atRule.parent.type !== 'root';\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\t// and following another blockless at-rule with the same name\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-same-name-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(atRule.raws.before);\n\t\t\tlet expectEmptyLineBefore = expectation === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-same-name') &&\n\t\t\t\t\tisAtRuleAfterSameNameAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-same-name-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix && context.newline) {\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(atRule, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(atRule, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: atRule, result, ruleName });\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').AtRule} atRule\n */\nfunction isAtRuleAfterSameNameAtRule(atRule) {\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\treturn previousNode && isAtRule(previousNode) && previousNode.name === atRule.name;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineAfter(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.after !== 'string') {\n\t\treturn node;\n\t}\n\n\tconst spaces = raws.after.split(';');\n\tconst after = spaces[spaces.length - 1] || '';\n\n\tif (!/\\r?\\n/.test(after)) {\n\t\traws.after += newline.repeat(2);\n\t} else {\n\t\traws.after = raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n\t}\n\n\treturn node;\n};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function beforeBlockString(statement, { noRawBefore } = { noRawBefore: false }) {\n\tlet result = '';\n\n\tconst before = statement.raws.before || '';\n\n\tif (!noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (isRule(statement)) {\n\t\tresult += statement.selector;\n\t} else if (isAtRule(statement)) {\n\t\tresult += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;\n\t} else {\n\t\treturn '';\n\t}\n\n\tresult += statement.raws.between || '';\n\n\treturn result;\n};\n","'use strict';\n\n/**\n * Stringify PostCSS node including its raw \"before\" string.\n *\n * @param {import('postcss').Node} node\n *\n * @returns {string}\n */\nmodule.exports = function rawNodeString(node) {\n\tlet result = '';\n\n\tif (node.raws.before) {\n\t\tresult += node.raws.before;\n\t}\n\n\tresult += node.toString();\n\n\treturn result;\n};\n","'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\nconst hasBlock = require('./hasBlock');\nconst rawNodeString = require('./rawNodeString');\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`), returns an empty string.\n *\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function blockString(statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn '';\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n};\n","'use strict';\n\nconst hasBlock = require('./hasBlock');\n\n/**\n * Check if a statement has an empty block.\n *\n * @param {import('postcss').Rule | import('postcss').AtRule} statement - postcss rule or at-rule node\n * @return {boolean} True if the statement has a block and it is empty\n */\nmodule.exports = function hasEmptyBlock(statement) {\n\treturn hasBlock(statement) && statement.nodes.length === 0;\n};\n","'use strict';\n\nconst addEmptyLineAfter = require('../../utils/addEmptyLineAfter');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesAfter = require('../../utils/removeEmptyLinesAfter');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before closing brace',\n\trejected: 'Unexpected empty line before closing brace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always-multi-line', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['after-closing-brace'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get whitespace after \"\"}\", ignoring extra semicolon\n\t\t\tconst before = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\t// Calculate index\n\t\t\tconst statementString = statement.toString();\n\t\t\tlet index = statementString.length - 1;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// Set expectation\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tconst childNodeTypes = statement.nodes.map((item) => item.type);\n\n\t\t\t\t// Reverse the primary options if `after-closing-brace` is set\n\t\t\t\tif (\n\t\t\t\t\toptionsMatches(secondaryOptions, 'except', 'after-closing-brace') &&\n\t\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\t\t!childNodeTypes.includes('decl')\n\t\t\t\t) {\n\t\t\t\t\treturn primary === 'never';\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always-multi-line' && !isSingleLineString(blockString(statement));\n\t\t\t})();\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst { newline } = context;\n\n\t\t\t\tif (typeof newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineAfter(statement, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesAfter(statement, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tnode: statement,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesAfter(node, newline) {\n\tnode.raws.after = node.raws.after ? node.raws.after.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\n/**\n * Convert the specified value to an array. If an array is specified, the array is returned as-is.\n *\n * @template T\n * @param {T | T[] | undefined | null} value\n * @returns {T[] | undefined}\n */\nmodule.exports = function flattenArray(value) {\n\tif (value == null) {\n\t\treturn;\n\t}\n\n\treturn Array.isArray(value) ? value : [value];\n};\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties are one or more values\n * that satisfy the specified validator(s):\n *\n * @example\n * ignoreProperties = {\n *   value1: [\"item11\", \"item12\", \"item13\"],\n *   value2: \"item2\",\n * };\n * validateObjectWithArrayProps(isString)(ignoreProperties);\n * //=> true\n *\n * @typedef {(value: unknown) => boolean} Validator\n * @param {...Validator} validators\n * @returns {Validator}\n */\nmodule.exports = function validateObjectWithArrayProps(...validators) {\n\treturn (value) => {\n\t\tif (!isPlainObject(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.values(value)\n\t\t\t.flat()\n\t\t\t.every((item) => validators.some((v) => v(item)));\n\t};\n};\n","'use strict';\n\nconst flattenArray = require('../../utils/flattenArray');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-property-required-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\t\t\tconst propList = flattenArray(primary[atRuleName]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const property of propList) {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t(node) => node.type === 'decl' && node.prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: `@${atRule.name}`,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeString = rawNodeString(atRule);\n\n\t\t\tchecker.before({\n\t\t\t\tsource: nodeString,\n\t\t\t\tindex: nodeString.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: nodeString.length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n * Get the next non-comment node in a PostCSS AST\n * at or after a given node.\n *\n * @param {PostcssNode | void} startNode\n * @returns {PostcssNode | null}\n */\nmodule.exports = function nextNonCommentNode(startNode) {\n\tif (!startNode || !startNode.next) return null;\n\n\tif (startNode.type === 'comment') {\n\t\treturn nextNonCommentNode(startNode.next());\n\t}\n\n\treturn startNode;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-semicolon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst nextNode = atRule.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tnodeToCheck.raws.before = context.newline + nodeToCheck.raws.before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\t\tindex: atRule.toString().length + 1,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"}\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"}\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = blockString(statement);\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length - 1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, ' ');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: 'Expected newline before \"}\"',\n\texpectedBeforeMultiLine: 'Expected newline before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore extra semicolon\n\t\t\tconst after = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\tif (after === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockIsMultiLine = !isSingleLineString(blockString(statement));\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// We're really just checking whether a\n\t\t\t// newline *starts* the block's final space -- between\n\t\t\t// the last declaration and the closing brace. We can\n\t\t\t// ignore any other whitespace between them, because that\n\t\t\t// will be checked by the indentation rule.\n\t\t\tif (!after.startsWith('\\n') && !after.startsWith('\\r\\n')) {\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tcomplain(messages.expectedBefore);\n\t\t\t\t} else if (blockIsMultiLine && primary === 'always-multi-line') {\n\t\t\t\t\tcomplain(messages.expectedBeforeMultiLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (after !== '' && blockIsMultiLine && primary === 'never-multi-line') {\n\t\t\t\tcomplain(messages.rejectedBeforeMultiLine);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t */\n\t\t\tfunction complain(message) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst firstWhitespaceIndex = statementRaws.after.search(/\\s/);\n\t\t\t\t\t\tconst newlineBefore =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0\n\t\t\t\t\t\t\t\t? statementRaws.after.slice(0, firstWhitespaceIndex)\n\t\t\t\t\t\t\t\t: statementRaws.after;\n\t\t\t\t\t\tconst newlineAfter =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0 ? statementRaws.after.slice(firstWhitespaceIndex) : '';\n\t\t\t\t\t\tconst newlineIndex = newlineAfter.search(/\\r?\\n/);\n\n\t\t\t\t\t\tstatementRaws.after =\n\t\t\t\t\t\t\tnewlineIndex >= 0\n\t\t\t\t\t\t\t\t? newlineBefore + newlineAfter.slice(newlineIndex)\n\t\t\t\t\t\t\t\t: newlineBefore + context.newline + newlineAfter;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s/g, '');\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-closing-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected newline after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected newline after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment x spaces after the brace\n\t\t\tconst nextNodeIsSingleLineComment =\n\t\t\t\tnextNode.type === 'comment' &&\n\t\t\t\t!/[^ ]/.test(nextNode.raws.before || '') &&\n\t\t\t\t!nextNode.toString().includes('\\n');\n\n\t\t\tconst nodeToCheck = nextNodeIsSingleLineComment ? nextNode.next() : nextNode;\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nodeToCheck);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\t// Only check one after, because there might be other\n\t\t\t// spaces handled by the indentation rule\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { assertString } = require('./validateTypes');\n\nconst DISABLE_COMMAND = 'stylelint-disable';\nconst DISABLE_LINE_COMMAND = 'stylelint-disable-line';\nconst DISABLE_NEXT_LINE_COMMAND = 'stylelint-disable-next-line';\nconst ENABLE_COMMAND = 'stylelint-enable';\n\nconst ALL_COMMANDS = new Set([\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n]);\n\n/** @typedef {import('postcss').Comment} Comment */\n\n/**\n * Extract a command from a given comment.\n *\n * @param {Comment} comment\n * @returns {string}\n */\nfunction extractStylelintCommand(comment) {\n\tconst [command] = comment.text.split(/\\s/, 1);\n\n\tassertString(command);\n\n\treturn command;\n}\n\n/**\n * Tests if the given comment is a Stylelint command.\n *\n * @param {Comment} comment\n * @returns {boolean}\n */\nfunction isStylelintCommand(comment) {\n\tconst command = extractStylelintCommand(comment);\n\n\treturn command !== undefined && ALL_COMMANDS.has(command);\n}\n\nmodule.exports = {\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n\n\textractStylelintCommand,\n\tisStylelintCommand,\n};\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isStylelintCommand } = require('../../utils/stylelintCommand');\nconst { isComment } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isBoolean,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/** @typedef {import('postcss').Rule | import('postcss').AtRule} Statement */\n\n\t\t/**\n\t\t * @param {Statement} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasNotableChild(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet index = beforeBlockString(statement, { noRawBefore: true }).length;\n\n\t\t\t// For empty blocks when using SugarSS parser\n\t\t\tif (statement.raws.between === undefined) {\n\t\t\t\tindex--;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: statement,\n\t\t\t\tstart: statement.positionBy({ index }),\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {Statement} statement\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction hasNotableChild(statement) {\n\t\t\treturn statement.nodes.some((child) => {\n\t\t\t\tif (isComment(child)) {\n\t\t\t\t\tif (ignoreComments) return false;\n\n\t\t\t\t\tif (isStylelintCommand(child)) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-opening-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"{\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if selector is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'rule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', statement.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.raws.between = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.between = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"{\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'rules', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'rules')) {\n\t\t\troot.walkRules(check);\n\t\t}\n\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst backupCommentNextBefores = new Map();\n\n\t\t\t/**\n\t\t\t * next node with checking newlines after comment\n\t\t\t *\n\t\t\t * @param {import('postcss').ChildNode | undefined} startNode\n\t\t\t * @returns {import('postcss').ChildNode | undefined}\n\t\t\t */\n\t\t\tfunction nextNode(startNode) {\n\t\t\t\tif (!startNode || !startNode.next) return;\n\n\t\t\t\tif (startNode.type === 'comment') {\n\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\tconst newLineMatch = reNewLine.test(startNode.raws.before || '');\n\n\t\t\t\t\tconst next = startNode.next();\n\n\t\t\t\t\tif (next && newLineMatch && !reNewLine.test(next.raws.before || '')) {\n\t\t\t\t\t\tbackupCommentNextBefores.set(next, next.raws.before);\n\t\t\t\t\t\tnext.raws.before = startNode.raws.before;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextNode(next);\n\t\t\t\t}\n\n\t\t\t\treturn startNode;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNode(statement.first);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.delete(nodeToCheck);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\t\t\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\t\t\t\t\tnode.raws.before = before;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.clear();\n\n\t\t\t\t\t\t\t// Fix\n\t\t\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\t\t\tlet fixTarget = statement.first;\n\n\t\t\t\t\t\t\twhile (fixTarget) {\n\t\t\t\t\t\t\t\tconst fixTargetRaws = fixTarget.raws;\n\n\t\t\t\t\t\t\t\tif (typeof fixTargetRaws.before !== 'string') continue;\n\n\t\t\t\t\t\t\t\tif (reNewLine.test(fixTargetRaws.before || '')) {\n\t\t\t\t\t\t\t\t\tfixTargetRaws.before = fixTargetRaws.before.replace(/\\r?\\n/g, '');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (fixTarget.type !== 'comment') {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfixTarget = fixTarget.next();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\tnode.raws.before = before;\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.between !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst spaceIndex = statementRaws.between.search(/\\s+$/);\n\n\t\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\t\tstatement.raws.between =\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(spaceIndex);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatementRaws.between += context.newline;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.between = statementRaws.between.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is standard\n *\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxFunction(node) {\n\t// Function nodes without names are things in parentheses like Sass lists\n\tif (!node.value) {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('#{')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxFunction = require('./isStandardSyntaxFunction');\n\n/**\n * Check whether a function is standard syntax color function\n *\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxColorFunction(node) {\n\tif (!isStandardSyntaxFunction(node)) return false;\n\n\t// scss can accept a #hex, or $var variables and we need to check all nested fn nodes\n\tfor (const fnNode of node.nodes) {\n\t\tif (fnNode.type === 'function') return isStandardSyntaxColorFunction(fnNode);\n\n\t\tif (fnNode.type === 'word' && (fnNode.value.startsWith('#') || fnNode.value.startsWith('$')))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxColorFunction = require('../../utils/isStandardSyntaxColorFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (primary) => `Expected ${primary} color-function notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-function-notation',\n\tfixable: true,\n};\n\nconst LEGACY_FUNCS = new Set(['rgba', 'hsla']);\nconst LEGACY_NOTATION_FUNCS = new Set(['rgb', 'rgba', 'hsl', 'hsla']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['modern', 'legacy'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (!isStandardSyntaxColorFunction(node)) return;\n\n\t\t\t\tconst { value, sourceIndex, sourceEndIndex, nodes } = node;\n\n\t\t\t\tif (!LEGACY_NOTATION_FUNCS.has(value.toLowerCase())) return;\n\n\t\t\t\tif (primary === 'modern' && !hasCommas(node)) return;\n\n\t\t\t\tif (primary === 'legacy' && hasCommas(node)) return;\n\n\t\t\t\tif (context.fix && primary === 'modern') {\n\t\t\t\t\tlet commaCount = 0;\n\n\t\t\t\t\t// Convert punctuation\n\t\t\t\t\tnode.nodes = nodes.map((childNode) => {\n\t\t\t\t\t\tif (isComma(childNode)) {\n\t\t\t\t\t\t\t// Non-alpha commas to space and alpha commas to slashes\n\t\t\t\t\t\t\tif (commaCount < 2) {\n\t\t\t\t\t\t\t\t// @ts-expect-error -- TS2322: Type '\"space\"' is not assignable to type '\"div\"'.\n\t\t\t\t\t\t\t\tchildNode.type = 'space';\n\t\t\t\t\t\t\t\tchildNode.value = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t\tcommaCount++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchildNode.value = '/';\n\t\t\t\t\t\t\t\tchildNode.before = atLeastOneSpace(childNode.before);\n\t\t\t\t\t\t\t\tchildNode.after = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove trailing 'a' from legacy function name\n\t\t\t\t\tif (LEGACY_FUNCS.has(node.value.toLowerCase())) {\n\t\t\t\t\t\tnode.value = node.value.slice(0, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + (sourceEndIndex - sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} whitespace\n */\nfunction atLeastOneSpace(whitespace) {\n\treturn whitespace !== '' ? whitespace : ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').DivNode}\n */\nfunction isComma(node) {\n\treturn node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction hasCommas(node) {\n\treturn node.nodes && node.nodes.some((childNode) => isComma(childNode));\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-hex-alpha';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (hex) => `Expected alpha channel in \"${hex}\"`,\n\tunexpected: (hex) => `Unexpected alpha channel in \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-alpha',\n};\n\nconst HEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(decl.value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isUrlFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (primary === 'always' && hasAlphaChannel(value)) return;\n\n\t\t\t\tif (primary === 'never' && !hasAlphaChannel(value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: primary === 'never' ? messages.unexpected(value) : messages.expected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isUrlFunction({ type, value }) {\n\treturn type === 'function' && value === 'url';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\n/**\n * @param {string} hex\n */\nfunction hasAlphaChannel(hex) {\n\treturn hex.length === 5 || hex.length === 9;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"{\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"{\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['at-rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'at-rules')) {\n\t\t\troot.walkAtRules(check);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: blockString(statement),\n\t\t\t\tindex: 0,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementFirst = statement.first;\n\n\t\t\t\t\t\tif (statementFirst == null) return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-case',\n\tfixable: true,\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst expected = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expected) return;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expected;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(value, expected),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-no-hex',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tmessageArgs: [node.value],\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {number}\n */\nmodule.exports = function atRuleParamIndex(atRule) {\n\t// Initial 1 is for the `@`\n\tlet index = 1 + atRule.name.length;\n\n\tif (atRule.raws.afterName) {\n\t\tindex += atRule.raws.afterName.length;\n\t}\n\n\treturn index;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'custom-media-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (mediaName, pattern) => `Expected \"${mediaName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-media-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() !== 'custom-media') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [fullName, customMediaName] = atRule.params.match(/^--(\\S+)\\b/) || [];\n\n\t\t\tif (fullName === undefined || customMediaName === undefined) {\n\t\t\t\tthrow new Error(`Unexpected at-rule params: \"${atRule.params}\"`);\n\t\t\t}\n\n\t\t\tif (regexpPattern.test(customMediaName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(atRule);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [fullName, primary],\n\t\t\t\tnode: atRule,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + fullName.length,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxHexColor = require('../../utils/isStandardSyntaxHexColor');\nconst isValidHex = require('../../utils/isValidHex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected invalid hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-no-invalid-hex',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxHexColor(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk(({ value, type, sourceIndex }) => {\n\t\t\t\tif (type === 'function' && value.endsWith('url')) return false;\n\n\t\t\t\tif (type !== 'word') return;\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n\n\t\t\t\tif (!hexMatch) return;\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\tif (!hexValue || isValidHex(hexValue)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + hexValue.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a hex color is standard\n *\n * @param {string} hex\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxHexColor(hex) {\n\t// Less map usage (e.g. .myclass { color: #colors[somecolor]; })\n\tif (hex.includes('[')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Check if a value is a valid 3, 4, 6 or 8 digit hex\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function isValidHex(value) {\n\treturn /^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(value);\n};\n","'use strict';\n\nconst acceptCustomIdentsProperties = new Set([\n\t'animation',\n\t'animation-name',\n\t'font',\n\t'font-family',\n\t'counter-increment',\n\t'grid-row',\n\t'grid-column',\n\t'grid-area',\n\t'list-style',\n\t'list-style-type',\n]);\n\n/** @type {import('stylelint').LonghandSubPropertiesOfShorthandProperties} */\nconst longhandSubPropertiesOfShorthandProperties = new Map([\n\t// Sort alphabetically\n\t[\n\t\t'animation',\n\t\tnew Set([\n\t\t\t'animation-name',\n\t\t\t'animation-duration',\n\t\t\t'animation-timing-function',\n\t\t\t'animation-delay',\n\t\t\t'animation-iteration-count',\n\t\t\t'animation-direction',\n\t\t\t'animation-fill-mode',\n\t\t\t'animation-play-state',\n\t\t]),\n\t],\n\t[\n\t\t'background',\n\t\tnew Set([\n\t\t\t'background-image',\n\t\t\t'background-size',\n\t\t\t'background-position',\n\t\t\t'background-repeat',\n\t\t\t'background-origin',\n\t\t\t'background-clip',\n\t\t\t'background-attachment',\n\t\t\t'background-color',\n\t\t]),\n\t],\n\t[\n\t\t'border',\n\t\tnew Set([\n\t\t\t'border-top-width',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left-width',\n\t\t\t'border-right-width',\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-style',\n\t\t\t'border-left-style',\n\t\t\t'border-right-style',\n\t\t\t'border-top-color',\n\t\t\t'border-bottom-color',\n\t\t\t'border-left-color',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-block-end',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-block-end-width',\n\t\t\t'border-block-end-style',\n\t\t\t'border-block-end-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-block-start',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-block-start-width',\n\t\t\t'border-block-start-style',\n\t\t\t'border-block-start-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-bottom',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-bottom-width',\n\t\t\t'border-bottom-style',\n\t\t\t'border-bottom-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-color',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-color',\n\t\t\t'border-bottom-color',\n\t\t\t'border-left-color',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-image',\n\t\tnew Set([\n\t\t\t'border-image-source',\n\t\t\t'border-image-slice',\n\t\t\t'border-image-width',\n\t\t\t'border-image-outset',\n\t\t\t'border-image-repeat',\n\t\t]),\n\t],\n\t[\n\t\t'border-inline-end',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-inline-end-width',\n\t\t\t'border-inline-end-style',\n\t\t\t'border-inline-end-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-inline-start',\n\t\tnew Set([\n\t\t\t'border-inline-start-width',\n\t\t\t'border-inline-start-style',\n\t\t\t'border-inline-start-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-left',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-left-width',\n\t\t\t'border-left-style',\n\t\t\t'border-left-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-radius',\n\t\tnew Set([\n\t\t\t'border-top-right-radius',\n\t\t\t'border-top-left-radius',\n\t\t\t'border-bottom-right-radius',\n\t\t\t'border-bottom-left-radius',\n\t\t]),\n\t],\n\t[\n\t\t'border-right',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-right-width',\n\t\t\t'border-right-style',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-style',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-style',\n\t\t\t'border-left-style',\n\t\t\t'border-right-style',\n\t\t]),\n\t],\n\t[\n\t\t'border-top',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-width',\n\t\t\t'border-top-style',\n\t\t\t'border-top-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-width',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-width',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left-width',\n\t\t\t'border-right-width',\n\t\t]),\n\t],\n\t[\n\t\t'column-rule',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'column-rule-width',\n\t\t\t'column-rule-style',\n\t\t\t'column-rule-color',\n\t\t]),\n\t],\n\t[\n\t\t'columns',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'column-width',\n\t\t\t'column-count',\n\t\t]),\n\t],\n\t[\n\t\t'flex',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'flex-grow',\n\t\t\t'flex-shrink',\n\t\t\t'flex-basis',\n\t\t]),\n\t],\n\t[\n\t\t'flex-flow',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'flex-direction',\n\t\t\t'flex-wrap',\n\t\t]),\n\t],\n\t[\n\t\t'font',\n\t\tnew Set([\n\t\t\t'font-style',\n\t\t\t'font-variant',\n\t\t\t'font-weight',\n\t\t\t'font-stretch',\n\t\t\t'font-size',\n\t\t\t'font-family',\n\t\t\t'line-height',\n\t\t]),\n\t],\n\t[\n\t\t'grid',\n\t\tnew Set([\n\t\t\t'grid-template-rows',\n\t\t\t'grid-template-columns',\n\t\t\t'grid-template-areas',\n\t\t\t'grid-auto-rows',\n\t\t\t'grid-auto-columns',\n\t\t\t'grid-auto-flow',\n\t\t\t'grid-column-gap',\n\t\t\t'grid-row-gap',\n\t\t]),\n\t],\n\t[\n\t\t'grid-area',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-start',\n\t\t\t'grid-column-start',\n\t\t\t'grid-row-end',\n\t\t\t'grid-column-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-column',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-column-start',\n\t\t\t'grid-column-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-gap',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-gap',\n\t\t\t'grid-column-gap',\n\t\t]),\n\t],\n\t[\n\t\t'grid-row',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-start',\n\t\t\t'grid-row-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-template',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-template-columns',\n\t\t\t'grid-template-rows',\n\t\t\t'grid-template-areas',\n\t\t]),\n\t],\n\t[\n\t\t'list-style',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'list-style-type',\n\t\t\t'list-style-position',\n\t\t\t'list-style-image',\n\t\t]),\n\t],\n\t[\n\t\t'margin',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'margin-top',\n\t\t\t'margin-bottom',\n\t\t\t'margin-left',\n\t\t\t'margin-right',\n\t\t]),\n\t],\n\t[\n\t\t'mask',\n\t\tnew Set([\n\t\t\t'mask-image',\n\t\t\t'mask-mode',\n\t\t\t'mask-position',\n\t\t\t'mask-size',\n\t\t\t'mask-repeat',\n\t\t\t'mask-origin',\n\t\t\t'mask-clip',\n\t\t\t'mask-composite',\n\t\t]),\n\t],\n\t[\n\t\t'outline',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'outline-color',\n\t\t\t'outline-style',\n\t\t\t'outline-width',\n\t\t]),\n\t],\n\t[\n\t\t'padding',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'padding-top',\n\t\t\t'padding-bottom',\n\t\t\t'padding-left',\n\t\t\t'padding-right',\n\t\t]),\n\t],\n\t[\n\t\t'text-decoration',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'text-decoration-color',\n\t\t\t'text-decoration-style',\n\t\t\t'text-decoration-line',\n\t\t]),\n\t],\n\t[\n\t\t'text-emphasis',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'text-emphasis-style',\n\t\t\t'text-emphasis-color',\n\t\t]),\n\t],\n\t[\n\t\t'transition',\n\t\tnew Set([\n\t\t\t'transition-delay',\n\t\t\t'transition-duration',\n\t\t\t'transition-property',\n\t\t\t'transition-timing-function',\n\t\t]),\n\t],\n]);\n\nconst longhandTimeProperties = new Set([\n\t'transition-duration',\n\t'transition-delay',\n\t'animation-duration',\n\t'animation-delay',\n]);\n\nconst shorthandTimeProperties = new Set(['transition', 'animation']);\n\nmodule.exports = {\n\tacceptCustomIdentsProperties,\n\tlonghandSubPropertiesOfShorthandProperties,\n\tlonghandTimeProperties,\n\tshorthandTimeProperties,\n};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},u=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},a=function(r){return{h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),w:u(r.w,0,100),b:u(r.b,0,100),a:u(r.a)};var t},e=function(r){return{h:n(r.h),w:n(r.w),b:n(r.b),a:n(r.a,3)}},b=function(r){return{h:function(r){var t=r.r,n=r.g,u=r.b,a=r.a,e=Math.max(t,n,u),b=e-Math.min(t,n,u),o=b?e===t?(n-u)/b:e===n?2+(u-t)/b:4+(t-n)/b:0;return{h:60*(o<0?o+6:o),s:e?b/e*100:0,v:e/255*100,a:a}}(r).h,w:Math.min(r.r,r.g,r.b)/255*100,b:100-Math.max(r.r,r.g,r.b)/255*100,a:r.a}},o=function(r){return function(r){var t=r.h,n=r.s,u=r.v,a=r.a;t=t/360*6,n/=100,u/=100;var e=Math.floor(t),b=u*(1-n),o=u*(1-(t-e)*n),i=u*(1-(1-t+e)*n),h=e%6;return{r:255*[u,o,b,b,i,u][h],g:255*[i,u,u,o,b,b][h],b:255*[b,b,i,u,u,o][h],a:a}}({h:r.h,s:100===r.b?0:100-r.w/(100-r.b)*100,v:100-r.b,a:r.a})},i=function(r){var n=r.h,u=r.w,e=r.b,b=r.a,i=void 0===b?1:b;if(!t(n)||!t(u)||!t(e))return null;var h=a({h:Number(n),w:Number(u),b:Number(e),a:Number(i)});return o(h)},h=/^hwb\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,d=function(t){var n=h.exec(t);if(!n)return null;var u,e,b=a({h:(u=n[1],e=n[2],void 0===e&&(e=\"deg\"),Number(u)*(r[e]||1)),w:Number(n[3]),b:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return o(b)};export default function(r,t){r.prototype.toHwb=function(){return e(b(this.rgba))},r.prototype.toHwbString=function(){return r=e(b(this.rgba)),t=r.h,n=r.w,u=r.b,(a=r.a)<1?\"hwb(\"+t+\" \"+n+\"% \"+u+\"% / \"+a+\")\":\"hwb(\"+t+\" \"+n+\"% \"+u+\"%)\";var r,t,n,u,a},t.string.push([d,\"hwb\"]),t.object.push([i,\"hwb\"])}\n","var a=function(a){return\"string\"==typeof a?a.length>0:\"number\"==typeof a},t=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=Math.pow(10,t)),Math.round(o*a)/o+0},o=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=1),a>o?o:a>t?a:t},r=function(a){var t=a/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(a){return 255*(a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a)},n=96.422,p=100,M=82.521,u=function(a){var t,r,n={x:.9555766*(t=a).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return r={r:h(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:h(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:h(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:a.a},{r:o(r.r,0,255),g:o(r.g,0,255),b:o(r.b,0,255),a:o(r.a)}},e=function(a){var t=r(a.r),h=r(a.g),u=r(a.b);return function(a){return{x:o(a.x,0,n),y:o(a.y,0,p),z:o(a.z,0,M),a:o(a.a)}}(function(a){return{x:1.0478112*a.x+.0228866*a.y+-.050127*a.z,y:.0295424*a.x+.9904844*a.y+-.0170491*a.z,z:-.0092345*a.x+.0150436*a.y+.7521316*a.z,a:a.a}}({x:100*(.4124564*t+.3575761*h+.1804375*u),y:100*(.2126729*t+.7151522*h+.072175*u),z:100*(.0193339*t+.119192*h+.9503041*u),a:a.a}))},w=216/24389,b=24389/27,i=function(t){var r=t.l,h=t.a,n=t.b,p=t.alpha,M=void 0===p?1:p;if(!a(r)||!a(h)||!a(n))return null;var u=function(a){return{l:o(a.l,0,400),a:a.a,b:a.b,alpha:o(a.alpha)}}({l:Number(r),a:Number(h),b:Number(n),alpha:Number(M)});return l(u)},l=function(a){var t=(a.l+16)/116,o=a.a/500+t,r=t-a.b/200;return u({x:(Math.pow(o,3)>w?Math.pow(o,3):(116*o-16)/b)*n,y:(a.l>8?Math.pow((a.l+16)/116,3):a.l/b)*p,z:(Math.pow(r,3)>w?Math.pow(r,3):(116*r-16)/b)*M,a:a.alpha})};export default function(a,r){a.prototype.toLab=function(){return o=e(this.rgba),h=o.y/p,u=o.z/M,r=(r=o.x/n)>w?Math.cbrt(r):(b*r+16)/116,a={l:116*(h=h>w?Math.cbrt(h):(b*h+16)/116)-16,a:500*(r-h),b:200*(h-(u=u>w?Math.cbrt(u):(b*u+16)/116)),alpha:o.a},{l:t(a.l,2),a:t(a.a,2),b:t(a.b,2),alpha:t(a.alpha,3)};var a,o,r,h,u},a.prototype.delta=function(r){void 0===r&&(r=\"#FFF\");var h=r instanceof a?r:new a(r),n=function(a,t){var o=a.l,r=a.a,h=a.b,n=t.l,p=t.a,M=t.b,u=180/Math.PI,e=Math.PI/180,w=Math.pow(Math.pow(r,2)+Math.pow(h,2),.5),b=Math.pow(Math.pow(p,2)+Math.pow(M,2),.5),i=(o+n)/2,l=Math.pow((w+b)/2,7),c=.5*(1-Math.pow(l/(l+Math.pow(25,7)),.5)),f=r*(1+c),y=p*(1+c),v=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),x=Math.pow(Math.pow(y,2)+Math.pow(M,2),.5),z=(v+x)/2,s=0===f&&0===h?0:Math.atan2(h,f)*u,d=0===y&&0===M?0:Math.atan2(M,y)*u;s<0&&(s+=360),d<0&&(d+=360);var g=d-s,m=Math.abs(d-s);m>180&&d<=s?g+=360:m>180&&d>s&&(g-=360);var N=s+d;m<=180?N/=2:N=(s+d<360?N+360:N-360)/2;var F=1-.17*Math.cos(e*(N-30))+.24*Math.cos(2*e*N)+.32*Math.cos(e*(3*N+6))-.2*Math.cos(e*(4*N-63)),L=n-o,I=x-v,P=2*Math.sin(e*g/2)*Math.pow(v*x,.5),j=1+.015*Math.pow(i-50,2)/Math.pow(20+Math.pow(i-50,2),.5),k=1+.045*z,q=1+.015*z*F,A=30*Math.exp(-1*Math.pow((N-275)/25,2)),B=-2*Math.pow(l/(l+Math.pow(25,7)),.5)*Math.sin(2*e*A);return Math.pow(Math.pow(L/1/j,2)+Math.pow(I/1/k,2)+Math.pow(P/1/q,2)+B*I*P/(1*k*1*q),.5)}(this.toLab(),h.toLab())/100;return o(t(n,3))},r.object.push([i,\"lab\"])}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},a=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=Math.pow(10,t)),Math.round(a*r)/a+0},n=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=1),r>a?a:r>t?r:t},u=function(r){var t=r/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(r){return 255*(r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r)},o=96.422,e=100,c=82.521,i=function(r){var t,a,u={x:.9555766*(t=r).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return a={r:h(.032404542*u.x-.015371385*u.y-.004985314*u.z),g:h(-.00969266*u.x+.018760108*u.y+41556e-8*u.z),b:h(556434e-9*u.x-.002040259*u.y+.010572252*u.z),a:r.a},{r:n(a.r,0,255),g:n(a.g,0,255),b:n(a.b,0,255),a:n(a.a)}},l=function(r){var t=u(r.r),a=u(r.g),h=u(r.b);return function(r){return{x:n(r.x,0,o),y:n(r.y,0,e),z:n(r.z,0,c),a:n(r.a)}}(function(r){return{x:1.0478112*r.x+.0228866*r.y+-.050127*r.z,y:.0295424*r.x+.9904844*r.y+-.0170491*r.z,z:-.0092345*r.x+.0150436*r.y+.7521316*r.z,a:r.a}}({x:100*(.4124564*t+.3575761*a+.1804375*h),y:100*(.2126729*t+.7151522*a+.072175*h),z:100*(.0193339*t+.119192*a+.9503041*h),a:r.a}))},f=216/24389,b=24389/27,d=function(r){return{l:n(r.l,0,100),c:r.c,h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),a:r.a};var t},p=function(r){return{l:a(r.l,2),c:a(r.c,2),h:a(r.h,2),a:a(r.a,3)}},v=function(r){var a=r.l,n=r.c,u=r.h,h=r.a,o=void 0===h?1:h;if(!t(a)||!t(n)||!t(u))return null;var e=d({l:Number(a),c:Number(n),h:Number(u),a:Number(o)});return M(e)},y=function(r){var t=function(r){var t=l(r),a=t.x/o,n=t.y/e,u=t.z/c;return a=a>f?Math.cbrt(a):(b*a+16)/116,{l:116*(n=n>f?Math.cbrt(n):(b*n+16)/116)-16,a:500*(a-n),b:200*(n-(u=u>f?Math.cbrt(u):(b*u+16)/116)),alpha:t.a}}(r),n=a(t.a,3),u=a(t.b,3),h=Math.atan2(u,n)/Math.PI*180;return{l:t.l,c:Math.sqrt(n*n+u*u),h:h<0?h+360:h,a:t.alpha}},M=function(r){return t={l:r.l,a:r.c*Math.cos(r.h*Math.PI/180),b:r.c*Math.sin(r.h*Math.PI/180),alpha:r.a},n=t.a/500+(a=(t.l+16)/116),u=a-t.b/200,i({x:(Math.pow(n,3)>f?Math.pow(n,3):(116*n-16)/b)*o,y:(t.l>8?Math.pow((t.l+16)/116,3):t.l/b)*e,z:(Math.pow(u,3)>f?Math.pow(u,3):(116*u-16)/b)*c,a:t.alpha});var t,a,n,u},x=/^lch\\(\\s*([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,s=function(t){var a=x.exec(t);if(!a)return null;var n,u,h=d({l:Number(a[1]),c:Number(a[2]),h:(n=a[3],u=a[4],void 0===u&&(u=\"deg\"),Number(n)*(r[u]||1)),a:void 0===a[5]?1:Number(a[5])/(a[6]?100:1)});return M(h)};export default function(r,t){r.prototype.toLch=function(){return p(y(this.rgba))},r.prototype.toLchString=function(){return r=p(y(this.rgba)),t=r.l,a=r.c,n=r.h,(u=r.a)<1?\"lch(\"+t+\"% \"+a+\" \"+n+\" / \"+u+\")\":\"lch(\"+t+\"% \"+a+\" \"+n+\")\";var r,t,a,n,u},t.string.push([s,\"lch\"]),t.object.push([v,\"lch\"])}\n","const { colord, extend } = require('colord');\nconst valueParser = require('postcss-value-parser');\n\nconst namesPlugin = require('colord/plugins/names');\nconst hwbPlugin = require('colord/plugins/hwb');\nconst labPlugin = require('colord/plugins/lab');\nconst lchPlugin = require('colord/plugins/lch');\n\nextend([\n\t// Type definitions are not compatible with commonjs.\n\t/** @type {any} */ (namesPlugin),\n\t/** @type {any} */ (hwbPlugin),\n\t/** @type {any} */ (labPlugin),\n\t/** @type {any} */ (lchPlugin),\n\n\t/* Syntaxes that is removed in Color Module Level 4 specification. */\n\n\t// hwb() with comma\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseHwbWithCommaString, /** @type {any} */ ('hwb-with-comma')]);\n\t},\n\t// gray()\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseGrayString, /** @type {any} */ ('gray')]);\n\t},\n]);\n\nmodule.exports = {\n\tcolord,\n};\n\n/**\n * Parses a valid hwb with comma CSS color function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()#syntax\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseHwbWithCommaString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('hwb(') || !input.endsWith(')') || input.includes('/')) {\n\t\treturn null;\n\t}\n\n\tconst [hue, whiteness = '', blackness = '', alpha, ...extraArgs] = input.slice(4, -1).split(',');\n\n\tif (!hue || !hue.trim() || !whiteness.trim() || !blackness.trim() || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\t// Change the delimiter and parse with colord.\n\tconst colordInstance = colord(\n\t\t`hwb(${hue} ${whiteness} ${blackness}${alpha ? ` / ${alpha}` : ''})`,\n\t);\n\n\tif (!colordInstance.isValid()) {\n\t\treturn null;\n\t}\n\n\treturn colordInstance.rgba;\n}\n\n/**\n * Parses a valid gray() CSS color function\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseGrayString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('gray(') || !input.endsWith(')')) {\n\t\treturn null;\n\t}\n\n\tconst [lightness, alpha, ...extraArgs] = input.slice(5, -1).split(',');\n\n\tif (!lightness || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\tconst lightnessWithUnit = valueParser.unit(lightness.trim());\n\n\tif (!lightnessWithUnit || !['', '%'].includes(lightnessWithUnit.unit)) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {import('colord/types').LabColor | import('colord/types').LabaColor}\n\t */\n\tlet colorObject = {\n\t\tl: Number(lightnessWithUnit.number),\n\t\ta: 0,\n\t\tb: 0,\n\t};\n\n\tif (alpha) {\n\t\tconst alphaWithUnit = valueParser.unit(alpha.trim());\n\n\t\tif (!alphaWithUnit || !['', '%'].includes(alphaWithUnit.unit)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tcolorObject = {\n\t\t\t...colorObject,\n\t\t\talpha: Number(alphaWithUnit.number) / (alphaWithUnit.unit ? 100 : 1),\n\t\t};\n\t}\n\n\treturn colord(colorObject).rgba;\n}\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { acceptCustomIdentsProperties } = require('../../reference/properties');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { colord } = require('./colordUtils');\n\nconst ruleName = 'color-named';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (named, original) => `Expected \"${original}\" to be \"${named}\"`,\n\trejected: (named) => `Unexpected named color \"${named}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-named',\n};\n\n// Todo tested on case insensitivity\nconst NODE_TYPES = new Set(['word', 'function']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['never', 'always-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (acceptCustomIdentsProperties.has(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if the property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst type = node.type;\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function') && type === 'function') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if neither a word nor a function\n\t\t\t\tif (!NODE_TYPES.has(type)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for named colors for \"never\" option\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'never' &&\n\t\t\t\t\ttype === 'word' &&\n\t\t\t\t\t/^[a-z]+$/iu.test(value) &&\n\t\t\t\t\tvalue.toLowerCase() !== 'transparent' &&\n\t\t\t\t\tcolord(value).isValid()\n\t\t\t\t) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(value),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\tvalue.length,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check \"always-where-possible\" option ...\n\t\t\t\tif (primary !== 'always-where-possible') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet rawColorString = null;\n\t\t\t\tlet colorString = null;\n\n\t\t\t\tif (type === 'function') {\n\t\t\t\t\trawColorString = valueParser.stringify(node);\n\n\t\t\t\t\t// First by checking for alternative color function representations ...\n\t\t\t\t\t// Remove all spaces to match what's in `representations`\n\t\t\t\t\tcolorString = rawColorString.replace(/\\s*([,/()])\\s*/g, '$1').replace(/\\s{2,}/g, ' ');\n\t\t\t\t} else if (type === 'word' && value.startsWith('#')) {\n\t\t\t\t\t// Then by checking for alternative hex representations\n\t\t\t\t\trawColorString = colorString = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst color = colord(colorString);\n\n\t\t\t\tif (!color.isValid()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst namedColor = color.toName();\n\n\t\t\t\tif (namedColor && namedColor.toLowerCase() !== 'transparent') {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.expected(namedColor, colorString),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\trawColorString.length,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t */\n\t\tfunction complain(message, node, index, length) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Comment} comment\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxComment(comment) {\n\t// We check both here because the Sass parser uses `raws.inline` to indicate\n\t// inline comments, while the Less parser uses `inline`.\n\tif ('inline' in comment) return false;\n\n\tif ('inline' in comment.raws) return false;\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// To ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// To ignore comments that are not empty\n\t\t\tif (comment.text && comment.text.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected comment to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\n\t\t\tif (normalizedPattern.test(text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-length',\n\tfixable: true,\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['short', 'long'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value: hexValue } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tif (primary === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst variant = primary === 'long' ? longer : shorter;\n\t\t\t\tconst expectedHex = variant(hexValue);\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expectedHex;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(hexValue, expectedHex),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} hex\n */\nfunction canShrink(hex) {\n\thex = hex.toLowerCase();\n\n\treturn (\n\t\thex[1] === hex[2] &&\n\t\thex[3] === hex[4] &&\n\t\thex[5] === hex[6] &&\n\t\t(hex.length === 7 || (hex.length === 9 && hex[7] === hex[8]))\n\t);\n}\n\n/**\n * @param {string} hex\n */\nfunction shorter(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i += 2) {\n\t\thexVariant += hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {string} hex\n */\nfunction longer(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i++) {\n\t\thexVariant += hex.charAt(i).repeat(2);\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-whitespace-inside',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceBefore(comment) {\n\tif (comment.text.startsWith('*')) {\n\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t} else {\n\t\tcomment.raws.left = ' ';\n\t}\n}\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceAfter(comment) {\n\tif (comment.text[comment.text.length - 1] === '*') {\n\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t} else {\n\t\tcomment.raws.right = ' ';\n\t}\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n\n\t\t\tif (leftMatches == null || leftMatches[1] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n\n\t\t\tif (rightMatches == null || rightMatches[2] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftSpace = leftMatches[2] || '';\n\t\t\tconst rightSpace = rightMatches[1] || '';\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (primary === 'never' && leftSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'never' && rightSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!leftSpace) {\n\t\t\t\t\t\t\taddWhitespaceBefore(comment);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rightSpace) {\n\t\t\t\t\t\t\taddWhitespaceAfter(comment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a property is a custom one\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isCustomProperty(property) {\n\treturn property.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a property is SCSS variable\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isScssVariable(property) {\n\t// SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))\n\tif (property.startsWith('$')) {\n\t\treturn true;\n\t}\n\n\t// SCSS var within a namespace (e.g. namespace.$var: x)\n\tif (property.includes('.$')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\nconst isScssVariable = require('./isScssVariable');\n\n/**\n * Check whether a property is standard\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxProperty(property) {\n\t// SCSS var\n\tif (isScssVariable(property)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x)\n\tif (property.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// Less append property value with space (e.g. transform+_: scale(2))\n\tif (property.endsWith('+') || property.endsWith('+_')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(property)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst ruleName = 'custom-property-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (propName, pattern) => `Expected \"${propName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\t/**\n\t\t * @param {string} property\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction check(property) {\n\t\t\treturn (\n\t\t\t\t!isStandardSyntaxProperty(property) ||\n\t\t\t\t!isCustomProperty(property) ||\n\t\t\t\tregexpPattern.test(property.slice(2))\n\t\t\t);\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (node.value.toLowerCase() !== 'var') return;\n\n\t\t\t\tconst { nodes } = node;\n\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tif (!firstNode || check(firstNode.value)) return;\n\n\t\t\t\tcomplain(declarationValueIndex(decl) + firstNode.sourceIndex, firstNode.value, decl);\n\t\t\t});\n\n\t\t\tif (check(prop)) return;\n\n\t\t\tcomplain(0, prop, decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t * @param {string} propName\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(index, propName, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [propName, primary],\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + propName.length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isString } = require('./validateTypes');\n\n/** @typedef {false | { match: string, pattern: string, substring: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @template {unknown} T\n * @param {string} input\n * @param {T | T[]} comparison\n * @returns {ReturnValue}\n */\nmodule.exports = function containsString(input, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstString(input, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstString(input, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {unknown} comparison\n * @returns {ReturnValue}\n */\nfunction testAgainstString(value, comparison) {\n\tif (!comparison) return false;\n\n\tif (!isString(comparison)) return false;\n\n\tif (comparison.startsWith('/') && comparison.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\tif (value.includes(comparison)) {\n\t\treturn { match: value, pattern: comparison, substring: comparison };\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nconst containsString = require('../../utils/containsString');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-word-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (pattern) => `Unexpected word matching pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-word-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap\n\t\t\tif (firstFourChars === '/*# ') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchesWord = matchesStringOrRegExp(text, primary) || containsString(text, primary);\n\n\t\t\tif (!matchesWord) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(matchesWord.pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tword: matchesWord.substring,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-property-no-missing-var-function';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (customProperty) => `Unexpected missing var function for \"${customProperty}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-no-missing-var-function',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/** @type {Set<string>} */\n\t\tconst knownCustomProperties = new Set();\n\n\t\troot.walkAtRules(/^property$/i, (atRule) => {\n\t\t\tknownCustomProperties.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls(({ prop }) => {\n\t\t\tif (isCustomProperty(prop)) knownCustomProperties.add(prop);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isVarFunction(node)) return false;\n\n\t\t\t\tif (!isDashedIdent(node)) return;\n\n\t\t\t\tif (!knownCustomProperties.has(node.value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isDashedIdent({ type, value }) {\n\treturn type === 'word' && value.startsWith('--');\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isVarFunction({ type, value }) {\n\treturn type === 'function' && value === 'var';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isRoot, isAtRule, isRule } = require('./typeGuards');\n\n/** @typedef {import('postcss').Root} Root */\n/** @typedef {import('postcss').Root} Document */\n/** @typedef {import('postcss').Node} PostcssNode */\n/** @typedef {import('postcss').Container} PostcssContainerNode */\n/** @typedef {import('postcss').Declaration} Declaration */\n/** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */\n\n/**\n * @param {PostcssNode} node\n * @returns {node is PostcssContainerNode}\n */\nfunction isContainerNode(node) {\n\treturn isRule(node) || isAtRule(node) || isRoot(node);\n}\n\n/**\n * In order to accommodate nested blocks (postcss-nested),\n * we need to run a shallow loop (instead of eachDecl() or eachRule(),\n * which loop recursively) and allow each nested block to accumulate\n * its own list of properties -- so that a property in a nested rule\n * does not conflict with the same property in the parent rule\n * executes a provided function once for each declaration block.\n *\n * @param {Root | Document} root - root element of file.\n * @param {(eachDecl: EachDeclaration) => void} callback - Function to execute for each declaration block\n *\n * @returns {void}\n */\nmodule.exports = function eachDeclarationBlock(root, callback) {\n\t/**\n\t * @param {PostcssNode} statement\n\t *\n\t * @returns {void}\n\t */\n\tfunction each(statement) {\n\t\tif (!isContainerNode(statement)) return;\n\n\t\tif (statement.nodes && statement.nodes.length) {\n\t\t\t/** @type {Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\tfor (const node of statement.nodes) {\n\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\tdecls.push(node);\n\t\t\t\t}\n\n\t\t\t\teach(node);\n\t\t\t}\n\n\t\t\tif (decls.length) {\n\t\t\t\tcallback(decls.forEach.bind(decls));\n\t\t\t}\n\t\t}\n\t}\n\n\teach(root);\n};\n","'use strict';\n\nconst arrayEqual = require('../../utils/arrayEqual');\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { longhandSubPropertiesOfShorthandProperties } = require('../../reference/properties');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (props) => `Expected shorthand property \"${props}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-redundant-longhand-properties',\n};\n\nconst IGNORED_VALUES = new Set(['inherit']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreShorthands: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<string, string[]>} */\n\t\tconst longhandToShorthands = new Map();\n\n\t\tfor (const [shorthand, longhandProps] of longhandSubPropertiesOfShorthandProperties.entries()) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreShorthands', shorthand)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (const longhand of longhandProps) {\n\t\t\t\tconst shorthands = longhandToShorthands.get(longhand) || [];\n\n\t\t\t\tshorthands.push(shorthand);\n\t\t\t\tlonghandToShorthands.set(longhand, shorthands);\n\t\t\t}\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Map<string, string[]>} */\n\t\t\tconst longhandDeclarations = new Map();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tif (IGNORED_VALUES.has(decl.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst prop = decl.prop.toLowerCase();\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop);\n\n\t\t\t\tconst shorthandProperties = longhandToShorthands.get(unprefixedProp);\n\n\t\t\t\tif (!shorthandProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const shorthandProperty of shorthandProperties) {\n\t\t\t\t\tconst prefixedShorthandProperty = prefix + shorthandProperty;\n\t\t\t\t\tconst longhandDeclaration = longhandDeclarations.get(prefixedShorthandProperty) || [];\n\n\t\t\t\t\tlonghandDeclaration.push(prop);\n\t\t\t\t\tlonghandDeclarations.set(prefixedShorthandProperty, longhandDeclaration);\n\n\t\t\t\t\tconst shorthandProps = /** @type {Map<string, Set<string>>} */ (\n\t\t\t\t\t\tlonghandSubPropertiesOfShorthandProperties\n\t\t\t\t\t).get(shorthandProperty);\n\t\t\t\t\tconst prefixedShorthandData = Array.from(shorthandProps || []).map(\n\t\t\t\t\t\t(item) => prefix + item,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!arrayEqual(prefixedShorthandData.sort(), longhandDeclaration.sort())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tword: decl.prop,\n\t\t\t\t\t\tmessage: messages.expected(prefixedShorthandProperty),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var SKIP = 'skip';\nvar CHECK = 'check';\nvar ONLY = 'only';\n\nmodule.exports = function (options, callback) {\n  var source = options.source;\n  var target = options.target;\n\n  var skipComments = (options.comments) ? options.comments === SKIP : true;\n  var skipStrings = (options.strings) ? options.strings === SKIP : true;\n  var skipFunctionNames = (options.functionNames) ? options.functionNames === SKIP : true;\n  var skipFunctionArguments = options.functionArguments === SKIP;\n  var skipParentheticals = options.parentheticals === SKIP;\n\n  var onceOptionUsed = false;\n  Object.keys(options).forEach(function(key) {\n    if (options[key] !== ONLY) return;\n    if (!onceOptionUsed) {\n      onceOptionUsed = true;\n    } else {\n      throw new Error('Only one syntax feature option can be the \"only\" one to check');\n    }\n  });\n\n  var onlyComments = options.comments === ONLY;\n  var onlyStrings = options.strings === ONLY;\n  var onlyFunctionNames = options.functionNames === ONLY;\n  var onlyFunctionArguments = options.functionArguments === ONLY;\n  var onlyParentheticals = options.parentheticals === ONLY;\n\n  var insideString = false;\n  var insideComment = false;\n  var insideSingleLineComment = false;\n  var insideParens = false;\n  var insideFunctionArguments = false;\n  var openingParenCount = 0;\n  var matchCount = 0;\n  var openingQuote;\n\n  var targetIsArray = Array.isArray(target);\n\n  // If the target is just a string, it is easy to check whether\n  // some index of the source matches it.\n  // If the target is an array of strings, though, we have to\n  // check whether some index of the source matches *any* of\n  // those target strings (stopping after the first match).\n  var getMatch = (function () {\n    if (!targetIsArray) {\n      return getMatchBase.bind(null, target);\n    }\n    return function(index) {\n      for (var ti = 0, tl = target.length; ti < tl; ti++) {\n        var checkResult = getMatchBase(target[ti], index);\n        if (checkResult) return checkResult;\n      }\n      return false;\n    }\n  })();\n\n  function getMatchBase(targetString, index) {\n    var targetStringLength = targetString.length;\n\n    // Target is a single character\n    if (targetStringLength === 1 && source[index] !== targetString) return false;\n\n    // Target is multiple characters\n    if (source.substr(index, targetStringLength) !== targetString) return false;\n\n    return {\n      insideParens: insideParens,\n      insideFunctionArguments: insideFunctionArguments,\n      insideComment: insideComment,\n      insideString: insideString,\n      startIndex: index,\n      endIndex: index + targetStringLength,\n      target: targetString,\n    };\n  }\n\n  for (var i = 0, l = source.length; i < l; i++) {\n    var currentChar = source[i];\n\n    // Register the beginning of a comment\n    if (\n      !insideString && !insideComment\n      && currentChar === \"/\"\n      && source[i - 1] !== \"\\\\\" // escaping\n    ) {\n      // standard comments\n      if (source[i + 1] === \"*\") {\n        insideComment = true;\n        continue;\n      }\n      // single-line comments\n      if (source[i + 1] === \"/\") {\n        insideComment = true;\n        insideSingleLineComment = true;\n        continue;\n      }\n    }\n\n    if (insideComment) {\n      // Register the end of a standard comment\n      if (\n        !insideSingleLineComment\n        && currentChar === \"*\"\n        && source[i - 1] !== \"\\\\\" // escaping\n        && source[i + 1] === \"/\"\n        && source[i - 1] !== \"/\" // don't end if it's /*/\n      ) {\n        insideComment = false;\n        continue;\n      }\n\n      // Register the end of a single-line comment\n      if (\n        insideSingleLineComment\n        && currentChar === \"\\n\"\n      ) {\n        insideComment = false;\n        insideSingleLineComment = false;\n      }\n\n      if (skipComments) continue;\n    }\n\n    // Register the beginning of a string\n    if (!insideComment && !insideString && (currentChar === \"\\\"\" || currentChar === \"'\")) {\n      if (source[i - 1] === \"\\\\\") continue; // escaping\n\n      openingQuote = currentChar;\n      insideString = true;\n\n      // For string-quotes rule\n      if (target === currentChar) handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideString) {\n      // Register the end of a string\n      if (currentChar === openingQuote) {\n        if (source[i - 1] === \"\\\\\") continue; // escaping\n        insideString = false;\n        continue;\n      }\n\n      if (skipStrings) continue;\n    }\n\n    // Register the beginning of parens/functions\n    if (!insideString && !insideComment && currentChar === \"(\") {\n      // Keep track of opening parentheticals so that we\n      // know when the outermost function (possibly\n      // containing nested functions) is closing\n      openingParenCount++;\n\n      insideParens = true;\n      // Only inside a function if there is a function name\n      // before the opening paren\n      if (/[a-zA-Z]/.test(source[i - 1])) {\n        insideFunctionArguments = true;\n      }\n\n      if (target === \"(\") handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideParens) {\n      // Register the end of a function\n      if (currentChar === \")\") {\n        openingParenCount--;\n        // Do this here so the match is still technically inside a function\n        if (target === \")\") handleMatch(getMatch(i));\n        if (openingParenCount === 0) {\n          insideParens = false;\n          insideFunctionArguments = false;\n        }\n        continue;\n      }\n    }\n\n    var isFunctionName = /^[a-zA-Z]*\\(/.test(source.slice(i));\n    if (skipFunctionNames && isFunctionName) continue;\n    if (onlyFunctionNames && !isFunctionName) continue;\n\n    var match = getMatch(i);\n\n    if (!match) continue;\n    handleMatch(match);\n    if (options.once) return;\n  }\n\n  function handleMatch(match) {\n    if (onlyParentheticals && !insideParens) return;\n    if (skipParentheticals && insideParens) return;\n    if (onlyFunctionArguments && !insideFunctionArguments) return;\n    if (skipFunctionArguments && insideFunctionArguments) return;\n    if (onlyStrings && !insideString) return;\n    if (onlyComments && !insideComment) return;\n    matchCount++;\n    callback(match, matchCount);\n  }\n}\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix: ((decl: Declaration, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function declarationBangSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst indexOffset = declarationValueIndex(decl);\n\t\tconst declString = decl.toString();\n\t\tconst valueString = decl.toString().slice(indexOffset);\n\n\t\tif (!valueString.includes('!')) {\n\t\t\treturn;\n\t\t}\n\n\t\tstyleSearch({ source: valueString, target: '!' }, (match) => {\n\t\t\tcheck(declString, match.startIndex + indexOffset, decl);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {Declaration} decl\n\t */\n\tfunction check(source, index, decl) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(decl, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"!\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-bang-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(val: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < value.length) {\n\t\t\t\t\t\t\ttarget = value;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, val);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= value.length;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = val;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + ' ' + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-no-duplicate-custom-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-custom-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst decls = new Set();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isDuplicate = decls.has(prop);\n\n\t\t\t\tif (isDuplicate) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdecls.add(prop);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-duplicate-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-properties',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'consecutive-duplicates',\n\t\t\t\t\t\t'consecutive-duplicates-with-different-values',\n\t\t\t\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t\t\t\t],\n\t\t\t\t\tignoreProperties: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDuplicates = optionsMatches(secondaryOptions, 'ignore', 'consecutive-duplicates');\n\t\tconst ignoreDiffValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-different-values',\n\t\t);\n\t\tconst ignorePrefixlessSameValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {import('postcss').Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst lowerProp = decl.prop.toLowerCase();\n\t\t\t\tconst value = decl.value;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if the property is to be ignored\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore the src property as commonly duplicated in at-fontface\n\t\t\t\tif (lowerProp === 'src') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst indexDuplicate = decls.findIndex((d) => d.prop.toLowerCase() === lowerProp);\n\n\t\t\t\tif (indexDuplicate !== -1) {\n\t\t\t\t\tif (ignoreDiffValues || ignorePrefixlessSameValues) {\n\t\t\t\t\t\t// fails if duplicates are not consecutive\n\t\t\t\t\t\tif (indexDuplicate !== decls.length - 1) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst duplicateDecl = decls[indexDuplicate];\n\t\t\t\t\t\tconst duplicateValue = duplicateDecl ? duplicateDecl.value : '';\n\n\t\t\t\t\t\tif (ignorePrefixlessSameValues) {\n\t\t\t\t\t\t\t// fails if values of consecutive, unprefixed duplicates are equal\n\t\t\t\t\t\t\tif (vendor.unprefixed(value) !== vendor.unprefixed(duplicateValue)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fails if values of consecutive duplicates are equal\n\t\t\t\t\t\tif (value === duplicateValue) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ignoreDuplicates && indexDuplicate === decls.length - 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdecls.push(decl);\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration[]} declarations\n * @param {string} lowerProperty\n * @returns {void}\n * */\nfunction removePreviousDuplicate(declarations, lowerProperty) {\n\tconst declToRemove = declarations.find((d) => d.prop.toLowerCase() === lowerProperty);\n\n\tif (declToRemove) declToRemove.remove();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \";\" in a multi-line declaration block',\n\trejectedAfterMultiLine: () => 'Unexpected newline after \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = decl.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheck.raws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheck.raws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheck.raws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheck.raws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\tnodeToCheck.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"!\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-bang-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(value: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < declValue.length) {\n\t\t\t\t\t\t\ttarget = declValue;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= declValue.length;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex + 1);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex + 1);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-trailing-semicolon';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a trailing semicolon',\n\trejected: 'Unexpected trailing semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-trailing-semicolon',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['single-declaration'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!atRule.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (atRule.parent === root) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (atRule !== atRule.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(atRule);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (decl.parent.type === 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl !== decl.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkLastNode(node) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tconst hasSemicolon = node.parent.raws.semicolon;\n\t\t\tconst ignoreSingleDeclaration = optionsMatches(\n\t\t\t\tsecondaryOptions,\n\t\t\t\t'ignore',\n\t\t\t\t'single-declaration',\n\t\t\t);\n\n\t\t\tif (ignoreSingleDeclaration && node.parent.first === node) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet message;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tif (hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = true;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.raws.between = '';\n\t\t\t\t\t\tnode.parent.raws.after = ' ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.expected;\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tif (!hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.rejected;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected primary option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex: node.toString().trim().length - 1,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { longhandSubPropertiesOfShorthandProperties } = require('../../reference/properties');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-shorthand-property-overrides',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Map<string, string>} */\n\t\t\tconst declarations = new Map();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop).toLowerCase();\n\t\t\t\tconst prefix = vendor.prefix(prop).toLowerCase();\n\n\t\t\t\tconst overrideables = /** @type {Map<string, Set<string>>} */ (\n\t\t\t\t\tlonghandSubPropertiesOfShorthandProperties\n\t\t\t\t).get(unprefixedProp);\n\n\t\t\t\tif (!overrideables) {\n\t\t\t\t\tdeclarations.set(prop.toLowerCase(), prop);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const longhandProp of overrideables) {\n\t\t\t\t\tconst declaration = declarations.get(prefix + longhandProp);\n\n\t\t\t\t\tif (!declaration) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.rejected(prop, declaration || ''),\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isScssVariable = require('./isScssVariable');\nconst { isRoot, isRule } = require('./typeGuards');\n\n/**\n * @param {string} [lang]\n */\nfunction isStandardSyntaxLang(lang) {\n\treturn lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\nmodule.exports = function isStandardSyntaxDeclaration(decl) {\n\tconst prop = decl.prop;\n\tconst parent = decl.parent;\n\n\t// Declarations belong in a declaration block or standard CSS source\n\tif (\n\t\tparent &&\n\t\tisRoot(parent) &&\n\t\tparent.source &&\n\t\t!isStandardSyntaxLang(\n\t\t\t/** @type {import('postcss').Source & {lang?: string}} */ (parent.source).lang,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// SCSS var; covers map and list declarations\n\tif (isScssVariable(prop)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\tif (prop[0] === '@' && prop[1] !== '{') {\n\t\treturn false;\n\t}\n\n\t// Less map declaration\n\tif (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {\n\t\treturn false;\n\t}\n\n\t// Less map (e.g. #my-map() { myprop: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector.startsWith('#') &&\n\t\tparent.selector.endsWith('()')\n\t) {\n\t\treturn false;\n\t}\n\n\t// Sass nested properties (e.g. border: { style: solid; color: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector[parent.selector.length - 1] === ':' &&\n\t\tparent.selector.substring(0, 2) !== '--'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Less &:extend\n\tif ('extend' in decl && decl.extend) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst report = require('../utils/report');\n\n/** @typedef {(args: { source: string, index: number, lineCheckStr: string, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((decl: import('postcss').Declaration, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function declarationColonSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the raw prop, and only the prop\n\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\topts.locationChecker({\n\t\t\t\tsource: propPlusColon,\n\t\t\t\tindex: i,\n\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\terr: (message) => {\n\t\t\t\t\tif (opts.fix && opts.fix(decl, i)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.prop.toString().length + 1,\n\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t});\n};\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \":\" with a single-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ': ');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ':');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n\texpectedBeforeSingleLine: () =>\n\t\t'Expected single space before \";\" in a single-line declaration block',\n\trejectedBeforeSingleLine: () =>\n\t\t'Unexpected whitespace before \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.before({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = ' !important ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ' '));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tif (decl.raws.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ''));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isCustomProperty = require('./isCustomProperty');\nconst isStandardSyntaxDeclaration = require('./isStandardSyntaxDeclaration');\nconst { isDeclaration } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function isAfterStandardPropertyDeclaration(node) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(node);\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tisDeclaration(prevNode) &&\n\t\tisStandardSyntaxDeclaration(prevNode) &&\n\t\t!isCustomProperty(prevNode.prop || '')\n\t);\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isAfterStandardPropertyDeclaration = require('../../utils/isAfterStandardPropertyDeclaration');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isRule, isRoot } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before declaration',\n\trejected: 'Unexpected empty line before declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-declaration'],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'after-declaration',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-single-line-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAtRule(parent) && !isRule(parent) && !isRoot(parent)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a declaration precedes it\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'after-declaration') &&\n\t\t\t\tisAfterStandardPropertyDeclaration(decl)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-declaration') &&\n\t\t\t\t\tisAfterStandardPropertyDeclaration(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: decl, result, ruleName });\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Returns a position of `!important` (or `! important` including whitespaces)\n * from the specified CSS source code. If not found, returns `undefined`.\n *\n * @param {string} source\n * @returns {{ index: number, endIndex: number } | undefined}\n */\nmodule.exports = function getImportantPosition(source) {\n\tconst pattern = /!\\s*important\\b/gi;\n\tconst match = pattern.exec(source);\n\n\tif (!match) return;\n\n\treturn { index: match.index, endIndex: pattern.lastIndex };\n};\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.important) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\tassert(pos);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex: pos.index,\n\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \";\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n\trejectedBeforeMultiLine: () =>\n\t\t'Unexpected whitespace before \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst propKeys = Object.keys(primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propPatterns = propKeys.filter((key) => matchesStringOrRegExp(unprefixedProp, key));\n\n\t\t\tif (propPatterns.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (propPatterns.some((pattern) => optionsMatches(primary, pattern, value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {string} source\n *\n * @returns {string}\n */\nmodule.exports = function blurInterpolation(source, blurChar = ' ') {\n\treturn source.replace(/[#@{}]+/g, blurChar);\n};\n","'use strict';\n\nconst blurInterpolation = require('./blurInterpolation');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Get Dimension from value node;\n * `unit` and `number` return null if neither is found\n *\n * @param {import('postcss-value-parser').Node} node\n *\n * @returns {{unit: null, number: null} | valueParser.Dimension}\n */\nmodule.exports = function getDimension(node) {\n\tif (!node || !node.value) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore non-word nodes\n\tif (node.type !== 'word') {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore non standard syntax\n\tif (!isStandardSyntaxValue(node.value)) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore HEX\n\tif (node.value.startsWith('#')) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Remove non standard stuff\n\tconst value = blurInterpolation(node.value, '')\n\t\t// ignore hack unit\n\t\t.replace('\\\\0', '')\n\t\t.replace('\\\\9', '');\n\n\tconst parsedUnit = valueParser.unit(value);\n\n\tif (!parsedUnit) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\treturn parsedUnit;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getDimension = require('../../utils/getDimension');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-unit-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\tif (!unit || (unit && !propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst vendor = require('../../utils/vendor');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, assertNumber } = require('../../utils/validateTypes');\nconst validateObjectWithProps = require('../../utils/validateObjectWithProps');\n\nconst ruleName = 'declaration-property-max-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, max) =>\n\t\t`Expected \"${property}\" to have no more than ${max} ${max === 1 ? 'value' : 'values'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-max-values',\n};\n\n/**\n * @param {valueParser.Node} node\n */\nconst isValueNode = (node) => {\n\treturn node.type === 'word' || node.type === 'function' || node.type === 'string';\n};\n\n/** @type {import('stylelint').Rule<Record<string, number>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithProps(isNumber)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\t\t\tconst propLength = valueParser(value).nodes.filter(isValueNode).length;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max = primary[propKey];\n\n\t\t\tassertNumber(max);\n\n\t\t\tif (propLength <= max) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, max),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties agree with the provided validator.\n *\n * @example\n * config = {\n *   value1: 1,\n *   value2: 2,\n *   value3: 3,\n * };\n * validateObjectWithProps(isNumber)(config);\n * //=> true\n *\n * @param {(value: unknown) => boolean} validator\n * @returns {(value: unknown) => boolean}\n */\nmodule.exports = (validator) => (value) => {\n\tif (!isPlainObject(value)) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(value).every((item) => {\n\t\treturn validator(item);\n\t});\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \":\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \":\" with a multi-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the raw prop, and only the prop\n\t\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst indexToCheck = /^[^\\S\\r\\n]*\\/\\*/.test(propPlusColon.slice(i + 1))\n\t\t\t\t\t? propPlusColon.indexOf('*/', i) + 1\n\t\t\t\t\t: i;\n\n\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\tsource: propPlusColon,\n\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\t\tconst betweenStart = declarationValueIndex(decl) - between.length;\n\t\t\t\t\t\t\tconst sliceIndex = indexToCheck - betweenStart + 1;\n\t\t\t\t\t\t\tconst betweenBefore = between.slice(0, sliceIndex);\n\t\t\t\t\t\t\tconst betweenAfter = between.slice(sliceIndex);\n\n\t\t\t\t\t\t\tdecl.raws.between = /^\\s*\\n/.test(betweenAfter)\n\t\t\t\t\t\t\t\t? betweenBefore + betweenAfter.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t\t: betweenBefore + context.newline + betweenAfter;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getDimension = require('../../utils/getDimension');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tif (node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function')) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\tif (!unit || (unit && propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether it's a number or a number-like string:\n * i.e. when coerced to a number it == itself.\n *\n * @param {string | number} value\n */\nmodule.exports = function isNumbery(value) {\n\treturn value.toString().trim().length !== 0 && Number(value) == value; // eslint-disable-line eqeqeq\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst basicKeywords = new Set(['initial', 'inherit', 'revert', 'revert-layer', 'unset']);\n\nconst systemFontKeywords = uniteSets(basicKeywords, [\n\t'caption',\n\t'icon',\n\t'menu',\n\t'message-box',\n\t'small-caption',\n\t'status-bar',\n]);\n\nconst fontFamilyKeywords = uniteSets(basicKeywords, [\n\t'serif',\n\t'sans-serif',\n\t'cursive',\n\t'fantasy',\n\t'monospace',\n\t'system-ui',\n\t'ui-serif',\n\t'ui-sans-serif',\n\t'ui-monospace',\n\t'ui-rounded',\n]);\n\nconst fontWeightRelativeKeywords = new Set(['bolder', 'lighter']);\n\nconst fontWeightAbsoluteKeywords = new Set(['normal', 'bold']);\n\nconst fontWeightNonNumericKeywords = uniteSets(\n\tfontWeightRelativeKeywords,\n\tfontWeightAbsoluteKeywords,\n);\n\nconst fontWeightNumericKeywords = new Set([\n\t'100',\n\t'200',\n\t'300',\n\t'400',\n\t'500',\n\t'600',\n\t'700',\n\t'800',\n\t'900',\n]);\n\nconst fontWeightKeywords = uniteSets(\n\tbasicKeywords,\n\tfontWeightNonNumericKeywords,\n\tfontWeightNumericKeywords,\n);\n\nconst fontStyleKeywords = uniteSets(basicKeywords, ['normal', 'italic', 'oblique']);\n\nconst fontVariantKeywords = uniteSets(basicKeywords, [\n\t'normal',\n\t'none',\n\t'historical-forms',\n\t'none',\n\t'common-ligatures',\n\t'no-common-ligatures',\n\t'discretionary-ligatures',\n\t'no-discretionary-ligatures',\n\t'historical-ligatures',\n\t'no-historical-ligatures',\n\t'contextual',\n\t'no-contextual',\n\t'small-caps',\n\t'small-caps',\n\t'all-small-caps',\n\t'petite-caps',\n\t'all-petite-caps',\n\t'unicase',\n\t'titling-caps',\n\t'lining-nums',\n\t'oldstyle-nums',\n\t'proportional-nums',\n\t'tabular-nums',\n\t'diagonal-fractions',\n\t'stacked-fractions',\n\t'ordinal',\n\t'slashed-zero',\n\t'jis78',\n\t'jis83',\n\t'jis90',\n\t'jis04',\n\t'simplified',\n\t'traditional',\n\t'full-width',\n\t'proportional-width',\n\t'ruby',\n]);\n\nconst fontStretchKeywords = uniteSets(basicKeywords, [\n\t'semi-condensed',\n\t'condensed',\n\t'extra-condensed',\n\t'ultra-condensed',\n\t'semi-expanded',\n\t'expanded',\n\t'extra-expanded',\n\t'ultra-expanded',\n]);\n\nconst fontSizeKeywords = uniteSets(basicKeywords, [\n\t'xx-small',\n\t'x-small',\n\t'small',\n\t'medium',\n\t'large',\n\t'x-large',\n\t'xx-large',\n\t'larger',\n\t'smaller',\n]);\n\nconst lineHeightKeywords = uniteSets(basicKeywords, ['normal']);\n\nconst fontShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tfontStyleKeywords,\n\tfontVariantKeywords,\n\tfontWeightKeywords,\n\tfontStretchKeywords,\n\tfontSizeKeywords,\n\tlineHeightKeywords,\n\tfontFamilyKeywords,\n);\n\nconst animationNameKeywords = uniteSets(basicKeywords, ['none']);\n\nconst animationTimingFunctionKeywords = uniteSets(basicKeywords, [\n\t'linear',\n\t'ease',\n\t'ease-in',\n\t'ease-in-out',\n\t'ease-out',\n\t'step-start',\n\t'step-end',\n\t'steps',\n\t'cubic-bezier',\n]);\n\nconst animationIterationCountKeywords = new Set(['infinite']);\n\nconst animationDirectionKeywords = uniteSets(basicKeywords, [\n\t'normal',\n\t'reverse',\n\t'alternate',\n\t'alternate-reverse',\n]);\n\nconst animationFillModeKeywords = new Set(['none', 'forwards', 'backwards', 'both']);\n\nconst animationPlayStateKeywords = uniteSets(basicKeywords, ['running', 'paused']);\n\n// cf. https://developer.mozilla.org/en-US/docs/Web/CSS/animation\nconst animationShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tanimationNameKeywords,\n\tanimationTimingFunctionKeywords,\n\tanimationIterationCountKeywords,\n\tanimationDirectionKeywords,\n\tanimationFillModeKeywords,\n\tanimationPlayStateKeywords,\n);\n\nconst gridRowKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\nconst gridColumnKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\nconst gridAreaKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\n// https://developer.mozilla.org/docs/Web/CSS/counter-increment\nconst counterIncrementKeywords = uniteSets(basicKeywords, ['none']);\n\nconst counterResetKeywords = uniteSets(basicKeywords, ['none']);\n\n// https://developer.mozilla.org/ru/docs/Web/CSS/list-style-type\nconst listStyleTypeKeywords = uniteSets(basicKeywords, [\n\t'none',\n\t'disc',\n\t'circle',\n\t'square',\n\t'decimal',\n\t'cjk-decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-greek',\n\t'lower-alpha',\n\t'lower-latin',\n\t'upper-alpha',\n\t'upper-latin',\n\t'arabic-indic',\n\t'armenian',\n\t'bengali',\n\t'cambodian',\n\t'cjk-earthly-branch',\n\t'cjk-ideographic',\n\t'devanagari',\n\t'ethiopic-numeric',\n\t'georgian',\n\t'gujarati',\n\t'gurmukhi',\n\t'hebrew',\n\t'hiragana',\n\t'hiragana-iroha',\n\t'japanese-formal',\n\t'japanese-informal',\n\t'kannada',\n\t'katakana',\n\t'katakana-iroha',\n\t'khmer',\n\t'korean-hangul-formal',\n\t'korean-hanja-formal',\n\t'korean-hanja-informal',\n\t'lao',\n\t'lower-armenian',\n\t'malayalam',\n\t'mongolian',\n\t'myanmar',\n\t'oriya',\n\t'persian',\n\t'simp-chinese-formal',\n\t'simp-chinese-informal',\n\t'tamil',\n\t'telugu',\n\t'thai',\n\t'tibetan',\n\t'trad-chinese-formal',\n\t'trad-chinese-informal',\n\t'upper-armenian',\n\t'disclosure-open',\n\t'disclosure-closed',\n\t// Non-standard extensions (without prefixe)\n\t'ethiopic-halehame',\n\t'ethiopic-halehame-am',\n\t'ethiopic-halehame-ti-er',\n\t'ethiopic-halehame-ti-et',\n\t'hangul',\n\t'hangul-consonant',\n\t'urdu',\n]);\n\nconst listStylePositionKeywords = uniteSets(basicKeywords, ['inside', 'outside']);\n\nconst listStyleImageKeywords = uniteSets(basicKeywords, ['none']);\n\nconst listStyleShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tlistStyleTypeKeywords,\n\tlistStylePositionKeywords,\n\tlistStyleImageKeywords,\n);\n\nconst camelCaseKeywords = new Set([\n\t'optimizeSpeed',\n\t'optimizeQuality',\n\t'optimizeLegibility',\n\t'geometricPrecision',\n\t'currentColor',\n\t'crispEdges',\n\t'visiblePainted',\n\t'visibleFill',\n\t'visibleStroke',\n\t'sRGB',\n\t'linearRGB',\n]);\n\nconst keyframeSelectorKeywords = new Set(['from', 'to']);\n\n// https://www.w3.org/TR/CSS22/ui.html#system-colors\nconst systemColorsKeywords = new Set([\n\t'activeborder',\n\t'activecaption',\n\t'appworkspace',\n\t'background',\n\t'buttonface',\n\t'buttonhighlight',\n\t'buttonshadow',\n\t'buttontext',\n\t'captiontext',\n\t'graytext',\n\t'highlight',\n\t'highlighttext',\n\t'inactiveborder',\n\t'inactivecaption',\n\t'inactivecaptiontext',\n\t'infobackground',\n\t'infotext',\n\t'menu',\n\t'menutext',\n\t'scrollbar',\n\t'threeddarkshadow',\n\t'threedface',\n\t'threedhighlight',\n\t'threedlightshadow',\n\t'threedshadow',\n\t'window',\n\t'windowframe',\n\t'windowtext',\n]);\n\nmodule.exports = {\n\tanimationNameKeywords,\n\tanimationShorthandKeywords,\n\tbasicKeywords,\n\tcamelCaseKeywords,\n\tcounterIncrementKeywords,\n\tcounterResetKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n\tfontSizeKeywords,\n\tfontWeightAbsoluteKeywords,\n\tfontWeightKeywords,\n\tfontWeightNonNumericKeywords,\n\tfontWeightRelativeKeywords,\n\tgridAreaKeywords,\n\tgridColumnKeywords,\n\tgridRowKeywords,\n\tkeyframeSelectorKeywords,\n\tlistStyleImageKeywords,\n\tlistStylePositionKeywords,\n\tlistStyleShorthandKeywords,\n\tlistStyleTypeKeywords,\n\tsystemColorsKeywords,\n\tsystemFontKeywords,\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst lengthUnits = new Set([\n\t// Font-relative length units\n\t'cap',\n\t'ch',\n\t'em',\n\t'ex',\n\t'ic',\n\t'lh',\n\t'rcap',\n\t'rch',\n\t'rem',\n\t'rex',\n\t'ric',\n\t'rlh',\n\t// Viewport-percentage lengths\n\t'dvb',\n\t'dvh',\n\t'dvi',\n\t'dvmax',\n\t'dvmin',\n\t'dvw',\n\t'lvb',\n\t'lvh',\n\t'lvi',\n\t'lvmax',\n\t'lvmin',\n\t'lvw',\n\t'svb',\n\t'svh',\n\t'svi',\n\t'svmax',\n\t'svmin',\n\t'svw',\n\t'vb',\n\t'vh',\n\t'vi',\n\t'vw',\n\t'vmin',\n\t'vmax',\n\t'vm',\n\t// Absolute length units\n\t'px',\n\t'mm',\n\t'cm',\n\t'in',\n\t'pt',\n\t'pc',\n\t'q',\n\t'mozmm',\n\t// Flexible length units\n\t'fr',\n\t// Container query units\n\t'cqw',\n\t'cqh',\n\t'cqi',\n\t'cqb',\n\t'cqmin',\n\t'cqmax',\n]);\n\nconst units = uniteSets(lengthUnits, [\n\t// Relative length units\n\t'%',\n\t// Time length units\n\t's',\n\t'ms',\n\t// Angle\n\t'deg',\n\t'grad',\n\t'turn',\n\t'rad',\n\t// Frequency\n\t'Hz',\n\t'kHz',\n\t// Resolution\n\t'dpi',\n\t'dpcm',\n\t'dppx',\n]);\n\nmodule.exports = {\n\tlengthUnits,\n\tunits,\n};\n","'use strict';\n\nconst { fontSizeKeywords } = require('../reference/keywords');\nconst { lengthUnits } = require('../reference/units');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Check if a word is a font-size value.\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function isValidFontSize(word) {\n\tif (!word) {\n\t\treturn false;\n\t}\n\n\tif (fontSizeKeywords.has(word)) {\n\t\treturn true;\n\t}\n\n\tconst numberUnit = valueParser.unit(word);\n\n\tif (!numberUnit) {\n\t\treturn false;\n\t}\n\n\tconst unit = numberUnit.unit;\n\n\tif (unit === '%') {\n\t\treturn true;\n\t}\n\n\tif (lengthUnits.has(unit.toLowerCase())) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * Check whether a word is a variable i.e var(--custom-property).\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function isVariable(word) {\n\treturn word.toLowerCase().startsWith('var(');\n};\n","'use strict';\n\nconst postcssValueParser = require('postcss-value-parser');\n\nconst isNumbery = require('./isNumbery');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isValidFontSize = require('./isValidFontSize');\nconst isVariable = require('./isVariable');\nconst { assert } = require('./validateTypes');\nconst {\n\tbasicKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n} = require('../reference/keywords');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n\tfirstNode.value = firstNode.value + charactersBetween + secondNode.value;\n\n\treturn firstNode;\n}\n\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @returns {Node[]} Collection font-family nodes\n */\nmodule.exports = function findFontFamily(value) {\n\t/** @type {Node[]} */\n\tconst fontFamilies = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes: children } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (children.length === 1 && children[0] && basicKeywords.has(children[0].value.toLowerCase())) {\n\t\treturn [children[0]];\n\t}\n\n\tlet needMergeNodesByValue = false;\n\t/** @type {string | null} */\n\tlet mergeCharacters = null;\n\n\tvalueNodes.walk((valueNode, index, nodes) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!nodeTypesToCheck.has(valueNode.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other font parts\n\t\tif (fontShorthandKeywords.has(valueLowerCase) && !fontFamilyKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore font-sizes\n\t\tif (isValidFontSize(valueNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst prevPrevNode = nodes[index - 2];\n\n\t\t// Ignore anything come after a <font-size>/, because it's a line-height\n\t\tif (prevNode && prevNode.value === '/' && prevPrevNode && isValidFontSize(prevPrevNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore number values\n\t\tif (isNumbery(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\t\tif (\n\t\t\t(valueNode.type === 'space' || (valueNode.type === 'div' && valueNode.value !== ',')) &&\n\t\t\tfontFamilies.length !== 0\n\t\t) {\n\t\t\tneedMergeNodesByValue = true;\n\t\t\tmergeCharacters = valueNode.value;\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (valueNode.type === 'space' || valueNode.type === 'div') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontFamily = valueNode;\n\n\t\tif (needMergeNodesByValue) {\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\t\t\tjoinValueNodes(lastFontFamily, fontFamily, mergeCharacters);\n\t\t\tneedMergeNodesByValue = false;\n\t\t\tmergeCharacters = null;\n\t\t} else {\n\t\t\tfontFamilies.push(fontFamily);\n\t\t}\n\t});\n\n\treturn fontFamilies;\n};\n","'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst { fontFamilyKeywords } = require('../../reference/keywords');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (family) => `Expected quotes around \"${family}\"`,\n\trejected: (family) => `Unexpected quotes around \"${family}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-name-quotes',\n\tfixable: true,\n};\n\n/**\n * @param {string} font\n * @returns {boolean}\n */\nfunction isSystemFontKeyword(font) {\n\tif (font.startsWith('-apple-')) {\n\t\treturn true;\n\t}\n\n\tif (font === 'BlinkMacSystemFont') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * \"To avoid mistakes in escaping, it is recommended to quote font family names\n * that contain white space, digits, or punctuation characters other than hyphens\"\n * (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRecommended(family) {\n\treturn !/^[-a-zA-Z]+$/.test(family);\n}\n\n/**\n * Quotes are required if the family is not a valid CSS identifier\n * (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRequired(family) {\n\treturn family\n\t\t.split(/\\s+/)\n\t\t.some((word) => /^(?:-?\\d|--)/.test(word) || !/^[-\\w\\u{00A0}-\\u{10FFFF}]+$/u.test(word));\n}\n\n/**\n * @typedef {{\n *   name: string,\n *   rawName: string,\n *   hasQuotes: boolean,\n *   sourceIndex: number,\n *   resetIndexes: (offset: number) => void,\n *   removeQuotes: () => void,\n *   addQuotes: () => void,\n * }} MutableNode\n */\n\n/**\n *\n * @param {import('postcss-value-parser').Node[]} fontFamilies\n * @param {import('postcss').Declaration} decl\n * @returns {MutableNode[]}\n */\nconst makeMutableFontFamilies = (fontFamilies, decl) => {\n\t/**\n\t * @type {MutableNode[]}\n\t */\n\tconst mutableNodes = [];\n\n\tfontFamilies.forEach((fontFamily, idx) => {\n\t\tconst quote = 'quote' in fontFamily && fontFamily.quote;\n\t\tconst name = fontFamily.value;\n\n\t\t/** @type {MutableNode} */\n\t\tconst newNode = {\n\t\t\tname,\n\t\t\trawName: quote ? `${quote}${name}${quote}` : name,\n\t\t\tsourceIndex: fontFamily.sourceIndex,\n\t\t\thasQuotes: Boolean(quote),\n\t\t\tresetIndexes(offset) {\n\t\t\t\tmutableNodes.slice(idx + 1).forEach((n) => (n.sourceIndex += offset));\n\t\t\t},\n\t\t\tremoveQuotes() {\n\t\t\t\tif (this.hasQuotes === false) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length + 2;\n\n\t\t\t\tthis.hasQuotes = false;\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + this.name + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(-2);\n\t\t\t},\n\t\t\taddQuotes() {\n\t\t\t\tif (this.hasQuotes === true) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length;\n\n\t\t\t\tthis.hasQuotes = true;\n\t\t\t\tconst fixedName = `\"${this.name}\"`;\n\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + fixedName + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(2);\n\t\t\t},\n\t\t};\n\n\t\tmutableNodes.push(newNode);\n\t});\n\n\treturn mutableNodes;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tif (!isStandardSyntaxValue(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fontFamilyNodes = makeMutableFontFamilies(findFontFamily(decl.value), decl);\n\n\t\t\tif (fontFamilyNodes.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilyNodes) {\n\t\t\t\tcheckFamilyName(fontFamilyNode, decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {MutableNode} fontFamilyNode\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFamilyName(fontFamilyNode, decl) {\n\t\t\tconst { name: family, rawName: rawFamily, hasQuotes } = fontFamilyNode;\n\n\t\t\tif (isVariable(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Disallow quotes around (case-insensitive) keywords\n\t\t\t// and system font keywords in all cases\n\t\t\tif (fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst required = quotesRequired(family);\n\t\t\tconst recommended = quotesRecommended(family);\n\n\t\t\tswitch (primary) {\n\t\t\t\tcase 'always-unless-keyword':\n\t\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-recommended':\n\t\t\t\t\tif (!recommended && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recommended && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-required':\n\t\t\t\t\tif (!required && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (required && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {string} family\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, family, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tword: family,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"}\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nextNode);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-value-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst propKeys = Object.keys(primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propPatterns = propKeys.filter((key) => matchesStringOrRegExp(unprefixedProp, key));\n\n\t\t\tif (propPatterns.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (propPatterns.every((pattern) => !optionsMatches(primary, pattern, value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","export default {\n  cwd: () => \"/\",\n  env: {\n    NO_COLOR: \"true\",\n    FORCE_COLOR: \"false\"\n  },\n  argv: []\n};\n","let tty = require(\"tty\")\n\nlet isColorSupported =\n\t!(\"NO_COLOR\" in process.env || process.argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in process.env ||\n\t\tprocess.argv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(tty.isatty(1) && process.env.TERM !== \"dumb\") ||\n\t\t\"CI\" in process.env)\n\nlet formatter =\n\t(open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input\n\t\tlet index = string.indexOf(close, open.length)\n\t\treturn ~index\n\t\t\t? open + replaceClose(string, close, replace, index) + close\n\t\t\t: open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet start = string.substring(0, index) + replace\n\tlet end = string.substring(index + close.length)\n\tlet nextIndex = end.indexOf(close)\n\treturn ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end\n}\n\nlet createColors = (enabled = isColorSupported) => ({\n\tisColorSupported: enabled,\n\treset: enabled ? s => `\\x1b[0m${s}\\x1b[0m` : String,\n\tbold: enabled ? formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\") : String,\n\tdim: enabled ? formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\") : String,\n\titalic: enabled ? formatter(\"\\x1b[3m\", \"\\x1b[23m\") : String,\n\tunderline: enabled ? formatter(\"\\x1b[4m\", \"\\x1b[24m\") : String,\n\tinverse: enabled ? formatter(\"\\x1b[7m\", \"\\x1b[27m\") : String,\n\thidden: enabled ? formatter(\"\\x1b[8m\", \"\\x1b[28m\") : String,\n\tstrikethrough: enabled ? formatter(\"\\x1b[9m\", \"\\x1b[29m\") : String,\n\tblack: enabled ? formatter(\"\\x1b[30m\", \"\\x1b[39m\") : String,\n\tred: enabled ? formatter(\"\\x1b[31m\", \"\\x1b[39m\") : String,\n\tgreen: enabled ? formatter(\"\\x1b[32m\", \"\\x1b[39m\") : String,\n\tyellow: enabled ? formatter(\"\\x1b[33m\", \"\\x1b[39m\") : String,\n\tblue: enabled ? formatter(\"\\x1b[34m\", \"\\x1b[39m\") : String,\n\tmagenta: enabled ? formatter(\"\\x1b[35m\", \"\\x1b[39m\") : String,\n\tcyan: enabled ? formatter(\"\\x1b[36m\", \"\\x1b[39m\") : String,\n\twhite: enabled ? formatter(\"\\x1b[37m\", \"\\x1b[39m\") : String,\n\tgray: enabled ? formatter(\"\\x1b[90m\", \"\\x1b[39m\") : String,\n\tbgBlack: enabled ? formatter(\"\\x1b[40m\", \"\\x1b[49m\") : String,\n\tbgRed: enabled ? formatter(\"\\x1b[41m\", \"\\x1b[49m\") : String,\n\tbgGreen: enabled ? formatter(\"\\x1b[42m\", \"\\x1b[49m\") : String,\n\tbgYellow: enabled ? formatter(\"\\x1b[43m\", \"\\x1b[49m\") : String,\n\tbgBlue: enabled ? formatter(\"\\x1b[44m\", \"\\x1b[49m\") : String,\n\tbgMagenta: enabled ? formatter(\"\\x1b[45m\", \"\\x1b[49m\") : String,\n\tbgCyan: enabled ? formatter(\"\\x1b[46m\", \"\\x1b[49m\") : String,\n\tbgWhite: enabled ? formatter(\"\\x1b[47m\", \"\\x1b[49m\") : String,\n})\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n","'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput(dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': pico.cyan,\n  'at-word': pico.cyan,\n  'comment': pico.gray,\n  'string': pico.green,\n  'class': pico.yellow,\n  'hash': pico.magenta,\n  'call': pico.cyan,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n","'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n","'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","function noop() {\n  return noop;\n}\nnoop.default = noop.cosmiconfig = noop.catch = noop;\nexport default noop;\n\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            let fromUrl = this.usesFileUrls\n              ? this.toFileUrl(from)\n              : this.toUrl(this.path(from))\n            this.map.setSourceContent(fromUrl, node.source.input.css)\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  toFileUrl(path) {\n    if (pathToFileURL) {\n      return pathToFileURL(path).toString()\n    } else {\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n    }\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n","'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n","'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n","'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n","'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n","'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.19'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n","'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst { systemFontKeywords, fontFamilyKeywords } = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing generic font family',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-no-missing-generic-family-keyword',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && fontFamilyKeywords.has(node.value.toLowerCase());\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst isLastFontFamilyVariable = (value) => {\n\tconst lastValue = postcss.list.comma(value).pop();\n\n\treturn lastValue != null && (isVariable(lastValue) || !isStandardSyntaxValue(lastValue));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilies: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\t// Ignore @font-face\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl.prop === 'font' && systemFontKeywords.has(decl.value.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isLastFontFamilyVariable(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some((node) => isFamilyNameKeyword(node))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tfontFamilies.some((node) =>\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFontFamilies', node.value),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst index = valueIndex + lastFontFamily.sourceIndex;\n\t\t\tconst endIndex = valueIndex + lastFontFamily.sourceEndIndex;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {{\n *   div: import('postcss-value-parser').DivNode,\n *   index: number,\n *   nodes: import('postcss-value-parser').Node[],\n *   expectation: string,\n *   position: 'before' | 'after',\n *   symb: string,\n * }} params\n * @returns {boolean}\n */\nmodule.exports = function functionCommaSpaceFix(params) {\n\tconst { div, index, nodes, expectation, position, symb } = params;\n\n\tif (expectation.startsWith('always')) {\n\t\tdiv[position] = symb;\n\n\t\treturn true;\n\t}\n\n\tif (expectation.startsWith('never')) {\n\t\tdiv[position] = '';\n\n\t\tfor (let i = index + 1; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tif (node === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'comment') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'space') {\n\t\t\t\tnode.value = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst getDeclarationValue = require('../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../utils/isStandardSyntaxFunction');\nconst report = require('../utils/report');\nconst setDeclarationValue = require('../utils/setDeclarationValue');\nconst valueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} ValueParserNode */\n/** @typedef {import('postcss-value-parser').DivNode} ValueParserDivNode */\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((node: ValueParserDivNode, index: number, nodes: ValueParserNode[]) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function functionCommaSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst declValue = getDeclarationValue(decl);\n\n\t\tlet hasFixed;\n\t\tconst parsedValue = valueParser(declValue);\n\n\t\tparsedValue.walk((valueNode) => {\n\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore `url()` arguments, which may contain data URIs or other funky stuff\n\t\t\tif (valueNode.value.toLowerCase() === 'url') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst argumentStrings = valueNode.nodes.map((node) => valueParser.stringify(node));\n\n\t\t\tconst functionArguments = (() => {\n\t\t\t\t// Remove function name and parens\n\t\t\t\tlet result = valueNode.before + argumentStrings.join('') + valueNode.after;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tresult = result.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn result;\n\t\t\t})();\n\n\t\t\t/**\n\t\t\t * Gets the index of the comma for checking.\n\t\t\t * @param {ValueParserDivNode} commaNode The comma node\n\t\t\t * @param {number} nodeIndex The index of the comma node\n\t\t\t * @returns {number} The index of the comma for checking\n\t\t\t */\n\t\t\tconst getCommaCheckIndex = (commaNode, nodeIndex) => {\n\t\t\t\tlet commaBefore =\n\t\t\t\t\tvalueNode.before + argumentStrings.slice(0, nodeIndex).join('') + commaNode.before;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tcommaBefore = commaBefore.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn commaBefore.length;\n\t\t\t};\n\n\t\t\t/** @type {{ commaNode: ValueParserDivNode, checkIndex: number, nodeIndex: number }[]} */\n\t\t\tconst commaDataList = [];\n\n\t\t\tfor (const [nodeIndex, node] of valueNode.nodes.entries()) {\n\t\t\t\tif (node.type !== 'div' || node.value !== ',') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst checkIndex = getCommaCheckIndex(node, nodeIndex);\n\n\t\t\t\tcommaDataList.push({\n\t\t\t\t\tcommaNode: node,\n\t\t\t\t\tcheckIndex,\n\t\t\t\t\tnodeIndex,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const { commaNode, checkIndex, nodeIndex } of commaDataList) {\n\t\t\t\topts.locationChecker({\n\t\t\t\t\tsource: functionArguments,\n\t\t\t\t\tindex: checkIndex,\n\t\t\t\t\terr: (message) => {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + commaNode.sourceIndex + commaNode.before.length;\n\n\t\t\t\t\t\tif (opts.fix && opts.fix(commaNode, nodeIndex, valueNode.nodes)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasFixed) {\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t}\n\t});\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line function',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-single-line-max-declarations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst block = blockString(ruleNode);\n\n\t\t\tif (!isSingleLineString(block)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = ruleNode.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: block,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line function',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isNumbery = require('../../utils/isNumbery');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst {\n\tfontWeightNonNumericKeywords,\n\tfontWeightRelativeKeywords,\n} = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-weight-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} font-weight notation`,\n\texpectedWithActual: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-weight-notation',\n\tfixable: true,\n};\n\nconst NORMAL_KEYWORD = 'normal';\n\nconst NAMED_TO_NUMERIC = new Map([\n\t['normal', '400'],\n\t['bold', '700'],\n]);\nconst NUMERIC_TO_NAMED = new Map([\n\t['400', 'normal'],\n\t['700', 'bold'],\n]);\n\n/** @type {import('stylelint').Rule<'numeric' | 'named-where-possible'>} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['numeric', 'named-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['relative'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreRelative = optionsMatches(secondaryOptions, 'ignore', 'relative');\n\n\t\troot.walkDecls(/^font(-weight)?$/i, (decl) => {\n\t\t\tconst isFontShorthandProp = decl.prop.toLowerCase() === 'font';\n\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tconst valueNodes = parsedValue.nodes;\n\n\t\t\tconst hasNumericFontWeight = valueNodes.some((node, index, nodes) => {\n\t\t\t\treturn isNumbery(node.value) && !isDivNode(nodes[index - 1]);\n\t\t\t});\n\n\t\t\tfor (const [index, valueNode] of valueNodes.entries()) {\n\t\t\t\tif (!isPossibleFontWeightNode(valueNode, index, valueNodes)) continue;\n\n\t\t\t\tconst { value } = valueNode;\n\n\t\t\t\tif (isFontShorthandProp) {\n\t\t\t\t\tif (value.toLowerCase() === NORMAL_KEYWORD && hasNumericFontWeight) {\n\t\t\t\t\t\tcontinue; // Not `normal` for font-weight\n\t\t\t\t\t}\n\n\t\t\t\t\tif (checkWeight(decl, valueNode)) {\n\t\t\t\t\t\tbreak; // Stop traverse if font-weight is processed\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcheckWeight(decl, valueNode);\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\t// Autofix after the loop ends can prevent value nodes from changing their positions during the loop.\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {import('postcss-value-parser').Node} weightValueNode\n\t\t * @returns {true | undefined}\n\t\t */\n\t\tfunction checkWeight(decl, weightValueNode) {\n\t\t\tconst weightValue = weightValueNode.value;\n\n\t\t\tif (!isStandardSyntaxValue(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lowerWeightValue = weightValue.toLowerCase();\n\n\t\t\tif (ignoreRelative && fontWeightRelativeKeywords.has(lowerWeightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primary === 'numeric') {\n\t\t\t\tif (!isNumbery(lowerWeightValue) && fontWeightNonNumericKeywords.has(lowerWeightValue)) {\n\t\t\t\t\tconst numericValue = NAMED_TO_NUMERIC.get(lowerWeightValue);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (numericValue) {\n\t\t\t\t\t\t\tweightValueNode.value = numericValue;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst msg = numericValue\n\t\t\t\t\t\t? messages.expectedWithActual(weightValue, numericValue)\n\t\t\t\t\t\t: messages.expected('numeric');\n\n\t\t\t\t\tcomplain(msg, weightValueNode);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (primary === 'named-where-possible') {\n\t\t\t\tif (isNumbery(lowerWeightValue) && NUMERIC_TO_NAMED.has(lowerWeightValue)) {\n\t\t\t\t\tconst namedValue = NUMERIC_TO_NAMED.get(lowerWeightValue);\n\n\t\t\t\t\tassertString(namedValue);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tweightValueNode.value = namedValue;\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(messages.expectedWithActual(weightValue, namedValue), weightValueNode);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t */\n\t\t\tfunction complain(message, valueNode) {\n\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex;\n\t\t\t\tconst endIndex = index + valueNode.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {boolean}\n */\nfunction isDivNode(node) {\n\treturn node !== undefined && node.type === 'div';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @param {number} index\n * @param {import('postcss-value-parser').Node[]} nodes\n * @returns {boolean}\n */\nfunction isPossibleFontWeightNode(node, index, nodes) {\n\tif (node.type !== 'word') return false;\n\n\t// Exclude `<font-size>/<line-height>` format like `16px/3`.\n\tif (isDivNode(nodes[index - 1])) return false;\n\n\tif (isDivNode(nodes[index + 1])) return false;\n\n\treturn true;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-calc-no-unspaced-operator';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\" operator`,\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\" operator`,\n\texpectedOperatorBeforeSign: (operator) => `Expected an operator before sign \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-calc-no-unspaced-operator',\n\tfixable: true,\n};\n\nconst OPERATORS = new Set(['+', '-']);\nconst OPERATOR_REGEX = /[+-]/;\nconst ALL_OPERATORS = new Set([...OPERATORS, '*', '/']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction complain(message, node, index, operator) {\n\t\t\tconst endIndex = index + operator.length;\n\n\t\t\treport({ message, node, index, endIndex, result, ruleName });\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} operatorNode\n\t\t\t * @param {import('postcss-value-parser').Node} currentNode\n\t\t\t * @param {boolean} isBeforeOp\n\t\t\t */\n\t\t\tfunction checkAroundOperator(operatorNode, currentNode, isBeforeOp) {\n\t\t\t\tconst operator = operatorNode.value;\n\t\t\t\tconst operatorSourceIndex = operatorNode.sourceIndex;\n\n\t\t\t\tif (currentNode && !isSingleSpace(currentNode)) {\n\t\t\t\t\tif (currentNode.type === 'word') {\n\t\t\t\t\t\tif (isBeforeOp) {\n\t\t\t\t\t\t\tconst lastChar = currentNode.value.slice(-1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${currentNode.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\t\toperatorSourceIndex,\n\t\t\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst firstChar = currentNode.value.slice(0, 1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${firstChar} ${currentNode.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(messages.expectedAfter(operator), decl, operatorSourceIndex, operator);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tisBeforeOp ? messages.expectedBefore(operator) : messages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + operatorSourceIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'space') {\n\t\t\t\t\t\tconst indexOfFirstNewLine = currentNode.value.search(/(\\n|\\r\\n)/);\n\n\t\t\t\t\t\tif (indexOfFirstNewLine === 0) return;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value =\n\t\t\t\t\t\t\t\tindexOfFirstNewLine === -1 ? ' ' : currentNode.value.slice(indexOfFirstNewLine);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'function') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInFirstNode(nodes) {\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tassert(firstNode);\n\n\t\t\t\tif (firstNode.type !== 'word') return false;\n\n\t\t\t\tif (!isStandardSyntaxValue(firstNode.value)) return false;\n\n\t\t\t\tconst operatorIndex = firstNode.value.search(OPERATOR_REGEX);\n\t\t\t\tconst operator = firstNode.value.slice(operatorIndex, operatorIndex + 1);\n\n\t\t\t\tif (operatorIndex <= 0) return false;\n\n\t\t\t\tconst charBefore = firstNode.value.charAt(operatorIndex - 1);\n\t\t\t\tconst charAfter = firstNode.value.charAt(operatorIndex + 1);\n\n\t\t\t\tif (charBefore && charBefore !== ' ' && charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex + 1, ' ');\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charBefore && charBefore !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInLastNode(nodes) {\n\t\t\t\tif (nodes.length === 1) return false;\n\n\t\t\t\tconst lastNode = nodes[nodes.length - 1];\n\n\t\t\t\tassert(lastNode);\n\n\t\t\t\tif (lastNode.type !== 'word') return false;\n\n\t\t\t\tconst operatorIndex = lastNode.value.search(OPERATOR_REGEX);\n\n\t\t\t\tif (operatorIndex === -1) return false;\n\n\t\t\t\tif (lastNode.value.charAt(operatorIndex - 1) === ' ') return false;\n\n\t\t\t\t// E.g. \"10px * -2\" when the last node is \"-2\"\n\t\t\t\tif (\n\t\t\t\t\tisOperator(nodes[nodes.length - 3], ALL_OPERATORS) &&\n\t\t\t\t\tisSingleSpace(nodes[nodes.length - 2])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedsFix = true;\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex + 1, ' ').trim();\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex, ' ').trim();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst operator = lastNode.value.charAt(operatorIndex);\n\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\tdecl,\n\t\t\t\t\tvalueIndex + lastNode.sourceIndex + operatorIndex,\n\t\t\t\t\toperator,\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkWords(nodes) {\n\t\t\t\tif (checkForOperatorInFirstNode(nodes) || checkForOperatorInLastNode(nodes)) return;\n\n\t\t\t\tfor (const [index, node] of nodes.entries()) {\n\t\t\t\t\tconst lastChar = node.value.slice(-1);\n\t\t\t\t\tconst firstChar = node.value.slice(0, 1);\n\n\t\t\t\t\tif (node.type === 'word') {\n\t\t\t\t\t\tif (index === 0 && OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${node.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedBefore(lastChar), decl, node.sourceIndex, lastChar);\n\t\t\t\t\t\t} else if (index === nodes.length && OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${firstChar} ${node.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(firstChar),\n\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\tnode.sourceIndex,\n\t\t\t\t\t\t\t\tfirstChar,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || node.value.toLowerCase() !== 'calc') return;\n\n\t\t\t\tconst { nodes } = node;\n\t\t\t\tlet foundOperatorNode = false;\n\n\t\t\t\tfor (const [nodeIndex, currNode] of nodes.entries()) {\n\t\t\t\t\tif (!isOperator(currNode)) continue;\n\n\t\t\t\t\tfoundOperatorNode = true;\n\n\t\t\t\t\tconst nodeBefore = nodes[nodeIndex - 1];\n\t\t\t\t\tconst nodeAfter = nodes[nodeIndex + 1];\n\n\t\t\t\t\tif (isSingleSpace(nodeBefore) && isSingleSpace(nodeAfter)) continue;\n\n\t\t\t\t\tif (nodeAfter && checkAroundOperator(currNode, nodeAfter, false)) continue;\n\n\t\t\t\t\tnodeBefore && checkAroundOperator(currNode, nodeBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (!foundOperatorNode) {\n\t\t\t\t\tcheckWords(nodes);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} str\n * @param {number} index\n * @param {string} char\n */\nfunction insertCharAtIndex(str, index, char) {\n\treturn str.slice(0, index) + char + str.slice(index, str.length);\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {node is import('postcss-value-parser').SpaceNode & { value: ' ' } }\n */\nfunction isSingleSpace(node) {\n\treturn node != null && node.type === 'space' && node.value === ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @param {Set<string>} [operators]\n * @returns {node is import('postcss-value-parser').WordNode}\n */\nfunction isOperator(node, operators = OPERATORS) {\n\treturn node != null && node.type === 'word' && operators.has(node.value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-max-empty-lines',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction placeIndexOnValueStart(decl) {\n\tif (decl.raws.between == null) throw new Error('`between` must be present');\n\n\treturn decl.prop.length + decl.raws.between.length - 1;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst stringValue = getDeclarationValue(decl);\n\t\t\t/** @type {Array<[string, string]>} */\n\t\t\tconst splittedValue = [];\n\t\t\tlet sourceIndexStart = 0;\n\n\t\t\tvalueParser(stringValue).walk((node) => {\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'function' /* ignore non functions */ ||\n\t\t\t\t\tnode.value.length === 0 /* ignore sass lists */\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stringifiedNode = valueParser.stringify(node);\n\n\t\t\t\tif (\n\t\t\t\t\t!violatedLFNewLinesRegex.test(stringifiedNode) &&\n\t\t\t\t\t!violatedCRLFNewLinesRegex.test(stringifiedNode)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst newNodeString = stringifiedNode\n\t\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\t\tsplittedValue.push([\n\t\t\t\t\t\tstringValue.slice(sourceIndexStart, node.sourceIndex),\n\t\t\t\t\t\tnewNodeString,\n\t\t\t\t\t]);\n\t\t\t\t\tsourceIndexStart = node.sourceIndex + stringifiedNode.length;\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: placeIndexOnValueStart(decl) + node.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (context.fix && splittedValue.length > 0) {\n\t\t\t\tconst updatedValue =\n\t\t\t\t\tsplittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') +\n\t\t\t\t\tstringValue.slice(sourceIndexStart);\n\n\t\t\t\tsetDeclarationValue(decl, updatedValue);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line function',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst camelCaseFunctions = new Set([\n\t'translateX',\n\t'translateY',\n\t'translateZ',\n\t'scaleX',\n\t'scaleY',\n\t'scaleZ',\n\t'rotateX',\n\t'rotateY',\n\t'rotateZ',\n\t'skewX',\n\t'skewY',\n]);\n\nconst mathFunctions = new Set(['calc', 'clamp', 'max', 'min']);\n\nmodule.exports = {\n\tcamelCaseFunctions,\n\tmathFunctions,\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst { camelCaseFunctions } = require('../../reference/functions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-name-case',\n\tfixable: true,\n};\n\nconst mapLowercaseFunctionNamesToCamelCase = new Map();\n\nfor (const func of camelCaseFunctions) {\n\tmapLowercaseFunctionNamesToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needFix = false;\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || !isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionName = node.value;\n\t\t\t\tconst functionNameLowerCase = functionName.toLowerCase();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', functionName)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet expectedFunctionName = null;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseFunctionNamesToCamelCase.has(functionNameLowerCase)\n\t\t\t\t) {\n\t\t\t\t\texpectedFunctionName = mapLowercaseFunctionNamesToCamelCase.get(functionNameLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedFunctionName = functionNameLowerCase;\n\t\t\t\t} else {\n\t\t\t\t\texpectedFunctionName = functionName.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (functionName === expectedFunctionName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedFunctionName;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(functionName, expectedFunctionName),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tsetDeclarationValue(decl, parsed.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst { fontFamilyKeywords } = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-duplicate-names';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected duplicate name ${name}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-no-duplicate-names',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && fontFamilyKeywords.has(node.value.toLowerCase());\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilyNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst keywords = new Set();\n\t\t\tconst familyNames = new Set();\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilies) {\n\t\t\t\tconst family = fontFamilyNode.value.trim();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFontFamilyNames', family)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rawFamily =\n\t\t\t\t\t'quote' in fontFamilyNode ? fontFamilyNode.quote + family + fontFamilyNode.quote : family;\n\n\t\t\t\tif (isFamilyNameKeyword(fontFamilyNode)) {\n\t\t\t\t\tif (keywords.has(family.toLowerCase())) {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tkeywords.add(family);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (familyNames.has(family)) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfamilyNames.add(family);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict'\nmodule.exports = balanced\nfunction balanced (a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str)\n  if (b instanceof RegExp) b = maybeMatch(b, str)\n\n  const r = range(a, b, str)\n\n  return (\n    r && {\n      start: r[0],\n      end: r[1],\n      pre: str.slice(0, r[0]),\n      body: str.slice(r[0] + a.length, r[1]),\n      post: str.slice(r[1] + b.length)\n    }\n  )\n}\n\nfunction maybeMatch (reg, str) {\n  const m = str.match(reg)\n  return m ? m[0] : null\n}\n\nbalanced.range = range\nfunction range (a, b, str) {\n  let begs, beg, left, right, result\n  let ai = str.indexOf(a)\n  let bi = str.indexOf(b, ai + 1)\n  let i = ai\n\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi]\n    }\n    begs = []\n    left = str.length\n\n    while (i >= 0 && !result) {\n      if (i === ai) {\n        begs.push(i)\n        ai = str.indexOf(a, i + 1)\n      } else if (begs.length === 1) {\n        result = [begs.pop(), bi]\n      } else {\n        beg = begs.pop()\n        if (beg < left) {\n          left = beg\n          right = bi\n        }\n\n        bi = str.indexOf(b, i + 1)\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi\n    }\n\n    if (begs.length) {\n      result = [left, right]\n    }\n  }\n\n  return result\n}\n","'use strict';\n\nconst balancedMatch = require('balanced-match');\nconst valueParser = require('postcss-value-parser');\n\nconst { assert, isString, isRegExp } = require('./validateTypes');\n\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string | RegExp} functionName\n * @param {(expression: string, expressionIndex: number) => void} callback\n * @returns {void}\n */\nmodule.exports = function functionArgumentsSearch(source, functionName, callback) {\n\tvalueParser(source).walk((node) => {\n\t\tif (node.type !== 'function') return;\n\n\t\tconst { value } = node;\n\n\t\tif (isString(functionName) && value !== functionName) return;\n\n\t\tif (isRegExp(functionName) && !functionName.test(node.value)) return;\n\n\t\tconst parensMatch = balancedMatch('(', ')', source.slice(node.sourceIndex));\n\n\t\tassert(parensMatch);\n\n\t\tconst expression = parensMatch.body;\n\t\tconst parenLength = 1; // == '('\n\t\tconst expressionIndex = node.sourceIndex + value.length + parenLength;\n\n\t\tcallback(expression, expressionIndex);\n\t});\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected nonstandard direction',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-linear-gradient-no-nonstandard-direction',\n};\n\n/**\n * @param {string} source\n * @param {boolean} withToPrefix\n */\nfunction isStandardDirection(source, withToPrefix) {\n\tconst regexp = withToPrefix\n\t\t? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/\n\t\t: /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n\n\tconst matches = source.match(regexp);\n\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\tif (matches.length === 2) {\n\t\treturn true;\n\t}\n\n\t// Cannot repeat side-or-corner, e.g. \"to top top\"\n\tif (matches.length === 3 && matches[1] !== matches[2]) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunctionArgumentsSearch(\n\t\t\t\t\tvalueParser.stringify(valueNode).toLowerCase(),\n\t\t\t\t\t/^(-webkit-|-moz-|-o-|-ms-)?linear-gradient$/i,\n\t\t\t\t\t(expression, expressionIndex) => {\n\t\t\t\t\t\tconst args = expression.split(',');\n\t\t\t\t\t\tconst firstArg = (args[0] || '').trim();\n\n\t\t\t\t\t\t// If the first arg is not standard, return early\n\t\t\t\t\t\tif (!isStandardSyntaxValue(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first character is a number, we can assume the user intends an angle\n\t\t\t\t\t\tif (/[\\d.]/.test(firstArg.charAt(0))) {\n\t\t\t\t\t\t\tif (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The first argument may not be a direction: it may be an angle,\n\t\t\t\t\t\t// or a color stop (in which case user gets default direction, \"to bottom\")\n\t\t\t\t\t\t// cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\t\t\t\t\t\tif (!/left|right|top|bottom/.test(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst withToPrefix = !vendor.prefix(valueNode.value);\n\n\t\t\t\t\t\tif (!isStandardDirection(firstArg, withToPrefix)) {\n\t\t\t\t\t\t\tcomplain();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfunction complain() {\n\t\t\t\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex;\n\t\t\t\t\t\t\tconst endIndex = index + (args[0] || '').trimEnd().length;\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-newline-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected newline after \"(\"',\n\texpectedClosing: 'Expected newline before \")\"',\n\texpectedOpeningMultiLine: 'Expected newline after \"(\" in a multi-line function',\n\trejectedOpeningMultiLine: 'Unexpected whitespace after \"(\" in a multi-line function',\n\texpectedClosingMultiLine: 'Expected newline before \")\" in a multi-line function',\n\trejectedClosingMultiLine: 'Unexpected whitespace before \")\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-parentheses-newline-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isMultiLine = !isSingleLineString(functionString);\n\t\t\t\tconst containsNewline = (/** @type {string} */ str) => str.includes('\\n');\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\t\t\t\tconst checkBefore = getCheckBefore(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkBefore !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\t\t\t\tconst checkAfter = getCheckAfter(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkAfter !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-value-parser').FunctionNode} FunctionNode */\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckBefore(valueNode) {\n\tlet before = valueNode.before;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tbefore += node.value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\treturn before;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckAfter(valueNode) {\n\tlet after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tafter = node.value + after;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tafter += valueNode.after;\n\n\treturn after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixBeforeForAlways(valueNode, newline) {\n\tlet target;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\ttarget = node;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tif (target) {\n\t\ttarget.value = newline + target.value;\n\t} else {\n\t\tvalueNode.before = newline + valueNode.before;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixBeforeForNever(valueNode) {\n\tvalueNode.before = '';\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixAfterForAlways(valueNode, newline) {\n\tvalueNode.after = newline + valueNode.after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixAfterForNever(valueNode) {\n\tvalueNode.after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fs = require('fs');\nconst valueParser = require('postcss-value-parser');\nconst functionsListPath = require('css-functions-list');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isCustomFunction = require('../../utils/isCustomFunction');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected unknown function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst functionsList = JSON.parse(fs.readFileSync(functionsListPath.toString(), 'utf8'));\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\tconst name = node.value;\n\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomFunction(name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (functionsList.includes(name.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: name,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is custom / user-defined\n * https://github.com/w3c/css-houdini-drafts/issues/1007\n * @param {string} func\n * @returns {boolean}\n */\nmodule.exports = function isCustomFunction(func) {\n\treturn func.startsWith('--');\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxUrl(url) {\n\tif (url.length === 0) {\n\t\treturn true;\n\t}\n\n\t// Sass interpolation works anywhere\n\tif (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n\t\treturn false;\n\t}\n\n\t// Inside `'` and `\"` work only LESS interpolation\n\tif ((url.startsWith(`'`) && url.endsWith(`'`)) || (url.startsWith(`\"`) && url.endsWith(`\"`))) {\n\t\tif (hasLessInterpolation(url)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Less variable works only at the beginning\n\t// Check is less variable, allow use '@url/some/path'\n\t// https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\tif (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n\t\treturn false;\n\t}\n\n\t// In url without quotes scss variable can be everywhere\n\t// But in this case it is allowed to use only specific characters\n\t// Also forbidden \"/\" at the end of url\n\tif (url.includes('$') && /^[$\\s\\w+\\-,./*'\"]+$/.test(url) && !url.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (functionName) => `Expected quotes around \"${functionName}\" function argument`,\n\trejected: (functionName) => `Unexpected quotes around \"${functionName}\" function argument`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-quotes',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['empty'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(checkAtRuleParams);\n\t\troot.walkDecls(checkDeclParams);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkDeclParams(decl) {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, decl, index, 'url');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleParams(atRule) {\n\t\t\tconst atRuleParamsLowerCase = atRule.params.toLowerCase();\n\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} args\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} functionName\n\t\t */\n\t\tfunction checkArgs(args, node, index, functionName) {\n\t\t\tlet shouldHasQuotes = primary === 'always';\n\n\t\t\tconst leftTrimmedArgs = args.trimStart();\n\n\t\t\tif (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = index + args.length - leftTrimmedArgs.length;\n\t\t\tconst complaintEndIndex = index + args.length;\n\t\t\tconst hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n\n\t\t\tconst trimmedArg = args.trim();\n\t\t\tconst isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n\t\t\tif (optionsMatches(secondaryOptions, 'except', 'empty') && isEmptyArgument) {\n\t\t\t\tshouldHasQuotes = !shouldHasQuotes;\n\t\t\t}\n\n\t\t\tif (shouldHasQuotes) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.expected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t} else {\n\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.rejected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { URL } = require('url');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\nmodule.exports = function getSchemeFromUrl(urlString) {\n\tlet protocol = null;\n\n\ttry {\n\t\tprotocol = new URL(urlString).protocol;\n\t} catch {\n\t\treturn null;\n\t}\n\n\tif (protocol === null || typeof protocol === 'undefined') {\n\t\treturn null;\n\t}\n\n\tconst scheme = protocol.slice(0, -1); // strip trailing `:`\n\n\t// The URL spec does not require a scheme to be followed by `//`, but checking\n\t// for it allows this rule to differentiate <scheme>:<hostname> urls from\n\t// <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\tconst slashIndex = protocol.length;\n\tconst expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n\tconst isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n\tif (isSchemeLessUrl) {\n\t\treturn null;\n\t}\n\n\treturn scheme;\n};\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-scheme-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-no-scheme-relative';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected scheme-relative url',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-no-scheme-relative',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst url = args.trim().replace(/^['\"]+|['\"]+$/g, '');\n\n\t\t\t\tif (!isStandardSyntaxUrl(url) || !url.startsWith('//')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-scheme-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-whitespace-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected whitespace after \")\"',\n\trejected: 'Unexpected whitespace after \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-whitespace-after',\n\tfixable: true,\n};\n\nconst ACCEPTABLE_AFTER_CLOSING_PAREN = new Set([')', ',', '}', ':', '/', undefined]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string} value\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction check(node, value, nodeIndex, fix) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: value,\n\t\t\t\t\ttarget: ')',\n\t\t\t\t\tfunctionArguments: 'only',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tcheckClosingParen(value, match.startIndex + 1, node, nodeIndex, fix);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction checkClosingParen(source, index, node, nodeIndex, fix) {\n\t\t\tconst nextChar = source.charAt(index);\n\n\t\t\tif (!nextChar) return;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\t// Allow for the next character to be a single empty space,\n\t\t\t\t// another closing parenthesis, a comma, or the end of the value\n\t\t\t\tif (nextChar === ' ') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (nextChar === '\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (source.slice(index, index + 2) === '\\r\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ACCEPTABLE_AFTER_CLOSING_PAREN.has(nextChar)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t} else if (primary === 'never' && isWhitespace(nextChar)) {\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} value\n\t\t */\n\t\tfunction createFixer(value) {\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\t\t\t/** @type {(index: number) => void} */\n\t\t\tlet applyFix;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\tfixed += value.slice(lastIndex, index) + ' ';\n\t\t\t\t\tlastIndex = index;\n\t\t\t\t};\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\tlet whitespaceEndIndex = index + 1;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\twhitespaceEndIndex < value.length &&\n\t\t\t\t\t\tisWhitespace(value.charAt(whitespaceEndIndex))\n\t\t\t\t\t) {\n\t\t\t\t\t\twhitespaceEndIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tfixed += value.slice(lastIndex, index);\n\t\t\t\t\tlastIndex = whitespaceEndIndex;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tapplyFix,\n\t\t\t\tget hasFixed() {\n\t\t\t\t\treturn Boolean(lastIndex);\n\t\t\t\t},\n\t\t\t\tget fixed() {\n\t\t\t\t\treturn fixed + value.slice(lastIndex);\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst param = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst fixer = context.fix && createFixer(param);\n\n\t\t\tcheck(atRule, param, atRuleParamIndex(atRule), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = fixer.fixed;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = fixer.fixed;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\t\t\tconst fixer = context.fix && createFixer(value);\n\n\t\t\tcheck(decl, value, declarationValueIndex(decl), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, fixer.fixed);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isStandardSyntaxKeyframesName = require('../../utils/isStandardSyntaxKeyframesName');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframes-name-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (keyframeName, pattern) => `Expected \"${keyframeName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframes-name-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regex = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules(/keyframes/i, (keyframesNode) => {\n\t\t\tconst value = keyframesNode.params;\n\n\t\t\tif (!isStandardSyntaxKeyframesName(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (regex.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(keyframesNode);\n\t\t\tconst endIndex = index + value.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [value, primary],\n\t\t\t\tnode: keyframesNode,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('./hasInterpolation');\n\n/**\n * Check whether a keyframes name is standard\n *\n * @param {string} keyframesName\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxKeyframesName(keyframesName) {\n\tif (hasInterpolation(keyframesName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a selector is standard\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxSelector(selector) {\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(selector)) {\n\t\treturn false;\n\t}\n\n\t// SCSS placeholder selectors\n\tif (selector.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// SCSS nested properties\n\tif (selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\t// Less :extend()\n\tif (/:extend(?:\\(.*?\\))?/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less mixin with resolved nested selectors (e.g. .foo().bar or .foo(@a, @b)[bar])\n\tif (/\\.[\\w-]+\\(.*\\).+/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less non-outputting mixin definition (e.g. .mixin() {})\n\tif (selector.endsWith(')') && !selector.includes(':')) {\n\t\treturn false;\n\t}\n\n\t// Less Parametric mixins (e.g. .mixin(@variable: x) {})\n\tif (/\\(@.*\\)$/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// ERB template tags\n\tif (selector.includes('<%') || selector.includes('%>')) {\n\t\treturn false;\n\t}\n\n\t//  SCSS and Less comments\n\tif (selector.includes('//')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframe-block-no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected duplicate \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-block-no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectors = new Set();\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\tconst ruleSelectors = keyframeRule.selectors;\n\n\t\t\t\truleSelectors.forEach((selector) => {\n\t\t\t\t\tif (!isStandardSyntaxSelector(selector)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tconst isDuplicate = selectors.has(normalizedSelector);\n\n\t\t\t\t\tif (isDuplicate) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectors.add(normalizedSelector);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string}\n */\nmodule.exports = function getAtRuleParams(atRule) {\n\tconst raws = atRule.raws;\n\n\treturn (raws.params && raws.params.raw) || atRule.params;\n};\n","'use strict';\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {AtRule} atRule\n * @param {string} params\n * @returns {AtRule} The atRulearation that was passed in.\n */\nmodule.exports = function setAtRuleParams(atRule, params) {\n\tconst raws = atRule.raws;\n\n\tif (raws.params) {\n\t\traws.params.raw = params;\n\t} else {\n\t\tatRule.params = params;\n\t}\n\n\treturn atRule;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isMathFunction = require('../../utils/isMathFunction');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst { lengthUnits } = require('../../reference/units');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'length-zero-no-unit';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected unit',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/length-zero-no-unit',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-properties'],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tlet needsFix;\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode) {\n\t\t\tconst { value, sourceIndex } = valueNode;\n\n\t\t\tif (isMathFunction(valueNode)) return false;\n\n\t\t\tif (isFunction(valueNode) && optionsMatches(secondaryOptions, 'ignoreFunctions', value))\n\t\t\t\treturn false;\n\n\t\t\tif (!isWord(valueNode)) return;\n\n\t\t\tconst numberUnit = valueParser.unit(value);\n\n\t\t\tif (numberUnit === false) return;\n\n\t\t\tconst { number, unit } = numberUnit;\n\n\t\t\tif (unit === '') return;\n\n\t\t\tif (!isLength(unit)) return;\n\n\t\t\tif (isFraction(unit)) return;\n\n\t\t\tif (!isZero(number)) return;\n\n\t\t\tif (context.fix) {\n\t\t\t\tlet regularNumber = number;\n\n\t\t\t\tif (regularNumber.startsWith('.')) {\n\t\t\t\t\tregularNumber = number.slice(1);\n\t\t\t\t}\n\n\t\t\t\tvalueNode.value = regularNumber;\n\t\t\t\tneedsFix = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = nodeIndex + sourceIndex + number.length;\n\t\t\tconst endIndex = index + unit.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} node\n\t\t */\n\t\tfunction checkAtRule(node) {\n\t\t\tif (!isStandardSyntaxAtRule(node)) return;\n\n\t\t\tneedsFix = false;\n\n\t\t\tconst index = atRuleParamIndex(node);\n\t\t\tconst parsedValue = valueParser(getAtRuleParams(node));\n\n\t\t\tparsedValue.walk((valueNode) => check(node, index, valueNode));\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetAtRuleParams(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} node\n\t\t */\n\t\tfunction checkDecl(node) {\n\t\t\tneedsFix = false;\n\n\t\t\tconst { prop } = node;\n\n\t\t\tif (isLineHeight(prop)) return;\n\n\t\t\tif (isFlex(prop)) return;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'custom-properties') && isCustomProperty(prop))\n\t\t\t\treturn;\n\n\t\t\tconst index = declarationValueIndex(node);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(node));\n\n\t\t\tparsedValue.walk((valueNode, valueNodeIndex, valueNodes) => {\n\t\t\t\tif (isLineHeightValue(node, valueNodes, valueNodeIndex)) return;\n\n\t\t\t\treturn check(node, index, valueNode);\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules(checkAtRule);\n\t\troot.walkDecls(checkDecl);\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {import('postcss-value-parser').Node[]} nodes\n * @param {number} index\n */\nfunction isLineHeightValue({ prop }, nodes, index) {\n\tconst lastNode = nodes[index - 1];\n\n\treturn (\n\t\tprop.toLowerCase() === 'font' && lastNode && lastNode.type === 'div' && lastNode.value === '/'\n\t);\n}\n\n/**\n * @param {string} prop\n */\nfunction isLineHeight(prop) {\n\treturn prop.toLowerCase() === 'line-height';\n}\n\n/**\n * @param {string} prop\n */\nfunction isFlex(prop) {\n\treturn prop.toLowerCase() === 'flex';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isWord({ type }) {\n\treturn type === 'word';\n}\n\n/**\n * @param {string} unit\n */\nfunction isLength(unit) {\n\treturn lengthUnits.has(unit.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isFunction({ type }) {\n\treturn type === 'function';\n}\n\n/**\n * @param {string} unit\n */\nfunction isFraction(unit) {\n\treturn unit.toLowerCase() === 'fr';\n}\n\n/**\n * @param {string} number\n */\nfunction isZero(number) {\n\treturn Number.parseFloat(number) === 0;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { mathFunctions } = require('../reference/functions');\n\n/**\n * Check whether a node is math function\n *\n * @param {import('postcss-value-parser').Node} node postcss-value-parser node\n * @return {boolean} If `true`, the node is math function\n */\nmodule.exports = function isMathFunction(node) {\n\treturn node.type === 'function' && mathFunctions.has(node.value.toLowerCase());\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst ruleName = 'import-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/import-notation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['string', 'url'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, checkAtRuleImportParams);\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleImportParams(atRule) {\n\t\t\tconst params = getAtRuleParams(atRule);\n\t\t\tconst parsed = valueParser(params);\n\n\t\t\tfor (const node of parsed.nodes) {\n\t\t\t\tconst start = atRuleParamIndex(atRule);\n\t\t\t\tconst end = start + node.sourceEndIndex;\n\n\t\t\t\tif (primary === 'string') {\n\t\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\tconst urlFunctionFull = valueParser.stringify(node);\n\t\t\t\t\t\tconst urlFunctionArguments = valueParser.stringify(node.nodes);\n\n\t\t\t\t\t\tconst quotedUrlFunctionFirstArgument =\n\t\t\t\t\t\t\tnode.nodes[0] && node.nodes[0].type === 'word'\n\t\t\t\t\t\t\t\t? `\"${urlFunctionArguments}\"`\n\t\t\t\t\t\t\t\t: urlFunctionArguments;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${quotedUrlFunctionFirstArgument}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expected(urlFunctionFull, quotedUrlFunctionFirstArgument),\n\t\t\t\t\t\t\tatRule,\n\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'url') {\n\t\t\t\t\tif (node.type === 'space') return;\n\n\t\t\t\t\tif (node.type === 'word' || node.type === 'string') {\n\t\t\t\t\t\tconst path = valueParser.stringify(node);\n\n\t\t\t\t\t\tconst urlFunctionFull = `url(${path})`;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${urlFunctionFull}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst quotedNodeValue =\n\t\t\t\t\t\t\tnode.type === 'word' ? `\"${node.value}\"` : `${node.quote}${node.value}${node.quote}`;\n\n\t\t\t\t\t\tcomplain(messages.expected(quotedNodeValue, urlFunctionFull), atRule, start, end);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxRule(rule) {\n\tif (rule.type !== 'rule') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less &:extend rule\n\tif ('extend' in rule && rule.extend) {\n\t\treturn false;\n\t}\n\n\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc;\n\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = getProp;\n\nfunction getProp(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      return undefined;\n    }\n\n    obj = obj[prop];\n  }\n\n  return obj;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = ensureObject;\n\nfunction ensureObject(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      obj[prop] = {};\n    }\n\n    obj = obj[prop];\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = stripComments;\n\nfunction stripComments(str) {\n  var s = \"\";\n  var commentStart = str.indexOf(\"/*\");\n  var lastEnd = 0;\n\n  while (commentStart >= 0) {\n    s = s + str.slice(lastEnd, commentStart);\n    var commentEnd = str.indexOf(\"*/\", commentStart + 2);\n\n    if (commentEnd < 0) {\n      return s;\n    }\n\n    lastEnd = commentEnd + 2;\n    commentStart = str.indexOf(\"/*\", lastEnd);\n  }\n\n  s = s + str.slice(lastEnd);\n  return s;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.stripComments = exports.ensureObject = exports.getProp = exports.unesc = void 0;\n\nvar _unesc = _interopRequireDefault(require(\"./unesc\"));\n\nexports.unesc = _unesc[\"default\"];\n\nvar _getProp = _interopRequireDefault(require(\"./getProp\"));\n\nexports.getProp = _getProp[\"default\"];\n\nvar _ensureObject = _interopRequireDefault(require(\"./ensureObject\"));\n\nexports.ensureObject = _ensureObject[\"default\"];\n\nvar _stripComments = _interopRequireDefault(require(\"./stripComments\"));\n\nexports.stripComments = _stripComments[\"default\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _util = require(\"../util\");\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar cloneNode = function cloneNode(obj, parent) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var value = obj[i];\n    var type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n\n  return cloned;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || '';\n    this.spaces.after = this.spaces.after || '';\n  }\n\n  var _proto = Node.prototype;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  };\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  };\n\n  _proto.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n\n  _proto.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */\n  ;\n\n  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */\n  ;\n\n  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    this.raws[name] = valueEscaped;\n  }\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */\n  ;\n\n  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  }\n  /**\n   *\n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */\n  ;\n\n  _proto.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n\n      if (this.source.end.line < line) {\n        return false;\n      }\n\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return undefined;\n  };\n\n  _proto.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n\n  _proto.valueToString = function valueToString() {\n    return String(this.stringifyProperty(\"value\"));\n  };\n\n  _proto.toString = function toString() {\n    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');\n  };\n\n  _createClass(Node, [{\n    key: \"rawSpaceBefore\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: \"rawSpaceAfter\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports[\"default\"] = Node;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.UNIVERSAL = exports.ATTRIBUTE = exports.CLASS = exports.COMBINATOR = exports.COMMENT = exports.ID = exports.NESTING = exports.PSEUDO = exports.ROOT = exports.SELECTOR = exports.STRING = exports.TAG = void 0;\nvar TAG = 'tag';\nexports.TAG = TAG;\nvar STRING = 'string';\nexports.STRING = STRING;\nvar SELECTOR = 'selector';\nexports.SELECTOR = SELECTOR;\nvar ROOT = 'root';\nexports.ROOT = ROOT;\nvar PSEUDO = 'pseudo';\nexports.PSEUDO = PSEUDO;\nvar NESTING = 'nesting';\nexports.NESTING = NESTING;\nvar ID = 'id';\nexports.ID = ID;\nvar COMMENT = 'comment';\nexports.COMMENT = COMMENT;\nvar COMBINATOR = 'combinator';\nexports.COMBINATOR = COMBINATOR;\nvar CLASS = 'class';\nexports.CLASS = CLASS;\nvar ATTRIBUTE = 'attribute';\nexports.ATTRIBUTE = ATTRIBUTE;\nvar UNIVERSAL = 'universal';\nexports.UNIVERSAL = UNIVERSAL;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar types = _interopRequireWildcard(require(\"./types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n\n  function Container(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n\n    return _this;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.append = function append(selector) {\n    selector.parent = this;\n    this.nodes.push(selector);\n    return this;\n  };\n\n  _proto.prepend = function prepend(selector) {\n    selector.parent = this;\n    this.nodes.unshift(selector);\n    return this;\n  };\n\n  _proto.at = function at(index) {\n    return this.nodes[index];\n  };\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n\n    return this.nodes.indexOf(child);\n  };\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.at(child).parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n      var node = _step.value;\n      node.parent = undefined;\n    }\n\n    this.nodes = [];\n    return this;\n  };\n\n  _proto.empty = function empty() {\n    return this.removeAll();\n  };\n\n  _proto.insertAfter = function insertAfter(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex + 1, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (oldIndex <= index) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.insertBefore = function insertBefore(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index <= oldIndex) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {\n    var found = undefined;\n    this.each(function (node) {\n      if (node.atPosition) {\n        var foundChild = node.atPosition(line, col);\n\n        if (foundChild) {\n          found = foundChild;\n          return false;\n        }\n      } else if (node.isAtPosition(line, col)) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n  /**\n   * Return the most specific node at the line and column number given.\n   * The source location is based on the original parsed location, locations aren't\n   * updated as selector nodes are mutated.\n   * \n   * Note that this location is relative to the location of the first character\n   * of the selector, and not the location of the selector in the overall document\n   * when used in conjunction with postcss.\n   *\n   * If not found, returns undefined.\n   * @param {number} line The line number of the node to find. (1-based index)\n   * @param {number} col  The column number of the node to find. (1-based index)\n   */\n  ;\n\n  _proto.atPosition = function atPosition(line, col) {\n    if (this.isAtPosition(line, col)) {\n      return this._findChildAtPosition(line, col) || this;\n    } else {\n      return undefined;\n    }\n  };\n\n  _proto._inferEndPosition = function _inferEndPosition() {\n    if (this.last && this.last.source && this.last.source.end) {\n      this.source = this.source || {};\n      this.source.end = this.source.end || {};\n      Object.assign(this.source.end, this.last.source.end);\n    }\n  };\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) {\n      this.lastEach = 0;\n    }\n\n    if (!this.indexes) {\n      this.indexes = {};\n    }\n\n    this.lastEach++;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n\n    if (!this.length) {\n      return undefined;\n    }\n\n    var index, result;\n\n    while (this.indexes[id] < this.length) {\n      index = this.indexes[id];\n      result = callback(this.at(index), index);\n\n      if (result === false) {\n        break;\n      }\n\n      this.indexes[id] += 1;\n    }\n\n    delete this.indexes[id];\n\n    if (result === false) {\n      return false;\n    }\n  };\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (node, i) {\n      var result = callback(node, i);\n\n      if (result !== false && node.length) {\n        result = node.walk(callback);\n      }\n\n      if (result === false) {\n        return false;\n      }\n    });\n  };\n\n  _proto.walkAttributes = function walkAttributes(callback) {\n    var _this2 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ATTRIBUTE) {\n        return callback.call(_this2, selector);\n      }\n    });\n  };\n\n  _proto.walkClasses = function walkClasses(callback) {\n    var _this3 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.CLASS) {\n        return callback.call(_this3, selector);\n      }\n    });\n  };\n\n  _proto.walkCombinators = function walkCombinators(callback) {\n    var _this4 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMBINATOR) {\n        return callback.call(_this4, selector);\n      }\n    });\n  };\n\n  _proto.walkComments = function walkComments(callback) {\n    var _this5 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMMENT) {\n        return callback.call(_this5, selector);\n      }\n    });\n  };\n\n  _proto.walkIds = function walkIds(callback) {\n    var _this6 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ID) {\n        return callback.call(_this6, selector);\n      }\n    });\n  };\n\n  _proto.walkNesting = function walkNesting(callback) {\n    var _this7 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.NESTING) {\n        return callback.call(_this7, selector);\n      }\n    });\n  };\n\n  _proto.walkPseudos = function walkPseudos(callback) {\n    var _this8 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.PSEUDO) {\n        return callback.call(_this8, selector);\n      }\n    });\n  };\n\n  _proto.walkTags = function walkTags(callback) {\n    var _this9 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.TAG) {\n        return callback.call(_this9, selector);\n      }\n    });\n  };\n\n  _proto.walkUniversals = function walkUniversals(callback) {\n    var _this10 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.UNIVERSAL) {\n        return callback.call(_this10, selector);\n      }\n    });\n  };\n\n  _proto.split = function split(callback) {\n    var _this11 = this;\n\n    var current = [];\n    return this.reduce(function (memo, node, index) {\n      var split = callback.call(_this11, node);\n      current.push(node);\n\n      if (split) {\n        memo.push(current);\n        current = [];\n      } else if (index === _this11.length - 1) {\n        memo.push(current);\n      }\n\n      return memo;\n    }, []);\n  };\n\n  _proto.map = function map(callback) {\n    return this.nodes.map(callback);\n  };\n\n  _proto.reduce = function reduce(callback, memo) {\n    return this.nodes.reduce(callback, memo);\n  };\n\n  _proto.every = function every(callback) {\n    return this.nodes.every(callback);\n  };\n\n  _proto.some = function some(callback) {\n    return this.nodes.some(callback);\n  };\n\n  _proto.filter = function filter(callback) {\n    return this.nodes.filter(callback);\n  };\n\n  _proto.sort = function sort(callback) {\n    return this.nodes.sort(callback);\n  };\n\n  _proto.toString = function toString() {\n    return this.map(String).join('');\n  };\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      return this.at(0);\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      return this.at(this.length - 1);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.nodes.length;\n    }\n  }]);\n\n  return Container;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Container;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n\n  function Root(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.ROOT;\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.toString = function toString() {\n    var str = this.reduce(function (memo, selector) {\n      memo.push(String(selector));\n      return memo;\n    }, []).join(',');\n    return this.trailingComma ? str + ',' : str;\n  };\n\n  _proto.error = function error(message, options) {\n    if (this._error) {\n      return this._error(message, options);\n    } else {\n      return new Error(message);\n    }\n  };\n\n  _createClass(Root, [{\n    key: \"errorGenerator\",\n    set: function set(handler) {\n      this._error = handler;\n    }\n  }]);\n\n  return Root;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Root;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Selector = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Selector, _Container);\n\n  function Selector(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.SELECTOR;\n    return _this;\n  }\n\n  return Selector;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Selector;\nmodule.exports = exports.default;","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClassName = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ClassName, _Node);\n\n  function ClassName(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.CLASS;\n    _this._constructed = true;\n    return _this;\n  }\n\n  var _proto = ClassName.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '.' + _Node.prototype.valueToString.call(this);\n  };\n\n  _createClass(ClassName, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      if (this._constructed) {\n        var escaped = (0, _cssesc[\"default\"])(v, {\n          isIdentifier: true\n        });\n\n        if (escaped !== v) {\n          (0, _util.ensureObject)(this, \"raws\");\n          this.raws.value = escaped;\n        } else if (this.raws) {\n          delete this.raws.value;\n        }\n      }\n\n      this._value = v;\n    }\n  }]);\n\n  return ClassName;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ClassName;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n\n  function Comment(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMMENT;\n    return _this;\n  }\n\n  return Comment;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Comment;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ID = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ID, _Node);\n\n  function ID(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.ID;\n    return _this;\n  }\n\n  var _proto = ID.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '#' + _Node.prototype.valueToString.call(this);\n  };\n\n  return ID;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ID;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Namespace = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Namespace, _Node);\n\n  function Namespace() {\n    return _Node.apply(this, arguments) || this;\n  }\n\n  var _proto = Namespace.prototype;\n\n  _proto.qualifiedName = function qualifiedName(value) {\n    if (this.namespace) {\n      return this.namespaceString + \"|\" + value;\n    } else {\n      return value;\n    }\n  };\n\n  _proto.valueToString = function valueToString() {\n    return this.qualifiedName(_Node.prototype.valueToString.call(this));\n  };\n\n  _createClass(Namespace, [{\n    key: \"namespace\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      if (namespace === true || namespace === \"*\" || namespace === \"&\") {\n        this._namespace = namespace;\n\n        if (this.raws) {\n          delete this.raws.namespace;\n        }\n\n        return;\n      }\n\n      var escaped = (0, _cssesc[\"default\"])(namespace, {\n        isIdentifier: true\n      });\n      this._namespace = namespace;\n\n      if (escaped !== namespace) {\n        (0, _util.ensureObject)(this, \"raws\");\n        this.raws.namespace = escaped;\n      } else if (this.raws) {\n        delete this.raws.namespace;\n      }\n    }\n  }, {\n    key: \"ns\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      this.namespace = namespace;\n    }\n  }, {\n    key: \"namespaceString\",\n    get: function get() {\n      if (this.namespace) {\n        var ns = this.stringifyProperty(\"namespace\");\n\n        if (ns === true) {\n          return '';\n        } else {\n          return ns;\n        }\n      } else {\n        return '';\n      }\n    }\n  }]);\n\n  return Namespace;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Namespace;\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Tag = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Tag, _Namespace);\n\n  function Tag(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.TAG;\n    return _this;\n  }\n\n  return Tag;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Tag;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar String = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(String, _Node);\n\n  function String(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.STRING;\n    return _this;\n  }\n\n  return String;\n}(_node[\"default\"]);\n\nexports[\"default\"] = String;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Pseudo = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Pseudo, _Container);\n\n  function Pseudo(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.PSEUDO;\n    return _this;\n  }\n\n  var _proto = Pseudo.prototype;\n\n  _proto.toString = function toString() {\n    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n    return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), params, this.rawSpaceAfter].join('');\n  };\n\n  return Pseudo;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Pseudo;\nmodule.exports = exports.default;","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","export const deprecate = fn => fn;\nexport const types = {\n  isNativeError: () => true\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports.unescapeValue = unescapeValue;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _unesc = _interopRequireDefault(require(\"../util/unesc\"));\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nvar _CSSESC_QUOTE_OPTIONS;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar deprecate = require(\"util-deprecate\");\n\nvar WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n\n  unescaped = (0, _unesc[\"default\"])(unescaped);\n\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\n\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n\n  if (opts.value === undefined) {\n    return opts;\n  }\n\n  warnOfDeprecatedConstructor();\n\n  var _unescapeValue = unescapeValue(opts.value),\n      quoteMark = _unescapeValue.quoteMark,\n      unescaped = _unescapeValue.unescaped;\n\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\n\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n\n  function Attribute(opts) {\n    var _this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n\n\n  var _proto = Attribute.prototype;\n\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var quoteMark = this._determineQuoteMark(options);\n\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc[\"default\"])(this._value, cssescopts);\n    return escaped;\n  };\n\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */\n  ;\n\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n\n    this._syncRawValue();\n  }\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */\n  ;\n\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc[\"default\"])(v, {\n        isIdentifier: true\n      });\n\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc[\"default\"])(v, opts);\n\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */\n  ;\n\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n\n    return quoteMark;\n  };\n\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc[\"default\"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc[\"default\"])(value, {\n        isIdentifier: true\n      });\n\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n\n    var attrSpaces = this._spacesFor(spaceName);\n\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */\n  ;\n\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n\n    var attributeSpaces = this._spacesFor(\"attribute\");\n\n    count += attributeSpaces.before.length;\n\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n\n    if (name === \"attributeNS\") {\n      return count;\n    }\n\n    count += this.namespaceString.length;\n\n    if (this.namespace) {\n      count += 1;\n    }\n\n    if (name === \"attribute\") {\n      return count;\n    }\n\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n\n    var operatorSpaces = this._spacesFor(\"operator\");\n\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n\n    count += operator.length;\n    count += operatorSpaces.after.length;\n\n    var valueSpaces = this._spacesFor(\"value\");\n\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n\n    count += value.length;\n    count += valueSpaces.after.length;\n\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n\n    count += insensitiveSpaces.before.length;\n\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n\n    return -1;\n  };\n\n  _proto.toString = function toString() {\n    var _this2 = this;\n\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n    if (this.operator && (this.value || this.value === '')) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */\n    ,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    ,\n    set: function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n            deprecatedUsage = _unescapeValue2.deprecatedUsage,\n            unescaped = _unescapeValue2.unescaped,\n            quoteMark = _unescapeValue2.quoteMark;\n\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n\n      this._attribute = name;\n    }\n  }]);\n\n  return Attribute;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Universal = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Universal, _Namespace);\n\n  function Universal(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.UNIVERSAL;\n    _this.value = '*';\n    return _this;\n  }\n\n  return Universal;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Universal;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Combinator = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Combinator, _Node);\n\n  function Combinator(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMBINATOR;\n    return _this;\n  }\n\n  return Combinator;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Combinator;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Nesting = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Nesting, _Node);\n\n  function Nesting(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.NESTING;\n    _this.value = '&';\n    return _this;\n  }\n\n  return Nesting;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Nesting;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = sortAscending;\n\nfunction sortAscending(list) {\n  return list.sort(function (a, b) {\n    return a - b;\n  });\n}\n\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.combinator = exports.word = exports.comment = exports.str = exports.tab = exports.newline = exports.feed = exports.cr = exports.backslash = exports.bang = exports.slash = exports.doubleQuote = exports.singleQuote = exports.space = exports.greaterThan = exports.pipe = exports.equals = exports.plus = exports.caret = exports.tilde = exports.dollar = exports.closeSquare = exports.openSquare = exports.closeParenthesis = exports.openParenthesis = exports.semicolon = exports.colon = exports.comma = exports.at = exports.asterisk = exports.ampersand = void 0;\nvar ampersand = 38; // `&`.charCodeAt(0);\n\nexports.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\n\nexports.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\n\nexports.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\n\nexports.comma = comma;\nvar colon = 58; // `:`.charCodeAt(0);\n\nexports.colon = colon;\nvar semicolon = 59; // `;`.charCodeAt(0);\n\nexports.semicolon = semicolon;\nvar openParenthesis = 40; // `(`.charCodeAt(0);\n\nexports.openParenthesis = openParenthesis;\nvar closeParenthesis = 41; // `)`.charCodeAt(0);\n\nexports.closeParenthesis = closeParenthesis;\nvar openSquare = 91; // `[`.charCodeAt(0);\n\nexports.openSquare = openSquare;\nvar closeSquare = 93; // `]`.charCodeAt(0);\n\nexports.closeSquare = closeSquare;\nvar dollar = 36; // `$`.charCodeAt(0);\n\nexports.dollar = dollar;\nvar tilde = 126; // `~`.charCodeAt(0);\n\nexports.tilde = tilde;\nvar caret = 94; // `^`.charCodeAt(0);\n\nexports.caret = caret;\nvar plus = 43; // `+`.charCodeAt(0);\n\nexports.plus = plus;\nvar equals = 61; // `=`.charCodeAt(0);\n\nexports.equals = equals;\nvar pipe = 124; // `|`.charCodeAt(0);\n\nexports.pipe = pipe;\nvar greaterThan = 62; // `>`.charCodeAt(0);\n\nexports.greaterThan = greaterThan;\nvar space = 32; // ` `.charCodeAt(0);\n\nexports.space = space;\nvar singleQuote = 39; // `'`.charCodeAt(0);\n\nexports.singleQuote = singleQuote;\nvar doubleQuote = 34; // `\"`.charCodeAt(0);\n\nexports.doubleQuote = doubleQuote;\nvar slash = 47; // `/`.charCodeAt(0);\n\nexports.slash = slash;\nvar bang = 33; // `!`.charCodeAt(0);\n\nexports.bang = bang;\nvar backslash = 92; // '\\\\'.charCodeAt(0);\n\nexports.backslash = backslash;\nvar cr = 13; // '\\r'.charCodeAt(0);\n\nexports.cr = cr;\nvar feed = 12; // '\\f'.charCodeAt(0);\n\nexports.feed = feed;\nvar newline = 10; // '\\n'.charCodeAt(0);\n\nexports.newline = newline;\nvar tab = 9; // '\\t'.charCodeAt(0);\n// Expose aliases primarily for readability.\n\nexports.tab = tab;\nvar str = singleQuote; // No good single character representation!\n\nexports.str = str;\nvar comment = -1;\nexports.comment = comment;\nvar word = -2;\nexports.word = word;\nvar combinator = -3;\nexports.combinator = combinator;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = tokenize;\nexports.FIELDS = void 0;\n\nvar t = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar _unescapable, _wordDelimiters;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);\nvar wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);\nvar hex = {};\nvar hexChars = \"0123456789abcdefABCDEF\";\n\nfor (var i = 0; i < hexChars.length; i++) {\n  hex[hexChars.charCodeAt(i)] = true;\n}\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word's first letter occurs\n */\n\n\nfunction consumeWord(css, start) {\n  var next = start;\n  var code;\n\n  do {\n    code = css.charCodeAt(next);\n\n    if (wordDelimiters[code]) {\n      return next - 1;\n    } else if (code === t.backslash) {\n      next = consumeEscape(css, next) + 1;\n    } else {\n      // All other characters are part of the word\n      next++;\n    }\n  } while (next < css.length);\n\n  return next - 1;\n}\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\n\n\nfunction consumeEscape(css, start) {\n  var next = start;\n  var code = css.charCodeAt(next + 1);\n\n  if (unescapable[code]) {// just consume the escape char\n  } else if (hex[code]) {\n    var hexDigits = 0; // consume up to 6 hex chars\n\n    do {\n      next++;\n      hexDigits++;\n      code = css.charCodeAt(next + 1);\n    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape\n\n\n    if (hexDigits < 6 && code === t.space) {\n      next++;\n    }\n  } else {\n    // the next char is part of the current word\n    next++;\n  }\n\n  return next;\n}\n\nvar FIELDS = {\n  TYPE: 0,\n  START_LINE: 1,\n  START_COL: 2,\n  END_LINE: 3,\n  END_COL: 4,\n  START_POS: 5,\n  END_POS: 6\n};\nexports.FIELDS = FIELDS;\n\nfunction tokenize(input) {\n  var tokens = [];\n  var css = input.css.valueOf();\n  var _css = css,\n      length = _css.length;\n  var offset = -1;\n  var line = 1;\n  var start = 0;\n  var end = 0;\n  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;\n\n  function unclosed(what, fix) {\n    if (input.safe) {\n      // fyi: this is never set to true.\n      css += fix;\n      next = css.length - 1;\n    } else {\n      throw input.error('Unclosed ' + what, line, start - offset, start);\n    }\n  }\n\n  while (start < length) {\n    code = css.charCodeAt(start);\n\n    if (code === t.newline) {\n      offset = start;\n      line += 1;\n    }\n\n    switch (code) {\n      case t.space:\n      case t.tab:\n      case t.newline:\n      case t.cr:\n      case t.feed:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n\n          if (code === t.newline) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n\n        tokenType = t.space;\n        endLine = line;\n        endColumn = next - offset - 1;\n        end = next;\n        break;\n\n      case t.plus:\n      case t.greaterThan:\n      case t.tilde:\n      case t.pipe:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n\n        tokenType = t.combinator;\n        endLine = line;\n        endColumn = start - offset;\n        end = next;\n        break;\n      // Consume these characters as single tokens.\n\n      case t.asterisk:\n      case t.ampersand:\n      case t.bang:\n      case t.comma:\n      case t.equals:\n      case t.dollar:\n      case t.caret:\n      case t.openSquare:\n      case t.closeSquare:\n      case t.colon:\n      case t.semicolon:\n      case t.openParenthesis:\n      case t.closeParenthesis:\n        next = start;\n        tokenType = code;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      case t.singleQuote:\n      case t.doubleQuote:\n        quote = code === t.singleQuote ? \"'\" : '\"';\n        next = start;\n\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n\n          if (next === -1) {\n            unclosed('quote', quote);\n          }\n\n          escapePos = next;\n\n          while (css.charCodeAt(escapePos - 1) === t.backslash) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n\n        tokenType = t.str;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      default:\n        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n          next = css.indexOf('*/', start + 2) + 1;\n\n          if (next === 0) {\n            unclosed('comment', '*/');\n          }\n\n          content = css.slice(start, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n\n          tokenType = t.comment;\n          line = nextLine;\n          endLine = nextLine;\n          endColumn = next - nextOffset;\n        } else if (code === t.slash) {\n          next = start;\n          tokenType = code;\n          endLine = line;\n          endColumn = start - offset;\n          end = next + 1;\n        } else {\n          next = consumeWord(css, start);\n          tokenType = t.word;\n          endLine = line;\n          endColumn = next - offset;\n        }\n\n        end = next + 1;\n        break;\n    } // Ensure that the token structure remains consistent\n\n\n    tokens.push([tokenType, // [0] Token type\n    line, // [1] Starting line\n    start - offset, // [2] Starting column\n    endLine, // [3] Ending line\n    endColumn, // [4] Ending column\n    start, // [5] Start position / Source index\n    end // [6] End position\n    ]); // Reset offset for the next token\n\n    if (nextOffset) {\n      offset = nextOffset;\n      nextOffset = null;\n    }\n\n    start = end;\n  }\n\n  return tokens;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _root = _interopRequireDefault(require(\"./selectors/root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selectors/selector\"));\n\nvar _className = _interopRequireDefault(require(\"./selectors/className\"));\n\nvar _comment = _interopRequireDefault(require(\"./selectors/comment\"));\n\nvar _id = _interopRequireDefault(require(\"./selectors/id\"));\n\nvar _tag = _interopRequireDefault(require(\"./selectors/tag\"));\n\nvar _string = _interopRequireDefault(require(\"./selectors/string\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./selectors/pseudo\"));\n\nvar _attribute = _interopRequireWildcard(require(\"./selectors/attribute\"));\n\nvar _universal = _interopRequireDefault(require(\"./selectors/universal\"));\n\nvar _combinator = _interopRequireDefault(require(\"./selectors/combinator\"));\n\nvar _nesting = _interopRequireDefault(require(\"./selectors/nesting\"));\n\nvar _sortAscending = _interopRequireDefault(require(\"./sortAscending\"));\n\nvar _tokenize = _interopRequireWildcard(require(\"./tokenize\"));\n\nvar tokens = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar types = _interopRequireWildcard(require(\"./selectors/types\"));\n\nvar _util = require(\"./util\");\n\nvar _WHITESPACE_TOKENS, _Object$assign;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);\nvar WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));\n\nfunction tokenStart(token) {\n  return {\n    line: token[_tokenize.FIELDS.START_LINE],\n    column: token[_tokenize.FIELDS.START_COL]\n  };\n}\n\nfunction tokenEnd(token) {\n  return {\n    line: token[_tokenize.FIELDS.END_LINE],\n    column: token[_tokenize.FIELDS.END_COL]\n  };\n}\n\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n}\n\nfunction getTokenSource(token) {\n  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);\n}\n\nfunction getTokenSourceSpan(startToken, endToken) {\n  if (!startToken) {\n    return undefined;\n  }\n\n  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);\n}\n\nfunction unescapeProp(node, prop) {\n  var value = node[prop];\n\n  if (typeof value !== \"string\") {\n    return;\n  }\n\n  if (value.indexOf(\"\\\\\") !== -1) {\n    (0, _util.ensureObject)(node, 'raws');\n    node[prop] = (0, _util.unesc)(value);\n\n    if (node.raws[prop] === undefined) {\n      node.raws[prop] = value;\n    }\n  }\n\n  return node;\n}\n\nfunction indexesOf(array, item) {\n  var i = -1;\n  var indexes = [];\n\n  while ((i = array.indexOf(item, i + 1)) !== -1) {\n    indexes.push(i);\n  }\n\n  return indexes;\n}\n\nfunction uniqs() {\n  var list = Array.prototype.concat.apply([], arguments);\n  return list.filter(function (item, i) {\n    return i === list.indexOf(item);\n  });\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.rule = rule;\n    this.options = Object.assign({\n      lossy: false,\n      safe: false\n    }, options);\n    this.position = 0;\n    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n    this.tokens = (0, _tokenize[\"default\"])({\n      css: this.css,\n      error: this._errorGenerator(),\n      safe: this.options.safe\n    });\n    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n    this.root = new _root[\"default\"]({\n      source: rootSource\n    });\n    this.root.errorGenerator = this._errorGenerator();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: {\n          line: 1,\n          column: 1\n        }\n      }\n    });\n    this.root.append(selector);\n    this.current = selector;\n    this.loop();\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto._errorGenerator = function _errorGenerator() {\n    var _this = this;\n\n    return function (message, errorOptions) {\n      if (typeof _this.rule === 'string') {\n        return new Error(message);\n      }\n\n      return _this.rule.error(message, errorOptions);\n    };\n  };\n\n  _proto.attribute = function attribute() {\n    var attr = [];\n    var startingToken = this.currToken;\n    this.position++;\n\n    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      attr.push(this.currToken);\n      this.position++;\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n\n    var len = attr.length;\n    var node = {\n      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n    };\n\n    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {\n      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);\n    }\n\n    var pos = 0;\n    var spaceBefore = '';\n    var commentBefore = '';\n    var lastAdded = null;\n    var spaceAfterMeaningfulToken = false;\n\n    while (pos < len) {\n      var token = attr[pos];\n      var content = this.content(token);\n      var next = attr[pos + 1];\n\n      switch (token[_tokenize.FIELDS.TYPE]) {\n        case tokens.space:\n          // if (\n          //     len === 1 ||\n          //     pos === 0 && this.content(next) === '|'\n          // ) {\n          //     return this.expected('attribute', token[TOKEN.START_POS], content);\n          // }\n          spaceAfterMeaningfulToken = true;\n\n          if (this.options.lossy) {\n            break;\n          }\n\n          if (lastAdded) {\n            (0, _util.ensureObject)(node, 'spaces', lastAdded);\n            var prevContent = node.spaces[lastAdded].after || '';\n            node.spaces[lastAdded].after = prevContent + content;\n            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;\n\n            if (existingComment) {\n              node.raws.spaces[lastAdded].after = existingComment + content;\n            }\n          } else {\n            spaceBefore = spaceBefore + content;\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        case tokens.asterisk:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = spaceBefore;\n              commentBefore = '';\n            }\n\n            node.namespace = (node.namespace || \"\") + content;\n            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;\n\n            if (rawValue) {\n              node.raws.namespace += content;\n            }\n\n            lastAdded = 'namespace';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.dollar:\n          if (lastAdded === \"value\") {\n            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');\n            node.value += \"$\";\n\n            if (oldRawValue) {\n              node.raws.value = oldRawValue + \"$\";\n            }\n\n            break;\n          }\n\n        // Falls through\n\n        case tokens.caret:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.combinator:\n          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          if (content !== '|') {\n            spaceAfterMeaningfulToken = false;\n            break;\n          }\n\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if (!node.namespace && !node.attribute) {\n            node.namespace = true;\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.word:\n          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.\n          !node.operator && !node.namespace) {\n            node.namespace = content;\n            lastAdded = 'namespace';\n          } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = commentBefore;\n              commentBefore = '';\n            }\n\n            node.attribute = (node.attribute || \"\") + content;\n\n            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;\n\n            if (_rawValue) {\n              node.raws.attribute += content;\n            }\n\n            lastAdded = 'attribute';\n          } else if (!node.value && node.value !== \"\" || lastAdded === \"value\" && !spaceAfterMeaningfulToken) {\n            var _unescaped = (0, _util.unesc)(content);\n\n            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';\n\n            var oldValue = node.value || '';\n            node.value = oldValue + _unescaped;\n            node.quoteMark = null;\n\n            if (_unescaped !== content || _oldRawValue) {\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws.value = (_oldRawValue || oldValue) + content;\n            }\n\n            lastAdded = 'value';\n          } else {\n            var insensitive = content === 'i' || content === \"I\";\n\n            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n              node.insensitive = insensitive;\n\n              if (!insensitive || content === \"I\") {\n                (0, _util.ensureObject)(node, 'raws');\n                node.raws.insensitiveFlag = content;\n              }\n\n              lastAdded = 'insensitive';\n\n              if (spaceBefore) {\n                (0, _util.ensureObject)(node, 'spaces', 'insensitive');\n                node.spaces.insensitive.before = spaceBefore;\n                spaceBefore = '';\n              }\n\n              if (commentBefore) {\n                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');\n                node.raws.spaces.insensitive.before = commentBefore;\n                commentBefore = '';\n              }\n            } else if (node.value || node.value === '') {\n              lastAdded = 'value';\n              node.value += content;\n\n              if (node.raws.value) {\n                node.raws.value += content;\n              }\n            }\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.str:\n          if (!node.attribute || !node.operator) {\n            return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          var _unescapeValue = (0, _attribute.unescapeValue)(content),\n              unescaped = _unescapeValue.unescaped,\n              quoteMark = _unescapeValue.quoteMark;\n\n          node.value = unescaped;\n          node.quoteMark = quoteMark;\n          lastAdded = 'value';\n          (0, _util.ensureObject)(node, 'raws');\n          node.raws.value = content;\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.equals:\n          if (!node.attribute) {\n            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);\n          }\n\n          if (node.value) {\n            return this.error('Unexpected \"=\" found; an operator was already defined.', {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          node.operator = node.operator ? node.operator + content : content;\n          lastAdded = 'operator';\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.comment:\n          if (lastAdded) {\n            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {\n              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';\n              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);\n              node.raws.spaces[lastAdded].after = rawLastComment + content;\n            } else {\n              var lastValue = node[lastAdded] || '';\n              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws[lastAdded] = rawLastValue + content;\n            }\n          } else {\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        default:\n          return this.error(\"Unexpected \\\"\" + content + \"\\\" found.\", {\n            index: token[_tokenize.FIELDS.START_POS]\n          });\n      }\n\n      pos++;\n    }\n\n    unescapeProp(node, \"attribute\");\n    unescapeProp(node, \"namespace\");\n    this.newNode(new _attribute[\"default\"](node));\n    this.position++;\n  }\n  /**\n   * return a node containing meaningless garbage up to (but not including) the specified token position.\n   * if the token position is negative, all remaining tokens are consumed.\n   *\n   * This returns an array containing a single string node if all whitespace,\n   * otherwise an array of comment nodes with space before and after.\n   *\n   * These tokens are not added to the current selector, the caller can add them or use them to amend\n   * a previous node's space metadata.\n   *\n   * In lossy mode, this returns only comments.\n   */\n  ;\n\n  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {\n    if (stopPosition < 0) {\n      stopPosition = this.tokens.length;\n    }\n\n    var startPosition = this.position;\n    var nodes = [];\n    var space = \"\";\n    var lastComment = undefined;\n\n    do {\n      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n        if (!this.options.lossy) {\n          space += this.content();\n        }\n      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {\n        var spaces = {};\n\n        if (space) {\n          spaces.before = space;\n          space = \"\";\n        }\n\n        lastComment = new _comment[\"default\"]({\n          value: this.content(),\n          source: getTokenSource(this.currToken),\n          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n          spaces: spaces\n        });\n        nodes.push(lastComment);\n      }\n    } while (++this.position < stopPosition);\n\n    if (space) {\n      if (lastComment) {\n        lastComment.spaces.after = space;\n      } else if (!this.options.lossy) {\n        var firstToken = this.tokens[startPosition];\n        var lastToken = this.tokens[this.position - 1];\n        nodes.push(new _string[\"default\"]({\n          value: '',\n          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),\n          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n          spaces: {\n            before: space,\n            after: ''\n          }\n        }));\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * \n   * @param {*} nodes \n   */\n  ;\n\n  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {\n    var _this2 = this;\n\n    if (requiredSpace === void 0) {\n      requiredSpace = false;\n    }\n\n    var space = \"\";\n    var rawSpace = \"\";\n    nodes.forEach(function (n) {\n      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);\n\n      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);\n\n      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n    });\n\n    if (rawSpace === space) {\n      rawSpace = undefined;\n    }\n\n    var result = {\n      space: space,\n      rawSpace: rawSpace\n    };\n    return result;\n  };\n\n  _proto.isNamedCombinator = function isNamedCombinator(position) {\n    if (position === void 0) {\n      position = this.position;\n    }\n\n    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;\n  };\n\n  _proto.namedCombinator = function namedCombinator() {\n    if (this.isNamedCombinator()) {\n      var nameRaw = this.content(this.tokens[this.position + 1]);\n      var name = (0, _util.unesc)(nameRaw).toLowerCase();\n      var raws = {};\n\n      if (name !== nameRaw) {\n        raws.value = \"/\" + nameRaw + \"/\";\n      }\n\n      var node = new _combinator[\"default\"]({\n        value: \"/\" + name + \"/\",\n        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n        raws: raws\n      });\n      this.position = this.position + 3;\n      return node;\n    } else {\n      this.unexpected();\n    }\n  };\n\n  _proto.combinator = function combinator() {\n    var _this3 = this;\n\n    if (this.content() === '|') {\n      return this.namespace();\n    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n\n\n    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n\n    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {\n      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n\n      if (nodes.length > 0) {\n        var last = this.current.last;\n\n        if (last) {\n          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),\n              space = _this$convertWhitespa.space,\n              rawSpace = _this$convertWhitespa.rawSpace;\n\n          if (rawSpace !== undefined) {\n            last.rawSpaceAfter += rawSpace;\n          }\n\n          last.spaces.after += space;\n        } else {\n          nodes.forEach(function (n) {\n            return _this3.newNode(n);\n          });\n        }\n      }\n\n      return;\n    }\n\n    var firstToken = this.currToken;\n    var spaceOrDescendantSelectorNodes = undefined;\n\n    if (nextSigTokenPos > this.position) {\n      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n    }\n\n    var node;\n\n    if (this.isNamedCombinator()) {\n      node = this.namedCombinator();\n    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n      node = new _combinator[\"default\"]({\n        value: this.content(),\n        source: getTokenSource(this.currToken),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n      });\n      this.position++;\n    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {// pass\n    } else if (!spaceOrDescendantSelectorNodes) {\n      this.unexpected();\n    }\n\n    if (node) {\n      if (spaceOrDescendantSelectorNodes) {\n        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),\n            _space = _this$convertWhitespa2.space,\n            _rawSpace = _this$convertWhitespa2.rawSpace;\n\n        node.spaces.before = _space;\n        node.rawSpaceBefore = _rawSpace;\n      }\n    } else {\n      // descendant combinator\n      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),\n          _space2 = _this$convertWhitespa3.space,\n          _rawSpace2 = _this$convertWhitespa3.rawSpace;\n\n      if (!_rawSpace2) {\n        _rawSpace2 = _space2;\n      }\n\n      var spaces = {};\n      var raws = {\n        spaces: {}\n      };\n\n      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {\n        spaces.before = _space2.slice(0, _space2.length - 1);\n        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);\n      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {\n        spaces.after = _space2.slice(1);\n        raws.spaces.after = _rawSpace2.slice(1);\n      } else {\n        raws.value = _rawSpace2;\n      }\n\n      node = new _combinator[\"default\"]({\n        value: ' ',\n        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n        spaces: spaces,\n        raws: raws\n      });\n    }\n\n    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {\n      node.spaces.after = this.optionalSpace(this.content());\n      this.position++;\n    }\n\n    return this.newNode(node);\n  };\n\n  _proto.comma = function comma() {\n    if (this.position === this.tokens.length - 1) {\n      this.root.trailingComma = true;\n      this.position++;\n      return;\n    }\n\n    this.current._inferEndPosition();\n\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: tokenStart(this.tokens[this.position + 1])\n      }\n    });\n    this.current.parent.append(selector);\n    this.current = selector;\n    this.position++;\n  };\n\n  _proto.comment = function comment() {\n    var current = this.currToken;\n    this.newNode(new _comment[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.error = function error(message, opts) {\n    throw this.root.error(message, opts);\n  };\n\n  _proto.missingBackslash = function missingBackslash() {\n    return this.error('Expected a backslash preceding the semicolon.', {\n      index: this.currToken[_tokenize.FIELDS.START_POS]\n    });\n  };\n\n  _proto.missingParenthesis = function missingParenthesis() {\n    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.missingSquareBracket = function missingSquareBracket() {\n    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.unexpected = function unexpected() {\n    return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.namespace = function namespace() {\n    var before = this.prevToken && this.content(this.prevToken) || true;\n\n    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.position++;\n      return this.word(before);\n    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {\n      this.position++;\n      return this.universal(before);\n    }\n  };\n\n  _proto.nesting = function nesting() {\n    if (this.nextToken) {\n      var nextContent = this.content(this.nextToken);\n\n      if (nextContent === \"|\") {\n        this.position++;\n        return;\n      }\n    }\n\n    var current = this.currToken;\n    this.newNode(new _nesting[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.parentheses = function parentheses() {\n    var last = this.current.last;\n    var unbalanced = 1;\n    this.position++;\n\n    if (last && last.type === types.PSEUDO) {\n      var selector = new _selector[\"default\"]({\n        source: {\n          start: tokenStart(this.tokens[this.position - 1])\n        }\n      });\n      var cache = this.current;\n      last.append(selector);\n      this.current = selector;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        if (unbalanced) {\n          this.parse();\n        } else {\n          this.current.source.end = tokenEnd(this.currToken);\n          this.current.parent.source.end = tokenEnd(this.currToken);\n          this.position++;\n        }\n      }\n\n      this.current = cache;\n    } else {\n      // I think this case should be an error. It's used to implement a basic parse of media queries\n      // but I don't think it's a good idea.\n      var parenStart = this.currToken;\n      var parenValue = \"(\";\n      var parenEnd;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        parenEnd = this.currToken;\n        parenValue += this.parseParenthesisToken(this.currToken);\n        this.position++;\n      }\n\n      if (last) {\n        last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n      } else {\n        this.newNode(new _string[\"default\"]({\n          value: parenValue,\n          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),\n          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]\n        }));\n      }\n    }\n\n    if (unbalanced) {\n      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.pseudo = function pseudo() {\n    var _this4 = this;\n\n    var pseudoStr = '';\n    var startingToken = this.currToken;\n\n    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {\n      pseudoStr += this.content();\n      this.position++;\n    }\n\n    if (!this.currToken) {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.splitWord(false, function (first, length) {\n        pseudoStr += first;\n\n        _this4.newNode(new _pseudo[\"default\"]({\n          value: pseudoStr,\n          source: getTokenSourceSpan(startingToken, _this4.currToken),\n          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n        }));\n\n        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          _this4.error('Misplaced parenthesis.', {\n            index: _this4.nextToken[_tokenize.FIELDS.START_POS]\n          });\n        }\n      });\n    } else {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.space = function space() {\n    var content = this.content(); // Handle space before and after the selector\n\n    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {\n      return node.type === 'comment';\n    })) {\n      this.spaces = this.optionalSpace(content);\n      this.position++;\n    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      this.current.last.spaces.after = this.optionalSpace(content);\n      this.position++;\n    } else {\n      this.combinator();\n    }\n  };\n\n  _proto.string = function string() {\n    var current = this.currToken;\n    this.newNode(new _string[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.universal = function universal(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    var current = this.currToken;\n    this.newNode(new _universal[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }), namespace);\n    this.position++;\n  };\n\n  _proto.splitWord = function splitWord(namespace, firstCallback) {\n    var _this5 = this;\n\n    var nextToken = this.nextToken;\n    var word = this.content();\n\n    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {\n      this.position++;\n      var current = this.content();\n      word += current;\n\n      if (current.lastIndexOf('\\\\') === current.length - 1) {\n        var next = this.nextToken;\n\n        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {\n          word += this.requiredSpace(this.content(next));\n          this.position++;\n        }\n      }\n\n      nextToken = this.nextToken;\n    }\n\n    var hasClass = indexesOf(word, '.').filter(function (i) {\n      // Allow escaped dot within class name\n      var escapedDot = word[i - 1] === '\\\\'; // Allow decimal numbers percent in @keyframes\n\n      var isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n      return !escapedDot && !isKeyframesPercent;\n    });\n    var hasId = indexesOf(word, '#').filter(function (i) {\n      return word[i - 1] !== '\\\\';\n    }); // Eliminate Sass interpolations from the list of id indexes\n\n    var interpolations = indexesOf(word, '#{');\n\n    if (interpolations.length) {\n      hasId = hasId.filter(function (hashIndex) {\n        return !~interpolations.indexOf(hashIndex);\n      });\n    }\n\n    var indices = (0, _sortAscending[\"default\"])(uniqs([0].concat(hasClass, hasId)));\n    indices.forEach(function (ind, i) {\n      var index = indices[i + 1] || word.length;\n      var value = word.slice(ind, index);\n\n      if (i === 0 && firstCallback) {\n        return firstCallback.call(_this5, value, indices.length);\n      }\n\n      var node;\n      var current = _this5.currToken;\n      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];\n      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n\n      if (~hasClass.indexOf(ind)) {\n        var classNameOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n      } else if (~hasId.indexOf(ind)) {\n        var idOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n      } else {\n        var tagOpts = {\n          value: value,\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        unescapeProp(tagOpts, \"value\");\n        node = new _tag[\"default\"](tagOpts);\n      }\n\n      _this5.newNode(node, namespace); // Ensure that the namespace is used only once\n\n\n      namespace = null;\n    });\n    this.position++;\n  };\n\n  _proto.word = function word(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    return this.splitWord(namespace);\n  };\n\n  _proto.loop = function loop() {\n    while (this.position < this.tokens.length) {\n      this.parse(true);\n    }\n\n    this.current._inferEndPosition();\n\n    return this.root;\n  };\n\n  _proto.parse = function parse(throwOnParenthesis) {\n    switch (this.currToken[_tokenize.FIELDS.TYPE]) {\n      case tokens.space:\n        this.space();\n        break;\n\n      case tokens.comment:\n        this.comment();\n        break;\n\n      case tokens.openParenthesis:\n        this.parentheses();\n        break;\n\n      case tokens.closeParenthesis:\n        if (throwOnParenthesis) {\n          this.missingParenthesis();\n        }\n\n        break;\n\n      case tokens.openSquare:\n        this.attribute();\n        break;\n\n      case tokens.dollar:\n      case tokens.caret:\n      case tokens.equals:\n      case tokens.word:\n        this.word();\n        break;\n\n      case tokens.colon:\n        this.pseudo();\n        break;\n\n      case tokens.comma:\n        this.comma();\n        break;\n\n      case tokens.asterisk:\n        this.universal();\n        break;\n\n      case tokens.ampersand:\n        this.nesting();\n        break;\n\n      case tokens.slash:\n      case tokens.combinator:\n        this.combinator();\n        break;\n\n      case tokens.str:\n        this.string();\n        break;\n      // These cases throw; no break needed.\n\n      case tokens.closeSquare:\n        this.missingSquareBracket();\n\n      case tokens.semicolon:\n        this.missingBackslash();\n\n      default:\n        this.unexpected();\n    }\n  }\n  /**\n   * Helpers\n   */\n  ;\n\n  _proto.expected = function expected(description, index, found) {\n    if (Array.isArray(description)) {\n      var last = description.pop();\n      description = description.join(', ') + \" or \" + last;\n    }\n\n    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n\n    if (!found) {\n      return this.error(\"Expected \" + an + \" \" + description + \".\", {\n        index: index\n      });\n    }\n\n    return this.error(\"Expected \" + an + \" \" + description + \", found \\\"\" + found + \"\\\" instead.\", {\n      index: index\n    });\n  };\n\n  _proto.requiredSpace = function requiredSpace(space) {\n    return this.options.lossy ? ' ' : space;\n  };\n\n  _proto.optionalSpace = function optionalSpace(space) {\n    return this.options.lossy ? '' : space;\n  };\n\n  _proto.lossySpace = function lossySpace(space, required) {\n    if (this.options.lossy) {\n      return required ? ' ' : '';\n    } else {\n      return space;\n    }\n  };\n\n  _proto.parseParenthesisToken = function parseParenthesisToken(token) {\n    var content = this.content(token);\n\n    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {\n      return this.requiredSpace(content);\n    } else {\n      return content;\n    }\n  };\n\n  _proto.newNode = function newNode(node, namespace) {\n    if (namespace) {\n      if (/^ +$/.test(namespace)) {\n        if (!this.options.lossy) {\n          this.spaces = (this.spaces || '') + namespace;\n        }\n\n        namespace = true;\n      }\n\n      node.namespace = namespace;\n      unescapeProp(node, \"namespace\");\n    }\n\n    if (this.spaces) {\n      node.spaces.before = this.spaces;\n      this.spaces = '';\n    }\n\n    return this.current.append(node);\n  };\n\n  _proto.content = function content(token) {\n    if (token === void 0) {\n      token = this.currToken;\n    }\n\n    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);\n  };\n\n  /**\n   * returns the index of the next non-whitespace, non-comment token.\n   * returns -1 if no meaningful token is found.\n   */\n  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = this.position + 1;\n    }\n\n    var searchPosition = startPosition;\n\n    while (searchPosition < this.tokens.length) {\n      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {\n        searchPosition++;\n        continue;\n      } else {\n        return searchPosition;\n      }\n    }\n\n    return -1;\n  };\n\n  _createClass(Parser, [{\n    key: \"currToken\",\n    get: function get() {\n      return this.tokens[this.position];\n    }\n  }, {\n    key: \"nextToken\",\n    get: function get() {\n      return this.tokens[this.position + 1];\n    }\n  }, {\n    key: \"prevToken\",\n    get: function get() {\n      return this.tokens[this.position - 1];\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports[\"default\"] = Parser;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;\n\nvar _attribute = _interopRequireDefault(require(\"./attribute\"));\n\nvar _className = _interopRequireDefault(require(\"./className\"));\n\nvar _combinator = _interopRequireDefault(require(\"./combinator\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _id = _interopRequireDefault(require(\"./id\"));\n\nvar _nesting = _interopRequireDefault(require(\"./nesting\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./pseudo\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selector\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _tag = _interopRequireDefault(require(\"./tag\"));\n\nvar _universal = _interopRequireDefault(require(\"./universal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar attribute = function attribute(opts) {\n  return new _attribute[\"default\"](opts);\n};\n\nexports.attribute = attribute;\n\nvar className = function className(opts) {\n  return new _className[\"default\"](opts);\n};\n\nexports.className = className;\n\nvar combinator = function combinator(opts) {\n  return new _combinator[\"default\"](opts);\n};\n\nexports.combinator = combinator;\n\nvar comment = function comment(opts) {\n  return new _comment[\"default\"](opts);\n};\n\nexports.comment = comment;\n\nvar id = function id(opts) {\n  return new _id[\"default\"](opts);\n};\n\nexports.id = id;\n\nvar nesting = function nesting(opts) {\n  return new _nesting[\"default\"](opts);\n};\n\nexports.nesting = nesting;\n\nvar pseudo = function pseudo(opts) {\n  return new _pseudo[\"default\"](opts);\n};\n\nexports.pseudo = pseudo;\n\nvar root = function root(opts) {\n  return new _root[\"default\"](opts);\n};\n\nexports.root = root;\n\nvar selector = function selector(opts) {\n  return new _selector[\"default\"](opts);\n};\n\nexports.selector = selector;\n\nvar string = function string(opts) {\n  return new _string[\"default\"](opts);\n};\n\nexports.string = string;\n\nvar tag = function tag(opts) {\n  return new _tag[\"default\"](opts);\n};\n\nexports.tag = tag;\n\nvar universal = function universal(opts) {\n  return new _universal[\"default\"](opts);\n};\n\nexports.universal = universal;","\"use strict\";\n\nexports.__esModule = true;\nexports.isNode = isNode;\nexports.isPseudoElement = isPseudoElement;\nexports.isPseudoClass = isPseudoClass;\nexports.isContainer = isContainer;\nexports.isNamespace = isNamespace;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;\n\nvar _types = require(\"./types\");\n\nvar _IS_TYPE;\n\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\n\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\n\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n}\n\nvar isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nexports.isAttribute = isAttribute;\nvar isClassName = isNodeType.bind(null, _types.CLASS);\nexports.isClassName = isClassName;\nvar isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nexports.isCombinator = isCombinator;\nvar isComment = isNodeType.bind(null, _types.COMMENT);\nexports.isComment = isComment;\nvar isIdentifier = isNodeType.bind(null, _types.ID);\nexports.isIdentifier = isIdentifier;\nvar isNesting = isNodeType.bind(null, _types.NESTING);\nexports.isNesting = isNesting;\nvar isPseudo = isNodeType.bind(null, _types.PSEUDO);\nexports.isPseudo = isPseudo;\nvar isRoot = isNodeType.bind(null, _types.ROOT);\nexports.isRoot = isRoot;\nvar isSelector = isNodeType.bind(null, _types.SELECTOR);\nexports.isSelector = isSelector;\nvar isString = isNodeType.bind(null, _types.STRING);\nexports.isString = isString;\nvar isTag = isNodeType.bind(null, _types.TAG);\nexports.isTag = isTag;\nvar isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\nexports.isUniversal = isUniversal;\n\nfunction isPseudoElement(node) {\n  return isPseudo(node) && node.value && (node.value.startsWith(\"::\") || node.value.toLowerCase() === \":before\" || node.value.toLowerCase() === \":after\" || node.value.toLowerCase() === \":first-letter\" || node.value.toLowerCase() === \":first-line\");\n}\n\nfunction isPseudoClass(node) {\n  return isPseudo(node) && !isPseudoElement(node);\n}\n\nfunction isContainer(node) {\n  return !!(isNode(node) && node.walk);\n}\n\nfunction isNamespace(node) {\n  return isAttribute(node) || isTag(node);\n}","\"use strict\";\n\nexports.__esModule = true;\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\n\nvar _constructors = require(\"./constructors\");\n\nObject.keys(_constructors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _constructors[key]) return;\n  exports[key] = _constructors[key];\n});\n\nvar _guards = require(\"./guards\");\n\nObject.keys(_guards).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _guards[key]) return;\n  exports[key] = _guards[key];\n});","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar selectors = _interopRequireWildcard(require(\"./selectors\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parser = function parser(processor) {\n  return new _processor[\"default\"](processor);\n};\n\nObject.assign(parser, selectors);\ndelete parser.__esModule;\nvar _default = parser;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parser = require('postcss-selector-parser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-nesting-depth';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (depth) => `Expected nesting depth to be no more than ${depth}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-nesting-depth',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\t/**\n\t * @param {import('postcss').Node} node\n\t */\n\tconst isIgnoreAtRule = (node) =>\n\t\tisAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['blockless-at-rules', 'pseudo-classes'],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules(checkStatement);\n\t\troot.walkAtRules(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction checkStatement(statement) {\n\t\t\tif (isIgnoreAtRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isRule(statement) && !isStandardSyntaxRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst depth = nestingDepth(statement, 0);\n\n\t\t\tif (depth > primary) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {import('postcss').Node} node\n\t * @param {number} level\n\t * @returns {number}\n\t */\n\tfunction nestingDepth(node, level) {\n\t\tconst parent = node.parent;\n\n\t\tif (parent == null) {\n\t\t\tthrow new Error('The parent node must exist');\n\t\t}\n\n\t\tif (isIgnoreAtRule(parent)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// The nesting depth level's computation has finished\n\t\t// when this function, recursively called, receives\n\t\t// a node that is not nested -- a direct child of the\n\t\t// root node\n\t\tif (isRoot(parent) || (isAtRule(parent) && parent.parent && isRoot(parent.parent))) {\n\t\t\treturn level;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t */\n\t\tfunction containsPseudoClassesOnly(selector) {\n\t\t\tconst normalized = parser().processSync(selector, { lossless: false });\n\t\t\tconst selectors = normalized.split(',');\n\n\t\t\treturn selectors.every((sel) => extractPseudoRule(sel));\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} selectors\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction containsIgnoredPseudoClassesOnly(selectors) {\n\t\t\tif (!(secondaryOptions && secondaryOptions.ignorePseudoClasses)) return false;\n\n\t\t\treturn selectors.every((selector) => {\n\t\t\t\tconst pseudoRule = extractPseudoRule(selector);\n\n\t\t\t\tif (!pseudoRule) return false;\n\n\t\t\t\treturn optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoRule);\n\t\t\t});\n\t\t}\n\n\t\tif (\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'blockless-at-rules') &&\n\t\t\t\tisAtRule(node) &&\n\t\t\t\tnode.every((child) => !isDeclaration(child))) ||\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'pseudo-classes') &&\n\t\t\t\tisRule(node) &&\n\t\t\t\tcontainsPseudoClassesOnly(node.selector)) ||\n\t\t\t(isRule(node) && containsIgnoredPseudoClassesOnly(node.selectors))\n\t\t) {\n\t\t\treturn nestingDepth(parent, level);\n\t\t}\n\n\t\t// Unless any of the conditions above apply, we want to\n\t\t// add 1 to the nesting depth level and then check the parent,\n\t\t// continuing to add and move up the hierarchy\n\t\t// until we hit the root node\n\t\treturn nestingDepth(parent, level + 1);\n\t}\n};\n\n/**\n * @param {string} selector\n * @returns {string | undefined}\n */\nfunction extractPseudoRule(selector) {\n\treturn selector.startsWith('&:') && selector[2] !== ':' ? selector.slice(2) : undefined;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tlet emptyLines = 0;\n\tlet lastIndex = -1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst getChars = replaceEmptyLines.bind(null, primary);\n\n\t\t/**\n\t\t * 1. walk nodes & replace enterchar\n\t\t * 2. deal with special case.\n\t\t */\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif (node.type === 'comment' && !ignoreComments) {\n\t\t\t\t\tnode.raws.left = getChars(node.raws.left);\n\t\t\t\t\tnode.raws.right = getChars(node.raws.right);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = getChars(node.raws.before);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// first node\n\t\t\tconst firstNodeRawsBefore = root.first && root.first.raws.before;\n\t\t\t// root raws\n\t\t\tconst rootRawsAfter = root.raws.after;\n\n\t\t\t// not document node\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tif ((root.document && root.document.constructor.name) !== 'Document') {\n\t\t\t\tif (firstNodeRawsBefore) {\n\t\t\t\t\troot.first.raws.before = getChars(firstNodeRawsBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (rootRawsAfter) {\n\t\t\t\t\t// when max setted 0, should be treated as 1 in this situation.\n\t\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter, true);\n\t\t\t\t}\n\t\t\t} else if (rootRawsAfter) {\n\t\t\t\t// `css in js` or `html`\n\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\temptyLines = 0;\n\t\tlastIndex = -1;\n\t\tconst rootString = root.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: rootString,\n\t\t\t\ttarget: /\\r\\n/.test(rootString) ? '\\r\\n' : '\\n',\n\t\t\t\tcomments: ignoreComments ? 'skip' : 'check',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckMatch(rootString, match.startIndex, match.endIndex, root);\n\t\t\t},\n\t\t);\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} matchStartIndex\n\t\t * @param {number} matchEndIndex\n\t\t * @param {import('postcss').Root} node\n\t\t */\n\t\tfunction checkMatch(source, matchStartIndex, matchEndIndex, node) {\n\t\t\tconst eof = matchEndIndex === source.length;\n\t\t\tlet problem = false;\n\n\t\t\t// Additional check for beginning of file\n\t\t\tif (!matchStartIndex || lastIndex === matchStartIndex) {\n\t\t\t\temptyLines++;\n\t\t\t} else {\n\t\t\t\temptyLines = 0;\n\t\t\t}\n\n\t\t\tlastIndex = matchEndIndex;\n\n\t\t\tif (emptyLines > primary) problem = true;\n\n\t\t\tif (!eof && !problem) return;\n\n\t\t\tif (problem) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: matchStartIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Additional check for end of file\n\t\t\tif (eof && primary) {\n\t\t\t\temptyLines++;\n\n\t\t\t\tif (emptyLines > primary && isEofNode(result.root, node)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: matchEndIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} maxLines\n\t\t * @param {unknown} str\n\t\t * @param {boolean?} isSpecialCase\n\t\t */\n\t\tfunction replaceEmptyLines(maxLines, str, isSpecialCase = false) {\n\t\t\tconst repeatTimes = isSpecialCase ? maxLines : maxLines + 1;\n\n\t\t\tif (repeatTimes === 0 || typeof str !== 'string') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst emptyLFLines = '\\n'.repeat(repeatTimes);\n\t\t\tconst emptyCRLFLines = '\\r\\n'.repeat(repeatTimes);\n\n\t\t\treturn /(?:\\r\\n)+/.test(str)\n\t\t\t\t? str.replace(/(\\r\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length / 2 > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyCRLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  })\n\t\t\t\t: str.replace(/(\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  });\n\t\t}\n\t};\n};\n\n/**\n * Checks whether the given node is the last node of file.\n * @param {import('stylelint').PostcssResult['root']} document - the document node with `postcss-html` and `postcss-jsx`.\n * @param {import('postcss').Root} root - the root node of css\n */\nfunction isEofNode(document, root) {\n\tif (!document || document.constructor.name !== 'Document' || !('type' in document)) {\n\t\treturn true;\n\t}\n\n\t// In the `postcss-html` and `postcss-jsx` syntax, checks that there is text after the given node.\n\tlet after;\n\n\tif (root === document.last) {\n\t\tafter = document.raws && document.raws.codeAfter;\n\t} else {\n\t\t// @ts-expect-error -- TS2345: Argument of type 'Root' is not assignable to parameter of type 'number | ChildNode'.\n\t\tconst rootIndex = document.index(root);\n\n\t\tconst nextNode = document.nodes[rootIndex + 1];\n\n\t\tafter = nextNode && nextNode.raws && nextNode.raws.codeBefore;\n\t}\n\n\treturn !String(after).trim();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'custom-property-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before custom property',\n\trejected: 'Unexpected empty line before custom property',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-custom-property'],\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-single-line-block'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tparent != null &&\n\t\t\t\t(isAtRule(parent) || isRule(parent)) &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-custom-property') &&\n\t\t\t\t\tisAfterCustomProperty(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction isAfterCustomProperty(decl) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(decl);\n\n\treturn prevNode != null && isDeclaration(prevNode) && isCustomProperty(prevNode.prop);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'linebreaks';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (linebreak) => `Expected linebreak to be ${linebreak}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/linebreaks',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['unix', 'windows'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldHaveCR = primary === 'windows';\n\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif ('selector' in node) {\n\t\t\t\t\tnode.selector = fixData(node.selector);\n\t\t\t\t}\n\n\t\t\t\tif ('value' in node) {\n\t\t\t\t\tnode.value = fixData(node.value);\n\t\t\t\t}\n\n\t\t\t\tif ('text' in node) {\n\t\t\t\t\tnode.text = fixData(node.text);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = fixData(node.raws.before);\n\t\t\t\t}\n\n\t\t\t\tif (typeof node.raws.after === 'string') {\n\t\t\t\t\tnode.raws.after = fixData(node.raws.after);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (typeof root.raws.after === 'string') {\n\t\t\t\troot.raws.after = fixData(root.raws.after);\n\t\t\t}\n\t\t} else {\n\t\t\tif (root.source == null) throw new Error('The root node must have a source');\n\n\t\t\tconst lines = root.source.input.css.split('\\n');\n\n\t\t\tfor (let [i, line] of lines.entries()) {\n\t\t\t\tif (i < lines.length - 1 && !line.includes('\\r')) {\n\t\t\t\t\tline += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (hasError(line)) {\n\t\t\t\t\tconst lineNum = i + 1;\n\t\t\t\t\tconst colNum = line.length;\n\n\t\t\t\t\treportNewlineError(lineNum, colNum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} dataToCheck\n\t\t */\n\t\tfunction hasError(dataToCheck) {\n\t\t\tconst hasNewlineToVerify = /[\\r\\n]/.test(dataToCheck);\n\t\t\tconst hasCR = hasNewlineToVerify ? /\\r/.test(dataToCheck) : false;\n\n\t\t\treturn hasNewlineToVerify && hasCR !== shouldHaveCR;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} data\n\t\t */\n\t\tfunction fixData(data) {\n\t\t\tif (data) {\n\t\t\t\tlet res = data.replace(/\\r/g, '');\n\n\t\t\t\tif (shouldHaveCR) {\n\t\t\t\t\tres = res.replace(/\\n/g, '\\r\\n');\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\n\t\t * @param {number} line\n\t\t * @param {number} column\n\t\t */\n\t\tfunction reportNewlineError(line, column) {\n\t\t\t// Creating a node manually helps us to point to empty lines.\n\t\t\tconst node = postcss.rule({\n\t\t\t\tsource: {\n\t\t\t\t\tstart: { line, column, offset: 0 },\n\t\t\t\t\tinput: new postcss.Input(''),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Rule} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function transformSelector(result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(node, { updateSelector: true });\n\t} catch {\n\t\tresult.warn('Cannot parse selector', { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-selector-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, fixedSelector) => `Expected \"${selector}\" to be \"${fixedSelector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-selector-notation',\n\tfixable: true,\n};\n\nconst PERCENTAGE_SELECTORS = new Set(['0%', '100%']);\nconst KEYWORD_SELECTORS = new Set(['from', 'to']);\nconst PERCENTAGE_TO_KEYWORD = new Map([\n\t['0%', 'from'],\n\t['100%', 'to'],\n]);\nconst KEYWORD_TO_PERCENTAGE = new Map([\n\t['from', '0%'],\n\t['to', '100%'],\n]);\n\n/** @type {import('stylelint').Rule<'keyword' | 'percentage' | 'percentage-unless-within-keyword-only-block'>} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['keyword', 'percentage', 'percentage-unless-within-keyword-only-block'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @typedef {{\n\t\t *   expFunc: (selector: string, selectorsInBlock: string[]) => boolean,\n\t\t *   fixFunc: (selector: string) => string,\n\t\t * }} OptionFuncs\n\t\t *\n\t\t * @type {Record<primary, OptionFuncs>}\n\t\t */\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tkeyword: {\n\t\t\t\texpFunc: (selector) => KEYWORD_SELECTORS.has(selector),\n\t\t\t\tfixFunc: (selector) => getFromMap(PERCENTAGE_TO_KEYWORD, selector),\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: (selector) => PERCENTAGE_SELECTORS.has(selector),\n\t\t\t\tfixFunc: (selector) => getFromMap(KEYWORD_TO_PERCENTAGE, selector),\n\t\t\t},\n\t\t\t'percentage-unless-within-keyword-only-block': {\n\t\t\t\texpFunc: (selector, selectorsInBlock) => {\n\t\t\t\t\tif (selectorsInBlock.every((s) => KEYWORD_SELECTORS.has(s))) return true;\n\n\t\t\t\t\treturn PERCENTAGE_SELECTORS.has(selector);\n\t\t\t\t},\n\t\t\t\tfixFunc: (selector) => getFromMap(KEYWORD_TO_PERCENTAGE, selector),\n\t\t\t},\n\t\t});\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectorsInBlock =\n\t\t\t\tprimary === 'percentage-unless-within-keyword-only-block'\n\t\t\t\t\t? getSelectorsInBlock(atRuleKeyframes)\n\t\t\t\t\t: [];\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\ttransformSelector(result, keyframeRule, (selectors) => {\n\t\t\t\t\tselectors.walkTags((selectorTag) => {\n\t\t\t\t\t\tcheckSelector(\n\t\t\t\t\t\t\tselectorTag.value,\n\t\t\t\t\t\t\toptionFuncs[primary],\n\t\t\t\t\t\t\t(fixedSelector) => (selectorTag.value = fixedSelector),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * @param {string} selector\n\t\t\t\t * @param {OptionFuncs} funcs\n\t\t\t\t * @param {(fixedSelector: string) => void} fixer\n\t\t\t\t */\n\t\t\t\tfunction checkSelector(selector, { expFunc, fixFunc }, fixer) {\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!KEYWORD_SELECTORS.has(normalizedSelector) &&\n\t\t\t\t\t\t!PERCENTAGE_SELECTORS.has(normalizedSelector)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (expFunc(selector, selectorsInBlock)) return;\n\n\t\t\t\t\tconst fixedSelector = fixFunc(selector);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixer(fixedSelector);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(selector, fixedSelector),\n\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {Map<string, string>} map\n * @param {string} key\n * @returns {string}\n */\nfunction getFromMap(map, key) {\n\tconst value = map.get(key);\n\n\tassertString(value);\n\n\treturn value;\n}\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string[]}\n */\nfunction getSelectorsInBlock(atRule) {\n\t/** @type {string[]} */\n\tconst selectors = [];\n\n\tatRule.walkRules((r) => {\n\t\tselectors.push(...r.selectors);\n\t});\n\n\treturn selectors;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a media query is a custom\n * @param {string} mediaQuery\n * @returns {boolean}\n */\nmodule.exports = function isCustomMediaQuery(mediaQuery) {\n\treturn mediaQuery.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a media feature is a range context one\n *\n * @param {string} mediaFeature feature\n * @return {boolean} If `true`, media feature is a range context one\n */\nmodule.exports = function isRangeContextMediaFeature(mediaFeature) {\n\treturn mediaFeature.includes('=') || mediaFeature.includes('<') || mediaFeature.includes('>');\n};\n","'use strict';\n\n/**\n * Check whether a media feature name is standard\n *\n * @param {string} mediaFeatureName\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxMediaFeatureName(mediaFeatureName) {\n\t// SCSS interpolation\n\tif (/#\\{.+?\\}|\\$.+/.test(mediaFeatureName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * A very generic node. Pretty much any element of a media query\r\n */\n\nfunction Node(opts) {\n  this.after = opts.after;\n  this.before = opts.before;\n  this.type = opts.type;\n  this.value = opts.value;\n  this.sourceIndex = opts.sourceIndex;\n}\n\nexports.default = Node;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Node = require('./Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Container(opts) {\n  var _this = this;\n\n  this.constructor(opts);\n\n  this.nodes = opts.nodes;\n\n  if (this.after === undefined) {\n    this.after = this.nodes.length > 0 ? this.nodes[this.nodes.length - 1].after : '';\n  }\n\n  if (this.before === undefined) {\n    this.before = this.nodes.length > 0 ? this.nodes[0].before : '';\n  }\n\n  if (this.sourceIndex === undefined) {\n    this.sourceIndex = this.before.length;\n  }\n\n  this.nodes.forEach(function (node) {\n    node.parent = _this; // eslint-disable-line no-param-reassign\n  });\n} /**\r\n   * A node that contains other nodes and support traversing over them\r\n   */\n\nContainer.prototype = Object.create(_Node2.default.prototype);\nContainer.constructor = _Node2.default;\n\n/**\r\n * Iterate over descendant nodes of the node\r\n *\r\n * @param {RegExp|string} filter - Optional. Only nodes with node.type that\r\n *    satisfies the filter will be traversed over\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.walk = function walk(filter, cb) {\n  var hasFilter = typeof filter === 'string' || filter instanceof RegExp;\n  var callback = hasFilter ? cb : filter;\n  var filterReg = typeof filter === 'string' ? new RegExp(filter) : filter;\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    var filtered = hasFilter ? filterReg.test(node.type) : true;\n    if (filtered && callback && callback(node, i, this.nodes) === false) {\n      return false;\n    }\n    if (node.nodes && node.walk(filter, cb) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Iterate over immediate children of the node\r\n *\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.each = function each() {\n  var cb = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    if (cb(node, i, this.nodes) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.default = Container;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMediaFeature = parseMediaFeature;\nexports.parseMediaQuery = parseMediaQuery;\nexports.parseMediaList = parseMediaList;\n\nvar _Node = require('./nodes/Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media feature expression, e.g. `max-width: 10px`, `(color)`\r\n *\r\n * @param {string} string - the source expression string, can be inside parens\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes, the first element being a media feature,\r\n *    the secont - its value (may be missing)\r\n */\n\nfunction parseMediaFeature(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var modesEntered = [{\n    mode: 'normal',\n    character: null\n  }];\n  var result = [];\n  var lastModeIndex = 0;\n  var mediaFeature = '';\n  var colon = null;\n  var mediaFeatureValue = null;\n  var indexLocal = index;\n\n  var stringNormalized = string;\n  // Strip trailing parens (if any), and correct the starting index\n  if (string[0] === '(' && string[string.length - 1] === ')') {\n    stringNormalized = string.substring(1, string.length - 1);\n    indexLocal++;\n  }\n\n  for (var i = 0; i < stringNormalized.length; i++) {\n    var character = stringNormalized[i];\n\n    // If entering/exiting a string\n    if (character === '\\'' || character === '\"') {\n      if (modesEntered[lastModeIndex].isCalculationEnabled === true) {\n        modesEntered.push({\n          mode: 'string',\n          isCalculationEnabled: false,\n          character: character\n        });\n        lastModeIndex++;\n      } else if (modesEntered[lastModeIndex].mode === 'string' && modesEntered[lastModeIndex].character === character && stringNormalized[i - 1] !== '\\\\') {\n        modesEntered.pop();\n        lastModeIndex--;\n      }\n    }\n\n    // If entering/exiting interpolation\n    if (character === '{') {\n      modesEntered.push({\n        mode: 'interpolation',\n        isCalculationEnabled: true\n      });\n      lastModeIndex++;\n    } else if (character === '}') {\n      modesEntered.pop();\n      lastModeIndex--;\n    }\n\n    // If a : is met outside of a string, function call or interpolation, than\n    // this : separates a media feature and a value\n    if (modesEntered[lastModeIndex].mode === 'normal' && character === ':') {\n      var mediaFeatureValueStr = stringNormalized.substring(i + 1);\n      mediaFeatureValue = {\n        type: 'value',\n        before: /^(\\s*)/.exec(mediaFeatureValueStr)[1],\n        after: /(\\s*)$/.exec(mediaFeatureValueStr)[1],\n        value: mediaFeatureValueStr.trim()\n      };\n      // +1 for the colon\n      mediaFeatureValue.sourceIndex = mediaFeatureValue.before.length + i + 1 + indexLocal;\n      colon = {\n        type: 'colon',\n        sourceIndex: i + indexLocal,\n        after: mediaFeatureValue.before,\n        value: ':' };\n      break;\n    }\n\n    mediaFeature += character;\n  }\n\n  // Forming a media feature node\n  mediaFeature = {\n    type: 'media-feature',\n    before: /^(\\s*)/.exec(mediaFeature)[1],\n    after: /(\\s*)$/.exec(mediaFeature)[1],\n    value: mediaFeature.trim()\n  };\n  mediaFeature.sourceIndex = mediaFeature.before.length + indexLocal;\n  result.push(mediaFeature);\n\n  if (colon !== null) {\n    colon.before = mediaFeature.after;\n    result.push(colon);\n  }\n\n  if (mediaFeatureValue !== null) {\n    result.push(mediaFeatureValue);\n  }\n\n  return result;\n}\n\n/**\r\n * Parses a media query, e.g. `screen and (color)`, `only tv`\r\n *\r\n * @param {string} string - the source media query string\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes and Containers\r\n */\n\nfunction parseMediaQuery(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var result = [];\n\n  // How many timies the parser entered parens/curly braces\n  var localLevel = 0;\n  // Has any keyword, media type, media feature expression or interpolation\n  // ('element' hereafter) started\n  var insideSomeValue = false;\n  var node = void 0;\n\n  function resetNode() {\n    return {\n      before: '',\n      after: '',\n      value: ''\n    };\n  }\n\n  node = resetNode();\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    // If not yet entered any element\n    if (!insideSomeValue) {\n      if (character.search(/\\s/) !== -1) {\n        // A whitespace\n        // Don't form 'after' yet; will do it later\n        node.before += character;\n      } else {\n        // Not a whitespace - entering an element\n        // Expression start\n        if (character === '(') {\n          node.type = 'media-feature-expression';\n          localLevel++;\n        }\n        node.value = character;\n        node.sourceIndex = index + i;\n        insideSomeValue = true;\n      }\n    } else {\n      // Already in the middle of some alement\n      node.value += character;\n\n      // Here parens just increase localLevel and don't trigger a start of\n      // a media feature expression (since they can't be nested)\n      // Interpolation start\n      if (character === '{' || character === '(') {\n        localLevel++;\n      }\n      // Interpolation/function call/media feature expression end\n      if (character === ')' || character === '}') {\n        localLevel--;\n      }\n    }\n\n    // If exited all parens/curlies and the next symbol\n    if (insideSomeValue && localLevel === 0 && (character === ')' || i === string.length - 1 || string[i + 1].search(/\\s/) !== -1)) {\n      if (['not', 'only', 'and'].indexOf(node.value) !== -1) {\n        node.type = 'keyword';\n      }\n      // if it's an expression, parse its contents\n      if (node.type === 'media-feature-expression') {\n        node.nodes = parseMediaFeature(node.value, node.sourceIndex);\n      }\n      result.push(Array.isArray(node.nodes) ? new _Container2.default(node) : new _Node2.default(node));\n      node = resetNode();\n      insideSomeValue = false;\n    }\n  }\n\n  // Now process the result array - to specify undefined types of the nodes\n  // and specify the `after` prop\n  for (var _i = 0; _i < result.length; _i++) {\n    node = result[_i];\n    if (_i > 0) {\n      result[_i - 1].after = node.before;\n    }\n\n    // Node types. Might not be set because contains interpolation/function\n    // calls or fully consists of them\n    if (node.type === undefined) {\n      if (_i > 0) {\n        // only `and` can follow an expression\n        if (result[_i - 1].type === 'media-feature-expression') {\n          node.type = 'keyword';\n          continue;\n        }\n        // Anything after 'only|not' is a media type\n        if (result[_i - 1].value === 'not' || result[_i - 1].value === 'only') {\n          node.type = 'media-type';\n          continue;\n        }\n        // Anything after 'and' is an expression\n        if (result[_i - 1].value === 'and') {\n          node.type = 'media-feature-expression';\n          continue;\n        }\n\n        if (result[_i - 1].type === 'media-type') {\n          // if it is the last element - it might be an expression\n          // or 'and' depending on what is after it\n          if (!result[_i + 1]) {\n            node.type = 'media-feature-expression';\n          } else {\n            node.type = result[_i + 1].type === 'media-feature-expression' ? 'keyword' : 'media-feature-expression';\n          }\n        }\n      }\n\n      if (_i === 0) {\n        // `screen`, `fn( ... )`, `#{ ... }`. Not an expression, since then\n        // its type would have been set by now\n        if (!result[_i + 1]) {\n          node.type = 'media-type';\n          continue;\n        }\n\n        // `screen and` or `#{...} (max-width: 10px)`\n        if (result[_i + 1] && (result[_i + 1].type === 'media-feature-expression' || result[_i + 1].type === 'keyword')) {\n          node.type = 'media-type';\n          continue;\n        }\n        if (result[_i + 2]) {\n          // `screen and (color) ...`\n          if (result[_i + 2].type === 'media-feature-expression') {\n            node.type = 'media-type';\n            result[_i + 1].type = 'keyword';\n            continue;\n          }\n          // `only screen and ...`\n          if (result[_i + 2].type === 'keyword') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            continue;\n          }\n        }\n        if (result[_i + 3]) {\n          // `screen and (color) ...`\n          if (result[_i + 3].type === 'media-feature-expression') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            result[_i + 2].type = 'keyword';\n            continue;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query list. Takes a possible `url()` at the start into\r\n * account, and divides the list into media queries that are parsed separately\r\n *\r\n * @param {string} string - the source media query list string\r\n *\r\n * @return {Array} an array of Nodes/Containers\r\n */\n\nfunction parseMediaList(string) {\n  var result = [];\n  var interimIndex = 0;\n  var levelLocal = 0;\n\n  // Check for a `url(...)` part (if it is contents of an @import rule)\n  var doesHaveUrl = /^(\\s*)url\\s*\\(/.exec(string);\n  if (doesHaveUrl !== null) {\n    var i = doesHaveUrl[0].length;\n    var parenthesesLv = 1;\n    while (parenthesesLv > 0) {\n      var character = string[i];\n      if (character === '(') {\n        parenthesesLv++;\n      }\n      if (character === ')') {\n        parenthesesLv--;\n      }\n      i++;\n    }\n    result.unshift(new _Node2.default({\n      type: 'url',\n      value: string.substring(0, i).trim(),\n      sourceIndex: doesHaveUrl[1].length,\n      before: doesHaveUrl[1],\n      after: /^(\\s*)/.exec(string.substring(i))[1]\n    }));\n    interimIndex = i;\n  }\n\n  // Start processing the media query list\n  for (var _i2 = interimIndex; _i2 < string.length; _i2++) {\n    var _character = string[_i2];\n\n    // Dividing the media query list into comma-separated media queries\n    // Only count commas that are outside of any parens\n    // (i.e., not part of function call params list, etc.)\n    if (_character === '(') {\n      levelLocal++;\n    }\n    if (_character === ')') {\n      levelLocal--;\n    }\n    if (levelLocal === 0 && _character === ',') {\n      var _mediaQueryString = string.substring(interimIndex, _i2);\n      var _spaceBefore = /^(\\s*)/.exec(_mediaQueryString)[1];\n      result.push(new _Container2.default({\n        type: 'media-query',\n        value: _mediaQueryString.trim(),\n        sourceIndex: interimIndex + _spaceBefore.length,\n        nodes: parseMediaQuery(_mediaQueryString, interimIndex),\n        before: _spaceBefore,\n        after: /(\\s*)$/.exec(_mediaQueryString)[1]\n      }));\n      interimIndex = _i2 + 1;\n    }\n  }\n\n  var mediaQueryString = string.substring(interimIndex);\n  var spaceBefore = /^(\\s*)/.exec(mediaQueryString)[1];\n  result.push(new _Container2.default({\n    type: 'media-query',\n    value: mediaQueryString.trim(),\n    sourceIndex: interimIndex + spaceBefore.length,\n    nodes: parseMediaQuery(mediaQueryString, interimIndex),\n    before: spaceBefore,\n    after: /(\\s*)$/.exec(mediaQueryString)[1]\n  }));\n\n  return result;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseMedia;\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _parsers = require('./parsers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media query list into an array of nodes. A typical node signature:\r\n *  {string} node.type -- one of: 'media-query', 'media-type', 'keyword',\r\n *    'media-feature-expression', 'media-feature', 'colon', 'value'\r\n *  {string} node.value -- the contents of a particular element, trimmed\r\n *    e.g.: `screen`, `max-width`, `1024px`\r\n *  {string} node.after -- whitespaces that follow the element\r\n *  {string} node.before -- whitespaces that precede the element\r\n *  {string} node.sourceIndex -- the index of the element in a source media\r\n *    query list, 0-based\r\n *  {object} node.parent -- a link to the parent node (a container)\r\n *\r\n * Some nodes (media queries, media feature expressions) contain other nodes.\r\n * They additionally have:\r\n *  {array} node.nodes -- an array of nodes of the type described here\r\n *  {funciton} node.each -- traverses direct children of the node, calling\r\n *    a callback for each one\r\n *  {funciton} node.walk -- traverses ALL descendants of the node, calling\r\n *    a callback for each one\r\n */\n\nfunction parseMedia(value) {\n  return new _Container2.default({\n    nodes: (0, _parsers.parseMediaList)(value),\n    type: 'media-query-list',\n    value: value.trim()\n  });\n}","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst { assert } = require('../utils/validateTypes');\n\nconst rangeOperators = new Set(['>=', '<=', '>', '<', '=']);\n\n/**\n * @param {string} name\n * @returns {boolean}\n */\nfunction isRangeContextName(name) {\n\t// When the node is like \"(width > 10em)\" or \"(10em < width)\"\n\t// Regex is needed because the name can either be in the first or second position\n\treturn /^(?!--)\\D/.test(name) || /^--./.test(name);\n}\n\n/**\n * @typedef {{ value: string, sourceIndex: number }} RangeContextNode\n *\n * @param {import('postcss-media-query-parser').Node} node\n * @returns {{ name: RangeContextNode, values: RangeContextNode[] }}\n */\nmodule.exports = function rangeContextNodeParser(node) {\n\t/** @type {import('postcss-value-parser').WordNode | undefined} */\n\tlet nameNode;\n\n\t/** @type {import('postcss-value-parser').WordNode[]} */\n\tconst valueNodes = [];\n\n\tvalueParser(node.value).walk((valueNode) => {\n\t\tif (valueNode.type !== 'word') return;\n\n\t\tif (rangeOperators.has(valueNode.value)) return;\n\n\t\tif (nameNode == null && isRangeContextName(valueNode.value)) {\n\t\t\tnameNode = valueNode;\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueNodes.push(valueNode);\n\t});\n\n\tassert(nameNode);\n\n\treturn {\n\t\tname: {\n\t\t\tvalue: nameNode.value,\n\t\t\tsourceIndex: node.sourceIndex + nameNode.sourceIndex,\n\t\t},\n\n\t\tvalues: valueNodes.map((valueNode) => ({\n\t\t\tvalue: valueNode.value,\n\t\t\tsourceIndex: node.sourceIndex + valueNode.sourceIndex,\n\t\t})),\n\t};\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-line-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) =>\n\t\t`Expected line length to be no more than ${max} ${max === 1 ? 'character' : 'characters'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-line-length',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['non-comments', 'comments'],\n\t\t\t\t\tignorePattern: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source');\n\t\t}\n\n\t\tconst EXCLUDED_PATTERNS = [\n\t\t\t/url\\(\\s*(\\S.*\\S)\\s*\\)/gi, // allow tab, whitespace in url content\n\t\t\t/@import\\s+(['\"].*['\"])/gi,\n\t\t];\n\n\t\tconst ignoreNonComments = optionsMatches(secondaryOptions, 'ignore', 'non-comments');\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\t\t// Array of skipped sub strings, i.e `url(...)`, `@import \"...\"`\n\t\t/** @type {Array<[number, number]>} */\n\t\tlet skippedSubStrings = [];\n\t\tlet skippedSubStringsIndex = 0;\n\n\t\tfor (const pattern of EXCLUDED_PATTERNS) {\n\t\t\tfor (const match of rootString.matchAll(pattern)) {\n\t\t\t\tconst subMatch = match[1] || '';\n\t\t\t\tconst startOfSubString = (match.index || 0) + (match[0] || '').indexOf(subMatch);\n\n\t\t\t\tskippedSubStrings.push([startOfSubString, startOfSubString + subMatch.length]);\n\t\t\t}\n\t\t}\n\n\t\tskippedSubStrings = skippedSubStrings.sort((a, b) => a[0] - b[0]);\n\n\t\t// Check first line\n\t\tcheckNewline({ endIndex: 0 });\n\t\t// Check subsequent lines\n\t\tstyleSearch({ source: rootString, target: ['\\n'], comments: 'check' }, (match) =>\n\t\t\tcheckNewline(match),\n\t\t);\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: root,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {number} start\n\t\t * @param {number} end\n\t\t */\n\t\tfunction tryToPopSubString(start, end) {\n\t\t\tconst skippedSubString = skippedSubStrings[skippedSubStringsIndex];\n\n\t\t\tassert(skippedSubString);\n\t\t\tconst [startSubString, endSubString] = skippedSubString;\n\n\t\t\t// Excluded substring does not presented in current line\n\t\t\tif (end < startSubString) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// Compute excluded substring size regarding to current line indexes\n\t\t\tconst excluded = Math.min(end, endSubString) - Math.max(start, startSubString);\n\n\t\t\t// Current substring is out of range for next lines\n\t\t\tif (endSubString <= end) {\n\t\t\t\tskippedSubStringsIndex++;\n\t\t\t}\n\n\t\t\treturn excluded;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch | { endIndex: number }} match\n\t\t */\n\t\tfunction checkNewline(match) {\n\t\t\tlet nextNewlineIndex = rootString.indexOf('\\n', match.endIndex);\n\n\t\t\tif (rootString[nextNewlineIndex - 1] === '\\r') {\n\t\t\t\tnextNewlineIndex -= 1;\n\t\t\t}\n\n\t\t\t// Accommodate last line\n\t\t\tif (nextNewlineIndex === -1) {\n\t\t\t\tnextNewlineIndex = rootString.length;\n\t\t\t}\n\n\t\t\tconst rawLineLength = nextNewlineIndex - match.endIndex;\n\t\t\tconst excludedLength = skippedSubStrings[skippedSubStringsIndex]\n\t\t\t\t? tryToPopSubString(match.endIndex, nextNewlineIndex)\n\t\t\t\t: 0;\n\t\t\tconst lineText = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\t// Case sensitive ignorePattern match\n\t\t\tif (optionsMatches(secondaryOptions, 'ignorePattern', lineText)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the line's length is less than or equal to the specified\n\t\t\t// max, ignore it ... So anything below is liable to be complained about.\n\t\t\t// **Note that the length of any url arguments or import urls\n\t\t\t// are excluded from the calculation.**\n\t\t\tif (rawLineLength - excludedLength <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = nextNewlineIndex - 1;\n\n\t\t\tif (ignoreComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars === '/*' || nextTwoChars === '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignoreNonComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn complain(complaintIndex);\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars !== '/*' && nextTwoChars !== '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn complain(complaintIndex);\n\t\t\t}\n\n\t\t\t// If there are no spaces besides initial (indent) spaces, ignore it\n\t\t\tconst lineString = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\tif (!lineString.replace(/^\\s+/, '').includes(' ')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn complain(complaintIndex);\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   fix: ((node: import('postcss').AtRule, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function mediaFeatureColonSpaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ':' }, (match) => {\n\t\t\tcheckColon(params, match.startIndex, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst colonIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, colonIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: colonIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-colon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index);\n\t\t\t\t\tconst afterColon = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, ' ') + afterColon;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, '') + afterColon;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-colon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index + 1);\n\t\t\t\t\tconst afterColon = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tlet hasComments = atRule.raws.params && atRule.raws.params.raw;\n\t\t\tconst mediaRule = hasComments ? hasComments : atRule.params;\n\n\t\t\tmediaParser(mediaRule).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst expectedFeatureName = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expectedFeatureName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\thasComments.slice(sourceIndex + expectedFeatureName.length);\n\n\t\t\t\t\t\tif (atRule.raws.params == null) {\n\t\t\t\t\t\t\tthrow new Error('The `AtRuleRaws` node must have a `params` property');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tatRule.raws.params.raw = hasComments;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tatRule.params =\n\t\t\t\t\t\t\tatRule.params.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\tatRule.params.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.expected(value, expectedFeatureName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst deprecatedMediaFeatureNames = new Set([\n\t'device-aspect-ratio',\n\t'device-height',\n\t'device-width',\n\t'max-device-aspect-ratio',\n\t'max-device-height',\n\t'max-device-width',\n\t'min-device-aspect-ratio',\n\t'min-device-height',\n\t'min-device-width',\n]);\n\nconst mediaFeatureNames = uniteSets(deprecatedMediaFeatureNames, [\n\t'any-hover',\n\t'any-pointer',\n\t'aspect-ratio',\n\t'color',\n\t'color-gamut',\n\t'color-index',\n\t'display-mode',\n\t'dynamic-range',\n\t'forced-colors',\n\t'grid',\n\t'height',\n\t'hover',\n\t'inverted-colors',\n\t'light-level',\n\t'max-aspect-ratio',\n\t'max-color',\n\t'max-color-index',\n\t'max-height',\n\t'max-monochrome',\n\t'max-resolution',\n\t'max-width',\n\t'min-aspect-ratio',\n\t'min-color',\n\t'min-color-index',\n\t'min-height',\n\t'min-monochrome',\n\t'min-resolution',\n\t'min-width',\n\t'monochrome',\n\t'orientation',\n\t'overflow-block',\n\t'overflow-inline',\n\t'pointer',\n\t'prefers-color-scheme',\n\t'prefers-contrast',\n\t'prefers-reduced-motion',\n\t'prefers-reduced-transparency',\n\t'resolution',\n\t'scan',\n\t'scripting',\n\t'update',\n\t'video-dynamic-range',\n\t'width',\n]);\n\nmodule.exports = {\n\tmediaFeatureNames,\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst { mediaFeatureNames } = require('../../reference/mediaFeatures');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (mediaFeatureName) => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreMediaFeatureNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreMediaFeatureNames', value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (vendor.prefix(value) || mediaFeatureNames.has(value.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected vendor-prefix',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst params = atRule.params;\n\n\t\t\tif (!isAutoprefixable.mediaFeatureName(params)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.params = isAutoprefixable.unprefix(atRule.params);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const match of matches) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: match,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name, value) => `Unexpected value \"${value}\" for name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature-expression$/i, (node) => {\n\t\t\t\tif (!node.nodes) return;\n\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(node.parent.value);\n\n\t\t\t\t// Ignore boolean\n\t\t\t\tif (!node.value.includes(':') && !mediaFeatureRangeContext) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mediaFeatureNode = node.nodes.find((n) => n.type === 'media-feature');\n\n\t\t\t\tif (mediaFeatureNode == null) throw new Error('A `media-feature` node must be present');\n\n\t\t\t\tlet mediaFeatureName;\n\t\t\t\tlet values;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tmediaFeatureName = parsedRangeContext.name.value;\n\t\t\t\t\tvalues = parsedRangeContext.values;\n\t\t\t\t} else {\n\t\t\t\t\tmediaFeatureName = mediaFeatureNode.value;\n\t\t\t\t\tconst valueNode = node.nodes.find((n) => n.type === 'value');\n\n\t\t\t\t\tif (valueNode == null) throw new Error('A `value` node must be present');\n\n\t\t\t\t\tvalues = [valueNode];\n\t\t\t\t}\n\n\t\t\t\tfor (const valueNode of values) {\n\t\t\t\t\tconst value = valueNode.value;\n\t\t\t\t\tconst unprefixedMediaFeatureName = vendor.unprefixed(mediaFeatureName);\n\n\t\t\t\t\tconst allowedValuesKey = Object.keys(primary).find((featureName) =>\n\t\t\t\t\t\tmatchesStringOrRegExp(unprefixedMediaFeatureName, featureName),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (allowedValuesKey == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(primary, allowedValuesKey, value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = atRuleParamIndex(atRule) + valueNode.sourceIndex;\n\t\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tmessage: messages.rejected(mediaFeatureName, value),\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t// If there are comments in the params, the complete string\n\t\t\t// will be at atRule.raws.params.raw\n\t\t\tconst params = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst indexBoost = atRuleParamIndex(atRule);\n\t\t\t/** @type {Array<{ message: string, index: number }>} */\n\t\t\tconst problems = [];\n\n\t\t\tconst parsedParams = valueParser(params).walk((node) => {\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tconst len = valueParser.stringify(node).length;\n\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tif (/[ \\t]/.test(node.before)) {\n\t\t\t\t\t\t\tif (context.fix) node.before = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/[ \\t]/.test(node.after)) {\n\t\t\t\t\t\t\tif (context.fix) node.after = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'always') {\n\t\t\t\t\t\tif (node.before === '') {\n\t\t\t\t\t\t\tif (context.fix) node.before = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.after === '') {\n\t\t\t\t\t\t\tif (context.fix) node.after = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tatRule.params = parsedParams.toString();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const err of problems) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst { assertString } = require('../utils/validateTypes');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule, index: number) => boolean) | null | undefined,\n *   allowTrailingComments?: boolean,\n * }} opts\n */\nmodule.exports = function mediaQueryListCommaWhitespaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ',' }, (match) => {\n\t\t\tlet index = match.startIndex;\n\n\t\t\tif (opts.allowTrailingComments) {\n\t\t\t\t// if there is a comment on the same line at after the comma, check the space after the comment.\n\t\t\t\tlet execResult;\n\n\t\t\t\twhile ((execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[0]);\n\t\t\t\t\tindex += execResult[0].length;\n\t\t\t\t}\n\n\t\t\t\tif ((execResult = /^([^\\S\\r\\n]*\\/\\/[\\s\\S]*?)\\r?\\n/.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[1]);\n\t\t\t\t\tindex += execResult[1].length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckComma(params, index, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst commaIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, commaIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: commaIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only check for the newline after the comma, while allowing\n\t\t// arbitrary indentation after the newline\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tallowTrailingComments: primary.startsWith('always'),\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = /^\\s*\\n/.test(afterComma)\n\t\t\t\t\t\t\t? beforeComma + afterComma.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t: beforeComma + context.newline + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst rangeOperators = ['>=', '<=', '>', '<', '='];\n\n/** @typedef {import('style-search').StyleSearchMatch} StyleSearchMatch */\n\n/**\n * @template {import('postcss').AtRule} T\n * @param {T} atRule\n * @param {(match: StyleSearchMatch, params: string, atRule: T) => void} cb\n */\nmodule.exports = function findMediaOperator(atRule, cb) {\n\tif (atRule.name.toLowerCase() !== 'media') {\n\t\treturn;\n\t}\n\n\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\tstyleSearch({ source: params, target: rangeOperators }, (match) => {\n\t\tconst before = params[match.startIndex - 1];\n\n\t\tif (before === '>' || before === '<') {\n\t\t\treturn;\n\t\t}\n\n\t\tcb(match, params, atRule);\n\t});\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after range operator',\n\trejectedAfter: () => 'Unexpected whitespace after range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-range-operator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckAfterOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index + 1);\n\t\t\t\t\tconst afterOperator = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkAfterOperator(match, params, node, fix) {\n\t\t\tconst endIndex = match.startIndex + match.target.length - 1;\n\n\t\t\tchecker.after({\n\t\t\t\tsource: params,\n\t\t\t\tindex: endIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(endIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: endIndex + atRuleParamIndex(node) + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n\texpectedOpeningSingleLine: 'Expected single space after \"(\" in a single-line function',\n\trejectedOpeningSingleLine: 'Unexpected whitespace after \"(\" in a single-line function',\n\texpectedClosingSingleLine: 'Expected single space before \")\" in a single-line function',\n\trejectedClosingSingleLine: 'Unexpected whitespace before \")\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore function without parameters\n\t\t\t\tif (!valueNode.nodes.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isSingleLine = isSingleLineString(functionString);\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\n\t\t\t\tif (primary === 'always' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\n\t\t\t\tif (primary === 'always' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports = function resolveNestedSelector(selector, node) {\n  var parent = node.parent;\n  var parentIsNestAtRule = parent.type === 'atrule' && parent.name === 'nest';\n\n  if (parent.type === 'root') return [selector];\n  if (parent.type !== 'rule' && !parentIsNestAtRule) return resolveNestedSelector(selector, parent);\n\n  var parentSelectors = (parentIsNestAtRule)\n    ? parent.params.split(',').map(function(s) { return s.trim(); })\n    : parent.selectors;\n\n  var resolvedSelectors = parentSelectors.reduce(function(result, parentSelector) {\n    if (selector.indexOf('&') !== -1) {\n      var newlyResolvedSelectors = resolveNestedSelector(parentSelector, parent).map(function(resolvedParentSelector) {\n        return selector.replace(/&/g, resolvedParentSelector);\n      });\n      return result.concat(newlyResolvedSelectors);\n    }\n\n    var combinedSelector = [ parentSelector, selector ].join(' ');\n    return result.concat(resolveNestedSelector(combinedSelector, parent));\n  }, []);\n\n  return resolvedSelectors;\n}\n","import e from\"postcss-selector-parser\";function s(n){if(!n)return{a:0,b:0,c:0};let t=0,c=0,o=0;if(\"universal\"==n.type)return{a:0,b:0,c:0};if(\"id\"===n.type)t+=1;else if(\"tag\"===n.type)o+=1;else if(\"class\"===n.type)c+=1;else if(\"attribute\"===n.type)c+=1;else if(function(s){return e.isPseudoElement(s)}(n))o+=1;else if(e.isPseudoClass(n))switch(n.value.toLowerCase()){case\":-moz-any\":case\":-webkit-any\":case\":any\":case\":has\":case\":is\":case\":matches\":case\":not\":if(n.nodes&&n.nodes.length>0){const e=a(n.nodes);t+=e.a,c+=e.b,o+=e.c}break;case\":where\":break;case\":nth-child\":case\":nth-last-child\":if(c+=1,n.nodes&&n.nodes.length>0){const s=n.nodes[0].nodes.findIndex((e=>\"tag\"===e.type&&\"of\"===e.value.toLowerCase()));if(s>-1){const l=[e.selector({nodes:n.nodes[0].nodes.slice(s+1),value:\"\"})];n.nodes.length>1&&l.push(...n.nodes.slice(1));const r=a(l);t+=r.a,c+=r.b,o+=r.c}}break;case\":local\":case\":global\":n.nodes&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));break;default:c+=1}else e.isContainer(n)&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));return{a:t,b:c,c:o}}function a(e){let a={a:0,b:0,c:0};return e.forEach((e=>{const n=s(e);n.a>a.a?a=n:n.a<a.a||(n.b>a.b?a=n:n.b<a.b||n.c>a.c&&(a=n))})),a}function n(e,s){return e.a===s.a?e.b===s.b?e.c-s.c:e.b-s.b:e.a-s.a}export{n as compare,s as selectorSpecificity};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * Find the at-rule in which a rule is nested.\n *\n * Returns `null` if the rule is not nested within an at-rule.\n *\n * @param {import('postcss').Rule} rule\n * @returns {null | import('postcss').AtRule}\n */\nmodule.exports = function findAtRuleContext(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn null;\n\t}\n\n\tif (isAtRule(parent)) {\n\t\treturn parent;\n\t}\n\n\tif (isRule(parent)) {\n\t\treturn findAtRuleContext(parent);\n\t}\n\n\treturn null;\n};\n","'use strict';\n\nconst htmlTags = require('html-tags');\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst deprecatedHtmlTypeSelectors = new Set([\n\t'acronym',\n\t'applet',\n\t'basefont',\n\t'big',\n\t'blink',\n\t'center',\n\t'content',\n\t'dir',\n\t'font',\n\t'frame',\n\t'frameset',\n\t'hgroup',\n\t'isindex',\n\t'keygen',\n\t'listing',\n\t'marquee',\n\t'nobr',\n\t'noembed',\n\t'plaintext',\n\t'spacer',\n\t'strike',\n\t'tt',\n\t'xmp',\n]);\n\n// typecasting htmlTags to be more generic; see https://github.com/stylelint/stylelint/pull/6013 for discussion\n/** @type {Set<string>} */\nconst standardHtmlTypeSelectors = new Set(htmlTags);\n\nconst htmlTypeSelectors = uniteSets(deprecatedHtmlTypeSelectors, standardHtmlTypeSelectors);\n\nconst mixedCaseSvgTypeSelectors = new Set([\n\t'altGlyph',\n\t'altGlyphDef',\n\t'altGlyphItem',\n\t'animateColor',\n\t'animateMotion',\n\t'animateTransform',\n\t'clipPath',\n\t'feBlend',\n\t'feColorMatrix',\n\t'feComponentTransfer',\n\t'feComposite',\n\t'feConvolveMatrix',\n\t'feDiffuseLighting',\n\t'feDisplacementMap',\n\t'feDistantLight',\n\t'feDropShadow',\n\t'feFlood',\n\t'feFuncA',\n\t'feFuncB',\n\t'feFuncG',\n\t'feFuncR',\n\t'feGaussianBlur',\n\t'feImage',\n\t'feMerge',\n\t'feMergeNode',\n\t'feMorphology',\n\t'feOffset',\n\t'fePointLight',\n\t'feSpecularLighting',\n\t'feSpotLight',\n\t'feTile',\n\t'feTurbulence',\n\t'foreignObject',\n\t'glyphRef',\n\t'linearGradient',\n\t'radialGradient',\n\t'textPath',\n]);\n\n// These are the ones that can have single-colon notation\nconst levelOneAndTwoPseudoElements = new Set(['before', 'after', 'first-line', 'first-letter']);\n\nconst shadowTreePseudoElements = new Set(['part']);\n\nconst webkitScrollbarPseudoElements = new Set([\n\t'-webkit-resizer',\n\t'-webkit-scrollbar',\n\t'-webkit-scrollbar-button',\n\t'-webkit-scrollbar-corner',\n\t'-webkit-scrollbar-thumb',\n\t'-webkit-scrollbar-track',\n\t'-webkit-scrollbar-track-piece',\n]);\n\nconst vendorSpecificPseudoElements = uniteSets(webkitScrollbarPseudoElements, [\n\t'-moz-focus-inner',\n\t'-moz-focus-outer',\n\t'-moz-list-bullet',\n\t'-moz-meter-bar',\n\t'-moz-placeholder',\n\t'-moz-progress-bar',\n\t'-moz-range-progress',\n\t'-moz-range-thumb',\n\t'-moz-range-track',\n\t'-ms-browse',\n\t'-ms-check',\n\t'-ms-clear',\n\t'-ms-expand',\n\t'-ms-fill',\n\t'-ms-fill-lower',\n\t'-ms-fill-upper',\n\t'-ms-reveal',\n\t'-ms-thumb',\n\t'-ms-ticks-after',\n\t'-ms-ticks-before',\n\t'-ms-tooltip',\n\t'-ms-track',\n\t'-ms-value',\n\t'-webkit-color-swatch',\n\t'-webkit-color-swatch-wrapper',\n\t'-webkit-calendar-picker-indicator',\n\t'-webkit-clear-button',\n\t'-webkit-date-and-time-value',\n\t'-webkit-datetime-edit',\n\t'-webkit-datetime-edit-ampm-field',\n\t'-webkit-datetime-edit-day-field',\n\t'-webkit-datetime-edit-fields-wrapper',\n\t'-webkit-datetime-edit-hour-field',\n\t'-webkit-datetime-edit-millisecond-field',\n\t'-webkit-datetime-edit-minute-field',\n\t'-webkit-datetime-edit-month-field',\n\t'-webkit-datetime-edit-second-field',\n\t'-webkit-datetime-edit-text',\n\t'-webkit-datetime-edit-week-field',\n\t'-webkit-datetime-edit-year-field',\n\t'-webkit-details-marker',\n\t'-webkit-distributed',\n\t'-webkit-file-upload-button',\n\t'-webkit-input-placeholder',\n\t'-webkit-keygen-select',\n\t'-webkit-meter-bar',\n\t'-webkit-meter-even-less-good-value',\n\t'-webkit-meter-inner-element',\n\t'-webkit-meter-optimum-value',\n\t'-webkit-meter-suboptimum-value',\n\t'-webkit-progress-bar',\n\t'-webkit-progress-inner-element',\n\t'-webkit-progress-value',\n\t'-webkit-search-cancel-button',\n\t'-webkit-search-decoration',\n\t'-webkit-search-results-button',\n\t'-webkit-search-results-decoration',\n\t'-webkit-slider-runnable-track',\n\t'-webkit-slider-thumb',\n\t'-webkit-textfield-decoration-container',\n\t'-webkit-validation-bubble',\n\t'-webkit-validation-bubble-arrow',\n\t'-webkit-validation-bubble-arrow-clipper',\n\t'-webkit-validation-bubble-heading',\n\t'-webkit-validation-bubble-message',\n\t'-webkit-validation-bubble-text-block',\n]);\n\nconst pseudoElements = uniteSets(\n\tlevelOneAndTwoPseudoElements,\n\tvendorSpecificPseudoElements,\n\tshadowTreePseudoElements,\n\t[\n\t\t'backdrop',\n\t\t'content',\n\t\t'cue',\n\t\t'file-selector-button',\n\t\t'grammar-error',\n\t\t'highlight',\n\t\t'marker',\n\t\t'placeholder',\n\t\t'selection',\n\t\t'shadow',\n\t\t'slotted',\n\t\t'spelling-error',\n\t\t'target-text',\n\t],\n);\n\nconst aNPlusBNotationPseudoClasses = new Set([\n\t'nth-column',\n\t'nth-last-column',\n\t'nth-last-of-type',\n\t'nth-of-type',\n]);\n\nconst aNPlusBOfSNotationPseudoClasses = new Set(['nth-child', 'nth-last-child']);\n\nconst atRulePagePseudoClasses = new Set(['first', 'right', 'left', 'blank']);\n\nconst linguisticPseudoClasses = new Set(['dir', 'lang']);\n\nconst logicalCombinationsPseudoClasses = new Set(['has', 'is', 'matches', 'not', 'where']);\n\nconst vendorSpecificPseudoClasses = new Set([\n\t'-khtml-drag',\n\t'-moz-any',\n\t'-moz-any-link',\n\t'-moz-broken',\n\t'-moz-drag-over',\n\t'-moz-first-node',\n\t'-moz-focusring',\n\t'-moz-full-screen',\n\t'-moz-full-screen-ancestor',\n\t'-moz-last-node',\n\t'-moz-loading',\n\t'-moz-meter-optimum',\n\t'-moz-meter-sub-optimum',\n\t'-moz-meter-sub-sub-optimum',\n\t'-moz-placeholder',\n\t'-moz-submit-invalid',\n\t'-moz-suppressed',\n\t'-moz-ui-invalid',\n\t'-moz-ui-valid',\n\t'-moz-user-disabled',\n\t'-moz-window-inactive',\n\t'-ms-fullscreen',\n\t'-ms-input-placeholder',\n\t'-webkit-drag',\n\t'-webkit-any',\n\t'-webkit-any-link',\n\t'-webkit-autofill',\n\t'-webkit-full-screen',\n\t'-webkit-full-screen-ancestor',\n]);\n\n// https://webkit.org/blog/363/styling-scrollbars/\nconst webkitScrollbarPseudoClasses = new Set([\n\t'horizontal',\n\t'vertical',\n\t'decrement',\n\t'increment',\n\t'start',\n\t'end',\n\t'double-button',\n\t'single-button',\n\t'no-button',\n\t'corner-present',\n\t'window-inactive',\n]);\n\nconst pseudoClasses = uniteSets(\n\taNPlusBNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tvendorSpecificPseudoClasses,\n\t[\n\t\t'active',\n\t\t'any-link',\n\t\t'autofill',\n\t\t'blank',\n\t\t'checked',\n\t\t'current',\n\t\t'default',\n\t\t'defined',\n\t\t'disabled',\n\t\t'empty',\n\t\t'enabled',\n\t\t'first-child',\n\t\t'first-of-type',\n\t\t'focus',\n\t\t'focus-within',\n\t\t'focus-visible',\n\t\t'fullscreen',\n\t\t'fullscreen-ancestor',\n\t\t'future',\n\t\t'host',\n\t\t'host-context',\n\t\t'hover',\n\t\t'indeterminate',\n\t\t'in-range',\n\t\t'invalid',\n\t\t'last-child',\n\t\t'last-of-type',\n\t\t'link',\n\t\t'only-child',\n\t\t'only-of-type',\n\t\t'optional',\n\t\t'out-of-range',\n\t\t'past',\n\t\t'placeholder-shown',\n\t\t'playing',\n\t\t'picture-in-picture',\n\t\t'paused',\n\t\t'read-only',\n\t\t'read-write',\n\t\t'required',\n\t\t'root',\n\t\t'scope',\n\t\t'state',\n\t\t'target',\n\t\t'unresolved',\n\t\t'user-invalid',\n\t\t'user-valid',\n\t\t'valid',\n\t\t'visited',\n\t\t'window-inactive', // for ::selection (chrome)\n\t],\n);\n\nmodule.exports = {\n\taNPlusBNotationPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tatRulePagePseudoClasses,\n\tlevelOneAndTwoPseudoElements,\n\tlinguisticPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n\tmixedCaseSvgTypeSelectors,\n\tpseudoClasses,\n\tpseudoElements,\n\tshadowTreePseudoElements,\n\thtmlTypeSelectors,\n\twebkitScrollbarPseudoClasses,\n\twebkitScrollbarPseudoElements,\n};\n","'use strict';\n\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\nmodule.exports = function nodeContextLookup() {\n\tconst contextMap = new Map();\n\n\treturn {\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {any[]} subContexts\n\t\t * @returns {Map<any, any>}\n\t\t */\n\t\tgetContext(node, ...subContexts) {\n\t\t\tif (!node.source) throw new Error('The node source must be present');\n\n\t\t\tconst nodeSource = node.source.input.from;\n\t\t\tconst baseContext = creativeGetMap(contextMap, nodeSource);\n\n\t\t\treturn subContexts.reduce((result, context) => creativeGetMap(result, context), baseContext);\n\t\t},\n\t};\n};\n\n/**\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\nfunction creativeGetMap(someMap, someThing) {\n\tif (!someMap.has(someThing)) {\n\t\tsomeMap.set(someThing, new Map());\n\t}\n\n\treturn someMap.get(someThing);\n}\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selector\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Node} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function parseSelector(selector, result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(selector);\n\t} catch (err) {\n\t\tresult.warn(`Cannot parse selector (${err})`, { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity: calculate, compare } = require('@csstools/selector-specificity');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { pseudoElements } = require('../../reference/selectors');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-descending-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-descending-specificity',\n};\n\n/** @typedef {{ selector: string, specificity: import('@csstools/selector-specificity').Specificity }} Entry */\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['selectors-within-list'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreSelectorsWithinList = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'selectors-within-list',\n\t\t);\n\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\t// Ignore nested property `foo: {};`\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignores selectors within list of selectors\n\t\t\tif (ignoreSelectorsWithinList && ruleNode.selectors.length > 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {Map<string, Entry[]>} */\n\t\t\tconst comparisonContext = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst trimSelector = selector.trim();\n\n\t\t\t\t// Ignore `.selector, { }`\n\t\t\t\tif (trimSelector === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Resolve any nested selectors before checking\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => {\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcheckSelector(s, ruleNode, comparisonContext);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {Map<string, Entry[]>} comparisonContext\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode, comparisonContext) {\n\t\t\tconst selector = selectorNode.toString();\n\t\t\tconst referenceSelector = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n\n\t\t\tif (referenceSelector === undefined) return;\n\n\t\t\tconst selectorSpecificity = calculate(selectorNode);\n\t\t\tconst entry = { selector, specificity: selectorSpecificity };\n\t\t\tconst priorComparableSelectors = comparisonContext.get(referenceSelector);\n\n\t\t\tif (priorComparableSelectors === undefined) {\n\t\t\t\tcomparisonContext.set(referenceSelector, [entry]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const priorEntry of priorComparableSelectors) {\n\t\t\t\tif (compare(selectorSpecificity, priorEntry.specificity) < 0) {\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, priorEntry.selector),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpriorComparableSelectors.push(entry);\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Root} selectorNode\n * @returns {string | undefined}\n */\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n\tconst firstChild = selectorNode.nodes[0];\n\n\tassert(firstChild);\n\tconst nodesByCombinator = firstChild.split((node) => node.type === 'combinator');\n\tconst nodesAfterLastCombinator = nodesByCombinator[nodesByCombinator.length - 1];\n\n\tassert(nodesAfterLastCombinator);\n\n\tconst nodesWithoutPseudoClasses = nodesAfterLastCombinator.filter((node) => {\n\t\treturn (\n\t\t\tnode.type !== 'pseudo' ||\n\t\t\tnode.value.startsWith('::') ||\n\t\t\tpseudoElements.has(node.value.replace(/:/g, ''))\n\t\t);\n\t});\n\n\tif (nodesWithoutPseudoClasses.length === 0) return undefined;\n\n\treturn nodesWithoutPseudoClasses.join('');\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../../utils/arrayEqual');\n\n/**\n *\n * @param {string[][]} areas\n * @param {string} name\n * @returns {boolean}\n */\nfunction isContiguousAndRectangular(areas, name) {\n\tconst indicesByRow = areas.map((row) => {\n\t\tconst indices = [];\n\t\tlet idx = row.indexOf(name);\n\n\t\twhile (idx !== -1) {\n\t\t\tindices.push(idx);\n\t\t\tidx = row.indexOf(name, idx + 1);\n\t\t}\n\n\t\treturn indices;\n\t});\n\n\tfor (let i = 0; i < indicesByRow.length; i++) {\n\t\tfor (let j = i + 1; j < indicesByRow.length; j++) {\n\t\t\tconst x = indicesByRow[i];\n\t\t\tconst y = indicesByRow[j];\n\n\t\t\tif ((x && x.length === 0) || (y && y.length === 0)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!arrayEqual(x, y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction namedAreas(areas) {\n\tconst names = new Set(areas.flat());\n\n\tnames.delete('.');\n\n\treturn [...names];\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction findNotContiguousOrRectangular(areas) {\n\treturn namedAreas(areas).filter((name) => !isContiguousAndRectangular(areas, name));\n}\n\nmodule.exports = findNotContiguousOrRectangular;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findNotContiguousOrRectangular = require('./utils/findNotContiguousOrRectangular');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'named-grid-areas-no-invalid';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedToken: () => 'Expected cell token within string',\n\texpectedSameNumber: () => 'Expected same number of cell tokens in each string',\n\texpectedRectangle: (name) => `Expected single filled-in rectangle for \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/named-grid-areas-no-invalid',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^(?:grid|grid-template|grid-template-areas)$/i, (decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (value.toLowerCase().trim() === 'none') return;\n\n\t\t\t/** @type {Array<{ values: string[], index: number, endIndex: number }>} */\n\t\t\tconst areas = [];\n\t\t\tlet reportSent = false;\n\n\t\t\tvalueParser(value).walk(({ sourceIndex, sourceEndIndex, type, value: tokenValue }) => {\n\t\t\t\tif (type !== 'string') return;\n\n\t\t\t\tif (tokenValue === '') {\n\t\t\t\t\tcomplain(messages.expectedToken(), sourceIndex, sourceEndIndex);\n\t\t\t\t\treportSent = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tareas.push({\n\t\t\t\t\tvalues: tokenValue.trim().split(' ').filter(Boolean),\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tendIndex: sourceEndIndex,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (reportSent) return;\n\n\t\t\tconst [firstArea] = areas;\n\n\t\t\tif (firstArea === undefined) return;\n\n\t\t\tconst notSameNumberArea = areas.find(\n\t\t\t\t(area) => area.values.length !== firstArea.values.length,\n\t\t\t);\n\n\t\t\tif (notSameNumberArea !== undefined) {\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedSameNumber(),\n\t\t\t\t\tnotSameNumberArea.index,\n\t\t\t\t\tnotSameNumberArea.endIndex,\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notContiguousOrRectangular = findNotContiguousOrRectangular(areas.map((a) => a.values));\n\n\t\t\tfor (const name of notContiguousOrRectangular.sort()) {\n\t\t\t\tconst area = areas.find((a) => a.values.includes(name));\n\n\t\t\t\tassert(area);\n\t\t\t\tcomplain(messages.expectedRectangle(name), area.index, area.endIndex);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t * @param {number} endIndex\n\t\t\t */\n\t\t\tfunction complain(message, index, endIndex) {\n\t\t\t\tconst start = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: start + index,\n\t\t\t\t\tendIndex: start + endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'no-extra-semicolons';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected extra semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-extra-semicolons',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Node} node\n * @returns {number}\n */\nfunction getOffsetByNode(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Document | Container<ChildNode>'\n\tif (node.parent && node.parent.document) {\n\t\treturn 0;\n\t}\n\n\tconst root = node.root();\n\n\tif (!root.source) throw new Error('The root node must have a source');\n\n\tif (!node.source) throw new Error('The node must have a source');\n\n\tif (!node.source.start) throw new Error('The source must have a start position');\n\n\tconst string = root.source.input.css;\n\tconst nodeColumn = node.source.start.column;\n\tconst nodeLine = node.source.start.line;\n\tlet line = 1;\n\tlet column = 1;\n\tlet index = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (column === nodeColumn && nodeLine === line) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (string[i] === '\\n') {\n\t\t\tcolumn = 1;\n\t\t\tline += 1;\n\t\t} else {\n\t\t\tcolumn += 1;\n\t\t}\n\t}\n\n\treturn index;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.raws.after && root.raws.after.trim().length !== 0) {\n\t\t\tconst rawAfterRoot = root.raws.after;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixSemiIndices = [];\n\n\t\t\tstyleSearch({ source: rawAfterRoot, target: ';' }, (match) => {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\t\t\tcomplain(root.source.input.css.length - rawAfterRoot.length + match.startIndex);\n\t\t\t});\n\n\t\t\t// fix\n\t\t\tif (fixSemiIndices.length) {\n\t\t\t\troot.raws.after = removeIndices(rawAfterRoot, fixSemiIndices);\n\t\t\t}\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tif (isAtRule(node) && !isStandardSyntaxAtRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'rule' && !isStandardSyntaxRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.raws.before && node.raws.before.trim().length !== 0) {\n\t\t\t\tconst rawBeforeNode = node.raws.before;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\tconst rawBeforeIndexStart = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawBeforeNode, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex - rawBeforeIndexStart);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(getOffsetByNode(node) - rawBeforeNode.length + match.startIndex);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.before = removeIndices(rawBeforeNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.after === 'string' && node.raws.after.trim().length !== 0) {\n\t\t\t\tconst rawAfterNode = node.raws.after;\n\n\t\t\t\t/**\n\t\t\t\t * If the last child is a Less mixin followed by more than one semicolon,\n\t\t\t\t * node.raws.after will be populated with that semicolon.\n\t\t\t\t * Since we ignore Less mixins, exit here\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\t'last' in node &&\n\t\t\t\t\tnode.last &&\n\t\t\t\t\tnode.last.type === 'atrule' &&\n\t\t\t\t\t!isStandardSyntaxAtRule(node.last)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawAfterNode, target: ';' }, (match) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\t1 -\n\t\t\t\t\t\trawAfterNode.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.after = removeIndices(rawAfterNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.ownSemicolon === 'string') {\n\t\t\t\tconst rawOwnSemicolon = node.raws.ownSemicolon;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawOwnSemicolon, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\trawOwnSemicolon.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.ownSemicolon = removeIndices(rawOwnSemicolon, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} str\n\t\t * @param {number[]} indices\n\t\t * @returns {string}\n\t\t */\n\t\tfunction removeIndices(str, indices) {\n\t\t\tfor (const index of indices.reverse()) {\n\t\t\t\tstr = str.slice(0, index) + str.slice(index + 1);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index);\n\t\t\t\t\tconst afterComma = params.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, ' ') + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, '') + afterComma;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * Check if a rule is a keyframe one\n *\n * @param {import('postcss').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function isKeyframeRule(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(parent) && parent.name.toLowerCase() === 'keyframes';\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst selectorParser = require('postcss-selector-parser');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector, firstDuplicateLine) =>\n\t\t`Unexpected duplicate selector \"${selector}\", first used at line ${firstDuplicateLine}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tdisallowInList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldDisallowDuplicateInList = secondaryOptions && secondaryOptions.disallowInList;\n\n\t\t// The top level of this map will be rule sources.\n\t\t// Each source maps to another map, which maps rule parents to a set of selectors.\n\t\t// This ensures that selectors are only checked against selectors\n\t\t// from other rules that share the same parent and the same source.\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contextSelectorSet = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\t\t\tconst resolvedSelectorList = [\n\t\t\t\t...new Set(\n\t\t\t\t\truleNode.selectors.flatMap((selector) => resolvedNestedSelector(selector, ruleNode)),\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tconst normalizedSelectorList = resolvedSelectorList.map(normalize);\n\n\t\t\t// Sort the selectors list so that the order of the constituents\n\t\t\t// doesn't matter\n\t\t\tconst sortedSelectorList = [...normalizedSelectorList].sort().join(',');\n\n\t\t\tif (!ruleNode.source) throw new Error('The rule node must have a source');\n\n\t\t\tif (!ruleNode.source.start) throw new Error('The rule source must have a start position');\n\n\t\t\tconst selectorLine = ruleNode.source.start.line;\n\n\t\t\t// Complain if the same selector list occurs twice\n\n\t\t\tlet previousDuplicatePosition;\n\t\t\t// When `disallowInList` is true, we must parse `sortedSelectorList` into\n\t\t\t// list items.\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectorListParsed = [];\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tparseSelector(sortedSelectorList, result, ruleNode, (selectors) => {\n\t\t\t\t\tselectors.each((s) => {\n\t\t\t\t\t\tconst selector = String(s);\n\n\t\t\t\t\t\tselectorListParsed.push(selector);\n\n\t\t\t\t\t\tif (contextSelectorSet.get(selector)) {\n\t\t\t\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(sortedSelectorList);\n\t\t\t}\n\n\t\t\tif (previousDuplicatePosition) {\n\t\t\t\t// If the selector isn't nested we can use its raw value; otherwise,\n\t\t\t\t// we have to approximate something for the message -- which is close enough\n\t\t\t\tconst isNestedSelector = resolvedSelectorList.join(',') !== ruleNode.selectors.join(',');\n\t\t\t\tconst selectorForMessage = isNestedSelector\n\t\t\t\t\t? resolvedSelectorList.join(', ')\n\t\t\t\t\t: ruleNode.selector;\n\n\t\t\t\treturn report({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selectorForMessage, previousDuplicatePosition),\n\t\t\t\t\tword: selectorForMessage,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst presentedSelectors = new Set();\n\t\t\tconst reportedSelectors = new Set();\n\n\t\t\t// Or complain if one selector list contains the same selector more than once\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst normalized = normalize(selector);\n\n\t\t\t\tif (presentedSelectors.has(normalized)) {\n\t\t\t\t\tif (reportedSelectors.has(normalized)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, selectorLine),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t\treportedSelectors.add(normalized);\n\t\t\t\t} else {\n\t\t\t\t\tpresentedSelectors.add(normalized);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tfor (const selector of selectorListParsed) {\n\t\t\t\t\t// [selectorLine] will not really be accurate for multi-line\n\t\t\t\t\t// selectors, such as \"bar\" in \"foo,\\nbar {}\".\n\t\t\t\t\tcontextSelectorSet.set(selector, selectorLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontextSelectorSet.set(sortedSelectorList, selectorLine);\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} selector\n * @returns {string}\n */\nfunction normalize(selector) {\n\tif (!isStandardSyntaxSelector(selector)) {\n\t\treturn selector;\n\t}\n\n\treturn selectorParser().processSync(selector, { lossless: false });\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-invalid-double-slash-comments';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected double-slash CSS comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-invalid-double-slash-comments',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.startsWith('//')) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: decl.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tif (selector.startsWith('//')) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: ruleNode.toString(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-first-line';\nconst noEmptyFirstLineTest = /^\\s*[\\r\\n]/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-empty-first-line',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'. Property 'lang' does not exist on type 'Source'.\n\t\tif (!validOptions || root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (!rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (noEmptyFirstLineTest.test(rootString)) {\n\t\t\tif (context.fix) {\n\t\t\t\tif (root.first == null) {\n\t\t\t\t\tthrow new Error('The root node must have the first node.');\n\t\t\t\t}\n\n\t\t\t\tif (root.first.raws.before == null) {\n\t\t\t\t\tthrow new Error('The first node must have spaces before.');\n\t\t\t\t}\n\n\t\t\t\troot.first.raws.before = root.first.raws.before.trimStart();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-missing-end-of-source-newline';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing end-of-source newline',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-missing-end-of-source-newline',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source property');\n\t\t}\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\tif (root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\n\t\tif (!rootString.trim() || rootString.endsWith('\\n')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fix\n\t\tif (context.fix) {\n\t\t\troot.raws.after = context.newline;\n\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tindex: rootString.length - 1,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-source';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty source',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-empty-source',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-invalid-position-at-import-rule';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected invalid position @import rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-invalid-position-at-import-rule',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, options) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet invalidPosition = false;\n\n\t\troot.walk((node) => {\n\t\t\tconst nodeName = ('name' in node && node.name && node.name.toLowerCase()) || '';\n\n\t\t\tif (\n\t\t\t\t(isAtRule(node) &&\n\t\t\t\t\tnodeName !== 'charset' &&\n\t\t\t\t\tnodeName !== 'import' &&\n\t\t\t\t\tnodeName !== 'layer' &&\n\t\t\t\t\t!optionsMatches(options, 'ignoreAtRules', node.name) &&\n\t\t\t\t\tisStandardSyntaxAtRule(node)) ||\n\t\t\t\t(node.type === 'rule' && isStandardSyntaxRule(node))\n\t\t\t) {\n\t\t\t\tinvalidPosition = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isAtRule(node) && nodeName === 'import' && invalidPosition) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: node.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atImport) => `Unexpected duplicate @import rule ${atImport}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-duplicate-at-import-rules',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Record<string, string[]>} */\n\t\tconst imports = {};\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst [firstParam, ...restParams] = valueParser(atRule.params).nodes;\n\n\t\t\tif (!firstParam) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// extract uri from url() if exists\n\t\t\tconst uri =\n\t\t\t\tfirstParam.type === 'function' && firstParam.value === 'url' && firstParam.nodes[0]\n\t\t\t\t\t? firstParam.nodes[0].value\n\t\t\t\t\t: firstParam.value;\n\n\t\t\t// extract media queries if any\n\t\t\tconst media = (mediaParser(valueParser.stringify(restParams)).nodes || [])\n\t\t\t\t.map((n) => n.value.replace(/\\s/g, ''))\n\t\t\t\t.filter((n) => n.length);\n\n\t\t\tlet importedUris = imports[uri];\n\t\t\tconst isDuplicate = media.length\n\t\t\t\t? media.some((q) => importedUris && importedUris.includes(q))\n\t\t\t\t: importedUris;\n\n\t\t\tif (isDuplicate) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(uri),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: atRule.toString(),\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!importedUris) {\n\t\t\t\timportedUris = imports[uri] = [];\n\t\t\t}\n\n\t\t\timportedUris.push(...media);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isWhitespace = require('./isWhitespace');\n\n/**\n * Returns a Boolean indicating whether the input string is only whitespace.\n *\n * @param {string} input\n * @returns {boolean}\n */\nmodule.exports = function isOnlyWhitespace(input) {\n\tfor (const element of input) {\n\t\tif (!isWhitespace(element)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isComment, isDeclaration, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-eol-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected whitespace at end of line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-eol-whitespace',\n\tfixable: true,\n};\n\nconst whitespacesToReject = new Set([' ', '\\t']);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction fixString(str) {\n\treturn str.replace(/[ \\t]+$/, '');\n}\n\n/**\n * @param {number} lastEOLIndex\n * @param {string} string\n * @param {{ ignoreEmptyLines: boolean, isRootFirst: boolean }} options\n * @returns {number}\n */\nfunction findErrorStartIndex(lastEOLIndex, string, { ignoreEmptyLines, isRootFirst }) {\n\tconst eolWhitespaceIndex = lastEOLIndex - 1;\n\n\t// If the character before newline is not whitespace, ignore\n\tif (!whitespacesToReject.has(string.charAt(eolWhitespaceIndex))) {\n\t\treturn -1;\n\t}\n\n\tif (ignoreEmptyLines) {\n\t\t// If there is only whitespace between the previous newline and\n\t\t// this newline, ignore\n\t\tconst beforeNewlineIndex = string.lastIndexOf('\\n', eolWhitespaceIndex);\n\n\t\tif (beforeNewlineIndex >= 0 || isRootFirst) {\n\t\t\tconst line = string.substring(beforeNewlineIndex, eolWhitespaceIndex);\n\n\t\t\tif (isOnlyWhitespace(line)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn eolWhitespaceIndex;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['empty-lines'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreEmptyLines = optionsMatches(secondaryOptions, 'ignore', 'empty-lines');\n\n\t\tif (context.fix) {\n\t\t\tfix(root);\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tconst reportFromIndex = (index) => {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t};\n\n\t\teachEolWhitespace(rootString, reportFromIndex, true);\n\n\t\tconst errorIndex = findErrorStartIndex(rootString.length, rootString, {\n\t\t\tignoreEmptyLines,\n\t\t\tisRootFirst: true,\n\t\t});\n\n\t\tif (errorIndex > -1) {\n\t\t\treportFromIndex(errorIndex);\n\t\t}\n\n\t\t/**\n\t\t * Iterate each whitespace at the end of each line of the given string.\n\t\t * @param {string} string - the source code string\n\t\t * @param {(index: number) => void} callback - callback the whitespace index at the end of each line.\n\t\t * @param {boolean} isRootFirst - set `true` if the given string is the first token of the root.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction eachEolWhitespace(string, callback, isRootFirst) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: string,\n\t\t\t\t\ttarget: ['\\n', '\\r'],\n\t\t\t\t\tcomments: 'check',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst index = findErrorStartIndex(match.startIndex, string, {\n\t\t\t\t\t\tignoreEmptyLines,\n\t\t\t\t\t\tisRootFirst,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tcallback(index);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Root} rootNode\n\t\t */\n\t\tfunction fix(rootNode) {\n\t\t\tlet isRootFirst = true;\n\n\t\t\trootNode.walk((node) => {\n\t\t\t\tfixText(\n\t\t\t\t\tnode.raws.before,\n\t\t\t\t\t(fixed) => {\n\t\t\t\t\t\tnode.raws.before = fixed;\n\t\t\t\t\t},\n\t\t\t\t\tisRootFirst,\n\t\t\t\t);\n\t\t\t\tisRootFirst = false;\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tfixText(node.raws.afterName, (fixed) => {\n\t\t\t\t\t\tnode.raws.afterName = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rawsParams = node.raws.params;\n\n\t\t\t\t\tif (rawsParams) {\n\t\t\t\t\t\tfixText(rawsParams.raw, (fixed) => {\n\t\t\t\t\t\t\trawsParams.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.params, (fixed) => {\n\t\t\t\t\t\t\tnode.params = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tconst rawsSelector = node.raws.selector;\n\n\t\t\t\t\tif (rawsSelector) {\n\t\t\t\t\t\tfixText(rawsSelector.raw, (fixed) => {\n\t\t\t\t\t\t\trawsSelector.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.selector, (fixed) => {\n\t\t\t\t\t\t\tnode.selector = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node) || isDeclaration(node)) {\n\t\t\t\t\tfixText(node.raws.between, (fixed) => {\n\t\t\t\t\t\tnode.raws.between = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst rawsValue = node.raws.value;\n\n\t\t\t\t\tif (rawsValue) {\n\t\t\t\t\t\tfixText(rawsValue.raw, (fixed) => {\n\t\t\t\t\t\t\trawsValue.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.value, (fixed) => {\n\t\t\t\t\t\t\tnode.value = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isComment(node)) {\n\t\t\t\t\tfixText(node.raws.left, (fixed) => {\n\t\t\t\t\t\tnode.raws.left = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!isStandardSyntaxComment(node)) {\n\t\t\t\t\t\tnode.raws.right = node.raws.right && fixString(node.raws.right);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.raws.right, (fixed) => {\n\t\t\t\t\t\t\tnode.raws.right = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tfixText(node.text, (fixed) => {\n\t\t\t\t\t\tnode.text = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node)) {\n\t\t\t\t\tfixText(node.raws.after, (fixed) => {\n\t\t\t\t\t\tnode.raws.after = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfixText(\n\t\t\t\trootNode.raws.after,\n\t\t\t\t(fixed) => {\n\t\t\t\t\trootNode.raws.after = fixed;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (typeof rootNode.raws.after === 'string') {\n\t\t\t\tconst lastEOL = Math.max(\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\n'),\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\r'),\n\t\t\t\t);\n\n\t\t\t\tif (lastEOL !== rootNode.raws.after.length - 1) {\n\t\t\t\t\trootNode.raws.after =\n\t\t\t\t\t\trootNode.raws.after.slice(0, lastEOL + 1) +\n\t\t\t\t\t\tfixString(rootNode.raws.after.slice(lastEOL + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string | undefined} value\n\t\t * @param {(text: string) => void} fixFn\n\t\t * @param {boolean} isRootFirst\n\t\t */\n\t\tfunction fixText(value, fixFn, isRootFirst = false) {\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\n\t\t\teachEolWhitespace(\n\t\t\t\tvalue,\n\t\t\t\t(index) => {\n\t\t\t\t\tconst newlineIndex = index + 1;\n\n\t\t\t\t\tfixed += fixString(value.slice(lastIndex, newlineIndex));\n\t\t\t\t\tlastIndex = newlineIndex;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (lastIndex) {\n\t\t\t\tfixed += value.slice(lastIndex);\n\t\t\t\tfixFn(fixed);\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findAnimationName = require('../../utils/findAnimationName');\nconst { animationNameKeywords } = require('../../reference/keywords');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-unknown-animations';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (animationName) => `Unexpected unknown animation name \"${animationName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-unknown-animations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declaredAnimations = new Set();\n\n\t\troot.walkAtRules(/(-(moz|webkit)-)?keyframes/i, (atRule) => {\n\t\t\tdeclaredAnimations.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'animation' || decl.prop.toLowerCase() === 'animation-name') {\n\t\t\t\tconst animationNames = findAnimationName(decl.value);\n\n\t\t\t\tif (animationNames.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const animationNameNode of animationNames) {\n\t\t\t\t\tif (animationNameKeywords.has(animationNameNode.value.toLowerCase())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declaredAnimations.has(animationNameNode.value)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst begin = declarationValueIndex(decl);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(animationNameNode.value),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: begin + animationNameNode.sourceIndex,\n\t\t\t\t\t\tendIndex: begin + animationNameNode.sourceEndIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDimension = require('./getDimension');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isVariable = require('./isVariable');\nconst { animationShorthandKeywords, basicKeywords } = require('../reference/keywords');\nconst postcssValueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\nmodule.exports = function findAnimationName(value) {\n\t/** @type {Node[]} */\n\tconst animationNames = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (nodes.length === 1 && nodes[0] && basicKeywords.has(nodes[0].value.toLowerCase())) {\n\t\treturn [nodes[0]];\n\t}\n\n\tlet shouldBeIgnored = false;\n\n\tvalueNodes.walk((valueNode) => {\n\t\tif (shouldBeIgnored) return;\n\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (valueNode.type !== 'word') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non-standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\t// Cannot find animation name if shorthand has non-standard syntax value (#5532)\n\t\t\tshouldBeIgnored = true;\n\t\t\tanimationNames.length = 0; // clears animationNames\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other animation parts\n\t\tif (animationShorthandKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore numbers with units\n\t\tconst { unit } = getDimension(valueNode);\n\n\t\tif (unit || unit === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tanimationNames.push(valueNode);\n\t});\n\n\treturn animationNames;\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \";\"',\n\trejectedAfter: () => 'Unexpected whitespace after \";\"',\n\texpectedAfterSingleLine: () =>\n\t\t'Expected single space after \";\" in a single-line declaration block',\n\trejectedAfterSingleLine: () =>\n\t\t'Unexpected whitespace after \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextDecl = decl.next();\n\n\t\t\tif (!nextDecl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: rawNodeString(nextDecl),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before range operator',\n\trejectedBefore: () => 'Unexpected whitespace before range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-range-operator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckBeforeOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index);\n\t\t\t\t\tconst afterOperator = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkBeforeOperator(match, params, node, fix) {\n\t\t\t// The extra `+ 1` is because the match itself contains\n\t\t\t// the character before the operator\n\t\t\tchecker.before({\n\t\t\t\tsource: params,\n\t\t\t\tindex: match.startIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: match.startIndex - 1 + atRuleParamIndex(node),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports.all = require('./data/all.json').properties;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst properties = require('known-css-properties').all;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected unknown property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\tconst allValidProperties = new Set(properties);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tcheckPrefixed: [isBoolean],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldCheckPrefixed = secondaryOptions && secondaryOptions.checkPrefixed;\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!shouldCheckPrefixed && vendor.prefix(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (\n\t\t\t\tparent &&\n\t\t\t\tisRule(parent) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', parent.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {import('postcss').Node | undefined} */\n\t\t\tlet node = parent;\n\n\t\t\twhile (node && node.type !== 'root') {\n\t\t\t\tif (isAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\n\t\t\tif (allValidProperties.has(prop.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: prop,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'number-max-precision';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-max-precision',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = 'prop' in node ? node.prop : undefined;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tconst { unit } = getDimension(valueNode);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\d*\\.(\\d+)/.exec(valueNode.value);\n\n\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (match[1].length <= primary) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\t\t\t\tconst actual = Number.parseFloat(match[0]);\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: baseIndex + valueNode.sourceIndex + match.index,\n\t\t\t\t\tword: actual.toString(),\n\t\t\t\t\tmessage: messages.expected(actual, actual.toFixed(primary)),\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterSingleLineComment = require('../../utils/isAfterSingleLineComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before rule',\n\trejected: 'Unexpected empty line before rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/rule-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-block'],\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-rule',\n\t\t\t\t\t\t'after-single-line-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block-and-after-rule',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst expectation = /** @type {string} */ (primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment')) {\n\t\t\t\tconst prevNode = ruleNode.prev();\n\n\t\t\t\tif (prevNode && prevNode.type === 'comment') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isNested = ruleNode.parent && ruleNode.parent.type !== 'root';\n\n\t\t\t// Optionally ignore the expectation if inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore if the expectation is for multiple and the rule is single-line\n\t\t\tif (expectation.includes('multi-line') && isSingleLineString(ruleNode.toString())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = expectation.includes('always');\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-rule') && isAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block-and-after-rule') &&\n\t\t\t\t\tisNested &&\n\t\t\t\t\tisAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-single-line-comment') &&\n\t\t\t\t\tisAfterSingleLineComment(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested)\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(ruleNode.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tconst newline = context.newline;\n\n\t\t\t\tif (typeof newline !== 'string') {\n\t\t\t\t\tthrow new Error(`The \"newline\" property must be a string: ${newline}`);\n\t\t\t\t}\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(ruleNode, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(ruleNode, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: ruleNode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {boolean}\n */\nfunction isAfterRule(ruleNode) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(ruleNode);\n\n\treturn prevNode != null && prevNode.type === 'rule';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction isAfterSingleLineComment(node) {\n\tconst prevNode = node.prev();\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tprevNode.type === 'comment' &&\n\t\t!isSharedLineComment(prevNode) &&\n\t\tprevNode.source &&\n\t\tprevNode.source.start &&\n\t\tprevNode.source.end &&\n\t\tprevNode.source.start.line === prevNode.source.end.line\n\t);\n}\n\nmodule.exports = isAfterSingleLineComment;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected vendor-prefix \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\t//return early if property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', unprefixedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure there's a vendor prefix,\n\t\t\t// but this isn't a custom property\n\n\t\t\tif (prop[0] !== '-' || prop[1] === '-') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.property(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = isAutoprefixable.unprefix(decl.prop);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = new Set([primary].flat());\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator } = attributeNode;\n\n\t\t\t\t\tif (!operator || !primaryValues.has(operator)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('operator');\n\t\t\t\t\tconst endIndex = index + operator.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   checkBeforeOperator: boolean,\n *   fix: ((attributeNode: import('postcss-selector-parser').Attribute) => boolean) | null,\n * }} options\n * @returns {void}\n */\nmodule.exports = function selectorAttributeOperatorSpaceChecker(options) {\n\toptions.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, options.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\tif (!operator) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst attributeNodeString = attributeNode.toString();\n\n\t\t\t\tstyleSearch({ source: attributeNodeString, target: operator }, (match) => {\n\t\t\t\t\tconst index = options.checkBeforeOperator ? match.startIndex : match.endIndex - 1;\n\n\t\t\t\t\tcheckOperator(attributeNodeString, index, rule, attributeNode, operator);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction checkOperator(source, index, node, attributeNode, operator) {\n\t\t\toptions.locationChecker({\n\t\t\t\tsource,\n\t\t\t\tindex,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (options.fix && options.fix(attributeNode)) {\n\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg.replace(\n\t\t\t\t\t\t\toptions.checkBeforeOperator\n\t\t\t\t\t\t\t\t? operator.charAt(0)\n\t\t\t\t\t\t\t\t: operator.charAt(operator.length - 1),\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + index,\n\t\t\t\t\t\tresult: options.result,\n\t\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\"`,\n\trejectedAfter: (operator) => `Unexpected whitespace after \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst checker = whitespaceChecker('space', primary, messages);\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: false,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\t/** @type {{ operatorAfter: string, setOperatorAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { operatorAfter, setOperatorAfter } = (() => {\n\t\t\t\t\t\t\tconst rawOperator = attributeNode.raws.operator;\n\n\t\t\t\t\t\t\tif (rawOperator) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperator.slice(\n\t\t\t\t\t\t\t\t\t\tattributeNode.operator ? attributeNode.operator.length : 0,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tdelete attributeNode.raws.operator;\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces) attributeNode.raws.spaces = {};\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces.operator)\n\t\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rawSpacesOperator =\n\t\t\t\t\t\t\t\tattributeNode.raws.spaces && attributeNode.raws.spaces.operator;\n\t\t\t\t\t\t\tconst rawOperatorAfter = rawSpacesOperator && rawSpacesOperator.after;\n\n\t\t\t\t\t\t\tif (rawOperatorAfter) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawSpacesOperator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperatorAfter:\n\t\t\t\t\t\t\t\t\t(attributeNode.spaces.operator && attributeNode.spaces.operator.after) || '',\n\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.operator) attributeNode.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\tattributeNode.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'property-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { parent } = decl;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRule(parent)) {\n\t\t\t\tconst { selector } = parent;\n\n\t\t\t\tif (selector && optionsMatches(secondaryOptions, 'ignoreSelectors', selector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst expectedProp = primary === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n\t\t\tif (prop === expectedProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = expectedProp;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(prop, expectedProp),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-brackets-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"[\"',\n\trejectedOpening: 'Unexpected whitespace after \"[\"',\n\texpectedClosing: 'Expected single space before \"]\"',\n\trejectedClosing: 'Unexpected whitespace before \"]\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-brackets-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tlet hasFixed;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeSelectorString = attributeNode.toString();\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: '[' }, (match) => {\n\t\t\t\t\t\tconst nextCharIsSpace = attributeSelectorString[match.startIndex + 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex + 1;\n\n\t\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: ']' }, (match) => {\n\t\t\t\t\t\tconst prevCharIsSpace = attributeSelectorString[match.startIndex - 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex - 1;\n\n\t\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixBefore(attributeNode) {\n\t\tconst spacesAttribute = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\tconst rawAttrBefore = spacesAttribute && spacesAttribute.before;\n\n\t\t/** @type {{ attrBefore: string, setAttrBefore: (fixed: string) => void }} */\n\t\tconst { attrBefore, setAttrBefore } = rawAttrBefore\n\t\t\t? {\n\t\t\t\t\tattrBefore: rawAttrBefore,\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tspacesAttribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tattrBefore:\n\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.before) || '',\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\tattributeNode.spaces.attribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ''));\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixAfter(attributeNode) {\n\t\tconst key = attributeNode.operator\n\t\t\t? attributeNode.insensitive\n\t\t\t\t? 'insensitive'\n\t\t\t\t: 'value'\n\t\t\t: 'attribute';\n\n\t\tconst rawSpaces = attributeNode.raws.spaces && attributeNode.raws.spaces[key];\n\t\tconst rawAfter = rawSpaces && rawSpaces.after;\n\n\t\tconst spaces = attributeNode.spaces[key];\n\n\t\t/** @type {{ after: string, setAfter: (fixed: string) => void }} */\n\t\tconst { after, setAfter } = rawAfter\n\t\t\t? {\n\t\t\t\t\tafter: rawAfter,\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\trawSpaces.after = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tafter: (spaces && spaces.after) || '',\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces[key]) attributeNode.spaces[key] = {};\n\n\t\t\t\t\t\t// @ts-expect-error -- TS2532: Object is possibly 'undefined'.\n\t\t\t\t\t\tattributeNode.spaces[key].after = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ''));\n\t\t}\n\t}\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-no-trailing-zeros';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected trailing zero(s)',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-no-trailing-zeros',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\.(\\d{0,100}?)(0+)(?:\\D|$)/.exec(valueNode.value);\n\n\t\t\t\t// match[1] is any numbers between the decimal and our trailing zero, could be empty\n\t\t\t\t// match[2] is our trailing zero(s)\n\t\t\t\tif (match == null || match[1] == null || match[2] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// our index is:\n\t\t\t\t//  the index of our valueNode +\n\t\t\t\t//  the index of our match +\n\t\t\t\t//  1 for our decimal +\n\t\t\t\t//  the length of our potential non-zero number match (match[1])\n\t\t\t\tconst index = valueNode.sourceIndex + match.index + 1 + match[1].length;\n\n\t\t\t\t// our startIndex is identical to our index except when we have only\n\t\t\t\t// trailing zeros after our decimal. in that case we don't need the decimal\n\t\t\t\t// either so we move our index back by 1.\n\t\t\t\tconst startIndex = match[1].length > 0 ? index : index - 1;\n\n\t\t\t\t// our end index is our original index + the length of our trailing zeros\n\t\t\t\tconst endIndex = index + match[2].length;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\t// this is the index of the _first_ trailing zero\n\t\t\t\t\tindex: baseIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = removeTrailingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeTrailingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeTrailingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\nmodule.exports = function isStandardSyntaxCombinator(node) {\n\t// if it's not a combinator, then it's not a standard combinator\n\tif (node.type !== 'combinator') {\n\t\treturn false;\n\t}\n\n\t// Ignore reference combinators like `/deep/`\n\tif (node.value.startsWith('/') || node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\t// ignore the combinators that are the first or last node in their container\n\tif (node.parent !== undefined && node.parent !== null) {\n\t\tconst parent = node.parent;\n\n\t\tif (node === parent.first) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node === parent.last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { value } = combinatorNode;\n\t\t\t\t\tconst normalizedValue = normalizeCombinator(value);\n\n\t\t\t\t\tif (primary.includes(normalizedValue)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { sourceIndex: index, raws } = combinatorNode;\n\t\t\t\t\tconst endIndex = index + ((raws && raws.value) || value).length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(normalizedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { keyframeSelectorKeywords } = require('../reference/keywords');\n\n/**\n * Check whether a string is a keyframe selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isKeyframeSelector(selector) {\n\tif (keyframeSelectorKeywords.has(selector)) {\n\t\treturn true;\n\t}\n\n\t// Percentages\n\tif (/^(?:\\d+|\\d*\\.\\d+)%$/.test(selector)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolveNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-class-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-class-pattern',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp, { resolveNestedSelector: boolean }>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isRegExp, isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tresolveNestedSelectors: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldResolveNestedSelectors = Boolean(\n\t\t\tsecondaryOptions && secondaryOptions.resolveNestedSelectors,\n\t\t);\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst { selector, selectors } = ruleNode;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only bother resolving selectors that have an interpolating &\n\t\t\tif (shouldResolveNestedSelectors && hasInterpolatingAmpersand(selector)) {\n\t\t\t\tfor (const nestedSelector of resolveNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(nestedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(nestedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparseSelector(selector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tselectorNode.walkClasses((classNode) => {\n\t\t\t\tconst { value, sourceIndex: index } = classNode;\n\n\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selector = String(classNode);\n\n\t\t\t\t// TODO: `selector` may be resolved. So, getting its raw value may be pretty hard.\n\t\t\t\t//       It means `endIndex` may be inaccurate (though non-standard selectors).\n\t\t\t\t//\n\t\t\t\t//       For example, given \".abc { &_x {} }\".\n\t\t\t\t//       Then, an expected raw `selector` is \"&_x\",\n\t\t\t\t//       but, an actual `selector` is \".abc_x\".\n\t\t\t\tconst endIndex = index + selector.length;\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * An \"interpolating ampersand\" means an \"&\" used to interpolate\n * within another simple selector, rather than an \"&\" that\n * stands on its own as a simple selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nfunction hasInterpolatingAmpersand(selector) {\n\tfor (const [i, char] of Array.from(selector).entries()) {\n\t\tif (char !== '&') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst prevChar = selector.charAt(i - 1);\n\n\t\tif (prevChar && !isCombinator(prevChar)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst nextChar = selector.charAt(i + 1);\n\n\t\tif (nextChar && !isCombinator(nextChar)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} x\n * @returns {boolean}\n */\nfunction isCombinator(x) {\n\treturn /[\\s+>~]/.test(x);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-leading-zero';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a leading zero',\n\trejected: 'Unexpected leading zero',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-leading-zero',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst neverFixPositions = [];\n\t\t\t/** @type {Array<{ index: number }>} */\n\t\t\tconst alwaysFixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check leading zero\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tconst match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 2 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n\t\t\t\t\t// for regex. And we need the index of \".5\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - match[1].length;\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\talwaysFixPositions.unshift({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.expected, node, baseIndex + index);\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never') {\n\t\t\t\t\tconst match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null || match[2] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 3 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-00.5\"\n\t\t\t\t\t// as an input for regex. And we need the index of \"00\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneverFixPositions.unshift({\n\t\t\t\t\t\t\tstartIndex: index,\n\t\t\t\t\t\t\t// match[1].length is the length of our matched zero(s)\n\t\t\t\t\t\t\tendIndex: index + match[1].length,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.rejected, node, baseIndex + index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (alwaysFixPositions.length) {\n\t\t\t\tfor (const fixPosition of alwaysFixPositions) {\n\t\t\t\t\tconst index = fixPosition.index;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = addLeadingZero(node.params, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = addLeadingZero(node.value, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (neverFixPositions.length) {\n\t\t\t\tfor (const fixPosition of neverFixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = removeLeadingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeLeadingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} index\n * @returns {string}\n */\nfunction addLeadingZero(input, index) {\n\t// eslint-disable-next-line prefer-template\n\treturn input.slice(0, index) + '0' + input.slice(index);\n}\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'rule-selector-property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, selector) => `Unexpected property \"${property}\" for selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/rule-selector-property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectors = Object.keys(primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectorKey = selectors.find((selector) =>\n\t\t\t\tmatchesStringOrRegExp(ruleNode.selector, selector),\n\t\t\t);\n\n\t\t\tif (!selectorKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst disallowedProperties = primary[selectorKey];\n\n\t\t\tif (!disallowedProperties) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\truleNode.walkDecls((decl) => {\n\t\t\t\tconst { prop } = decl;\n\n\t\t\t\tif (matchesStringOrRegExp(prop, disallowedProperties)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop, ruleNode.selector),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tatRuleKeyframes.walkDecls((decl) => {\n\t\t\t\tif (!decl.important) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\t\tassert(pos);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: pos.index,\n\t\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-irregular-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\tunexpected: 'Unexpected irregular whitespace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-irregular-whitespace',\n};\n\nconst IRREGULAR_WHITESPACES = [\n\t'\\u000B', // Line Tabulation (\\v) - <VT>\n\t'\\u000C', // Form Feed (\\f) - <FF>\n\t'\\u00A0', // No-Break Space - <NBSP>\n\t'\\u0085', // Next Line\n\t'\\u1680', // Ogham Space Mark\n\t'\\u180E', // Mongolian Vowel Separator - <MVS>\n\t'\\uFEFF', // Zero Width No-Break Space - <BOM>\n\t'\\u2000', // En Quad\n\t'\\u2001', // Em Quad\n\t'\\u2002', // En Space - <ENSP>\n\t'\\u2003', // Em Space - <EMSP>\n\t'\\u2004', // Tree-Per-Em\n\t'\\u2005', // Four-Per-Em\n\t'\\u2006', // Six-Per-Em\n\t'\\u2007', // Figure Space\n\t'\\u2008', // Punctuation Space - <PUNCSP>\n\t'\\u2009', // Thin Space\n\t'\\u200A', // Hair Space\n\t'\\u200B', // Zero Width Space - <ZWSP>\n\t'\\u2028', // Line Separator\n\t'\\u2029', // Paragraph Separator\n\t'\\u202F', // Narrow No-Break Space\n\t'\\u205F', // Medium Mathematical Space\n\t'\\u3000', // Ideographic Space\n];\n\nconst IRREGULAR_WHITESPACES_PATTERN = new RegExp(`([${IRREGULAR_WHITESPACES.join('')}])`);\n\n/**\n * @param {string} str\n * @returns {string | null}\n */\nconst findIrregularWhitespace = (str) => {\n\tconst result = IRREGULAR_WHITESPACES_PATTERN.exec(str);\n\n\treturn (result && result[1]) || null;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string | undefined} value\n\t\t */\n\t\tconst validate = (node, value) => {\n\t\t\tconst issue = value && findIrregularWhitespace(value);\n\n\t\t\tif (issue) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage: messages.unexpected,\n\t\t\t\t\tnode,\n\t\t\t\t\tword: issue,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tvalidate(atRule, atRule.name);\n\t\t\tvalidate(atRule, atRule.params);\n\t\t\tvalidate(atRule, atRule.raws.before);\n\t\t\tvalidate(atRule, atRule.raws.after);\n\t\t\tvalidate(atRule, atRule.raws.afterName);\n\t\t\tvalidate(atRule, atRule.raws.between);\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tvalidate(ruleNode, ruleNode.selector);\n\t\t\tvalidate(ruleNode, ruleNode.raws.before);\n\t\t\tvalidate(ruleNode, ruleNode.raws.after);\n\t\t\tvalidate(ruleNode, ruleNode.raws.between);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalidate(decl, decl.prop);\n\t\t\tvalidate(decl, decl.value);\n\t\t\tvalidate(decl, decl.raws.before);\n\t\t\tvalidate(decl, decl.raws.between);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\"`,\n\trejectedBefore: (operator) => `Unexpected whitespace before \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: true,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\tconst rawAttr = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\t\t\t\t\tconst rawAttrAfter = rawAttr && rawAttr.after;\n\n\t\t\t\t\t\t/** @type {{ attrAfter: string, setAttrAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { attrAfter, setAttrAfter } = rawAttrAfter\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tattrAfter: rawAttrAfter,\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawAttr.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\tattrAfter:\n\t\t\t\t\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.after) || '',\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.spaces.attribute.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  };\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getRuleSelector = require('../../utils/getRuleSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (value) => `Expected quotes around \"${value}\"`,\n\trejected: (value) => `Unexpected quotes around \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-quotes',\n\tfixable: true,\n};\n\nconst acceptedQuoteMark = '\"';\n\n/** @type {import('stylelint').Rule<'always' | 'never'>} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(getRuleSelector(ruleNode), result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator, value, quoted } = attributeNode;\n\n\t\t\t\t\tif (!operator || !value) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!quoted && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = acceptedQuoteMark;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expected(value), attributeNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (quoted && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejected(value), attributeNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {import('postcss-selector-parser').Attribute} attrNode\n\t\t\t */\n\t\t\tfunction complain(message, attrNode) {\n\t\t\t\tconst index = attrNode.sourceIndex + attrNode.offsetOf('value');\n\t\t\t\tconst value = attrNode.raws.value || attrNode.value || '';\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {string}\n */\nmodule.exports = function getRuleSelector(ruleNode) {\n\tconst raws = ruleNode.raws;\n\n\treturn (raws.selector && raws.selector.raw) || ruleNode.selector;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\n\n/**\n * @typedef {(args: { source: string, index: number, errTarget: string, err: (message: string) => void }) => void} LocationChecker\n *\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: LocationChecker,\n *   locationType: 'before' | 'after',\n *   checkedRuleName: string,\n *   fix: ((combinator: import('postcss-selector-parser').Combinator) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorCombinatorSpaceChecker(opts) {\n\tlet hasFixed;\n\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\thasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, opts.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkCombinators((node) => {\n\t\t\t\t// Ignore non-standard combinators\n\t\t\t\tif (!isStandardSyntaxCombinator(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore spaced descendant combinator\n\t\t\t\tif (/\\s/.test(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check the exist of node in prev of the combinator.\n\t\t\t\t// in case some that aren't the first begin with combinators (nesting syntax)\n\t\t\t\tif (opts.locationType === 'before' && !node.prev()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parentParentNode = node.parent && node.parent.parent;\n\n\t\t\t\t// Ignore pseudo-classes selector like `.foo:nth-child(2n + 1) {}`\n\t\t\t\tif (parentParentNode && parentParentNode.type === 'pseudo') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\t\t\t\tconst index =\n\t\t\t\t\tnode.value.length > 1 && opts.locationType === 'before'\n\t\t\t\t\t\t? sourceIndex\n\t\t\t\t\t\t: sourceIndex + node.value.length - 1;\n\n\t\t\t\tcheck(selector, node, index, rule, sourceIndex);\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {import('postcss-selector-parser').Combinator} combinator\n\t * @param {number} index\n\t * @param {import('postcss').Node} node\n\t * @param {number} sourceIndex\n\t */\n\tfunction check(source, combinator, index, node, sourceIndex) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terrTarget: combinator.value,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(combinator)) {\n\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (combinator) => `Expected single space after \"${combinator}\"`,\n\trejectedAfter: (combinator) => `Unexpected whitespace after \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tlocationType: 'after',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.after = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.after = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get raw selector so we can allow end-of-line comments, e.g.\n\t\t\t// a, /* comment */\n\t\t\t// b {}\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixIndices = [];\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: selector,\n\t\t\t\t\ttarget: ',',\n\t\t\t\t\tfunctionArguments: 'skip',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst nextChars = selector.slice(match.endIndex);\n\n\t\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t\t// ending the comment so we're fine\n\t\t\t\t\tif (/^\\s+\\/\\//.test(nextChars)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\t\tconst indextoCheckAfter = /^\\s+\\/\\*/.test(nextChars)\n\t\t\t\t\t\t? selector.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t\t: match.startIndex;\n\n\t\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\t\tsource: selector,\n\t\t\t\t\t\tindex: indextoCheckAfter,\n\t\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tfixIndices.push(indextoCheckAfter + 1);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: match.startIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixIndices.length) {\n\t\t\t\tlet fixedSelector = selector;\n\n\t\t\t\tfor (const index of fixIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = fixedSelector.slice(0, index);\n\t\t\t\t\tlet afterSelector = fixedSelector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = context.newline + afterSelector;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tfixedSelector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSharedLineComment = require('../../utils/isSharedLineComment');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before comment',\n\trejected: 'Unexpected empty line before comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-empty-line-before',\n\tfixable: true,\n};\n\nconst stylelintCommandPrefix = 'stylelint-';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested'],\n\t\t\t\t\tignore: ['stylelint-commands', 'after-comment'],\n\t\t\t\t\tignoreComments: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore stylelint commands\n\t\t\tif (\n\t\t\t\tcomment.text.startsWith(stylelintCommandPrefix) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'stylelint-commands')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore newlines between comments\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore comments matching the ignoreComments option.\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreComments', comment.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore shared-line comments\n\t\t\tif (isSharedLineComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(comment)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always';\n\t\t\t})();\n\n\t\t\tconst before = comment.raws.before || '';\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (typeof context.newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(comment, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(comment, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = new Set([primary].flat());\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator } = attributeNode;\n\n\t\t\t\t\tif (!operator || primaryValues.has(operator)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('operator');\n\t\t\t\t\tconst endIndex = index + operator.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { value } = combinatorNode;\n\t\t\t\t\tconst normalizedValue = normalizeCombinator(value);\n\n\t\t\t\t\tif (!primary.includes(normalizedValue)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { sourceIndex: index, raws } = combinatorNode;\n\t\t\t\t\tconst endIndex = index + ((raws && raws.value) || value).length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(normalizedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (nonSpaceCharacter) => `Unexpected \"${nonSpaceCharacter}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-descendant-combinator-no-non-space',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t// Return early for selectors containing comments\n\t\t\t// TODO: renable when parser and stylelint are compatible\n\t\t\tif (selector.includes('/*')) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (combinatorNode.value !== ' ') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = combinatorNode.toString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue.includes('  ') ||\n\t\t\t\t\t\tvalue.includes('\\t') ||\n\t\t\t\t\t\tvalue.includes('\\n') ||\n\t\t\t\t\t\tvalue.includes('\\r')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (context.fix && /^\\s+$/.test(value)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\tif (!combinatorNode.raws) combinatorNode.raws = {};\n\n\t\t\t\t\t\t\tcombinatorNode.raws.value = ' ';\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix: ((rule: import('postcss').Rule, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorListCommaWhitespaceChecker(opts) {\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: selector,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckDelimiter(selector, match.startIndex, rule);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Rule} node\n\t */\n\tfunction checkDelimiter(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst spaceIndex = beforeSelector.search(/\\s+$/);\n\n\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\tbeforeSelector =\n\t\t\t\t\t\t\t\tbeforeSelector.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\tbeforeSelector.slice(spaceIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbeforeSelector += context.newline;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'never-multi-line') {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-id-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-id-pattern',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkIds((selectorNode) => {\n\t\t\t\t\tif (normalizedPattern.test(selectorNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selector = String(selectorNode);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst {\n\taNPlusBOfSNotationPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n} = require('../reference/selectors');\n\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Node} node - postcss-selector-parser node (of type pseudo)\n * @return {node is import('postcss-selector-parser').Pseudo} If `true`, the node is a context-functional pseudo-class\n */\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n\tif (node.type === 'pseudo') {\n\t\tconst normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n\n\t\treturn (\n\t\t\tlogicalCombinationsPseudoClasses.has(normalisedParentName) ||\n\t\t\taNPlusBOfSNotationPseudoClasses.has(normalisedParentName)\n\t\t);\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * @param {unknown} value\n */\nmodule.exports = function isNonNegativeInteger(value) {\n\treturn Number.isInteger(value) && typeof value === 'number' && value >= 0;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-attribute';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} attribute ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-attribute',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAttributes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type !== 'attribute') {\n\t\t\t\t\t// Not an attribute node -> ignore\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAttributes', childNode.attribute)) {\n\t\t\t\t\t// it's an attribute that is supposed to be ignored\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\ttotal += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-combinators';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${\n\t\t\tmax === 1 ? 'combinator' : 'combinators'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-combinators',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'combinator') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>, { splitList: boolean, ignore: string[] }>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString, isRegExp],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-block'],\n\t\t\t\t\tsplitList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreInsideBlock = optionsMatches(secondaryOptions, 'ignore', 'inside-block');\n\t\tconst splitList = secondaryOptions && secondaryOptions.splitList;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (ignoreInsideBlock) {\n\t\t\t\tconst { parent } = ruleNode;\n\t\t\t\tconst isInsideBlock = parent && parent.type !== 'root';\n\n\t\t\t\tif (isInsideBlock) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (splitList) {\n\t\t\t\truleNode.selectors.forEach((selector) => {\n\t\t\t\t\tif (matchesStringOrRegExp(selector, primary)) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst { selector, raws } = ruleNode;\n\n\t\t\t\tif (matchesStringOrRegExp(selector, primary)) {\n\t\t\t\t\tconst word = (raws.selector && raws.selector.raw) || selector;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *  @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t *  @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'class') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newSelectorString = selector\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = newSelectorString;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = newSelectorString;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tviolatedLFNewLinesRegex.test(selector) ||\n\t\t\t\tviolatedCRLFNewLinesRegex.test(selector)\n\t\t\t) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'hue-degree-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/hue-degree-notation',\n\tfixable: true,\n};\n\nconst HUE_FIRST_ARG_FUNCS = ['hsl', 'hsla', 'hwb'];\nconst HUE_THIRD_ARG_FUNCS = ['lch'];\nconst HUE_FUNCS = new Set([...HUE_FIRST_ARG_FUNCS, ...HUE_THIRD_ARG_FUNCS]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['angle', 'number'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\tif (!HUE_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\tconst hue = findHue(node);\n\n\t\t\t\tif (!hue) return;\n\n\t\t\t\tconst { value } = hue;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isDegree(value) && !isNumber(value)) return;\n\n\t\t\t\tif (primary === 'angle' && isDegree(value)) return;\n\n\t\t\t\tif (primary === 'number' && isNumber(value)) return;\n\n\t\t\t\tconst fixed = primary === 'angle' ? asDegree(value) : asNumber(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\thue.value = fixed;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst valueIndex = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: valueIndex + hue.sourceIndex,\n\t\t\t\t\tendIndex: valueIndex + hue.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n */\nfunction asDegree(value) {\n\treturn `${value}deg`;\n}\n\n/**\n * @param {string} value\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tif (dimension) return dimension.number;\n\n\tthrow new TypeError(`The \"${value}\" value must have a unit`);\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction findHue(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\tconst value = node.value.toLowerCase();\n\n\tif (HUE_FIRST_ARG_FUNCS.includes(value)) {\n\t\treturn args[0];\n\t}\n\n\tif (HUE_THIRD_ARG_FUNCS.includes(value)) {\n\t\treturn args[2];\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n */\nfunction isDegree(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit.toLowerCase() === 'deg';\n}\n\n/**\n * @param {string} value\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = selector.slice(0, index + 1);\n\t\t\t\t\tlet afterSelector = selector.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.includes('always')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.includes('never')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} compound ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-compound-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Finds actual selectors in selectorNode object and checks them.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tlet compoundCount = 1;\n\n\t\t\tselectorNode.each((childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Compound selectors are separated by combinators, so increase count when meeting one\n\t\t\t\tif (childNode.type === 'combinator') {\n\t\t\t\t\tcompoundCount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tselectorNode.type !== 'root' &&\n\t\t\t\tselectorNode.type !== 'pseudo' &&\n\t\t\t\tcompoundCount > primary\n\t\t\t) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector if there is a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Process each resolved selector with `checkSelector` via postcss-selector-parser\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity, compare } = require('@csstools/selector-specificity');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst {\n\taNPlusBOfSNotationPseudoClasses,\n\taNPlusBNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n} = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assertNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) => `Expected \"${selector}\" to have a specificity no more than \"${max}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-specificity',\n};\n\n/** @typedef {import('@csstools/selector-specificity').Specificity} Specificity */\n\n/**\n * Return a zero specificity. We need a new instance each time so that it can mutated.\n *\n * @returns {Specificity}\n */\nconst zeroSpecificity = () => ({ a: 0, b: 0, c: 0 });\n\n/**\n * Calculate the sum of given specificities.\n *\n * @param {Specificity[]} specificities\n * @returns {Specificity}\n */\nconst specificitySum = (specificities) => {\n\tconst sum = zeroSpecificity();\n\n\tfor (const { a, b, c } of specificities) {\n\t\tsum.a += a;\n\t\tsum.b += b;\n\t\tsum.c += c;\n\t}\n\n\treturn sum;\n};\n\n/** @type {import('stylelint').Rule<string>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t// Check that the max specificity is in the form \"a,b,c\"\n\t\t\t\t\t(spec) => isString(spec) && /^\\d+,\\d+,\\d+$/.test(spec),\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Calculate the specificity of a simple selector (type, attribute, class, ID, or pseudos's own value).\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst simpleSpecificity = (node) => {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', node.toString())) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\treturn selectorSpecificity(node);\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of the most specific direct child.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst maxChildSpecificity = (node) =>\n\t\t\tnode.reduce((maxSpec, child) => {\n\t\t\t\tconst childSpecificity = nodeSpecificity(child); // eslint-disable-line no-use-before-define\n\n\t\t\t\treturn compare(childSpecificity, maxSpec) > 0 ? childSpecificity : maxSpec;\n\t\t\t}, zeroSpecificity());\n\n\t\t/**\n\t\t * Calculate the specificity of a pseudo selector including own value and children.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Pseudo} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst pseudoSpecificity = (node) => {\n\t\t\t// `node.toString()` includes children which should be processed separately,\n\t\t\t// so use `node.value` instead\n\t\t\tconst ownValue = node.value.toLowerCase();\n\n\t\t\tif (ownValue === ':where') {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tlet ownSpecificity;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', ownValue)) {\n\t\t\t\townSpecificity = zeroSpecificity();\n\t\t\t} else if (aNPlusBOfSNotationPseudoClasses.has(ownValue.replace(/^:/, ''))) {\n\t\t\t\t// TODO: We need to support `<complex-selector-list>` in `ignoreSelectors`. E.g. `:nth-child(even of .foo)`.\n\t\t\t\treturn selectorSpecificity(node);\n\t\t\t} else {\n\t\t\t\townSpecificity = selectorSpecificity(node.clone({ nodes: [] }));\n\t\t\t}\n\n\t\t\treturn specificitySum([ownSpecificity, maxChildSpecificity(node)]);\n\t\t};\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tconst shouldSkipPseudoClassArgument = (node) => {\n\t\t\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t\t\t// as \"tags\", so we need to ignore them ourselves.\n\t\t\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t\t\t// should be the :nth-child pseudo node.\n\t\t\tconst parentNode = node.parent && node.parent.parent;\n\n\t\t\tif (parentNode && parentNode.type === 'pseudo' && parentNode.value) {\n\t\t\t\tconst pseudoClass = parentNode.value.toLowerCase().replace(/^:/, '');\n\n\t\t\t\treturn (\n\t\t\t\t\taNPlusBNotationPseudoClasses.has(pseudoClass) || linguisticPseudoClasses.has(pseudoClass)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of a node parsed by `postcss-selector-parser`.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst nodeSpecificity = (node) => {\n\t\t\tif (shouldSkipPseudoClassArgument(node)) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'attribute':\n\t\t\t\tcase 'class':\n\t\t\t\tcase 'id':\n\t\t\t\tcase 'tag':\n\t\t\t\t\treturn simpleSpecificity(node);\n\t\t\t\tcase 'pseudo':\n\t\t\t\t\treturn pseudoSpecificity(node);\n\t\t\t\tcase 'selector':\n\t\t\t\t\t// Calculate the sum of all the direct children\n\t\t\t\t\treturn specificitySum(node.map((n) => nodeSpecificity(n)));\n\t\t\t\tdefault:\n\t\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\t\t};\n\n\t\tconst [a, b, c] = primary.split(',').map((s) => Number.parseFloat(s));\n\n\t\tassertNumber(a);\n\t\tassertNumber(b);\n\t\tassertNumber(c);\n\n\t\tconst maxSpecificity = { a, b, c };\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector in the eventuality we have a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Skip non-standard syntax selectors\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\t// Check if the selector specificity exceeds the allowed maximum\n\t\t\t\t\t\tif (compare(maxChildSpecificity(selectorTree), maxSpecificity) > 0) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tmessage: messages.expected(resolvedSelector, primary),\n\t\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected vendor-prefix \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst { value } = pseudoNode;\n\n\t\t\t\t\tif (!isAutoprefixable.selector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\truleNode.selector = isAutoprefixable.unprefix(selector);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-pseudo-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} pseudo-${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-pseudo-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Exclude pseudo elements from the count\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'pseudo' &&\n\t\t\t\t\t(childNode.value.includes('::') ||\n\t\t\t\t\t\tlevelOneAndTwoPseudoElements.has(childNode.value.toLowerCase().slice(1)))\n\t\t\t\t) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'pseudo') {\n\t\t\t\t\ttotal += 1;\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\tcheckSelector(selectorTree, ruleNode);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst {\n\taNPlusBNotationPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n\tshadowTreePseudoElements,\n} = require('../reference/selectors');\n\n/**\n * Check whether a type selector is standard\n *\n * @param {import('postcss-selector-parser').Tag} node postcss-selector-parser node (of type tag)\n * @return {boolean} If `true`, the type selector is standard\n */\nmodule.exports = function isStandardSyntaxTypeSelector(node) {\n\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t// as \"tags\", so we need to ignore them ourselves.\n\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t// should be the :nth-child pseudo node.\n\tif (!node.parent || !node.parent.parent) {\n\t\treturn false;\n\t}\n\n\tconst _node$parent$parent = node.parent.parent;\n\tconst parentType = _node$parent$parent.type;\n\tconst parentValue = _node$parent$parent.value;\n\n\tif (parentValue) {\n\t\tconst normalisedParentName = parentValue.toLowerCase().replace(/:+/, '');\n\n\t\tif (\n\t\t\tparentType === 'pseudo' &&\n\t\t\t(aNPlusBNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\taNPlusBOfSNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tlinguisticPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tshadowTreePseudoElements.has(normalisedParentName))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// &-bar is a nesting selector combined with a suffix\n\tif (node.prev() && node.prev().type === 'nesting') {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// Reference combinators like `/deep/`\n\tif (node.value.startsWith('/') && node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected qualifying type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-no-qualifying-type',\n};\n\nconst selectorCharacters = ['#', '.', '['];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isSelectorCharacters(value) {\n\treturn selectorCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {import('postcss-selector-parser').Tag} node\n * @returns {Array<import('postcss-selector-parser').Node>}\n */\nfunction getRightNodes(node) {\n\tconst result = [];\n\n\t/** @type {import('postcss-selector-parser').Node} */\n\tlet rightNode = node;\n\n\twhile ((rightNode = rightNode.next())) {\n\t\tif (rightNode.type === 'combinator') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(rightNode);\n\t}\n\n\treturn result;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [true],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['attribute', 'class', 'id'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreId = optionsMatches(secondaryOptions, 'ignore', 'id');\n\t\tconst ignoreClass = optionsMatches(secondaryOptions, 'ignore', 'class');\n\t\tconst ignoreAttribute = optionsMatches(secondaryOptions, 'ignore', 'attribute');\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isSelectorCharacters(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-selector-parser').Root} selectorAST\n\t\t\t */\n\t\t\tfunction checkSelector(selectorAST) {\n\t\t\t\tselectorAST.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) return;\n\n\t\t\t\t\tconst selectorParent = tagNode.parent;\n\n\t\t\t\t\tif (selectorParent && selectorParent.nodes.length === 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectorNodes = getRightNodes(tagNode);\n\n\t\t\t\t\tfor (const selectorNode of selectorNodes) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(selectorNode.type === 'id' && !ignoreId) ||\n\t\t\t\t\t\t\t(selectorNode.type === 'class' && !ignoreClass) ||\n\t\t\t\t\t\t\t(selectorNode.type === 'attribute' && !ignoreAttribute)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst selector = [tagNode, ...selectorNodes].join('').trimStart();\n\n\t\t\t\t\t\t\tcomplain(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const resolvedSelector of resolvedNestedSelector(ruleNode.selector, ruleNode)) {\n\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, checkSelector);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} selector\n\t\t\t */\n\t\t\tfunction complain(selector) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-nested-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-nested-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (ruleNode.parent && ruleNode.parent.type !== 'rule') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (normalizedPattern.test(selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: selector,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.charAt(1) !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (!pseudoNode.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paramString = pseudoNode.map((node) => String(node)).join(',');\n\t\t\t\t\tconst nextCharIsSpace = paramString.startsWith(' ');\n\t\t\t\t\tconst openIndex = pseudoNode.sourceIndex + pseudoNode.value.length + 1;\n\n\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst prevCharIsSpace = paramString.endsWith(' ');\n\t\t\t\t\tconst closeIndex = openIndex + paramString.length - 1;\n\n\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setFirstNodeSpaceBefore(node, value) {\n\tconst target = node.first;\n\n\tif (target.type === 'selector') {\n\t\tsetFirstNodeSpaceBefore(target, value);\n\t} else {\n\t\ttarget.spaces.before = value;\n\t}\n}\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setLastNodeSpaceAfter(node, value) {\n\tconst target = node.last;\n\n\tif (target.type === 'selector') {\n\t\tsetLastNodeSpaceAfter(target, value);\n\t} else {\n\t\ttarget.spaces.after = value;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(\n\t\t\t\truleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector,\n\t\t\t\tresult,\n\t\t\t\truleNode,\n\t\t\t\t(selectorTree) => {\n\t\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\t\tconst pseudo = pseudoNode.value;\n\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(pseudo)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpseudo.includes('::') ||\n\t\t\t\t\t\t\tlevelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expectedPseudo =\n\t\t\t\t\t\t\tprimary === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n\t\t\t\t\t\tif (pseudo === expectedPseudo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tpseudoNode.value = expectedPseudo;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(pseudo, expectedPseudo),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-colon-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} colon pseudo-element notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-colon-notation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['single', 'double'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixedColon = '';\n\n\t\tif (primary === 'single') {\n\t\t\tfixedColon = ':';\n\t\t} else if (primary === 'double') {\n\t\t\tfixedColon = '::';\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// get out early if no pseudo elements or classes\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectors) => {\n\t\t\t\tselectors.walkPseudos((pseudo) => {\n\t\t\t\t\tconst pseudoElement = pseudo.value.replace(/:/g, '');\n\n\t\t\t\t\tif (!levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isDouble = pseudo.value.startsWith('::');\n\n\t\t\t\t\tif (primary === 'single' && !isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'double' && isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudo.replaceWith(pseudo.clone({ value: fixedColon + pseudoElement }));\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tendIndex: pseudo.sourceIndex + (isDouble ? 2 : 1),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomElement = require('../../utils/isCustomElement');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst { htmlTypeSelectors } = require('../../reference/selectors');\nconst mathMLTags = require('mathml-tag-names');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst svgTags = require('svg-tags');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-type-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-type-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-elements', 'default-namespace'],\n\t\t\t\t\tignoreNamespaces: [isString, isRegExp],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'custom-elements') &&\n\t\t\t\t\t\tisCustomElement(tagNode.value)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'default-namespace') &&\n\t\t\t\t\t\t!(typeof tagNode.namespace === 'string')\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreNamespaces', tagNode.namespace)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tagNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tagName = tagNode.value;\n\t\t\t\t\tconst tagNameLowerCase = tagName.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\thtmlTypeSelectors.has(tagNameLowerCase) ||\n\t\t\t\t\t\t// SVG tags are case-sensitive\n\t\t\t\t\t\tsvgTags.includes(tagName) ||\n\t\t\t\t\t\tmathMLTags.includes(tagNameLowerCase)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(tagName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: tagNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: tagName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { htmlTypeSelectors } = require('../reference/selectors');\nconst mathMLTags = require('mathml-tag-names');\nconst svgTags = require('svg-tags');\n\n/**\n * Check whether a type selector is a custom element\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isCustomElement(selector) {\n\tif (!/^[a-z]/.test(selector)) {\n\t\treturn false;\n\t}\n\n\tif (!selector.includes('-')) {\n\t\treturn false;\n\t}\n\n\tconst selectorLowerCase = selector.toLowerCase();\n\n\tif (selectorLowerCase !== selector) {\n\t\treturn false;\n\t}\n\n\tif (svgTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (htmlTypeSelectors.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (mathMLTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-type';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} type ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-type',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDescendant = optionsMatches(secondaryOptions, 'ignore', 'descendant');\n\t\tconst ignoreChild = optionsMatches(secondaryOptions, 'ignore', 'child');\n\t\tconst ignoreCompounded = optionsMatches(secondaryOptions, 'ignore', 'compounded');\n\t\tconst ignoreNextSibling = optionsMatches(secondaryOptions, 'ignore', 'next-sibling');\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', childNode.value)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreChild && hasChildCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreCompounded && hasCompoundSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\treturn childNode.type === 'tag' ? total + 1 : total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-selector-parser').Node} SelectorNode */\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasDescendantCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isDescendantCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasChildCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isChildCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasCompoundSelector(node) {\n\tif (node.prev() && !isCombinator(node.prev())) {\n\t\treturn true;\n\t}\n\n\treturn node.next() && !isCombinator(node.next());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasNextSiblingCombinator(node) {\n\treturn node.prev() && isNextSiblingCombinator(node.prev());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isCombinator(node) {\n\tif (!node) return false;\n\n\treturn node.type === 'combinator';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isDescendantCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && isString(node.value) && isOnlyWhitespace(node.value);\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isChildCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && node.value === '>';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isNextSiblingCombinator(node) {\n\treturn isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomSelector = require('../../utils/isCustomSelector');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst {\n\tatRulePagePseudoClasses,\n\tpseudoClasses,\n\tpseudoElements,\n\twebkitScrollbarPseudoClasses,\n\twebkitScrollbarPseudoElements,\n} = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-class selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t * @param {import('postcss').ChildNode} node\n\t\t */\n\t\tfunction check(selector, node) {\n\t\t\tparseSelector(selector, result, node, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isCustomSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet index = null;\n\t\t\t\t\tconst name = value.slice(1).toLowerCase();\n\n\t\t\t\t\tif (isAtRule(node) && node.name === 'page') {\n\t\t\t\t\t\tif (atRulePagePseudoClasses.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (vendor.prefix(name) || pseudoClasses.has(name) || pseudoElements.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {import('postcss-selector-parser').Base} */\n\t\t\t\t\t\tlet prevPseudoElement = pseudoNode;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevPseudoElement = /** @type {import('postcss-selector-parser').Base} */ (\n\t\t\t\t\t\t\t\tprevPseudoElement.prev()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (prevPseudoElement);\n\n\t\t\t\t\t\tif (prevPseudoElement) {\n\t\t\t\t\t\t\tconst prevPseudoElementValue = prevPseudoElement.value.toLowerCase().slice(2);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\twebkitScrollbarPseudoElements.has(prevPseudoElementValue) &&\n\t\t\t\t\t\t\t\twebkitScrollbarPseudoClasses.has(name)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = pseudoNode.sourceIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tlet selector = null;\n\n\t\t\tif (node.type === 'rule') {\n\t\t\t\tif (!isStandardSyntaxRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.selector;\n\t\t\t} else if (isAtRule(node) && node.name === 'page' && node.params) {\n\t\t\t\tif (!isStandardSyntaxAtRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.params;\n\t\t\t}\n\n\t\t\t// Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\t\t\tif (!selector) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(selector, node);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a selector is a custom one\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isCustomSelector(selector) {\n\treturn selector.startsWith(':--');\n};\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.charAt(1) !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-id';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-id',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreContextFunctionalPseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'selector' ||\n\t\t\t\t\t(isContextFunctionalPseudoClass(childNode) &&\n\t\t\t\t\t\t!isIgnoredContextFunctionalPseudoClass(childNode))\n\t\t\t\t) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'id') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredContextFunctionalPseudoClass(node) {\n\t\t\treturn (\n\t\t\t\tnode.type === 'pseudo' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreContextFunctionalPseudoClasses', node.value)\n\t\t\t);\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { pseudoElements } = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-element selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoElements: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.slice(0, 2) !== '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (vendor.prefix(name) || pseudoElements.has(name.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst { mixedCaseSvgTypeSelectors } = require('../../reference/selectors');\n\nconst ruleName = 'selector-type-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-type-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tlet hasComments = ruleNode.raws.selector && ruleNode.raws.selector.raw;\n\t\t\tconst selector = hasComments ? hasComments : ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorAST) => {\n\t\t\t\tselectorAST.walkTags((tag) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tag)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mixedCaseSvgTypeSelectors.has(tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sourceIndex = tag.sourceIndex;\n\t\t\t\t\tconst value = tag.value;\n\n\t\t\t\t\tconst expectedValue = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\t\tif (value === expectedValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\thasComments.slice(sourceIndex + value.length);\n\n\t\t\t\t\t\t\tif (ruleNode.raws.selector == null) {\n\t\t\t\t\t\t\t\tthrow new Error('The `raw` property must be present');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\truleNode.raws.selector.raw = hasComments;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\truleNode.selector =\n\t\t\t\t\t\t\t\truleNode.selector.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\truleNode.selector.slice(sourceIndex + value.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(value, expectedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransformSelector(result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst pseudoElement = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(pseudoElement)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!pseudoElement.includes('::') &&\n\t\t\t\t\t\t!levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst expectedPseudoElement =\n\t\t\t\t\t\tprimary === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n\t\t\t\t\tif (pseudoElement === expectedPseudoElement) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudoNode.value = expectedPseudoElement;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(pseudoElement, expectedPseudoElement),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unexpected, expected) => `Expected \"${unexpected}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/shorthand-property-no-redundant-values',\n\tfixable: true,\n};\n\nconst propertiesWithShorthandNotation = new Set([\n\t'margin',\n\t'padding',\n\t'border-color',\n\t'border-radius',\n\t'border-style',\n\t'border-width',\n\t'grid-gap',\n]);\n\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction hasIgnoredCharacters(value) {\n\treturn ignoredCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {string} property\n * @returns {boolean}\n */\nfunction isShorthandProperty(property) {\n\treturn propertiesWithShorthandNotation.has(property);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {string[]}\n */\nfunction canCondense(top, right, bottom, left) {\n\tconst lowerTop = top.toLowerCase();\n\tconst lowerRight = right.toLowerCase();\n\tconst lowerBottom = bottom && bottom.toLowerCase();\n\tconst lowerLeft = left && left.toLowerCase();\n\n\tif (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top];\n\t}\n\n\tif (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right];\n\t}\n\n\tif (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right, bottom];\n\t}\n\n\treturn [top, right, bottom, left];\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToOneValue(top, right, bottom, left) {\n\tif (top !== right) {\n\t\treturn false;\n\t}\n\n\treturn (top === bottom && (bottom === left || !left)) || (!bottom && !left);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n\treturn (top === bottom && right === left) || (top === bottom && !left && top !== right);\n}\n\n/**\n * @param {string} _top\n * @param {string} right\n * @param {string} _bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToThreeValues(_top, right, _bottom, left) {\n\treturn right === left;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n\t\t\tif (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst valuesToShorthand = [];\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvaluesToShorthand.push(valueParser.stringify(valueNode));\n\t\t\t});\n\n\t\t\tif (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst shortestForm = canCondense(\n\t\t\t\tvaluesToShorthand[0] || '',\n\t\t\t\tvaluesToShorthand[1] || '',\n\t\t\t\tvaluesToShorthand[2] || '',\n\t\t\t\tvaluesToShorthand[3] || '',\n\t\t\t);\n\t\t\tconst shortestFormString = shortestForm.filter(Boolean).join(' ');\n\t\t\tconst valuesFormString = valuesToShorthand.join(' ');\n\n\t\t\tif (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.value = decl.value.replace(value, shortestFormString);\n\t\t\t} else {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value, shortestFormString),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst {\n\tisPseudoClass,\n\tisAttribute,\n\tisClassName,\n\tisUniversal,\n\tisIdentifier,\n\tisTag,\n} = require('postcss-selector-parser');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-not-notation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} :not() pseudo-class notation`,\n});\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-not-notation',\n\tfixable: true,\n};\n\n/** @typedef {import('postcss-selector-parser').Node} Node */\n/** @typedef {import('postcss-selector-parser').Selector} Selector */\n/** @typedef {import('postcss-selector-parser').Pseudo} Pseudo */\n\n/**\n * @param {Node} node\n * @returns {boolean}\n */\nconst isSimpleSelector = (node) =>\n\tisPseudoClass(node) ||\n\tisAttribute(node) ||\n\tisClassName(node) ||\n\tisUniversal(node) ||\n\tisIdentifier(node) ||\n\tisTag(node);\n\n/**\n * @param {Node} node\n * @returns {node is Pseudo}\n */\nconst isNot = (node) =>\n\tisPseudoClass(node) && node.value !== undefined && node.value.toLowerCase() === ':not';\n\n/**\n * @param {Selector[]} list\n * @returns {boolean}\n */\nconst isSimple = (list) => {\n\tif (list.length > 1) return false;\n\n\tassert(list[0], 'list is never empty');\n\tconst [first, second] = list[0].nodes;\n\n\tif (!first) return true;\n\n\tif (second) return false;\n\n\treturn isSimpleSelector(first) && !isNot(first);\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['simple', 'complex'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) return;\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':not(')) return;\n\n\t\t\tif (!isStandardSyntaxSelector(selector)) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (container) => {\n\t\t\t\tcontainer.walkPseudos((pseudo) => {\n\t\t\t\t\tif (!isNot(pseudo)) return;\n\n\t\t\t\t\tif (primary === 'complex') {\n\t\t\t\t\t\tconst prev = pseudo.prev();\n\t\t\t\t\t\tconst hasConsecutiveNot = prev && isNot(prev);\n\n\t\t\t\t\t\tif (!hasConsecutiveNot) return;\n\n\t\t\t\t\t\tif (context.fix) return fixComplex(prev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst selectors = pseudo.nodes;\n\n\t\t\t\t\t\tif (isSimple(selectors)) return;\n\n\t\t\t\t\t\tconst mustFix =\n\t\t\t\t\t\t\tcontext.fix &&\n\t\t\t\t\t\t\tselectors.length > 1 &&\n\t\t\t\t\t\t\tselectors[1] &&\n\t\t\t\t\t\t\t(selectors[1].nodes.length === 0 ||\n\t\t\t\t\t\t\t\tselectors.every(({ nodes }) => nodes.length === 1));\n\n\t\t\t\t\t\tif (mustFix) return fixSimple(pseudo);\n\t\t\t\t\t}\n\n\t\t\t\t\tassert(pseudo.source && pseudo.source.end);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tendIndex: pseudo.source.end.column,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {Pseudo} not\n */\nfunction fixSimple(not) {\n\tconst simpleSelectors = not.nodes\n\t\t.filter(({ nodes }) => nodes[0] && isSimpleSelector(nodes[0]))\n\t\t.map((s) => {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = '';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\n\t\t\treturn s;\n\t\t});\n\tconst firstSelector = simpleSelectors.shift();\n\n\tassert(firstSelector);\n\tassert(not.parent);\n\n\tnot.empty();\n\tnot.nodes.push(firstSelector);\n\n\tfor (const s of simpleSelectors) {\n\t\tconst last = not.parent.last;\n\n\t\tnot.parent.insertAfter(last, last.clone({ nodes: [s] }));\n\t}\n}\n\n/**\n * @param {Pseudo} previousNot\n */\nfunction fixComplex(previousNot) {\n\tconst indentAndTrimRight = (/** @type {Selector[]} */ selectors) => {\n\t\tfor (const s of selectors) {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = ' ';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\t\t}\n\t};\n\tconst [head, ...tail] = previousNot.nodes;\n\tlet node = previousNot.next();\n\n\tif (head == null || head.nodes.length === 0) return;\n\n\tassert(head.nodes[0]);\n\thead.nodes[0].rawSpaceBefore = '';\n\thead.nodes[0].rawSpaceAfter = '';\n\tindentAndTrimRight(tail);\n\n\twhile (isNot(node)) {\n\t\tconst selectors = node.nodes;\n\t\tconst prev = node;\n\n\t\tindentAndTrimRight(selectors);\n\t\tpreviousNot.nodes = previousNot.nodes.concat(selectors);\n\t\tnode = node.next();\n\t\tprev.remove();\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'unicode-bom';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected Unicode BOM',\n\trejected: 'Unexpected Unicode BOM',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unicode-bom',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (\n\t\t\t!validOptions ||\n\t\t\t!root.source ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\t\troot.source.inline ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'lang' does not exist on type 'Source'.\n\t\t\troot.source.lang === 'object-literal' ||\n\t\t\t// Ignore HTML documents\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\troot.document !== undefined\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { hasBOM } = root.source.input;\n\n\t\tif (primary === 'always' && !hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (primary === 'never' && hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /\\r?\\n/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected newline in string',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/string-no-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxSelector(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { value, quoteMark } = attributeNode;\n\n\t\t\t\t\tif (!value || !reNewLine.test(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = [\n\t\t\t\t\t\t// length of our attribute\n\t\t\t\t\t\tattributeNode.attribute,\n\t\t\t\t\t\t// length of our operator , ie '='\n\t\t\t\t\t\tattributeNode.operator || '',\n\t\t\t\t\t].reduce(\n\t\t\t\t\t\t(index, str) => index + str.length,\n\t\t\t\t\t\t// index of the start of our attribute node in our source\n\t\t\t\t\t\t// plus 1 for the opening quotation mark\n\t\t\t\t\t\tattributeNode.sourceIndex + 1,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst valueLength = value.length + (quoteMark || '').length * 2;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: openIndex,\n\t\t\t\t\t\tendIndex: openIndex + valueLength,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!reNewLine.test(valueNode.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst nodeIndex = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + valueNode.sourceIndex,\n\t\t\t\t\tendIndex: nodeIndex + valueNode.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, assertString } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'string-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} quotes`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/string-quotes',\n\tfixable: true,\n};\n\nconst singleQuote = `'`;\nconst doubleQuote = `\"`;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst correctQuote = primary === 'single' ? singleQuote : doubleQuote;\n\tconst erroneousQuote = primary === 'single' ? doubleQuote : singleQuote;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['single', 'double'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tavoidEscape: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst avoidEscape =\n\t\t\tsecondaryOptions && secondaryOptions.avoidEscape !== undefined\n\t\t\t\t? secondaryOptions.avoidEscape\n\t\t\t\t: true;\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.quoted) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === correctQuote && avoidEscape) {\n\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\tattributeNode.quoteMark = erroneousQuote;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary === 'single' ? 'double' : primary),\n\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === erroneousQuote) {\n\t\t\t\t\t\tif (avoidEscape) {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\truleNode.selector = replaceQuote(ruleNode.selector, fixIndex, correctQuote);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no erroneous quotes\n\t\t\tif (!value.includes(erroneousQuote)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isAtRule(node) && node.name === 'charset') {\n\t\t\t\t// allow @charset rules to have double quotes, in spite of the configuration\n\t\t\t\t// TODO: @charset should always use double-quotes, see https://github.com/stylelint/stylelint/issues/2788\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'string' && valueNode.quote === erroneousQuote) {\n\t\t\t\t\tconst needsEscape = valueNode.value.includes(correctQuote);\n\n\t\t\t\t\tif (avoidEscape && needsEscape) {\n\t\t\t\t\t\t// don't consider this an error\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = valueNode.sourceIndex;\n\n\t\t\t\t\t// we currently don't fix escapes\n\t\t\t\t\tif (context.fix && !needsEscape) {\n\t\t\t\t\t\tconst closeIndex = openIndex + valueNode.value.length + erroneousQuote.length;\n\n\t\t\t\t\t\tfixPositions.push(openIndex, closeIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tnode.params = replaceQuote(node.params, fixIndex, correctQuote);\n\t\t\t\t} else {\n\t\t\t\t\tnode.value = replaceQuote(node.value, fixIndex, correctQuote);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} string\n * @param {number} index\n * @param {string} replace\n * @returns {string}\n */\nfunction replaceQuote(string, index, replace) {\n\treturn string.substring(0, index) + replace + string.substring(index + replace.length);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getDimension = require('../../utils/getDimension');\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst {\n\tanimationNameKeywords,\n\tanimationShorthandKeywords,\n\tcamelCaseKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n\tgridAreaKeywords,\n\tgridColumnKeywords,\n\tgridRowKeywords,\n\tlistStyleShorthandKeywords,\n\tlistStyleTypeKeywords,\n\tsystemColorsKeywords,\n} = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-keyword-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-keyword-case',\n\tfixable: true,\n};\n\n// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\n\nconst mapLowercaseKeywordsToCamelCase = new Map();\n\nfor (const func of camelCaseKeywords) {\n\tmapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreKeywords: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tcamelCaseSvgKeywords: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst propLowerCase = decl.prop.toLowerCase();\n\t\t\tconst value = decl.value;\n\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tlet needFix = false;\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tconst valueLowerCase = node.value.toLowerCase();\n\n\t\t\t\t// Ignore system colors\n\t\t\t\tif (systemColorsKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore keywords within `url` and `var` function\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\t(valueLowerCase === 'url' ||\n\t\t\t\t\t\tvalueLowerCase === 'var' ||\n\t\t\t\t\t\tvalueLowerCase === 'counter' ||\n\t\t\t\t\t\tvalueLowerCase === 'counters' ||\n\t\t\t\t\t\tvalueLowerCase === 'attr')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// ignore keywords within ignoreFunctions functions\n\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst keyword = node.value;\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\t// Ignore css variables, and hex values, and math operators, and sass interpolation\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'word' ||\n\t\t\t\t\t!isStandardSyntaxValue(node.value) ||\n\t\t\t\t\tvalue.includes('#') ||\n\t\t\t\t\tignoredCharacters.has(keyword) ||\n\t\t\t\t\tunit\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation' &&\n\t\t\t\t\t!animationShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'animation-name' && !animationNameKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font' &&\n\t\t\t\t\t!fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'font-family' && !fontFamilyKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'counter-increment' &&\n\t\t\t\t\tisCounterIncrementCustomIdentValue(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridRowProps.has(propLowerCase) && !gridRowKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridColumnProps.has(propLowerCase) && !gridColumnKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'grid-area' && !gridAreaKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style' &&\n\t\t\t\t\t!listStyleShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'list-style-type' && !listStyleTypeKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreKeywords', keyword)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst keywordLowerCase = keyword.toLocaleLowerCase();\n\t\t\t\tlet expectedKeyword = null;\n\n\t\t\t\t/** @type {boolean} */\n\t\t\t\tconst camelCaseSvgKeywords =\n\t\t\t\t\t(secondaryOptions && secondaryOptions.camelCaseSvgKeywords) || false;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseKeywordsToCamelCase.has(keywordLowerCase) &&\n\t\t\t\t\tcamelCaseSvgKeywords\n\t\t\t\t) {\n\t\t\t\t\texpectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedKeyword = keyword.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\texpectedKeyword = keyword.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (keyword === expectedKeyword) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedKeyword;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(keyword, expectedKeyword),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tdecl.value = parsed.toString();\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { counterIncrementKeywords } = require('../reference/keywords');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function isCounterIncrementCustomIdentValue(value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tcounterIncrementKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst { counterResetKeywords } = require('../reference/keywords');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function isCounterResetCustomIdentValue(value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tcounterResetKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { longhandTimeProperties, shorthandTimeProperties } = require('../../reference/properties');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isNumber } = require('../../utils/validateTypes');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getDimension = require('../../utils/getDimension');\n\nconst ruleName = 'time-min-milliseconds';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (time) => `Expected a minimum of ${time} milliseconds`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/time-min-milliseconds',\n};\n\nconst DELAY_PROPERTIES = new Set(['animation-delay', 'transition-delay']);\n\n/** @type {import('stylelint').Rule<number>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['delay'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst minimum = primary;\n\t\tconst ignoreDelay = optionsMatches(secondaryOptions, 'ignore', 'delay');\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst propertyName = vendor.unprefixed(decl.prop.toLowerCase());\n\t\t\tconst propertyValue = decl.value;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet timeValueCount = 0;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value, sourceIndex } = node;\n\t\t\t\tconst dimension = getDimension(node);\n\n\t\t\t\tif (\n\t\t\t\t\tlonghandTimeProperties.has(propertyName) &&\n\t\t\t\t\t!isIgnoredProperty(propertyName) &&\n\t\t\t\t\t!isAcceptableTime(dimension)\n\t\t\t\t) {\n\t\t\t\t\tcomplain(decl, 0, propertyValue.length);\n\t\t\t\t}\n\n\t\t\t\tif (!shorthandTimeProperties.has(propertyName)) return;\n\n\t\t\t\ttimeValueCount = calcTimeValueCount(dimension, value, timeValueCount);\n\n\t\t\t\tif (isAcceptableTime(dimension) || (ignoreDelay && timeValueCount !== 1)) return;\n\n\t\t\t\tcomplain(decl, sourceIndex, value.length);\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {{unit: string | null, number: string | null}} dimension\n\t\t * @param {string} value\n\t\t * @param {number} valueTimeCount\n\t\t * @returns {number}\n\t\t */\n\t\tfunction calcTimeValueCount(dimension, value, valueTimeCount) {\n\t\t\tconst { unit } = dimension;\n\n\t\t\tif (unit !== null) valueTimeCount++;\n\n\t\t\tif (value === ',') valueTimeCount = 0;\n\n\t\t\treturn valueTimeCount;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} propertyName\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredProperty(propertyName) {\n\t\t\tif (ignoreDelay && DELAY_PROPERTIES.has(propertyName)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-value-parser').Dimension | {unit: null, number: null}} dimension\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isAcceptableTime(dimension) {\n\t\t\tconst { unit, number } = dimension;\n\n\t\t\tif (unit === null || number === null) return true;\n\n\t\t\tconst numTime = Number(number);\n\n\t\t\tif (numTime <= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst timeUnit = unit.toLowerCase();\n\n\t\t\tif (timeUnit === 'ms' && numTime < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (timeUnit === 's' && numTime * 1000 < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} offset\n\t\t * @param {number} length\n\t\t * @returns {void}\n\t\t */\n\t\tfunction complain(decl, offset, length) {\n\t\t\tconst index = declarationValueIndex(decl) + offset;\n\t\t\tconst endIndex = index + length;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(minimum),\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tnode: decl,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-disallowed-list',\n};\n\n/**\n * a function to retrieve only the media feature name\n * could be externalized in an utils function if needed in other code\n *\n * @param {import('postcss-media-query-parser').Child} mediaFeatureNode\n * @returns {string | undefined}\n */\nconst getMediaFeatureName = (mediaFeatureNode) => {\n\tconst value = mediaFeatureNode.value.toLowerCase();\n\n\tconst match = /((?:-?\\w*)*)/.exec(value);\n\n\treturn match ? match[1] : undefined;\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t\tignoreMediaFeatureNames: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t * @param {string | undefined} input\n\t\t * @param {Record<string, unknown>} options\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode, input, options) {\n\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t// There is not unit or it is not configured as a problem\n\t\t\tif (!unit || !number || (unit && !primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The unit has an ignore option for the specific input\n\t\t\tif (optionsMatches(options, unit.toLowerCase(), input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: nodeIndex + valueNode.sourceIndex + number.length,\n\t\t\t\tendIndex: nodeIndex + valueNode.sourceEndIndex,\n\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkMedia(node, value, getIndex) {\n\t\t\tmediaParser(node.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst mediaName = getMediaFeatureName(mediaFeatureNode);\n\t\t\t\tconst parentValue = mediaFeatureNode.parent.value;\n\n\t\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t\t// Ignore all non-word valueNode and\n\t\t\t\t\t// the values not included in the parentValue string\n\t\t\t\t\tif (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcheck(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tgetIndex(node),\n\t\t\t\t\t\tvalueNode,\n\t\t\t\t\t\tmediaName,\n\t\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreMediaFeatureNames : {},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDecl(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcheck(\n\t\t\t\t\tnode,\n\t\t\t\t\tgetIndex(node),\n\t\t\t\t\tvalueNode,\n\t\t\t\t\tnode.prop,\n\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreProperties : {},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => checkMedia(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => checkDecl(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../utils/isStandardSyntaxProperty');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((node: import('postcss').Declaration, index: number) => boolean) | null,\n *   determineIndex?: (declString: string, match: import('style-search').StyleSearchMatch) => number | false,\n * }} opts\n */\nmodule.exports = function valueListCommaWhitespaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declString = decl.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: declString,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tconst indexToCheckAfter = opts.determineIndex\n\t\t\t\t\t? opts.determineIndex(declString, match)\n\t\t\t\t\t: match.startIndex;\n\n\t\t\t\tif (indexToCheckAfter === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcheckComma(declString, indexToCheckAfter, decl);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Declaration} node\n\t * @returns {void}\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-list-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newValueString = value\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tsetDeclarationValue(decl, newValueString);\n\t\t\t} else if (violatedLFNewLinesRegex.test(value) || violatedCRLFNewLinesRegex.test(value)) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (value) => `Unexpected vendor-prefix \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-no-vendor-prefix',\n\tfixable: true,\n};\n\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst hasPrefix = (value) => {\n\tconst lowerValue = value.toLowerCase();\n\n\treturn valuePrefixes.some((prefix) => lowerValue.startsWith(prefix));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreValues: [isString],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (\n\t\t\t\t!isStandardSyntaxDeclaration(decl) ||\n\t\t\t\t!isStandardSyntaxProperty(decl.prop) ||\n\t\t\t\t!value.startsWith('-')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreValues', vendor.unprefixed(value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!hasPrefix(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isAutoprefixable.propertyValue(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = isAutoprefixable.unprefix(node.value);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst startIndex = decl.prop.length + (decl.raws.between || '').length + node.sourceIndex;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: startIndex,\n\t\t\t\t\tendIndex: startIndex + node.value.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (combinator) => `Expected single space before \"${combinator}\"`,\n\trejectedBefore: (combinator) => `Unexpected whitespace before \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tlocationType: 'before',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.before = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.before = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} checkedValue\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, checkedValue, getIndex) {\n\t\t\t/** @type {Array<{ index: number, endIndex: number, message: string }>} */\n\t\t\tconst problems = [];\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tfunction processValue(valueNode) {\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!number || !unit) return false;\n\n\t\t\t\tconst expectedUnit = primary === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n\t\t\t\tif (unit === expectedUnit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\tproblems.push({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.expected(unit, expectedUnit),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(checkedValue).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tlet needFix = false;\n\t\t\t\tconst value = valueNode.value;\n\n\t\t\t\tif (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (value.includes('*')) {\n\t\t\t\t\tvalue.split('*').some((val) => {\n\t\t\t\t\t\treturn processValue({\n\t\t\t\t\t\t\t...valueNode,\n\t\t\t\t\t\t\tsourceIndex: value.indexOf(val) + val.length + 1,\n\t\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tneedFix = processValue(valueNode);\n\n\t\t\t\tif (needFix && context.fix) {\n\t\t\t\t\tvalueNode.value = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif ('name' in node && node.name === 'media') {\n\t\t\t\t\t\tnode.params = parsedValue.toString();\n\t\t\t\t\t} else if ('value' in node) {\n\t\t\t\t\t\tnode.value = parsedValue.toString();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const err of problems) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\t\tendIndex: err.endIndex,\n\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !('variable' in atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (!matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tdetermineIndex: (declString, match) => {\n\t\t\t\tconst nextChars = declString.substring(match.endIndex, declString.length);\n\n\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t// ending the comment so we're fine\n\t\t\t\tif (/^[ \\t]*\\/\\//.test(nextChars)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\treturn /^[ \\t]*\\/\\*/.test(nextChars)\n\t\t\t\t\t? declString.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t: match.startIndex;\n\t\t\t},\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => a - b).reverse()) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = context.newline + afterValue;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isBoolean, isNumber, isString, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'indentation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (x) => `Expected indentation of ${x}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/indentation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions = {}, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber, 'tab'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tbaseIndentLevel: [isNumber, 'auto'],\n\t\t\t\t\texcept: ['block', 'value', 'param'],\n\t\t\t\t\tignore: ['value', 'param', 'inside-parens'],\n\t\t\t\t\tindentInsideParens: ['twice', 'once-at-root-twice-in-block'],\n\t\t\t\t\tindentClosingBrace: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst spaceCount = isNumber(primary) ? primary : null;\n\t\tconst indentChar = spaceCount == null ? '\\t' : ' '.repeat(spaceCount);\n\t\tconst warningWord = primary === 'tab' ? 'tab' : 'space';\n\n\t\t/** @type {number | 'auto'} */\n\t\tconst baseIndentLevel = secondaryOptions.baseIndentLevel;\n\t\t/** @type {boolean} */\n\t\tconst indentClosingBrace = secondaryOptions.indentClosingBrace;\n\n\t\t/**\n\t\t * @param {number} level\n\t\t */\n\t\tconst legibleExpectation = (level) => {\n\t\t\tconst count = spaceCount == null ? level : level * spaceCount;\n\t\t\tconst quantifiedWarningWord = count === 1 ? warningWord : `${warningWord}s`;\n\n\t\t\treturn `${count} ${quantifiedWarningWord}`;\n\t\t};\n\n\t\t// Cycle through all nodes using walk.\n\t\troot.walk((node) => {\n\t\t\tif (isRoot(node)) {\n\t\t\t\t// Ignore nested template literals root in css-in-js lang\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeLevel = indentationLevel(node);\n\n\t\t\t// Cut out any * and _ hacks from `before`\n\t\t\tconst before = (node.raws.before || '').replace(/[*_]$/, '');\n\t\t\tconst after = typeof node.raws.after === 'string' ? node.raws.after : '';\n\t\t\tconst parent = node.parent;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tconst expectedOpeningBraceIndentation = indentChar.repeat(nodeLevel);\n\n\t\t\t// Only inspect the spaces before the node\n\t\t\t// if this is the first node in root\n\t\t\t// or there is a newline in the `before` string.\n\t\t\t// (If there is no newline before a node,\n\t\t\t// there is no \"indentation\" to check.)\n\t\t\tconst isFirstChild = parent.type === 'root' && parent.first === node;\n\t\t\tconst lastIndexOfNewline = before.lastIndexOf('\\n');\n\n\t\t\t// Inspect whitespace in the `before` string that is\n\t\t\t// *after* the *last* newline character,\n\t\t\t// because anything besides that is not indentation for this node:\n\t\t\t// it is some other kind of separation, checked by some separate rule\n\t\t\tif (\n\t\t\t\t(lastIndexOfNewline !== -1 ||\n\t\t\t\t\t(isFirstChild &&\n\t\t\t\t\t\t(!getDocument(parent) ||\n\t\t\t\t\t\t\t(parent.raws.codeBefore && parent.raws.codeBefore.endsWith('\\n'))))) &&\n\t\t\t\tbefore.slice(lastIndexOfNewline + 1) !== expectedOpeningBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (isFirstChild && isString(node.raws.before)) {\n\t\t\t\t\t\tnode.raws.before = node.raws.before.replace(\n\t\t\t\t\t\t\t/^[ \\t]*(?=\\S|$)/,\n\t\t\t\t\t\t\texpectedOpeningBraceIndentation,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.raws.before = fixIndentation(node.raws.before, expectedOpeningBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(nodeLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Only blocks have the `after` string to check.\n\t\t\t// Only inspect `after` strings that start with a newline;\n\t\t\t// otherwise there's no indentation involved.\n\t\t\t// And check `indentClosingBrace` to see if it should be indented an extra level.\n\t\t\tconst closingBraceLevel = indentClosingBrace ? nodeLevel + 1 : nodeLevel;\n\t\t\tconst expectedClosingBraceIndentation = indentChar.repeat(closingBraceLevel);\n\n\t\t\tif (\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node) &&\n\t\t\t\tafter &&\n\t\t\t\tafter.includes('\\n') &&\n\t\t\t\tafter.slice(after.lastIndexOf('\\n') + 1) !== expectedClosingBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.raws.after = fixIndentation(node.raws.after, expectedClosingBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(closingBraceLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: node.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a declaration, check the value\n\t\t\tif (isDeclaration(node)) {\n\t\t\t\tcheckValue(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is a rule, check the selector\n\t\t\tif (isRule(node)) {\n\t\t\t\tcheckSelector(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is an at rule, check the params\n\t\t\tif (isAtRule(node)) {\n\t\t\t\tcheckAtRuleParams(node, nodeLevel);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} level\n\t\t * @returns {number}\n\t\t */\n\t\tfunction indentationLevel(node, level = 0) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRoot(node.parent)) {\n\t\t\t\treturn level + getRootBaseIndentLevel(node.parent, baseIndentLevel, primary);\n\t\t\t}\n\n\t\t\tlet calculatedLevel;\n\n\t\t\t// Indentation level equals the ancestor nodes\n\t\t\t// separating this node from root; so recursively\n\t\t\t// run this operation\n\t\t\tcalculatedLevel = indentationLevel(node.parent, level + 1);\n\n\t\t\t// If `secondaryOptions.except` includes \"block\",\n\t\t\t// blocks are taken down one from their calculated level\n\t\t\t// (all blocks are the same level as their parents)\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'block') &&\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node)\n\t\t\t) {\n\t\t\t\tcalculatedLevel--;\n\t\t\t}\n\n\t\t\treturn calculatedLevel;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} declLevel\n\t\t */\n\t\tfunction checkValue(decl, declLevel) {\n\t\t\tif (!decl.value.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'value')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\t\t\tconst valueLevel = optionsMatches(secondaryOptions, 'except', 'value')\n\t\t\t\t? declLevel\n\t\t\t\t: declLevel + 1;\n\n\t\t\tcheckMultilineBit(declString, valueLevel, decl);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkSelector(ruleNode, ruleLevel) {\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Less mixins have params, and they should be indented extra\n\t\t\t// @ts-expect-error -- TS2339: Property 'params' does not exist on type 'Rule'.\n\t\t\tif (ruleNode.params) {\n\t\t\t\truleLevel += 1;\n\t\t\t}\n\n\t\t\tcheckMultilineBit(selector, ruleLevel, ruleNode);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkAtRuleParams(atRule, ruleLevel) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'param')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @nest and SCSS's @at-root rules should be treated like regular rules, not expected\n\t\t\t// to have their params (selectors) indented\n\t\t\tconst paramLevel =\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'param') ||\n\t\t\t\tatRule.name === 'nest' ||\n\t\t\t\tatRule.name === 'at-root'\n\t\t\t\t\t? ruleLevel\n\t\t\t\t\t: ruleLevel + 1;\n\n\t\t\tcheckMultilineBit(beforeBlockString(atRule).trim(), paramLevel, atRule);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} newlineIndentLevel\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkMultilineBit(source, newlineIndentLevel, node) {\n\t\t\tif (!source.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Data for current node fixing\n\t\t\t/** @type {Array<{ expectedIndentation: string, currentIndentation: string, startIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// `outsideParens` because function arguments and also non-standard parenthesized stuff like\n\t\t\t// Sass maps are ignored to allow for arbitrary indentation\n\t\t\tlet parentheticalDepth = 0;\n\n\t\t\tconst ignoreInsideParans = optionsMatches(secondaryOptions, 'ignore', 'inside-parens');\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource,\n\t\t\t\t\ttarget: '\\n',\n\t\t\t\t\t// @ts-expect-error -- The `outsideParens` option is unsupported. Why?\n\t\t\t\t\toutsideParens: ignoreInsideParans,\n\t\t\t\t},\n\t\t\t\t(match, matchCount) => {\n\t\t\t\t\tconst precedesClosingParenthesis = /^[ \\t]*\\)/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (ignoreInsideParans && (precedesClosingParenthesis || match.insideParens)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet expectedIndentLevel = newlineIndentLevel;\n\n\t\t\t\t\t// Modififications for parenthetical content\n\t\t\t\t\tif (!ignoreInsideParans && match.insideParens) {\n\t\t\t\t\t\t// If the first match in is within parentheses, reduce the parenthesis penalty\n\t\t\t\t\t\tif (matchCount === 1) parentheticalDepth -= 1;\n\n\t\t\t\t\t\t// Account for windows line endings\n\t\t\t\t\t\tlet newlineIndex = match.startIndex;\n\n\t\t\t\t\t\tif (source[match.startIndex - 1] === '\\r') {\n\t\t\t\t\t\t\tnewlineIndex--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningParenthesis = /\\([ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningBrace = /\\{[ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningBrace) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst startingClosingBrace = /^[ \\t]*\\}/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\t\tif (startingClosingBrace) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpectedIndentLevel += parentheticalDepth;\n\n\t\t\t\t\t\t// Past this point, adjustments to parentheticalDepth affect next line\n\n\t\t\t\t\t\tif (precedesClosingParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (secondaryOptions.indentInsideParens) {\n\t\t\t\t\t\t\tcase 'twice':\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'once-at-root-twice-in-block':\n\t\t\t\t\t\t\t\tif (node.parent === node.root()) {\n\t\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Starting at the index after the newline, we want to\n\t\t\t\t\t// check that the whitespace characters (excluding newlines) before the first\n\t\t\t\t\t// non-whitespace character equal the expected indentation\n\t\t\t\t\tconst afterNewlineSpaceMatches = /^([ \\t]*)\\S/.exec(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (!afterNewlineSpaceMatches) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst afterNewlineSpace = afterNewlineSpaceMatches[1] || '';\n\t\t\t\t\tconst expectedIndentation = indentChar.repeat(\n\t\t\t\t\t\texpectedIndentLevel > 0 ? expectedIndentLevel : 0,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (afterNewlineSpace !== expectedIndentation) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t// Adding fixes position in reverse order, because if we change indent in the beginning of the string it will break all following fixes for that string\n\t\t\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\t\t\texpectedIndentation,\n\t\t\t\t\t\t\t\tcurrentIndentation: afterNewlineSpace,\n\t\t\t\t\t\t\t\tstartIndex: match.startIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(expectedIndentLevel)),\n\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\tindex: match.startIndex + afterNewlineSpace.length + 1,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tnode.selector = replaceIndentation(\n\t\t\t\t\t\t\tnode.selector,\n\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\tfixPosition.startIndex,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst declProp = node.prop;\n\t\t\t\t\tconst declBetween = node.raws.between;\n\n\t\t\t\t\tif (!isString(declBetween)) {\n\t\t\t\t\t\tthrow new TypeError('The `between` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tif (fixPosition.startIndex < declProp.length + declBetween.length) {\n\t\t\t\t\t\t\tnode.raws.between = replaceIndentation(\n\t\t\t\t\t\t\t\tdeclBetween,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.value = replaceIndentation(\n\t\t\t\t\t\t\t\tnode.value,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length - declBetween.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tconst atRuleName = node.name;\n\t\t\t\t\tconst atRuleAfterName = node.raws.afterName;\n\t\t\t\t\tconst atRuleParams = node.params;\n\n\t\t\t\t\tif (!isString(atRuleAfterName)) {\n\t\t\t\t\t\tthrow new TypeError('The `afterName` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\t// 1 — it's a @ length\n\t\t\t\t\t\tif (fixPosition.startIndex < 1 + atRuleName.length + atRuleAfterName.length) {\n\t\t\t\t\t\t\tnode.raws.afterName = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleAfterName,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.params = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleParams,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - atRuleAfterName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {string} space\n * @returns {number}\n */\nfunction getRootBaseIndentLevel(root, baseIndentLevel, space) {\n\tconst document = getDocument(root);\n\n\tif (!document) {\n\t\treturn 0;\n\t}\n\n\tif (!root.source) {\n\t\tthrow new Error('The root node must have a source');\n\t}\n\n\t/** @type {import('postcss').Source & { baseIndentLevel?: number }} */\n\tconst source = root.source;\n\n\tconst indentLevel = source.baseIndentLevel;\n\n\tif (isNumber(indentLevel) && Number.isSafeInteger(indentLevel)) {\n\t\treturn indentLevel;\n\t}\n\n\tconst newIndentLevel = inferRootIndentLevel(root, baseIndentLevel, () =>\n\t\tinferDocIndentSize(document, space),\n\t);\n\n\tsource.baseIndentLevel = newIndentLevel;\n\n\treturn newIndentLevel;\n}\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction getDocument(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\tconst document = node.document;\n\n\tif (document) {\n\t\treturn document;\n\t}\n\n\tconst root = node.root();\n\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\treturn root && root.document;\n}\n\n/**\n * @param {import('postcss').Document} document\n * @param {string} space\n * returns {number}\n */\nfunction inferDocIndentSize(document, space) {\n\tif (!document.source) throw new Error('The document node must have a source');\n\n\t/** @type {import('postcss').Source & { indentSize?: number }} */\n\tconst docSource = document.source;\n\n\tlet indentSize = docSource.indentSize;\n\n\tif (isNumber(indentSize) && Number.isSafeInteger(indentSize)) {\n\t\treturn indentSize;\n\t}\n\n\tconst source = document.source.input.css;\n\tconst indents = source.match(/^ *(?=\\S)/gm);\n\n\tif (indents) {\n\t\t/** @type {Map<number, number>} */\n\t\tconst scores = new Map();\n\t\tlet lastIndentSize = 0;\n\t\tlet lastLeadingSpacesLength = 0;\n\n\t\t/**\n\t\t * @param {number} leadingSpacesLength\n\t\t */\n\t\tconst vote = (leadingSpacesLength) => {\n\t\t\tif (leadingSpacesLength) {\n\t\t\t\tlastIndentSize = Math.abs(leadingSpacesLength - lastLeadingSpacesLength) || lastIndentSize;\n\n\t\t\t\tif (lastIndentSize > 1) {\n\t\t\t\t\tconst score = scores.get(lastIndentSize);\n\n\t\t\t\t\tif (score) {\n\t\t\t\t\t\tscores.set(lastIndentSize, score + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscores.set(lastIndentSize, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastIndentSize = 0;\n\t\t\t}\n\n\t\t\tlastLeadingSpacesLength = leadingSpacesLength;\n\t\t};\n\n\t\tfor (const leadingSpaces of indents) {\n\t\t\tvote(leadingSpaces.length);\n\t\t}\n\n\t\tlet bestScore = 0;\n\n\t\tfor (const [indentSizeDate, score] of scores.entries()) {\n\t\t\tif (score > bestScore) {\n\t\t\t\tbestScore = score;\n\t\t\t\tindentSize = indentSizeDate;\n\t\t\t}\n\t\t}\n\t}\n\n\tindentSize =\n\t\tNumber(indentSize) || (indents && indents[0] && indents[0].length) || Number(space) || 2;\n\tdocSource.indentSize = indentSize;\n\n\treturn indentSize;\n}\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {() => number} indentSize\n * @returns {number}\n */\nfunction inferRootIndentLevel(root, baseIndentLevel, indentSize) {\n\t/**\n\t * @param {string} indent\n\t */\n\tfunction getIndentLevel(indent) {\n\t\tconst tabMatch = indent.match(/\\t/g);\n\t\tconst tabCount = tabMatch ? tabMatch.length : 0;\n\n\t\tconst spaceMatch = indent.match(/ /g);\n\t\tconst spaceCount = spaceMatch ? Math.round(spaceMatch.length / indentSize()) : 0;\n\n\t\treturn tabCount + spaceCount;\n\t}\n\n\tlet newBaseIndentLevel = 0;\n\n\tif (!isNumber(baseIndentLevel) || !Number.isSafeInteger(baseIndentLevel)) {\n\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\tlet source = root.source.input.css;\n\n\t\tsource = source.replace(/^[^\\r\\n]+/, (firstLine) => {\n\t\t\tconst match = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)$/.exec(root.raws.codeBefore);\n\n\t\t\tif (match) {\n\t\t\t\treturn match[1] + firstLine;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t});\n\n\t\tconst indents = source.match(/^[ \\t]*(?=\\S)/gm);\n\n\t\tif (indents) {\n\t\t\treturn Math.min(...indents.map((indent) => getIndentLevel(indent)));\n\t\t}\n\n\t\tnewBaseIndentLevel = 1;\n\t} else {\n\t\tnewBaseIndentLevel = baseIndentLevel;\n\t}\n\n\tconst indents = [];\n\tconst foundIndents = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)\\S/m.exec(root.raws.codeBefore);\n\n\t// The indent level of the CSS code block in non-CSS-like files is determined by the shortest indent of non-empty line.\n\tif (foundIndents) {\n\t\tlet shortest = Number.MAX_SAFE_INTEGER;\n\t\tlet i = 0;\n\n\t\twhile (++i < foundIndents.length) {\n\t\t\tconst foundIndent = foundIndents[i];\n\n\t\t\tassertString(foundIndent);\n\t\t\tconst current = getIndentLevel(foundIndent);\n\n\t\t\tif (current < shortest) {\n\t\t\t\tshortest = current;\n\n\t\t\t\tif (shortest === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shortest !== Number.MAX_SAFE_INTEGER) {\n\t\t\tindents.push(new Array(shortest).fill(' ').join(''));\n\t\t}\n\t}\n\n\tconst after = root.raws.after;\n\n\tif (after) {\n\t\tlet afterEnd;\n\n\t\tif (after.endsWith('\\n')) {\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tconst document = root.document;\n\n\t\t\tif (document) {\n\t\t\t\tconst nextRoot = document.nodes[document.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : document.raws.codeAfter;\n\t\t\t} else {\n\t\t\t\t// Nested root node in css-in-js lang\n\t\t\t\tconst parent = root.parent;\n\n\t\t\t\tif (!parent) throw new Error('The root node must have a parent');\n\n\t\t\t\tconst nextRoot = parent.nodes[parent.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : root.raws.codeAfter;\n\t\t\t}\n\t\t} else {\n\t\t\tafterEnd = after;\n\t\t}\n\n\t\tif (afterEnd) indents.push(afterEnd.match(/^[ \\t]*/)[0]);\n\t}\n\n\tif (indents.length) {\n\t\treturn Math.max(...indents.map((indent) => getIndentLevel(indent))) + newBaseIndentLevel;\n\t}\n\n\treturn newBaseIndentLevel;\n}\n\n/**\n * @param {string | undefined} str\n * @param {string} whitespace\n */\nfunction fixIndentation(str, whitespace) {\n\tif (!isString(str)) {\n\t\treturn str;\n\t}\n\n\treturn str.replace(/\\n[ \\t]*(?=\\S|$)/g, `\\n${whitespace}`);\n}\n\n/**\n * @param {string} input\n * @param {string} searchString\n * @param {string} replaceString\n * @param {number} startIndex\n */\nfunction replaceIndentation(input, searchString, replaceString, startIndex) {\n\tconst offset = startIndex + 1;\n\tconst stringStart = input.slice(0, offset);\n\tconst stringEnd = input.slice(offset + searchString.length);\n\n\treturn stringStart + replaceString + stringEnd;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst { units } = require('../../reference/units');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'unit-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unknown unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t// and within functions listed in the `ignoreFunctions` option\n\t\t\t\tif (\n\t\t\t\t\tvalueNode.type === 'function' &&\n\t\t\t\t\t(valueNode.value.toLowerCase() === 'url' ||\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueNode.value))\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!number || !unit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (unit.toLowerCase() === 'x') {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisAtRule(node) &&\n\t\t\t\t\t\tnode.name === 'media' &&\n\t\t\t\t\t\tnode.params.toLowerCase().includes('resolution')\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet ignoreUnit = false;\n\n\t\t\t\t\t\tmediaParser(node.params).walk((mediaNode, _i, mediaNodes) => {\n\t\t\t\t\t\t\tconst lastMediaNode = mediaNodes[mediaNodes.length - 1];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmediaNode.value.toLowerCase().includes('resolution') &&\n\t\t\t\t\t\t\t\tlastMediaNode &&\n\t\t\t\t\t\t\t\tlastMediaNode.sourceIndex === valueNode.sourceIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tignoreUnit = true;\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (ignoreUnit) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\t\tif (node.prop.toLowerCase() === 'image-resolution') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n\t\t\t\t\t\t\tconst imageSet = parsedValue.nodes.find(\n\t\t\t\t\t\t\t\t(n) => vendor.unprefixed(n.value) === 'image-set',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tassert(imageSet);\n\t\t\t\t\t\t\tassert('nodes' in imageSet);\n\t\t\t\t\t\t\tconst imageSetLastNode = imageSet.nodes[imageSet.nodes.length - 1];\n\n\t\t\t\t\t\t\tassert(imageSetLastNode);\n\t\t\t\t\t\t\tconst imageSetValueLastIndex = imageSetLastNode.sourceIndex;\n\n\t\t\t\t\t\t\tif (imageSetValueLastIndex >= valueNode.sourceIndex) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(decl, decl.value, declarationValueIndex);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tlet beforeValue = value.slice(0, valueIndex);\n\t\t\t\t\tconst afterValue = value.slice(valueIndex);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'function') {\n\t\t\t\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t\tif (valueLowerCase === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!unit || !number || (unit && primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t'prop' in node &&\n\t\t\t\t\tsecondaryOptions &&\n\t\t\t\t\toptionsMatches(secondaryOptions.ignoreProperties, unit.toLowerCase(), node.prop)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => check(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeName = attributeNode.qualifiedAttribute;\n\n\t\t\t\t\tif (!matchesStringOrRegExp(attributeName, primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('attribute');\n\t\t\t\t\tconst endIndex = index + attributeName.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(attributeName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorParser = require('postcss-selector-parser');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-universal';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} universal ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-universal',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAfterCombinators: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\t// All logical combinations will be resolved as nested selector in `postcss-resolve-nested-selector`\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tconst prevChildNode = childNode.prev();\n\t\t\t\tconst prevChildNodeValue = prevChildNode && prevChildNode.value;\n\n\t\t\t\tif (childNode.type === 'universal') {\n\t\t\t\t\tif (!optionsMatches(secondaryOptions, 'ignoreAfterCombinators', prevChildNodeValue)) {\n\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectors = [];\n\n\t\t\tselectorParser()\n\t\t\t\t.astSync(ruleNode.selector)\n\t\t\t\t.walk((node) => {\n\t\t\t\t\tif (node.type === 'selector') {\n\t\t\t\t\t\tselectors.push(String(node).trim());\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tfor (const selector of selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').rules} */\nconst rules = {\n\t'alpha-value-notation': importLazy('./alpha-value-notation'),\n\t'annotation-no-unknown': importLazy('./annotation-no-unknown'),\n\t'at-rule-allowed-list': importLazy('./at-rule-allowed-list'),\n\t'at-rule-disallowed-list': importLazy('./at-rule-disallowed-list'),\n\t'at-rule-empty-line-before': importLazy('./at-rule-empty-line-before'),\n\t'at-rule-name-case': importLazy('./at-rule-name-case'),\n\t'at-rule-name-newline-after': importLazy('./at-rule-name-newline-after'),\n\t'at-rule-semicolon-space-before': importLazy('./at-rule-semicolon-space-before'),\n\t'at-rule-name-space-after': importLazy('./at-rule-name-space-after'),\n\t'at-rule-no-unknown': importLazy('./at-rule-no-unknown'),\n\t'at-rule-no-vendor-prefix': importLazy('./at-rule-no-vendor-prefix'),\n\t'at-rule-property-required-list': importLazy('./at-rule-property-required-list'),\n\t'at-rule-semicolon-newline-after': importLazy('./at-rule-semicolon-newline-after'),\n\t'block-closing-brace-empty-line-before': importLazy('./block-closing-brace-empty-line-before'),\n\t'block-closing-brace-newline-after': importLazy('./block-closing-brace-newline-after'),\n\t'block-closing-brace-newline-before': importLazy('./block-closing-brace-newline-before'),\n\t'block-closing-brace-space-after': importLazy('./block-closing-brace-space-after'),\n\t'block-closing-brace-space-before': importLazy('./block-closing-brace-space-before'),\n\t'block-no-empty': importLazy('./block-no-empty'),\n\t'block-opening-brace-newline-after': importLazy('./block-opening-brace-newline-after'),\n\t'block-opening-brace-newline-before': importLazy('./block-opening-brace-newline-before'),\n\t'block-opening-brace-space-after': importLazy('./block-opening-brace-space-after'),\n\t'block-opening-brace-space-before': importLazy('./block-opening-brace-space-before'),\n\t'color-function-notation': importLazy('./color-function-notation'),\n\t'color-hex-alpha': importLazy('./color-hex-alpha'),\n\t'color-hex-case': importLazy('./color-hex-case'),\n\t'color-hex-length': importLazy('./color-hex-length'),\n\t'color-named': importLazy('./color-named'),\n\t'color-no-hex': importLazy('./color-no-hex'),\n\t'color-no-invalid-hex': importLazy('./color-no-invalid-hex'),\n\t'comment-empty-line-before': importLazy('./comment-empty-line-before'),\n\t'comment-no-empty': importLazy('./comment-no-empty'),\n\t'comment-pattern': importLazy('./comment-pattern'),\n\t'comment-whitespace-inside': importLazy('./comment-whitespace-inside'),\n\t'comment-word-disallowed-list': importLazy('./comment-word-disallowed-list'),\n\t'custom-media-pattern': importLazy('./custom-media-pattern'),\n\t'custom-property-empty-line-before': importLazy('./custom-property-empty-line-before'),\n\t'custom-property-no-missing-var-function': importLazy(\n\t\t'./custom-property-no-missing-var-function',\n\t),\n\t'custom-property-pattern': importLazy('./custom-property-pattern'),\n\t'declaration-bang-space-after': importLazy('./declaration-bang-space-after'),\n\t'declaration-bang-space-before': importLazy('./declaration-bang-space-before'),\n\t'declaration-block-no-duplicate-custom-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-custom-properties',\n\t),\n\t'declaration-block-no-duplicate-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-properties',\n\t),\n\t'declaration-block-no-redundant-longhand-properties': importLazy(\n\t\t'./declaration-block-no-redundant-longhand-properties',\n\t),\n\t'declaration-block-no-shorthand-property-overrides': importLazy(\n\t\t'./declaration-block-no-shorthand-property-overrides',\n\t),\n\t'declaration-block-semicolon-newline-after': importLazy(\n\t\t'./declaration-block-semicolon-newline-after',\n\t),\n\t'declaration-block-semicolon-newline-before': importLazy(\n\t\t'./declaration-block-semicolon-newline-before',\n\t),\n\t'declaration-block-semicolon-space-after': importLazy(\n\t\t'./declaration-block-semicolon-space-after',\n\t),\n\t'declaration-block-semicolon-space-before': importLazy(\n\t\t'./declaration-block-semicolon-space-before',\n\t),\n\t'declaration-block-single-line-max-declarations': importLazy(\n\t\t'./declaration-block-single-line-max-declarations',\n\t),\n\t'declaration-block-trailing-semicolon': importLazy('./declaration-block-trailing-semicolon'),\n\t'declaration-colon-newline-after': importLazy('./declaration-colon-newline-after'),\n\t'declaration-colon-space-after': importLazy('./declaration-colon-space-after'),\n\t'declaration-colon-space-before': importLazy('./declaration-colon-space-before'),\n\t'declaration-empty-line-before': importLazy('./declaration-empty-line-before'),\n\t'declaration-no-important': importLazy('./declaration-no-important'),\n\t'declaration-property-max-values': importLazy('./declaration-property-max-values'),\n\t'declaration-property-unit-allowed-list': importLazy('./declaration-property-unit-allowed-list'),\n\t'declaration-property-unit-disallowed-list': importLazy(\n\t\t'./declaration-property-unit-disallowed-list',\n\t),\n\t'declaration-property-value-allowed-list': importLazy(\n\t\t'./declaration-property-value-allowed-list',\n\t),\n\t'declaration-property-value-disallowed-list': importLazy(\n\t\t'./declaration-property-value-disallowed-list',\n\t),\n\t'font-family-no-missing-generic-family-keyword': importLazy(\n\t\t'./font-family-no-missing-generic-family-keyword',\n\t),\n\t'font-family-name-quotes': importLazy('./font-family-name-quotes'),\n\t'font-family-no-duplicate-names': importLazy('./font-family-no-duplicate-names'),\n\t'font-weight-notation': importLazy('./font-weight-notation'),\n\t'function-allowed-list': importLazy('./function-allowed-list'),\n\t'function-calc-no-unspaced-operator': importLazy('./function-calc-no-unspaced-operator'),\n\t'function-comma-newline-after': importLazy('./function-comma-newline-after'),\n\t'function-comma-newline-before': importLazy('./function-comma-newline-before'),\n\t'function-comma-space-after': importLazy('./function-comma-space-after'),\n\t'function-comma-space-before': importLazy('./function-comma-space-before'),\n\t'function-disallowed-list': importLazy('./function-disallowed-list'),\n\t'function-linear-gradient-no-nonstandard-direction': importLazy(\n\t\t'./function-linear-gradient-no-nonstandard-direction',\n\t),\n\t'function-max-empty-lines': importLazy('./function-max-empty-lines'),\n\t'function-name-case': importLazy('./function-name-case'),\n\t'function-no-unknown': importLazy('./function-no-unknown'),\n\t'function-parentheses-newline-inside': importLazy('./function-parentheses-newline-inside'),\n\t'function-parentheses-space-inside': importLazy('./function-parentheses-space-inside'),\n\t'function-url-no-scheme-relative': importLazy('./function-url-no-scheme-relative'),\n\t'function-url-quotes': importLazy('./function-url-quotes'),\n\t'function-url-scheme-allowed-list': importLazy('./function-url-scheme-allowed-list'),\n\t'function-url-scheme-disallowed-list': importLazy('./function-url-scheme-disallowed-list'),\n\t'function-whitespace-after': importLazy('./function-whitespace-after'),\n\t'hue-degree-notation': importLazy('./hue-degree-notation'),\n\t'import-notation': importLazy('./import-notation'),\n\t'keyframe-block-no-duplicate-selectors': importLazy('./keyframe-block-no-duplicate-selectors'),\n\t'keyframe-declaration-no-important': importLazy('./keyframe-declaration-no-important'),\n\t'keyframe-selector-notation': importLazy('./keyframe-selector-notation'),\n\t'keyframes-name-pattern': importLazy('./keyframes-name-pattern'),\n\t'length-zero-no-unit': importLazy('./length-zero-no-unit'),\n\tlinebreaks: importLazy('./linebreaks'),\n\t'max-empty-lines': importLazy('./max-empty-lines'),\n\t'max-line-length': importLazy('./max-line-length'),\n\t'max-nesting-depth': importLazy('./max-nesting-depth'),\n\t'media-feature-colon-space-after': importLazy('./media-feature-colon-space-after'),\n\t'media-feature-colon-space-before': importLazy('./media-feature-colon-space-before'),\n\t'media-feature-name-allowed-list': importLazy('./media-feature-name-allowed-list'),\n\t'media-feature-name-case': importLazy('./media-feature-name-case'),\n\t'media-feature-name-disallowed-list': importLazy('./media-feature-name-disallowed-list'),\n\t'media-feature-name-no-unknown': importLazy('./media-feature-name-no-unknown'),\n\t'media-feature-name-no-vendor-prefix': importLazy('./media-feature-name-no-vendor-prefix'),\n\t'media-feature-name-value-allowed-list': importLazy('./media-feature-name-value-allowed-list'),\n\t'media-feature-parentheses-space-inside': importLazy('./media-feature-parentheses-space-inside'),\n\t'media-feature-range-operator-space-after': importLazy(\n\t\t'./media-feature-range-operator-space-after',\n\t),\n\t'media-feature-range-operator-space-before': importLazy(\n\t\t'./media-feature-range-operator-space-before',\n\t),\n\t'media-query-list-comma-newline-after': importLazy('./media-query-list-comma-newline-after'),\n\t'media-query-list-comma-newline-before': importLazy('./media-query-list-comma-newline-before'),\n\t'media-query-list-comma-space-after': importLazy('./media-query-list-comma-space-after'),\n\t'media-query-list-comma-space-before': importLazy('./media-query-list-comma-space-before'),\n\t'named-grid-areas-no-invalid': importLazy('./named-grid-areas-no-invalid'),\n\t'no-descending-specificity': importLazy('./no-descending-specificity'),\n\t'no-duplicate-at-import-rules': importLazy('./no-duplicate-at-import-rules'),\n\t'no-duplicate-selectors': importLazy('./no-duplicate-selectors'),\n\t'no-empty-source': importLazy('./no-empty-source'),\n\t'no-empty-first-line': importLazy('./no-empty-first-line'),\n\t'no-eol-whitespace': importLazy('./no-eol-whitespace'),\n\t'no-extra-semicolons': importLazy('./no-extra-semicolons'),\n\t'no-invalid-double-slash-comments': importLazy('./no-invalid-double-slash-comments'),\n\t'no-invalid-position-at-import-rule': importLazy('./no-invalid-position-at-import-rule'),\n\t'no-irregular-whitespace': importLazy('./no-irregular-whitespace'),\n\t'no-missing-end-of-source-newline': importLazy('./no-missing-end-of-source-newline'),\n\t'no-unknown-animations': importLazy('./no-unknown-animations'),\n\t'number-leading-zero': importLazy('./number-leading-zero'),\n\t'number-max-precision': importLazy('./number-max-precision'),\n\t'number-no-trailing-zeros': importLazy('./number-no-trailing-zeros'),\n\t'property-allowed-list': importLazy('./property-allowed-list'),\n\t'property-case': importLazy('./property-case'),\n\t'property-disallowed-list': importLazy('./property-disallowed-list'),\n\t'property-no-unknown': importLazy('./property-no-unknown'),\n\t'property-no-vendor-prefix': importLazy('./property-no-vendor-prefix'),\n\t'rule-empty-line-before': importLazy('./rule-empty-line-before'),\n\t'rule-selector-property-disallowed-list': importLazy('./rule-selector-property-disallowed-list'),\n\t'selector-attribute-brackets-space-inside': importLazy(\n\t\t'./selector-attribute-brackets-space-inside',\n\t),\n\t'selector-attribute-name-disallowed-list': importLazy(\n\t\t'./selector-attribute-name-disallowed-list',\n\t),\n\t'selector-attribute-operator-allowed-list': importLazy(\n\t\t'./selector-attribute-operator-allowed-list',\n\t),\n\t'selector-attribute-operator-disallowed-list': importLazy(\n\t\t'./selector-attribute-operator-disallowed-list',\n\t),\n\t'selector-attribute-operator-space-after': importLazy(\n\t\t'./selector-attribute-operator-space-after',\n\t),\n\t'selector-attribute-operator-space-before': importLazy(\n\t\t'./selector-attribute-operator-space-before',\n\t),\n\t'selector-attribute-quotes': importLazy('./selector-attribute-quotes'),\n\t'selector-class-pattern': importLazy('./selector-class-pattern'),\n\t'selector-combinator-allowed-list': importLazy('./selector-combinator-allowed-list'),\n\t'selector-combinator-disallowed-list': importLazy('./selector-combinator-disallowed-list'),\n\t'selector-combinator-space-after': importLazy('./selector-combinator-space-after'),\n\t'selector-combinator-space-before': importLazy('./selector-combinator-space-before'),\n\t'selector-descendant-combinator-no-non-space': importLazy(\n\t\t'./selector-descendant-combinator-no-non-space',\n\t),\n\t'selector-disallowed-list': importLazy('./selector-disallowed-list'),\n\t'selector-id-pattern': importLazy('./selector-id-pattern'),\n\t'selector-list-comma-newline-after': importLazy('./selector-list-comma-newline-after'),\n\t'selector-list-comma-newline-before': importLazy('./selector-list-comma-newline-before'),\n\t'selector-list-comma-space-after': importLazy('./selector-list-comma-space-after'),\n\t'selector-list-comma-space-before': importLazy('./selector-list-comma-space-before'),\n\t'selector-max-attribute': importLazy('./selector-max-attribute'),\n\t'selector-max-class': importLazy('./selector-max-class'),\n\t'selector-max-combinators': importLazy('./selector-max-combinators'),\n\t'selector-max-compound-selectors': importLazy('./selector-max-compound-selectors'),\n\t'selector-max-empty-lines': importLazy('./selector-max-empty-lines'),\n\t'selector-max-id': importLazy('./selector-max-id'),\n\t'selector-max-pseudo-class': importLazy('./selector-max-pseudo-class'),\n\t'selector-max-specificity': importLazy('./selector-max-specificity'),\n\t'selector-max-type': importLazy('./selector-max-type'),\n\t'selector-max-universal': importLazy('./selector-max-universal'),\n\t'selector-nested-pattern': importLazy('./selector-nested-pattern'),\n\t'selector-no-qualifying-type': importLazy('./selector-no-qualifying-type'),\n\t'selector-no-vendor-prefix': importLazy('./selector-no-vendor-prefix'),\n\t'selector-not-notation': importLazy('./selector-not-notation'),\n\t'selector-pseudo-class-allowed-list': importLazy('./selector-pseudo-class-allowed-list'),\n\t'selector-pseudo-class-case': importLazy('./selector-pseudo-class-case'),\n\t'selector-pseudo-class-disallowed-list': importLazy('./selector-pseudo-class-disallowed-list'),\n\t'selector-pseudo-class-no-unknown': importLazy('./selector-pseudo-class-no-unknown'),\n\t'selector-pseudo-class-parentheses-space-inside': importLazy(\n\t\t'./selector-pseudo-class-parentheses-space-inside',\n\t),\n\t'selector-pseudo-element-allowed-list': importLazy('./selector-pseudo-element-allowed-list'),\n\t'selector-pseudo-element-case': importLazy('./selector-pseudo-element-case'),\n\t'selector-pseudo-element-colon-notation': importLazy('./selector-pseudo-element-colon-notation'),\n\t'selector-pseudo-element-disallowed-list': importLazy(\n\t\t'./selector-pseudo-element-disallowed-list',\n\t),\n\t'selector-pseudo-element-no-unknown': importLazy('./selector-pseudo-element-no-unknown'),\n\t'selector-type-case': importLazy('./selector-type-case'),\n\t'selector-type-no-unknown': importLazy('./selector-type-no-unknown'),\n\t'shorthand-property-no-redundant-values': importLazy('./shorthand-property-no-redundant-values'),\n\t'string-no-newline': importLazy('./string-no-newline'),\n\t'string-quotes': importLazy('./string-quotes'),\n\t'time-min-milliseconds': importLazy('./time-min-milliseconds'),\n\t'unicode-bom': importLazy('./unicode-bom'),\n\t'unit-allowed-list': importLazy('./unit-allowed-list'),\n\t'unit-case': importLazy('./unit-case'),\n\t'unit-disallowed-list': importLazy('./unit-disallowed-list'),\n\t'unit-no-unknown': importLazy('./unit-no-unknown'),\n\t'value-keyword-case': importLazy('./value-keyword-case'),\n\t'value-list-comma-newline-after': importLazy('./value-list-comma-newline-after'),\n\t'value-list-comma-newline-before': importLazy('./value-list-comma-newline-before'),\n\t'value-list-comma-space-after': importLazy('./value-list-comma-space-after'),\n\t'value-list-comma-space-before': importLazy('./value-list-comma-space-before'),\n\t'value-list-max-empty-lines': importLazy('./value-list-max-empty-lines'),\n\t'value-no-vendor-prefix': importLazy('./value-no-vendor-prefix'),\n\tindentation: importLazy('./indentation'),\n};\n\nmodule.exports = rules;\n","'use strict';\n\nconst rules = require('./rules');\nconst { isPlainObject } = require('./utils/validateTypes');\n\n// Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @template T\n * @template {Object} O\n * @param {import('stylelint').ConfigRuleSettings<T, O>} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the rules themselves, which will not work for plugins\n * @return {[T] | [T, O] | null}\n */\nmodule.exports = function normalizeRuleSettings(\n\trawSettings,\n\truleName,\n\t// If primaryOptionArray is not provided, we try to get it from the\n\t// rules themselves, which will not work for plugins\n\tprimaryOptionArray,\n) {\n\tif (rawSettings === null || rawSettings === undefined) {\n\t\treturn null;\n\t}\n\n\tif (!Array.isArray(rawSettings)) {\n\t\treturn [rawSettings];\n\t}\n\t// Everything below is an array ...\n\n\tif (rawSettings.length > 0 && (rawSettings[0] === null || rawSettings[0] === undefined)) {\n\t\treturn null;\n\t}\n\n\tif (primaryOptionArray === undefined) {\n\t\tconst rule = rules[ruleName];\n\n\t\tif (rule && 'primaryOptionArray' in rule) {\n\t\t\tprimaryOptionArray = rule.primaryOptionArray;\n\t\t}\n\t}\n\n\tif (!primaryOptionArray) {\n\t\treturn rawSettings;\n\t}\n\t// Everything below is a rule that CAN have an array for a primary option ...\n\t// (they might also have something else, e.g. rule-properties-order can\n\t// have the string \"alphabetical\")\n\n\tif (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n\t\treturn rawSettings;\n\t}\n\n\tif (rawSettings.length === 2 && !isPlainObject(rawSettings[0]) && isPlainObject(rawSettings[1])) {\n\t\treturn rawSettings;\n\t}\n\n\t// `T` must be an array type, but TSC thinks it's probably invalid to\n\t// cast `[T]` to `T` so we cast through `any` first.\n\treturn [/** @type {T} */ (/** @type {any} */ (rawSettings))];\n};\n","'use strict';\n\n/**\n * @type {typeof import('stylelint').createPlugin}\n */\nmodule.exports = function createPlugin(ruleName, rule) {\n\treturn {\n\t\truleName,\n\t\trule,\n\t};\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst globalModules = require('global-modules');\nconst resolveFrom = require('resolve-from');\n\n/**\n * @param {string} basedir\n * @param {string} lookup\n * @param {string} [cwd]\n * @return {string}\n */\nmodule.exports = function getModulePath(basedir, lookup, cwd = process.cwd()) {\n\t// 1. Try to resolve from the provided directory\n\t// 2. Try to resolve from `cwd` or `process.cwd()`\n\t// 3. Try to resolve from global `node_modules` directory\n\tlet path = resolveFrom.silent(basedir, lookup);\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(cwd, lookup);\n\t}\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(globalModules, lookup);\n\t}\n\n\tif (!path) {\n\t\tthrow configurationError(`Could not find \"${lookup}\". Do you need a \\`configBasedir\\`?`);\n\t}\n\n\treturn path;\n};\n","'use strict';\n\nvar Path = require('path');\nvar slice = Array.prototype.slice;\n\nfunction join(/* globs */) {\n\tvar args;\n\n\targs = slice.call(arguments, 0);\n\treturn args.reduce(function (result, globs) {\n\t\treturn _apply(result, function (path) {\n\t\t\treturn _apply(globs, function (glob) {\n\t\t\t\treturn _join(path, glob);\n\t\t\t});\n\t\t});\n\t}, '');\n}\n\nfunction _apply(values, fn) {\n\tif (Array.isArray(values)) {\n\t\treturn values.reduce(function (result, value) {\n\t\t\treturn result.concat(fn(value));\n\t\t}, []);\n\t}\n\treturn fn(values);\n}\n\nfunction _join(path, glob) {\n\tvar negative, positive;\n\n\tif (glob[0] === '!') {\n\t\tpositive = glob.substr(1);\n\t\tif (path[0] === '!') {\n\t\t\tnegative = '';\n\t\t} else {\n\t\t\tnegative = '!';\n\t\t}\n\t\treturn negative + Path.join(path, positive);\n\t}\n\treturn Path.join(path, glob);\n}\n\nmodule.exports = join;\n","'use strict';\n\nconst normalizeRuleSettings = require('./normalizeRuleSettings');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction normalizeAllRuleSettings(config) {\n\tif (!config.rules) return config;\n\n\t/** @type {StylelintConfigRules} */\n\tconst normalizedRules = {};\n\n\tfor (const [ruleName, rawRuleSettings] of Object.entries(config.rules)) {\n\t\tconst rule = rules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (rule) {\n\t\t\tnormalizedRules[ruleName] = normalizeRuleSettings(\n\t\t\t\trawRuleSettings,\n\t\t\t\truleName,\n\t\t\t\trule.primaryOptionArray,\n\t\t\t);\n\t\t} else {\n\t\t\tnormalizedRules[ruleName] = [];\n\t\t}\n\t}\n\n\tconfig.rules = normalizedRules;\n\n\treturn config;\n}\n\nmodule.exports = normalizeAllRuleSettings;\n","'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst micromatch = require('micromatch');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\nasync function augmentConfigBasic(\n\tstylelint,\n\tconfig,\n\tconfigDir,\n\tallowOverrides,\n\trootConfigDir,\n\tfilePath,\n) {\n\tlet augmentedConfig = config;\n\n\tif (allowOverrides) {\n\t\taugmentedConfig = addOptions(stylelint, augmentedConfig);\n\t}\n\n\tif (filePath) {\n\t\taugmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n\t}\n\n\taugmentedConfig = await extendConfig(\n\t\tstylelint,\n\t\taugmentedConfig,\n\t\tconfigDir,\n\t\trootConfigDir,\n\t\tfilePath,\n\t);\n\n\tconst cwd = stylelint._options.cwd;\n\n\treturn absolutizePaths(augmentedConfig, configDir, cwd);\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\nfunction augmentConfigExtended(cwd) {\n\treturn async (cosmiconfigResult) => {\n\t\tif (!cosmiconfigResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\t\tconst { config } = cosmiconfigResult;\n\n\t\tconst augmentedConfig = absolutizePaths(config, configDir, cwd);\n\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t};\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n\tif (!cosmiconfigResult) {\n\t\treturn null;\n\t}\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\tlet augmentedConfig = await augmentConfigBasic(\n\t\tstylelint,\n\t\tconfig,\n\t\tconfigDir,\n\t\ttrue,\n\t\tconfigDir,\n\t\tfilePath,\n\t);\n\n\taugmentedConfig = addPluginFunctions(augmentedConfig);\n\taugmentedConfig = addProcessorFunctions(augmentedConfig);\n\n\tif (!augmentedConfig.rules) {\n\t\tthrow configurationError(\n\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t);\n\t}\n\n\taugmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n\n\treturn {\n\t\tconfig: augmentedConfig,\n\t\tfilepath: cosmiconfigResult.filepath,\n\t};\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir, cwd) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = [config.ignoreFiles].flat().map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = [config.plugins].flat().map((lookup) => getModulePath(configDir, lookup, cwd));\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n\tif (config.extends === undefined) {\n\t\treturn config;\n\t}\n\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\tconst normalizedExtends = [configExtends].flat();\n\n\tlet resultConfig = originalWithoutExtends;\n\n\tfor (const extendLookup of normalizedExtends) {\n\t\tconst extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n\t\tif (extendResult) {\n\t\t\tlet extendResultConfig = extendResult.config;\n\t\t\tconst extendConfigDir = path.dirname(extendResult.filepath || '');\n\n\t\t\textendResultConfig = await augmentConfigBasic(\n\t\t\t\tstylelint,\n\t\t\t\textendResultConfig,\n\t\t\t\textendConfigDir,\n\t\t\t\tfalse,\n\t\t\t\trootConfigDir,\n\t\t\t\tfilePath,\n\t\t\t);\n\n\t\t\tresultConfig = mergeConfigs(resultConfig, extendResultConfig);\n\t\t}\n\t}\n\n\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\t/** @type {{overrides: StylelintConfigOverride[]}} */\n\tconst overridesMerger = {};\n\n\tif (a.overrides || b.overrides) {\n\t\toverridesMerger.overrides = [];\n\n\t\tif (a.overrides) {\n\t\t\toverridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n\t\t}\n\n\t\tif (b.overrides) {\n\t\t\toverridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = {\n\t\t...a,\n\t\t...b,\n\t\t...processorMerger,\n\t\t...pluginMerger,\n\t\t...overridesMerger,\n\t\t...rulesMerger,\n\t};\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) {\n\t\treturn config;\n\t}\n\n\tconst normalizedPlugins = [config.plugins].flat();\n\n\t/** @type {StylelintConfig['pluginFunctions']} */\n\tconst pluginFunctions = {};\n\n\tfor (const pluginLookup of normalizedPlugins) {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = [pluginImport].flat();\n\n\t\tfor (const pluginRuleDefinition of normalizedPluginImport) {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t}\n\t}\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {StylelintCodeProcessor[]} */\n\tconst codeProcessors = [];\n\t/** @type {StylelintResultProcessor[]} */\n\tconst resultProcessors = [];\n\n\tfor (const processorConfig of [config.processors].flat()) {\n\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\tlet initializedProcessor;\n\n\t\tif (processorCache.has(processorKey)) {\n\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t} else {\n\t\t\tconst processorLookup =\n\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\tconst processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\tlet processor = require(processorLookup);\n\n\t\t\tprocessor = processor.default || processor;\n\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t}\n\t}\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n\tlet { overrides, ...config } = fullConfig;\n\n\tif (!overrides) {\n\t\treturn config;\n\t}\n\n\tif (!Array.isArray(overrides)) {\n\t\tthrow new TypeError(\n\t\t\t'The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t);\n\t}\n\n\tfor (const override of overrides) {\n\t\tconst { files, ...configOverrides } = override;\n\n\t\tif (!files) {\n\t\t\tthrow new Error(\n\t\t\t\t'Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t\t);\n\t\t}\n\n\t\tconst filesGlobs = [files]\n\t\t\t.flat()\n\t\t\t.map((glob) => {\n\t\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) {\n\t\t\t\t\treturn glob;\n\t\t\t\t}\n\n\t\t\t\treturn globjoin(rootConfigDir, glob);\n\t\t\t})\n\t\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\t\t.map((s) => normalizePath(s));\n\n\t\tif (micromatch.isMatch(filePath, filesGlobs, { dot: true })) {\n\t\t\tconfig = mergeConfigs(config, configOverrides);\n\t\t}\n\t}\n\n\treturn config;\n}\n\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\nfunction addOptions(stylelint, config) {\n\tconst augmentedConfig = {\n\t\t...config,\n\t};\n\n\tif (stylelint._options.ignoreDisables) {\n\t\taugmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n\t}\n\n\tif (stylelint._options.quiet) {\n\t\taugmentedConfig.quiet = stylelint._options.quiet;\n\t}\n\n\tif (stylelint._options.reportNeedlessDisables) {\n\t\taugmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n\t}\n\n\tif (stylelint._options.reportInvalidScopeDisables) {\n\t\taugmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n\t}\n\n\tif (stylelint._options.reportDescriptionlessDisables) {\n\t\taugmentedConfig.reportDescriptionlessDisables =\n\t\t\tstylelint._options.reportDescriptionlessDisables;\n\t}\n\n\tif (stylelint._options.customSyntax) {\n\t\taugmentedConfig.customSyntax = stylelint._options.customSyntax;\n\t}\n\n\treturn augmentedConfig;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull, applyOverrides };\n","'use strict';\n\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst augmentConfig = require('./augmentConfig');\nconst FileCache = require('./utils/FileCache');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @type {import('stylelint')['createLinter']}\n */\nmodule.exports = function createStylelint(options = {}) {\n\tconst cwd = options.cwd || process.cwd();\n\n\treturn {\n\t\t_options: { ...options, cwd },\n\n\t\t_extendExplorer: cosmiconfig('', {\n\t\t\ttransform: augmentConfig.augmentConfigExtended(cwd),\n\t\t\tstopDir: STOP_DIR,\n\t\t}),\n\n\t\t_specifiedConfigCache: new Map(),\n\t\t_postcssResultCache: new Map(),\n\t\t_fileCache: new FileCache(options.cacheLocation, options.cacheStrategy, cwd),\n\t};\n};\n","'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n","/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n\tif (Number.isNaN(codePoint)) {\n\t\treturn false;\n\t}\n\n\t// Code points are derived from:\n\t// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\tif (\n\t\tcodePoint >= 0x1100 && (\n\t\t\tcodePoint <= 0x115F || // Hangul Jamo\n\t\t\tcodePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n\t\t\tcodePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n\t\t\t// CJK Radicals Supplement .. Enclosed CJK Letters and Months\n\t\t\t(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||\n\t\t\t// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n\t\t\t(0x3250 <= codePoint && codePoint <= 0x4DBF) ||\n\t\t\t// CJK Unified Ideographs .. Yi Radicals\n\t\t\t(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||\n\t\t\t// Hangul Jamo Extended-A\n\t\t\t(0xA960 <= codePoint && codePoint <= 0xA97C) ||\n\t\t\t// Hangul Syllables\n\t\t\t(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||\n\t\t\t// CJK Compatibility Ideographs\n\t\t\t(0xF900 <= codePoint && codePoint <= 0xFAFF) ||\n\t\t\t// Vertical Forms\n\t\t\t(0xFE10 <= codePoint && codePoint <= 0xFE19) ||\n\t\t\t// CJK Compatibility Forms .. Small Form Variants\n\t\t\t(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||\n\t\t\t// Halfwidth and Fullwidth Forms\n\t\t\t(0xFF01 <= codePoint && codePoint <= 0xFF60) ||\n\t\t\t(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||\n\t\t\t// Kana Supplement\n\t\t\t(0x1B000 <= codePoint && codePoint <= 0x1B001) ||\n\t\t\t// Enclosed Ideographic Supplement\n\t\t\t(0x1F200 <= codePoint && codePoint <= 0x1F251) ||\n\t\t\t// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n\t\t\t(0x20000 <= codePoint && codePoint <= 0x3FFFD)\n\t\t)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n","'use strict';\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\n\nconst stringWidth = string => {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tlet width = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst code = string.codePointAt(i);\n\n\t\t// Ignore control characters\n\t\tif (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (code >= 0x300 && code <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Surrogates\n\t\tif (code > 0xFFFF) {\n\t\t\ti++;\n\t\t}\n\n\t\twidth += isFullwidthCodePoint(code) ? 2 : 1;\n\t}\n\n\treturn width;\n};\n\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n","\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n","'use strict';\n\n/**\n * Returns the plural form of the given word.\n *\n * @param {string} singular\n * @param {number} count\n * @returns {string}\n */\nmodule.exports = function pluralize(singular, count) {\n\treturn count === 1 ? singular : `${singular}s`;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","export const EOL = \"\\n\";\nexport const release = () => \"\";\n","'use strict';\nconst supportsColor = require('supports-color');\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n\tif (/^\\d{3,4}$/.test(versionString)) {\n\t\t// Env var doesn't always use dots. example: 4601 => 46.1.0\n\t\tconst m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n\t\treturn {\n\t\t\tmajor: 0,\n\t\t\tminor: parseInt(m[1], 10),\n\t\t\tpatch: parseInt(m[2], 10)\n\t\t};\n\t}\n\n\tconst versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n\treturn {\n\t\tmajor: versions[0],\n\t\tminor: versions[1],\n\t\tpatch: versions[2]\n\t};\n}\n\nfunction supportsHyperlink(stream) {\n\tconst {env} = process;\n\n\tif ('FORCE_HYPERLINK' in env) {\n\t\treturn !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n\t}\n\n\tif (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n\t\treturn true;\n\t}\n\n\t// Netlify does not run a TTY, it does not need `supportsColor` check\n\tif ('NETLIFY' in env) {\n\t\treturn true;\n\t}\n\n\t// If they specify no colors, they probably don't want hyperlinks.\n\tif (!supportsColor.supportsColor(stream)) {\n\t\treturn false;\n\t}\n\n\tif (stream && !stream.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn false;\n\t}\n\n\tif ('CI' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\tif (version.major === 3) {\n\t\t\t\t\treturn version.minor >= 1;\n\t\t\t\t}\n\n\t\t\t\treturn version.major > 3;\n\t\t\tcase 'WezTerm':\n\t\t\t\treturn version.major >= 20200620;\n\t\t\tcase 'vscode':\n\t\t\t\treturn version.major > 1 || version.major === 1 && version.minor >= 72;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif ('VTE_VERSION' in env) {\n\t\t// 0.50.0 was supposed to support hyperlinks, but throws a segfault\n\t\tif (env.VTE_VERSION === '0.50.0') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst version = parseVersion(env.VTE_VERSION);\n\t\treturn version.major > 0 || version.minor >= 50;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tsupportsHyperlink,\n\tstdout: supportsHyperlink(process.stdout),\n\tstderr: supportsHyperlink(process.stderr)\n};\n","export const isatty = () => false;\n","const supportsHyperlinks = require('supports-hyperlinks');\n\n// ANSI escapes\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\n\n/**\n * @see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n *\n * @param {string} text\n * @param {string} url\n * @returns {string}\n */\nmodule.exports = function terminalLink(text, url) {\n\tif (supportsHyperlinks.stdout) {\n\t\treturn [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n\t}\n\n\treturn text;\n};\n","'use strict';\n\nconst path = require('path');\nconst stringWidth = require('string-width');\nconst table = require('table');\nconst { yellow, dim, underline, blue, red, green } = require('picocolors');\n\nconst pluralize = require('../utils/pluralize');\nconst { assertNumber } = require('../utils/validateTypes');\nconst terminalLink = require('./terminalLink');\n\nconst MARGIN_WIDTHS = 9;\n\n/**\n * @param {string} s\n * @returns {string}\n */\nfunction nope(s) {\n\treturn s;\n}\n\nconst levelColors = {\n\tinfo: blue,\n\twarning: yellow,\n\terror: red,\n\tsuccess: nope,\n};\n\nconst symbols = {\n\tinfo: blue('ℹ'),\n\twarning: yellow('⚠'),\n\terror: red('✖'),\n\tsuccess: green('✔'),\n};\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @returns {string}\n */\nfunction deprecationsFormatter(results) {\n\tconst allDeprecationWarnings = results.flatMap((result) => result.deprecations);\n\n\tif (allDeprecationWarnings.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst seenText = new Set();\n\n\treturn allDeprecationWarnings.reduce((output, warning) => {\n\t\tif (seenText.has(warning.text)) return output;\n\n\t\tseenText.add(warning.text);\n\n\t\toutput += yellow('Deprecation Warning: ');\n\t\toutput += warning.text;\n\n\t\tif (warning.reference) {\n\t\t\toutput += dim(' See: ');\n\t\t\toutput += dim(underline(warning.reference));\n\t\t}\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @return {string}\n */\nfunction invalidOptionsFormatter(results) {\n\tconst allInvalidOptionWarnings = results.flatMap((result) =>\n\t\tresult.invalidOptionWarnings.map((warning) => warning.text),\n\t);\n\tconst uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n\n\treturn uniqueInvalidOptionWarnings.reduce((output, warning) => {\n\t\toutput += red('Invalid Option: ');\n\t\toutput += warning;\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {string} fromValue\n * @param {string} cwd\n * @return {string}\n */\nfunction logFrom(fromValue, cwd) {\n\tif (fromValue.startsWith('<')) {\n\t\treturn underline(fromValue);\n\t}\n\n\tconst filePath = path.relative(cwd, fromValue).split(path.sep).join('/');\n\n\treturn terminalLink(filePath, `file://${fromValue}`);\n}\n\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\nfunction getMessageWidth(columnWidths) {\n\tconst width = columnWidths[3];\n\n\tassertNumber(width);\n\n\tif (!process.stdout.isTTY) {\n\t\treturn width;\n\t}\n\n\tconst availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n\tconst fullWidth = Object.values(columnWidths).reduce((a, b) => a + b);\n\n\t// If there is no reason to wrap the text, we won't align the last column to the right\n\tif (availableWidth > fullWidth + MARGIN_WIDTHS) {\n\t\treturn width;\n\t}\n\n\treturn availableWidth - (fullWidth - width + MARGIN_WIDTHS);\n}\n\n/**\n * @param {import('stylelint').Warning[]} messages\n * @param {string} source\n * @param {string} cwd\n * @return {string}\n */\nfunction formatter(messages, source, cwd) {\n\tif (!messages.length) return '';\n\n\tconst orderedMessages = [...messages].sort((a, b) => {\n\t\t// positionless first\n\t\tif (!a.line && b.line) return -1;\n\n\t\t// positionless first\n\t\tif (a.line && !b.line) return 1;\n\n\t\tif (a.line < b.line) return -1;\n\n\t\tif (a.line > b.line) return 1;\n\n\t\tif (a.column < b.column) return -1;\n\n\t\tif (a.column > b.column) return 1;\n\n\t\treturn 0;\n\t});\n\n\t/**\n\t * Create a list of column widths, needed to calculate\n\t * the size of the message column and if needed wrap it.\n\t * @type {{[k: string]: number}}\n\t */\n\tconst columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 };\n\n\t/**\n\t * @param {[string, string, string, string, string]} columns\n\t * @return {[string, string, string, string, string]}\n\t */\n\tfunction calculateWidths(columns) {\n\t\tfor (const [key, value] of Object.entries(columns)) {\n\t\t\tconst normalisedValue = value ? value.toString() : value;\n\t\t\tconst width = columnWidths[key];\n\n\t\t\tassertNumber(width);\n\t\t\tcolumnWidths[key] = Math.max(width, stringWidth(normalisedValue));\n\t\t}\n\n\t\treturn columns;\n\t}\n\n\tlet output = '\\n';\n\n\tif (source) {\n\t\toutput += `${logFrom(source, cwd)}\\n`;\n\t}\n\n\t/**\n\t * @param {import('stylelint').Warning} message\n\t * @return {string}\n\t */\n\tfunction formatMessageText(message) {\n\t\tlet result = message.text;\n\n\t\tresult = result\n\t\t\t// Remove all control characters (newline, tab and etc)\n\t\t\t.replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n\t\t\t.replace(/\\.$/, '');\n\n\t\tconst ruleString = ` (${message.rule})`;\n\n\t\tif (result.endsWith(ruleString)) {\n\t\t\tresult = result.slice(0, result.lastIndexOf(ruleString));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tconst cleanedMessages = orderedMessages.map((message) => {\n\t\tconst { line, column, severity } = message;\n\t\t/**\n\t\t * @type {[string, string, string, string, string]}\n\t\t */\n\t\tconst row = [\n\t\t\tline ? line.toString() : '',\n\t\t\tcolumn ? column.toString() : '',\n\t\t\tsymbols[severity] ? levelColors[severity](symbols[severity]) : severity,\n\t\t\tformatMessageText(message),\n\t\t\tdim(message.rule || ''),\n\t\t];\n\n\t\tcalculateWidths(row);\n\n\t\treturn row;\n\t});\n\n\toutput += table\n\t\t.table(cleanedMessages, {\n\t\t\tborder: table.getBorderCharacters('void'),\n\t\t\tcolumns: {\n\t\t\t\t0: { alignment: 'right', width: columnWidths[0], paddingRight: 0 },\n\t\t\t\t1: { alignment: 'left', width: columnWidths[1] },\n\t\t\t\t2: { alignment: 'center', width: columnWidths[2] },\n\t\t\t\t3: {\n\t\t\t\t\talignment: 'left',\n\t\t\t\t\twidth: getMessageWidth(columnWidths),\n\t\t\t\t\twrapWord: getMessageWidth(columnWidths) > 1,\n\t\t\t\t},\n\t\t\t\t4: { alignment: 'left', width: columnWidths[4], paddingRight: 0 },\n\t\t\t},\n\t\t\tdrawHorizontalLine: () => false,\n\t\t})\n\t\t.split('\\n')\n\t\t.map(\n\t\t\t/**\n\t\t\t * @param {string} el\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\t(el) => el.replace(/(\\d+)\\s+(\\d+)/, (_m, p1, p2) => dim(`${p1}:${p2}`)),\n\t\t)\n\t\t.join('\\n');\n\n\treturn output;\n}\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function stringFormatter(results, returnValue) {\n\tlet output = invalidOptionsFormatter(results);\n\n\toutput += deprecationsFormatter(results);\n\n\tlet errorCount = 0;\n\tlet warningCount = 0;\n\n\toutput = results.reduce((accum, result) => {\n\t\t// Treat parseErrors as warnings\n\t\tif (result.parseErrors) {\n\t\t\tfor (const error of result.parseErrors) {\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\tline: error.line,\n\t\t\t\t\tcolumn: error.column,\n\t\t\t\t\trule: error.stylelintType,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${error.text} (${error.stylelintType})`,\n\t\t\t\t});\n\t\t\t\terrorCount += 1;\n\t\t\t}\n\t\t}\n\n\t\taccum += formatter(\n\t\t\tresult.warnings,\n\t\t\tresult.source || '',\n\t\t\t(returnValue && returnValue.cwd) || process.cwd(),\n\t\t);\n\n\t\tfor (const warning of result.warnings) {\n\t\t\tswitch (warning.severity) {\n\t\t\t\tcase 'error':\n\t\t\t\t\terrorCount += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\twarningCount += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unknown severity: \"${warning.severity}\"`);\n\t\t\t}\n\t\t}\n\n\t\treturn accum;\n\t}, output);\n\n\t// Ensure consistent padding\n\toutput = output.trim();\n\n\tif (output !== '') {\n\t\toutput = `\\n${output}\\n\\n`;\n\n\t\tconst total = errorCount + warningCount;\n\n\t\tif (total > 0) {\n\t\t\tconst tally =\n\t\t\t\t`${total} ${pluralize('problem', total)}` +\n\t\t\t\t` (${errorCount} ${pluralize('error', errorCount)}` +\n\t\t\t\t`, ${warningCount} ${pluralize('warning', warningCount)})`;\n\n\t\t\toutput += `${tally}\\n\\n`;\n\t\t}\n\t}\n\n\treturn output;\n};\n","'use strict';\n\nconst { underline, red, yellow, dim, green } = require('picocolors');\n\nconst pluralize = require('../utils/pluralize');\nconst stringFormatter = require('./stringFormatter');\nconst terminalLink = require('./terminalLink');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} LintResult */\n/** @typedef {import('stylelint').Warning} Warning */\n/** @typedef {import('stylelint').Severity} Severity */\n/** @typedef {import('stylelint').RuleMeta} RuleMeta */\n\n/**\n * @type {Formatter}\n */\nmodule.exports = function verboseFormatter(results, returnValue) {\n\tlet output = stringFormatter(results, returnValue);\n\n\tif (output === '') {\n\t\toutput = '\\n';\n\t}\n\n\tconst ignoredCount = results.filter((result) => result.ignored).length;\n\tconst checkedDisplay = ignoredCount\n\t\t? `${results.length - ignoredCount} of ${results.length}`\n\t\t: results.length;\n\n\toutput += underline(`${checkedDisplay} ${pluralize('source', results.length)} checked\\n`);\n\n\tfor (const result of results) {\n\t\tlet formatting = green;\n\n\t\tif (result.errored) {\n\t\t\tformatting = red;\n\t\t} else if (result.warnings.length) {\n\t\t\tformatting = yellow;\n\t\t} else if (result.ignored) {\n\t\t\tformatting = dim;\n\t\t}\n\n\t\tlet sourceText = fileLink(result.source);\n\n\t\tif (result.ignored) {\n\t\t\tsourceText += ' (ignored)';\n\t\t}\n\n\t\toutput += formatting(` ${sourceText}\\n`);\n\t}\n\n\tconst warnings = results.flatMap((r) => r.warnings);\n\n\tif (warnings.length === 0) {\n\t\toutput += '\\n0 problems found\\n';\n\t} else {\n\t\tconst warningsBySeverity = groupBy(warnings, (w) => w.severity);\n\t\tlet fixableProblemsFound = false;\n\n\t\t/**\n\t\t * @param {Severity} severity\n\t\t */\n\t\tconst printProblems = (severity) => {\n\t\t\tconst problems = warningsBySeverity[severity];\n\n\t\t\tif (problems === undefined) return;\n\n\t\t\toutput += '\\n';\n\t\t\toutput += underline(`${problems.length} ${pluralize(severity, problems.length)} found\\n`);\n\n\t\t\tconst problemsByRule = groupBy(problems, (w) => w.rule);\n\t\t\tconst metadata = returnValue.ruleMetadata;\n\n\t\t\tfor (const [rule, list] of Object.entries(problemsByRule)) {\n\t\t\t\tconst meta = metadata[rule];\n\t\t\t\tconst fixable = meta && meta.fixable ? ' (maybe fixable)' : '';\n\n\t\t\t\toutput += dim(` ${ruleLink(rule, meta)}: ${list.length}${fixable}\\n`);\n\n\t\t\t\tif (!fixableProblemsFound && meta && meta.fixable) {\n\t\t\t\t\tfixableProblemsFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprintProblems('error');\n\t\tprintProblems('warning');\n\n\t\tif (fixableProblemsFound) {\n\t\t\toutput += yellow('\\nYou may fix some problems with the \"--fix\" option.\\n');\n\t\t}\n\t}\n\n\treturn `${output}\\n`;\n};\n\n/**\n * @template {string} K\n * @param {Warning[]} array\n * @param {(w: Warning) => K} keyFn\n * @returns {Record<K, Warning[]>}\n */\nfunction groupBy(array, keyFn) {\n\t/** @type {Record<string, Warning[]>} */\n\tconst result = {};\n\n\tfor (const item of array) {\n\t\tconst key = keyFn(item);\n\t\tlet warnings = result[key];\n\n\t\tif (warnings === undefined) {\n\t\t\tresult[key] = warnings = [];\n\t\t}\n\n\t\twarnings.push(item);\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {string | undefined} source\n * @returns {string}\n */\nfunction fileLink(source) {\n\tif (!source || source.startsWith('<')) {\n\t\treturn `${source}`;\n\t}\n\n\treturn terminalLink(source, `file://${source}`);\n}\n\n/**\n * @param {string} rule\n * @param {Partial<RuleMeta> | undefined} metadata\n * @returns {string}\n */\nfunction ruleLink(rule, metadata) {\n\tif (metadata && metadata.url) {\n\t\treturn terminalLink(rule, metadata.url);\n\t}\n\n\treturn rule;\n}\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').formatters} */\nconst formatters = {\n\tcompact: importLazy('./compactFormatter'),\n\tgithub: importLazy('./githubFormatter'),\n\tjson: importLazy('./jsonFormatter'),\n\tstring: importLazy('./stringFormatter'),\n\ttap: importLazy('./tapFormatter'),\n\tunix: importLazy('./unixFormatter'),\n\tverbose: importLazy('./verboseFormatter'),\n};\n\nmodule.exports = formatters;\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function compactFormatter(results) {\n\treturn results\n\t\t.flatMap((result) =>\n\t\t\tresult.warnings.map(\n\t\t\t\t(warning) =>\n\t\t\t\t\t`${result.source}: ` +\n\t\t\t\t\t`line ${warning.line}, ` +\n\t\t\t\t\t`col ${warning.column}, ` +\n\t\t\t\t\t`${warning.severity} - ` +\n\t\t\t\t\t`${warning.text}`,\n\t\t\t),\n\t\t)\n\t\t.join('\\n');\n};\n","'use strict';\n\n/**\n * @see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function githubFormatter(results, returnValue) {\n\tconst title = 'Stylelint problem';\n\tconst metadata = returnValue.ruleMetadata;\n\n\treturn results\n\t\t.flatMap(({ source, warnings }) =>\n\t\t\twarnings.map(({ line, column, endLine, endColumn, text, severity, rule }) => {\n\t\t\t\tconst msg = buildMessage(text, metadata[rule]);\n\n\t\t\t\treturn endLine === undefined\n\t\t\t\t\t? `::${severity} file=${source},line=${line},col=${column},title=${title}::${msg}`\n\t\t\t\t\t: `::${severity} file=${source},line=${line},col=${column},endLine=${endLine},endColumn=${endColumn},title=${title}::${msg}`;\n\t\t\t}),\n\t\t)\n\t\t.join('\\n');\n};\n\n/**\n * @param {string} msg\n * @param {Partial<import('stylelint').RuleMeta> | undefined} metadata\n * @returns {string}\n */\nfunction buildMessage(msg, metadata) {\n\tif (!metadata) return msg;\n\n\tconst url = metadata.url ? ` - ${metadata.url}` : '';\n\tconst fixable = metadata.fixable ? ' [maybe fixable]' : '';\n\n\treturn `${msg}${fixable}${url}`;\n}\n","'use strict';\n\n/**\n * Omit any properties starting with `_`, which are fake-private\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function jsonFormatter(results) {\n\tconst cleanedResults = results.map((result) =>\n\t\tObject.entries(result)\n\t\t\t.filter(([key]) => !key.startsWith('_'))\n\t\t\t.reduce((/** @type {{ [key: string]: any }} */ obj, [key, value]) => {\n\t\t\t\tobj[key] = value;\n\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t);\n\n\treturn JSON.stringify(cleanedResults);\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function tapFormatter(results) {\n\tconst lines = [`TAP version 13\\n1..${results.length}`];\n\n\tfor (const [index, result] of results.entries()) {\n\t\tlines.push(\n\t\t\t`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${\n\t\t\t\tresult.source\n\t\t\t}`,\n\t\t);\n\n\t\tif (result.warnings.length > 0) {\n\t\t\tlines.push('---', 'messages:');\n\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlines.push(\n\t\t\t\t\t` - message: \"${warning.text}\"`,\n\t\t\t\t\t`   severity: ${warning.severity}`,\n\t\t\t\t\t`   data:`,\n\t\t\t\t\t`     line: ${warning.line}`,\n\t\t\t\t\t`     column: ${warning.column}`,\n\t\t\t\t\t`     endLine: ${warning.endLine}`,\n\t\t\t\t\t`     endColumn: ${warning.endColumn}`,\n\t\t\t\t\t`     ruleId: ${warning.rule}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlines.push('---');\n\t\t}\n\t}\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function unixFormatter(results) {\n\tconst lines = results.flatMap((result) =>\n\t\tresult.warnings.map(\n\t\t\t(warning) =>\n\t\t\t\t`${result.source}:${warning.line}:${warning.column}: ` +\n\t\t\t\t`${warning.text} [${warning.severity}]\\n`,\n\t\t),\n\t);\n\tconst total = lines.length;\n\tlet output = lines.join('');\n\n\tif (total > 0) {\n\t\toutput += `\\n${total} problem${total !== 1 ? 's' : ''}\\n`;\n\t}\n\n\treturn output;\n};\n","import normalize from \"stylelint/lib/normalizeAllRuleSettings\";\n\nexport default async stylelint => ({\n  config: normalize(stylelint._options.config)\n});\n","let tokenizer = require('postcss/lib/tokenize')\nlet Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n  }\n}\n\nmodule.exports = SafeParser\n","let { Input } = require('postcss')\n\nlet SafeParser = require('./safe-parser')\n\nmodule.exports = function safeParse(css, opts) {\n  let input = new Input(css, opts)\n\n  let parser = new SafeParser(input)\n  parser.parse()\n\n  return parser.root\n}\n","'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\nconst path = require('path');\nconst { default: postcss } = require('postcss');\nconst { promises: fs } = require('fs');\n\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('postcss').Syntax} Syntax */\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\nconst postcssProcessor = postcss();\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\nmodule.exports = async function getPostcssResult(stylelint, options = {}) {\n\tconst cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tif (stylelint._options.syntax) {\n\t\tlet error = 'The \"syntax\" option is no longer available. ';\n\n\t\terror +=\n\t\t\tstylelint._options.syntax === 'css'\n\t\t\t\t? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default'\n\t\t\t\t: `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n\n\t\treturn Promise.reject(new Error(error));\n\t}\n\n\tconst syntax = options.customSyntax\n\t\t? getCustomSyntax(options.customSyntax)\n\t\t: cssSyntax(stylelint, options.filePath);\n\n\tconst postcssOptions = {\n\t\tfrom: options.filePath,\n\t\tsyntax,\n\t};\n\n\t/** @type {string | undefined} */\n\tlet getCode;\n\n\tif (options.code !== undefined) {\n\t\tgetCode = options.code;\n\t} else if (options.filePath) {\n\t\tgetCode = await fs.readFile(options.filePath, 'utf8');\n\t}\n\n\tif (getCode === undefined) {\n\t\treturn Promise.reject(new Error('code or filePath required'));\n\t}\n\n\tif (options.codeProcessors && options.codeProcessors.length) {\n\t\tif (stylelint._options.fix) {\n\t\t\tconsole.warn(\n\t\t\t\t'Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?',\n\t\t\t);\n\t\t\tstylelint._options.fix = false;\n\t\t}\n\n\t\tconst sourceName = options.code ? options.codeFilename : options.filePath;\n\n\t\tfor (const codeProcessor of options.codeProcessors) {\n\t\t\tgetCode = codeProcessor(getCode, sourceName);\n\t\t}\n\t}\n\n\tconst postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n\tif (options.filePath) {\n\t\tstylelint._postcssResultCache.set(options.filePath, postcssResult);\n\t}\n\n\treturn postcssResult;\n};\n\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\nfunction getCustomSyntax(customSyntax) {\n\tlet resolved;\n\n\tif (typeof customSyntax === 'string') {\n\t\ttry {\n\t\t\tresolved = require(customSyntax);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror &&\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.code === 'MODULE_NOT_FOUND' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.message.includes(customSyntax)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/*\n\t\t * PostCSS allows for syntaxes that only contain a parser, however,\n\t\t * it then expects the syntax to be set as the `parse` option.\n\t\t */\n\t\tif (!resolved.parse) {\n\t\t\tresolved = {\n\t\t\t\tparse: resolved,\n\t\t\t\tstringify: postcss.stringify,\n\t\t\t};\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tif (typeof customSyntax === 'object') {\n\t\tif (typeof customSyntax.parse === 'function') {\n\t\t\tresolved = { ...customSyntax };\n\t\t} else {\n\t\t\tthrow new TypeError(\n\t\t\t\t`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`,\n\t\t\t);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tthrow new Error(`Custom syntax must be a string or a Syntax object`);\n}\n\n/** @type {{ [key: string]: string }} */\nconst previouslyInferredExtensions = {\n\thtml: 'postcss-html',\n\tjs: '@stylelint/postcss-css-in-js',\n\tjsx: '@stylelint/postcss-css-in-js',\n\tless: 'postcss-less',\n\tmd: 'postcss-markdown',\n\tsass: 'postcss-sass',\n\tsss: 'sugarss',\n\tscss: 'postcss-scss',\n\tsvelte: 'postcss-html',\n\tts: '@stylelint/postcss-css-in-js',\n\ttsx: '@stylelint/postcss-css-in-js',\n\tvue: 'postcss-html',\n\txml: 'postcss-html',\n\txst: 'postcss-html',\n};\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\nfunction cssSyntax(stylelint, filePath) {\n\tconst fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n\tconst extensions = ['css', 'pcss', 'postcss'];\n\n\tif (previouslyInferredExtensions[fileExtension]) {\n\t\tconsole.warn(\n\t\t\t`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`,\n\t\t);\n\t}\n\n\treturn {\n\t\tparse:\n\t\t\tstylelint._options.fix && extensions.includes(fileExtension)\n\t\t\t\t? require('postcss-safe-parser')\n\t\t\t\t: postcss.parse,\n\t\tstringify: postcss.stringify,\n\t};\n}\n","export default async () => false;\n","'use strict';\n\nconst util = require('util');\n\n/**\n * @param {unknown} error\n * @returns {error is NodeJS.ErrnoException}\n */\nmodule.exports = function isPathNotFoundError(error) {\n\t// @ts-expect-error -- TS2339: Property 'code' does not exist on type 'Error'.\n\treturn util.types.isNativeError(error) && error.code === 'ENOENT';\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\nconst {\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n\textractStylelintCommand,\n\tisStylelintCommand,\n} = require('./utils/stylelintCommand');\nconst { assert, assertNumber, assertString } = require('./utils/validateTypes');\n\nconst ALL_RULES = 'all';\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('postcss').Root} PostcssRoot */\n/** @typedef {import('postcss').Document} PostcssDocument */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n\treturn {\n\t\tcomment,\n\t\tstart,\n\t\tend: end || undefined,\n\t\tstrictStart,\n\t\tstrictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n\t\tdescription,\n\t};\n}\n\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\nmodule.exports = function assignDisabledRanges(root, result) {\n\tresult.stylelint = result.stylelint || {\n\t\tdisabledRanges: {},\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t/**\n\t * Most of the functions below work via side effects mutating this object\n\t * @type {DisabledRangeObject & { all: DisabledRange[] }}\n\t */\n\tconst disabledRanges = {\n\t\t[ALL_RULES]: [],\n\t};\n\n\tresult.stylelint.disabledRanges = disabledRanges;\n\n\t// Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n\t// into a single node before passing to `checkComment`.\n\n\t/** @type {PostcssComment?} */\n\tlet inlineEnd;\n\n\troot.walkComments((comment) => {\n\t\tif (inlineEnd) {\n\t\t\t// Ignore comments already processed by grouping with a previous one.\n\t\t\tif (inlineEnd === comment) inlineEnd = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextComment = comment.next();\n\n\t\t// If any of these conditions are not met, do not merge comments.\n\t\tif (\n\t\t\t!(\n\t\t\t\t!isStandardSyntaxComment(comment) &&\n\t\t\t\tisStylelintCommand(comment) &&\n\t\t\t\tnextComment &&\n\t\t\t\tnextComment.type === 'comment' &&\n\t\t\t\t(comment.text.includes('--') || nextComment.text.startsWith('--'))\n\t\t\t)\n\t\t) {\n\t\t\tcheckComment(comment);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastLine = (comment.source && comment.source.end && comment.source.end.line) || 0;\n\t\tconst fullComment = comment.clone();\n\n\t\tlet current = nextComment;\n\n\t\twhile (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n\t\t\tconst currentLine = (current.source && current.source.end && current.source.end.line) || 0;\n\n\t\t\tif (lastLine + 1 !== currentLine) break;\n\n\t\t\tfullComment.text += `\\n${current.text}`;\n\n\t\t\tif (fullComment.source && current.source) {\n\t\t\t\tfullComment.source.end = current.source.end;\n\t\t\t}\n\n\t\t\tinlineEnd = current;\n\t\t\tconst next = current.next();\n\n\t\t\tif (!next || next.type !== 'comment') break;\n\n\t\t\tcurrent = next;\n\t\t\tlastLine = currentLine;\n\t\t}\n\n\t\tcheckComment(fullComment);\n\t});\n\n\treturn result;\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableLineCommand(comment) {\n\t\tif (comment.source && comment.source.start) {\n\t\t\tconst line = comment.source.start.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(DISABLE_LINE_COMMAND, comment.text)) {\n\t\t\t\tdisableLine(comment, line, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableNextLineCommand(comment) {\n\t\tif (comment.source && comment.source.end) {\n\t\t\tconst line = comment.source.end.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(DISABLE_NEXT_LINE_COMMAND, comment.text)) {\n\t\t\t\tdisableLine(comment, line + 1, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {string|undefined} description\n\t */\n\tfunction disableLine(comment, line, ruleName, description) {\n\t\tif (ruleIsDisabled(ALL_RULES)) {\n\t\t\tthrow comment.error('All rules have already been disabled', {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\n\t\tif (ruleName === ALL_RULES) {\n\t\t\tfor (const disabledRuleName of Object.keys(disabledRanges)) {\n\t\t\t\tif (ruleIsDisabled(disabledRuleName)) continue;\n\n\t\t\t\tconst strict = disabledRuleName === ALL_RULES;\n\n\t\t\t\tstartDisabledRange(comment, line, disabledRuleName, strict, description);\n\t\t\t\tendDisabledRange(line, disabledRuleName, strict);\n\t\t\t}\n\t\t} else {\n\t\t\tif (ruleIsDisabled(ruleName)) {\n\t\t\t\tthrow comment.error(`\"${ruleName}\" has already been disabled`, {\n\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstartDisabledRange(comment, line, ruleName, true, description);\n\t\t\tendDisabledRange(line, ruleName, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableCommand(comment) {\n\t\tconst description = getDescription(comment.text);\n\n\t\tfor (const ruleToDisable of getCommandRules(DISABLE_COMMAND, comment.text)) {\n\t\t\tconst isAllRules = ruleToDisable === ALL_RULES;\n\n\t\t\tif (ruleIsDisabled(ruleToDisable)) {\n\t\t\t\tthrow comment.error(\n\t\t\t\t\tisAllRules\n\t\t\t\t\t\t? 'All rules have already been disabled'\n\t\t\t\t\t\t: `\"${ruleToDisable}\" has already been disabled`,\n\t\t\t\t\t{\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (comment.source && comment.source.start) {\n\t\t\t\tconst line = comment.source.start.line;\n\n\t\t\t\tif (isAllRules) {\n\t\t\t\t\tfor (const ruleName of Object.keys(disabledRanges)) {\n\t\t\t\t\t\tstartDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartDisabledRange(comment, line, ruleToDisable, true, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processEnableCommand(comment) {\n\t\tfor (const ruleToEnable of getCommandRules(ENABLE_COMMAND, comment.text)) {\n\t\t\t// need fallback if endLine will be undefined\n\t\t\tconst endLine = comment.source && comment.source.end && comment.source.end.line;\n\n\t\t\tassertNumber(endLine);\n\n\t\t\tif (ruleToEnable === ALL_RULES) {\n\t\t\t\tif (\n\t\t\t\t\tObject.values(disabledRanges).every((ranges) => {\n\t\t\t\t\t\tif (ranges.length === 0) return true;\n\n\t\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\t\treturn lastRange && typeof lastRange.end === 'number';\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tthrow comment.error('No rules have been disabled', {\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\tif (!lastRange || !lastRange.end) {\n\t\t\t\t\t\tendDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n\t\t\t\t// Get a starting point from the where all rules were disabled\n\t\t\t\tdisabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(\n\t\t\t\t\t({ start, end, description }) =>\n\t\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t\t);\n\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ruleToEnable)) {\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction checkComment(comment) {\n\t\t// Ignore comments that are not relevant commands\n\n\t\tif (!isStylelintCommand(comment)) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (extractStylelintCommand(comment)) {\n\t\t\tcase DISABLE_LINE_COMMAND:\n\t\t\t\tprocessDisableLineCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase DISABLE_NEXT_LINE_COMMAND:\n\t\t\t\tprocessDisableNextLineCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase DISABLE_COMMAND:\n\t\t\t\tprocessDisableCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase ENABLE_COMMAND:\n\t\t\t\tprocessEnableCommand(comment);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} command\n\t * @param {string} fullText\n\t * @returns {string[]}\n\t */\n\tfunction getCommandRules(command, fullText) {\n\t\t// Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n\t\tconst splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n\n\t\tassertString(splitted);\n\t\tconst rules = splitted\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.filter(Boolean)\n\t\t\t.map((r) => r.trim());\n\n\t\tif (rules.length === 0) {\n\t\t\treturn [ALL_RULES];\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * @param {string} fullText\n\t * @returns {string|undefined}\n\t */\n\tfunction getDescription(fullText) {\n\t\tconst descriptionStart = fullText.indexOf('--');\n\n\t\tif (descriptionStart === -1) return;\n\n\t\treturn fullText.slice(descriptionStart + 2).trim();\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t * @param {string|undefined} description\n\t */\n\tfunction startDisabledRange(comment, line, ruleName, strict, description) {\n\t\tconst rangeObj = createDisableRange(comment, line, strict, description);\n\n\t\tensureRuleRanges(ruleName);\n\n\t\tconst range = disabledRanges[ruleName];\n\n\t\tassert(range);\n\t\trange.push(rangeObj);\n\t}\n\n\t/**\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t */\n\tfunction endDisabledRange(line, ruleName, strict) {\n\t\tconst ranges = disabledRanges[ruleName];\n\t\tconst lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n\t\tif (!lastRangeForRule) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add an `end` prop to the last range of that rule\n\t\tlastRangeForRule.end = line;\n\t\tlastRangeForRule.strictEnd = strict;\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t */\n\tfunction ensureRuleRanges(ruleName) {\n\t\tif (!disabledRanges[ruleName]) {\n\t\t\tdisabledRanges[ruleName] = disabledRanges[ALL_RULES].map(\n\t\t\t\t({ comment, start, end, description }) =>\n\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t * @returns {boolean}\n\t */\n\tfunction ruleIsDisabled(ruleName) {\n\t\tconst ranges = disabledRanges[ruleName];\n\n\t\tif (!ranges) return false;\n\n\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\tif (!lastRange) return false;\n\n\t\tif (!lastRange.end) return true;\n\n\t\treturn false;\n\t}\n};\n","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = Array.from({ length: MAX_LEVENSHTEIN_DISTANCE });\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tfor (const existRuleName of Object.keys(rules)) {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t}\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (const [i, suggestion] of suggestions.entries()) {\n\t\tif (suggestion.length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestion);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t});\n};\n","'use strict';\n\nconst path = require('path');\n\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\nconst lintPostcssResult = require('./lintPostcssResult');\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = async function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst isIgnored = await isPathIgnored(stylelint, inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) return false;\n\n\t\tthrow err;\n\t});\n\n\tif (isIgnored) {\n\t\treturn options.existingPostcssResult\n\t\t\t? Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t  })\n\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t}\n\n\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\tconst cwd = stylelint._options.cwd;\n\n\tlet configForFile;\n\n\ttry {\n\t\tconfigForFile = await getConfigForFile(stylelint, configSearchPath, inputFilePath);\n\t} catch (err) {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) {\n\t\t\tconfigForFile = await getConfigForFile(stylelint, cwd);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tif (!configForFile) {\n\t\treturn Promise.reject(new Error('Config file not found'));\n\t}\n\n\tconst config = configForFile.config;\n\tconst existingPostcssResult = options.existingPostcssResult;\n\n\tif (options.cache) {\n\t\tstylelint._fileCache.calcHashOfConfig(config);\n\n\t\tif (options.filePath && !stylelint._fileCache.hasFileChanged(options.filePath)) {\n\t\t\treturn existingPostcssResult\n\t\t\t\t? Object.assign(existingPostcssResult, {\n\t\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t\t  })\n\t\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t\t}\n\t}\n\n\t/** @type {StylelintPostcssResult} */\n\tconst stylelintResult = {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t};\n\n\tconst postcssResult =\n\t\texistingPostcssResult ||\n\t\t(await getPostcssResult(stylelint, {\n\t\t\tcode: options.code,\n\t\t\tcodeFilename: options.codeFilename,\n\t\t\tfilePath: inputFilePath,\n\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\tcustomSyntax: config.customSyntax,\n\t\t}));\n\n\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\tstylelint: stylelintResult,\n\t});\n\n\tawait lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n\n\treturn stylelintPostcssResult;\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t\tstylelintWarning: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n","'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.ruleMetadata = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.stylelintWarning = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string | undefined} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (\n\t\tpostcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]\n\t);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rulesOrder = Object.keys(rules);\n\tconst ruleNames = config.rules\n\t\t? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b))\n\t\t: [];\n\n\tfor (const ruleName of ruleNames) {\n\t\tconst ruleFunction =\n\t\t\trules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ruleSettings = config.rules && config.rules[ruleName];\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\t\t// disableFix in secondary option\n\t\tconst disableFix = (secondaryOptions && secondaryOptions.disableFix === true) || false;\n\n\t\tif (disableFix) {\n\t\t\tpostcssResult.stylelint.ruleDisableFix = true;\n\t\t}\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] =\n\t\t\t(secondaryOptions && secondaryOptions.severity) || defaultSeverity;\n\t\tpostcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n\t\tpostcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\t!disableFix &&\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n","'use strict';\n\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst lintSource = require('./lintSource');\n\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\nmodule.exports = (options = {}) => {\n\tconst [cwd, tailoredOptions] = isConfig(options)\n\t\t? [process.cwd(), { config: options }]\n\t\t: [options.cwd || process.cwd(), options];\n\tconst stylelint = createStylelint(tailoredOptions);\n\n\treturn {\n\t\tpostcssPlugin: 'stylelint',\n\t\tOnce(root, { result }) {\n\t\t\tlet filePath = root.source && root.source.input.file;\n\n\t\t\tif (filePath && !path.isAbsolute(filePath)) {\n\t\t\t\tfilePath = path.join(cwd, filePath);\n\t\t\t}\n\n\t\t\treturn lintSource(stylelint, {\n\t\t\t\tfilePath,\n\t\t\t\texistingPostcssResult: result,\n\t\t\t});\n\t\t},\n\t};\n};\n\nmodule.exports.postcss = true;\n\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\nfunction isConfig(options) {\n\treturn 'rules' in options;\n}\n","'use strict';\n\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst getConfigForFile = require('./getConfigForFile');\n\n/**\n * Resolves the effective configuration for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} options - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\nmodule.exports = async function resolveConfig(\n\tfilePath,\n\t{ cwd = process.cwd(), config, configBasedir, configFile } = {},\n) {\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t});\n\n\tconst absoluteFilePath = !path.isAbsolute(filePath)\n\t\t? path.join(cwd, filePath)\n\t\t: path.normalize(filePath);\n\n\tconst configSearchPath = stylelint._options.configFile || absoluteFilePath;\n\n\tconst resolved = await getConfigForFile(stylelint, configSearchPath, absoluteFilePath);\n\n\tif (!resolved) {\n\t\treturn undefined;\n\t}\n\n\treturn resolved.config;\n};\n","'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = async function createStylelintResult(\n\tstylelint,\n\tpostcssResult,\n\tfilePath,\n\tcssSyntaxError,\n) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\tconst configForFile = await getConfigForFile(stylelint, filePath, filePath);\n\n\tconst config = configForFile === null ? {} : configForFile.config;\n\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\tif (config.resultProcessors) {\n\t\tfor (const resultProcessor of config.resultProcessors) {\n\t\t\t// Result processors might just mutate the result object,\n\t\t\t// or might return a new one\n\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\tif (returned) {\n\t\t\t\tstylelintResult = returned;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function createPartialStylelintResult(postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\tconst deprecationMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'deprecation',\n\t\t);\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\tconst invalidOptionMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'invalidOption',\n\t\t);\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'parseError',\n\t\t);\n\n\t\t// Remove deprecation warnings, invalid options, and parse errors from the messages\n\t\tpostcssResult.messages = postcssResult.messages.filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.stylelintType !== 'deprecation' &&\n\t\t\t\tmessage.stylelintType !== 'invalidOption' &&\n\t\t\t\tmessage.stylelintType !== 'parseError',\n\t\t);\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n\t\t\tparseErrors,\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\tendLine: message.endLine,\n\t\t\t\t\tendColumn: message.endColumn,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\tendLine: cssSyntaxError.endLine,\n\t\t\t\t\tendColumn: cssSyntaxError.endColumn,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\nconst { isPathValid } = require('ignore').default;\n\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n\tconst validForIgnore = filePaths.filter(isPathValid);\n\t// Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\tconst notValidForIgnore = new Set(filePaths.filter((p) => !validForIgnore.includes(p)));\n\n\tconst filteredByIgnore = new Set(ignorer.filter(validForIgnore));\n\n\t// Preserving files order, while removing paths which were filtered by `ignore`\n\treturn filePaths.filter((p) => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};\n","'use strict';\n\nclass NoFilesFoundError extends Error {\n\t/**\n\t * @param {string|string[]} fileList\n\t */\n\tconstructor(fileList) {\n\t\tsuper();\n\n\t\tif (typeof fileList === 'string') {\n\t\t\tfileList = [fileList];\n\t\t}\n\n\t\tconst pattern = fileList.filter((i) => !i.startsWith('!')).join(', ');\n\n\t\tthis.message = `No files matching the pattern \"${pattern}\" were found.`;\n\t}\n}\n\nmodule.exports = NoFilesFoundError;\n","'use strict';\n\nclass AllFilesIgnoredError extends Error {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.message = `All input files were ignored because of the ignore pattern. Either change your input, ignore pattern or use \"--allow-empty-input\" to allow no inputs`;\n\t}\n}\n\nmodule.exports = AllFilesIgnoredError;\n","'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\nconst { isRegExp, isString } = require('./utils/validateTypes');\n\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\nmodule.exports = function validateDisableSettings(result, field) {\n\t// Files with `CssSyntaxError`s don't have `_postcssResult`s.\n\tif (!result) return null;\n\n\tconst stylelintResult = result.stylelint;\n\n\t// Files with linting errors may not have configs associated with them.\n\tif (!stylelintResult.config) return null;\n\n\tconst rawSettings = stylelintResult.config[field];\n\n\t/** @type {boolean} */\n\tlet enabled;\n\t/** @type {DisableOptions} */\n\tlet options;\n\n\tif (Array.isArray(rawSettings)) {\n\t\tenabled = rawSettings[0];\n\t\toptions = rawSettings[1] || {};\n\t} else {\n\t\tenabled = rawSettings || false;\n\t\toptions = {};\n\t}\n\n\tconst validOptions = validateOptions(\n\t\tresult,\n\t\tfield,\n\t\t{\n\t\t\tactual: enabled,\n\t\t\tpossible: [true, false],\n\t\t},\n\t\t{\n\t\t\tactual: options,\n\t\t\tpossible: {\n\t\t\t\texcept: [isString, isRegExp],\n\t\t\t},\n\t\t},\n\t);\n\n\tif (!validOptions) return null;\n\n\t// If the check is disabled with no exceptions, there's no reason to run\n\t// it at all.\n\tif (!enabled && !options.except) return null;\n\n\treturn [\n\t\tenabled,\n\t\t{\n\t\t\texcept: options.except || [],\n\t\t\tseverity: options.severity || stylelintResult.config.defaultSeverity || 'error',\n\t\t},\n\t\tstylelintResult,\n\t];\n};\n","'use strict';\n\n/**\n * If `map` already has the given `key`, returns its value. Otherwise, calls\n * `callback`, adds the result to `map` at `key`, and then returns it.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {() => V} callback\n * @returns {V}\n */\nmodule.exports = function putIfAbsent(map, key, callback) {\n\tif (map.has(key)) return /** @type {V} */ (map.get(key));\n\n\tconst value = callback();\n\n\tmap.set(key, value);\n\n\treturn value;\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst putIfAbsent = require('./utils/putIfAbsent');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function needlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst rangeData = stylelintResult.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst disabledWarnings = stylelintResult.disabledWarnings || [];\n\n\t\t// A map from `stylelint-disable` comments to the set of rules that\n\t\t// are usefully disabled by each comment. We track this\n\t\t// comment-by-comment rather than range-by-range because ranges that\n\t\t// disable *all* rules are duplicated for each rule they apply to in\n\t\t// practice.\n\t\t/** @type {Map<PostcssComment, Set<string>>}} */\n\t\tconst usefulDisables = new Map();\n\n\t\tfor (const warning of disabledWarnings) {\n\t\t\tconst rule = warning.rule;\n\t\t\tconst ruleRanges = rangeData[rule];\n\n\t\t\tif (ruleRanges) {\n\t\t\t\tfor (const range of ruleRanges) {\n\t\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const range of rangeData.all || []) {\n\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst allRangeComments = new Set((rangeData.all || []).map((range) => range.comment));\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\t\tconst useful = usefulDisables.get(range.comment) || new Set();\n\n\t\t\t\t// Only emit a warning if this range's comment isn't useful for this rule.\n\t\t\t\t// For the special rule \"all\", only emit a warning if it's not useful for\n\t\t\t\t// *any* rules, because it covers all of them.\n\t\t\t\tif (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Needless disable for \"${rule}\"`,\n\t\t\t\t\trule: '--report-needless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\nfunction isWarningInRange(warning, range) {\n\tconst line = warning.line;\n\n\t// Need to check if range.end exist, because line number type cannot be compared to undefined\n\treturn (\n\t\trange.start <= line &&\n\t\t((range.end !== undefined && range.end >= line) || range.end === undefined)\n\t);\n}\n","'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\nmodule.exports = function reportDisables(results) {\n\tfor (const result of results) {\n\t\t// File with `CssSyntaxError` don't have `_postcssResult`s.\n\t\tif (!result._postcssResult) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/** @type {{[ruleName: string]: Array<RangeType>}} */\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst config = result._postcssResult.stylelint.config;\n\n\t\tif (!config || !config.rules) continue;\n\n\t\t// If no rules actually disallow disables, don't bother looking for ranges\n\t\t// that correspond to disabled rules.\n\t\tif (!Object.values(config.rules).some((rule) => reportDisablesForRule(rule))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (!reportDisablesForRule(config.rules[rule] || [])) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" may not be disabled`,\n\t\t\t\t\trule: 'reportDisables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\nfunction reportDisablesForRule(options) {\n\tif (!options || !options[1]) return false;\n\n\treturn Boolean(options[1].reportDisables);\n}\n","'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\nconst invalidScopeDisables = require('./invalidScopeDisables');\nconst needlessDisables = require('./needlessDisables');\nconst reportDisables = require('./reportDisables');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').LinterOptions[\"maxWarnings\"]} maxWarnings */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {maxWarnings} maxWarnings\n * @param {Formatter} formatter\n * @param {string} cwd\n *\n * @returns {LinterResult}\n */\nmodule.exports = function prepareReturnValue(stylelintResults, maxWarnings, formatter, cwd) {\n\treportDisables(stylelintResults);\n\tneedlessDisables(stylelintResults);\n\tinvalidScopeDisables(stylelintResults);\n\tdescriptionlessDisables(stylelintResults);\n\n\tconst errored = stylelintResults.some(\n\t\t(result) =>\n\t\t\tresult.errored ||\n\t\t\tresult.parseErrors.length > 0 ||\n\t\t\tresult.warnings.some((warning) => warning.severity === 'error'),\n\t);\n\n\t/** @type {LinterResult} */\n\tconst returnValue = {\n\t\tcwd,\n\t\terrored,\n\t\tresults: [],\n\t\toutput: '',\n\t\treportedDisables: [],\n\t\truleMetadata: getRuleMetadata(stylelintResults),\n\t};\n\n\tif (maxWarnings !== undefined) {\n\t\tconst foundWarnings = stylelintResults.reduce((count, file) => count + file.warnings.length, 0);\n\n\t\tif (foundWarnings > maxWarnings) {\n\t\t\treturnValue.maxWarningsExceeded = { maxWarnings, foundWarnings };\n\t\t}\n\t}\n\n\treturnValue.output = formatter(stylelintResults, returnValue);\n\treturnValue.results = stylelintResults;\n\n\treturn returnValue;\n};\n\n/**\n * @param {StylelintResult[]} lintResults\n */\nfunction getRuleMetadata(lintResults) {\n\tconst [lintResult] = lintResults;\n\n\tif (lintResult === undefined) return {};\n\n\tif (lintResult._postcssResult === undefined) return {};\n\n\treturn lintResult._postcssResult.stylelint.ruleMetadata;\n}\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function invalidScopeDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst configRules = (stylelintResult.config || {}).rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tif (usedRules.has(rule)) continue;\n\n\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function descriptionlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(\n\t\t\tresult._postcssResult,\n\t\t\t'reportDescriptionlessDisables',\n\t\t);\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (range.description) continue;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) {\n\t\t\t\t\t// An 'all' rule will get copied for each individual rule. If the\n\t\t\t\t\t// configuration is `[false, {except: ['specific-rule']}]`, we\n\t\t\t\t\t// don't want to report the copies that match except, so we record\n\t\t\t\t\t// the comment as already reported.\n\t\t\t\t\tif (!enabled && rule === 'all') alreadyReported.add(range.comment);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:standalone');\nconst fastGlob = require('fast-glob');\nconst fs = require('fs');\nconst globby = require('globby');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst createStylelintResult = require('./createStylelintResult');\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst formatters = require('./formatters');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst getFormatterOptionsText = require('./utils/getFormatterOptionsText');\nconst lintSource = require('./lintSource');\nconst NoFilesFoundError = require('./utils/noFilesFoundError');\nconst AllFilesIgnoredError = require('./utils/allFilesIgnoredError');\nconst { assert } = require('./utils/validateTypes');\nconst prepareReturnValue = require('./prepareReturnValue');\n\nconst ALWAYS_IGNORED_GLOBS = ['**/node_modules/**'];\nconst writeFileAtomic = require('write-file-atomic');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').FormatterType} FormatterType */\n\n/**\n *\n * @param {LinterOptions} options\n * @returns {Promise<LinterResult>}\n */\nasync function standalone({\n\tallowEmptyInput = false,\n\tcache: useCache = false,\n\tcacheLocation,\n\tcacheStrategy,\n\tcode,\n\tcodeFilename,\n\tconfig,\n\tconfigBasedir,\n\tconfigFile,\n\tcustomSyntax,\n\tcwd = process.cwd(),\n\tdisableDefaultIgnores,\n\tfiles,\n\tfix,\n\tformatter,\n\tglobbyOptions,\n\tignoreDisables,\n\tignorePath,\n\tignorePattern,\n\tmaxWarnings,\n\tquiet,\n\treportDescriptionlessDisables,\n\treportInvalidScopeDisables,\n\treportNeedlessDisables,\n\tsyntax,\n}) {\n\tconst startTime = Date.now();\n\n\tconst isValidCode = typeof code === 'string';\n\n\tif ((!files && !isValidCode) || (files && (code || isValidCode))) {\n\t\treturn Promise.reject(\n\t\t\tnew Error('You must pass stylelint a `files` glob or a `code` string, though not both'),\n\t\t);\n\t}\n\n\t// The ignorer will be used to filter file paths after the glob is checked,\n\t// before any files are actually read\n\n\t/** @type {import('ignore').Ignore} */\n\tlet ignorer;\n\n\ttry {\n\t\tignorer = getFileIgnorer({ cwd, ignorePath, ignorePattern });\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\t/** @type {Formatter} */\n\tlet formatterFunction;\n\n\ttry {\n\t\tformatterFunction = getFormatterFunction(formatter);\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tcacheLocation,\n\t\tcacheStrategy,\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t\tignoreDisables,\n\t\tignorePath,\n\t\treportNeedlessDisables,\n\t\treportInvalidScopeDisables,\n\t\treportDescriptionlessDisables,\n\t\tsyntax,\n\t\tcustomSyntax,\n\t\tfix,\n\t\tquiet,\n\t});\n\n\tif (!files) {\n\t\tconst absoluteCodeFilename =\n\t\t\tcodeFilename !== undefined && !path.isAbsolute(codeFilename)\n\t\t\t\t? path.join(cwd, codeFilename)\n\t\t\t\t: codeFilename;\n\n\t\t// if file is ignored, return nothing\n\t\tif (\n\t\t\tabsoluteCodeFilename &&\n\t\t\t!filterFilePaths(ignorer, [path.relative(cwd, absoluteCodeFilename)]).length\n\t\t) {\n\t\t\treturn prepareReturnValue([], maxWarnings, formatterFunction, cwd);\n\t\t}\n\n\t\tlet stylelintResult;\n\n\t\ttry {\n\t\t\tconst postcssResult = await lintSource(stylelint, {\n\t\t\t\tcode,\n\t\t\t\tcodeFilename: absoluteCodeFilename,\n\t\t\t});\n\n\t\t\tstylelintResult = await createStylelintResult(stylelint, postcssResult, absoluteCodeFilename);\n\t\t} catch (error) {\n\t\t\tstylelintResult = await handleError(stylelint, error);\n\t\t}\n\n\t\tconst postcssResult = stylelintResult._postcssResult;\n\t\tconst returnValue = prepareReturnValue([stylelintResult], maxWarnings, formatterFunction, cwd);\n\n\t\tif (\n\t\t\tfix &&\n\t\t\tpostcssResult &&\n\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t!postcssResult.stylelint.ruleDisableFix\n\t\t) {\n\t\t\treturnValue.output =\n\t\t\t\t!postcssResult.stylelint.disableWritingFix && postcssResult.opts\n\t\t\t\t\t? // If we're fixing, the output should be the fixed code\n\t\t\t\t\t  postcssResult.root.toString(postcssResult.opts.syntax)\n\t\t\t\t\t: // If the writing of the fix is disabled, the input code is returned as-is\n\t\t\t\t\t  code;\n\t\t}\n\n\t\treturn returnValue;\n\t}\n\n\tlet fileList = [files].flat().map((entry) => {\n\t\tconst globCWD = (globbyOptions && globbyOptions.cwd) || cwd;\n\t\tconst absolutePath = !path.isAbsolute(entry)\n\t\t\t? path.join(globCWD, entry)\n\t\t\t: path.normalize(entry);\n\n\t\tif (fs.existsSync(absolutePath)) {\n\t\t\t// This path points to a file. Return an escaped path to avoid globbing\n\t\t\treturn fastGlob.escapePath(normalizePath(entry));\n\t\t}\n\n\t\treturn entry;\n\t});\n\n\tif (!disableDefaultIgnores) {\n\t\tfileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map((glob) => `!${glob}`));\n\t}\n\n\tif (!useCache) {\n\t\tstylelint._fileCache.destroy();\n\t}\n\n\tconst effectiveGlobbyOptions = {\n\t\tcwd,\n\t\t...(globbyOptions || {}),\n\t\tabsolute: true,\n\t};\n\n\tconst globCWD = effectiveGlobbyOptions.cwd;\n\n\tlet filePaths = await globby(fileList, effectiveGlobbyOptions);\n\t// Record the length of filePaths before ignore operation\n\t// Prevent prompting \"No files matching the pattern 'xx' were found.\" when .stylelintignore ignore all input files\n\tconst filePathsLengthBeforeIgnore = filePaths.length;\n\n\t// The ignorer filter needs to check paths relative to cwd\n\tfilePaths = filterFilePaths(\n\t\tignorer,\n\t\tfilePaths.map((p) => path.relative(globCWD, p)),\n\t);\n\n\tlet stylelintResults;\n\n\tif (filePaths.length) {\n\t\tlet absoluteFilePaths = filePaths.map((filePath) => {\n\t\t\tconst absoluteFilepath = !path.isAbsolute(filePath)\n\t\t\t\t? path.join(globCWD, filePath)\n\t\t\t\t: path.normalize(filePath);\n\n\t\t\treturn absoluteFilepath;\n\t\t});\n\n\t\tconst getStylelintResults = absoluteFilePaths.map(async (absoluteFilepath) => {\n\t\t\tdebug(`Processing ${absoluteFilepath}`);\n\n\t\t\ttry {\n\t\t\t\tconst postcssResult = await lintSource(stylelint, {\n\t\t\t\t\tfilePath: absoluteFilepath,\n\t\t\t\t\tcache: useCache,\n\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\t(postcssResult.stylelint.stylelintError || postcssResult.stylelint.stylelintWarning) &&\n\t\t\t\t\tuseCache\n\t\t\t\t) {\n\t\t\t\t\tdebug(`${absoluteFilepath} contains linting errors and will not be cached.`);\n\t\t\t\t\tstylelint._fileCache.removeEntry(absoluteFilepath);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * If we're fixing, save the file with changed code\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\tpostcssResult.opts &&\n\t\t\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t\t\tfix &&\n\t\t\t\t\t!postcssResult.stylelint.disableWritingFix\n\t\t\t\t) {\n\t\t\t\t\tconst fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\t\tpostcssResult.root.source &&\n\t\t\t\t\t\tpostcssResult.root.source.input.css !== fixedCss\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait writeFileAtomic(absoluteFilepath, fixedCss);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn createStylelintResult(stylelint, postcssResult, absoluteFilepath);\n\t\t\t} catch (error) {\n\t\t\t\t// On any error, we should not cache the lint result\n\t\t\t\tstylelint._fileCache.removeEntry(absoluteFilepath);\n\n\t\t\t\treturn handleError(stylelint, error, absoluteFilepath);\n\t\t\t}\n\t\t});\n\n\t\tstylelintResults = await Promise.all(getStylelintResults);\n\t} else if (allowEmptyInput) {\n\t\tstylelintResults = await Promise.all([]);\n\t} else if (filePathsLengthBeforeIgnore) {\n\t\t// All input files ignored\n\t\tstylelintResults = await Promise.reject(new AllFilesIgnoredError());\n\t} else {\n\t\tstylelintResults = await Promise.reject(new NoFilesFoundError(fileList));\n\t}\n\n\tif (useCache) {\n\t\tstylelint._fileCache.reconcile();\n\t}\n\n\tconst result = prepareReturnValue(stylelintResults, maxWarnings, formatterFunction, cwd);\n\n\tdebug(`Linting complete in ${Date.now() - startTime}ms`);\n\n\treturn result;\n}\n\n/**\n * @param {FormatterType | Formatter | undefined} selected\n * @returns {Formatter}\n */\nfunction getFormatterFunction(selected) {\n\tif (typeof selected === 'string') {\n\t\tconst formatterFunction = formatters[selected];\n\n\t\tif (formatterFunction === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`You must use a valid formatter option: ${getFormatterOptionsText()} or a function`,\n\t\t\t);\n\t\t}\n\n\t\treturn formatterFunction;\n\t}\n\n\tif (typeof selected === 'function') {\n\t\treturn selected;\n\t}\n\n\tassert(formatters.json);\n\n\treturn formatters.json;\n}\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {any} error\n * @param {string} [filePath]\n * @return {Promise<StylelintResult>}\n */\nfunction handleError(stylelint, error, filePath = undefined) {\n\tif (error.name === 'CssSyntaxError') {\n\t\treturn createStylelintResult(stylelint, undefined, filePath, error);\n\t}\n\n\tthrow error;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').lint} */ (standalone);\n","'use strict';\n\nconst checkAgainstRule = require('./utils/checkAgainstRule');\nconst createPlugin = require('./createPlugin');\nconst createStylelint = require('./createStylelint');\nconst formatters = require('./formatters');\nconst postcssPlugin = require('./postcssPlugin');\nconst report = require('./utils/report');\nconst resolveConfig = require('./resolveConfig');\nconst ruleMessages = require('./utils/ruleMessages');\nconst rules = require('./rules');\nconst { longhandSubPropertiesOfShorthandProperties } = require('./reference/properties');\nconst standalone = require('./standalone');\nconst validateOptions = require('./utils/validateOptions');\n\n/** @type {import('stylelint').PublicApi} */\nconst stylelint = Object.assign(postcssPlugin, {\n\tlint: standalone,\n\trules,\n\tformatters,\n\tcreatePlugin,\n\tresolveConfig,\n\tcreateLinter: createStylelint,\n\tutils: {\n\t\treport,\n\t\truleMessages,\n\t\tvalidateOptions,\n\t\tcheckAgainstRule,\n\t},\n\treference: {\n\t\tlonghandSubPropertiesOfShorthandProperties,\n\t},\n});\n\nmodule.exports = stylelint;\n","'use strict';\n\nconst formatters = require('../formatters');\n\n/**\n * @param {{ useOr?: boolean }} [options={}]\n * @returns {string}\n */\nmodule.exports = function getFormatterOptionsText(options = {}) {\n\tlet output = Object.keys(formatters)\n\t\t.map((name) => `\"${name}\"`)\n\t\t.join(', ');\n\n\tif (options.useOr) {\n\t\toutput = output.replace(/, ([a-z\"]+)$/u, ' or $1');\n\t}\n\n\treturn output;\n};\n","/*!\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(path, stripTrailing) {\n  if (typeof path !== 'string') {\n    throw new TypeError('expected path to be a string');\n  }\n\n  if (path === '\\\\' || path === '/') return '/';\n\n  var len = path.length;\n  if (len <= 1) return path;\n\n  // ensure that win32 namespaces has two leading slashes, so that the path is\n  // handled properly by the win32 version of path.parse() after being normalized\n  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\n  var prefix = '';\n  if (len > 4 && path[3] === '\\\\') {\n    var ch = path[2];\n    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\n      path = path.slice(2);\n      prefix = '//';\n    }\n  }\n\n  var segs = path.split(/[/\\\\]+/);\n  if (stripTrailing !== false && segs[segs.length - 1] === '') {\n    segs.pop();\n  }\n  return prefix + segs.join('/');\n};\n","'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\nfunction checkAgainstRule(options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tconst rule = rules[options.ruleName];\n\n\tif (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\t// @ts-expect-error - this error should not occur with PostCSS 8\n\tconst tmpPostcssResult = new Result();\n\n\trule(settings[0], /** @type {O} */ (settings[1]), {})(options.root, tmpPostcssResult);\n\n\tfor (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.checkAgainstRule} */ (\n\tcheckAgainstRule\n);\n","const DEFAULT_RAWS = {\n  colon: ': ',\n  indent: '  ',\n  commentLeft: ' ',\n  commentRight: ' '\n}\n\nmodule.exports = class Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    this[node.type](node, semicolon)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = DEFAULT_RAWS.commentLeft\n    let right = DEFAULT_RAWS.commentRight\n    if (this.has(node.raws.left)) left = node.raws.left\n\n    if (node.raws.inline) {\n      if (this.has(node.raws.inlineRight)) {\n        right = node.raws.inlineRight\n      } else {\n        right = ''\n      }\n      if (node.raws.extraIndent) {\n        this.builder(node.raws.extraIndent)\n      }\n      this.builder('//' + left + node.text + right, node)\n    } else {\n      if (this.has(node.raws.right)) right = node.raws.right\n      this.builder('/*' + left + node.text + right + '*/', node)\n    }\n  }\n\n  decl(node) {\n    let between = node.raws.between || DEFAULT_RAWS.colon\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n  }\n\n  atrule(node) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (this.has(node.raws.afterName)) {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    this.block(node, name + params)\n  }\n\n  body(node) {\n    let indent = node.root().raws.indent || DEFAULT_RAWS.indent\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before =\n        child.raws.before.replace(/[^\\n]*$/, '') + this.indent(node, indent)\n      if (child.type === 'comment' && !child.raws.before.includes('\\n')) {\n        before = child.raws.before\n      }\n      if (before) this.builder(before)\n      this.stringify(child)\n    }\n  }\n\n  block(node, start) {\n    let between = node.raws.sssBetween || ''\n    this.builder(start + between, node, 'start')\n    if (this.has(node.nodes)) this.body(node)\n  }\n\n  indent(node, step) {\n    let result = ''\n    while (node.parent) {\n      result += step\n      node = node.parent\n    }\n    return result\n  }\n\n  has(value) {\n    return typeof value !== 'undefined'\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.sss || raw.raw\n    } else {\n      return value\n    }\n  }\n}\n","function indentError(input, l, p) {\n  throw input.error('Mixed tabs and spaces are not allowed', l, p + 1)\n}\n\nmodule.exports = function preprocess(input, lines) {\n  let indentType\n  let prevNumber = 0\n  let parts = lines.map(line => {\n    let lastComma = false\n    let comment = false\n    let number = prevNumber + 1\n    let atrule = false\n    let indent = ''\n    let tokens = []\n    let colon = false\n\n    if (line.length > 0) {\n      if (line[0][0] === 'space') {\n        indent = line[0][1]\n        tokens = line.slice(1)\n      } else {\n        indent = ''\n        tokens = line\n      }\n\n      if (!indentType && indent.length) {\n        indentType = indent[0] === ' ' ? 'space' : 'tab'\n      }\n      if (indentType === 'space') {\n        if (indent.includes('\\t')) {\n          indentError(input, number, indent.indexOf('\\t'))\n        }\n      } else if (indentType === 'tab') {\n        if (indent.includes(' ')) {\n          indentError(input, number, indent.indexOf(' '))\n        }\n      }\n\n      if (tokens.length) {\n        for (let i = tokens.length - 1; i >= 0; i--) {\n          let type = tokens[i][0]\n          if (type === ',') {\n            lastComma = true\n            break\n          } else if (type === 'space') {\n            continue\n          } else if (type === 'comment') {\n            continue\n          } else if (type === 'newline') {\n            continue\n          } else {\n            break\n          }\n        }\n        comment = tokens[0][0] === 'comment'\n        atrule = tokens[0][0] === 'at-word'\n\n        let brackets = 0\n        for (let i = 0; i < tokens.length - 1; i++) {\n          let type = tokens[i][0]\n          let next = tokens[i + 1][0]\n          if (type === '(') {\n            brackets += 1\n          } else if (type === ')') {\n            brackets -= 1\n          } else if (\n            type === ':' &&\n            brackets === 0 &&\n            (next === 'space' || next === 'newline')\n          ) {\n            colon = true\n          }\n        }\n      }\n\n      let last = tokens[tokens.length - 1]\n      if (last && last[0] === 'newline') prevNumber = last[2]\n    }\n\n    return {\n      number,\n      indent,\n      colon,\n      tokens,\n      atrule,\n      comment,\n      lastComma,\n      before: ''\n    }\n  })\n\n  parts = parts.reduceRight(\n    (all, i) => {\n      if (!i.tokens.length || i.tokens.every(j => j[0] === 'newline')) {\n        let prev = all[0]\n        let before = i.indent + i.tokens.map(j => j[1]).join('')\n        prev.before = before + prev.before\n      } else {\n        all.unshift(i)\n      }\n      return all\n    },\n    [{ end: true, before: '' }]\n  )\n\n  parts.forEach((part, i) => {\n    if (i === 0) return\n\n    let prev = parts[i - 1]\n    let last = prev.tokens[prev.tokens.length - 1]\n    if (last && last[0] === 'newline') {\n      part.before = last[1] + part.before\n      prev.tokens.pop()\n    }\n  })\n\n  return parts\n}\n","const SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERICK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\nconst COMMA = ','.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"'()/;\\\\{]/g\nconst RE_NEW_LINE = /[\\n\\f\\r]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"'(),:;@\\\\{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\n\nmodule.exports = function tokenize(input) {\n  let tokens = []\n  let css = input.css.valueOf()\n\n  let code,\n    next,\n    quote,\n    lines,\n    last,\n    content,\n    escape,\n    nextLine,\n    nextOffset,\n    escaped,\n    escapePos,\n    prev,\n    n\n\n  let length = css.length\n  let offset = -1\n  let line = 1\n  let pos = 0\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, line, pos - offset)\n  }\n\n  while (pos < length) {\n    code = css.charCodeAt(pos)\n\n    if (\n      code === NEWLINE ||\n      code === FEED ||\n      (code === CR && css.charCodeAt(pos + 1) !== NEWLINE)\n    ) {\n      offset = pos\n      line += 1\n    }\n\n    switch (code) {\n      case CR:\n        if (css.charCodeAt(pos + 1) === NEWLINE) {\n          offset = pos\n          line += 1\n          pos += 1\n          tokens.push(['newline', '\\r\\n', line - 1])\n        } else {\n          tokens.push(['newline', '\\r', line - 1])\n        }\n        break\n\n      case FEED:\n      case NEWLINE:\n        tokens.push(['newline', css.slice(pos, pos + 1), line - 1])\n        break\n\n      case SPACE:\n      case TAB:\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (code === SPACE || code === TAB)\n\n        tokens.push(['space', css.slice(pos, next)])\n        pos = next - 1\n        break\n\n      case OPEN_CURLY:\n        tokens.push(['{', '{', line, pos - offset])\n        break\n\n      case CLOSE_CURLY:\n        tokens.push(['}', '}', line, pos - offset])\n        break\n\n      case COLON:\n        tokens.push([':', ':', line, pos - offset])\n        break\n\n      case SEMICOLON:\n        tokens.push([';', ';', line, pos - offset])\n        break\n\n      case COMMA:\n        tokens.push([',', ',', line, pos - offset])\n        break\n\n      case OPEN_PARENTHESES:\n        prev = tokens.length ? tokens[tokens.length - 1][1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) unclosed('bracket')\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          tokens.push([\n            'brackets',\n            css.slice(pos, next + 1),\n            line,\n            pos - offset,\n            line,\n            next - offset\n          ])\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            tokens.push(['(', '(', line, pos - offset])\n          } else {\n            tokens.push([\n              'brackets',\n              content,\n              line,\n              pos - offset,\n              line,\n              next - offset\n            ])\n            pos = next\n          }\n        }\n\n        break\n\n      case CLOSE_PARENTHESES:\n        tokens.push([')', ')', line, pos - offset])\n        break\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) unclosed('quote')\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        content = css.slice(pos, next + 1)\n        lines = content.split('\\n')\n        last = lines.length - 1\n\n        if (last > 0) {\n          nextLine = line + last\n          nextOffset = next - lines[last].length\n        } else {\n          nextLine = line\n          nextOffset = offset\n        }\n\n        tokens.push([\n          'string',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          nextLine,\n          next - nextOffset\n        ])\n\n        offset = nextOffset\n        line = nextLine\n        pos = next\n        break\n\n      case AT:\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n        tokens.push([\n          'at-word',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          line,\n          next - offset\n        ])\n        pos = next\n        break\n\n      case BACKSLASH:\n        next = pos\n        escape = true\n\n        nextLine = line\n\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (escape) {\n          if (code === CR && css.charCodeAt(next + 2) === NEWLINE) {\n            next += 2\n            nextLine += 1\n            nextOffset = next\n          } else if (code === CR || code === NEWLINE || code === FEED) {\n            next += 1\n            nextLine += 1\n            nextOffset = next\n          } else {\n            next += 1\n          }\n        }\n        tokens.push([\n          'word',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          line,\n          next - offset\n        ])\n        if (nextLine !== line) {\n          line = nextLine\n          offset = nextOffset\n        }\n        pos = next\n        break\n\n      default:\n        n = css.charCodeAt(pos + 1)\n\n        if (code === SLASH && n === ASTERICK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) unclosed('comment')\n\n          content = css.slice(pos, next + 1)\n          lines = content.split('\\n')\n          last = lines.length - 1\n\n          if (last > 0) {\n            nextLine = line + last\n            nextOffset = next - lines[last].length\n          } else {\n            nextLine = line\n            nextOffset = offset\n          }\n\n          tokens.push([\n            'comment',\n            content,\n            line,\n            pos - offset,\n            nextLine,\n            next - nextOffset\n          ])\n\n          offset = nextOffset\n          line = nextLine\n          pos = next\n        } else if (code === SLASH && n === SLASH) {\n          RE_NEW_LINE.lastIndex = pos + 1\n          RE_NEW_LINE.test(css)\n          if (RE_NEW_LINE.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_NEW_LINE.lastIndex - 2\n          }\n\n          content = css.slice(pos, next + 1)\n\n          tokens.push([\n            'comment',\n            content,\n            line,\n            pos - offset,\n            line,\n            next - offset,\n            'inline'\n          ])\n\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          tokens.push([\n            'word',\n            css.slice(pos, next + 1),\n            line,\n            pos - offset,\n            line,\n            next - offset\n          ])\n          pos = next\n        }\n\n        break\n    }\n\n    pos++\n  }\n\n  return tokens\n}\n","let stringify = require('./stringify')\nlet parse = require('./parse')\n\nmodule.exports = { stringify, parse }\n","let Stringifier = require('./stringifier')\n\nmodule.exports = function stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n","let { Input } = require('postcss')\n\nlet preprocess = require('./preprocess')\nlet tokenizer = require('./tokenize')\nlet Parser = require('./parser')\nlet liner = require('./liner')\n\nmodule.exports = function parse(source, opts) {\n  let input = new Input(source, opts)\n\n  let parser = new Parser(input)\n  parser.tokens = tokenizer(input)\n  parser.parts = preprocess(input, liner(parser.tokens))\n  parser.loop()\n\n  return parser.root\n}\n","let { Declaration, Comment, AtRule, Rule, Root } = require('postcss')\n\nmodule.exports = class Parser {\n  constructor(input) {\n    this.input = input\n\n    this.pos = 0\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n\n    this.extraIndent = false\n    this.prevIndent = undefined\n    this.step = undefined\n\n    this.root.source = { input, start: { line: 1, column: 1 } }\n  }\n\n  loop() {\n    let part\n    while (this.pos < this.parts.length) {\n      part = this.parts[this.pos]\n\n      if (part.comment) {\n        this.comment(part)\n      } else if (part.atrule) {\n        this.atrule(part)\n      } else if (part.colon) {\n        let next = this.nextNonComment(this.pos)\n\n        if (next.end || next.atrule) {\n          this.decl(part)\n        } else {\n          let moreIndent = next.indent.length > part.indent.length\n          if (!moreIndent) {\n            this.decl(part)\n          } else if (moreIndent && next.colon) {\n            this.rule(part)\n          } else if (moreIndent && !next.colon) {\n            this.decl(part)\n          }\n        }\n      } else if (part.end) {\n        this.root.raws.after = part.before\n      } else {\n        this.rule(part)\n      }\n\n      this.pos += 1\n    }\n\n    for (let i = this.tokens.length - 1; i >= 0; i--) {\n      if (this.tokens[i].length > 3) {\n        let last = this.tokens[i]\n        this.root.source.end = {\n          line: last[4] || last[2],\n          column: last[5] || last[3]\n        }\n        break\n      }\n    }\n  }\n\n  comment(part) {\n    let token = part.tokens[0]\n    let node = new Comment()\n    this.init(node, part)\n    node.source.end = { line: token[4], column: token[5] }\n    this.commentText(node, token)\n  }\n\n  atrule(part) {\n    let atword = part.tokens[0]\n    let params = part.tokens.slice(1)\n\n    let node = new AtRule()\n    node.name = atword[1].slice(1)\n    this.init(node, part)\n\n    if (node.name === '') this.unnamedAtrule(atword)\n\n    while (!part.end && part.lastComma) {\n      this.pos += 1\n      part = this.parts[this.pos]\n      params.push(['space', part.before + part.indent])\n      params = params.concat(part.tokens)\n    }\n\n    node.raws.afterName = this.firstSpaces(params)\n    this.keepTrailingSpace(node, params)\n    this.checkSemicolon(params)\n    this.checkCurly(params)\n    this.raw(node, 'params', params, atword)\n  }\n\n  decl(part) {\n    let node = new Declaration()\n    this.init(node, part)\n\n    let between = ''\n    let colon = 0\n    let value = []\n    let prop = ''\n    for (let i = 0; i < part.tokens.length; i++) {\n      let token = part.tokens[i]\n      if (token[0] === ':') {\n        between += token[1]\n        colon = token\n        value = part.tokens.slice(i + 1)\n        break\n      } else if (token[0] === 'comment' || token[0] === 'space') {\n        between += token[1]\n      } else if (between !== '') {\n        this.badProp(token)\n      } else {\n        prop += token[1]\n      }\n    }\n\n    if (prop === '') this.unnamedDecl(part.tokens[0])\n    node.prop = prop\n\n    let next = this.parts[this.pos + 1]\n\n    while (\n      !next.end &&\n      !next.atrule &&\n      !next.colon &&\n      next.indent.length > part.indent.length\n    ) {\n      value.push(['space', next.before + next.indent])\n      value = value.concat(next.tokens)\n      this.pos += 1\n      next = this.parts[this.pos + 1]\n    }\n\n    let last = value[value.length - 1]\n    if (last && last[0] === 'comment') {\n      value.pop()\n      let comment = new Comment()\n      this.current.push(comment)\n      comment.source = {\n        input: this.input,\n        start: { line: last[2], column: last[3] },\n        end: { line: last[4], column: last[5] }\n      }\n      let prev = value[value.length - 1]\n      if (prev && prev[0] === 'space') {\n        value.pop()\n        comment.raws.before = prev[1]\n      }\n      this.commentText(comment, last)\n    }\n\n    for (let i = value.length - 1; i > 0; i--) {\n      let t = value[i][0]\n      if (t === 'word' && value[i][1] === '!important') {\n        node.important = true\n        if (i > 0 && value[i - 1][0] === 'space') {\n          node.raws.important = value[i - 1][1] + '!important'\n          value.splice(i - 1, 2)\n        } else {\n          node.raws.important = '!important'\n          value.splice(i, 1)\n        }\n        break\n      } else if (t !== 'space' && t !== 'newline' && t !== 'comment') {\n        break\n      }\n    }\n\n    node.raws.between = between + this.firstSpaces(value)\n    this.checkSemicolon(value)\n    this.raw(node, 'value', value, colon)\n  }\n\n  rule(part) {\n    let node = new Rule()\n    this.init(node, part)\n\n    let selector = part.tokens\n    let next = this.parts[this.pos + 1]\n\n    while (!next.end && next.indent.length === part.indent.length) {\n      selector.push(['space', next.before + next.indent])\n      selector = selector.concat(next.tokens)\n      this.pos += 1\n      next = this.parts[this.pos + 1]\n    }\n\n    this.keepTrailingSpace(node, selector)\n    this.checkCurly(selector)\n    this.raw(node, 'selector', selector)\n  }\n\n  /* Helpers */\n\n  indent(part) {\n    let indent = part.indent.length\n    let isPrev = typeof this.prevIndent !== 'undefined'\n\n    if (!isPrev && indent) this.indentedFirstLine(part)\n\n    if (!this.step && indent) {\n      this.step = indent\n      this.root.raws.indent = part.indent\n    }\n\n    if (isPrev && this.prevIndent !== indent) {\n      let diff = indent - this.prevIndent\n      if (diff > 0) {\n        if (diff !== this.step) {\n          this.wrongIndent(this.prevIndent + this.step, indent, part)\n        } else if (this.current.last.push) {\n          this.current = this.current.last\n        } else {\n          this.extraIndent = ''\n          for (let i = 0; i < diff; i++) {\n            this.extraIndent += ' '\n          }\n        }\n      } else if (diff % this.step !== 0) {\n        let m = indent + (diff % this.step)\n        this.wrongIndent(`${m} or ${m + this.step}`, indent, part)\n      } else {\n        for (let i = 0; i < -diff / this.step; i++) {\n          this.current = this.current.parent\n        }\n      }\n    }\n\n    this.prevIndent = indent\n  }\n\n  init(node, part) {\n    this.indent(part)\n\n    if (!this.current.nodes) this.current.nodes = []\n    this.current.push(node)\n\n    node.raws.before = part.before + part.indent\n    if (this.extraIndent) {\n      node.raws.extraIndent = this.extraIndent\n      this.extraIndent = false\n    }\n    node.source = {\n      start: { line: part.tokens[0][2], column: part.tokens[0][3] },\n      input: this.input\n    }\n  }\n\n  checkCurly(tokens) {\n    for (let token of tokens) {\n      if (token[0] === '{') {\n        this.error('Unnecessary curly bracket', token[2], token[3])\n      }\n    }\n  }\n\n  checkSemicolon(tokens) {\n    for (let token of tokens) {\n      if (token[0] === ';') {\n        this.error('Unnecessary semicolon', token[2], token[3])\n      }\n    }\n  }\n\n  keepTrailingSpace(node, tokens) {\n    let lastSpace = tokens[tokens.length - 1]\n    if (lastSpace && lastSpace[0] === 'space') {\n      tokens.pop()\n      node.raws.sssBetween = lastSpace[1]\n    }\n  }\n\n  firstSpaces(tokens) {\n    let result = ''\n    for (let i = 0; i < tokens.length; i++) {\n      if (tokens[i][0] === 'space' || tokens[i][0] === 'newline') {\n        result += tokens.shift()[1]\n        i -= 1\n      } else {\n        break\n      }\n    }\n    return result\n  }\n\n  raw(node, prop, tokens, altLast) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let sss = tokens.reduce((all, i) => all + i[1], '')\n      let raw = tokens.reduce((all, i) => {\n        if (i[0] === 'comment' && i[6] === 'inline') {\n          return all + '/* ' + i[1].slice(2).trim() + ' */'\n        } else {\n          return all + i[1]\n        }\n      }, '')\n      node.raws[prop] = { value, raw }\n      if (sss !== raw) node.raws[prop].sss = sss\n    }\n    node[prop] = value\n\n    let last\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      if (tokens[i].length > 2) {\n        last = tokens[i]\n        break\n      }\n    }\n    if (!last) last = altLast\n\n    node.source.end = {\n      line: last[4] || last[2],\n      column: last[5] || last[3]\n    }\n  }\n\n  nextNonComment(pos) {\n    let next = pos\n    let part\n    while (next < this.parts.length) {\n      next += 1\n      part = this.parts[next]\n      if (part.end || !part.comment) break\n    }\n    return part\n  }\n\n  commentText(node, token) {\n    let text = token[1]\n    if (token[6] === 'inline') {\n      node.raws.inline = true\n      text = text.slice(2)\n    } else {\n      text = text.slice(2, -2)\n    }\n\n    let match = text.match(/^(\\s*)([^]*\\S)(\\s*)\\n?$/)\n    if (match) {\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.inlineRight = match[3]\n    } else {\n      node.text = ''\n      node.raws.left = ''\n      node.raws.inlineRight = ''\n    }\n  }\n\n  // Errors\n\n  error(msg, line, column) {\n    throw this.input.error(msg, line, column)\n  }\n\n  unnamedAtrule(token) {\n    this.error('At-rule without name', token[2], token[3])\n  }\n\n  unnamedDecl(token) {\n    this.error('Declaration without name', token[2], token[3])\n  }\n\n  indentedFirstLine(part) {\n    this.error('First line should not have indent', part.number, 1)\n  }\n\n  wrongIndent(expected, real, part) {\n    let msg = `Expected ${expected} indent, but get ${real}`\n    this.error(msg, part.number, 1)\n  }\n\n  badProp(token) {\n    this.error('Unexpected separator in property', token[2], token[3])\n  }\n}\n","module.exports = function liner(tokens) {\n  let line = []\n  let result = [line]\n  let brackets = 0\n  for (let token of tokens) {\n    line.push(token)\n    if (token[0] === '(') {\n      brackets += 1\n    } else if (token[0] === ')') {\n      brackets -= 1\n    } else if (token[0] === 'newline' && brackets === 0) {\n      line = []\n      result.push(line)\n    }\n  }\n  return result\n}\n","import stylelint from \"stylelint\";\nimport sugarss from \"sugarss\";\nconst _lint = stylelint.lint;\nstylelint.lint = options => {\n  if (options?.config?.customSyntax === \"sugarss\") {\n    options.config.customSyntax = sugarss;\n  }\n  return _lint.call(stylelint, options);\n}\nexport {stylelint as default};\n"],"names":["_export_prefix_","prop","match","_export_unprefixed_","replace","AT_RULES","Set","SELECTORS","PROPERTIES","PROPERTY_VALUES","_export_unprefix_","value","isStandardSyntaxAtRule","atRule","nodes","params","mixin","variable","raws","afterName","report","problem","ruleName","result","message","messageArgs","line","node","index","endIndex","word","stylelint","ruleSeverities","customMessages","ruleMetadata","quiet","start","rangeBy","startLine","Error","ignoreDisables","config","disabledRanges","ranges","all","range","undefined","end","rules","includes","disabledWarnings","push","rule","severity","stylelintError","stylelintWarning","warningProperties","warningMessage","args","format","reduce","arg","String","printfLike","buildWarningMessage","warn","ruleMessages","messages","newMessages","messageId","messageText","Object","entries","concat","arrayEqual","a","b","Array","isArray","length","every","elem","isObject","o","prototype","toString","call","isBoolean","Boolean","isNullish","isNumber","Number","isRegExp","RegExp","isString","isPlainObject","ctor","prot","constructor","hasOwnProperty","_isPlainObject","assert","console","assertFunction","Function","isFunction","assertNumber","assertString","IGNORED_OPTIONS","validateOptions","optionDescriptions","noErrors","optionDescription","validate","complain","stylelintType","opts","possible","actual","optional","startsWith","nothingPossible","stringify","flat","isValid","optionName","optionValue","has","possibleValue","possibility","JSON","rejected","p","primary","_secondary","context","root","walkAtRules","name","identifier","toLowerCase","fix","isAutoprefixable","meta","url","fixable","openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","uLower","uUpper","plus","isUnicodeRange","walk","cb","bubble","i","max","type","stringifyNode","custom","buf","customResult","quote","unclosed","before","after","minus","dot","exp","EXP","ValueParser","this","input","next","prev","token","escape","escapePos","whitespacePos","parenthesesOpenPos","parent","tokens","pos","code","stack","balanced","slice","sourceEndIndex","sourceIndex","indexOf","pop","test","parse","unit","nextCode","nextNextCode","likeNumber","number","getDeclarationValue","decl","raw","matchesStringOrRegExp","comparison","testAgainstStringOrRegExpOrArray","inputItem","testResult","testAgainstStringOrRegExp","comparisonItem","pattern","substring","firstComparisonChar","lastComparisonChar","secondToLastComparisonChar","comparisonIsRegex","valueMatch","optionsMatches","options","propertyName","annotation","secondaryOptions","ignoreAnnotations","walkDecls","important","valueParser","isAnnotation","tokenValue","primaryValues","vendor","primaryOptionArray","atRuleNameSpaceChecker","source","locationChecker","err","m","checkedRuleName","errTarget","checkColon","configurationError","text","isSingleLineString","isWhitespace","char","whitespaceChecker","targetWhitespace","expectation","activeArgs","lineCheckStr","onlyOneChar","allowIndentation","expectBefore","rejectBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","expectAfter","rejectAfter","expectedAfterSingleLine","rejectedAfterSingleLine","expectedAfterMultiLine","rejectedAfterMultiLine","messageFunc","expectedBefore","_activeArgs2","expectedChar","charAt","expectBeforeAllowingIndentation","_activeArgs","oneCharBefore","twoCharsBefore","rejectedBefore","_activeArgs3","expectedAfter","_activeArgs4","oneCharAfter","twoCharsAfter","threeCharsAfter","rejectedAfter","_activeArgs5","beforeAllowingIndentation","obj","afterOneOnly","checker","declarationValueIndex","prefix","suffix","between","count","str","hasLessInterpolation","string","hasPsvInterpolation","hasScssInterpolation","hasTplInterpolation","hasInterpolation","isStandardSyntaxValue","normalizedValue","setDeclarationValue","expected","unfixed","fixed","ALPHA_PROPS","ALPHA_FUNCS","exceptProperties","optionFuncs","freeze","expFunc","fixFunc","asNumber","percentage","isPercentage","asPercentage","needsFix","parsedValue","alpha","findAlphaInValue","filter","slashNodeIndex","findIndex","find","findAlphaInFunction","toPrecision","dimension","expectedName","toUpperCase","uniteSets","set","atKeywords","ignoreAtRules","atName","addEmptyLineBefore","newline","repeat","getNodeLine","getPreviousNonSharedLineCommentNode","previousNode","previousNode2","hasEmptyLine","getNextNonSharedLineCommentNode","nextNode","_export_isRoot_","_export_isRule_","_export_isAtRule_","_export_isComment_","_export_isDeclaration_","_export_isValueFunction_","_export_hasSource_","nodesShareLines","isSharedLineComment","isComment","nextNonSharedLineCommentNode","parentNode","isRoot","isAfterComment","hasBlock","statement","isBlocklessAtRuleAfterBlocklessAtRule","isAtRule","isBlocklessAtRuleAfterSameNameBlocklessAtRule","isFirstNested","first","parentNodes","firstNode","hasSource","openingBraceLine","isFirstNodeOfRoot","removeEmptyLinesBefore","except","ignore","isNested","hasEmptyLineBefore","expectEmptyLineBefore","isAtRuleAfterSameNameAtRule","beforeBlockString","noRawBefore","isRule","selector","rawNodeString","blockString","hasEmptyBlock","check","statementString","childNodeTypes","map","item","spaces","split","addEmptyLineAfter","removeEmptyLinesAfter","walkRules","flattenArray","validateObjectWithArrayProps","validators","values","some","v","property","atRuleName","propList","nodeString","nextNonCommentNode","startNode","nodeToCheck","msg","_secondaryOptions","statementRaws","blockIsMultiLine","firstWhitespaceIndex","search","newlineBefore","newlineAfter","newlineIndex","reportIndex","nodeToCheckRaws","DISABLE_COMMAND","DISABLE_LINE_COMMAND","DISABLE_NEXT_LINE_COMMAND","ENABLE_COMMAND","ALL_COMMANDS","extractStylelintCommand","comment","command","isStylelintCommand","ignoreComments","child","hasNotableChild","positionBy","beforeBraceNoRaw","ignoreSelectors","backupCommentNextBefores","Map","reNewLine","newLineMatch","delete","clear","fixTarget","fixTargetRaws","spaceIndex","isStandardSyntaxFunction","isStandardSyntaxColorFunction","fnNode","LEGACY_FUNCS","LEGACY_NOTATION_FUNCS","isValueFunction","hasCommas","commaCount","childNode","isComma","atLeastOneSpace","whitespace","hex","unexpected","HEX","isUrlFunction","isHexColor","hasAlphaChannel","statementFirst","IGNORED_FUNCTIONS","isIgnoredFunction","atRuleParamIndex","mediaName","regexpPattern","fullName","customMediaName","isStandardSyntaxHexColor","endsWith","hexMatch","exec","hexValue","isValidHex","acceptCustomIdentsProperties","longhandSubPropertiesOfShorthandProperties","longhandTimeProperties","shorthandTimeProperties","r","grad","turn","rad","Math","PI","t","n","pow","round","e","u","isFinite","g","s","h","min","floor","l","d","f","c","y","parseInt","substr","object","N","M","H","$","j","parsed","trim","x","rgba","brightness","isDark","isLight","toHex","toRgb","toRgbString","toHsl","toHslString","toHsv","invert","w","saturate","desaturate","grayscale","lighten","darken","rotate","hue","isEqual","S","z","cbrt","atan2","sqrt","cos","sin","parseHwbWithCommaString","whiteness","blackness","extraArgs","colordInstance","colord","parseGrayString","lightness","lightnessWithUnit","colorObject","alphaWithUnit","forEach","extend","white","bisque","blue","cadetblue","chartreuse","chocolate","coral","antiquewhite","aqua","azure","whitesmoke","papayawhip","plum","blanchedalmond","black","gold","goldenrod","gainsboro","cornsilk","cornflowerblue","burlywood","aquamarine","beige","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkkhaki","darkgray","darkgreen","darkgrey","peachpuff","darkmagenta","darkred","darkorchid","darkorange","darkslateblue","gray","darkslategray","darkslategrey","deeppink","deepskyblue","wheat","firebrick","floralwhite","ghostwhite","darkviolet","magenta","green","dodgerblue","grey","honeydew","hotpink","blueviolet","forestgreen","lawngreen","indianred","indigo","fuchsia","brown","maroon","mediumblue","lightcoral","darkturquoise","lightcyan","ivory","lightyellow","lightsalmon","lightseagreen","linen","mediumaquamarine","lemonchiffon","lime","khaki","mediumseagreen","limegreen","mediumspringgreen","lightskyblue","lightblue","midnightblue","lightpink","mistyrose","moccasin","mintcream","lightslategray","lightslategrey","navajowhite","navy","mediumvioletred","powderblue","palegoldenrod","oldlace","paleturquoise","mediumturquoise","mediumorchid","rebeccapurple","lightsteelblue","mediumslateblue","thistle","tan","orchid","mediumpurple","purple","pink","skyblue","springgreen","palegreen","red","yellow","slateblue","lavenderblush","peru","palevioletred","violet","teal","slategray","slategrey","aliceblue","darkseagreen","darkolivegreen","greenyellow","seagreen","seashell","tomato","silver","sienna","lavender","lightgreen","orange","orangered","steelblue","royalblue","turquoise","yellowgreen","salmon","saddlebrown","sandybrown","rosybrown","darksalmon","lightgoldenrodyellow","snow","lightgrey","lightgray","dimgray","dimgrey","olivedrab","olive","toName","closest","toHwb","toHwbString","toLab","delta","abs","F","L","I","P","k","q","A","B","toLch","toLchString","_colordClass","parsers","named","original","NODE_TYPES","ignoreProperties","rawColorString","colorString","color","namedColor","isStandardSyntaxComment","walkComments","normalizedPattern","canShrink","expectedHex","longer","shorter","hexVariant","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","rawComment","firstFourChars","leftMatches","rightMatches","opener","leftSpace","rightSpace","closer","left","right","addWhitespaceBefore","addWhitespaceAfter","isCustomProperty","isScssVariable","isStandardSyntaxProperty","propName","testAgainstString","matchesWord","containsString","customProperty","knownCustomProperties","add","isVarFunction","isDashedIdent","eachDeclarationBlock","callback","each","decls","bind","props","IGNORED_VALUES","ignoreShorthands","longhandToShorthands","shorthand","longhandProps","longhand","shorthands","get","eachDecl","longhandDeclarations","unprefixedProp","shorthandProperties","shorthandProperty","prefixedShorthandProperty","longhandDeclaration","shorthandProps","prefixedShorthandData","from","sort","SKIP","ONLY","styleSearch","target","skipComments","comments","skipStrings","strings","skipFunctionNames","functionNames","skipFunctionArguments","functionArguments","skipParentheticals","parentheticals","onceOptionUsed","keys","key","openingQuote","onlyComments","onlyStrings","onlyFunctionNames","onlyFunctionArguments","onlyParentheticals","insideString","insideComment","insideSingleLineComment","insideParens","insideFunctionArguments","openingParenCount","matchCount","getMatch","ti","tl","checkResult","getMatchBase","targetString","targetStringLength","startIndex","currentChar","handleMatch","isFunctionName","once","declarationBangSpaceChecker","indexOffset","declString","valueString","bangIndex","setFixed","val","targetBefore","targetAfter","ignoreDuplicates","ignoreDiffValues","ignorePrefixlessSameValues","lowerProp","indexDuplicate","removePreviousDuplicate","duplicateDecl","duplicateValue","declarations","lowerProperty","declToRemove","remove","parentRule","semicolon","last","declValue","checkLastNode","hasSemicolon","overrideables","longhandProp","declaration","isStandardSyntaxDeclaration","lang","declarationColonSpaceChecker","endOfPropIndex","propPlusColon","colonIndex","isAfterStandardPropertyDeclaration","prevNode","isDeclaration","getImportantPosition","lastIndex","propKeys","propPatterns","getDimension","blurChar","blurInterpolation","parsedUnit","propKey","propIdentifier","isValueNode","validator","propLength","indexToCheck","betweenStart","sliceIndex","betweenBefore","betweenAfter","isNumbery","basicKeywords","systemFontKeywords","fontFamilyKeywords","fontWeightRelativeKeywords","fontWeightAbsoluteKeywords","fontWeightNonNumericKeywords","fontWeightNumericKeywords","fontWeightKeywords","fontStyleKeywords","fontVariantKeywords","fontStretchKeywords","fontSizeKeywords","lineHeightKeywords","fontShorthandKeywords","animationNameKeywords","animationTimingFunctionKeywords","animationIterationCountKeywords","animationDirectionKeywords","animationFillModeKeywords","animationPlayStateKeywords","animationShorthandKeywords","gridRowKeywords","gridColumnKeywords","gridAreaKeywords","counterIncrementKeywords","counterResetKeywords","listStyleTypeKeywords","listStylePositionKeywords","listStyleImageKeywords","listStyleShorthandKeywords","camelCaseKeywords","keyframeSelectorKeywords","systemColorsKeywords","lengthUnits","units","isValidFontSize","numberUnit","isVariable","nodeTypesToCheck","findFontFamily","fontFamilies","valueNodes","postcssValueParser","children","needMergeNodesByValue","mergeCharacters","valueNode","valueLowerCase","prevPrevNode","fontFamily","lastFontFamily","secondNode","charactersBetween","family","makeMutableFontFamilies","mutableNodes","idx","newNode","rawName","hasQuotes","resetIndexes","offset","removeQuotes","openIndex","closeIndex","addQuotes","fixedName","checkFamilyName","fontFamilyNode","rawFamily","font","required","quotesRequired","recommended","quotesRecommended","fontFamilyNodes","process","cwd","env","NO_COLOR","FORCE_COLOR","argv","isColorSupported","platform","formatter","open","close","replaceClose","nextIndex","createColors","enabled","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","_module_exports_","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","tokenizer$1","content","escaped","currentToken","css","valueOf","ignoreErrors","buffer","returned","what","error","back","nextToken","ignoreUnclosed","controlChar","fromCharCode","endOfFile","position","Input","HIGHLIGHT_THEME","brackets","pico","class","hash","getTokenType","processor","terminalHighlight","tokenizer","join","registerInput","dependant","CssSyntaxError","column","file","plugin","super","reason","endLine","endColumn","setMessage","captureStackTrace","showSourceCode","mark","aside","lines","maxWidth","gutter","spacing","default","_export_isClean_","Symbol","_export_my_","DEFAULT_RAW","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","emptyBody","commentLeft","commentRight","Stringifier","builder","document","body","rawValue","block","ownSemicolon","atrule","own","detect","rawCache","beforeAfter","method","capitalize","rawSemicolon","rawEmptyBody","rawIndent","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","depth","step","cloneNode","cloned","Node","defaults","isClean","my","clone","append","data","removeChild","stringifier","assign","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","bookmark","foundSelf","defaultType","cleanRaws","keepBetween","toJSON","_","inputs","emitInputs","inputsNextIndex","inputId","positionInside","getProxyProcessor","markDirty","toProxy","proxyCache","Proxy","addToError","postcssNode","proxyOf","Declaration","noop","cosmiconfig","catch","SourceMapConsumer","SourceMapGenerator","_require_source_map_js_","dirname","_require_path_","PreviousMap","loadAnnotation","inline","startWith","loadMap","mapFile","consumer","consumerCache","withContent","sourcesContent","getAnnotationURL","sourceMapString","lastIndexOf","decodeInline","decodeURIComponent","lastMatch","Buffer","window","atob","fromBase64","encoding","loadFile","path","existsSync","readFileSync","fromSourceMap","isMap","prevPath","mappings","_mappings","sections","resolve","isAbsolute","fromOffsetCache","sourceMapAvailable","pathAvailable","hasBOM","mapResolve","id","size","random","nanoid","fromOffset","lastLine","lineToIndex","prevIndex","mid","col","origin","pathToFileURL","to","fromUrl","originalPositionFor","URL","sourceRoot","protocol","fileURLToPath","sourceContentFor","json","_objectSpread","Rule","AtRule","Root","LazyResult","Processor","relative","sep","MapGenerator","cssString","mapOpts","usesFileUrls","absolute","previous","previousMaps","isInline","isSourcesContent","clearAnnotation","setSourcesContent","already","toFileUrl","toUrl","setSourceContent","applyPrevMaps","applySourceMap","toBase64","btoa","unescape","encodeURIComponent","addAnnotation","outputFile","eol","generateMap","generateString","addMapping","generated","encodeURI","sourcePath","noSource","mapping","generate","Comment","cleanSource","markDirtyUp","Container","iterator","getIterator","indexes","normalize","prepend","reverse","unshift","exist","existIndex","splice","removeAll","replaceValues","fast","condition","sample","processed","rebuild","other","lastEach","registerParse","registerRule","registerAtRule","registerRoot","setPrototypeOf","Document","toResult","registerLazyResult","registerProcessor","printed","warnOnce","Warning","opt","Result","lastPlugin","postcssPlugin","warning","warnings","list","separators","array","current","func","inQuote","prevQuote","letter","space","selectors","SAFE_COMMENT_NEIGHBOR","empty","Parser","createTokenizer","freeSemicolon","emptyRule","endFile","init","getPosition","bracket","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","findLastWithPosition","shift","firstSpaces","precheckMissedSemicolon","stringFrom","spacesFromEnd","cache","hasWord","checkMissedSemicolon","unnamedAtrule","spacesAndCommentsFromStart","unexpectedClose","unclosedBlock","clean","lastTokenType","element","doubleColon","founded","parser","NODE_ENV","TYPE_TO_CLASS_NAME","PLUGIN_PROPS","prepare","Once","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","DocumentExit","OnceExit","NOT_VISITORS","isPromise","then","getEvents","toStack","events","eventIndex","visitors","visitorIndex","cleanMarks","postcss","stringified","syntax","helpers","plugins","toStringTag","sync","onFulfilled","onRejected","async","finally","onFinally","Promise","reject","processing","runAsync","getAsyncError","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","subRoot","visitSync","event","visitor","promise","handleError","roots","postcssVersion","pluginName","pluginVer","runtimeVer","version","visitTick","visit","registerPostcss","NoWorkResult","_processor","_css","_opts","_map","self","defineProperty","generatedCSS","generatedMap","_root","use","normalized","_excluded","_excluded2","fromJSON","ownInputs","inputHydrated","__proto__","_defaults$source","_objectWithoutProperties","initializer","warningPrinted","creator","LANG","transformer","processOpts","pluginOpts","ignoreFontFamilies","lastValue","isLastFontFamilyVariable","isFamilyNameKeyword","valueIndex","fixer","div","symb","functionCommaSpaceChecker","hasFixed","argumentStrings","getCommaCheckIndex","commaNode","nodeIndex","commaBefore","commaDataList","checkIndex","ruleNode","expectedWithActual","NAMED_TO_NUMERIC","NUMERIC_TO_NAMED","ignoreRelative","checkWeight","weightValueNode","weightValue","lowerWeightValue","numericValue","namedValue","isFontShorthandProp","hasNumericFontWeight","isDivNode","isPossibleFontWeightNode","operator","expectedOperatorBeforeSign","OPERATORS","OPERATOR_REGEX","ALL_OPERATORS","checkAroundOperator","operatorNode","currentNode","isBeforeOp","operatorSourceIndex","isSingleSpace","lastChar","firstChar","indexOfFirstNewLine","checkWords","operatorIndex","charBefore","charAfter","insertCharAtIndex","checkForOperatorInFirstNode","lastNode","isOperator","checkForOperatorInLastNode","foundOperatorNode","currNode","nodeBefore","nodeAfter","operators","placeIndexOnValueStart","maxAdjacentNewlines","violatedCRLFNewLinesRegex","violatedLFNewLinesRegex","allowedLFNewLinesString","allowedCRLFNewLinesString","stringValue","splittedValue","sourceIndexStart","stringifiedNode","newNodeString","updatedValue","acc","curr","camelCaseFunctions","mathFunctions","mapLowercaseFunctionNamesToCamelCase","ignoreFunctions","needFix","functionName","functionNameLowerCase","expectedFunctionName","ignoreFontFamilyNames","keywords","familyNames","maybeMatch","pre","post","reg","begs","beg","ai","bi","functionArgumentsSearch","parensMatch","balancedMatch","expression","expressionIndex","firstArg","trimEnd","withToPrefix","regexp","matches","isStandardDirection","expectedOpeningMultiLine","rejectedOpeningMultiLine","expectedClosingMultiLine","rejectedClosingMultiLine","functionString","isMultiLine","containsNewline","openingIndex","checkBefore","getCheckBefore","fixBeforeForAlways","fixBeforeForNever","closingIndex","checkAfter","getCheckAfter","fixAfterForAlways","fixAfterForNever","functionsList","isStandardSyntaxUrl","checkArgs","shouldHasQuotes","leftTrimmedArgs","trimStart","complaintIndex","complaintEndIndex","trimmedArg","isEmptyArgument","atRuleParamsLowerCase","getSchemeFromUrl","urlString","_unused","scheme","slashIndex","unspacedUrlString","ACCEPTABLE_AFTER_CLOSING_PAREN","nextChar","checkClosingParen","createFixer","applyFix","whitespaceEndIndex","param","keyframeName","regex","keyframesNode","isStandardSyntaxSelector","atRuleKeyframes","keyframeRule","normalizedSelector","getAtRuleParams","setAtRuleParams","isMathFunction","isWord","isLength","isFraction","parseFloat","isZero","regularNumber","isLineHeight","isFlex","valueNodeIndex","isLineHeightValue","urlFunctionFull","urlFunctionArguments","quotedUrlFunctionFirstArgument","restAtRuleParams","quotedNodeValue","isStandardSyntaxRule","gobbleHex","lower","spaceTerminated","codePoint","fromCodePoint","__esModule","CONTAINS_ESCAPE","ret","gobbled","_len","arguments","_key","commentStart","lastEnd","commentEnd","_export_ensureObject_","_export_getProp_","_export_unesc_","_unesc","_interopRequireDefault","_require__$unesc_","_getProp","_require__$getProp_","_ensureObject","_require__$ensureObject_","_require__$stripComments_","_defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_proto","at","appendToPropertyAndEscape","valueEscaped","originalValue","originalEscaped","setPropertyAndEscape","setPropertyWithoutEscape","isAtPosition","stringifyProperty","valueToString","rawSpaceBefore","rawSpaceAfter","rawSpace","UNIVERSAL","ATTRIBUTE","CLASS","COMBINATOR","COMMENT","ID","NESTING","PSEUDO","ROOT","SELECTOR","STRING","TAG","_node","_require__$node_","types","_getRequireWildcardCache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","_interopRequireWildcard","_require__$types_","WeakMap","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_arrayLikeToArray","_unsupportedIterableToArray","done","TypeError","arr","len","arr2","_setPrototypeOf","_Node","subClass","superClass","_this","create","_step","_iterator","oldNode","oldIndex","_findChildAtPosition","found","atPosition","foundChild","_inferEndPosition","walkAttributes","_this2","walkClasses","_this3","walkCombinators","_this4","_this5","walkIds","_this6","walkNesting","_this7","walkPseudos","_this8","walkTags","_this9","walkUniversals","_this10","_this11","memo","_container","_require__$container_","_Container","_types","trailingComma","_error","handler","Selector","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","merge","quotes","isIdentifier","output","counter","character","extra","escapeEverything","$0","$1","$2","wrap","_cssesc","_require_cssesc_","ClassName","_constructed","_value","Namespace","apply","qualifiedName","namespace","namespaceString","_namespace","ns","_require__$namespace_","Tag","_Namespace","Pseudo","deprecate","fn","unescapeValue","_CSSESC_QUOTE_OPTIONS","_require___$util$unesc_","WRAPPED_IN_QUOTES","warnOfDeprecatedValueAssignment","warnOfDeprecatedQuotedAssignment","warnOfDeprecatedConstructor","deprecatedUsage","quoteMark","unescaped","Attribute","_unescapeValue","handleDeprecatedContructorOpts","getQuotedValue","_determineQuoteMark","cssescopts","CSSESC_QUOTE_OPTIONS","smart","smartQuoteMark","preferredQuoteMark","setValue","_quoteMark","_syncRawValue","numSingleQuotes","numDoubleQuotes","NO_QUOTE","pref","preferCurrentQuoteMark","_handleEscapes","_spacesFor","rawSpaces","_stringFor","spaceName","defaultAttrConcat","attrSpaces","offsetOf","attributeSpaces","operatorSpaces","valueSpaces","insensitive","attrValue","quoted","qm","attribute","_unescapeValue2","_attribute","Universal","Combinator","Nesting","_export_combinator_","_export_word_","_export_comment_","_export_str_","_export_tab_","_export_newline_","_export_feed_","_export_cr_","_export_backslash_","_export_bang_","_export_slash_","_export_doubleQuote_","_export_singleQuote_","_export_space_","_export_greaterThan_","_export_pipe_","_export_equals_","_export_plus_","_export_caret_","_export_tilde_","_export_dollar_","_export_closeSquare_","_export_openSquare_","_export_closeParenthesis_","_export_openParenthesis_","_export_semicolon_","_export_colon_","_export_comma_","_export_at_","_export_asterisk_","_export_ampersand_","nextLine","nextOffset","tokenType","safe","tab","cr","feed","greaterThan","tilde","pipe","combinator","asterisk","ampersand","bang","equals","dollar","caret","openSquare","closeSquare","openParenthesis","closeParenthesis","consumeWord","_unescapable","_wordDelimiters","_require__$tokenTypes_","unescapable","wordDelimiters","hexChars","consumeEscape","hexDigits","FIELDS","TYPE","START_LINE","START_COL","END_LINE","END_COL","START_POS","END_POS","_WHITESPACE_TOKENS","_Object$assign","_require__$selectors$root_","_selector","_require__$selectors$selector_","_className","_require__$selectors$className_","_comment","_require__$selectors$comment_","_id","_require__$selectors$id_","_tag","_require__$selectors$tag_","_string","_require__$selectors$string_","_pseudo","_require__$selectors$pseudo_","_require__$selectors$attribute_","_universal","_require__$selectors$universal_","_combinator","_require__$selectors$combinator_","_nesting","_require__$selectors$nesting_","_sortAscending","_require__$sortAscending_","_tokenize","_require__$tokenize_","_require__$selectors$types_","WHITESPACE_TOKENS","WHITESPACE_EQUIV_TOKENS","tokenStart","tokenEnd","getSource","startColumn","getTokenSource","getTokenSourceSpan","startToken","endToken","unescapeProp","indexesOf","lossy","_errorGenerator","rootSource","errorGenerator","loop","errorOptions","attr","startingToken","currToken","spaceBefore","commentBefore","lastAdded","spaceAfterMeaningfulToken","prevContent","existingComment","oldRawValue","_unescaped","_oldRawValue","oldValue","insensitiveFlag","lastComment","_util","rawLastComment","rawLastValue","parseWhitespaceEquivalentTokens","stopPosition","startPosition","firstToken","lastToken","convertWhitespaceNodesToSpace","requiredSpace","lossySpace","isNamedCombinator","namedCombinator","nameRaw","nextSigTokenPos","locateNextMeaningfulToken","spaceOrDescendantSelectorNodes","_this$convertWhitespa2","_space","_rawSpace","_this$convertWhitespa3","_space2","_rawSpace2","optionalSpace","_this$convertWhitespa","missingBackslash","missingParenthesis","missingSquareBracket","prevToken","universal","nesting","parentheses","unbalanced","parenEnd","parenStart","parenValue","parseParenthesisToken","pseudo","pseudoStr","splitWord","firstCallback","hasClass","escapedDot","isKeyframesPercent","hasId","interpolations","hashIndex","indices","uniqs","ind","classNameOpts","idOpts","tagOpts","throwOnParenthesis","description","an","searchPosition","_parser","_require__$parser_","funcRes","_shouldUpdateSelector","updateSelector","_isLossy","lossless","_parseOptions","_run","transform","_runSync","ast","astSync","transformSync","processSync","tag","className","_require__$attribute_","_require__$className_","_require__$combinator_","_require__$comment_","_require__$id_","_require__$nesting_","_require__$pseudo_","_require__$root_","_require__$selector_","_require__$string_","_require__$tag_","_require__$universal_","_IS_TYPE","isNode","isPseudoElement","isPseudoClass","isPseudo","isContainer","isNamespace","isAttribute","isTag","isUniversal","isSelector","isNesting","isCombinator","isClassName","IS_TYPE","isNodeType","_constructors","_guards","_require__$processor_","_require__$selectors_","_default","isIgnoreAtRule","checkStatement","nestingDepth","ignorePseudoClasses","level","sel","extractPseudoRule","containsPseudoClassesOnly","pseudoRule","containsIgnoredPseudoClassesOnly","emptyLines","getChars","replaceEmptyLines","firstNodeRawsBefore","rootRawsAfter","rootString","maxLines","isSpecialCase","repeatTimes","emptyLFLines","emptyCRLFLines","matchStartIndex","matchEndIndex","eof","codeAfter","rootIndex","codeBefore","isEofNode","checkMatch","isAfterCustomProperty","linebreak","shouldHaveCR","fixData","hasError","reportNewlineError","dataToCheck","hasNewlineToVerify","hasCR","res","transformSelector","selectorParser","fixedSelector","PERCENTAGE_SELECTORS","KEYWORD_SELECTORS","PERCENTAGE_TO_KEYWORD","KEYWORD_TO_PERCENTAGE","keyword","getFromMap","selectorsInBlock","getSelectorsInBlock","selectorTag","checkSelector","isCustomMediaQuery","mediaQuery","isRangeContextMediaFeature","mediaFeature","isStandardSyntaxMediaFeatureName","mediaFeatureName","_Node2","hasFilter","filterReg","parseMediaFeature","parseMediaQuery","parseMediaList","interimIndex","levelLocal","doesHaveUrl","parenthesesLv","_i2","_character","_mediaQueryString","_spaceBefore","_Container2","mediaQueryString","modesEntered","mode","lastModeIndex","mediaFeatureValue","indexLocal","stringNormalized","isCalculationEnabled","mediaFeatureValueStr","localLevel","insideSomeValue","_i","_parsers","rangeOperators","rangeContextNodeParser","nameNode","mediaParser","_require_postcss_media_query_parser_","mediaFeatureNode","parsedRangeContext","ignorePattern","EXCLUDED_PATTERNS","ignoreNonComments","skippedSubStrings","skippedSubStringsIndex","matchAll","subMatch","startOfSubString","checkNewline","nextNewlineIndex","rawLineLength","excludedLength","skippedSubString","startSubString","endSubString","excluded","tryToPopSubString","lineText","nextTwoChars","mediaFeatureColonSpaceChecker","paramColonIndex","colonIndices","beforeColon","afterColon","hasComments","mediaRule","expectedFeatureName","mediaFeatureNames","ignoreMediaFeatureNames","mediaFeatureRangeContext","unprefixedMediaFeatureName","allowedValuesKey","featureName","indexBoost","problems","parsedParams","mediaQueryListCommaWhitespaceChecker","allowTrailingComments","execResult","commaIndex","checkComma","paramCommaIndex","commaIndices","beforeComma","afterComma","findMediaOperator","fixOperatorIndices","checkAfterOperator","beforeOperator","afterOperator","expectedOpeningSingleLine","rejectedOpeningSingleLine","expectedClosingSingleLine","rejectedClosingSingleLine","isSingleLine","resolvedNestedSelector","resolveNestedSelector","parentIsNestAtRule","parentSelectors","parentSelector","newlyResolvedSelectors","resolvedParentSelector","combinedSelector","findAtRuleContext","htmlTypeSelectors","mixedCaseSvgTypeSelectors","levelOneAndTwoPseudoElements","shadowTreePseudoElements","webkitScrollbarPseudoElements","vendorSpecificPseudoElements","pseudoElements","aNPlusBNotationPseudoClasses","aNPlusBOfSNotationPseudoClasses","atRulePagePseudoClasses","linguisticPseudoClasses","logicalCombinationsPseudoClasses","vendorSpecificPseudoClasses","webkitScrollbarPseudoClasses","pseudoClasses","nodeContextLookup","contextMap","getContext","subContexts","nodeSource","baseContext","creativeGetMap","someMap","someThing","parseSelector","ignoreSelectorsWithinList","selectorContextLookup","selectorNode","comparisonContext","referenceSelector","firstChild","nodesByCombinator","nodesAfterLastCombinator","nodesWithoutPseudoClasses","lastCompoundSelectorWithoutPseudoClasses","selectorSpecificity","calculate","entry","specificity","priorComparableSelectors","priorEntry","compare","resolvedSelector","findNotContiguousOrRectangular","areas","names","namedAreas","indicesByRow","row","isContiguousAndRectangular","expectedToken","expectedSameNumber","expectedRectangle","reportSent","firstArea","notSameNumberArea","area","notContiguousOrRectangular","getOffsetByNode","nodeColumn","nodeLine","rawAfterRoot","fixSemiIndices","removeIndices","rawBeforeNode","allowedSemi","rawBeforeIndexStart","rawAfterNode","rawOwnSemicolon","isKeyframeRule","firstDuplicateLine","disallowInList","shouldDisallowDuplicateInList","contextSelectorSet","resolvedSelectorList","flatMap","sortedSelectorList","selectorLine","previousDuplicatePosition","selectorListParsed","selectorForMessage","presentedSelectors","reportedSelectors","noEmptyFirstLineTest","invalidPosition","nodeName","atImport","imports","firstParam","restParams","uri","media","importedUris","isOnlyWhitespace","whitespacesToReject","fixString","findErrorStartIndex","lastEOLIndex","ignoreEmptyLines","isRootFirst","eolWhitespaceIndex","beforeNewlineIndex","rootNode","fixText","rawsParams","rawsSelector","rawsValue","lastEOL","reportFromIndex","eachEolWhitespace","errorIndex","fixFn","animationName","declaredAnimations","animationNames","shouldBeIgnored","findAnimationName","animationNameNode","begin","nextDecl","checkBeforeOperator","_export_all_","allValidProperties","properties","checkPrefixed","shouldCheckPrefixed","baseIndex","toFixed","ignoreUnits","isAfterRule","isAfterSingleLineComment","ident","selectorTree","attributeNode","selectorAttributeOperatorSpaceChecker","attributeNodeString","checkOperator","operatorAfter","setOperatorAfter","rawOperator","rawSpacesOperator","rawOperatorAfter","expectedProp","attributeSelectorString","nextCharIsSpace","fixBefore","prevCharIsSpace","fixAfter","spacesAttribute","rawAttrBefore","attrBefore","setAttrBefore","rawAfter","setAfter","fixPositions","fixPosition","removeTrailingZeros","isStandardSyntaxCombinator","fullSelector","combinatorNode","normalizeCombinator","isKeyframeSelector","resolveNestedSelectors","shouldResolveNestedSelectors","classNode","prevChar","hasInterpolatingAmpersand","nestedSelector","neverFixPositions","alwaysFixPositions","capturingGroupIndex","addLeadingZero","removeLeadingZeros","selectorKey","disallowedProperties","IRREGULAR_WHITESPACES_PATTERN","issue","findIrregularWhitespace","rawAttr","rawAttrAfter","attrAfter","setAttrAfter","attrNode","getRuleSelector","selectorFixed","selectorCombinatorSpaceChecker","locationType","parentParentNode","fixIndices","nextChars","indextoCheckAfter","beforeSelector","afterSelector","nonSpaceCharacter","selectorListCommaWhitespaceChecker","checkDelimiter","isContextFunctionalPseudoClass","normalisedParentName","isNonNegativeInteger","isInteger","total","ignoreAttributes","container","splitList","ignoreInsideBlock","newSelectorString","HUE_FIRST_ARG_FUNCS","HUE_THIRD_ARG_FUNCS","HUE_FUNCS","findHue","isDegree","asDegree","compoundCount","specificitySum","specificities","sum","spec","maxChildSpecificity","maxSpec","childSpecificity","nodeSpecificity","pseudoClass","shouldSkipPseudoClassArgument","simpleSpecificity","ownValue","ownSpecificity","pseudoSpecificity","maxSpecificity","pseudoNode","isStandardSyntaxTypeSelector","_node$parent$parent","parentType","parentValue","selectorCharacters","ignoreId","ignoreClass","ignoreAttribute","selectorAST","tagNode","selectorParent","selectorNodes","rightNode","getRightNodes","paramString","setFirstNodeSpaceBefore","setLastNodeSpaceAfter","expectedPseudo","fixedColon","pseudoElement","isDouble","ignoreNamespaces","ignoreTypes","selectorLowerCase","svgTags","mathMLTags","isCustomElement","tagName","tagNameLowerCase","ignoreDescendant","ignoreChild","ignoreCompounded","ignoreNextSibling","isDescendantCombinator","hasDescendantCombinatorBefore","isChildCombinator","hasChildCombinatorBefore","hasCompoundSelector","isNextSiblingCombinator","isCustomSelector","prevPseudoElement","prevPseudoElementValue","ignoreContextFunctionalPseudoClasses","ignorePseudoElements","expectedValue","expectedPseudoElement","propertiesWithShorthandNotation","ignoredCharacters","normalizedProp","hasIgnoredCharacters","valuesToShorthand","shortestFormString","top","bottom","lowerTop","lowerRight","lowerBottom","lowerLeft","canCondenseToOneValue","canCondenseToTwoValues","_top","_bottom","canCondenseToThreeValues","canCondense","valuesFormString","_require_postcss_selector_parser_","isSimpleSelector","isNot","previousNot","indentAndTrimRight","head","tail","fixComplex","second","isSimple","not","simpleSelectors","firstSelector","fixSimple","checkDeclOrAtRule","getIndex","valueLength","checkRule","correctQuote","erroneousQuote","avoidEscape","needsEscape","fixIndex","replaceQuote","needsCorrectEscape","gridRowProps","gridColumnProps","mapLowercaseKeywordsToCamelCase","ignoreKeywords","camelCaseSvgKeywords","propLowerCase","isCounterIncrementCustomIdentValue","isCounterResetCustomIdentValue","keywordLowerCase","toLocaleLowerCase","expectedKeyword","time","DELAY_PROPERTIES","minimum","ignoreDelay","isAcceptableTime","numTime","timeUnit","propertyValue","timeValueCount","isIgnoredProperty","valueTimeCount","calcTimeValueCount","checkMedia","getMediaFeatureName","checkDecl","valueListCommaWhitespaceChecker","indexToCheckAfter","determineIndex","newValueString","valuePrefixes","ignoreValues","lowerValue","hasPrefix","checkedValue","processValue","expectedUnit","declNode","beforeValue","afterValue","baseIndentLevel","indentInsideParens","indentClosingBrace","spaceCount","indentChar","warningWord","legibleExpectation","quantifiedWarningWord","indentationLevel","getDocument","indentLevel","isSafeInteger","newIndentLevel","indentSize","getIndentLevel","tabMatch","tabCount","spaceMatch","newBaseIndentLevel","firstLine","indents","foundIndents","shortest","MAX_SAFE_INTEGER","foundIndent","fill","afterEnd","nextRoot","inferRootIndentLevel","docSource","scores","lastIndentSize","lastLeadingSpacesLength","vote","leadingSpacesLength","score","leadingSpaces","bestScore","indentSizeDate","inferDocIndentSize","getRootBaseIndentLevel","calculatedLevel","checkMultilineBit","newlineIndentLevel","parentheticalDepth","ignoreInsideParans","outsideParens","precedesClosingParenthesis","expectedIndentLevel","afterNewlineSpaceMatches","afterNewlineSpace","expectedIndentation","currentIndentation","replaceIndentation","declProp","declBetween","atRuleAfterName","atRuleParams","nodeLevel","expectedOpeningBraceIndentation","isFirstChild","lastIndexOfNewline","fixIndentation","closingBraceLevel","expectedClosingBraceIndentation","declLevel","valueLevel","checkValue","ruleLevel","paramLevel","checkAtRuleParams","searchString","replaceString","ignoreUnit","mediaNode","mediaNodes","lastMediaNode","imageSet","imageSetLastNode","attributeName","qualifiedAttribute","prevChildNode","prevChildNodeValue","ignoreAfterCombinators","_require__$alpha_value_notation_","_require__$annotation_no_unknown_","_require__$at_rule_allowed_list_","_require__$at_rule_disallowed_list_","_require__$at_rule_empty_line_before_","_require__$at_rule_name_case_","_require__$at_rule_name_newline_after_","_require__$at_rule_semicolon_space_before_","_require__$at_rule_name_space_after_","_require__$at_rule_no_unknown_","_require__$at_rule_no_vendor_prefix_","_require__$at_rule_property_required_list_","_require__$at_rule_semicolon_newline_after_","_require__$block_closing_brace_empty_line_before_","_require__$block_closing_brace_newline_after_","_require__$block_closing_brace_newline_before_","_require__$block_closing_brace_space_after_","_require__$block_closing_brace_space_before_","_require__$block_no_empty_","_require__$block_opening_brace_newline_after_","_require__$block_opening_brace_newline_before_","_require__$block_opening_brace_space_after_","_require__$block_opening_brace_space_before_","_require__$color_function_notation_","_require__$color_hex_alpha_","_require__$color_hex_case_","_require__$color_hex_length_","_require__$color_named_","_require__$color_no_hex_","_require__$color_no_invalid_hex_","_require__$comment_empty_line_before_","_require__$comment_no_empty_","_require__$comment_pattern_","_require__$comment_whitespace_inside_","_require__$comment_word_disallowed_list_","_require__$custom_media_pattern_","_require__$custom_property_empty_line_before_","_require__$custom_property_no_missing_var_function_","_require__$custom_property_pattern_","_require__$declaration_bang_space_after_","_require__$declaration_bang_space_before_","_require__$declaration_block_no_duplicate_custom_properties_","_require__$declaration_block_no_duplicate_properties_","_require__$declaration_block_no_redundant_longhand_properties_","_require__$declaration_block_no_shorthand_property_overrides_","_require__$declaration_block_semicolon_newline_after_","_require__$declaration_block_semicolon_newline_before_","_require__$declaration_block_semicolon_space_after_","_require__$declaration_block_semicolon_space_before_","_require__$declaration_block_single_line_max_declarations_","_require__$declaration_block_trailing_semicolon_","_require__$declaration_colon_newline_after_","_require__$declaration_colon_space_after_","_require__$declaration_colon_space_before_","_require__$declaration_empty_line_before_","_require__$declaration_no_important_","_require__$declaration_property_max_values_","_require__$declaration_property_unit_allowed_list_","_require__$declaration_property_unit_disallowed_list_","_require__$declaration_property_value_allowed_list_","_require__$declaration_property_value_disallowed_list_","_require__$font_family_no_missing_generic_family_keyword_","_require__$font_family_name_quotes_","_require__$font_family_no_duplicate_names_","_require__$font_weight_notation_","_require__$function_allowed_list_","_require__$function_calc_no_unspaced_operator_","_require__$function_comma_newline_after_","_require__$function_comma_newline_before_","_require__$function_comma_space_after_","_require__$function_comma_space_before_","_require__$function_disallowed_list_","_require__$function_linear_gradient_no_nonstandard_direction_","_require__$function_max_empty_lines_","_require__$function_name_case_","_require__$function_no_unknown_","_require__$function_parentheses_newline_inside_","_require__$function_parentheses_space_inside_","_require__$function_url_no_scheme_relative_","_require__$function_url_quotes_","_require__$function_url_scheme_allowed_list_","_require__$function_url_scheme_disallowed_list_","_require__$function_whitespace_after_","_require__$hue_degree_notation_","_require__$import_notation_","_require__$keyframe_block_no_duplicate_selectors_","_require__$keyframe_declaration_no_important_","_require__$keyframe_selector_notation_","_require__$keyframes_name_pattern_","_require__$length_zero_no_unit_","linebreaks","_require__$linebreaks_","_require__$max_empty_lines_","_require__$max_line_length_","_require__$max_nesting_depth_","_require__$media_feature_colon_space_after_","_require__$media_feature_colon_space_before_","_require__$media_feature_name_allowed_list_","_require__$media_feature_name_case_","_require__$media_feature_name_disallowed_list_","_require__$media_feature_name_no_unknown_","_require__$media_feature_name_no_vendor_prefix_","_require__$media_feature_name_value_allowed_list_","_require__$media_feature_parentheses_space_inside_","_require__$media_feature_range_operator_space_after_","_require__$media_feature_range_operator_space_before_","_require__$media_query_list_comma_newline_after_","_require__$media_query_list_comma_newline_before_","_require__$media_query_list_comma_space_after_","_require__$media_query_list_comma_space_before_","_require__$named_grid_areas_no_invalid_","_require__$no_descending_specificity_","_require__$no_duplicate_at_import_rules_","_require__$no_duplicate_selectors_","_require__$no_empty_source_","_require__$no_empty_first_line_","_require__$no_eol_whitespace_","_require__$no_extra_semicolons_","_require__$no_invalid_double_slash_comments_","_require__$no_invalid_position_at_import_rule_","_require__$no_irregular_whitespace_","_require__$no_missing_end_of_source_newline_","_require__$no_unknown_animations_","_require__$number_leading_zero_","_require__$number_max_precision_","_require__$number_no_trailing_zeros_","_require__$property_allowed_list_","_require__$property_case_","_require__$property_disallowed_list_","_require__$property_no_unknown_","_require__$property_no_vendor_prefix_","_require__$rule_empty_line_before_","_require__$rule_selector_property_disallowed_list_","_require__$selector_attribute_brackets_space_inside_","_require__$selector_attribute_name_disallowed_list_","_require__$selector_attribute_operator_allowed_list_","_require__$selector_attribute_operator_disallowed_list_","_require__$selector_attribute_operator_space_after_","_require__$selector_attribute_operator_space_before_","_require__$selector_attribute_quotes_","_require__$selector_class_pattern_","_require__$selector_combinator_allowed_list_","_require__$selector_combinator_disallowed_list_","_require__$selector_combinator_space_after_","_require__$selector_combinator_space_before_","_require__$selector_descendant_combinator_no_non_space_","_require__$selector_disallowed_list_","_require__$selector_id_pattern_","_require__$selector_list_comma_newline_after_","_require__$selector_list_comma_newline_before_","_require__$selector_list_comma_space_after_","_require__$selector_list_comma_space_before_","_require__$selector_max_attribute_","_require__$selector_max_class_","_require__$selector_max_combinators_","_require__$selector_max_compound_selectors_","_require__$selector_max_empty_lines_","_require__$selector_max_id_","_require__$selector_max_pseudo_class_","_require__$selector_max_specificity_","_require__$selector_max_type_","_require__$selector_max_universal_","_require__$selector_nested_pattern_","_require__$selector_no_qualifying_type_","_require__$selector_no_vendor_prefix_","_require__$selector_not_notation_","_require__$selector_pseudo_class_allowed_list_","_require__$selector_pseudo_class_case_","_require__$selector_pseudo_class_disallowed_list_","_require__$selector_pseudo_class_no_unknown_","_require__$selector_pseudo_class_parentheses_space_inside_","_require__$selector_pseudo_element_allowed_list_","_require__$selector_pseudo_element_case_","_require__$selector_pseudo_element_colon_notation_","_require__$selector_pseudo_element_disallowed_list_","_require__$selector_pseudo_element_no_unknown_","_require__$selector_type_case_","_require__$selector_type_no_unknown_","_require__$shorthand_property_no_redundant_values_","_require__$string_no_newline_","_require__$string_quotes_","_require__$time_min_milliseconds_","_require__$unicode_bom_","_require__$unit_allowed_list_","_require__$unit_case_","_require__$unit_disallowed_list_","_require__$unit_no_unknown_","_require__$value_keyword_case_","_require__$value_list_comma_newline_after_","_require__$value_list_comma_newline_before_","_require__$value_list_comma_space_after_","_require__$value_list_comma_space_before_","_require__$value_list_max_empty_lines_","_require__$value_no_vendor_prefix_","indentation","_require__$indentation_","normalizeRuleSettings","rawSettings","getModulePath","basedir","lookup","resolveFrom","silent","globalModules","_apply","_join","glob","positive","Path","normalizeAllRuleSettings","normalizedRules","rawRuleSettings","pluginFunctions","augmentConfigExtended","cosmiconfigResult","configDir","filepath","augmentedConfig","ignoreFiles","globs","globjoin","processors","absolutizeProcessors","absolutizePaths","_require_cosmiconfig_","STOP_DIR","createStylelint","_options","_extendExplorer","augmentConfig","stopDir","_specifiedConfigCache","_postcssResultCache","_fileCache","FileCache","cacheLocation","cacheStrategy","stripAnsi","onlyFirst","ansiRegex","isFullwidthCodePoint","isNaN","stringWidth","width","codePointAt","pluralize","singular","hasFlag","flag","terminatorPosition","forceColor","translateLevel","hasBasic","has256","has16m","supportsColor","haveStream","streamIsTTY","TERM","osRelease","sign","CI_NAME","TEAMCITY_VERSION","COLORTERM","TERM_PROGRAM_VERSION","TERM_PROGRAM","parseVersion","versionString","major","minor","patch","versions","supportsHyperlink","stream","FORCE_HYPERLINK","isTTY","VTE_VERSION","_export_stdout_","stdout","stderr","OSC","BEL","SEP","terminalLink","supportsHyperlinks","_require_picocolors_","levelColors","info","success","symbols","getMessageWidth","columnWidths","availableWidth","columns","fullWidth","orderedMessages","formatMessageText","ruleString","fromValue","filePath","logFrom","cleanedMessages","normalisedValue","calculateWidths","table","border","getBorderCharacters","alignment","paddingRight","wrapWord","drawHorizontalLine","el","_m","p1","p2","_require__$stringFormatter_","results","returnValue","allInvalidOptionWarnings","invalidOptionWarnings","invalidOptionsFormatter","allDeprecationWarnings","deprecations","seenText","reference","deprecationsFormatter","errorCount","warningCount","accum","parseErrors","tally","groupBy","keyFn","fileLink","ruleLink","metadata","formatters","compact","github","title","buildMessage","cleanedResults","tap","errored","ignored","unix","verbose","stringFormatter","ignoredCount","checkedDisplay","formatting","sourceText","warningsBySeverity","fixableProblemsFound","printProblems","problemsByRule","getConfigForFile","SafeParser","nextStart","prevEnd","_require_postcss_safe_parser_","_require_postcss$lib$lazy_result_","postcssProcessor","getPostcssResult","cached","customSyntax","resolved","require","getCustomSyntax","fileExtension","extname","extensions","previouslyInferredExtensions","cssSyntax","postcssOptions","getCode","fs","promises","readFile","codeProcessors","sourceName","codeFilename","codeProcessor","postcssResult","html","js","jsx","less","md","sass","sss","scss","svelte","ts","tsx","vue","xml","xst","isPathNotFoundError","ALL_RULES","createDisableRange","strictStart","strictEnd","assignDisabledRanges","inlineEnd","nextComment","checkComment","fullComment","currentLine","disableLine","ruleIsDisabled","disabledRuleName","strict","startDisabledRange","endDisabledRange","getDescription","getCommandRules","processDisableLineCommand","processDisableNextLineCommand","ruleToDisable","isAllRules","processDisableCommand","ruleToEnable","lastRange","processEnableCommand","fullText","splitted","descriptionStart","rangeObj","ensureRuleRanges","lastRangeForRule","peq","Uint32Array","distance","tmp","lst","pv","mv","sc","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","vlen","pb","mb","xh","ph","mh","myers_x","reportUnknownRuleNames","unknownRuleName","postcssRoot","suggestions","existRuleName","levenshtein","suggestion","extractSuggestions","rejectMessage","lintSource","existingPostcssResult","isCodeNotFile","inputFilePath","isPathIgnored","createEmptyPostcssResult","configFile","configForFile","calcHashOfConfig","hasFileChanged","stylelintPostcssResult","stylelintOptions","postcssDoc","newlineMatch","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","performRules","rulesOrder","ruleNames","ruleFunction","ruleSettings","primaryOption","defaultSeverity","disableFix","ruleDisableFix","lintPostcssResult","tailoredOptions","isConfig","createStylelintResult","cssSyntaxError","stylelintResult","deprecationMessage","stylelintReference","invalidOptionMessage","_postcssResult","createPartialStylelintResult","resultProcessors","resultProcessor","isPathValid","_require_ignore_","filterFilePaths","ignorer","filePaths","validForIgnore","notValidForIgnore","filteredByIgnore","NoFilesFoundError","fileList","AllFilesIgnoredError","validateDisableSettings","field","putIfAbsent","isWarningInRange","reportDisablesForRule","reportDisables","prepareReturnValue","stylelintResults","maxWarnings","rangeData","settings","usefulDisables","ruleRanges","allRangeComments","useful","needlessDisables","configRules","usedRules","invalidScopeDisables","alreadyReported","descriptionlessDisables","reportedDisables","getRuleMetadata","foundWarnings","maxWarningsExceeded","lintResults","lintResult","debug","_require_debug_","ALWAYS_IGNORED_GLOBS","lint","allowEmptyInput","useCache","configBasedir","disableDefaultIgnores","files","globbyOptions","ignorePath","reportDescriptionlessDisables","reportInvalidScopeDisables","reportNeedlessDisables","isValidCode","formatterFunction","getFileIgnorer","selected","getFormatterOptionsText","useOr","getFormatterFunction","absoluteCodeFilename","globCWD","absolutePath","fastGlob","escapePath","stripTrailing","ch","segs","normalizePath","destroy","globby","filePathsLengthBeforeIgnore","getStylelintResults","absoluteFilepath","removeEntry","fixedCss","writeFileAtomic","reconcile","createPlugin","resolveConfig","createLinter","utils","checkAgainstRule","tmpPostcssResult","DEFAULT_RAWS","indentError","ASTERICK","COMMA","RE_NEW_LINE","inlineRight","extraIndent","sssBetween","prevIndent","part","nextNonComment","moreIndent","commentText","atword","lastComma","keepTrailingSpace","checkSemicolon","checkCurly","badProp","unnamedDecl","isPrev","indentedFirstLine","diff","wrongIndent","lastSpace","altLast","real","indentType","prevNumber","reduceRight","preprocess","liner","_lint","_options$config","sugarss"],"mappings":"sCASA,MAAAA,EAAA,SAYQC,GACN,MAAMC,EAAQD,EAAKC,MAAM,YAEzB,OAAIA,GACIA,EAAM,IAGP,EACR,EAACC,EAAA,SAYUF,GACV,OAAOA,EAAKG,QAAQ,SAAU,GAC/B,ECrBKC,EAAW,IAAIC,IAAI,CACxB,oBACA,kBACA,iBACA,gBACA,gBACA,eACA,qBACA,gBAOKC,EAAY,IAAID,IAAI,CACzB,iBACA,oBACA,oBACA,0BACA,kBACA,mBACA,kBACA,yBACA,oBACA,uBACA,qBACA,mBACA,0BACA,qBACA,gCASKE,EAAa,IAAIF,IAAI,CAC1B,gBACA,cACA,aACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,aACA,kBACA,sBACA,kBACA,oBACA,kBACA,mBACA,qBACA,4BACA,6BACA,eACA,oBACA,sBACA,gBACA,yBACA,0BACA,uBACA,aACA,aACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,aACA,cACA,oBACA,oBACA,oBACA,cACA,eACA,UACA,SACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,YACA,wBACA,eACA,yBACA,yBACA,YACA,cACA,oBACA,kBACA,oBACA,WACA,iBACA,eACA,iBACA,gBACA,sBACA,wBACA,qBACA,UACA,kBACA,kBACA,mBACA,qBACA,oBACA,sBACA,OACA,cACA,qBACA,qBACA,oBACA,qBACA,oBACA,YACA,iBACA,aACA,cACA,gBACA,cACA,YACA,aACA,kBACA,QACA,sBACA,oBACA,sBACA,qBACA,uBACA,cACA,qBACA,aACA,kBACA,yBACA,0BACA,uBACA,uBACA,mBACA,wBACA,eACA,gBACA,WACA,kBACA,kBACA,wBACA,uBACA,uBACA,2BACA,wBACA,gBACA,sBACA,yBACA,sBACA,mBACA,gBACA,mBACA,eACA,eACA,YACA,mBACA,kBACA,aACA,mBACA,sBACA,sBACA,6BACA,cACA,iBAaKG,EAAkB,IAAIH,IAAI,CAC/B,iBACA,WACA,YACA,mBACA,eACA,mBACA,YAC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GAChBf,GAAK2F,KAjDQ,CACZC,IAAK,8DGfN,MAAM8U,GAA+B,IAAIxd,IAAI,CAC5C,YACA,iBACA,OACA,cACA,oBACA,WACA,cACA,YACA,aACA,oBAIKyd,GAA6C,IAAIzC,IAAI,CAE1D,CACC,YACA,IAAIhb,IAAI,CACP,iBACA,qBACA,4BACA,kBACA,4BACA,sBACA,sBACA,0BAGF,CACC,aACA,IAAIA,IAAI,CACP,mBACA,kBACA,sBACA,oBACA,oBACA,kBACA,wBACA,sBAGF,CACC,SACA,IAAIA,IAAI,CACP,mBACA,sBACA,oBACA,qBACA,mBACA,sBACA,oBACA,qBACA,mBACA,sBACA,oBACA,wBAGF,CACC,mBACA,IAAIA,IAAI,CAEP,yBACA,yBACA,4BAGF,CACC,qBACA,IAAIA,IAAI,CAEP,2BACA,2BACA,8BAGF,CACC,gBACA,IAAIA,IAAI,CAEP,sBACA,sBACA,yBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,eACA,IAAIA,IAAI,CACP,sBACA,qBACA,qBACA,sBACA,yBAGF,CACC,oBACA,IAAIA,IAAI,CAEP,0BACA,0BACA,6BAGF,CACC,sBACA,IAAIA,IAAI,CACP,4BACA,4BACA,+BAGF,CACC,cACA,IAAIA,IAAI,CAEP,oBACA,oBACA,uBAGF,CACC,gBACA,IAAIA,IAAI,CACP,0BACA,yBACA,6BACA,+BAGF,CACC,eACA,IAAIA,IAAI,CAEP,qBACA,qBACA,wBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,aACA,IAAIA,IAAI,CAEP,mBACA,mBACA,sBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,cACA,IAAIA,IAAI,CAEP,oBACA,oBACA,uBAGF,CACC,UACA,IAAIA,IAAI,CAEP,eACA,kBAGF,CACC,OACA,IAAIA,IAAI,CAEP,YACA,cACA,gBAGF,CACC,YACA,IAAIA,IAAI,CAEP,iBACA,eAGF,CACC,OACA,IAAIA,IAAI,CACP,aACA,e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+iB,GAAe,CAAC,UAAW,WAGlEoB,GAA6BnkB,GAClC+iB,GACAc,GACAC,GACAC,GACAC,GACAC,GACAC,IAGKE,GAAkBpkB,GAAU+iB,GAAe,CAAC,OAAQ,SAEpDsB,GAAqBrkB,GAAU+iB,GAAe,CAAC,OAAQ,SAEvDuB,GAAmBtkB,GAAU+iB,GAAe,CAAC,OAAQ,SAGrDwB,GAA2BvkB,GAAU+iB,GAAe,CAAC,SAErDyB,GAAuBxkB,GAAU+iB,GAAe,CAAC,SAGjD0B,GAAwBzkB,GAAU+iB,GAAe,CACtD,OACA,OACA,SACA,SACA,UACA,cACA,uBACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eACA,WACA,UACA,YACA,qBACA,kBACA,aACA,mBACA,WACA,WACA,WACA,SACA,WACA,iBACA,kBACA,oBACA,UACA,WACA,iBACA,QACA,uBACA,sBACA,wBACA,MACA,iBACA,YACA,YACA,UACA,QACA,UACA,sBACA,wBACA,QACA,SACA,OACA,UACA,sBACA,wBACA,iBACA,kBACA,oBAEA,oBACA,uBACA,0BACA,0BACA,SACA,mBACA,SAGK2B,GAA4B1kB,GAAU+iB,GAAe,CAAC,SAAU,YAEhE4B,GAAyB3kB,GAAU+iB,GAAe,CAAC,SAEnD6B,GAA6B5kB,GAClC+iB,GACA0B,GACAC,GACAC,IAGKE,GAAoB,IAAIp5B,IAAI,CACjC,gBACA,kBACA,qBACA,qBACA,eACA,aACA,iBACA,cACA,gBACA,OACA,cAGKq5B,GAA2B,IAAIr5B,IAAI,CAAC,OAAQ,OAG5Cs5B,GAAuB,IAAIt5B,IAAI,CACpC,eACA,gBACA,eACA,aACA,aACA,kBACA,eACA,aACA,cACA,WACA,YACA,gBACA,iBACA,kBACA,sBACA,iBACA,WACA,OACA,WACA,YACA,mBACA,aACA,kBACA,oBACA,eACA,SACA,cACA,eC5SKu5B,GAAc,IAAIv5B,IAAI,CAE3B,MACA,KACA,KACA,KACA,KACA,KACA,OACA,MACA,MACA,MACA,MACA,MAEA,MACA,MACA,MACA,QACA,QACA,MACA,MACA,MACA,MACA,QACA,Q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,kBACA,oBACA,2BACA,2BACA,0BACA,0BACA,kCAGKupE,GAA+Bh1D,GAAU+0D,GAA+B,CAC7E,mBACA,mBACA,mBACA,iBACA,mBACA,oBACA,sBACA,mBACA,mBACA,aACA,YACA,YACA,aACA,WACA,iBACA,iBACA,aACA,YACA,kBACA,mBACA,cACA,YACA,YACA,uBACA,+BACA,oCACA,uBACA,8BACA,wBACA,mCACA,kCACA,uCACA,mCACA,0CACA,qCACA,oCACA,qCACA,6BACA,mCACA,mCACA,yBACA,sBACA,6BACA,4BACA,wBACA,oBACA,qCACA,8BACA,8BACA,iCACA,uBACA,iCACA,yBACA,+BACA,4BACA,gCACA,oCACA,gCACA,uBACA,yCACA,4BACA,kCACA,0CACA,oCACA,oCACA,yCAGKE,GAAiBj1D,GACtB60D,GACAG,GACAF,GACA,CACC,WACA,UACA,MACA,uBACA,gBACA,YACA,SACA,cACA,YACA,SACA,UACA,iBACA,gBAIII,GAA+B,IAAIzpE,IAAI,CAC5C,aACA,kBACA,mBACA,gBAGK0pE,GAAkC,IAAI1pE,IAAI,CAAC,YAAa,mBAExD2pE,GAA0B,IAAI3pE,IAAI,CAAC,QAAS,QAAS,OAAQ,UAE7D4pE,GAA0B,IAAI5pE,IAAI,CAAC,MAAO,SAE1C6pE,GAAmC,IAAI7pE,IAAI,CAAC,MAAO,KAAM,UAAW,MAAO,UAE3E8pE,GAA8B,IAAI9pE,IAAI,CAC3C,cACA,WACA,gBACA,cACA,iBACA,kBACA,iBACA,mBACA,4BACA,iBACA,eACA,qBACA,yBACA,6BACA,mBACA,sBACA,kBACA,kBACA,gBACA,qBACA,uBACA,iBACA,wBACA,eACA,cACA,mBACA,mBACA,sBACA,iCAIK+pE,GAA+B,IAAI/pE,IAAI,CAC5C,aACA,WACA,YACA,YACA,QACA,MACA,gBACA,gBACA,YACA,iBACA,oBAGKgqE,GAAgBz1D,GACrBk1D,GACAG,GACAC,GACAH,GACAI,GACA,CACC,SACA,WACA,WACA,QACA,UACA,UACA,UACA,UACA,WACA,QACA,UACA,cACA,gBAC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"}