{"version":3,"file":"stylelint-bundle.min.js","sources":["../node_modules/postcss-value-parser/lib/parse.js","../node_modules/postcss-value-parser/lib/walk.js","../node_modules/postcss-value-parser/lib/stringify.js","../node_modules/postcss-value-parser/lib/unit.js","../node_modules/postcss-value-parser/lib/index.js","../node_modules/stylelint/lib/utils/declarationValueIndex.js","../node_modules/stylelint/lib/utils/getDeclarationValue.js","../node_modules/stylelint/lib/utils/hasLessInterpolation.js","../node_modules/stylelint/lib/utils/hasPsvInterpolation.js","../node_modules/stylelint/lib/utils/hasScssInterpolation.js","../node_modules/stylelint/lib/utils/hasTplInterpolation.js","../node_modules/stylelint/lib/utils/hasInterpolation.js","../node_modules/stylelint/lib/utils/isStandardSyntaxValue.js","../node_modules/stylelint/lib/utils/matchesStringOrRegExp.js","../node_modules/stylelint/lib/utils/optionsMatches.js","../node_modules/stylelint/lib/utils/report.js","../node_modules/stylelint/lib/utils/ruleMessages.js","../node_modules/stylelint/lib/utils/setDeclarationValue.js","../node_modules/stylelint/lib/utils/arrayEqual.js","../node_modules/is-plain-object/dist/is-plain-object.mjs","../node_modules/stylelint/lib/utils/validateTypes.js","../node_modules/stylelint/lib/utils/validateOptions.js","../node_modules/stylelint/lib/rules/alpha-value-notation/index.js","../node_modules/stylelint/lib/utils/addEmptyLineBefore.js","../node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/hasEmptyLine.js","../node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/typeGuards.js","../node_modules/stylelint/lib/utils/isSharedLineComment.js","../node_modules/stylelint/lib/utils/isAfterComment.js","../node_modules/stylelint/lib/utils/hasBlock.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isFirstNested.js","../node_modules/stylelint/lib/utils/isFirstNodeOfRoot.js","../node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.js","../node_modules/stylelint/lib/utils/removeEmptyLinesBefore.js","../node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.js","../node_modules/stylelint/lib/rules/atRuleNameSpaceChecker.js","../node_modules/stylelint/lib/utils/configurationError.js","../node_modules/stylelint/lib/utils/isSingleLineString.js","../node_modules/stylelint/lib/utils/isWhitespace.js","../node_modules/stylelint/lib/utils/whitespaceChecker.js","../node_modules/stylelint/lib/rules/at-rule-name-space-after/index.js","../node_modules/stylelint/lib/utils/flattenArray.js","../node_modules/stylelint/lib/utils/validateObjectWithArrayProps.js","../node_modules/stylelint/lib/rules/at-rule-property-required-list/index.js","../node_modules/stylelint/lib/rules/at-rule-name-case/index.js","../node_modules/stylelint/lib/utils/beforeBlockString.js","../node_modules/stylelint/lib/utils/stylelintCommand.js","../node_modules/stylelint/lib/rules/block-no-empty/index.js","../node_modules/stylelint/lib/utils/rawNodeString.js","../node_modules/stylelint/lib/utils/blockString.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-after/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-after/index.js","../node_modules/stylelint/lib/utils/hasEmptyBlock.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-before/index.js","../node_modules/stylelint/lib/utils/uniteSets.js","../node_modules/stylelint/lib/reference/atKeywords.js","../node_modules/stylelint/lib/utils/vendor.js","../node_modules/stylelint/lib/rules/at-rule-no-unknown/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-before/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxComment.js","../node_modules/stylelint/lib/rules/comment-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isAutoprefixable.js","../node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxFunction.js","../node_modules/stylelint/lib/utils/isStandardSyntaxColorFunction.js","../node_modules/stylelint/lib/rules/color-function-notation/index.js","../node_modules/stylelint/lib/rules/at-rule-allowed-list/index.js","../node_modules/stylelint/lib/rules/color-hex-alpha/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-before/index.js","../node_modules/stylelint/lib/reference/properties.js","../node_modules/colord/index.mjs","../node_modules/colord/plugins/hwb.mjs","../node_modules/colord/plugins/lab.mjs","../node_modules/colord/plugins/lch.mjs","../node_modules/stylelint/lib/rules/color-named/colordUtils.js","../node_modules/colord/plugins/names.mjs","../node_modules/stylelint/lib/rules/color-named/index.js","../node_modules/stylelint/lib/rules/at-rule-disallowed-list/index.js","../node_modules/stylelint/lib/rules/comment-pattern/index.js","../node_modules/stylelint/lib/utils/containsString.js","../node_modules/stylelint/lib/rules/comment-word-disallowed-list/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-after/index.js","../node_modules/stylelint/lib/rules/comment-whitespace-inside/index.js","../node_modules/stylelint/lib/rules/comment-no-empty/index.js","../node_modules/stylelint/lib/rules/color-no-hex/index.js","../node_modules/stylelint/lib/utils/eachDeclarationBlock.js","../node_modules/stylelint/lib/utils/isCustomProperty.js","../node_modules/stylelint/lib/utils/isScssVariable.js","../node_modules/stylelint/lib/utils/isStandardSyntaxProperty.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js","../node_modules/style-search/index.js","../node_modules/stylelint/lib/rules/declarationBangSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-bang-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js","../node_modules/stylelint/lib/utils/nextNonCommentNode.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js","../node_modules/stylelint/lib/rules/declaration-bang-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.js","../node_modules/stylelint/lib/rules/declaration-colon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-property-max-values/index.js","../node_modules/stylelint/lib/utils/validateObjectWithProps.js","../node_modules/stylelint/lib/rules/color-hex-length/index.js","../node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.js","../node_modules/stylelint/lib/rules/declaration-empty-line-before/index.js","../node_modules/stylelint/lib/rules/color-no-invalid-hex/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxHexColor.js","../node_modules/stylelint/lib/utils/isValidHex.js","../node_modules/stylelint/lib/rules/declarationColonSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-colon-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-custom-properties/index.js","../node_modules/stylelint/lib/rules/custom-property-empty-line-before/index.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-space-before/index.js","../node_modules/stylelint/lib/utils/isNumbery.js","../node_modules/stylelint/lib/reference/keywords.js","../node_modules/stylelint/lib/reference/units.js","../node_modules/stylelint/lib/utils/isValidFontSize.js","../node_modules/stylelint/lib/utils/isVariable.js","../node_modules/stylelint/lib/utils/findFontFamily.js","../node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.js","../shim/process.js","../node_modules/picocolors/picocolors.js","../node_modules/postcss/lib/tokenize.js","../node_modules/postcss/lib/terminal-highlight.js","../node_modules/postcss/lib/css-syntax-error.js","../node_modules/postcss/lib/symbols.js","../node_modules/postcss/lib/stringifier.js","../node_modules/postcss/lib/stringify.js","../node_modules/postcss/lib/node.js","../node_modules/postcss/lib/declaration.js","../shim/empty.js","../node_modules/postcss/node_modules/nanoid/non-secure/index.js","../node_modules/postcss/lib/previous-map.js","../node_modules/postcss/lib/input.js","../node_modules/postcss/lib/map-generator.js","../node_modules/postcss/lib/container.js","../node_modules/postcss/lib/document.js","../node_modules/postcss/lib/comment.js","../node_modules/postcss/lib/warn-once.js","../node_modules/postcss/lib/warning.js","../node_modules/postcss/lib/result.js","../node_modules/postcss/lib/at-rule.js","../node_modules/postcss/lib/root.js","../node_modules/postcss/lib/list.js","../node_modules/postcss/lib/rule.js","../node_modules/postcss/lib/parser.js","../node_modules/postcss/lib/parse.js","../node_modules/postcss/lib/lazy-result.js","../node_modules/postcss/lib/no-work-result.js","../node_modules/postcss/lib/processor.js","../node_modules/postcss/lib/fromJSON.js","../node_modules/postcss/lib/postcss.js","../node_modules/postcss/lib/postcss.mjs","../node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-colon-space-before/index.js","../node_modules/stylelint/lib/rules/functionCommaSpaceFix.js","../node_modules/stylelint/lib/rules/functionCommaSpaceChecker.js","../node_modules/stylelint/lib/rules/function-comma-newline-after/index.js","../node_modules/stylelint/lib/utils/getImportantPosition.js","../node_modules/stylelint/lib/rules/declaration-no-important/index.js","../node_modules/stylelint/lib/rules/function-disallowed-list/index.js","../node_modules/stylelint/lib/rules/annotation-no-unknown/index.js","../node_modules/stylelint/lib/rules/function-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/function-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/function-comma-space-after/index.js","../node_modules/stylelint/node_modules/balanced-match/index.js","../node_modules/stylelint/lib/utils/functionArgumentsSearch.js","../node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js","../node_modules/stylelint/lib/rules/hue-degree-notation/index.js","../node_modules/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js","../node_modules/stylelint/lib/reference/functions.js","../node_modules/stylelint/lib/rules/function-name-case/index.js","../node_modules/stylelint/lib/utils/atRuleParamIndex.js","../node_modules/stylelint/lib/utils/isStandardSyntaxUrl.js","../node_modules/stylelint/lib/rules/function-url-quotes/index.js","../node_modules/stylelint/lib/rules/function-comma-space-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js","../node_modules/stylelint/lib/utils/addEmptyLineAfter.js","../node_modules/stylelint/lib/utils/removeEmptyLinesAfter.js","../node_modules/stylelint/lib/rules/function-parentheses-newline-inside/index.js","../node_modules/stylelint/lib/rules/function-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomFunction.js","../node_modules/stylelint/lib/rules/function-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/function-whitespace-after/index.js","../node_modules/postcss-selector-parser/dist/util/unesc.js","../node_modules/postcss-selector-parser/dist/util/getProp.js","../node_modules/postcss-selector-parser/dist/util/ensureObject.js","../node_modules/postcss-selector-parser/dist/util/stripComments.js","../node_modules/postcss-selector-parser/dist/util/index.js","../node_modules/postcss-selector-parser/dist/selectors/node.js","../node_modules/postcss-selector-parser/dist/selectors/types.js","../node_modules/postcss-selector-parser/dist/selectors/container.js","../node_modules/postcss-selector-parser/dist/selectors/root.js","../node_modules/postcss-selector-parser/dist/selectors/selector.js","../node_modules/cssesc/cssesc.js","../node_modules/postcss-selector-parser/dist/selectors/className.js","../node_modules/postcss-selector-parser/dist/selectors/comment.js","../node_modules/postcss-selector-parser/dist/selectors/id.js","../node_modules/postcss-selector-parser/dist/selectors/namespace.js","../node_modules/postcss-selector-parser/dist/selectors/tag.js","../node_modules/postcss-selector-parser/dist/selectors/string.js","../node_modules/postcss-selector-parser/dist/selectors/pseudo.js","../node_modules/util-deprecate/node.js","../shim/util.js","../node_modules/postcss-selector-parser/dist/selectors/attribute.js","../node_modules/postcss-selector-parser/dist/selectors/universal.js","../node_modules/postcss-selector-parser/dist/selectors/combinator.js","../node_modules/postcss-selector-parser/dist/selectors/nesting.js","../node_modules/postcss-selector-parser/dist/sortAscending.js","../node_modules/postcss-selector-parser/dist/tokenTypes.js","../node_modules/postcss-selector-parser/dist/tokenize.js","../node_modules/postcss-selector-parser/dist/parser.js","../node_modules/postcss-selector-parser/dist/processor.js","../node_modules/postcss-selector-parser/dist/selectors/constructors.js","../node_modules/postcss-selector-parser/dist/selectors/guards.js","../node_modules/postcss-selector-parser/dist/selectors/index.js","../node_modules/postcss-selector-parser/dist/index.js","../node_modules/stylelint/lib/utils/transformSelector.js","../node_modules/stylelint/lib/rules/keyframe-selector-notation/index.js","../node_modules/stylelint/lib/utils/getSchemeFromUrl.js","../node_modules/stylelint/lib/rules/function-url-scheme-disallowed-list/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/font-family-name-quotes/index.js","../node_modules/stylelint/lib/rules/function-url-no-scheme-relative/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxSelector.js","../node_modules/stylelint/lib/rules/keyframe-block-no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/keyframe-declaration-no-important/index.js","../node_modules/stylelint/lib/rules/linebreaks/index.js","../node_modules/stylelint/lib/rules/keyframes-name-pattern/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxKeyframesName.js","../node_modules/stylelint/lib/utils/isStandardSyntaxRule.js","../node_modules/stylelint/lib/rules/max-nesting-depth/index.js","../node_modules/stylelint/lib/rules/custom-property-no-missing-var-function/index.js","../node_modules/stylelint/lib/utils/setAtRuleParams.js","../node_modules/stylelint/lib/utils/getAtRuleParams.js","../node_modules/stylelint/lib/rules/import-notation/index.js","../node_modules/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-before/index.js","../node_modules/stylelint/lib/utils/isCustomMediaQuery.js","../node_modules/stylelint/lib/utils/isRangeContextMediaFeature.js","../node_modules/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js","../node_modules/postcss-media-query-parser/dist/nodes/Node.js","../node_modules/postcss-media-query-parser/dist/nodes/Container.js","../node_modules/postcss-media-query-parser/dist/parsers.js","../node_modules/postcss-media-query-parser/dist/index.js","../node_modules/stylelint/lib/rules/rangeContextNodeParser.js","../node_modules/stylelint/lib/rules/media-feature-name-allowed-list/index.js","../node_modules/stylelint/lib/rules/custom-property-pattern/index.js","../node_modules/stylelint/lib/rules/function-url-scheme-allowed-list/index.js","../node_modules/stylelint/lib/rules/length-zero-no-unit/index.js","../node_modules/stylelint/lib/utils/isMathFunction.js","../node_modules/stylelint/lib/utils/blurInterpolation.js","../node_modules/stylelint/lib/utils/getDimension.js","../node_modules/stylelint/lib/rules/declaration-property-unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/media-feature-name-case/index.js","../node_modules/stylelint/lib/rules/media-feature-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-after/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/media-feature-name-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.js","../node_modules/stylelint/lib/rules/findMediaOperator.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-after/index.js","../node_modules/stylelint/lib/rules/font-weight-notation/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-after/index.js","../node_modules/postcss-resolve-nested-selector/index.js","../node_modules/@csstools/selector-specificity/dist/index.mjs","../node_modules/stylelint/lib/utils/findAtRuleContext.js","../node_modules/stylelint/lib/reference/selectors.js","../node_modules/stylelint/lib/utils/nodeContextLookup.js","../node_modules/stylelint/lib/utils/parseSelector.js","../node_modules/stylelint/lib/rules/no-descending-specificity/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-before/index.js","../node_modules/stylelint/lib/utils/isOnlyWhitespace.js","../node_modules/stylelint/lib/rules/no-eol-whitespace/index.js","../node_modules/stylelint/lib/reference/mediaFeatures.js","../node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.js","../node_modules/stylelint/lib/rules/no-irregular-whitespace/index.js","../node_modules/stylelint/lib/utils/isKeyframeRule.js","../node_modules/stylelint/lib/rules/no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/findNotContiguousOrRectangular.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/index.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-before/index.js","../node_modules/stylelint/lib/rules/no-extra-semicolons/index.js","../node_modules/stylelint/lib/rules/no-empty-source/index.js","../node_modules/stylelint/lib/rules/no-empty-first-line/index.js","../node_modules/stylelint/lib/rules/no-invalid-double-slash-comments/index.js","../node_modules/stylelint/lib/rules/no-missing-end-of-source-newline/index.js","../node_modules/stylelint/lib/rules/number-max-precision/index.js","../node_modules/known-css-properties/index.js","../node_modules/stylelint/lib/rules/property-no-unknown/index.js","../node_modules/stylelint/lib/rules/number-no-trailing-zeros/index.js","../node_modules/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/function-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-allowed-list/index.js","../node_modules/stylelint/lib/rules/rule-selector-property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/property-allowed-list/index.js","../node_modules/stylelint/lib/rules/at-rule-name-newline-after/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-after/index.js","../node_modules/stylelint/lib/rules/property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-disallowed-list/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxCombinator.js","../node_modules/stylelint/lib/rules/selector-combinator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorCombinatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-combinator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-attribute-quotes/index.js","../node_modules/stylelint/lib/utils/getRuleSelector.js","../node_modules/stylelint/lib/rules/custom-media-pattern/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/no-unknown-animations/index.js","../node_modules/stylelint/lib/utils/findAnimationName.js","../node_modules/stylelint/lib/rules/number-leading-zero/index.js","../node_modules/stylelint/lib/rules/selector-id-pattern/index.js","../node_modules/stylelint/lib/utils/isContextFunctionalPseudoClass.js","../node_modules/stylelint/lib/utils/isNonNegativeInteger.js","../node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.js","../node_modules/stylelint/lib/rules/property-case/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-before/index.js","../node_modules/stylelint/lib/rules/selector-max-universal/index.js","../node_modules/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/selector-max-specificity/index.js","../node_modules/stylelint/lib/rules/selector-max-attribute/index.js","../node_modules/stylelint/lib/rules/selector-max-combinators/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-case/index.js","../node_modules/stylelint/lib/rules/selector-nested-pattern/index.js","../node_modules/stylelint/lib/utils/isKeyframeSelector.js","../node_modules/stylelint/lib/rules/selector-class-pattern/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/selector-max-class/index.js","../node_modules/stylelint/lib/rules/selector-max-id/index.js","../node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-case/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-allowed-list/index.js","../node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxTypeSelector.js","../node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.js","../node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js","../node_modules/stylelint/lib/rules/max-empty-lines/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomSelector.js","../node_modules/stylelint/lib/rules/unicode-bom/index.js","../node_modules/stylelint/lib/rules/unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-type-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomElement.js","../node_modules/stylelint/lib/rules/selector-max-pseudo-class/index.js","../node_modules/stylelint/lib/rules/string-no-newline/index.js","../node_modules/stylelint/lib/rules/selector-type-case/index.js","../node_modules/stylelint/lib/rules/unit-case/index.js","../node_modules/stylelint/lib/rules/valueListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.js","../node_modules/stylelint/lib/rules/time-min-milliseconds/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-allowed-list/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/indentation/index.js","../node_modules/stylelint/lib/rules/unit-no-unknown/index.js","../node_modules/stylelint/lib/rules/value-keyword-case/index.js","../node_modules/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js","../node_modules/stylelint/lib/utils/isCounterResetCustomIdentValue.js","../node_modules/stylelint/lib/rules/no-invalid-position-at-import-rule/index.js","../node_modules/stylelint/lib/rules/value-list-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/color-hex-case/index.js","../node_modules/stylelint/lib/rules/rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isAfterSingleLineComment.js","../node_modules/stylelint/lib/rules/string-quotes/index.js","../node_modules/stylelint/lib/rules/selector-max-type/index.js","../node_modules/stylelint/lib/rules/selector-not-notation/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-after/index.js","../node_modules/stylelint/lib/rules/selector-combinator-space-before/index.js","../node_modules/stylelint/lib/rules/value-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/max-line-length/index.js","../node_modules/stylelint/lib/rules/index.js","../node_modules/stylelint/lib/normalizeRuleSettings.js","../node_modules/stylelint/lib/createPlugin.js","../node_modules/stylelint/lib/utils/getModulePath.js","../node_modules/globjoin/index.js","../node_modules/stylelint/lib/normalizeAllRuleSettings.js","../node_modules/stylelint/lib/augmentConfig.js","../node_modules/stylelint/lib/createStylelint.js","../node_modules/stylelint/lib/formatters/compactFormatter.js","../node_modules/strip-ansi/index.js","../node_modules/ansi-regex/index.js","../node_modules/is-fullwidth-code-point/index.js","../node_modules/string-width/index.js","../node_modules/emoji-regex/index.js","../node_modules/stylelint/lib/utils/pluralize.js","../node_modules/supports-hyperlinks/node_modules/has-flag/index.js","../node_modules/supports-hyperlinks/node_modules/supports-color/index.js","../shim/os.js","../node_modules/supports-hyperlinks/index.js","../shim/tty.js","../node_modules/stylelint/lib/formatters/terminalLink.js","../node_modules/stylelint/lib/formatters/stringFormatter.js","../node_modules/stylelint/lib/formatters/verboseFormatter.js","../node_modules/stylelint/lib/formatters/index.js","../node_modules/stylelint/lib/formatters/githubFormatter.js","../node_modules/stylelint/lib/formatters/jsonFormatter.js","../node_modules/stylelint/lib/formatters/tapFormatter.js","../node_modules/stylelint/lib/formatters/unixFormatter.js","../shim/getConfigForFile.js","../node_modules/postcss-safe-parser/lib/safe-parser.js","../node_modules/postcss-safe-parser/lib/safe-parse.js","../node_modules/stylelint/lib/getPostcssResult.js","../shim/isPathIgnored.js","../node_modules/stylelint/lib/utils/isPathNotFoundError.js","../node_modules/stylelint/lib/assignDisabledRanges.js","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/stylelint/lib/reportUnknownRuleNames.js","../node_modules/stylelint/lib/lintSource.js","../node_modules/stylelint/lib/lintPostcssResult.js","../node_modules/stylelint/lib/postcssPlugin.js","../node_modules/stylelint/lib/resolveConfig.js","../node_modules/stylelint/lib/createStylelintResult.js","../node_modules/stylelint/lib/createPartialStylelintResult.js","../node_modules/stylelint/lib/utils/filterFilePaths.js","../node_modules/stylelint/lib/utils/noFilesFoundError.js","../node_modules/stylelint/lib/utils/allFilesIgnoredError.js","../node_modules/stylelint/lib/validateDisableSettings.js","../node_modules/stylelint/lib/utils/putIfAbsent.js","../node_modules/stylelint/lib/needlessDisables.js","../node_modules/stylelint/lib/reportDisables.js","../node_modules/stylelint/lib/prepareReturnValue.js","../node_modules/stylelint/lib/invalidScopeDisables.js","../node_modules/stylelint/lib/descriptionlessDisables.js","../node_modules/stylelint/lib/standalone.js","../node_modules/stylelint/lib/index.js","../node_modules/stylelint/lib/utils/getFormatterOptionsText.js","../node_modules/normalize-path/index.js","../node_modules/stylelint/lib/utils/checkAgainstRule.js","../node_modules/sugarss/stringifier.js","../node_modules/sugarss/preprocess.js","../node_modules/sugarss/tokenize.js","../node_modules/sugarss/index.js","../node_modules/sugarss/stringify.js","../node_modules/sugarss/parse.js","../node_modules/sugarss/parser.js","../node_modules/sugarss/liner.js","../index.js"],"sourcesContent":["var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n","module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n","function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n","var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n","var parse = require(\"./parse\");\nvar walk = require(\"./walk\");\nvar stringify = require(\"./stringify\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = require(\"./unit\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n","'use strict';\n\n/**\n * Get the index of a declaration's value\n *\n * @param {import('postcss').Declaration} decl\n * @returns {number}\n */\nmodule.exports = function declarationValueIndex(decl) {\n\tconst raws = decl.raws;\n\n\treturn [\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.prefix,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t(raws.prop && raws.prop.raw) || decl.prop,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.suffix,\n\t\traws.between || ':',\n\t\t// @ts-expect-error -- TS2339: Property 'prefix' does not exist on type '{ value: string; raw: string; }'.\n\t\traws.value && raws.value.prefix,\n\t].reduce((count, str) => {\n\t\tif (str) {\n\t\t\treturn count + str.length;\n\t\t}\n\n\t\treturn count;\n\t}, 0);\n};\n","'use strict';\n\n/**\n * @param {import('postcss').Declaration} decl\n * @returns {string}\n */\nmodule.exports = function getDeclarationValue(decl) {\n\tconst raws = decl.raws;\n\n\treturn (raws.value && raws.value.raw) || decl.value;\n};\n","'use strict';\n\n/**\n * Check whether a string has less interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has less interpolation\n */\nmodule.exports = function hasLessInterpolation(string) {\n\treturn /@\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has postcss-simple-vars interpolation\n *\n * @param {string} string\n */\nmodule.exports = function hasPsvInterpolation(string) {\n\treturn /\\$\\(.+?\\)/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has scss interpolation\n *\n * @param {string} string\n */\nmodule.exports = function hasScssInterpolation(string) {\n\treturn /#\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has JS template literal interpolation or HTML-like template\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has template literal interpolation\n */\nmodule.exports = function hasTplInterpolation(string) {\n\treturn /\\{.+?\\}/.test(string);\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a string has interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has interpolation\n */\nmodule.exports = function hasInterpolation(string) {\n\t// SCSS or Less interpolation\n\tif (\n\t\thasLessInterpolation(string) ||\n\t\thasScssInterpolation(string) ||\n\t\thasTplInterpolation(string) ||\n\t\thasPsvInterpolation(string)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a value is standard\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxValue(value) {\n\tlet normalizedValue = value;\n\n\t// Ignore operators before variables (example -$variable)\n\tif (/^[-+*/]/.test(value.charAt(0))) {\n\t\tnormalizedValue = normalizedValue.slice(1);\n\t}\n\n\t// SCSS variable (example $variable)\n\tif (normalizedValue.startsWith('$')) {\n\t\treturn false;\n\t}\n\n\t// SCSS namespace (example namespace.$variable)\n\tif (/^.+\\.\\$/.test(value)) {\n\t\treturn false;\n\t}\n\n\t// Less variable\n\tif (normalizedValue.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(normalizedValue)) {\n\t\treturn false;\n\t}\n\n\t// WebExtension replacement keyword used by Chrome/Firefox\n\t// more information: https://developer.chrome.com/extensions/i18n\n\t// and https://github.com/stylelint/stylelint/issues/4707\n\tif (/__MSG_\\S+__/.test(value)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Compares a string to a second value that, if it fits a certain convention,\n * is converted to a regular expression before the comparison.\n * If it doesn't fit the convention, then two strings are compared.\n *\n * Any strings starting and ending with `/` are interpreted\n * as regular expressions.\n *\n * @param {string | Array<string>} input\n * @param {string | RegExp | Array<string | RegExp>} comparison\n *\n * @returns {false | {match: string, pattern: (string | RegExp), substring: string}}\n */\nmodule.exports = function matchesStringOrRegExp(input, comparison) {\n\tif (!Array.isArray(input)) {\n\t\treturn testAgainstStringOrRegExpOrArray(input, comparison);\n\t}\n\n\tfor (const inputItem of input) {\n\t\tconst testResult = testAgainstStringOrRegExpOrArray(inputItem, comparison);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {string | RegExp | Array<string | RegExp>} comparison\n */\nfunction testAgainstStringOrRegExpOrArray(value, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstStringOrRegExp(value, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstStringOrRegExp(value, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} value\n * @param {string | RegExp} comparison\n */\nfunction testAgainstStringOrRegExp(value, comparison) {\n\t// If it's a RegExp, test directly\n\tif (comparison instanceof RegExp) {\n\t\tconst match = value.match(comparison);\n\n\t\treturn match ? { match: value, pattern: comparison, substring: match[0] || '' } : false;\n\t}\n\n\t// Check if it's RegExp in a string\n\tconst firstComparisonChar = comparison[0];\n\tconst lastComparisonChar = comparison[comparison.length - 1];\n\tconst secondToLastComparisonChar = comparison[comparison.length - 2];\n\n\tconst comparisonIsRegex =\n\t\tfirstComparisonChar === '/' &&\n\t\t(lastComparisonChar === '/' ||\n\t\t\t(secondToLastComparisonChar === '/' && lastComparisonChar === 'i'));\n\n\tconst hasCaseInsensitiveFlag = comparisonIsRegex && lastComparisonChar === 'i';\n\n\t// If so, create a new RegExp from it\n\tif (comparisonIsRegex) {\n\t\tconst valueMatch = hasCaseInsensitiveFlag\n\t\t\t? value.match(new RegExp(comparison.slice(1, -2), 'i'))\n\t\t\t: value.match(new RegExp(comparison.slice(1, -1)));\n\n\t\treturn valueMatch\n\t\t\t? { match: value, pattern: comparison, substring: valueMatch[0] || '' }\n\t\t\t: false;\n\t}\n\n\t// Otherwise, it's a string. Do a strict comparison\n\treturn value === comparison ? { match: value, pattern: comparison, substring: value } : false;\n}\n","'use strict';\n\nconst matchesStringOrRegExp = require('./matchesStringOrRegExp');\n\n/**\n * Check if an options object's propertyName contains a user-defined string or\n * regex that matches the passed in input.\n *\n * @param {{ [x: string]: any; }} options\n * @param {string} propertyName\n * @param {unknown} input\n *\n * @returns {boolean}\n */\nmodule.exports = function optionsMatches(options, propertyName, input) {\n\treturn Boolean(\n\t\toptions &&\n\t\t\toptions[propertyName] &&\n\t\t\ttypeof input === 'string' &&\n\t\t\tmatchesStringOrRegExp(input, options[propertyName]),\n\t);\n};\n","'use strict';\n\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\nmodule.exports = function report(problem) {\n\tconst { ruleName, result, message, messageArgs, line, node, index, endIndex, word } = problem;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\tconst { start } = (node && node.rangeBy({ index, endIndex })) || {};\n\n\t// If a line is not passed, use the node.rangeBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || (start && start.line);\n\n\tif (!startLine) {\n\t\tthrow new Error('You must pass either a node or a line number');\n\t}\n\n\tconst { ignoreDisables } = result.stylelint.config || {};\n\n\tif (result.stylelint.disabledRanges) {\n\t\tconst ranges =\n\t\t\tresult.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the problem is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\t// Collect disabled warnings\n\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\tconst disabledWarnings =\n\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\trule: ruleName,\n\t\t\t\t\tline: startLine,\n\t\t\t\t});\n\n\t\t\t\tif (!ignoreDisables) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\tif (!result.stylelint.stylelintWarning && severity === 'warning') {\n\t\tresult.stylelint.stylelintWarning = true;\n\t}\n\n\t/** @type {import('stylelint').WarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (problem.start) {\n\t\twarningProperties.start = problem.start;\n\t} else if (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (problem.end) {\n\t\twarningProperties.end = problem.end;\n\t} else if (endIndex) {\n\t\twarningProperties.endIndex = endIndex;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst { customMessages } = result.stylelint;\n\tconst warningMessage = buildWarningMessage(\n\t\t(customMessages && customMessages[ruleName]) || message,\n\t\tmessageArgs,\n\t);\n\n\tresult.warn(warningMessage, warningProperties);\n};\n\n/**\n * @param {import('stylelint').RuleMessage} message\n * @param {import('stylelint').Problem['messageArgs']} messageArgs\n * @returns {string}\n */\nfunction buildWarningMessage(message, messageArgs) {\n\tconst args = messageArgs || [];\n\n\tif (typeof message === 'string') {\n\t\treturn printfLike(message, ...args);\n\t}\n\n\treturn message(...args);\n}\n\n/**\n * @param {string} format\n * @param {Array<unknown>} args\n * @returns {string}\n */\nfunction printfLike(format, ...args) {\n\treturn args.reduce((/** @type {string} */ result, arg) => {\n\t\treturn result.replace(/%[ds]/, String(arg));\n\t}, format);\n}\n","'use strict';\n\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\nfunction ruleMessages(ruleName, messages) {\n\t/** @typedef {keyof T} K */\n\tconst newMessages = /** @type {R} */ ({});\n\n\tfor (const [messageId, messageText] of /** @type {[K, T[K]][]} */ (Object.entries(messages))) {\n\t\tif (typeof messageText === 'string') {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (`${messageText} (${ruleName})`);\n\t\t} else {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (\n\t\t\t\t(...args) => `${messageText(...args)} (${ruleName})`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn newMessages;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.ruleMessages} */ (ruleMessages);\n","'use strict';\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/**\n * @param {Declaration} decl\n * @param {string} value\n * @returns {Declaration} The declaration that was passed in.\n */\nmodule.exports = function setDeclarationValue(decl, value) {\n\tconst raws = decl.raws;\n\n\tif (raws.value) {\n\t\traws.value.raw = value;\n\t} else {\n\t\tdecl.value = value;\n\t}\n\n\treturn decl;\n};\n","'use strict';\n\n/**\n * Tests if two arrays are equal.\n *\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nmodule.exports = function arrayEqual(a, b) {\n\tif (!Array.isArray(a) || !Array.isArray(b)) return false;\n\n\tif (a.length !== b.length) return false;\n\n\treturn a.every((elem, index) => elem === b[index]);\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","'use strict';\n\nconst { isPlainObject: _isPlainObject } = require('is-plain-object');\n\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\nfunction isBoolean(value) {\n\treturn typeof value === 'boolean' || value instanceof Boolean;\n}\n\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\nfunction isFunction(value) {\n\treturn typeof value === 'function' || value instanceof Function;\n}\n\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\nfunction isNullish(value) {\n\treturn value == null;\n}\n\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\nfunction isNumber(value) {\n\treturn typeof value === 'number' || value instanceof Number;\n}\n\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\nfunction isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\nfunction isString(value) {\n\treturn typeof value === 'string' || value instanceof String;\n}\n\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\nfunction isPlainObject(value) {\n\treturn _isPlainObject(value);\n}\n\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\nfunction assert(value, message = undefined) {\n\tif (message) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value, message);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value);\n\t}\n}\n\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\nfunction assertFunction(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\nfunction assertNumber(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\nfunction assertString(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n\tisBoolean,\n\tisFunction,\n\tisNullish,\n\tisNumber,\n\tisRegExp,\n\tisString,\n\tisPlainObject,\n\n\tassert,\n\tassertFunction,\n\tassertNumber,\n\tassertString,\n};\n","'use strict';\n\nconst arrayEqual = require('./arrayEqual');\nconst { isPlainObject } = require('./validateTypes');\n\nconst IGNORED_OPTIONS = new Set(['severity', 'message', 'reportDisables', 'disableFix']);\n\n/** @typedef {import('stylelint').RuleOptions} RuleOptions */\n/** @typedef {import('stylelint').RuleOptionsPossible} Possible */\n/** @typedef {import('stylelint').RuleOptionsPossibleFunc} PossibleFunc */\n\n/**\n * Validate a rule's options.\n *\n * See existing rules for examples.\n *\n * @param {import('stylelint').PostcssResult} result - postcss result\n * @param {string} ruleName\n * @param {...RuleOptions} optionDescriptions - Each optionDescription can\n *   have the following properties:\n *   - `actual` (required): the actual passed option value or object.\n *   - `possible` (required): a schema representation of what values are\n *      valid for those options. `possible` should be an object if the\n *      options are an object, with corresponding keys; if the options are not an\n *      object, `possible` isn't, either. All `possible` value representations\n *      should be **arrays of either values or functions**. Values are === checked\n *      against `actual`. Functions are fed `actual` as an argument and their\n *      return value is interpreted: truthy = valid, falsy = invalid.\n *    - `optional` (optional): If this is `true`, `actual` can be undefined.\n * @return {boolean} Whether or not the options are valid (true = valid)\n */\nfunction validateOptions(result, ruleName, ...optionDescriptions) {\n\tlet noErrors = true;\n\n\tfor (const optionDescription of optionDescriptions) {\n\t\tvalidate(optionDescription, ruleName, complain);\n\t}\n\n\t/**\n\t * @param {string} message\n\t */\n\tfunction complain(message) {\n\t\tnoErrors = false;\n\t\tresult.warn(message, {\n\t\t\tstylelintType: 'invalidOption',\n\t\t});\n\t\tresult.stylelint = result.stylelint || {\n\t\t\tdisabledRanges: {},\n\t\t\truleSeverities: {},\n\t\t\tcustomMessages: {},\n\t\t\truleMetadata: {},\n\t\t};\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\treturn noErrors;\n}\n\n/**\n * @param {RuleOptions} opts\n * @param {string} ruleName\n * @param {(message: string) => void} complain\n */\nfunction validate(opts, ruleName, complain) {\n\tconst possible = opts.possible;\n\tconst actual = opts.actual;\n\tconst optional = opts.optional;\n\n\tif (actual === false && !ruleName.startsWith('report')) {\n\t\treturn complain(\n\t\t\t`Invalid option value \"false\" for rule \"${ruleName}\". Are you trying to disable this rule? If so use \"null\" instead`,\n\t\t);\n\t}\n\n\tif (actual === null || arrayEqual(actual, [null])) {\n\t\treturn;\n\t}\n\n\tconst nothingPossible =\n\t\tpossible === undefined || (Array.isArray(possible) && possible.length === 0);\n\n\tif (nothingPossible && actual === true) {\n\t\treturn;\n\t}\n\n\tif (actual === undefined) {\n\t\tif (nothingPossible || optional) {\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Expected option value for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (nothingPossible) {\n\t\tif (optional) {\n\t\t\tcomplain(\n\t\t\t\t`Incorrect configuration for rule \"${ruleName}\". Rule should have \"possible\" values for options validation`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Unexpected option value ${stringify(actual)} for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (typeof possible === 'function') {\n\t\tif (!possible(actual)) {\n\t\t\tcomplain(`Invalid option ${stringify(actual)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If `possible` is an array instead of an object ...\n\tif (Array.isArray(possible)) {\n\t\tfor (const a of [actual].flat()) {\n\t\t\tif (isValid(possible, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid option value ${stringify(a)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If actual is NOT an object ...\n\tif (!isPlainObject(actual) || typeof actual !== 'object' || actual == null) {\n\t\tcomplain(\n\t\t\t`Invalid option value ${stringify(actual)} for rule \"${ruleName}\": should be an object`,\n\t\t);\n\n\t\treturn;\n\t}\n\n\tfor (const [optionName, optionValue] of Object.entries(actual)) {\n\t\tif (IGNORED_OPTIONS.has(optionName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst possibleValue = possible && possible[optionName];\n\n\t\tif (!possibleValue) {\n\t\t\tcomplain(`Invalid option name \"${optionName}\" for rule \"${ruleName}\"`);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const a of [optionValue].flat()) {\n\t\t\tif (isValid(possibleValue, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid value ${stringify(a)} for option \"${optionName}\" of rule \"${ruleName}\"`);\n\t\t}\n\t}\n}\n\n/**\n * @param {Possible | Possible[]} possible\n * @param {unknown} actual\n * @returns {boolean}\n */\nfunction isValid(possible, actual) {\n\tfor (const possibility of [possible].flat()) {\n\t\tif (typeof possibility === 'function' && possibility(actual)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (actual === possibility) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nfunction stringify(value) {\n\tif (typeof value === 'string') {\n\t\treturn `\"${value}\"`;\n\t}\n\n\treturn `\"${JSON.stringify(value)}\"`;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.validateOptions} */ (validateOptions);\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'alpha-value-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/alpha-value-notation',\n\tfixable: true,\n};\n\nconst ALPHA_PROPS = new Set([\n\t'opacity',\n\t'shape-image-threshold',\n\t// SVG properties\n\t'fill-opacity',\n\t'flood-opacity',\n\t'stop-opacity',\n\t'stroke-opacity',\n]);\nconst ALPHA_FUNCS = new Set(['hsl', 'hsla', 'hwb', 'lab', 'lch', 'rgb', 'rgba']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['number', 'percentage'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texceptProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tnumber: {\n\t\t\t\texpFunc: isNumber,\n\t\t\t\tfixFunc: asNumber,\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: isPercentage,\n\t\t\t\tfixFunc: asPercentage,\n\t\t\t},\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\t/** @type {import('postcss-value-parser').Node | undefined} */\n\t\t\t\tlet alpha;\n\n\t\t\t\tif (ALPHA_PROPS.has(decl.prop.toLowerCase())) {\n\t\t\t\t\talpha = findAlphaInValue(node);\n\t\t\t\t} else {\n\t\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\t\tif (!ALPHA_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\t\talpha = findAlphaInFunction(node);\n\t\t\t\t}\n\n\t\t\t\tif (!alpha) return;\n\n\t\t\t\tconst { value } = alpha;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isNumber(value) && !isPercentage(value)) return;\n\n\t\t\t\t/** @type {'number' | 'percentage'} */\n\t\t\t\tlet expectation = primary;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'exceptProperties', decl.prop)) {\n\t\t\t\t\tif (expectation === 'number') {\n\t\t\t\t\t\texpectation = 'percentage';\n\t\t\t\t\t} else if (expectation === 'percentage') {\n\t\t\t\t\t\texpectation = 'number';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (optionFuncs[expectation].expFunc(value)) return;\n\n\t\t\t\tconst fixed = optionFuncs[expectation].fixFunc(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\talpha.value = String(fixed);\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + alpha.sourceIndex;\n\t\t\t\tconst endIndex = index + alpha.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asPercentage(value) {\n\tconst number = Number(value);\n\n\treturn `${Number((number * 100).toPrecision(3))}%`;\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tassert(dimension);\n\n\tconst number = Number(dimension.number);\n\n\treturn Number((number / 100).toPrecision(3)).toString();\n}\n\n/**\n * @template {import('postcss-value-parser').Node} T\n * @param {T} node\n * @returns {T | undefined}\n */\nfunction findAlphaInValue(node) {\n\treturn node.type === 'word' || node.type === 'function' ? node : undefined;\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {import('postcss-value-parser').Node | undefined}\n */\nfunction findAlphaInFunction(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\n\tif (args.length === 4) return args[3];\n\n\tconst slashNodeIndex = node.nodes.findIndex(({ type, value }) => type === 'div' && value === '/');\n\n\tif (slashNodeIndex !== -1) {\n\t\tconst nodesAfterSlash = node.nodes.slice(slashNodeIndex + 1, node.nodes.length);\n\n\t\treturn nodesAfterSlash.find(({ type }) => type === 'word');\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isPercentage(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '%';\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line before a node. Mutates the node.\n *\n * @template {import('postcss').ChildNode} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineBefore(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.before !== 'string') {\n\t\treturn node;\n\t}\n\n\traws.before = !/\\r?\\n/.test(raws.before)\n\t\t? newline.repeat(2) + raws.before\n\t\t: raws.before.replace(/(\\r?\\n)/, `${newline}$1`);\n\n\treturn node;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node} node\n */\nfunction getNodeLine(node) {\n\treturn node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | undefined} node\n * @returns {Node | undefined}\n */\nmodule.exports = function getPreviousNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn previousNode;\n\t}\n\n\tif (getNodeLine(node) === getNodeLine(previousNode)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\tconst previousNode2 = previousNode.prev();\n\n\tif (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\treturn previousNode;\n};\n","'use strict';\n\n/**\n * Check if a string contains at least one empty line\n *\n * @param {string | undefined} string\n * @returns {boolean}\n */\nmodule.exports = function hasEmptyLine(string) {\n\tif (string === '' || string === undefined) return false;\n\n\treturn /\\n[\\r\\t ]*\\n/.test(string);\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node | void} node\n */\nfunction getNodeLine(node) {\n\treturn node && node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | void} node\n * @returns {Node | void}\n */\nmodule.exports = function getNextNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/** @type {Node | void} */\n\tconst nextNode = node.next();\n\n\tif (!nextNode || nextNode.type !== 'comment') {\n\t\treturn nextNode;\n\t}\n\n\tif (\n\t\tgetNodeLine(node) === getNodeLine(nextNode) ||\n\t\tgetNodeLine(nextNode) === getNodeLine(nextNode.next())\n\t) {\n\t\treturn getNextNonSharedLineCommentNode(nextNode);\n\t}\n\n\treturn nextNode;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n/** @typedef {import('postcss').Node} NodeSource */\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Root}\n */\nmodule.exports.isRoot = function isRoot(node) {\n\treturn node.type === 'root';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Rule}\n */\nmodule.exports.isRule = function isRule(node) {\n\treturn node.type === 'rule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').AtRule}\n */\nmodule.exports.isAtRule = function isAtRule(node) {\n\treturn node.type === 'atrule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Comment}\n */\nmodule.exports.isComment = function isComment(node) {\n\treturn node.type === 'comment';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Declaration}\n */\nmodule.exports.isDeclaration = function isDeclaration(node) {\n\treturn node.type === 'decl';\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').FunctionNode}\n */\nmodule.exports.isValueFunction = function isValueFunction(node) {\n\treturn node.type === 'function';\n};\n\n/**\n * @param {Node} node\n * @returns {node is (Node & {source: NodeSource})}\n */\nmodule.exports.hasSource = function hasSource(node) {\n\treturn Boolean(node.source);\n};\n","'use strict';\n\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst { isRoot, isComment } = require('./typeGuards');\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\tconst aLine = a && a.source && a.source.end && a.source.end.line;\n\tconst bLine = b && b.source && b.source.start && b.source.start.line;\n\n\treturn aLine === bLine;\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nmodule.exports = function isSharedLineComment(node) {\n\tif (!isComment(node)) {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\t!isRoot(parentNode) &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function isAfterComment(node) {\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\treturn !isSharedLineComment(previousNode);\n};\n","'use strict';\n\n/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @return {boolean} True if `statement` has a block (empty or otherwise)\n */\nmodule.exports = function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst hasBlock = require('./hasBlock');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function isBlocklessAtRuleAfterBlocklessAtRule(atRule) {\n\tif (atRule.type !== 'atrule') {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode === undefined) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(previousNode) && !hasBlock(previousNode) && !hasBlock(atRule);\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('./isBlocklessAtRuleAfterBlocklessAtRule');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function isBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule) {\n\tif (!isBlocklessAtRuleAfterBlocklessAtRule(atRule)) {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode && isAtRule(previousNode)) {\n\t\treturn previousNode.name === atRule.name;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst { isComment, hasSource } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} statement\n * @returns {boolean}\n */\nmodule.exports = function isFirstNested(statement) {\n\tconst parentNode = statement.parent;\n\n\tif (parentNode === undefined || parentNode.type === 'root') {\n\t\treturn false;\n\t}\n\n\tif (statement === parentNode.first) {\n\t\treturn true;\n\t}\n\n\t/*\n\t * Search for the statement in the parent's nodes, ignoring comment\n\t * nodes on the same line as the parent's opening brace.\n\t */\n\n\tconst parentNodes = parentNode.nodes;\n\n\tif (!parentNodes) {\n\t\treturn false;\n\t}\n\n\tconst firstNode = parentNodes[0];\n\n\tif (!firstNode) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!isComment(firstNode) ||\n\t\t(typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\\n'))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (!hasSource(firstNode) || !firstNode.source.start) {\n\t\treturn false;\n\t}\n\n\tconst openingBraceLine = firstNode.source.start.line;\n\n\tif (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, node] of parentNodes.entries()) {\n\t\tif (index === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === statement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t!isComment(node) ||\n\t\t\t(hasSource(node) && node.source.end && node.source.end.line !== openingBraceLine)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* istanbul ignore next: Should always return in the loop */\n\treturn false;\n};\n","'use strict';\n\nconst { isRoot } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nmodule.exports = function isFirstNodeOfRoot(node) {\n\tif (isRoot(node)) return false;\n\n\tconst parentNode = node.parent;\n\n\tif (!parentNode) {\n\t\treturn false;\n\t}\n\n\treturn isRoot(parentNode) && node === parentNode.first;\n};\n","'use strict';\n\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\nmodule.exports = function isStandardSyntaxAtRule(atRule) {\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesBefore(node, newline) {\n\tnode.raws.before = node.raws.before ? node.raws.before.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterBlocklessAtRule');\nconst isBlocklessAtRuleAfterSameNameBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before at-rule',\n\trejected: 'Unexpected empty line before at-rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-same-name',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t],\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'always' | 'never'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst isNested = atRule.parent && atRule.parent.type !== 'root';\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\t// and following another blockless at-rule with the same name\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-same-name-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(atRule.raws.before);\n\t\t\tlet expectEmptyLineBefore = expectation === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-same-name') &&\n\t\t\t\t\tisAtRuleAfterSameNameAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-same-name-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix && context.newline) {\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(atRule, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(atRule, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: atRule, result, ruleName });\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').AtRule} atRule\n */\nfunction isAtRuleAfterSameNameAtRule(atRule) {\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\treturn previousNode && isAtRule(previousNode) && previousNode.name === atRule.name;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../utils/isStandardSyntaxAtRule');\nconst report = require('../utils/report');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void, errTarget: string }) => void,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule) => void) | null,\n * }} options\n */\nmodule.exports = function atRuleNameSpaceChecker(options) {\n\toptions.root.walkAtRules((atRule) => {\n\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckColon(\n\t\t\t`@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`,\n\t\t\tatRule.name.length,\n\t\t\tatRule,\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\toptions.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (m) => {\n\t\t\t\tif (options.fix) {\n\t\t\t\t\toptions.fix(node);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: m,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: options.result,\n\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t\terrTarget: `@${node.name}`,\n\t\t});\n\t}\n};\n","'use strict';\n\n/** @typedef {import('stylelint').ConfigurationError} ConfigurationError */\n\n/**\n * Create configurationError from text and set CLI exit code\n * @param {string} text\n * @returns {ConfigurationError}\n */\nmodule.exports = function configurationError(text) {\n\tconst err = /** @type {ConfigurationError} */ (new Error(text));\n\n\terr.code = 78;\n\n\treturn err;\n};\n","'use strict';\n\n/**\n * Check if a string is a single line (i.e. does not contain\n * any newline characters).\n *\n * @param {string} input\n * @return {boolean}\n */\nmodule.exports = function isSingleLineString(input) {\n\treturn !/[\\n\\r]/.test(input);\n};\n","'use strict';\n\n/**\n * Check if a character is whitespace.\n *\n * @param {string} char\n * @returns {boolean}\n */\nmodule.exports = function isWhitespace(char) {\n\treturn [' ', '\\n', '\\t', '\\r', '\\f'].includes(char);\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst isSingleLineString = require('./isSingleLineString');\nconst isWhitespace = require('./isWhitespace');\nconst { assertFunction, isNullish } = require('./validateTypes');\n\n/**\n * @typedef {(message: string) => string} MessageFunction\n */\n\n/**\n * @typedef {Object} Messages\n * @property {MessageFunction} [expectedBefore]\n * @property {MessageFunction} [rejectedBefore]\n * @property {MessageFunction} [expectedAfter]\n * @property {MessageFunction} [rejectedAfter]\n * @property {MessageFunction} [expectedBeforeSingleLine]\n * @property {MessageFunction} [rejectedBeforeSingleLine]\n * @property {MessageFunction} [expectedBeforeMultiLine]\n * @property {MessageFunction} [rejectedBeforeMultiLine]\n * @property {MessageFunction} [expectedAfterSingleLine]\n * @property {MessageFunction} [rejectedAfterSingleLine]\n * @property {MessageFunction} [expectedAfterMultiLine]\n * @property {MessageFunction} [rejectedAfterMultiLine]\n */\n\n/**\n * @typedef {Object} WhitespaceCheckerArgs\n * @property {string} source - The source string\n * @property {number} index - The index of the character to check before\n * @property {(message: string) => void} err - If a problem is found, this callback\n *   will be invoked with the relevant warning message.\n *   Typically this callback will report() the problem.\n * @property {string} [errTarget] - If a problem is found, this string\n *   will be sent to the relevant warning message.\n * @property {string} [lineCheckStr] - Single- and multi-line checkers\n *   will use this string to determine whether they should proceed,\n *   i.e. if this string is one line only, single-line checkers will check,\n *   multi-line checkers will ignore.\n *   If none is passed, they will use `source`.\n * @property {boolean} [onlyOneChar=false] - Only check *one* character before.\n *   By default, \"always-*\" checks will look for the `targetWhitespace` one\n *   before and then ensure there is no whitespace two before. This option\n *   bypasses that second check.\n * @property {boolean} [allowIndentation=false] - Allow arbitrary indentation\n *   between the `targetWhitespace` (almost definitely a newline) and the `index`.\n *   With this option, the checker will see if a newline *begins* the whitespace before\n *   the `index`.\n */\n\n/**\n * @typedef {(args: WhitespaceCheckerArgs) => void} WhitespaceChecker\n */\n\n/**\n * @typedef {{\n *   before: WhitespaceChecker,\n *   beforeAllowingIndentation: WhitespaceChecker,\n *   after: WhitespaceChecker,\n *   afterOneOnly: WhitespaceChecker,\n * }} WhitespaceCheckers\n */\n\n/**\n * Create a whitespaceChecker, which exposes the following functions:\n * - `before()`\n * - `beforeAllowingIndentation()`\n * - `after()`\n * - `afterOneOnly()`\n *\n * @param {\"space\" | \"newline\"} targetWhitespace - This is a keyword instead\n *   of the actual character (e.g. \" \") in order to accommodate\n *   different styles of newline (\"\\n\" vs \"\\r\\n\")\n * @param {\"always\" | \"never\" | \"always-single-line\" | \"always-multi-line\" | \"never-single-line\" | \"never-multi-line\"} expectation\n * @param {Messages} messages - An object of message functions;\n *   calling `before*()` or `after*()` and the `expectation` that is passed\n *   determines which message functions are required\n *\n * @returns {WhitespaceCheckers} The checker, with its exposed checking functions\n */\nmodule.exports = function whitespaceChecker(targetWhitespace, expectation, messages) {\n\t// Keep track of active arguments in order to avoid passing\n\t// too much stuff around, making signatures long and confusing.\n\t// This variable gets reset anytime a checking function is called.\n\t/** @type {WhitespaceCheckerArgs} */\n\tlet activeArgs;\n\n\t/**\n\t * Check for whitespace *before* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction before({\n\t\tsource,\n\t\tindex,\n\t\terr,\n\t\terrTarget,\n\t\tlineCheckStr,\n\t\tonlyOneChar = false,\n\t\tallowIndentation = false,\n\t}) {\n\t\tactiveArgs = {\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr,\n\t\t\terrTarget,\n\t\t\tonlyOneChar,\n\t\t\tallowIndentation,\n\t\t};\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * Check for whitespace *after* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction after({ source, index, err, errTarget, lineCheckStr, onlyOneChar = false }) {\n\t\tactiveArgs = { source, index, err, errTarget, onlyOneChar };\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction beforeAllowingIndentation(obj) {\n\t\tbefore({ ...obj, allowIndentation: true });\n\t}\n\n\tfunction expectBefore(messageFunc = messages.expectedBefore) {\n\t\tif (activeArgs.allowIndentation) {\n\t\t\texpectBeforeAllowingIndentation(messageFunc);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst _activeArgs = activeArgs;\n\t\tconst source = _activeArgs.source;\n\t\tconst index = _activeArgs.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\t\tconst twoCharsBefore = source[index - 2];\n\n\t\tif (isNullish(oneCharBefore)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharBefore === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsBefore) || !isWhitespace(twoCharsBefore))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction expectBeforeAllowingIndentation(messageFunc = messages.expectedBefore) {\n\t\tconst _activeArgs2 = activeArgs;\n\t\tconst source = _activeArgs2.source;\n\t\tconst index = _activeArgs2.index;\n\t\tconst err = _activeArgs2.err;\n\n\t\tconst expectedChar = targetWhitespace === 'newline' ? '\\n' : undefined;\n\t\tlet i = index - 1;\n\n\t\twhile (source[i] !== expectedChar) {\n\t\t\tif (source[i] === '\\t' || source[i] === ' ') {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tassertFunction(messageFunc);\n\t\t\terr(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction rejectBefore(messageFunc = messages.rejectedBefore) {\n\t\tconst _activeArgs3 = activeArgs;\n\t\tconst source = _activeArgs3.source;\n\t\tconst index = _activeArgs3.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\n\t\tif (!isNullish(oneCharBefore) && isWhitespace(oneCharBefore)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction afterOneOnly(obj) {\n\t\tafter({ ...obj, onlyOneChar: true });\n\t}\n\n\tfunction expectAfter(messageFunc = messages.expectedAfter) {\n\t\tconst _activeArgs4 = activeArgs;\n\t\tconst source = _activeArgs4.source;\n\t\tconst index = _activeArgs4.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\t\tconst twoCharsAfter = source[index + 2];\n\t\tconst threeCharsAfter = source[index + 3];\n\n\t\tif (isNullish(oneCharAfter)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (targetWhitespace === 'newline') {\n\t\t\t// If index is followed by a Windows CR-LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\r' &&\n\t\t\t\ttwoCharsAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(threeCharsAfter) || !isWhitespace(threeCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If index is followed by a Unix LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharAfter === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction rejectAfter(messageFunc = messages.rejectedAfter) {\n\t\tconst _activeArgs5 = activeArgs;\n\t\tconst source = _activeArgs5.source;\n\t\tconst index = _activeArgs5.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\n\t\tif (!isNullish(oneCharAfter) && isWhitespace(oneCharAfter)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\treturn {\n\t\tbefore,\n\t\tbeforeAllowingIndentation,\n\t\tafter,\n\t\tafterOneOnly,\n\t};\n};\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected single space after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule) => {\n\t\t\t\t\t\tif (typeof atRule.raws.afterName === 'string') {\n\t\t\t\t\t\t\tatRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Convert the specified value to an array. If an array is specified, the array is returned as-is.\n *\n * @template T\n * @param {T | T[] | undefined | null} value\n * @returns {T[] | undefined}\n */\nmodule.exports = function flattenArray(value) {\n\tif (value == null) {\n\t\treturn;\n\t}\n\n\treturn Array.isArray(value) ? value : [value];\n};\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties are one or more values\n * that satisfy the specified validator(s):\n *\n * @example\n * ignoreProperties = {\n *   value1: [\"item11\", \"item12\", \"item13\"],\n *   value2: \"item2\",\n * };\n * validateObjectWithArrayProps(isString)(ignoreProperties);\n * //=> true\n *\n * @typedef {(value: unknown) => boolean} Validator\n * @param {...Validator} validators\n * @returns {Validator}\n */\nmodule.exports = function validateObjectWithArrayProps(...validators) {\n\treturn (value) => {\n\t\tif (!isPlainObject(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.values(value)\n\t\t\t.flat()\n\t\t\t.every((item) => validators.some((v) => v(item)));\n\t};\n};\n","'use strict';\n\nconst flattenArray = require('../../utils/flattenArray');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-property-required-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\t\t\tconst propList = flattenArray(primary[atRuleName]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const property of propList) {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t(node) => node.type === 'decl' && node.prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: `@${atRule.name}`,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'lower' | 'upper'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tconst expectedName = expectation === 'lower' ? name.toLowerCase() : name.toUpperCase();\n\n\t\t\tif (name === expectedName) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = expectedName;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(name, expectedName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function beforeBlockString(statement, { noRawBefore } = { noRawBefore: false }) {\n\tlet result = '';\n\n\tconst before = statement.raws.before || '';\n\n\tif (!noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (isRule(statement)) {\n\t\tresult += statement.selector;\n\t} else if (isAtRule(statement)) {\n\t\tresult += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;\n\t} else {\n\t\treturn '';\n\t}\n\n\tresult += statement.raws.between || '';\n\n\treturn result;\n};\n","'use strict';\n\nconst { assertString } = require('./validateTypes');\n\nconst DISABLE_COMMAND = 'stylelint-disable';\nconst DISABLE_LINE_COMMAND = 'stylelint-disable-line';\nconst DISABLE_NEXT_LINE_COMMAND = 'stylelint-disable-next-line';\nconst ENABLE_COMMAND = 'stylelint-enable';\n\nconst ALL_COMMANDS = new Set([\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n]);\n\n/** @typedef {import('postcss').Comment} Comment */\n\n/**\n * Extract a command from a given comment.\n *\n * @param {Comment} comment\n * @returns {string}\n */\nfunction extractStylelintCommand(comment) {\n\tconst [command] = comment.text.split(/\\s/, 1);\n\n\tassertString(command);\n\n\treturn command;\n}\n\n/**\n * Tests if the given comment is a Stylelint command.\n *\n * @param {Comment} comment\n * @returns {boolean}\n */\nfunction isStylelintCommand(comment) {\n\tconst command = extractStylelintCommand(comment);\n\n\treturn command !== undefined && ALL_COMMANDS.has(command);\n}\n\nmodule.exports = {\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n\n\textractStylelintCommand,\n\tisStylelintCommand,\n};\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isStylelintCommand } = require('../../utils/stylelintCommand');\nconst { isComment } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isBoolean,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/** @typedef {import('postcss').Rule | import('postcss').AtRule} Statement */\n\n\t\t/**\n\t\t * @param {Statement} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasNotableChild(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet index = beforeBlockString(statement, { noRawBefore: true }).length;\n\n\t\t\t// For empty blocks when using SugarSS parser\n\t\t\tif (statement.raws.between === undefined) {\n\t\t\t\tindex--;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: statement,\n\t\t\t\tstart: statement.positionBy({ index }),\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {Statement} statement\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction hasNotableChild(statement) {\n\t\t\treturn statement.nodes.some((child) => {\n\t\t\t\tif (isComment(child)) {\n\t\t\t\t\tif (ignoreComments) return false;\n\n\t\t\t\t\tif (isStylelintCommand(child)) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Stringify PostCSS node including its raw \"before\" string.\n *\n * @param {import('postcss').Node} node\n *\n * @returns {string}\n */\nmodule.exports = function rawNodeString(node) {\n\tlet result = '';\n\n\tif (node.raws.before) {\n\t\tresult += node.raws.before;\n\t}\n\n\tresult += node.toString();\n\n\treturn result;\n};\n","'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\nconst hasBlock = require('./hasBlock');\nconst rawNodeString = require('./rawNodeString');\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`), returns an empty string.\n *\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function blockString(statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn '';\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-closing-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected newline after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected newline after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment x spaces after the brace\n\t\t\tconst nextNodeIsSingleLineComment =\n\t\t\t\tnextNode.type === 'comment' &&\n\t\t\t\t!/[^ ]/.test(nextNode.raws.before || '') &&\n\t\t\t\t!nextNode.toString().includes('\\n');\n\n\t\t\tconst nodeToCheck = nextNodeIsSingleLineComment ? nextNode.next() : nextNode;\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nodeToCheck);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\t// Only check one after, because there might be other\n\t\t\t// spaces handled by the indentation rule\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"}\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nextNode);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('./hasBlock');\n\n/**\n * Check if a statement has an empty block.\n *\n * @param {import('postcss').Rule | import('postcss').AtRule} statement - postcss rule or at-rule node\n * @return {boolean} True if the statement has a block and it is empty\n */\nmodule.exports = function hasEmptyBlock(statement) {\n\treturn hasBlock(statement) && statement.nodes.length === 0;\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"}\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"}\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = blockString(statement);\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length - 1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, ' ');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","/**\n * Unite two or more sets\n *\n * @param {Iterable<string>[]} args\n */\nmodule.exports = function uniteSets(...args) {\n\treturn new Set([...args].reduce((result, set) => [...result, ...set], []));\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\n// https://www.w3.org/TR/css-page-3/#syntax-page-selector\nconst pageMarginAtKeywords = new Set([\n\t'top-left-corner',\n\t'top-left',\n\t'top-center',\n\t'top-right',\n\t'top-right-corner',\n\t'bottom-left-corner',\n\t'bottom-left',\n\t'bottom-center',\n\t'bottom-right',\n\t'bottom-right-corner',\n\t'left-top',\n\t'left-middle',\n\t'left-bottom',\n\t'right-top',\n\t'right-middle',\n\t'right-bottom',\n]);\n\n// https://developer.mozilla.org/en/docs/Web/CSS/At-rule\nconst atKeywords = uniteSets(pageMarginAtKeywords, [\n\t'annotation',\n\t'apply',\n\t'character-variant',\n\t'charset',\n\t'container',\n\t'counter-style',\n\t'custom-media',\n\t'custom-selector',\n\t'document',\n\t'font-face',\n\t'font-feature-values',\n\t'import',\n\t'keyframes',\n\t'layer',\n\t'media',\n\t'namespace',\n\t'nest',\n\t'ornaments',\n\t'page',\n\t'property',\n\t'styleset',\n\t'stylistic',\n\t'supports',\n\t'swash',\n\t'viewport',\n]);\n\nmodule.exports = {\n\tatKeywords,\n};\n","'use strict';\n\n/**\n * Contains helpers for working with vendor prefixes.\n *\n * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2\n *\n * @namespace vendor\n */\nmodule.exports = {\n\t/**\n\t * Returns the vendor prefix extracted from an input string.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} vendor prefix or empty string\n\t *\n\t * @example\n\t * vendor.prefix('-moz-tab-size') //=> '-moz-'\n\t * vendor.prefix('tab-size')      //=> ''\n\t */\n\tprefix(prop) {\n\t\tconst match = prop.match(/^(-\\w+-)/);\n\n\t\tif (match) {\n\t\t\treturn match[0] || '';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\t/**\n\t * Returns the input string stripped of its vendor prefix.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} String name without vendor prefixes.\n\t *\n\t * @example\n\t * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n\t */\n\tunprefixed(prop) {\n\t\treturn prop.replace(/^-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst { atKeywords } = require('../../reference/atKeywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atRule) => `Unexpected unknown at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (vendor.prefix(name) || atKeywords.has(name.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst atName = `@${name}`;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(atName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t\tword: atName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: 'Expected newline before \"}\"',\n\texpectedBeforeMultiLine: 'Expected newline before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore extra semicolon\n\t\t\tconst after = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\tif (after === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockIsMultiLine = !isSingleLineString(blockString(statement));\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// We're really just checking whether a\n\t\t\t// newline *starts* the block's final space -- between\n\t\t\t// the last declaration and the closing brace. We can\n\t\t\t// ignore any other whitespace between them, because that\n\t\t\t// will be checked by the indentation rule.\n\t\t\tif (!after.startsWith('\\n') && !after.startsWith('\\r\\n')) {\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tcomplain(messages.expectedBefore);\n\t\t\t\t} else if (blockIsMultiLine && primary === 'always-multi-line') {\n\t\t\t\t\tcomplain(messages.expectedBeforeMultiLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (after !== '' && blockIsMultiLine && primary === 'never-multi-line') {\n\t\t\t\tcomplain(messages.rejectedBeforeMultiLine);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t */\n\t\t\tfunction complain(message) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst firstWhitespaceIndex = statementRaws.after.search(/\\s/);\n\t\t\t\t\t\tconst newlineBefore =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0\n\t\t\t\t\t\t\t\t? statementRaws.after.slice(0, firstWhitespaceIndex)\n\t\t\t\t\t\t\t\t: statementRaws.after;\n\t\t\t\t\t\tconst newlineAfter =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0 ? statementRaws.after.slice(firstWhitespaceIndex) : '';\n\t\t\t\t\t\tconst newlineIndex = newlineAfter.search(/\\r?\\n/);\n\n\t\t\t\t\t\tstatementRaws.after =\n\t\t\t\t\t\t\tnewlineIndex >= 0\n\t\t\t\t\t\t\t\t? newlineBefore + newlineAfter.slice(newlineIndex)\n\t\t\t\t\t\t\t\t: newlineBefore + context.newline + newlineAfter;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s/g, '');\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Comment} comment\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxComment(comment) {\n\t// We check both here because the Sass parser uses `raws.inline` to indicate\n\t// inline comments, while the Less parser uses `inline`.\n\tif ('inline' in comment) return false;\n\n\tif ('inline' in comment.raws) return false;\n\n\treturn true;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSharedLineComment = require('../../utils/isSharedLineComment');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before comment',\n\trejected: 'Unexpected empty line before comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-empty-line-before',\n\tfixable: true,\n};\n\nconst stylelintCommandPrefix = 'stylelint-';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested'],\n\t\t\t\t\tignore: ['stylelint-commands', 'after-comment'],\n\t\t\t\t\tignoreComments: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore stylelint commands\n\t\t\tif (\n\t\t\t\tcomment.text.startsWith(stylelintCommandPrefix) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'stylelint-commands')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore newlines between comments\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore comments matching the ignoreComments option.\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreComments', comment.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore shared-line comments\n\t\t\tif (isSharedLineComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(comment)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always';\n\t\t\t})();\n\n\t\t\tconst before = comment.raws.before || '';\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (typeof context.newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(comment, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(comment, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst vendor = require('./vendor');\n\n/**\n * Extract each list using the internal API of Autoprefixer 10.2.5.\n *\n * @see https://github.com/postcss/autoprefixer/tree/10.2.5\n *\n * @example\n * const autoprefixer = require('autoprefixer');\n * const Browsers = require('autoprefixer/lib/browsers');\n * const Prefixes = require('autoprefixer/lib/prefixes');\n * const utils = require('autoprefixer/lib/utils');\n *\n * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));\n */\n\n/**\n * @example\n * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));\n */\nconst AT_RULES = new Set([\n\t'@-khtml-keyframes',\n\t'@-moz-keyframes',\n\t'@-ms-keyframes',\n\t'@-ms-viewport',\n\t'@-o-keyframes',\n\t'@-o-viewport',\n\t'@-webkit-keyframes',\n\t'@resolution',\n]);\n\n/**\n * @example\n * prefixes.remove.selectors.map((s) => s.prefixed);\n */\nconst SELECTORS = new Set([\n\t':-moz-any-link',\n\t':-moz-full-screen',\n\t':-moz-placeholder',\n\t':-moz-placeholder-shown',\n\t':-moz-read-only',\n\t':-moz-read-write',\n\t':-ms-fullscreen',\n\t':-ms-input-placeholder',\n\t':-webkit-any-link',\n\t':-webkit-full-screen',\n\t'::-moz-placeholder',\n\t'::-moz-selection',\n\t'::-ms-input-placeholder',\n\t'::-webkit-backdrop',\n\t'::-webkit-input-placeholder',\n]);\n\n/**\n * @example\n * Object.entries(autoprefixer.data.prefixes)\n *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))\n *   .map(([key, value]) => key);\n */\nconst PROPERTIES = new Set([\n\t'align-content',\n\t'align-items',\n\t'align-self',\n\t'animation',\n\t'animation-delay',\n\t'animation-direction',\n\t'animation-duration',\n\t'animation-fill-mode',\n\t'animation-iteration-count',\n\t'animation-name',\n\t'animation-play-state',\n\t'animation-timing-function',\n\t'appearance',\n\t'backdrop-filter',\n\t'backface-visibility',\n\t'background-clip',\n\t'background-origin',\n\t'background-size',\n\t'border-block-end',\n\t'border-block-start',\n\t'border-bottom-left-radius',\n\t'border-bottom-right-radius',\n\t'border-image',\n\t'border-inline-end',\n\t'border-inline-start',\n\t'border-radius',\n\t'border-top-left-radius',\n\t'border-top-right-radius',\n\t'box-decoration-break',\n\t'box-shadow',\n\t'box-sizing',\n\t'break-after',\n\t'break-before',\n\t'break-inside',\n\t'clip-path',\n\t'color-adjust',\n\t'column-count',\n\t'column-fill',\n\t'column-gap',\n\t'column-rule',\n\t'column-rule-color',\n\t'column-rule-style',\n\t'column-rule-width',\n\t'column-span',\n\t'column-width',\n\t'columns',\n\t'filter',\n\t'flex',\n\t'flex-basis',\n\t'flex-direction',\n\t'flex-flow',\n\t'flex-grow',\n\t'flex-shrink',\n\t'flex-wrap',\n\t'flow-from',\n\t'flow-into',\n\t'font-feature-settings',\n\t'font-kerning',\n\t'font-language-override',\n\t'font-variant-ligatures',\n\t'grid-area',\n\t'grid-column',\n\t'grid-column-align',\n\t'grid-column-end',\n\t'grid-column-start',\n\t'grid-row',\n\t'grid-row-align',\n\t'grid-row-end',\n\t'grid-row-start',\n\t'grid-template',\n\t'grid-template-areas',\n\t'grid-template-columns',\n\t'grid-template-rows',\n\t'hyphens',\n\t'image-rendering',\n\t'justify-content',\n\t'margin-block-end',\n\t'margin-block-start',\n\t'margin-inline-end',\n\t'margin-inline-start',\n\t'mask',\n\t'mask-border',\n\t'mask-border-outset',\n\t'mask-border-repeat',\n\t'mask-border-slice',\n\t'mask-border-source',\n\t'mask-border-width',\n\t'mask-clip',\n\t'mask-composite',\n\t'mask-image',\n\t'mask-origin',\n\t'mask-position',\n\t'mask-repeat',\n\t'mask-size',\n\t'object-fit',\n\t'object-position',\n\t'order',\n\t'overscroll-behavior',\n\t'padding-block-end',\n\t'padding-block-start',\n\t'padding-inline-end',\n\t'padding-inline-start',\n\t'perspective',\n\t'perspective-origin',\n\t'place-self',\n\t'region-fragment',\n\t'scroll-snap-coordinate',\n\t'scroll-snap-destination',\n\t'scroll-snap-points-x',\n\t'scroll-snap-points-y',\n\t'scroll-snap-type',\n\t'shape-image-threshold',\n\t'shape-margin',\n\t'shape-outside',\n\t'tab-size',\n\t'text-align-last',\n\t'text-decoration',\n\t'text-decoration-color',\n\t'text-decoration-line',\n\t'text-decoration-skip',\n\t'text-decoration-skip-ink',\n\t'text-decoration-style',\n\t'text-emphasis',\n\t'text-emphasis-color',\n\t'text-emphasis-position',\n\t'text-emphasis-style',\n\t'text-orientation',\n\t'text-overflow',\n\t'text-size-adjust',\n\t'text-spacing',\n\t'touch-action',\n\t'transform',\n\t'transform-origin',\n\t'transform-style',\n\t'transition',\n\t'transition-delay',\n\t'transition-duration',\n\t'transition-property',\n\t'transition-timing-function',\n\t'user-select',\n\t'writing-mode',\n]);\n\n/**\n * @example\n * Object.values(prefixes.remove)\n *   .filter((p) => Array.isArray(p.values))\n *   .flatMap((p) => p.values)\n *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'\n *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only\n *\n * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013\n */\nconst PROPERTY_VALUES = new Set([\n\t'-moz-available',\n\t'-moz-box',\n\t'-moz-calc',\n\t'-moz-crisp-edges',\n\t'-moz-element',\n\t'-moz-fit-content',\n\t'-moz-grab',\n\t'-moz-grabbing',\n\t'-moz-inline-box',\n\t'-moz-isolate',\n\t'-moz-isolate-override',\n\t'-moz-linear-gradient',\n\t'-moz-max-content',\n\t'-moz-min-content',\n\t'-moz-plaintext',\n\t'-moz-radial-gradient',\n\t'-moz-repeating-linear-gradient',\n\t'-moz-repeating-radial-gradient',\n\t'-moz-zoom-in',\n\t'-moz-zoom-out',\n\t'-ms-flexbox',\n\t'-ms-grid',\n\t'-ms-inline-flexbox',\n\t'-ms-inline-grid',\n\t'-ms-linear-gradient',\n\t'-ms-radial-gradient',\n\t'-ms-repeating-linear-gradient',\n\t'-ms-repeating-radial-gradient',\n\t'-o-linear-gradient',\n\t'-o-pixelated',\n\t'-o-radial-gradient',\n\t'-o-repeating-linear-gradient',\n\t'-o-repeating-radial-gradient',\n\t'-webkit-box',\n\t'-webkit-calc',\n\t'-webkit-cross-fade',\n\t'-webkit-fill-available',\n\t'-webkit-filter',\n\t'-webkit-fit-content',\n\t'-webkit-flex',\n\t'-webkit-grab',\n\t'-webkit-grabbing',\n\t'-webkit-image-set',\n\t'-webkit-inline-box',\n\t'-webkit-inline-flex',\n\t'-webkit-isolate',\n\t'-webkit-linear-gradient',\n\t'-webkit-max-content',\n\t'-webkit-min-content',\n\t'-webkit-optimize-contrast',\n\t'-webkit-radial-gradient',\n\t'-webkit-repeating-linear-gradient',\n\t'-webkit-repeating-radial-gradient',\n\t'-webkit-sticky',\n\t'-webkit-zoom-in',\n\t'-webkit-zoom-out',\n]);\n\n/**\n * Most identifier types have to be looked up in a unique way,\n * so we're exposing special functions for each.\n */\nmodule.exports = {\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tatRuleName(identifier) {\n\t\treturn AT_RULES.has(`@${identifier.toLowerCase()}`);\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tselector(identifier) {\n\t\treturn SELECTORS.has(identifier.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tmediaFeatureName(identifier) {\n\t\treturn identifier.toLowerCase().includes('device-pixel-ratio');\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tproperty(identifier) {\n\t\tconst ident = identifier.toLowerCase();\n\n\t\t// HACK: `interpolation-mode` does not exist. This is an IE extension for `image-rendering`.\n\t\t//       See <https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#examples>\n\t\tif (ident === '-ms-interpolation-mode') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (vendor.prefix(ident).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn PROPERTIES.has(vendor.unprefixed(ident));\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {boolean}\n\t */\n\tpropertyValue(value) {\n\t\treturn PROPERTY_VALUES.has(value.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {string}\n\t */\n\tunprefix(value) {\n\t\treturn value.replace(/-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (p) => `Unexpected vendor-prefixed at-rule \"@${p}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!name.startsWith('-')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.atRuleName(name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = isAutoprefixable.unprefix(atRule.name);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tword: `@${name}`,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is standard\n *\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxFunction(node) {\n\t// Function nodes without names are things in parentheses like Sass lists\n\tif (!node.value) {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('#{')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxFunction = require('./isStandardSyntaxFunction');\n\n/**\n * Check whether a function is standard syntax color function\n *\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxColorFunction(node) {\n\tif (!isStandardSyntaxFunction(node)) return false;\n\n\t// scss can accept a #hex, or $var variables and we need to check all nested fn nodes\n\tfor (const fnNode of node.nodes) {\n\t\tif (fnNode.type === 'function') return isStandardSyntaxColorFunction(fnNode);\n\n\t\tif (fnNode.type === 'word' && (fnNode.value.startsWith('#') || fnNode.value.startsWith('$')))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxColorFunction = require('../../utils/isStandardSyntaxColorFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (primary) => `Expected ${primary} color-function notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-function-notation',\n\tfixable: true,\n};\n\nconst LEGACY_FUNCS = new Set(['rgba', 'hsla']);\nconst LEGACY_NOTATION_FUNCS = new Set(['rgb', 'rgba', 'hsl', 'hsla']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['modern', 'legacy'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (!isStandardSyntaxColorFunction(node)) return;\n\n\t\t\t\tconst { value, sourceIndex, sourceEndIndex, nodes } = node;\n\n\t\t\t\tif (!LEGACY_NOTATION_FUNCS.has(value.toLowerCase())) return;\n\n\t\t\t\tif (primary === 'modern' && !hasCommas(node)) return;\n\n\t\t\t\tif (primary === 'legacy' && hasCommas(node)) return;\n\n\t\t\t\tif (context.fix && primary === 'modern') {\n\t\t\t\t\tlet commaCount = 0;\n\n\t\t\t\t\t// Convert punctuation\n\t\t\t\t\tnode.nodes = nodes.map((childNode) => {\n\t\t\t\t\t\tif (isComma(childNode)) {\n\t\t\t\t\t\t\t// Non-alpha commas to space and alpha commas to slashes\n\t\t\t\t\t\t\tif (commaCount < 2) {\n\t\t\t\t\t\t\t\t// @ts-expect-error -- TS2322: Type '\"space\"' is not assignable to type '\"div\"'.\n\t\t\t\t\t\t\t\tchildNode.type = 'space';\n\t\t\t\t\t\t\t\tchildNode.value = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t\tcommaCount++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchildNode.value = '/';\n\t\t\t\t\t\t\t\tchildNode.before = atLeastOneSpace(childNode.before);\n\t\t\t\t\t\t\t\tchildNode.after = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove trailing 'a' from legacy function name\n\t\t\t\t\tif (LEGACY_FUNCS.has(node.value.toLowerCase())) {\n\t\t\t\t\t\tnode.value = node.value.slice(0, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + (sourceEndIndex - sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} whitespace\n */\nfunction atLeastOneSpace(whitespace) {\n\treturn whitespace !== '' ? whitespace : ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').DivNode}\n */\nfunction isComma(node) {\n\treturn node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction hasCommas(node) {\n\treturn node.nodes && node.nodes.some((childNode) => isComma(childNode));\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-hex-alpha';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (hex) => `Expected alpha channel in \"${hex}\"`,\n\tunexpected: (hex) => `Unexpected alpha channel in \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-alpha',\n};\n\nconst HEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(decl.value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isUrlFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (primary === 'always' && hasAlphaChannel(value)) return;\n\n\t\t\t\tif (primary === 'never' && !hasAlphaChannel(value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: primary === 'never' ? messages.unexpected(value) : messages.expected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isUrlFunction({ type, value }) {\n\treturn type === 'function' && value === 'url';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\n/**\n * @param {string} hex\n */\nfunction hasAlphaChannel(hex) {\n\treturn hex.length === 5 || hex.length === 9;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-opening-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"{\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if selector is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'rule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', statement.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.raws.between = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.between = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst acceptCustomIdentsProperties = new Set([\n\t'animation',\n\t'animation-name',\n\t'font',\n\t'font-family',\n\t'counter-increment',\n\t'grid-row',\n\t'grid-column',\n\t'grid-area',\n\t'list-style',\n\t'list-style-type',\n]);\n\n/** @type {import('stylelint').LonghandSubPropertiesOfShorthandProperties} */\nconst longhandSubPropertiesOfShorthandProperties = new Map([\n\t// Sort alphabetically\n\t[\n\t\t'animation',\n\t\tnew Set([\n\t\t\t'animation-name',\n\t\t\t'animation-duration',\n\t\t\t'animation-timing-function',\n\t\t\t'animation-delay',\n\t\t\t'animation-iteration-count',\n\t\t\t'animation-direction',\n\t\t\t'animation-fill-mode',\n\t\t\t'animation-play-state',\n\t\t]),\n\t],\n\t[\n\t\t'background',\n\t\tnew Set([\n\t\t\t'background-image',\n\t\t\t'background-size',\n\t\t\t'background-position',\n\t\t\t'background-repeat',\n\t\t\t'background-origin',\n\t\t\t'background-clip',\n\t\t\t'background-attachment',\n\t\t\t'background-color',\n\t\t]),\n\t],\n\t[\n\t\t'border',\n\t\tnew Set([\n\t\t\t'border-top-width',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left-width',\n\t\t\t'border-right-width',\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-style',\n\t\t\t'border-left-style',\n\t\t\t'border-right-style',\n\t\t\t'border-top-color',\n\t\t\t'border-bottom-color',\n\t\t\t'border-left-color',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-block-end',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-block-end-width',\n\t\t\t'border-block-end-style',\n\t\t\t'border-block-end-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-block-start',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-block-start-width',\n\t\t\t'border-block-start-style',\n\t\t\t'border-block-start-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-bottom',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-bottom-width',\n\t\t\t'border-bottom-style',\n\t\t\t'border-bottom-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-color',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-color',\n\t\t\t'border-bottom-color',\n\t\t\t'border-left-color',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-image',\n\t\tnew Set([\n\t\t\t'border-image-source',\n\t\t\t'border-image-slice',\n\t\t\t'border-image-width',\n\t\t\t'border-image-outset',\n\t\t\t'border-image-repeat',\n\t\t]),\n\t],\n\t[\n\t\t'border-inline-end',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-inline-end-width',\n\t\t\t'border-inline-end-style',\n\t\t\t'border-inline-end-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-inline-start',\n\t\tnew Set([\n\t\t\t'border-inline-start-width',\n\t\t\t'border-inline-start-style',\n\t\t\t'border-inline-start-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-left',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-left-width',\n\t\t\t'border-left-style',\n\t\t\t'border-left-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-radius',\n\t\tnew Set([\n\t\t\t'border-top-right-radius',\n\t\t\t'border-top-left-radius',\n\t\t\t'border-bottom-right-radius',\n\t\t\t'border-bottom-left-radius',\n\t\t]),\n\t],\n\t[\n\t\t'border-right',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-right-width',\n\t\t\t'border-right-style',\n\t\t\t'border-right-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-style',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-style',\n\t\t\t'border-left-style',\n\t\t\t'border-right-style',\n\t\t]),\n\t],\n\t[\n\t\t'border-top',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-width',\n\t\t\t'border-top-style',\n\t\t\t'border-top-color',\n\t\t]),\n\t],\n\t[\n\t\t'border-width',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'border-top-width',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left-width',\n\t\t\t'border-right-width',\n\t\t]),\n\t],\n\t[\n\t\t'column-rule',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'column-rule-width',\n\t\t\t'column-rule-style',\n\t\t\t'column-rule-color',\n\t\t]),\n\t],\n\t[\n\t\t'columns',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'column-width',\n\t\t\t'column-count',\n\t\t]),\n\t],\n\t[\n\t\t'flex',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'flex-grow',\n\t\t\t'flex-shrink',\n\t\t\t'flex-basis',\n\t\t]),\n\t],\n\t[\n\t\t'flex-flow',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'flex-direction',\n\t\t\t'flex-wrap',\n\t\t]),\n\t],\n\t[\n\t\t'font',\n\t\tnew Set([\n\t\t\t'font-style',\n\t\t\t'font-variant',\n\t\t\t'font-weight',\n\t\t\t'font-stretch',\n\t\t\t'font-size',\n\t\t\t'font-family',\n\t\t\t'line-height',\n\t\t]),\n\t],\n\t[\n\t\t'grid',\n\t\tnew Set([\n\t\t\t'grid-template-rows',\n\t\t\t'grid-template-columns',\n\t\t\t'grid-template-areas',\n\t\t\t'grid-auto-rows',\n\t\t\t'grid-auto-columns',\n\t\t\t'grid-auto-flow',\n\t\t\t'grid-column-gap',\n\t\t\t'grid-row-gap',\n\t\t]),\n\t],\n\t[\n\t\t'grid-area',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-start',\n\t\t\t'grid-column-start',\n\t\t\t'grid-row-end',\n\t\t\t'grid-column-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-column',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-column-start',\n\t\t\t'grid-column-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-gap',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-gap',\n\t\t\t'grid-column-gap',\n\t\t]),\n\t],\n\t[\n\t\t'grid-row',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-row-start',\n\t\t\t'grid-row-end',\n\t\t]),\n\t],\n\t[\n\t\t'grid-template',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'grid-template-columns',\n\t\t\t'grid-template-rows',\n\t\t\t'grid-template-areas',\n\t\t]),\n\t],\n\t[\n\t\t'list-style',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'list-style-type',\n\t\t\t'list-style-position',\n\t\t\t'list-style-image',\n\t\t]),\n\t],\n\t[\n\t\t'margin',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'margin-top',\n\t\t\t'margin-bottom',\n\t\t\t'margin-left',\n\t\t\t'margin-right',\n\t\t]),\n\t],\n\t[\n\t\t'mask',\n\t\tnew Set([\n\t\t\t'mask-image',\n\t\t\t'mask-mode',\n\t\t\t'mask-position',\n\t\t\t'mask-size',\n\t\t\t'mask-repeat',\n\t\t\t'mask-origin',\n\t\t\t'mask-clip',\n\t\t\t'mask-composite',\n\t\t]),\n\t],\n\t[\n\t\t'outline',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'outline-color',\n\t\t\t'outline-style',\n\t\t\t'outline-width',\n\t\t]),\n\t],\n\t[\n\t\t'padding',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'padding-top',\n\t\t\t'padding-bottom',\n\t\t\t'padding-left',\n\t\t\t'padding-right',\n\t\t]),\n\t],\n\t[\n\t\t'text-decoration',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'text-decoration-color',\n\t\t\t'text-decoration-style',\n\t\t\t'text-decoration-line',\n\t\t]),\n\t],\n\t[\n\t\t'text-emphasis',\n\t\tnew Set([\n\t\t\t// prettier-ignore\n\t\t\t'text-emphasis-style',\n\t\t\t'text-emphasis-color',\n\t\t]),\n\t],\n\t[\n\t\t'transition',\n\t\tnew Set([\n\t\t\t'transition-delay',\n\t\t\t'transition-duration',\n\t\t\t'transition-property',\n\t\t\t'transition-timing-function',\n\t\t]),\n\t],\n]);\n\nconst longhandTimeProperties = new Set([\n\t'transition-duration',\n\t'transition-delay',\n\t'animation-duration',\n\t'animation-delay',\n]);\n\nconst shorthandTimeProperties = new Set(['transition', 'animation']);\n\nmodule.exports = {\n\tacceptCustomIdentsProperties,\n\tlonghandSubPropertiesOfShorthandProperties,\n\tlonghandTimeProperties,\n\tshorthandTimeProperties,\n};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},u=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},a=function(r){return{h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),w:u(r.w,0,100),b:u(r.b,0,100),a:u(r.a)};var t},e=function(r){return{h:n(r.h),w:n(r.w),b:n(r.b),a:n(r.a,3)}},b=function(r){return{h:function(r){var t=r.r,n=r.g,u=r.b,a=r.a,e=Math.max(t,n,u),b=e-Math.min(t,n,u),o=b?e===t?(n-u)/b:e===n?2+(u-t)/b:4+(t-n)/b:0;return{h:60*(o<0?o+6:o),s:e?b/e*100:0,v:e/255*100,a:a}}(r).h,w:Math.min(r.r,r.g,r.b)/255*100,b:100-Math.max(r.r,r.g,r.b)/255*100,a:r.a}},o=function(r){return function(r){var t=r.h,n=r.s,u=r.v,a=r.a;t=t/360*6,n/=100,u/=100;var e=Math.floor(t),b=u*(1-n),o=u*(1-(t-e)*n),i=u*(1-(1-t+e)*n),h=e%6;return{r:255*[u,o,b,b,i,u][h],g:255*[i,u,u,o,b,b][h],b:255*[b,b,i,u,u,o][h],a:a}}({h:r.h,s:100===r.b?0:100-r.w/(100-r.b)*100,v:100-r.b,a:r.a})},i=function(r){var n=r.h,u=r.w,e=r.b,b=r.a,i=void 0===b?1:b;if(!t(n)||!t(u)||!t(e))return null;var h=a({h:Number(n),w:Number(u),b:Number(e),a:Number(i)});return o(h)},h=/^hwb\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,d=function(t){var n=h.exec(t);if(!n)return null;var u,e,b=a({h:(u=n[1],e=n[2],void 0===e&&(e=\"deg\"),Number(u)*(r[e]||1)),w:Number(n[3]),b:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return o(b)};export default function(r,t){r.prototype.toHwb=function(){return e(b(this.rgba))},r.prototype.toHwbString=function(){return r=e(b(this.rgba)),t=r.h,n=r.w,u=r.b,(a=r.a)<1?\"hwb(\"+t+\" \"+n+\"% \"+u+\"% / \"+a+\")\":\"hwb(\"+t+\" \"+n+\"% \"+u+\"%)\";var r,t,n,u,a},t.string.push([d,\"hwb\"]),t.object.push([i,\"hwb\"])}\n","var a=function(a){return\"string\"==typeof a?a.length>0:\"number\"==typeof a},t=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=Math.pow(10,t)),Math.round(o*a)/o+0},o=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=1),a>o?o:a>t?a:t},r=function(a){var t=a/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(a){return 255*(a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a)},n=96.422,p=100,M=82.521,u=function(a){var t,r,n={x:.9555766*(t=a).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return r={r:h(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:h(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:h(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:a.a},{r:o(r.r,0,255),g:o(r.g,0,255),b:o(r.b,0,255),a:o(r.a)}},e=function(a){var t=r(a.r),h=r(a.g),u=r(a.b);return function(a){return{x:o(a.x,0,n),y:o(a.y,0,p),z:o(a.z,0,M),a:o(a.a)}}(function(a){return{x:1.0478112*a.x+.0228866*a.y+-.050127*a.z,y:.0295424*a.x+.9904844*a.y+-.0170491*a.z,z:-.0092345*a.x+.0150436*a.y+.7521316*a.z,a:a.a}}({x:100*(.4124564*t+.3575761*h+.1804375*u),y:100*(.2126729*t+.7151522*h+.072175*u),z:100*(.0193339*t+.119192*h+.9503041*u),a:a.a}))},w=216/24389,b=24389/27,i=function(t){var r=t.l,h=t.a,n=t.b,p=t.alpha,M=void 0===p?1:p;if(!a(r)||!a(h)||!a(n))return null;var u=function(a){return{l:o(a.l,0,400),a:a.a,b:a.b,alpha:o(a.alpha)}}({l:Number(r),a:Number(h),b:Number(n),alpha:Number(M)});return l(u)},l=function(a){var t=(a.l+16)/116,o=a.a/500+t,r=t-a.b/200;return u({x:(Math.pow(o,3)>w?Math.pow(o,3):(116*o-16)/b)*n,y:(a.l>8?Math.pow((a.l+16)/116,3):a.l/b)*p,z:(Math.pow(r,3)>w?Math.pow(r,3):(116*r-16)/b)*M,a:a.alpha})};export default function(a,r){a.prototype.toLab=function(){return o=e(this.rgba),h=o.y/p,u=o.z/M,r=(r=o.x/n)>w?Math.cbrt(r):(b*r+16)/116,a={l:116*(h=h>w?Math.cbrt(h):(b*h+16)/116)-16,a:500*(r-h),b:200*(h-(u=u>w?Math.cbrt(u):(b*u+16)/116)),alpha:o.a},{l:t(a.l,2),a:t(a.a,2),b:t(a.b,2),alpha:t(a.alpha,3)};var a,o,r,h,u},a.prototype.delta=function(r){void 0===r&&(r=\"#FFF\");var h=r instanceof a?r:new a(r),n=function(a,t){var o=a.l,r=a.a,h=a.b,n=t.l,p=t.a,M=t.b,u=180/Math.PI,e=Math.PI/180,w=Math.pow(Math.pow(r,2)+Math.pow(h,2),.5),b=Math.pow(Math.pow(p,2)+Math.pow(M,2),.5),i=(o+n)/2,l=Math.pow((w+b)/2,7),c=.5*(1-Math.pow(l/(l+Math.pow(25,7)),.5)),f=r*(1+c),y=p*(1+c),v=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),x=Math.pow(Math.pow(y,2)+Math.pow(M,2),.5),z=(v+x)/2,s=0===f&&0===h?0:Math.atan2(h,f)*u,d=0===y&&0===M?0:Math.atan2(M,y)*u;s<0&&(s+=360),d<0&&(d+=360);var g=d-s,m=Math.abs(d-s);m>180&&d<=s?g+=360:m>180&&d>s&&(g-=360);var N=s+d;m<=180?N/=2:N=(s+d<360?N+360:N-360)/2;var F=1-.17*Math.cos(e*(N-30))+.24*Math.cos(2*e*N)+.32*Math.cos(e*(3*N+6))-.2*Math.cos(e*(4*N-63)),L=n-o,I=x-v,P=2*Math.sin(e*g/2)*Math.pow(v*x,.5),j=1+.015*Math.pow(i-50,2)/Math.pow(20+Math.pow(i-50,2),.5),k=1+.045*z,q=1+.015*z*F,A=30*Math.exp(-1*Math.pow((N-275)/25,2)),B=-2*Math.pow(l/(l+Math.pow(25,7)),.5)*Math.sin(2*e*A);return Math.pow(Math.pow(L/1/j,2)+Math.pow(I/1/k,2)+Math.pow(P/1/q,2)+B*I*P/(1*k*1*q),.5)}(this.toLab(),h.toLab())/100;return o(t(n,3))},r.object.push([i,\"lab\"])}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},a=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=Math.pow(10,t)),Math.round(a*r)/a+0},n=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=1),r>a?a:r>t?r:t},u=function(r){var t=r/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(r){return 255*(r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r)},o=96.422,e=100,c=82.521,i=function(r){var t,a,u={x:.9555766*(t=r).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return a={r:h(.032404542*u.x-.015371385*u.y-.004985314*u.z),g:h(-.00969266*u.x+.018760108*u.y+41556e-8*u.z),b:h(556434e-9*u.x-.002040259*u.y+.010572252*u.z),a:r.a},{r:n(a.r,0,255),g:n(a.g,0,255),b:n(a.b,0,255),a:n(a.a)}},l=function(r){var t=u(r.r),a=u(r.g),h=u(r.b);return function(r){return{x:n(r.x,0,o),y:n(r.y,0,e),z:n(r.z,0,c),a:n(r.a)}}(function(r){return{x:1.0478112*r.x+.0228866*r.y+-.050127*r.z,y:.0295424*r.x+.9904844*r.y+-.0170491*r.z,z:-.0092345*r.x+.0150436*r.y+.7521316*r.z,a:r.a}}({x:100*(.4124564*t+.3575761*a+.1804375*h),y:100*(.2126729*t+.7151522*a+.072175*h),z:100*(.0193339*t+.119192*a+.9503041*h),a:r.a}))},f=216/24389,b=24389/27,d=function(r){return{l:n(r.l,0,100),c:r.c,h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),a:r.a};var t},p=function(r){return{l:a(r.l,2),c:a(r.c,2),h:a(r.h,2),a:a(r.a,3)}},v=function(r){var a=r.l,n=r.c,u=r.h,h=r.a,o=void 0===h?1:h;if(!t(a)||!t(n)||!t(u))return null;var e=d({l:Number(a),c:Number(n),h:Number(u),a:Number(o)});return M(e)},y=function(r){var t=function(r){var t=l(r),a=t.x/o,n=t.y/e,u=t.z/c;return a=a>f?Math.cbrt(a):(b*a+16)/116,{l:116*(n=n>f?Math.cbrt(n):(b*n+16)/116)-16,a:500*(a-n),b:200*(n-(u=u>f?Math.cbrt(u):(b*u+16)/116)),alpha:t.a}}(r),n=a(t.a,3),u=a(t.b,3),h=Math.atan2(u,n)/Math.PI*180;return{l:t.l,c:Math.sqrt(n*n+u*u),h:h<0?h+360:h,a:t.alpha}},M=function(r){return t={l:r.l,a:r.c*Math.cos(r.h*Math.PI/180),b:r.c*Math.sin(r.h*Math.PI/180),alpha:r.a},n=t.a/500+(a=(t.l+16)/116),u=a-t.b/200,i({x:(Math.pow(n,3)>f?Math.pow(n,3):(116*n-16)/b)*o,y:(t.l>8?Math.pow((t.l+16)/116,3):t.l/b)*e,z:(Math.pow(u,3)>f?Math.pow(u,3):(116*u-16)/b)*c,a:t.alpha});var t,a,n,u},x=/^lch\\(\\s*([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,s=function(t){var a=x.exec(t);if(!a)return null;var n,u,h=d({l:Number(a[1]),c:Number(a[2]),h:(n=a[3],u=a[4],void 0===u&&(u=\"deg\"),Number(n)*(r[u]||1)),a:void 0===a[5]?1:Number(a[5])/(a[6]?100:1)});return M(h)};export default function(r,t){r.prototype.toLch=function(){return p(y(this.rgba))},r.prototype.toLchString=function(){return r=p(y(this.rgba)),t=r.l,a=r.c,n=r.h,(u=r.a)<1?\"lch(\"+t+\"% \"+a+\" \"+n+\" / \"+u+\")\":\"lch(\"+t+\"% \"+a+\" \"+n+\")\";var r,t,a,n,u},t.string.push([s,\"lch\"]),t.object.push([v,\"lch\"])}\n","const { colord, extend } = require('colord');\nconst valueParser = require('postcss-value-parser');\n\nconst namesPlugin = require('colord/plugins/names');\nconst hwbPlugin = require('colord/plugins/hwb');\nconst labPlugin = require('colord/plugins/lab');\nconst lchPlugin = require('colord/plugins/lch');\n\nextend([\n\t// Type definitions are not compatible with commonjs.\n\t/** @type {any} */ (namesPlugin),\n\t/** @type {any} */ (hwbPlugin),\n\t/** @type {any} */ (labPlugin),\n\t/** @type {any} */ (lchPlugin),\n\n\t/* Syntaxes that is removed in Color Module Level 4 specification. */\n\n\t// hwb() with comma\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseHwbWithCommaString, /** @type {any} */ ('hwb-with-comma')]);\n\t},\n\t// gray()\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseGrayString, /** @type {any} */ ('gray')]);\n\t},\n]);\n\nmodule.exports = {\n\tcolord,\n};\n\n/**\n * Parses a valid hwb with comma CSS color function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()#syntax\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseHwbWithCommaString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('hwb(') || !input.endsWith(')') || input.includes('/')) {\n\t\treturn null;\n\t}\n\n\tconst [hue, whiteness = '', blackness = '', alpha, ...extraArgs] = input.slice(4, -1).split(',');\n\n\tif (!hue || !hue.trim() || !whiteness.trim() || !blackness.trim() || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\t// Change the delimiter and parse with colord.\n\tconst colordInstance = colord(\n\t\t`hwb(${hue} ${whiteness} ${blackness}${alpha ? ` / ${alpha}` : ''})`,\n\t);\n\n\tif (!colordInstance.isValid()) {\n\t\treturn null;\n\t}\n\n\treturn colordInstance.rgba;\n}\n\n/**\n * Parses a valid gray() CSS color function\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseGrayString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('gray(') || !input.endsWith(')')) {\n\t\treturn null;\n\t}\n\n\tconst [lightness, alpha, ...extraArgs] = input.slice(5, -1).split(',');\n\n\tif (!lightness || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\tconst lightnessWithUnit = valueParser.unit(lightness.trim());\n\n\tif (!lightnessWithUnit || !['', '%'].includes(lightnessWithUnit.unit)) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {import('colord/types').LabColor | import('colord/types').LabaColor}\n\t */\n\tlet colorObject = {\n\t\tl: Number(lightnessWithUnit.number),\n\t\ta: 0,\n\t\tb: 0,\n\t};\n\n\tif (alpha) {\n\t\tconst alphaWithUnit = valueParser.unit(alpha.trim());\n\n\t\tif (!alphaWithUnit || !['', '%'].includes(alphaWithUnit.unit)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tcolorObject = {\n\t\t\t...colorObject,\n\t\t\talpha: Number(alphaWithUnit.number) / (alphaWithUnit.unit ? 100 : 1),\n\t\t};\n\t}\n\n\treturn colord(colorObject).rgba;\n}\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { acceptCustomIdentsProperties } = require('../../reference/properties');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { colord } = require('./colordUtils');\n\nconst ruleName = 'color-named';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (named, original) => `Expected \"${original}\" to be \"${named}\"`,\n\trejected: (named) => `Unexpected named color \"${named}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-named',\n};\n\n// Todo tested on case insensitivity\nconst NODE_TYPES = new Set(['word', 'function']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['never', 'always-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (acceptCustomIdentsProperties.has(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if the property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst type = node.type;\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function') && type === 'function') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if neither a word nor a function\n\t\t\t\tif (!NODE_TYPES.has(type)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for named colors for \"never\" option\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'never' &&\n\t\t\t\t\ttype === 'word' &&\n\t\t\t\t\t/^[a-z]+$/iu.test(value) &&\n\t\t\t\t\tvalue.toLowerCase() !== 'transparent' &&\n\t\t\t\t\tcolord(value).isValid()\n\t\t\t\t) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(value),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\tvalue.length,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check \"always-where-possible\" option ...\n\t\t\t\tif (primary !== 'always-where-possible') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet rawColorString = null;\n\t\t\t\tlet colorString = null;\n\n\t\t\t\tif (type === 'function') {\n\t\t\t\t\trawColorString = valueParser.stringify(node);\n\n\t\t\t\t\t// First by checking for alternative color function representations ...\n\t\t\t\t\t// Remove all spaces to match what's in `representations`\n\t\t\t\t\tcolorString = rawColorString.replace(/\\s*([,/()])\\s*/g, '$1').replace(/\\s{2,}/g, ' ');\n\t\t\t\t} else if (type === 'word' && value.startsWith('#')) {\n\t\t\t\t\t// Then by checking for alternative hex representations\n\t\t\t\t\trawColorString = colorString = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst color = colord(colorString);\n\n\t\t\t\tif (!color.isValid()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst namedColor = color.toName();\n\n\t\t\t\tif (namedColor && namedColor.toLowerCase() !== 'transparent') {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.expected(namedColor, colorString),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\trawColorString.length,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t */\n\t\tfunction complain(message, node, index, length) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${atRule.name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected comment to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\n\t\t\tif (normalizedPattern.test(text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isString } = require('./validateTypes');\n\n/** @typedef {false | { match: string, pattern: string, substring: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @template {unknown} T\n * @param {string} input\n * @param {T | T[]} comparison\n * @returns {ReturnValue}\n */\nmodule.exports = function containsString(input, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstString(input, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstString(input, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {unknown} comparison\n * @returns {ReturnValue}\n */\nfunction testAgainstString(value, comparison) {\n\tif (!comparison) return false;\n\n\tif (!isString(comparison)) return false;\n\n\tif (comparison.startsWith('/') && comparison.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\tif (value.includes(comparison)) {\n\t\treturn { match: value, pattern: comparison, substring: comparison };\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nconst containsString = require('../../utils/containsString');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-word-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (pattern) => `Unexpected word matching pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-word-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap\n\t\t\tif (firstFourChars === '/*# ') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchesWord = matchesStringOrRegExp(text, primary) || containsString(text, primary);\n\n\t\t\tif (!matchesWord) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(matchesWord.pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tword: matchesWord.substring,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"{\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"{\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['at-rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'at-rules')) {\n\t\t\troot.walkAtRules(check);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: blockString(statement),\n\t\t\t\tindex: 0,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementFirst = statement.first;\n\n\t\t\t\t\t\tif (statementFirst == null) return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-whitespace-inside',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceBefore(comment) {\n\tif (comment.text.startsWith('*')) {\n\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t} else {\n\t\tcomment.raws.left = ' ';\n\t}\n}\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceAfter(comment) {\n\tif (comment.text[comment.text.length - 1] === '*') {\n\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t} else {\n\t\tcomment.raws.right = ' ';\n\t}\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n\n\t\t\tif (leftMatches == null || leftMatches[1] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n\n\t\t\tif (rightMatches == null || rightMatches[2] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftSpace = leftMatches[2] || '';\n\t\t\tconst rightSpace = rightMatches[1] || '';\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (primary === 'never' && leftSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'never' && rightSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!leftSpace) {\n\t\t\t\t\t\t\taddWhitespaceBefore(comment);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rightSpace) {\n\t\t\t\t\t\t\taddWhitespaceAfter(comment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// To ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// To ignore comments that are not empty\n\t\t\tif (comment.text && comment.text.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-no-hex',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tmessageArgs: [node.value],\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isRoot, isAtRule, isRule } = require('./typeGuards');\n\n/** @typedef {import('postcss').Root} Root */\n/** @typedef {import('postcss').Root} Document */\n/** @typedef {import('postcss').Node} PostcssNode */\n/** @typedef {import('postcss').Container} PostcssContainerNode */\n/** @typedef {import('postcss').Declaration} Declaration */\n/** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */\n\n/**\n * @param {PostcssNode} node\n * @returns {node is PostcssContainerNode}\n */\nfunction isContainerNode(node) {\n\treturn isRule(node) || isAtRule(node) || isRoot(node);\n}\n\n/**\n * In order to accommodate nested blocks (postcss-nested),\n * we need to run a shallow loop (instead of eachDecl() or eachRule(),\n * which loop recursively) and allow each nested block to accumulate\n * its own list of properties -- so that a property in a nested rule\n * does not conflict with the same property in the parent rule\n * executes a provided function once for each declaration block.\n *\n * @param {Root | Document} root - root element of file.\n * @param {(eachDecl: EachDeclaration) => void} callback - Function to execute for each declaration block\n *\n * @returns {void}\n */\nmodule.exports = function eachDeclarationBlock(root, callback) {\n\t/**\n\t * @param {PostcssNode} statement\n\t *\n\t * @returns {void}\n\t */\n\tfunction each(statement) {\n\t\tif (!isContainerNode(statement)) return;\n\n\t\tif (statement.nodes && statement.nodes.length) {\n\t\t\t/** @type {Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\tfor (const node of statement.nodes) {\n\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\tdecls.push(node);\n\t\t\t\t}\n\n\t\t\t\teach(node);\n\t\t\t}\n\n\t\t\tif (decls.length) {\n\t\t\t\tcallback(decls.forEach.bind(decls));\n\t\t\t}\n\t\t}\n\t}\n\n\teach(root);\n};\n","'use strict';\n\n/**\n * Check whether a property is a custom one\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isCustomProperty(property) {\n\treturn property.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a property is SCSS variable\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isScssVariable(property) {\n\t// SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))\n\tif (property.startsWith('$')) {\n\t\treturn true;\n\t}\n\n\t// SCSS var within a namespace (e.g. namespace.$var: x)\n\tif (property.includes('.$')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\nconst isScssVariable = require('./isScssVariable');\n\n/**\n * Check whether a property is standard\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxProperty(property) {\n\t// SCSS var\n\tif (isScssVariable(property)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x)\n\tif (property.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// Less append property value with space (e.g. transform+_: scale(2))\n\tif (property.endsWith('+') || property.endsWith('+_')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(property)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-duplicate-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-properties',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'consecutive-duplicates',\n\t\t\t\t\t\t'consecutive-duplicates-with-different-values',\n\t\t\t\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t\t\t\t],\n\t\t\t\t\tignoreProperties: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDuplicates = optionsMatches(secondaryOptions, 'ignore', 'consecutive-duplicates');\n\t\tconst ignoreDiffValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-different-values',\n\t\t);\n\t\tconst ignorePrefixlessSameValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {import('postcss').Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst lowerProp = decl.prop.toLowerCase();\n\t\t\t\tconst value = decl.value;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if the property is to be ignored\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore the src property as commonly duplicated in at-fontface\n\t\t\t\tif (lowerProp === 'src') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst indexDuplicate = decls.findIndex((d) => d.prop.toLowerCase() === lowerProp);\n\n\t\t\t\tif (indexDuplicate !== -1) {\n\t\t\t\t\tif (ignoreDiffValues || ignorePrefixlessSameValues) {\n\t\t\t\t\t\t// fails if duplicates are not consecutive\n\t\t\t\t\t\tif (indexDuplicate !== decls.length - 1) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst duplicateDecl = decls[indexDuplicate];\n\t\t\t\t\t\tconst duplicateValue = duplicateDecl ? duplicateDecl.value : '';\n\n\t\t\t\t\t\tif (ignorePrefixlessSameValues) {\n\t\t\t\t\t\t\t// fails if values of consecutive, unprefixed duplicates are equal\n\t\t\t\t\t\t\tif (vendor.unprefixed(value) !== vendor.unprefixed(duplicateValue)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fails if values of consecutive duplicates are equal\n\t\t\t\t\t\tif (value === duplicateValue) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ignoreDuplicates && indexDuplicate === decls.length - 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tremovePreviousDuplicate(decls, lowerProp);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdecls.push(decl);\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration[]} declarations\n * @param {string} lowerProperty\n * @returns {void}\n * */\nfunction removePreviousDuplicate(declarations, lowerProperty) {\n\tconst declToRemove = declarations.find((d) => d.prop.toLowerCase() === lowerProperty);\n\n\tif (declToRemove) declToRemove.remove();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var SKIP = 'skip';\nvar CHECK = 'check';\nvar ONLY = 'only';\n\nmodule.exports = function (options, callback) {\n  var source = options.source;\n  var target = options.target;\n\n  var skipComments = (options.comments) ? options.comments === SKIP : true;\n  var skipStrings = (options.strings) ? options.strings === SKIP : true;\n  var skipFunctionNames = (options.functionNames) ? options.functionNames === SKIP : true;\n  var skipFunctionArguments = options.functionArguments === SKIP;\n  var skipParentheticals = options.parentheticals === SKIP;\n\n  var onceOptionUsed = false;\n  Object.keys(options).forEach(function(key) {\n    if (options[key] !== ONLY) return;\n    if (!onceOptionUsed) {\n      onceOptionUsed = true;\n    } else {\n      throw new Error('Only one syntax feature option can be the \"only\" one to check');\n    }\n  });\n\n  var onlyComments = options.comments === ONLY;\n  var onlyStrings = options.strings === ONLY;\n  var onlyFunctionNames = options.functionNames === ONLY;\n  var onlyFunctionArguments = options.functionArguments === ONLY;\n  var onlyParentheticals = options.parentheticals === ONLY;\n\n  var insideString = false;\n  var insideComment = false;\n  var insideSingleLineComment = false;\n  var insideParens = false;\n  var insideFunctionArguments = false;\n  var openingParenCount = 0;\n  var matchCount = 0;\n  var openingQuote;\n\n  var targetIsArray = Array.isArray(target);\n\n  // If the target is just a string, it is easy to check whether\n  // some index of the source matches it.\n  // If the target is an array of strings, though, we have to\n  // check whether some index of the source matches *any* of\n  // those target strings (stopping after the first match).\n  var getMatch = (function () {\n    if (!targetIsArray) {\n      return getMatchBase.bind(null, target);\n    }\n    return function(index) {\n      for (var ti = 0, tl = target.length; ti < tl; ti++) {\n        var checkResult = getMatchBase(target[ti], index);\n        if (checkResult) return checkResult;\n      }\n      return false;\n    }\n  })();\n\n  function getMatchBase(targetString, index) {\n    var targetStringLength = targetString.length;\n\n    // Target is a single character\n    if (targetStringLength === 1 && source[index] !== targetString) return false;\n\n    // Target is multiple characters\n    if (source.substr(index, targetStringLength) !== targetString) return false;\n\n    return {\n      insideParens: insideParens,\n      insideFunctionArguments: insideFunctionArguments,\n      insideComment: insideComment,\n      insideString: insideString,\n      startIndex: index,\n      endIndex: index + targetStringLength,\n      target: targetString,\n    };\n  }\n\n  for (var i = 0, l = source.length; i < l; i++) {\n    var currentChar = source[i];\n\n    // Register the beginning of a comment\n    if (\n      !insideString && !insideComment\n      && currentChar === \"/\"\n      && source[i - 1] !== \"\\\\\" // escaping\n    ) {\n      // standard comments\n      if (source[i + 1] === \"*\") {\n        insideComment = true;\n        continue;\n      }\n      // single-line comments\n      if (source[i + 1] === \"/\") {\n        insideComment = true;\n        insideSingleLineComment = true;\n        continue;\n      }\n    }\n\n    if (insideComment) {\n      // Register the end of a standard comment\n      if (\n        !insideSingleLineComment\n        && currentChar === \"*\"\n        && source[i - 1] !== \"\\\\\" // escaping\n        && source[i + 1] === \"/\"\n        && source[i - 1] !== \"/\" // don't end if it's /*/\n      ) {\n        insideComment = false;\n        continue;\n      }\n\n      // Register the end of a single-line comment\n      if (\n        insideSingleLineComment\n        && currentChar === \"\\n\"\n      ) {\n        insideComment = false;\n        insideSingleLineComment = false;\n      }\n\n      if (skipComments) continue;\n    }\n\n    // Register the beginning of a string\n    if (!insideComment && !insideString && (currentChar === \"\\\"\" || currentChar === \"'\")) {\n      if (source[i - 1] === \"\\\\\") continue; // escaping\n\n      openingQuote = currentChar;\n      insideString = true;\n\n      // For string-quotes rule\n      if (target === currentChar) handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideString) {\n      // Register the end of a string\n      if (currentChar === openingQuote) {\n        if (source[i - 1] === \"\\\\\") continue; // escaping\n        insideString = false;\n        continue;\n      }\n\n      if (skipStrings) continue;\n    }\n\n    // Register the beginning of parens/functions\n    if (!insideString && !insideComment && currentChar === \"(\") {\n      // Keep track of opening parentheticals so that we\n      // know when the outermost function (possibly\n      // containing nested functions) is closing\n      openingParenCount++;\n\n      insideParens = true;\n      // Only inside a function if there is a function name\n      // before the opening paren\n      if (/[a-zA-Z]/.test(source[i - 1])) {\n        insideFunctionArguments = true;\n      }\n\n      if (target === \"(\") handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideParens) {\n      // Register the end of a function\n      if (currentChar === \")\") {\n        openingParenCount--;\n        // Do this here so the match is still technically inside a function\n        if (target === \")\") handleMatch(getMatch(i));\n        if (openingParenCount === 0) {\n          insideParens = false;\n          insideFunctionArguments = false;\n        }\n        continue;\n      }\n    }\n\n    var isFunctionName = /^[a-zA-Z]*\\(/.test(source.slice(i));\n    if (skipFunctionNames && isFunctionName) continue;\n    if (onlyFunctionNames && !isFunctionName) continue;\n\n    var match = getMatch(i);\n\n    if (!match) continue;\n    handleMatch(match);\n    if (options.once) return;\n  }\n\n  function handleMatch(match) {\n    if (onlyParentheticals && !insideParens) return;\n    if (skipParentheticals && insideParens) return;\n    if (onlyFunctionArguments && !insideFunctionArguments) return;\n    if (skipFunctionArguments && insideFunctionArguments) return;\n    if (onlyStrings && !insideString) return;\n    if (onlyComments && !insideComment) return;\n    matchCount++;\n    callback(match, matchCount);\n  }\n}\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix: ((decl: Declaration, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function declarationBangSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst indexOffset = declarationValueIndex(decl);\n\t\tconst declString = decl.toString();\n\t\tconst valueString = decl.toString().slice(indexOffset);\n\n\t\tif (!valueString.includes('!')) {\n\t\t\treturn;\n\t\t}\n\n\t\tstyleSearch({ source: valueString, target: '!' }, (match) => {\n\t\t\tcheck(declString, match.startIndex + indexOffset, decl);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {Declaration} decl\n\t */\n\tfunction check(source, index, decl) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(decl, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"!\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-bang-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(val: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < value.length) {\n\t\t\t\t\t\t\ttarget = value;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, val);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= value.length;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = val;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + ' ' + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { longhandSubPropertiesOfShorthandProperties } = require('../../reference/properties');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-shorthand-property-overrides',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Map<string, string>} */\n\t\t\tconst declarations = new Map();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop).toLowerCase();\n\t\t\t\tconst prefix = vendor.prefix(prop).toLowerCase();\n\n\t\t\t\tconst overrideables = /** @type {Map<string, Set<string>>} */ (\n\t\t\t\t\tlonghandSubPropertiesOfShorthandProperties\n\t\t\t\t).get(unprefixedProp);\n\n\t\t\t\tif (!overrideables) {\n\t\t\t\t\tdeclarations.set(prop.toLowerCase(), prop);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const longhandProp of overrideables) {\n\t\t\t\t\tconst declaration = declarations.get(prefix + longhandProp);\n\n\t\t\t\t\tif (!declaration) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.rejected(prop, declaration || ''),\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n * Get the next non-comment node in a PostCSS AST\n * at or after a given node.\n *\n * @param {PostcssNode | void} startNode\n * @returns {PostcssNode | null}\n */\nmodule.exports = function nextNonCommentNode(startNode) {\n\tif (!startNode || !startNode.next) return null;\n\n\tif (startNode.type === 'comment') {\n\t\treturn nextNonCommentNode(startNode.next());\n\t}\n\n\treturn startNode;\n};\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \";\" in a multi-line declaration block',\n\trejectedAfterMultiLine: () => 'Unexpected newline after \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = decl.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheck.raws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheck.raws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheck.raws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheck.raws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\tnodeToCheck.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \";\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n\trejectedBeforeMultiLine: () =>\n\t\t'Unexpected whitespace before \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"!\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-bang-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(value: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < declValue.length) {\n\t\t\t\t\t\t\ttarget = declValue;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= declValue.length;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex + 1);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex + 1);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \";\"',\n\trejectedAfter: () => 'Unexpected whitespace after \";\"',\n\texpectedAfterSingleLine: () =>\n\t\t'Expected single space after \";\" in a single-line declaration block',\n\trejectedAfterSingleLine: () =>\n\t\t'Unexpected whitespace after \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextDecl = decl.next();\n\n\t\t\tif (!nextDecl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: rawNodeString(nextDecl),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-single-line-max-declarations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst block = blockString(ruleNode);\n\n\t\t\tif (!isSingleLineString(block)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = ruleNode.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: block,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../utils/arrayEqual');\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { longhandSubPropertiesOfShorthandProperties } = require('../../reference/properties');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (props) => `Expected shorthand property \"${props}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-redundant-longhand-properties',\n};\n\nconst IGNORED_VALUES = new Set(['inherit']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreShorthands: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<string, string[]>} */\n\t\tconst longhandToShorthands = new Map();\n\n\t\tfor (const [shorthand, longhandProps] of longhandSubPropertiesOfShorthandProperties.entries()) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreShorthands', shorthand)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (const longhand of longhandProps) {\n\t\t\t\tconst shorthands = longhandToShorthands.get(longhand) || [];\n\n\t\t\t\tshorthands.push(shorthand);\n\t\t\t\tlonghandToShorthands.set(longhand, shorthands);\n\t\t\t}\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Map<string, string[]>} */\n\t\t\tconst longhandDeclarations = new Map();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tif (IGNORED_VALUES.has(decl.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst prop = decl.prop.toLowerCase();\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop);\n\n\t\t\t\tconst shorthandProperties = longhandToShorthands.get(unprefixedProp);\n\n\t\t\t\tif (!shorthandProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const shorthandProperty of shorthandProperties) {\n\t\t\t\t\tconst prefixedShorthandProperty = prefix + shorthandProperty;\n\t\t\t\t\tconst longhandDeclaration = longhandDeclarations.get(prefixedShorthandProperty) || [];\n\n\t\t\t\t\tlonghandDeclaration.push(prop);\n\t\t\t\t\tlonghandDeclarations.set(prefixedShorthandProperty, longhandDeclaration);\n\n\t\t\t\t\tconst shorthandProps = /** @type {Map<string, Set<string>>} */ (\n\t\t\t\t\t\tlonghandSubPropertiesOfShorthandProperties\n\t\t\t\t\t).get(shorthandProperty);\n\t\t\t\t\tconst prefixedShorthandData = Array.from(shorthandProps || []).map(\n\t\t\t\t\t\t(item) => prefix + item,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!arrayEqual(prefixedShorthandData.sort(), longhandDeclaration.sort())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tword: decl.prop,\n\t\t\t\t\t\tmessage: messages.expected(prefixedShorthandProperty),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-value-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst propKeys = Object.keys(primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propPatterns = propKeys.filter((key) => matchesStringOrRegExp(unprefixedProp, key));\n\n\t\t\tif (propPatterns.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (propPatterns.every((pattern) => !optionsMatches(primary, pattern, value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-trailing-semicolon';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a trailing semicolon',\n\trejected: 'Unexpected trailing semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-trailing-semicolon',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['single-declaration'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!atRule.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (atRule.parent === root) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (atRule !== atRule.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(atRule);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (decl.parent.type === 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl !== decl.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkLastNode(node) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tconst hasSemicolon = node.parent.raws.semicolon;\n\t\t\tconst ignoreSingleDeclaration = optionsMatches(\n\t\t\t\tsecondaryOptions,\n\t\t\t\t'ignore',\n\t\t\t\t'single-declaration',\n\t\t\t);\n\n\t\t\tif (ignoreSingleDeclaration && node.parent.first === node) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet message;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tif (hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = true;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.raws.between = '';\n\t\t\t\t\t\tnode.parent.raws.after = ' ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.expected;\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tif (!hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.rejected;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected primary option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex: node.toString().trim().length - 1,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isScssVariable = require('./isScssVariable');\nconst { isRoot, isRule } = require('./typeGuards');\n\n/**\n * @param {string} [lang]\n */\nfunction isStandardSyntaxLang(lang) {\n\treturn lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\nmodule.exports = function isStandardSyntaxDeclaration(decl) {\n\tconst prop = decl.prop;\n\tconst parent = decl.parent;\n\n\t// Declarations belong in a declaration block or standard CSS source\n\tif (\n\t\tparent &&\n\t\tisRoot(parent) &&\n\t\tparent.source &&\n\t\t!isStandardSyntaxLang(\n\t\t\t/** @type {import('postcss').Source & {lang?: string}} */ (parent.source).lang,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// SCSS var; covers map and list declarations\n\tif (isScssVariable(prop)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\tif (prop[0] === '@' && prop[1] !== '{') {\n\t\treturn false;\n\t}\n\n\t// Less map declaration\n\tif (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {\n\t\treturn false;\n\t}\n\n\t// Less map (e.g. #my-map() { myprop: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector.startsWith('#') &&\n\t\tparent.selector.endsWith('()')\n\t) {\n\t\treturn false;\n\t}\n\n\t// Sass nested properties (e.g. border: { style: solid; color: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector[parent.selector.length - 1] === ':' &&\n\t\tparent.selector.substring(0, 2) !== '--'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Less &:extend\n\tif ('extend' in decl && decl.extend) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \":\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \":\" with a multi-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the raw prop, and only the prop\n\t\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst indexToCheck = /^[^\\S\\r\\n]*\\/\\*/.test(propPlusColon.slice(i + 1))\n\t\t\t\t\t? propPlusColon.indexOf('*/', i) + 1\n\t\t\t\t\t: i;\n\n\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\tsource: propPlusColon,\n\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\t\tconst betweenStart = declarationValueIndex(decl) - between.length;\n\t\t\t\t\t\t\tconst sliceIndex = indexToCheck - betweenStart + 1;\n\t\t\t\t\t\t\tconst betweenBefore = between.slice(0, sliceIndex);\n\t\t\t\t\t\t\tconst betweenAfter = between.slice(sliceIndex);\n\n\t\t\t\t\t\t\tdecl.raws.between = /^\\s*\\n/.test(betweenAfter)\n\t\t\t\t\t\t\t\t? betweenBefore + betweenAfter.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t\t: betweenBefore + context.newline + betweenAfter;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n\texpectedBeforeSingleLine: () =>\n\t\t'Expected single space before \";\" in a single-line declaration block',\n\trejectedBeforeSingleLine: () =>\n\t\t'Unexpected whitespace before \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.before({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = ' !important ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ' '));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tif (decl.raws.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ''));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst propKeys = Object.keys(primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propPatterns = propKeys.filter((key) => matchesStringOrRegExp(unprefixedProp, key));\n\n\t\t\tif (propPatterns.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (propPatterns.some((pattern) => optionsMatches(primary, pattern, value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst vendor = require('../../utils/vendor');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, assertNumber } = require('../../utils/validateTypes');\nconst validateObjectWithProps = require('../../utils/validateObjectWithProps');\n\nconst ruleName = 'declaration-property-max-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, max) =>\n\t\t`Expected \"${property}\" to have no more than ${max} ${max === 1 ? 'value' : 'values'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-max-values',\n};\n\n/**\n * @param {valueParser.Node} node\n */\nconst isValueNode = (node) => {\n\treturn node.type === 'word' || node.type === 'function' || node.type === 'string';\n};\n\n/** @type {import('stylelint').Rule<Record<string, number>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithProps(isNumber)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\t\t\tconst propLength = valueParser(value).nodes.filter(isValueNode).length;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max = primary[propKey];\n\n\t\t\tassertNumber(max);\n\n\t\t\tif (propLength <= max) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, max),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties agree with the provided validator.\n *\n * @example\n * config = {\n *   value1: 1,\n *   value2: 2,\n *   value3: 3,\n * };\n * validateObjectWithProps(isNumber)(config);\n * //=> true\n *\n * @param {(value: unknown) => boolean} validator\n * @returns {(value: unknown) => boolean}\n */\nmodule.exports = (validator) => (value) => {\n\tif (!isPlainObject(value)) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(value).every((item) => {\n\t\treturn validator(item);\n\t});\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-length',\n\tfixable: true,\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['short', 'long'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value: hexValue } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tif (primary === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst variant = primary === 'long' ? longer : shorter;\n\t\t\t\tconst expectedHex = variant(hexValue);\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expectedHex;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(hexValue, expectedHex),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} hex\n */\nfunction canShrink(hex) {\n\thex = hex.toLowerCase();\n\n\treturn (\n\t\thex[1] === hex[2] &&\n\t\thex[3] === hex[4] &&\n\t\thex[5] === hex[6] &&\n\t\t(hex.length === 7 || (hex.length === 9 && hex[7] === hex[8]))\n\t);\n}\n\n/**\n * @param {string} hex\n */\nfunction shorter(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i += 2) {\n\t\thexVariant += hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {string} hex\n */\nfunction longer(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i++) {\n\t\thexVariant += hex.charAt(i).repeat(2);\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isCustomProperty = require('./isCustomProperty');\nconst isStandardSyntaxDeclaration = require('./isStandardSyntaxDeclaration');\nconst { isDeclaration } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function isAfterStandardPropertyDeclaration(node) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(node);\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tisDeclaration(prevNode) &&\n\t\tisStandardSyntaxDeclaration(prevNode) &&\n\t\t!isCustomProperty(prevNode.prop || '')\n\t);\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isAfterStandardPropertyDeclaration = require('../../utils/isAfterStandardPropertyDeclaration');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isRule, isRoot } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before declaration',\n\trejected: 'Unexpected empty line before declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-declaration'],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'after-declaration',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-single-line-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAtRule(parent) && !isRule(parent) && !isRoot(parent)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a declaration precedes it\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'after-declaration') &&\n\t\t\t\tisAfterStandardPropertyDeclaration(decl)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-declaration') &&\n\t\t\t\t\tisAfterStandardPropertyDeclaration(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: decl, result, ruleName });\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxHexColor = require('../../utils/isStandardSyntaxHexColor');\nconst isValidHex = require('../../utils/isValidHex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected invalid hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-no-invalid-hex',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxHexColor(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk(({ value, type, sourceIndex }) => {\n\t\t\t\tif (type === 'function' && value.endsWith('url')) return false;\n\n\t\t\t\tif (type !== 'word') return;\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n\n\t\t\t\tif (!hexMatch) return;\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\tif (!hexValue || isValidHex(hexValue)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + hexValue.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a hex color is standard\n *\n * @param {string} hex\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxHexColor(hex) {\n\t// Less map usage (e.g. .myclass { color: #colors[somecolor]; })\n\tif (hex.includes('[')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Check if a value is a valid 3, 4, 6 or 8 digit hex\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function isValidHex(value) {\n\treturn /^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(value);\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst report = require('../utils/report');\n\n/** @typedef {(args: { source: string, index: number, lineCheckStr: string, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((decl: import('postcss').Declaration, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function declarationColonSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the raw prop, and only the prop\n\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\topts.locationChecker({\n\t\t\t\tsource: propPlusColon,\n\t\t\t\tindex: i,\n\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\terr: (message) => {\n\t\t\t\t\tif (opts.fix && opts.fix(decl, i)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.prop.toString().length + 1,\n\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t});\n};\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \":\" with a single-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ': ');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ':');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-no-duplicate-custom-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-custom-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst decls = new Set();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isDuplicate = decls.has(prop);\n\n\t\t\t\tif (isDuplicate) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdecls.add(prop);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'custom-property-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before custom property',\n\trejected: 'Unexpected empty line before custom property',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-custom-property'],\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-single-line-block'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tparent != null &&\n\t\t\t\t(isAtRule(parent) || isRule(parent)) &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-custom-property') &&\n\t\t\t\t\tisAfterCustomProperty(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction isAfterCustomProperty(decl) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(decl);\n\n\treturn prevNode != null && isDeclaration(prevNode) && isCustomProperty(prevNode.prop);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeString = rawNodeString(atRule);\n\n\t\t\tchecker.before({\n\t\t\t\tsource: nodeString,\n\t\t\t\tindex: nodeString.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: nodeString.length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether it's a number or a number-like string:\n * i.e. when coerced to a number it == itself.\n *\n * @param {string | number} value\n */\nmodule.exports = function isNumbery(value) {\n\treturn value.toString().trim().length !== 0 && Number(value) == value; // eslint-disable-line eqeqeq\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst basicKeywords = new Set(['initial', 'inherit', 'revert', 'revert-layer', 'unset']);\n\nconst systemFontKeywords = uniteSets(basicKeywords, [\n\t'caption',\n\t'icon',\n\t'menu',\n\t'message-box',\n\t'small-caption',\n\t'status-bar',\n]);\n\nconst fontFamilyKeywords = uniteSets(basicKeywords, [\n\t'serif',\n\t'sans-serif',\n\t'cursive',\n\t'fantasy',\n\t'monospace',\n\t'system-ui',\n\t'ui-serif',\n\t'ui-sans-serif',\n\t'ui-monospace',\n\t'ui-rounded',\n]);\n\nconst fontWeightRelativeKeywords = new Set(['bolder', 'lighter']);\n\nconst fontWeightAbsoluteKeywords = new Set(['normal', 'bold']);\n\nconst fontWeightNonNumericKeywords = uniteSets(\n\tfontWeightRelativeKeywords,\n\tfontWeightAbsoluteKeywords,\n);\n\nconst fontWeightNumericKeywords = new Set([\n\t'100',\n\t'200',\n\t'300',\n\t'400',\n\t'500',\n\t'600',\n\t'700',\n\t'800',\n\t'900',\n]);\n\nconst fontWeightKeywords = uniteSets(\n\tbasicKeywords,\n\tfontWeightNonNumericKeywords,\n\tfontWeightNumericKeywords,\n);\n\nconst fontStyleKeywords = uniteSets(basicKeywords, ['normal', 'italic', 'oblique']);\n\nconst fontVariantKeywords = uniteSets(basicKeywords, [\n\t'normal',\n\t'none',\n\t'historical-forms',\n\t'none',\n\t'common-ligatures',\n\t'no-common-ligatures',\n\t'discretionary-ligatures',\n\t'no-discretionary-ligatures',\n\t'historical-ligatures',\n\t'no-historical-ligatures',\n\t'contextual',\n\t'no-contextual',\n\t'small-caps',\n\t'small-caps',\n\t'all-small-caps',\n\t'petite-caps',\n\t'all-petite-caps',\n\t'unicase',\n\t'titling-caps',\n\t'lining-nums',\n\t'oldstyle-nums',\n\t'proportional-nums',\n\t'tabular-nums',\n\t'diagonal-fractions',\n\t'stacked-fractions',\n\t'ordinal',\n\t'slashed-zero',\n\t'jis78',\n\t'jis83',\n\t'jis90',\n\t'jis04',\n\t'simplified',\n\t'traditional',\n\t'full-width',\n\t'proportional-width',\n\t'ruby',\n]);\n\nconst fontStretchKeywords = uniteSets(basicKeywords, [\n\t'semi-condensed',\n\t'condensed',\n\t'extra-condensed',\n\t'ultra-condensed',\n\t'semi-expanded',\n\t'expanded',\n\t'extra-expanded',\n\t'ultra-expanded',\n]);\n\nconst fontSizeKeywords = uniteSets(basicKeywords, [\n\t'xx-small',\n\t'x-small',\n\t'small',\n\t'medium',\n\t'large',\n\t'x-large',\n\t'xx-large',\n\t'larger',\n\t'smaller',\n]);\n\nconst lineHeightKeywords = uniteSets(basicKeywords, ['normal']);\n\nconst fontShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tfontStyleKeywords,\n\tfontVariantKeywords,\n\tfontWeightKeywords,\n\tfontStretchKeywords,\n\tfontSizeKeywords,\n\tlineHeightKeywords,\n\tfontFamilyKeywords,\n);\n\nconst animationNameKeywords = uniteSets(basicKeywords, ['none']);\n\nconst animationTimingFunctionKeywords = uniteSets(basicKeywords, [\n\t'linear',\n\t'ease',\n\t'ease-in',\n\t'ease-in-out',\n\t'ease-out',\n\t'step-start',\n\t'step-end',\n\t'steps',\n\t'cubic-bezier',\n]);\n\nconst animationIterationCountKeywords = new Set(['infinite']);\n\nconst animationDirectionKeywords = uniteSets(basicKeywords, [\n\t'normal',\n\t'reverse',\n\t'alternate',\n\t'alternate-reverse',\n]);\n\nconst animationFillModeKeywords = new Set(['none', 'forwards', 'backwards', 'both']);\n\nconst animationPlayStateKeywords = uniteSets(basicKeywords, ['running', 'paused']);\n\n// cf. https://developer.mozilla.org/en-US/docs/Web/CSS/animation\nconst animationShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tanimationNameKeywords,\n\tanimationTimingFunctionKeywords,\n\tanimationIterationCountKeywords,\n\tanimationDirectionKeywords,\n\tanimationFillModeKeywords,\n\tanimationPlayStateKeywords,\n);\n\nconst gridRowKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\nconst gridColumnKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\nconst gridAreaKeywords = uniteSets(basicKeywords, ['auto', 'span']);\n\n// https://developer.mozilla.org/docs/Web/CSS/counter-increment\nconst counterIncrementKeywords = uniteSets(basicKeywords, ['none']);\n\nconst counterResetKeywords = uniteSets(basicKeywords, ['none']);\n\n// https://developer.mozilla.org/ru/docs/Web/CSS/list-style-type\nconst listStyleTypeKeywords = uniteSets(basicKeywords, [\n\t'none',\n\t'disc',\n\t'circle',\n\t'square',\n\t'decimal',\n\t'cjk-decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-greek',\n\t'lower-alpha',\n\t'lower-latin',\n\t'upper-alpha',\n\t'upper-latin',\n\t'arabic-indic',\n\t'armenian',\n\t'bengali',\n\t'cambodian',\n\t'cjk-earthly-branch',\n\t'cjk-ideographic',\n\t'devanagari',\n\t'ethiopic-numeric',\n\t'georgian',\n\t'gujarati',\n\t'gurmukhi',\n\t'hebrew',\n\t'hiragana',\n\t'hiragana-iroha',\n\t'japanese-formal',\n\t'japanese-informal',\n\t'kannada',\n\t'katakana',\n\t'katakana-iroha',\n\t'khmer',\n\t'korean-hangul-formal',\n\t'korean-hanja-formal',\n\t'korean-hanja-informal',\n\t'lao',\n\t'lower-armenian',\n\t'malayalam',\n\t'mongolian',\n\t'myanmar',\n\t'oriya',\n\t'persian',\n\t'simp-chinese-formal',\n\t'simp-chinese-informal',\n\t'tamil',\n\t'telugu',\n\t'thai',\n\t'tibetan',\n\t'trad-chinese-formal',\n\t'trad-chinese-informal',\n\t'upper-armenian',\n\t'disclosure-open',\n\t'disclosure-closed',\n\t// Non-standard extensions (without prefixe)\n\t'ethiopic-halehame',\n\t'ethiopic-halehame-am',\n\t'ethiopic-halehame-ti-er',\n\t'ethiopic-halehame-ti-et',\n\t'hangul',\n\t'hangul-consonant',\n\t'urdu',\n]);\n\nconst listStylePositionKeywords = uniteSets(basicKeywords, ['inside', 'outside']);\n\nconst listStyleImageKeywords = uniteSets(basicKeywords, ['none']);\n\nconst listStyleShorthandKeywords = uniteSets(\n\tbasicKeywords,\n\tlistStyleTypeKeywords,\n\tlistStylePositionKeywords,\n\tlistStyleImageKeywords,\n);\n\nconst camelCaseKeywords = new Set([\n\t'optimizeSpeed',\n\t'optimizeQuality',\n\t'optimizeLegibility',\n\t'geometricPrecision',\n\t'currentColor',\n\t'crispEdges',\n\t'visiblePainted',\n\t'visibleFill',\n\t'visibleStroke',\n\t'sRGB',\n\t'linearRGB',\n]);\n\nconst keyframeSelectorKeywords = new Set(['from', 'to']);\n\n// https://www.w3.org/TR/CSS22/ui.html#system-colors\nconst systemColorsKeywords = new Set([\n\t'activeborder',\n\t'activecaption',\n\t'appworkspace',\n\t'background',\n\t'buttonface',\n\t'buttonhighlight',\n\t'buttonshadow',\n\t'buttontext',\n\t'captiontext',\n\t'graytext',\n\t'highlight',\n\t'highlighttext',\n\t'inactiveborder',\n\t'inactivecaption',\n\t'inactivecaptiontext',\n\t'infobackground',\n\t'infotext',\n\t'menu',\n\t'menutext',\n\t'scrollbar',\n\t'threeddarkshadow',\n\t'threedface',\n\t'threedhighlight',\n\t'threedlightshadow',\n\t'threedshadow',\n\t'window',\n\t'windowframe',\n\t'windowtext',\n]);\n\nmodule.exports = {\n\tanimationNameKeywords,\n\tanimationShorthandKeywords,\n\tbasicKeywords,\n\tcamelCaseKeywords,\n\tcounterIncrementKeywords,\n\tcounterResetKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n\tfontSizeKeywords,\n\tfontWeightAbsoluteKeywords,\n\tfontWeightKeywords,\n\tfontWeightNonNumericKeywords,\n\tfontWeightRelativeKeywords,\n\tgridAreaKeywords,\n\tgridColumnKeywords,\n\tgridRowKeywords,\n\tkeyframeSelectorKeywords,\n\tlistStyleImageKeywords,\n\tlistStylePositionKeywords,\n\tlistStyleShorthandKeywords,\n\tlistStyleTypeKeywords,\n\tsystemColorsKeywords,\n\tsystemFontKeywords,\n};\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst lengthUnits = new Set([\n\t// Font-relative length units\n\t'cap',\n\t'ch',\n\t'em',\n\t'ex',\n\t'ic',\n\t'lh',\n\t'rcap',\n\t'rch',\n\t'rem',\n\t'rex',\n\t'ric',\n\t'rlh',\n\t// Viewport-percentage lengths\n\t'dvb',\n\t'dvh',\n\t'dvi',\n\t'dvmax',\n\t'dvmin',\n\t'dvw',\n\t'lvb',\n\t'lvh',\n\t'lvi',\n\t'lvmax',\n\t'lvmin',\n\t'lvw',\n\t'svb',\n\t'svh',\n\t'svi',\n\t'svmax',\n\t'svmin',\n\t'svw',\n\t'vb',\n\t'vh',\n\t'vi',\n\t'vw',\n\t'vmin',\n\t'vmax',\n\t'vm',\n\t// Absolute length units\n\t'px',\n\t'mm',\n\t'cm',\n\t'in',\n\t'pt',\n\t'pc',\n\t'q',\n\t'mozmm',\n\t// Flexible length units\n\t'fr',\n\t// Container query units\n\t'cqw',\n\t'cqh',\n\t'cqi',\n\t'cqb',\n\t'cqmin',\n\t'cqmax',\n]);\n\nconst units = uniteSets(lengthUnits, [\n\t// Relative length units\n\t'%',\n\t// Time length units\n\t's',\n\t'ms',\n\t// Angle\n\t'deg',\n\t'grad',\n\t'turn',\n\t'rad',\n\t// Frequency\n\t'Hz',\n\t'kHz',\n\t// Resolution\n\t'dpi',\n\t'dpcm',\n\t'dppx',\n]);\n\nmodule.exports = {\n\tlengthUnits,\n\tunits,\n};\n","'use strict';\n\nconst { fontSizeKeywords } = require('../reference/keywords');\nconst { lengthUnits } = require('../reference/units');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Check if a word is a font-size value.\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function isValidFontSize(word) {\n\tif (!word) {\n\t\treturn false;\n\t}\n\n\tif (fontSizeKeywords.has(word)) {\n\t\treturn true;\n\t}\n\n\tconst numberUnit = valueParser.unit(word);\n\n\tif (!numberUnit) {\n\t\treturn false;\n\t}\n\n\tconst unit = numberUnit.unit;\n\n\tif (unit === '%') {\n\t\treturn true;\n\t}\n\n\tif (lengthUnits.has(unit.toLowerCase())) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * Check whether a word is a variable i.e var(--custom-property).\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function isVariable(word) {\n\treturn word.toLowerCase().startsWith('var(');\n};\n","'use strict';\n\nconst postcssValueParser = require('postcss-value-parser');\n\nconst isNumbery = require('./isNumbery');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isValidFontSize = require('./isValidFontSize');\nconst isVariable = require('./isVariable');\nconst { assert } = require('./validateTypes');\nconst {\n\tbasicKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n} = require('../reference/keywords');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n\tfirstNode.value = firstNode.value + charactersBetween + secondNode.value;\n\n\treturn firstNode;\n}\n\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @returns {Node[]} Collection font-family nodes\n */\nmodule.exports = function findFontFamily(value) {\n\t/** @type {Node[]} */\n\tconst fontFamilies = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes: children } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (children.length === 1 && children[0] && basicKeywords.has(children[0].value.toLowerCase())) {\n\t\treturn [children[0]];\n\t}\n\n\tlet needMergeNodesByValue = false;\n\t/** @type {string | null} */\n\tlet mergeCharacters = null;\n\n\tvalueNodes.walk((valueNode, index, nodes) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!nodeTypesToCheck.has(valueNode.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other font parts\n\t\tif (fontShorthandKeywords.has(valueLowerCase) && !fontFamilyKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore font-sizes\n\t\tif (isValidFontSize(valueNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst prevPrevNode = nodes[index - 2];\n\n\t\t// Ignore anything come after a <font-size>/, because it's a line-height\n\t\tif (prevNode && prevNode.value === '/' && prevPrevNode && isValidFontSize(prevPrevNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore number values\n\t\tif (isNumbery(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\t\tif (\n\t\t\t(valueNode.type === 'space' || (valueNode.type === 'div' && valueNode.value !== ',')) &&\n\t\t\tfontFamilies.length !== 0\n\t\t) {\n\t\t\tneedMergeNodesByValue = true;\n\t\t\tmergeCharacters = valueNode.value;\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (valueNode.type === 'space' || valueNode.type === 'div') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontFamily = valueNode;\n\n\t\tif (needMergeNodesByValue) {\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\t\t\tjoinValueNodes(lastFontFamily, fontFamily, mergeCharacters);\n\t\t\tneedMergeNodesByValue = false;\n\t\t\tmergeCharacters = null;\n\t\t} else {\n\t\t\tfontFamilies.push(fontFamily);\n\t\t}\n\t});\n\n\treturn fontFamilies;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst { fontFamilyKeywords } = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-duplicate-names';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected duplicate name ${name}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-no-duplicate-names',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && fontFamilyKeywords.has(node.value.toLowerCase());\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilyNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst keywords = new Set();\n\t\t\tconst familyNames = new Set();\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilies) {\n\t\t\t\tconst family = fontFamilyNode.value.trim();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFontFamilyNames', family)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rawFamily =\n\t\t\t\t\t'quote' in fontFamilyNode ? fontFamilyNode.quote + family + fontFamilyNode.quote : family;\n\n\t\t\t\tif (isFamilyNameKeyword(fontFamilyNode)) {\n\t\t\t\t\tif (keywords.has(family.toLowerCase())) {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tkeywords.add(family);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (familyNames.has(family)) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfamilyNames.add(family);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","export default {\n  cwd: () => \"/\",\n  env: {\n    NO_COLOR: \"true\",\n    FORCE_COLOR: \"false\"\n  },\n  argv: []\n};\n","let tty = require(\"tty\")\n\nlet isColorSupported =\n\t!(\"NO_COLOR\" in process.env || process.argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in process.env ||\n\t\tprocess.argv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(tty.isatty(1) && process.env.TERM !== \"dumb\") ||\n\t\t\"CI\" in process.env)\n\nlet formatter =\n\t(open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input\n\t\tlet index = string.indexOf(close, open.length)\n\t\treturn ~index\n\t\t\t? open + replaceClose(string, close, replace, index) + close\n\t\t\t: open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet start = string.substring(0, index) + replace\n\tlet end = string.substring(index + close.length)\n\tlet nextIndex = end.indexOf(close)\n\treturn ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end\n}\n\nlet createColors = (enabled = isColorSupported) => ({\n\tisColorSupported: enabled,\n\treset: enabled ? s => `\\x1b[0m${s}\\x1b[0m` : String,\n\tbold: enabled ? formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\") : String,\n\tdim: enabled ? formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\") : String,\n\titalic: enabled ? formatter(\"\\x1b[3m\", \"\\x1b[23m\") : String,\n\tunderline: enabled ? formatter(\"\\x1b[4m\", \"\\x1b[24m\") : String,\n\tinverse: enabled ? formatter(\"\\x1b[7m\", \"\\x1b[27m\") : String,\n\thidden: enabled ? formatter(\"\\x1b[8m\", \"\\x1b[28m\") : String,\n\tstrikethrough: enabled ? formatter(\"\\x1b[9m\", \"\\x1b[29m\") : String,\n\tblack: enabled ? formatter(\"\\x1b[30m\", \"\\x1b[39m\") : String,\n\tred: enabled ? formatter(\"\\x1b[31m\", \"\\x1b[39m\") : String,\n\tgreen: enabled ? formatter(\"\\x1b[32m\", \"\\x1b[39m\") : String,\n\tyellow: enabled ? formatter(\"\\x1b[33m\", \"\\x1b[39m\") : String,\n\tblue: enabled ? formatter(\"\\x1b[34m\", \"\\x1b[39m\") : String,\n\tmagenta: enabled ? formatter(\"\\x1b[35m\", \"\\x1b[39m\") : String,\n\tcyan: enabled ? formatter(\"\\x1b[36m\", \"\\x1b[39m\") : String,\n\twhite: enabled ? formatter(\"\\x1b[37m\", \"\\x1b[39m\") : String,\n\tgray: enabled ? formatter(\"\\x1b[90m\", \"\\x1b[39m\") : String,\n\tbgBlack: enabled ? formatter(\"\\x1b[40m\", \"\\x1b[49m\") : String,\n\tbgRed: enabled ? formatter(\"\\x1b[41m\", \"\\x1b[49m\") : String,\n\tbgGreen: enabled ? formatter(\"\\x1b[42m\", \"\\x1b[49m\") : String,\n\tbgYellow: enabled ? formatter(\"\\x1b[43m\", \"\\x1b[49m\") : String,\n\tbgBlue: enabled ? formatter(\"\\x1b[44m\", \"\\x1b[49m\") : String,\n\tbgMagenta: enabled ? formatter(\"\\x1b[45m\", \"\\x1b[49m\") : String,\n\tbgCyan: enabled ? formatter(\"\\x1b[46m\", \"\\x1b[49m\") : String,\n\tbgWhite: enabled ? formatter(\"\\x1b[47m\", \"\\x1b[49m\") : String,\n})\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n","'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput(dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': pico.cyan,\n  'at-word': pico.cyan,\n  'comment': pico.gray,\n  'string': pico.green,\n  'class': pico.yellow,\n  'hash': pico.magenta,\n  'call': pico.cyan,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n","'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n","'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","function noop() {\n  return noop;\n}\nnoop.default = noop.cosmiconfig = noop.catch = noop;\nexport default noop;\n\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            let fromUrl = this.usesFileUrls\n              ? this.toFileUrl(from)\n              : this.toUrl(this.path(from))\n            this.map.setSourceContent(fromUrl, node.source.input.css)\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  toFileUrl(path) {\n    if (pathToFileURL) {\n      return pathToFileURL(path).toString()\n    } else {\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n    }\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n","'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n","'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n","'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n","'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n","'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.19'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n","'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst { systemFontKeywords, fontFamilyKeywords } = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing generic font family',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-no-missing-generic-family-keyword',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && fontFamilyKeywords.has(node.value.toLowerCase());\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst isLastFontFamilyVariable = (value) => {\n\tconst lastValue = postcss.list.comma(value).pop();\n\n\treturn lastValue != null && (isVariable(lastValue) || !isStandardSyntaxValue(lastValue));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilies: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\t// Ignore @font-face\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl.prop === 'font' && systemFontKeywords.has(decl.value.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isLastFontFamilyVariable(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some((node) => isFamilyNameKeyword(node))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tfontFamilies.some((node) =>\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFontFamilies', node.value),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst index = valueIndex + lastFontFamily.sourceIndex;\n\t\t\tconst endIndex = valueIndex + lastFontFamily.sourceEndIndex;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-semicolon-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst nextNode = atRule.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tnodeToCheck.raws.before = context.newline + nodeToCheck.raws.before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\t\tindex: atRule.toString().length + 1,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-colon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {{\n *   div: import('postcss-value-parser').DivNode,\n *   index: number,\n *   nodes: import('postcss-value-parser').Node[],\n *   expectation: string,\n *   position: 'before' | 'after',\n *   symb: string,\n * }} params\n * @returns {boolean}\n */\nmodule.exports = function functionCommaSpaceFix(params) {\n\tconst { div, index, nodes, expectation, position, symb } = params;\n\n\tif (expectation.startsWith('always')) {\n\t\tdiv[position] = symb;\n\n\t\treturn true;\n\t}\n\n\tif (expectation.startsWith('never')) {\n\t\tdiv[position] = '';\n\n\t\tfor (let i = index + 1; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tif (node === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'comment') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'space') {\n\t\t\t\tnode.value = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst getDeclarationValue = require('../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../utils/isStandardSyntaxFunction');\nconst report = require('../utils/report');\nconst setDeclarationValue = require('../utils/setDeclarationValue');\nconst valueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} ValueParserNode */\n/** @typedef {import('postcss-value-parser').DivNode} ValueParserDivNode */\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((node: ValueParserDivNode, index: number, nodes: ValueParserNode[]) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function functionCommaSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst declValue = getDeclarationValue(decl);\n\n\t\tlet hasFixed;\n\t\tconst parsedValue = valueParser(declValue);\n\n\t\tparsedValue.walk((valueNode) => {\n\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore `url()` arguments, which may contain data URIs or other funky stuff\n\t\t\tif (valueNode.value.toLowerCase() === 'url') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst argumentStrings = valueNode.nodes.map((node) => valueParser.stringify(node));\n\n\t\t\tconst functionArguments = (() => {\n\t\t\t\t// Remove function name and parens\n\t\t\t\tlet result = valueNode.before + argumentStrings.join('') + valueNode.after;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tresult = result.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn result;\n\t\t\t})();\n\n\t\t\t/**\n\t\t\t * Gets the index of the comma for checking.\n\t\t\t * @param {ValueParserDivNode} commaNode The comma node\n\t\t\t * @param {number} nodeIndex The index of the comma node\n\t\t\t * @returns {number} The index of the comma for checking\n\t\t\t */\n\t\t\tconst getCommaCheckIndex = (commaNode, nodeIndex) => {\n\t\t\t\tlet commaBefore =\n\t\t\t\t\tvalueNode.before + argumentStrings.slice(0, nodeIndex).join('') + commaNode.before;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tcommaBefore = commaBefore.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn commaBefore.length;\n\t\t\t};\n\n\t\t\t/** @type {{ commaNode: ValueParserDivNode, checkIndex: number, nodeIndex: number }[]} */\n\t\t\tconst commaDataList = [];\n\n\t\t\tfor (const [nodeIndex, node] of valueNode.nodes.entries()) {\n\t\t\t\tif (node.type !== 'div' || node.value !== ',') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst checkIndex = getCommaCheckIndex(node, nodeIndex);\n\n\t\t\t\tcommaDataList.push({\n\t\t\t\t\tcommaNode: node,\n\t\t\t\t\tcheckIndex,\n\t\t\t\t\tnodeIndex,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const { commaNode, checkIndex, nodeIndex } of commaDataList) {\n\t\t\t\topts.locationChecker({\n\t\t\t\t\tsource: functionArguments,\n\t\t\t\t\tindex: checkIndex,\n\t\t\t\t\terr: (message) => {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + commaNode.sourceIndex + commaNode.before.length;\n\n\t\t\t\t\t\tif (opts.fix && opts.fix(commaNode, nodeIndex, valueNode.nodes)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasFixed) {\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t}\n\t});\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line function',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Returns a position of `!important` (or `! important` including whitespaces)\n * from the specified CSS source code. If not found, returns `undefined`.\n *\n * @param {string} source\n * @returns {{ index: number, endIndex: number } | undefined}\n */\nmodule.exports = function getImportantPosition(source) {\n\tconst pattern = /!\\s*important\\b/gi;\n\tconst match = pattern.exec(source);\n\n\tif (!match) return;\n\n\treturn { index: match.index, endIndex: pattern.lastIndex };\n};\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.important) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\tassert(pos);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex: pos.index,\n\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'annotation-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (annotation) => `Unexpected unknown annotation \"${annotation}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/annotation-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAnnotations: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tif (decl.important) return;\n\n\t\t\tif (!decl.value.includes('!')) return;\n\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isAnnotation(node)) return;\n\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst tokenValue = value.slice(1);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAnnotations', tokenValue)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: value,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {valueParser.Node} node\n\t\t */\n\t\tfunction isAnnotation(node) {\n\t\t\treturn node.type === 'word' && node.value.startsWith('!');\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line function',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-max-empty-lines',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction placeIndexOnValueStart(decl) {\n\tif (decl.raws.between == null) throw new Error('`between` must be present');\n\n\treturn decl.prop.length + decl.raws.between.length - 1;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst stringValue = getDeclarationValue(decl);\n\t\t\t/** @type {Array<[string, string]>} */\n\t\t\tconst splittedValue = [];\n\t\t\tlet sourceIndexStart = 0;\n\n\t\t\tvalueParser(stringValue).walk((node) => {\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'function' /* ignore non functions */ ||\n\t\t\t\t\tnode.value.length === 0 /* ignore sass lists */\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stringifiedNode = valueParser.stringify(node);\n\n\t\t\t\tif (\n\t\t\t\t\t!violatedLFNewLinesRegex.test(stringifiedNode) &&\n\t\t\t\t\t!violatedCRLFNewLinesRegex.test(stringifiedNode)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst newNodeString = stringifiedNode\n\t\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\t\tsplittedValue.push([\n\t\t\t\t\t\tstringValue.slice(sourceIndexStart, node.sourceIndex),\n\t\t\t\t\t\tnewNodeString,\n\t\t\t\t\t]);\n\t\t\t\t\tsourceIndexStart = node.sourceIndex + stringifiedNode.length;\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: placeIndexOnValueStart(decl) + node.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (context.fix && splittedValue.length > 0) {\n\t\t\t\tconst updatedValue =\n\t\t\t\t\tsplittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') +\n\t\t\t\t\tstringValue.slice(sourceIndexStart);\n\n\t\t\t\tsetDeclarationValue(decl, updatedValue);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line function',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict'\nmodule.exports = balanced\nfunction balanced (a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str)\n  if (b instanceof RegExp) b = maybeMatch(b, str)\n\n  const r = range(a, b, str)\n\n  return (\n    r && {\n      start: r[0],\n      end: r[1],\n      pre: str.slice(0, r[0]),\n      body: str.slice(r[0] + a.length, r[1]),\n      post: str.slice(r[1] + b.length)\n    }\n  )\n}\n\nfunction maybeMatch (reg, str) {\n  const m = str.match(reg)\n  return m ? m[0] : null\n}\n\nbalanced.range = range\nfunction range (a, b, str) {\n  let begs, beg, left, right, result\n  let ai = str.indexOf(a)\n  let bi = str.indexOf(b, ai + 1)\n  let i = ai\n\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi]\n    }\n    begs = []\n    left = str.length\n\n    while (i >= 0 && !result) {\n      if (i === ai) {\n        begs.push(i)\n        ai = str.indexOf(a, i + 1)\n      } else if (begs.length === 1) {\n        result = [begs.pop(), bi]\n      } else {\n        beg = begs.pop()\n        if (beg < left) {\n          left = beg\n          right = bi\n        }\n\n        bi = str.indexOf(b, i + 1)\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi\n    }\n\n    if (begs.length) {\n      result = [left, right]\n    }\n  }\n\n  return result\n}\n","'use strict';\n\nconst balancedMatch = require('balanced-match');\nconst valueParser = require('postcss-value-parser');\n\nconst { assert, isString, isRegExp } = require('./validateTypes');\n\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string | RegExp} functionName\n * @param {(expression: string, expressionIndex: number) => void} callback\n * @returns {void}\n */\nmodule.exports = function functionArgumentsSearch(source, functionName, callback) {\n\tvalueParser(source).walk((node) => {\n\t\tif (node.type !== 'function') return;\n\n\t\tconst { value } = node;\n\n\t\tif (isString(functionName) && value !== functionName) return;\n\n\t\tif (isRegExp(functionName) && !functionName.test(node.value)) return;\n\n\t\tconst parensMatch = balancedMatch('(', ')', source.slice(node.sourceIndex));\n\n\t\tassert(parensMatch);\n\n\t\tconst expression = parensMatch.body;\n\t\tconst parenLength = 1; // == '('\n\t\tconst expressionIndex = node.sourceIndex + value.length + parenLength;\n\n\t\tcallback(expression, expressionIndex);\n\t});\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected nonstandard direction',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-linear-gradient-no-nonstandard-direction',\n};\n\n/**\n * @param {string} source\n * @param {boolean} withToPrefix\n */\nfunction isStandardDirection(source, withToPrefix) {\n\tconst regexp = withToPrefix\n\t\t? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/\n\t\t: /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n\n\tconst matches = source.match(regexp);\n\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\tif (matches.length === 2) {\n\t\treturn true;\n\t}\n\n\t// Cannot repeat side-or-corner, e.g. \"to top top\"\n\tif (matches.length === 3 && matches[1] !== matches[2]) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunctionArgumentsSearch(\n\t\t\t\t\tvalueParser.stringify(valueNode).toLowerCase(),\n\t\t\t\t\t/^(-webkit-|-moz-|-o-|-ms-)?linear-gradient$/i,\n\t\t\t\t\t(expression, expressionIndex) => {\n\t\t\t\t\t\tconst args = expression.split(',');\n\t\t\t\t\t\tconst firstArg = (args[0] || '').trim();\n\n\t\t\t\t\t\t// If the first arg is not standard, return early\n\t\t\t\t\t\tif (!isStandardSyntaxValue(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first character is a number, we can assume the user intends an angle\n\t\t\t\t\t\tif (/[\\d.]/.test(firstArg.charAt(0))) {\n\t\t\t\t\t\t\tif (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The first argument may not be a direction: it may be an angle,\n\t\t\t\t\t\t// or a color stop (in which case user gets default direction, \"to bottom\")\n\t\t\t\t\t\t// cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\t\t\t\t\t\tif (!/left|right|top|bottom/.test(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst withToPrefix = !vendor.prefix(valueNode.value);\n\n\t\t\t\t\t\tif (!isStandardDirection(firstArg, withToPrefix)) {\n\t\t\t\t\t\t\tcomplain();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfunction complain() {\n\t\t\t\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex;\n\t\t\t\t\t\t\tconst endIndex = index + (args[0] || '').trimEnd().length;\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'hue-degree-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/hue-degree-notation',\n\tfixable: true,\n};\n\nconst HUE_FIRST_ARG_FUNCS = ['hsl', 'hsla', 'hwb'];\nconst HUE_THIRD_ARG_FUNCS = ['lch'];\nconst HUE_FUNCS = new Set([...HUE_FIRST_ARG_FUNCS, ...HUE_THIRD_ARG_FUNCS]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['angle', 'number'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\tif (!HUE_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\tconst hue = findHue(node);\n\n\t\t\t\tif (!hue) return;\n\n\t\t\t\tconst { value } = hue;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isDegree(value) && !isNumber(value)) return;\n\n\t\t\t\tif (primary === 'angle' && isDegree(value)) return;\n\n\t\t\t\tif (primary === 'number' && isNumber(value)) return;\n\n\t\t\t\tconst fixed = primary === 'angle' ? asDegree(value) : asNumber(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\thue.value = fixed;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst valueIndex = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: valueIndex + hue.sourceIndex,\n\t\t\t\t\tendIndex: valueIndex + hue.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n */\nfunction asDegree(value) {\n\treturn `${value}deg`;\n}\n\n/**\n * @param {string} value\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tif (dimension) return dimension.number;\n\n\tthrow new TypeError(`The \"${value}\" value must have a unit`);\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction findHue(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\tconst value = node.value.toLowerCase();\n\n\tif (HUE_FIRST_ARG_FUNCS.includes(value)) {\n\t\treturn args[0];\n\t}\n\n\tif (HUE_THIRD_ARG_FUNCS.includes(value)) {\n\t\treturn args[2];\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n */\nfunction isDegree(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit.toLowerCase() === 'deg';\n}\n\n/**\n * @param {string} value\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-calc-no-unspaced-operator';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\" operator`,\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\" operator`,\n\texpectedOperatorBeforeSign: (operator) => `Expected an operator before sign \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-calc-no-unspaced-operator',\n\tfixable: true,\n};\n\nconst OPERATORS = new Set(['+', '-']);\nconst OPERATOR_REGEX = /[+-]/;\nconst ALL_OPERATORS = new Set([...OPERATORS, '*', '/']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction complain(message, node, index, operator) {\n\t\t\tconst endIndex = index + operator.length;\n\n\t\t\treport({ message, node, index, endIndex, result, ruleName });\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} operatorNode\n\t\t\t * @param {import('postcss-value-parser').Node} currentNode\n\t\t\t * @param {boolean} isBeforeOp\n\t\t\t */\n\t\t\tfunction checkAroundOperator(operatorNode, currentNode, isBeforeOp) {\n\t\t\t\tconst operator = operatorNode.value;\n\t\t\t\tconst operatorSourceIndex = operatorNode.sourceIndex;\n\n\t\t\t\tif (currentNode && !isSingleSpace(currentNode)) {\n\t\t\t\t\tif (currentNode.type === 'word') {\n\t\t\t\t\t\tif (isBeforeOp) {\n\t\t\t\t\t\t\tconst lastChar = currentNode.value.slice(-1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${currentNode.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\t\toperatorSourceIndex,\n\t\t\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst firstChar = currentNode.value.slice(0, 1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${firstChar} ${currentNode.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(messages.expectedAfter(operator), decl, operatorSourceIndex, operator);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tisBeforeOp ? messages.expectedBefore(operator) : messages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + operatorSourceIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'space') {\n\t\t\t\t\t\tconst indexOfFirstNewLine = currentNode.value.search(/(\\n|\\r\\n)/);\n\n\t\t\t\t\t\tif (indexOfFirstNewLine === 0) return;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value =\n\t\t\t\t\t\t\t\tindexOfFirstNewLine === -1 ? ' ' : currentNode.value.slice(indexOfFirstNewLine);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'function') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInFirstNode(nodes) {\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tassert(firstNode);\n\n\t\t\t\tif (firstNode.type !== 'word') return false;\n\n\t\t\t\tif (!isStandardSyntaxValue(firstNode.value)) return false;\n\n\t\t\t\tconst operatorIndex = firstNode.value.search(OPERATOR_REGEX);\n\t\t\t\tconst operator = firstNode.value.slice(operatorIndex, operatorIndex + 1);\n\n\t\t\t\tif (operatorIndex <= 0) return false;\n\n\t\t\t\tconst charBefore = firstNode.value.charAt(operatorIndex - 1);\n\t\t\t\tconst charAfter = firstNode.value.charAt(operatorIndex + 1);\n\n\t\t\t\tif (charBefore && charBefore !== ' ' && charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex + 1, ' ');\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charBefore && charBefore !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInLastNode(nodes) {\n\t\t\t\tif (nodes.length === 1) return false;\n\n\t\t\t\tconst lastNode = nodes[nodes.length - 1];\n\n\t\t\t\tassert(lastNode);\n\n\t\t\t\tif (lastNode.type !== 'word') return false;\n\n\t\t\t\tconst operatorIndex = lastNode.value.search(OPERATOR_REGEX);\n\n\t\t\t\tif (operatorIndex === -1) return false;\n\n\t\t\t\tif (lastNode.value.charAt(operatorIndex - 1) === ' ') return false;\n\n\t\t\t\t// E.g. \"10px * -2\" when the last node is \"-2\"\n\t\t\t\tif (\n\t\t\t\t\tisOperator(nodes[nodes.length - 3], ALL_OPERATORS) &&\n\t\t\t\t\tisSingleSpace(nodes[nodes.length - 2])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedsFix = true;\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex + 1, ' ').trim();\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex, ' ').trim();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst operator = lastNode.value.charAt(operatorIndex);\n\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\tdecl,\n\t\t\t\t\tvalueIndex + lastNode.sourceIndex + operatorIndex,\n\t\t\t\t\toperator,\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkWords(nodes) {\n\t\t\t\tif (checkForOperatorInFirstNode(nodes) || checkForOperatorInLastNode(nodes)) return;\n\n\t\t\t\tfor (const [index, node] of nodes.entries()) {\n\t\t\t\t\tconst lastChar = node.value.slice(-1);\n\t\t\t\t\tconst firstChar = node.value.slice(0, 1);\n\n\t\t\t\t\tif (node.type === 'word') {\n\t\t\t\t\t\tif (index === 0 && OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${node.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedBefore(lastChar), decl, node.sourceIndex, lastChar);\n\t\t\t\t\t\t} else if (index === nodes.length && OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${firstChar} ${node.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(firstChar),\n\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\tnode.sourceIndex,\n\t\t\t\t\t\t\t\tfirstChar,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || node.value.toLowerCase() !== 'calc') return;\n\n\t\t\t\tconst { nodes } = node;\n\t\t\t\tlet foundOperatorNode = false;\n\n\t\t\t\tfor (const [nodeIndex, currNode] of nodes.entries()) {\n\t\t\t\t\tif (!isOperator(currNode)) continue;\n\n\t\t\t\t\tfoundOperatorNode = true;\n\n\t\t\t\t\tconst nodeBefore = nodes[nodeIndex - 1];\n\t\t\t\t\tconst nodeAfter = nodes[nodeIndex + 1];\n\n\t\t\t\t\tif (isSingleSpace(nodeBefore) && isSingleSpace(nodeAfter)) continue;\n\n\t\t\t\t\tif (nodeAfter && checkAroundOperator(currNode, nodeAfter, false)) continue;\n\n\t\t\t\t\tnodeBefore && checkAroundOperator(currNode, nodeBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (!foundOperatorNode) {\n\t\t\t\t\tcheckWords(nodes);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} str\n * @param {number} index\n * @param {string} char\n */\nfunction insertCharAtIndex(str, index, char) {\n\treturn str.slice(0, index) + char + str.slice(index, str.length);\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {node is import('postcss-value-parser').SpaceNode & { value: ' ' } }\n */\nfunction isSingleSpace(node) {\n\treturn node != null && node.type === 'space' && node.value === ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @param {Set<string>} [operators]\n * @returns {node is import('postcss-value-parser').WordNode}\n */\nfunction isOperator(node, operators = OPERATORS) {\n\treturn node != null && node.type === 'word' && operators.has(node.value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst camelCaseFunctions = new Set([\n\t'translateX',\n\t'translateY',\n\t'translateZ',\n\t'scaleX',\n\t'scaleY',\n\t'scaleZ',\n\t'rotateX',\n\t'rotateY',\n\t'rotateZ',\n\t'skewX',\n\t'skewY',\n]);\n\nconst mathFunctions = new Set(['calc', 'clamp', 'max', 'min']);\n\nmodule.exports = {\n\tcamelCaseFunctions,\n\tmathFunctions,\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst { camelCaseFunctions } = require('../../reference/functions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-name-case',\n\tfixable: true,\n};\n\nconst mapLowercaseFunctionNamesToCamelCase = new Map();\n\nfor (const func of camelCaseFunctions) {\n\tmapLowercaseFunctionNamesToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needFix = false;\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || !isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionName = node.value;\n\t\t\t\tconst functionNameLowerCase = functionName.toLowerCase();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', functionName)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet expectedFunctionName = null;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseFunctionNamesToCamelCase.has(functionNameLowerCase)\n\t\t\t\t) {\n\t\t\t\t\texpectedFunctionName = mapLowercaseFunctionNamesToCamelCase.get(functionNameLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedFunctionName = functionNameLowerCase;\n\t\t\t\t} else {\n\t\t\t\t\texpectedFunctionName = functionName.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (functionName === expectedFunctionName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedFunctionName;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(functionName, expectedFunctionName),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tsetDeclarationValue(decl, parsed.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {number}\n */\nmodule.exports = function atRuleParamIndex(atRule) {\n\t// Initial 1 is for the `@`\n\tlet index = 1 + atRule.name.length;\n\n\tif (atRule.raws.afterName) {\n\t\tindex += atRule.raws.afterName.length;\n\t}\n\n\treturn index;\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxUrl(url) {\n\tif (url.length === 0) {\n\t\treturn true;\n\t}\n\n\t// Sass interpolation works anywhere\n\tif (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n\t\treturn false;\n\t}\n\n\t// Inside `'` and `\"` work only LESS interpolation\n\tif ((url.startsWith(`'`) && url.endsWith(`'`)) || (url.startsWith(`\"`) && url.endsWith(`\"`))) {\n\t\tif (hasLessInterpolation(url)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Less variable works only at the beginning\n\t// Check is less variable, allow use '@url/some/path'\n\t// https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\tif (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n\t\treturn false;\n\t}\n\n\t// In url without quotes scss variable can be everywhere\n\t// But in this case it is allowed to use only specific characters\n\t// Also forbidden \"/\" at the end of url\n\tif (url.includes('$') && /^[$\\s\\w+\\-,./*'\"]+$/.test(url) && !url.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (functionName) => `Expected quotes around \"${functionName}\" function argument`,\n\trejected: (functionName) => `Unexpected quotes around \"${functionName}\" function argument`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-quotes',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['empty'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(checkAtRuleParams);\n\t\troot.walkDecls(checkDeclParams);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkDeclParams(decl) {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, decl, index, 'url');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleParams(atRule) {\n\t\t\tconst atRuleParamsLowerCase = atRule.params.toLowerCase();\n\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} args\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} functionName\n\t\t */\n\t\tfunction checkArgs(args, node, index, functionName) {\n\t\t\tlet shouldHasQuotes = primary === 'always';\n\n\t\t\tconst leftTrimmedArgs = args.trimStart();\n\n\t\t\tif (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = index + args.length - leftTrimmedArgs.length;\n\t\t\tconst complaintEndIndex = index + args.length;\n\t\t\tconst hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n\n\t\t\tconst trimmedArg = args.trim();\n\t\t\tconst isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n\t\t\tif (optionsMatches(secondaryOptions, 'except', 'empty') && isEmptyArgument) {\n\t\t\t\tshouldHasQuotes = !shouldHasQuotes;\n\t\t\t}\n\n\t\t\tif (shouldHasQuotes) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.expected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t} else {\n\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.rejected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineAfter = require('../../utils/addEmptyLineAfter');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesAfter = require('../../utils/removeEmptyLinesAfter');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before closing brace',\n\trejected: 'Unexpected empty line before closing brace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-closing-brace-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always-multi-line', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['after-closing-brace'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get whitespace after \"\"}\", ignoring extra semicolon\n\t\t\tconst before = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\t// Calculate index\n\t\t\tconst statementString = statement.toString();\n\t\t\tlet index = statementString.length - 1;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// Set expectation\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tconst childNodeTypes = statement.nodes.map((item) => item.type);\n\n\t\t\t\t// Reverse the primary options if `after-closing-brace` is set\n\t\t\t\tif (\n\t\t\t\t\toptionsMatches(secondaryOptions, 'except', 'after-closing-brace') &&\n\t\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\t\t!childNodeTypes.includes('decl')\n\t\t\t\t) {\n\t\t\t\t\treturn primary === 'never';\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always-multi-line' && !isSingleLineString(blockString(statement));\n\t\t\t})();\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst { newline } = context;\n\n\t\t\t\tif (typeof newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineAfter(statement, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesAfter(statement, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tnode: statement,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineAfter(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.after !== 'string') {\n\t\treturn node;\n\t}\n\n\tconst spaces = raws.after.split(';');\n\tconst after = spaces[spaces.length - 1] || '';\n\n\tif (!/\\r?\\n/.test(after)) {\n\t\traws.after += newline.repeat(2);\n\t} else {\n\t\traws.after = raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n\t}\n\n\treturn node;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesAfter(node, newline) {\n\tnode.raws.after = node.raws.after ? node.raws.after.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-newline-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected newline after \"(\"',\n\texpectedClosing: 'Expected newline before \")\"',\n\texpectedOpeningMultiLine: 'Expected newline after \"(\" in a multi-line function',\n\trejectedOpeningMultiLine: 'Unexpected whitespace after \"(\" in a multi-line function',\n\texpectedClosingMultiLine: 'Expected newline before \")\" in a multi-line function',\n\trejectedClosingMultiLine: 'Unexpected whitespace before \")\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-parentheses-newline-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isMultiLine = !isSingleLineString(functionString);\n\t\t\t\tconst containsNewline = (/** @type {string} */ str) => str.includes('\\n');\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\t\t\t\tconst checkBefore = getCheckBefore(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkBefore !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\t\t\t\tconst checkAfter = getCheckAfter(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkAfter !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-value-parser').FunctionNode} FunctionNode */\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckBefore(valueNode) {\n\tlet before = valueNode.before;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tbefore += node.value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\treturn before;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckAfter(valueNode) {\n\tlet after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tafter = node.value + after;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tafter += valueNode.after;\n\n\treturn after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixBeforeForAlways(valueNode, newline) {\n\tlet target;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\ttarget = node;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tif (target) {\n\t\ttarget.value = newline + target.value;\n\t} else {\n\t\tvalueNode.before = newline + valueNode.before;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixBeforeForNever(valueNode) {\n\tvalueNode.before = '';\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixAfterForAlways(valueNode, newline) {\n\tvalueNode.after = newline + valueNode.after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixAfterForNever(valueNode) {\n\tvalueNode.after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fs = require('fs');\nconst valueParser = require('postcss-value-parser');\nconst functionsListPath = require('css-functions-list');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isCustomFunction = require('../../utils/isCustomFunction');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected unknown function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst functionsList = JSON.parse(fs.readFileSync(functionsListPath.toString(), 'utf8'));\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\tconst name = node.value;\n\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomFunction(name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (functionsList.includes(name.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: name,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is custom / user-defined\n * https://github.com/w3c/css-houdini-drafts/issues/1007\n * @param {string} func\n * @returns {boolean}\n */\nmodule.exports = function isCustomFunction(func) {\n\treturn func.startsWith('--');\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n\texpectedOpeningSingleLine: 'Expected single space after \"(\" in a single-line function',\n\trejectedOpeningSingleLine: 'Unexpected whitespace after \"(\" in a single-line function',\n\texpectedClosingSingleLine: 'Expected single space before \")\" in a single-line function',\n\trejectedClosingSingleLine: 'Unexpected whitespace before \")\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore function without parameters\n\t\t\t\tif (!valueNode.nodes.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isSingleLine = isSingleLineString(functionString);\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\n\t\t\t\tif (primary === 'always' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\n\t\t\t\tif (primary === 'always' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-whitespace-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected whitespace after \")\"',\n\trejected: 'Unexpected whitespace after \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-whitespace-after',\n\tfixable: true,\n};\n\nconst ACCEPTABLE_AFTER_CLOSING_PAREN = new Set([')', ',', '}', ':', '/', undefined]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string} value\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction check(node, value, nodeIndex, fix) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: value,\n\t\t\t\t\ttarget: ')',\n\t\t\t\t\tfunctionArguments: 'only',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tcheckClosingParen(value, match.startIndex + 1, node, nodeIndex, fix);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction checkClosingParen(source, index, node, nodeIndex, fix) {\n\t\t\tconst nextChar = source.charAt(index);\n\n\t\t\tif (!nextChar) return;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\t// Allow for the next character to be a single empty space,\n\t\t\t\t// another closing parenthesis, a comma, or the end of the value\n\t\t\t\tif (nextChar === ' ') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (nextChar === '\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (source.slice(index, index + 2) === '\\r\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ACCEPTABLE_AFTER_CLOSING_PAREN.has(nextChar)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t} else if (primary === 'never' && isWhitespace(nextChar)) {\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} value\n\t\t */\n\t\tfunction createFixer(value) {\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\t\t\t/** @type {(index: number) => void} */\n\t\t\tlet applyFix;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\tfixed += value.slice(lastIndex, index) + ' ';\n\t\t\t\t\tlastIndex = index;\n\t\t\t\t};\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\tlet whitespaceEndIndex = index + 1;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\twhitespaceEndIndex < value.length &&\n\t\t\t\t\t\tisWhitespace(value.charAt(whitespaceEndIndex))\n\t\t\t\t\t) {\n\t\t\t\t\t\twhitespaceEndIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tfixed += value.slice(lastIndex, index);\n\t\t\t\t\tlastIndex = whitespaceEndIndex;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tapplyFix,\n\t\t\t\tget hasFixed() {\n\t\t\t\t\treturn Boolean(lastIndex);\n\t\t\t\t},\n\t\t\t\tget fixed() {\n\t\t\t\t\treturn fixed + value.slice(lastIndex);\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst param = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst fixer = context.fix && createFixer(param);\n\n\t\t\tcheck(atRule, param, atRuleParamIndex(atRule), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = fixer.fixed;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = fixer.fixed;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\t\t\tconst fixer = context.fix && createFixer(value);\n\n\t\t\tcheck(decl, value, declarationValueIndex(decl), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, fixer.fixed);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc;\n\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = getProp;\n\nfunction getProp(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      return undefined;\n    }\n\n    obj = obj[prop];\n  }\n\n  return obj;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = ensureObject;\n\nfunction ensureObject(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      obj[prop] = {};\n    }\n\n    obj = obj[prop];\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = stripComments;\n\nfunction stripComments(str) {\n  var s = \"\";\n  var commentStart = str.indexOf(\"/*\");\n  var lastEnd = 0;\n\n  while (commentStart >= 0) {\n    s = s + str.slice(lastEnd, commentStart);\n    var commentEnd = str.indexOf(\"*/\", commentStart + 2);\n\n    if (commentEnd < 0) {\n      return s;\n    }\n\n    lastEnd = commentEnd + 2;\n    commentStart = str.indexOf(\"/*\", lastEnd);\n  }\n\n  s = s + str.slice(lastEnd);\n  return s;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.stripComments = exports.ensureObject = exports.getProp = exports.unesc = void 0;\n\nvar _unesc = _interopRequireDefault(require(\"./unesc\"));\n\nexports.unesc = _unesc[\"default\"];\n\nvar _getProp = _interopRequireDefault(require(\"./getProp\"));\n\nexports.getProp = _getProp[\"default\"];\n\nvar _ensureObject = _interopRequireDefault(require(\"./ensureObject\"));\n\nexports.ensureObject = _ensureObject[\"default\"];\n\nvar _stripComments = _interopRequireDefault(require(\"./stripComments\"));\n\nexports.stripComments = _stripComments[\"default\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _util = require(\"../util\");\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar cloneNode = function cloneNode(obj, parent) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var value = obj[i];\n    var type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n\n  return cloned;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || '';\n    this.spaces.after = this.spaces.after || '';\n  }\n\n  var _proto = Node.prototype;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  };\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  };\n\n  _proto.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n\n  _proto.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */\n  ;\n\n  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */\n  ;\n\n  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    this.raws[name] = valueEscaped;\n  }\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */\n  ;\n\n  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  }\n  /**\n   *\n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */\n  ;\n\n  _proto.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n\n      if (this.source.end.line < line) {\n        return false;\n      }\n\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return undefined;\n  };\n\n  _proto.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n\n  _proto.valueToString = function valueToString() {\n    return String(this.stringifyProperty(\"value\"));\n  };\n\n  _proto.toString = function toString() {\n    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');\n  };\n\n  _createClass(Node, [{\n    key: \"rawSpaceBefore\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: \"rawSpaceAfter\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports[\"default\"] = Node;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.UNIVERSAL = exports.ATTRIBUTE = exports.CLASS = exports.COMBINATOR = exports.COMMENT = exports.ID = exports.NESTING = exports.PSEUDO = exports.ROOT = exports.SELECTOR = exports.STRING = exports.TAG = void 0;\nvar TAG = 'tag';\nexports.TAG = TAG;\nvar STRING = 'string';\nexports.STRING = STRING;\nvar SELECTOR = 'selector';\nexports.SELECTOR = SELECTOR;\nvar ROOT = 'root';\nexports.ROOT = ROOT;\nvar PSEUDO = 'pseudo';\nexports.PSEUDO = PSEUDO;\nvar NESTING = 'nesting';\nexports.NESTING = NESTING;\nvar ID = 'id';\nexports.ID = ID;\nvar COMMENT = 'comment';\nexports.COMMENT = COMMENT;\nvar COMBINATOR = 'combinator';\nexports.COMBINATOR = COMBINATOR;\nvar CLASS = 'class';\nexports.CLASS = CLASS;\nvar ATTRIBUTE = 'attribute';\nexports.ATTRIBUTE = ATTRIBUTE;\nvar UNIVERSAL = 'universal';\nexports.UNIVERSAL = UNIVERSAL;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar types = _interopRequireWildcard(require(\"./types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n\n  function Container(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n\n    return _this;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.append = function append(selector) {\n    selector.parent = this;\n    this.nodes.push(selector);\n    return this;\n  };\n\n  _proto.prepend = function prepend(selector) {\n    selector.parent = this;\n    this.nodes.unshift(selector);\n    return this;\n  };\n\n  _proto.at = function at(index) {\n    return this.nodes[index];\n  };\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n\n    return this.nodes.indexOf(child);\n  };\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.at(child).parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n      var node = _step.value;\n      node.parent = undefined;\n    }\n\n    this.nodes = [];\n    return this;\n  };\n\n  _proto.empty = function empty() {\n    return this.removeAll();\n  };\n\n  _proto.insertAfter = function insertAfter(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex + 1, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (oldIndex <= index) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.insertBefore = function insertBefore(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index <= oldIndex) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {\n    var found = undefined;\n    this.each(function (node) {\n      if (node.atPosition) {\n        var foundChild = node.atPosition(line, col);\n\n        if (foundChild) {\n          found = foundChild;\n          return false;\n        }\n      } else if (node.isAtPosition(line, col)) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n  /**\n   * Return the most specific node at the line and column number given.\n   * The source location is based on the original parsed location, locations aren't\n   * updated as selector nodes are mutated.\n   * \n   * Note that this location is relative to the location of the first character\n   * of the selector, and not the location of the selector in the overall document\n   * when used in conjunction with postcss.\n   *\n   * If not found, returns undefined.\n   * @param {number} line The line number of the node to find. (1-based index)\n   * @param {number} col  The column number of the node to find. (1-based index)\n   */\n  ;\n\n  _proto.atPosition = function atPosition(line, col) {\n    if (this.isAtPosition(line, col)) {\n      return this._findChildAtPosition(line, col) || this;\n    } else {\n      return undefined;\n    }\n  };\n\n  _proto._inferEndPosition = function _inferEndPosition() {\n    if (this.last && this.last.source && this.last.source.end) {\n      this.source = this.source || {};\n      this.source.end = this.source.end || {};\n      Object.assign(this.source.end, this.last.source.end);\n    }\n  };\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) {\n      this.lastEach = 0;\n    }\n\n    if (!this.indexes) {\n      this.indexes = {};\n    }\n\n    this.lastEach++;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n\n    if (!this.length) {\n      return undefined;\n    }\n\n    var index, result;\n\n    while (this.indexes[id] < this.length) {\n      index = this.indexes[id];\n      result = callback(this.at(index), index);\n\n      if (result === false) {\n        break;\n      }\n\n      this.indexes[id] += 1;\n    }\n\n    delete this.indexes[id];\n\n    if (result === false) {\n      return false;\n    }\n  };\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (node, i) {\n      var result = callback(node, i);\n\n      if (result !== false && node.length) {\n        result = node.walk(callback);\n      }\n\n      if (result === false) {\n        return false;\n      }\n    });\n  };\n\n  _proto.walkAttributes = function walkAttributes(callback) {\n    var _this2 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ATTRIBUTE) {\n        return callback.call(_this2, selector);\n      }\n    });\n  };\n\n  _proto.walkClasses = function walkClasses(callback) {\n    var _this3 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.CLASS) {\n        return callback.call(_this3, selector);\n      }\n    });\n  };\n\n  _proto.walkCombinators = function walkCombinators(callback) {\n    var _this4 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMBINATOR) {\n        return callback.call(_this4, selector);\n      }\n    });\n  };\n\n  _proto.walkComments = function walkComments(callback) {\n    var _this5 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMMENT) {\n        return callback.call(_this5, selector);\n      }\n    });\n  };\n\n  _proto.walkIds = function walkIds(callback) {\n    var _this6 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ID) {\n        return callback.call(_this6, selector);\n      }\n    });\n  };\n\n  _proto.walkNesting = function walkNesting(callback) {\n    var _this7 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.NESTING) {\n        return callback.call(_this7, selector);\n      }\n    });\n  };\n\n  _proto.walkPseudos = function walkPseudos(callback) {\n    var _this8 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.PSEUDO) {\n        return callback.call(_this8, selector);\n      }\n    });\n  };\n\n  _proto.walkTags = function walkTags(callback) {\n    var _this9 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.TAG) {\n        return callback.call(_this9, selector);\n      }\n    });\n  };\n\n  _proto.walkUniversals = function walkUniversals(callback) {\n    var _this10 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.UNIVERSAL) {\n        return callback.call(_this10, selector);\n      }\n    });\n  };\n\n  _proto.split = function split(callback) {\n    var _this11 = this;\n\n    var current = [];\n    return this.reduce(function (memo, node, index) {\n      var split = callback.call(_this11, node);\n      current.push(node);\n\n      if (split) {\n        memo.push(current);\n        current = [];\n      } else if (index === _this11.length - 1) {\n        memo.push(current);\n      }\n\n      return memo;\n    }, []);\n  };\n\n  _proto.map = function map(callback) {\n    return this.nodes.map(callback);\n  };\n\n  _proto.reduce = function reduce(callback, memo) {\n    return this.nodes.reduce(callback, memo);\n  };\n\n  _proto.every = function every(callback) {\n    return this.nodes.every(callback);\n  };\n\n  _proto.some = function some(callback) {\n    return this.nodes.some(callback);\n  };\n\n  _proto.filter = function filter(callback) {\n    return this.nodes.filter(callback);\n  };\n\n  _proto.sort = function sort(callback) {\n    return this.nodes.sort(callback);\n  };\n\n  _proto.toString = function toString() {\n    return this.map(String).join('');\n  };\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      return this.at(0);\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      return this.at(this.length - 1);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.nodes.length;\n    }\n  }]);\n\n  return Container;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Container;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n\n  function Root(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.ROOT;\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.toString = function toString() {\n    var str = this.reduce(function (memo, selector) {\n      memo.push(String(selector));\n      return memo;\n    }, []).join(',');\n    return this.trailingComma ? str + ',' : str;\n  };\n\n  _proto.error = function error(message, options) {\n    if (this._error) {\n      return this._error(message, options);\n    } else {\n      return new Error(message);\n    }\n  };\n\n  _createClass(Root, [{\n    key: \"errorGenerator\",\n    set: function set(handler) {\n      this._error = handler;\n    }\n  }]);\n\n  return Root;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Root;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Selector = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Selector, _Container);\n\n  function Selector(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.SELECTOR;\n    return _this;\n  }\n\n  return Selector;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Selector;\nmodule.exports = exports.default;","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClassName = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ClassName, _Node);\n\n  function ClassName(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.CLASS;\n    _this._constructed = true;\n    return _this;\n  }\n\n  var _proto = ClassName.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '.' + _Node.prototype.valueToString.call(this);\n  };\n\n  _createClass(ClassName, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      if (this._constructed) {\n        var escaped = (0, _cssesc[\"default\"])(v, {\n          isIdentifier: true\n        });\n\n        if (escaped !== v) {\n          (0, _util.ensureObject)(this, \"raws\");\n          this.raws.value = escaped;\n        } else if (this.raws) {\n          delete this.raws.value;\n        }\n      }\n\n      this._value = v;\n    }\n  }]);\n\n  return ClassName;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ClassName;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n\n  function Comment(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMMENT;\n    return _this;\n  }\n\n  return Comment;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Comment;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ID = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ID, _Node);\n\n  function ID(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.ID;\n    return _this;\n  }\n\n  var _proto = ID.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '#' + _Node.prototype.valueToString.call(this);\n  };\n\n  return ID;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ID;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Namespace = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Namespace, _Node);\n\n  function Namespace() {\n    return _Node.apply(this, arguments) || this;\n  }\n\n  var _proto = Namespace.prototype;\n\n  _proto.qualifiedName = function qualifiedName(value) {\n    if (this.namespace) {\n      return this.namespaceString + \"|\" + value;\n    } else {\n      return value;\n    }\n  };\n\n  _proto.valueToString = function valueToString() {\n    return this.qualifiedName(_Node.prototype.valueToString.call(this));\n  };\n\n  _createClass(Namespace, [{\n    key: \"namespace\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      if (namespace === true || namespace === \"*\" || namespace === \"&\") {\n        this._namespace = namespace;\n\n        if (this.raws) {\n          delete this.raws.namespace;\n        }\n\n        return;\n      }\n\n      var escaped = (0, _cssesc[\"default\"])(namespace, {\n        isIdentifier: true\n      });\n      this._namespace = namespace;\n\n      if (escaped !== namespace) {\n        (0, _util.ensureObject)(this, \"raws\");\n        this.raws.namespace = escaped;\n      } else if (this.raws) {\n        delete this.raws.namespace;\n      }\n    }\n  }, {\n    key: \"ns\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      this.namespace = namespace;\n    }\n  }, {\n    key: \"namespaceString\",\n    get: function get() {\n      if (this.namespace) {\n        var ns = this.stringifyProperty(\"namespace\");\n\n        if (ns === true) {\n          return '';\n        } else {\n          return ns;\n        }\n      } else {\n        return '';\n      }\n    }\n  }]);\n\n  return Namespace;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Namespace;\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Tag = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Tag, _Namespace);\n\n  function Tag(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.TAG;\n    return _this;\n  }\n\n  return Tag;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Tag;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar String = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(String, _Node);\n\n  function String(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.STRING;\n    return _this;\n  }\n\n  return String;\n}(_node[\"default\"]);\n\nexports[\"default\"] = String;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Pseudo = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Pseudo, _Container);\n\n  function Pseudo(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.PSEUDO;\n    return _this;\n  }\n\n  var _proto = Pseudo.prototype;\n\n  _proto.toString = function toString() {\n    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n    return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), params, this.rawSpaceAfter].join('');\n  };\n\n  return Pseudo;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Pseudo;\nmodule.exports = exports.default;","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","export const deprecate = fn => fn;\nexport const types = {\n  isNativeError: () => true\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports.unescapeValue = unescapeValue;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _unesc = _interopRequireDefault(require(\"../util/unesc\"));\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nvar _CSSESC_QUOTE_OPTIONS;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar deprecate = require(\"util-deprecate\");\n\nvar WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n\n  unescaped = (0, _unesc[\"default\"])(unescaped);\n\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\n\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n\n  if (opts.value === undefined) {\n    return opts;\n  }\n\n  warnOfDeprecatedConstructor();\n\n  var _unescapeValue = unescapeValue(opts.value),\n      quoteMark = _unescapeValue.quoteMark,\n      unescaped = _unescapeValue.unescaped;\n\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\n\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n\n  function Attribute(opts) {\n    var _this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n\n\n  var _proto = Attribute.prototype;\n\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var quoteMark = this._determineQuoteMark(options);\n\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc[\"default\"])(this._value, cssescopts);\n    return escaped;\n  };\n\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */\n  ;\n\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n\n    this._syncRawValue();\n  }\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */\n  ;\n\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc[\"default\"])(v, {\n        isIdentifier: true\n      });\n\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc[\"default\"])(v, opts);\n\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */\n  ;\n\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n\n    return quoteMark;\n  };\n\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc[\"default\"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc[\"default\"])(value, {\n        isIdentifier: true\n      });\n\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n\n    var attrSpaces = this._spacesFor(spaceName);\n\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */\n  ;\n\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n\n    var attributeSpaces = this._spacesFor(\"attribute\");\n\n    count += attributeSpaces.before.length;\n\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n\n    if (name === \"attributeNS\") {\n      return count;\n    }\n\n    count += this.namespaceString.length;\n\n    if (this.namespace) {\n      count += 1;\n    }\n\n    if (name === \"attribute\") {\n      return count;\n    }\n\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n\n    var operatorSpaces = this._spacesFor(\"operator\");\n\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n\n    count += operator.length;\n    count += operatorSpaces.after.length;\n\n    var valueSpaces = this._spacesFor(\"value\");\n\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n\n    count += value.length;\n    count += valueSpaces.after.length;\n\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n\n    count += insensitiveSpaces.before.length;\n\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n\n    return -1;\n  };\n\n  _proto.toString = function toString() {\n    var _this2 = this;\n\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n    if (this.operator && (this.value || this.value === '')) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */\n    ,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    ,\n    set: function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n            deprecatedUsage = _unescapeValue2.deprecatedUsage,\n            unescaped = _unescapeValue2.unescaped,\n            quoteMark = _unescapeValue2.quoteMark;\n\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n\n      this._attribute = name;\n    }\n  }]);\n\n  return Attribute;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Universal = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Universal, _Namespace);\n\n  function Universal(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.UNIVERSAL;\n    _this.value = '*';\n    return _this;\n  }\n\n  return Universal;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Universal;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Combinator = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Combinator, _Node);\n\n  function Combinator(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMBINATOR;\n    return _this;\n  }\n\n  return Combinator;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Combinator;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Nesting = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Nesting, _Node);\n\n  function Nesting(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.NESTING;\n    _this.value = '&';\n    return _this;\n  }\n\n  return Nesting;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Nesting;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = sortAscending;\n\nfunction sortAscending(list) {\n  return list.sort(function (a, b) {\n    return a - b;\n  });\n}\n\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.combinator = exports.word = exports.comment = exports.str = exports.tab = exports.newline = exports.feed = exports.cr = exports.backslash = exports.bang = exports.slash = exports.doubleQuote = exports.singleQuote = exports.space = exports.greaterThan = exports.pipe = exports.equals = exports.plus = exports.caret = exports.tilde = exports.dollar = exports.closeSquare = exports.openSquare = exports.closeParenthesis = exports.openParenthesis = exports.semicolon = exports.colon = exports.comma = exports.at = exports.asterisk = exports.ampersand = void 0;\nvar ampersand = 38; // `&`.charCodeAt(0);\n\nexports.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\n\nexports.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\n\nexports.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\n\nexports.comma = comma;\nvar colon = 58; // `:`.charCodeAt(0);\n\nexports.colon = colon;\nvar semicolon = 59; // `;`.charCodeAt(0);\n\nexports.semicolon = semicolon;\nvar openParenthesis = 40; // `(`.charCodeAt(0);\n\nexports.openParenthesis = openParenthesis;\nvar closeParenthesis = 41; // `)`.charCodeAt(0);\n\nexports.closeParenthesis = closeParenthesis;\nvar openSquare = 91; // `[`.charCodeAt(0);\n\nexports.openSquare = openSquare;\nvar closeSquare = 93; // `]`.charCodeAt(0);\n\nexports.closeSquare = closeSquare;\nvar dollar = 36; // `$`.charCodeAt(0);\n\nexports.dollar = dollar;\nvar tilde = 126; // `~`.charCodeAt(0);\n\nexports.tilde = tilde;\nvar caret = 94; // `^`.charCodeAt(0);\n\nexports.caret = caret;\nvar plus = 43; // `+`.charCodeAt(0);\n\nexports.plus = plus;\nvar equals = 61; // `=`.charCodeAt(0);\n\nexports.equals = equals;\nvar pipe = 124; // `|`.charCodeAt(0);\n\nexports.pipe = pipe;\nvar greaterThan = 62; // `>`.charCodeAt(0);\n\nexports.greaterThan = greaterThan;\nvar space = 32; // ` `.charCodeAt(0);\n\nexports.space = space;\nvar singleQuote = 39; // `'`.charCodeAt(0);\n\nexports.singleQuote = singleQuote;\nvar doubleQuote = 34; // `\"`.charCodeAt(0);\n\nexports.doubleQuote = doubleQuote;\nvar slash = 47; // `/`.charCodeAt(0);\n\nexports.slash = slash;\nvar bang = 33; // `!`.charCodeAt(0);\n\nexports.bang = bang;\nvar backslash = 92; // '\\\\'.charCodeAt(0);\n\nexports.backslash = backslash;\nvar cr = 13; // '\\r'.charCodeAt(0);\n\nexports.cr = cr;\nvar feed = 12; // '\\f'.charCodeAt(0);\n\nexports.feed = feed;\nvar newline = 10; // '\\n'.charCodeAt(0);\n\nexports.newline = newline;\nvar tab = 9; // '\\t'.charCodeAt(0);\n// Expose aliases primarily for readability.\n\nexports.tab = tab;\nvar str = singleQuote; // No good single character representation!\n\nexports.str = str;\nvar comment = -1;\nexports.comment = comment;\nvar word = -2;\nexports.word = word;\nvar combinator = -3;\nexports.combinator = combinator;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = tokenize;\nexports.FIELDS = void 0;\n\nvar t = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar _unescapable, _wordDelimiters;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);\nvar wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);\nvar hex = {};\nvar hexChars = \"0123456789abcdefABCDEF\";\n\nfor (var i = 0; i < hexChars.length; i++) {\n  hex[hexChars.charCodeAt(i)] = true;\n}\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word's first letter occurs\n */\n\n\nfunction consumeWord(css, start) {\n  var next = start;\n  var code;\n\n  do {\n    code = css.charCodeAt(next);\n\n    if (wordDelimiters[code]) {\n      return next - 1;\n    } else if (code === t.backslash) {\n      next = consumeEscape(css, next) + 1;\n    } else {\n      // All other characters are part of the word\n      next++;\n    }\n  } while (next < css.length);\n\n  return next - 1;\n}\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\n\n\nfunction consumeEscape(css, start) {\n  var next = start;\n  var code = css.charCodeAt(next + 1);\n\n  if (unescapable[code]) {// just consume the escape char\n  } else if (hex[code]) {\n    var hexDigits = 0; // consume up to 6 hex chars\n\n    do {\n      next++;\n      hexDigits++;\n      code = css.charCodeAt(next + 1);\n    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape\n\n\n    if (hexDigits < 6 && code === t.space) {\n      next++;\n    }\n  } else {\n    // the next char is part of the current word\n    next++;\n  }\n\n  return next;\n}\n\nvar FIELDS = {\n  TYPE: 0,\n  START_LINE: 1,\n  START_COL: 2,\n  END_LINE: 3,\n  END_COL: 4,\n  START_POS: 5,\n  END_POS: 6\n};\nexports.FIELDS = FIELDS;\n\nfunction tokenize(input) {\n  var tokens = [];\n  var css = input.css.valueOf();\n  var _css = css,\n      length = _css.length;\n  var offset = -1;\n  var line = 1;\n  var start = 0;\n  var end = 0;\n  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;\n\n  function unclosed(what, fix) {\n    if (input.safe) {\n      // fyi: this is never set to true.\n      css += fix;\n      next = css.length - 1;\n    } else {\n      throw input.error('Unclosed ' + what, line, start - offset, start);\n    }\n  }\n\n  while (start < length) {\n    code = css.charCodeAt(start);\n\n    if (code === t.newline) {\n      offset = start;\n      line += 1;\n    }\n\n    switch (code) {\n      case t.space:\n      case t.tab:\n      case t.newline:\n      case t.cr:\n      case t.feed:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n\n          if (code === t.newline) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n\n        tokenType = t.space;\n        endLine = line;\n        endColumn = next - offset - 1;\n        end = next;\n        break;\n\n      case t.plus:\n      case t.greaterThan:\n      case t.tilde:\n      case t.pipe:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n\n        tokenType = t.combinator;\n        endLine = line;\n        endColumn = start - offset;\n        end = next;\n        break;\n      // Consume these characters as single tokens.\n\n      case t.asterisk:\n      case t.ampersand:\n      case t.bang:\n      case t.comma:\n      case t.equals:\n      case t.dollar:\n      case t.caret:\n      case t.openSquare:\n      case t.closeSquare:\n      case t.colon:\n      case t.semicolon:\n      case t.openParenthesis:\n      case t.closeParenthesis:\n        next = start;\n        tokenType = code;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      case t.singleQuote:\n      case t.doubleQuote:\n        quote = code === t.singleQuote ? \"'\" : '\"';\n        next = start;\n\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n\n          if (next === -1) {\n            unclosed('quote', quote);\n          }\n\n          escapePos = next;\n\n          while (css.charCodeAt(escapePos - 1) === t.backslash) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n\n        tokenType = t.str;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      default:\n        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n          next = css.indexOf('*/', start + 2) + 1;\n\n          if (next === 0) {\n            unclosed('comment', '*/');\n          }\n\n          content = css.slice(start, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n\n          tokenType = t.comment;\n          line = nextLine;\n          endLine = nextLine;\n          endColumn = next - nextOffset;\n        } else if (code === t.slash) {\n          next = start;\n          tokenType = code;\n          endLine = line;\n          endColumn = start - offset;\n          end = next + 1;\n        } else {\n          next = consumeWord(css, start);\n          tokenType = t.word;\n          endLine = line;\n          endColumn = next - offset;\n        }\n\n        end = next + 1;\n        break;\n    } // Ensure that the token structure remains consistent\n\n\n    tokens.push([tokenType, // [0] Token type\n    line, // [1] Starting line\n    start - offset, // [2] Starting column\n    endLine, // [3] Ending line\n    endColumn, // [4] Ending column\n    start, // [5] Start position / Source index\n    end // [6] End position\n    ]); // Reset offset for the next token\n\n    if (nextOffset) {\n      offset = nextOffset;\n      nextOffset = null;\n    }\n\n    start = end;\n  }\n\n  return tokens;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _root = _interopRequireDefault(require(\"./selectors/root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selectors/selector\"));\n\nvar _className = _interopRequireDefault(require(\"./selectors/className\"));\n\nvar _comment = _interopRequireDefault(require(\"./selectors/comment\"));\n\nvar _id = _interopRequireDefault(require(\"./selectors/id\"));\n\nvar _tag = _interopRequireDefault(require(\"./selectors/tag\"));\n\nvar _string = _interopRequireDefault(require(\"./selectors/string\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./selectors/pseudo\"));\n\nvar _attribute = _interopRequireWildcard(require(\"./selectors/attribute\"));\n\nvar _universal = _interopRequireDefault(require(\"./selectors/universal\"));\n\nvar _combinator = _interopRequireDefault(require(\"./selectors/combinator\"));\n\nvar _nesting = _interopRequireDefault(require(\"./selectors/nesting\"));\n\nvar _sortAscending = _interopRequireDefault(require(\"./sortAscending\"));\n\nvar _tokenize = _interopRequireWildcard(require(\"./tokenize\"));\n\nvar tokens = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar types = _interopRequireWildcard(require(\"./selectors/types\"));\n\nvar _util = require(\"./util\");\n\nvar _WHITESPACE_TOKENS, _Object$assign;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);\nvar WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));\n\nfunction tokenStart(token) {\n  return {\n    line: token[_tokenize.FIELDS.START_LINE],\n    column: token[_tokenize.FIELDS.START_COL]\n  };\n}\n\nfunction tokenEnd(token) {\n  return {\n    line: token[_tokenize.FIELDS.END_LINE],\n    column: token[_tokenize.FIELDS.END_COL]\n  };\n}\n\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n}\n\nfunction getTokenSource(token) {\n  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);\n}\n\nfunction getTokenSourceSpan(startToken, endToken) {\n  if (!startToken) {\n    return undefined;\n  }\n\n  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);\n}\n\nfunction unescapeProp(node, prop) {\n  var value = node[prop];\n\n  if (typeof value !== \"string\") {\n    return;\n  }\n\n  if (value.indexOf(\"\\\\\") !== -1) {\n    (0, _util.ensureObject)(node, 'raws');\n    node[prop] = (0, _util.unesc)(value);\n\n    if (node.raws[prop] === undefined) {\n      node.raws[prop] = value;\n    }\n  }\n\n  return node;\n}\n\nfunction indexesOf(array, item) {\n  var i = -1;\n  var indexes = [];\n\n  while ((i = array.indexOf(item, i + 1)) !== -1) {\n    indexes.push(i);\n  }\n\n  return indexes;\n}\n\nfunction uniqs() {\n  var list = Array.prototype.concat.apply([], arguments);\n  return list.filter(function (item, i) {\n    return i === list.indexOf(item);\n  });\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.rule = rule;\n    this.options = Object.assign({\n      lossy: false,\n      safe: false\n    }, options);\n    this.position = 0;\n    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n    this.tokens = (0, _tokenize[\"default\"])({\n      css: this.css,\n      error: this._errorGenerator(),\n      safe: this.options.safe\n    });\n    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n    this.root = new _root[\"default\"]({\n      source: rootSource\n    });\n    this.root.errorGenerator = this._errorGenerator();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: {\n          line: 1,\n          column: 1\n        }\n      }\n    });\n    this.root.append(selector);\n    this.current = selector;\n    this.loop();\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto._errorGenerator = function _errorGenerator() {\n    var _this = this;\n\n    return function (message, errorOptions) {\n      if (typeof _this.rule === 'string') {\n        return new Error(message);\n      }\n\n      return _this.rule.error(message, errorOptions);\n    };\n  };\n\n  _proto.attribute = function attribute() {\n    var attr = [];\n    var startingToken = this.currToken;\n    this.position++;\n\n    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      attr.push(this.currToken);\n      this.position++;\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n\n    var len = attr.length;\n    var node = {\n      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n    };\n\n    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {\n      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);\n    }\n\n    var pos = 0;\n    var spaceBefore = '';\n    var commentBefore = '';\n    var lastAdded = null;\n    var spaceAfterMeaningfulToken = false;\n\n    while (pos < len) {\n      var token = attr[pos];\n      var content = this.content(token);\n      var next = attr[pos + 1];\n\n      switch (token[_tokenize.FIELDS.TYPE]) {\n        case tokens.space:\n          // if (\n          //     len === 1 ||\n          //     pos === 0 && this.content(next) === '|'\n          // ) {\n          //     return this.expected('attribute', token[TOKEN.START_POS], content);\n          // }\n          spaceAfterMeaningfulToken = true;\n\n          if (this.options.lossy) {\n            break;\n          }\n\n          if (lastAdded) {\n            (0, _util.ensureObject)(node, 'spaces', lastAdded);\n            var prevContent = node.spaces[lastAdded].after || '';\n            node.spaces[lastAdded].after = prevContent + content;\n            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;\n\n            if (existingComment) {\n              node.raws.spaces[lastAdded].after = existingComment + content;\n            }\n          } else {\n            spaceBefore = spaceBefore + content;\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        case tokens.asterisk:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = spaceBefore;\n              commentBefore = '';\n            }\n\n            node.namespace = (node.namespace || \"\") + content;\n            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;\n\n            if (rawValue) {\n              node.raws.namespace += content;\n            }\n\n            lastAdded = 'namespace';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.dollar:\n          if (lastAdded === \"value\") {\n            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');\n            node.value += \"$\";\n\n            if (oldRawValue) {\n              node.raws.value = oldRawValue + \"$\";\n            }\n\n            break;\n          }\n\n        // Falls through\n\n        case tokens.caret:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.combinator:\n          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          if (content !== '|') {\n            spaceAfterMeaningfulToken = false;\n            break;\n          }\n\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if (!node.namespace && !node.attribute) {\n            node.namespace = true;\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.word:\n          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.\n          !node.operator && !node.namespace) {\n            node.namespace = content;\n            lastAdded = 'namespace';\n          } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = commentBefore;\n              commentBefore = '';\n            }\n\n            node.attribute = (node.attribute || \"\") + content;\n\n            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;\n\n            if (_rawValue) {\n              node.raws.attribute += content;\n            }\n\n            lastAdded = 'attribute';\n          } else if (!node.value && node.value !== \"\" || lastAdded === \"value\" && !spaceAfterMeaningfulToken) {\n            var _unescaped = (0, _util.unesc)(content);\n\n            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';\n\n            var oldValue = node.value || '';\n            node.value = oldValue + _unescaped;\n            node.quoteMark = null;\n\n            if (_unescaped !== content || _oldRawValue) {\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws.value = (_oldRawValue || oldValue) + content;\n            }\n\n            lastAdded = 'value';\n          } else {\n            var insensitive = content === 'i' || content === \"I\";\n\n            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n              node.insensitive = insensitive;\n\n              if (!insensitive || content === \"I\") {\n                (0, _util.ensureObject)(node, 'raws');\n                node.raws.insensitiveFlag = content;\n              }\n\n              lastAdded = 'insensitive';\n\n              if (spaceBefore) {\n                (0, _util.ensureObject)(node, 'spaces', 'insensitive');\n                node.spaces.insensitive.before = spaceBefore;\n                spaceBefore = '';\n              }\n\n              if (commentBefore) {\n                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');\n                node.raws.spaces.insensitive.before = commentBefore;\n                commentBefore = '';\n              }\n            } else if (node.value || node.value === '') {\n              lastAdded = 'value';\n              node.value += content;\n\n              if (node.raws.value) {\n                node.raws.value += content;\n              }\n            }\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.str:\n          if (!node.attribute || !node.operator) {\n            return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          var _unescapeValue = (0, _attribute.unescapeValue)(content),\n              unescaped = _unescapeValue.unescaped,\n              quoteMark = _unescapeValue.quoteMark;\n\n          node.value = unescaped;\n          node.quoteMark = quoteMark;\n          lastAdded = 'value';\n          (0, _util.ensureObject)(node, 'raws');\n          node.raws.value = content;\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.equals:\n          if (!node.attribute) {\n            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);\n          }\n\n          if (node.value) {\n            return this.error('Unexpected \"=\" found; an operator was already defined.', {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          node.operator = node.operator ? node.operator + content : content;\n          lastAdded = 'operator';\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.comment:\n          if (lastAdded) {\n            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {\n              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';\n              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);\n              node.raws.spaces[lastAdded].after = rawLastComment + content;\n            } else {\n              var lastValue = node[lastAdded] || '';\n              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws[lastAdded] = rawLastValue + content;\n            }\n          } else {\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        default:\n          return this.error(\"Unexpected \\\"\" + content + \"\\\" found.\", {\n            index: token[_tokenize.FIELDS.START_POS]\n          });\n      }\n\n      pos++;\n    }\n\n    unescapeProp(node, \"attribute\");\n    unescapeProp(node, \"namespace\");\n    this.newNode(new _attribute[\"default\"](node));\n    this.position++;\n  }\n  /**\n   * return a node containing meaningless garbage up to (but not including) the specified token position.\n   * if the token position is negative, all remaining tokens are consumed.\n   *\n   * This returns an array containing a single string node if all whitespace,\n   * otherwise an array of comment nodes with space before and after.\n   *\n   * These tokens are not added to the current selector, the caller can add them or use them to amend\n   * a previous node's space metadata.\n   *\n   * In lossy mode, this returns only comments.\n   */\n  ;\n\n  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {\n    if (stopPosition < 0) {\n      stopPosition = this.tokens.length;\n    }\n\n    var startPosition = this.position;\n    var nodes = [];\n    var space = \"\";\n    var lastComment = undefined;\n\n    do {\n      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n        if (!this.options.lossy) {\n          space += this.content();\n        }\n      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {\n        var spaces = {};\n\n        if (space) {\n          spaces.before = space;\n          space = \"\";\n        }\n\n        lastComment = new _comment[\"default\"]({\n          value: this.content(),\n          source: getTokenSource(this.currToken),\n          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n          spaces: spaces\n        });\n        nodes.push(lastComment);\n      }\n    } while (++this.position < stopPosition);\n\n    if (space) {\n      if (lastComment) {\n        lastComment.spaces.after = space;\n      } else if (!this.options.lossy) {\n        var firstToken = this.tokens[startPosition];\n        var lastToken = this.tokens[this.position - 1];\n        nodes.push(new _string[\"default\"]({\n          value: '',\n          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),\n          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n          spaces: {\n            before: space,\n            after: ''\n          }\n        }));\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * \n   * @param {*} nodes \n   */\n  ;\n\n  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {\n    var _this2 = this;\n\n    if (requiredSpace === void 0) {\n      requiredSpace = false;\n    }\n\n    var space = \"\";\n    var rawSpace = \"\";\n    nodes.forEach(function (n) {\n      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);\n\n      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);\n\n      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n    });\n\n    if (rawSpace === space) {\n      rawSpace = undefined;\n    }\n\n    var result = {\n      space: space,\n      rawSpace: rawSpace\n    };\n    return result;\n  };\n\n  _proto.isNamedCombinator = function isNamedCombinator(position) {\n    if (position === void 0) {\n      position = this.position;\n    }\n\n    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;\n  };\n\n  _proto.namedCombinator = function namedCombinator() {\n    if (this.isNamedCombinator()) {\n      var nameRaw = this.content(this.tokens[this.position + 1]);\n      var name = (0, _util.unesc)(nameRaw).toLowerCase();\n      var raws = {};\n\n      if (name !== nameRaw) {\n        raws.value = \"/\" + nameRaw + \"/\";\n      }\n\n      var node = new _combinator[\"default\"]({\n        value: \"/\" + name + \"/\",\n        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n        raws: raws\n      });\n      this.position = this.position + 3;\n      return node;\n    } else {\n      this.unexpected();\n    }\n  };\n\n  _proto.combinator = function combinator() {\n    var _this3 = this;\n\n    if (this.content() === '|') {\n      return this.namespace();\n    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n\n\n    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n\n    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {\n      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n\n      if (nodes.length > 0) {\n        var last = this.current.last;\n\n        if (last) {\n          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),\n              space = _this$convertWhitespa.space,\n              rawSpace = _this$convertWhitespa.rawSpace;\n\n          if (rawSpace !== undefined) {\n            last.rawSpaceAfter += rawSpace;\n          }\n\n          last.spaces.after += space;\n        } else {\n          nodes.forEach(function (n) {\n            return _this3.newNode(n);\n          });\n        }\n      }\n\n      return;\n    }\n\n    var firstToken = this.currToken;\n    var spaceOrDescendantSelectorNodes = undefined;\n\n    if (nextSigTokenPos > this.position) {\n      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n    }\n\n    var node;\n\n    if (this.isNamedCombinator()) {\n      node = this.namedCombinator();\n    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n      node = new _combinator[\"default\"]({\n        value: this.content(),\n        source: getTokenSource(this.currToken),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n      });\n      this.position++;\n    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {// pass\n    } else if (!spaceOrDescendantSelectorNodes) {\n      this.unexpected();\n    }\n\n    if (node) {\n      if (spaceOrDescendantSelectorNodes) {\n        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),\n            _space = _this$convertWhitespa2.space,\n            _rawSpace = _this$convertWhitespa2.rawSpace;\n\n        node.spaces.before = _space;\n        node.rawSpaceBefore = _rawSpace;\n      }\n    } else {\n      // descendant combinator\n      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),\n          _space2 = _this$convertWhitespa3.space,\n          _rawSpace2 = _this$convertWhitespa3.rawSpace;\n\n      if (!_rawSpace2) {\n        _rawSpace2 = _space2;\n      }\n\n      var spaces = {};\n      var raws = {\n        spaces: {}\n      };\n\n      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {\n        spaces.before = _space2.slice(0, _space2.length - 1);\n        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);\n      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {\n        spaces.after = _space2.slice(1);\n        raws.spaces.after = _rawSpace2.slice(1);\n      } else {\n        raws.value = _rawSpace2;\n      }\n\n      node = new _combinator[\"default\"]({\n        value: ' ',\n        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n        spaces: spaces,\n        raws: raws\n      });\n    }\n\n    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {\n      node.spaces.after = this.optionalSpace(this.content());\n      this.position++;\n    }\n\n    return this.newNode(node);\n  };\n\n  _proto.comma = function comma() {\n    if (this.position === this.tokens.length - 1) {\n      this.root.trailingComma = true;\n      this.position++;\n      return;\n    }\n\n    this.current._inferEndPosition();\n\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: tokenStart(this.tokens[this.position + 1])\n      }\n    });\n    this.current.parent.append(selector);\n    this.current = selector;\n    this.position++;\n  };\n\n  _proto.comment = function comment() {\n    var current = this.currToken;\n    this.newNode(new _comment[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.error = function error(message, opts) {\n    throw this.root.error(message, opts);\n  };\n\n  _proto.missingBackslash = function missingBackslash() {\n    return this.error('Expected a backslash preceding the semicolon.', {\n      index: this.currToken[_tokenize.FIELDS.START_POS]\n    });\n  };\n\n  _proto.missingParenthesis = function missingParenthesis() {\n    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.missingSquareBracket = function missingSquareBracket() {\n    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.unexpected = function unexpected() {\n    return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.namespace = function namespace() {\n    var before = this.prevToken && this.content(this.prevToken) || true;\n\n    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.position++;\n      return this.word(before);\n    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {\n      this.position++;\n      return this.universal(before);\n    }\n  };\n\n  _proto.nesting = function nesting() {\n    if (this.nextToken) {\n      var nextContent = this.content(this.nextToken);\n\n      if (nextContent === \"|\") {\n        this.position++;\n        return;\n      }\n    }\n\n    var current = this.currToken;\n    this.newNode(new _nesting[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.parentheses = function parentheses() {\n    var last = this.current.last;\n    var unbalanced = 1;\n    this.position++;\n\n    if (last && last.type === types.PSEUDO) {\n      var selector = new _selector[\"default\"]({\n        source: {\n          start: tokenStart(this.tokens[this.position - 1])\n        }\n      });\n      var cache = this.current;\n      last.append(selector);\n      this.current = selector;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        if (unbalanced) {\n          this.parse();\n        } else {\n          this.current.source.end = tokenEnd(this.currToken);\n          this.current.parent.source.end = tokenEnd(this.currToken);\n          this.position++;\n        }\n      }\n\n      this.current = cache;\n    } else {\n      // I think this case should be an error. It's used to implement a basic parse of media queries\n      // but I don't think it's a good idea.\n      var parenStart = this.currToken;\n      var parenValue = \"(\";\n      var parenEnd;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        parenEnd = this.currToken;\n        parenValue += this.parseParenthesisToken(this.currToken);\n        this.position++;\n      }\n\n      if (last) {\n        last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n      } else {\n        this.newNode(new _string[\"default\"]({\n          value: parenValue,\n          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),\n          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]\n        }));\n      }\n    }\n\n    if (unbalanced) {\n      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.pseudo = function pseudo() {\n    var _this4 = this;\n\n    var pseudoStr = '';\n    var startingToken = this.currToken;\n\n    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {\n      pseudoStr += this.content();\n      this.position++;\n    }\n\n    if (!this.currToken) {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.splitWord(false, function (first, length) {\n        pseudoStr += first;\n\n        _this4.newNode(new _pseudo[\"default\"]({\n          value: pseudoStr,\n          source: getTokenSourceSpan(startingToken, _this4.currToken),\n          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n        }));\n\n        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          _this4.error('Misplaced parenthesis.', {\n            index: _this4.nextToken[_tokenize.FIELDS.START_POS]\n          });\n        }\n      });\n    } else {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.space = function space() {\n    var content = this.content(); // Handle space before and after the selector\n\n    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {\n      return node.type === 'comment';\n    })) {\n      this.spaces = this.optionalSpace(content);\n      this.position++;\n    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      this.current.last.spaces.after = this.optionalSpace(content);\n      this.position++;\n    } else {\n      this.combinator();\n    }\n  };\n\n  _proto.string = function string() {\n    var current = this.currToken;\n    this.newNode(new _string[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.universal = function universal(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    var current = this.currToken;\n    this.newNode(new _universal[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }), namespace);\n    this.position++;\n  };\n\n  _proto.splitWord = function splitWord(namespace, firstCallback) {\n    var _this5 = this;\n\n    var nextToken = this.nextToken;\n    var word = this.content();\n\n    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {\n      this.position++;\n      var current = this.content();\n      word += current;\n\n      if (current.lastIndexOf('\\\\') === current.length - 1) {\n        var next = this.nextToken;\n\n        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {\n          word += this.requiredSpace(this.content(next));\n          this.position++;\n        }\n      }\n\n      nextToken = this.nextToken;\n    }\n\n    var hasClass = indexesOf(word, '.').filter(function (i) {\n      // Allow escaped dot within class name\n      var escapedDot = word[i - 1] === '\\\\'; // Allow decimal numbers percent in @keyframes\n\n      var isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n      return !escapedDot && !isKeyframesPercent;\n    });\n    var hasId = indexesOf(word, '#').filter(function (i) {\n      return word[i - 1] !== '\\\\';\n    }); // Eliminate Sass interpolations from the list of id indexes\n\n    var interpolations = indexesOf(word, '#{');\n\n    if (interpolations.length) {\n      hasId = hasId.filter(function (hashIndex) {\n        return !~interpolations.indexOf(hashIndex);\n      });\n    }\n\n    var indices = (0, _sortAscending[\"default\"])(uniqs([0].concat(hasClass, hasId)));\n    indices.forEach(function (ind, i) {\n      var index = indices[i + 1] || word.length;\n      var value = word.slice(ind, index);\n\n      if (i === 0 && firstCallback) {\n        return firstCallback.call(_this5, value, indices.length);\n      }\n\n      var node;\n      var current = _this5.currToken;\n      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];\n      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n\n      if (~hasClass.indexOf(ind)) {\n        var classNameOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n      } else if (~hasId.indexOf(ind)) {\n        var idOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n      } else {\n        var tagOpts = {\n          value: value,\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        unescapeProp(tagOpts, \"value\");\n        node = new _tag[\"default\"](tagOpts);\n      }\n\n      _this5.newNode(node, namespace); // Ensure that the namespace is used only once\n\n\n      namespace = null;\n    });\n    this.position++;\n  };\n\n  _proto.word = function word(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    return this.splitWord(namespace);\n  };\n\n  _proto.loop = function loop() {\n    while (this.position < this.tokens.length) {\n      this.parse(true);\n    }\n\n    this.current._inferEndPosition();\n\n    return this.root;\n  };\n\n  _proto.parse = function parse(throwOnParenthesis) {\n    switch (this.currToken[_tokenize.FIELDS.TYPE]) {\n      case tokens.space:\n        this.space();\n        break;\n\n      case tokens.comment:\n        this.comment();\n        break;\n\n      case tokens.openParenthesis:\n        this.parentheses();\n        break;\n\n      case tokens.closeParenthesis:\n        if (throwOnParenthesis) {\n          this.missingParenthesis();\n        }\n\n        break;\n\n      case tokens.openSquare:\n        this.attribute();\n        break;\n\n      case tokens.dollar:\n      case tokens.caret:\n      case tokens.equals:\n      case tokens.word:\n        this.word();\n        break;\n\n      case tokens.colon:\n        this.pseudo();\n        break;\n\n      case tokens.comma:\n        this.comma();\n        break;\n\n      case tokens.asterisk:\n        this.universal();\n        break;\n\n      case tokens.ampersand:\n        this.nesting();\n        break;\n\n      case tokens.slash:\n      case tokens.combinator:\n        this.combinator();\n        break;\n\n      case tokens.str:\n        this.string();\n        break;\n      // These cases throw; no break needed.\n\n      case tokens.closeSquare:\n        this.missingSquareBracket();\n\n      case tokens.semicolon:\n        this.missingBackslash();\n\n      default:\n        this.unexpected();\n    }\n  }\n  /**\n   * Helpers\n   */\n  ;\n\n  _proto.expected = function expected(description, index, found) {\n    if (Array.isArray(description)) {\n      var last = description.pop();\n      description = description.join(', ') + \" or \" + last;\n    }\n\n    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n\n    if (!found) {\n      return this.error(\"Expected \" + an + \" \" + description + \".\", {\n        index: index\n      });\n    }\n\n    return this.error(\"Expected \" + an + \" \" + description + \", found \\\"\" + found + \"\\\" instead.\", {\n      index: index\n    });\n  };\n\n  _proto.requiredSpace = function requiredSpace(space) {\n    return this.options.lossy ? ' ' : space;\n  };\n\n  _proto.optionalSpace = function optionalSpace(space) {\n    return this.options.lossy ? '' : space;\n  };\n\n  _proto.lossySpace = function lossySpace(space, required) {\n    if (this.options.lossy) {\n      return required ? ' ' : '';\n    } else {\n      return space;\n    }\n  };\n\n  _proto.parseParenthesisToken = function parseParenthesisToken(token) {\n    var content = this.content(token);\n\n    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {\n      return this.requiredSpace(content);\n    } else {\n      return content;\n    }\n  };\n\n  _proto.newNode = function newNode(node, namespace) {\n    if (namespace) {\n      if (/^ +$/.test(namespace)) {\n        if (!this.options.lossy) {\n          this.spaces = (this.spaces || '') + namespace;\n        }\n\n        namespace = true;\n      }\n\n      node.namespace = namespace;\n      unescapeProp(node, \"namespace\");\n    }\n\n    if (this.spaces) {\n      node.spaces.before = this.spaces;\n      this.spaces = '';\n    }\n\n    return this.current.append(node);\n  };\n\n  _proto.content = function content(token) {\n    if (token === void 0) {\n      token = this.currToken;\n    }\n\n    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);\n  };\n\n  /**\n   * returns the index of the next non-whitespace, non-comment token.\n   * returns -1 if no meaningful token is found.\n   */\n  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = this.position + 1;\n    }\n\n    var searchPosition = startPosition;\n\n    while (searchPosition < this.tokens.length) {\n      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {\n        searchPosition++;\n        continue;\n      } else {\n        return searchPosition;\n      }\n    }\n\n    return -1;\n  };\n\n  _createClass(Parser, [{\n    key: \"currToken\",\n    get: function get() {\n      return this.tokens[this.position];\n    }\n  }, {\n    key: \"nextToken\",\n    get: function get() {\n      return this.tokens[this.position + 1];\n    }\n  }, {\n    key: \"prevToken\",\n    get: function get() {\n      return this.tokens[this.position - 1];\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports[\"default\"] = Parser;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;\n\nvar _attribute = _interopRequireDefault(require(\"./attribute\"));\n\nvar _className = _interopRequireDefault(require(\"./className\"));\n\nvar _combinator = _interopRequireDefault(require(\"./combinator\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _id = _interopRequireDefault(require(\"./id\"));\n\nvar _nesting = _interopRequireDefault(require(\"./nesting\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./pseudo\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selector\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _tag = _interopRequireDefault(require(\"./tag\"));\n\nvar _universal = _interopRequireDefault(require(\"./universal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar attribute = function attribute(opts) {\n  return new _attribute[\"default\"](opts);\n};\n\nexports.attribute = attribute;\n\nvar className = function className(opts) {\n  return new _className[\"default\"](opts);\n};\n\nexports.className = className;\n\nvar combinator = function combinator(opts) {\n  return new _combinator[\"default\"](opts);\n};\n\nexports.combinator = combinator;\n\nvar comment = function comment(opts) {\n  return new _comment[\"default\"](opts);\n};\n\nexports.comment = comment;\n\nvar id = function id(opts) {\n  return new _id[\"default\"](opts);\n};\n\nexports.id = id;\n\nvar nesting = function nesting(opts) {\n  return new _nesting[\"default\"](opts);\n};\n\nexports.nesting = nesting;\n\nvar pseudo = function pseudo(opts) {\n  return new _pseudo[\"default\"](opts);\n};\n\nexports.pseudo = pseudo;\n\nvar root = function root(opts) {\n  return new _root[\"default\"](opts);\n};\n\nexports.root = root;\n\nvar selector = function selector(opts) {\n  return new _selector[\"default\"](opts);\n};\n\nexports.selector = selector;\n\nvar string = function string(opts) {\n  return new _string[\"default\"](opts);\n};\n\nexports.string = string;\n\nvar tag = function tag(opts) {\n  return new _tag[\"default\"](opts);\n};\n\nexports.tag = tag;\n\nvar universal = function universal(opts) {\n  return new _universal[\"default\"](opts);\n};\n\nexports.universal = universal;","\"use strict\";\n\nexports.__esModule = true;\nexports.isNode = isNode;\nexports.isPseudoElement = isPseudoElement;\nexports.isPseudoClass = isPseudoClass;\nexports.isContainer = isContainer;\nexports.isNamespace = isNamespace;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;\n\nvar _types = require(\"./types\");\n\nvar _IS_TYPE;\n\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\n\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\n\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n}\n\nvar isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nexports.isAttribute = isAttribute;\nvar isClassName = isNodeType.bind(null, _types.CLASS);\nexports.isClassName = isClassName;\nvar isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nexports.isCombinator = isCombinator;\nvar isComment = isNodeType.bind(null, _types.COMMENT);\nexports.isComment = isComment;\nvar isIdentifier = isNodeType.bind(null, _types.ID);\nexports.isIdentifier = isIdentifier;\nvar isNesting = isNodeType.bind(null, _types.NESTING);\nexports.isNesting = isNesting;\nvar isPseudo = isNodeType.bind(null, _types.PSEUDO);\nexports.isPseudo = isPseudo;\nvar isRoot = isNodeType.bind(null, _types.ROOT);\nexports.isRoot = isRoot;\nvar isSelector = isNodeType.bind(null, _types.SELECTOR);\nexports.isSelector = isSelector;\nvar isString = isNodeType.bind(null, _types.STRING);\nexports.isString = isString;\nvar isTag = isNodeType.bind(null, _types.TAG);\nexports.isTag = isTag;\nvar isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\nexports.isUniversal = isUniversal;\n\nfunction isPseudoElement(node) {\n  return isPseudo(node) && node.value && (node.value.startsWith(\"::\") || node.value.toLowerCase() === \":before\" || node.value.toLowerCase() === \":after\" || node.value.toLowerCase() === \":first-letter\" || node.value.toLowerCase() === \":first-line\");\n}\n\nfunction isPseudoClass(node) {\n  return isPseudo(node) && !isPseudoElement(node);\n}\n\nfunction isContainer(node) {\n  return !!(isNode(node) && node.walk);\n}\n\nfunction isNamespace(node) {\n  return isAttribute(node) || isTag(node);\n}","\"use strict\";\n\nexports.__esModule = true;\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\n\nvar _constructors = require(\"./constructors\");\n\nObject.keys(_constructors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _constructors[key]) return;\n  exports[key] = _constructors[key];\n});\n\nvar _guards = require(\"./guards\");\n\nObject.keys(_guards).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _guards[key]) return;\n  exports[key] = _guards[key];\n});","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar selectors = _interopRequireWildcard(require(\"./selectors\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parser = function parser(processor) {\n  return new _processor[\"default\"](processor);\n};\n\nObject.assign(parser, selectors);\ndelete parser.__esModule;\nvar _default = parser;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Rule} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function transformSelector(result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(node, { updateSelector: true });\n\t} catch {\n\t\tresult.warn('Cannot parse selector', { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-selector-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, fixedSelector) => `Expected \"${selector}\" to be \"${fixedSelector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-selector-notation',\n\tfixable: true,\n};\n\nconst PERCENTAGE_SELECTORS = new Set(['0%', '100%']);\nconst KEYWORD_SELECTORS = new Set(['from', 'to']);\nconst PERCENTAGE_TO_KEYWORD = new Map([\n\t['0%', 'from'],\n\t['100%', 'to'],\n]);\nconst KEYWORD_TO_PERCENTAGE = new Map([\n\t['from', '0%'],\n\t['to', '100%'],\n]);\n\n/** @type {import('stylelint').Rule<'keyword' | 'percentage' | 'percentage-unless-within-keyword-only-block'>} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['keyword', 'percentage', 'percentage-unless-within-keyword-only-block'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @typedef {{\n\t\t *   expFunc: (selector: string, selectorsInBlock: string[]) => boolean,\n\t\t *   fixFunc: (selector: string) => string,\n\t\t * }} OptionFuncs\n\t\t *\n\t\t * @type {Record<primary, OptionFuncs>}\n\t\t */\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tkeyword: {\n\t\t\t\texpFunc: (selector) => KEYWORD_SELECTORS.has(selector),\n\t\t\t\tfixFunc: (selector) => getFromMap(PERCENTAGE_TO_KEYWORD, selector),\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: (selector) => PERCENTAGE_SELECTORS.has(selector),\n\t\t\t\tfixFunc: (selector) => getFromMap(KEYWORD_TO_PERCENTAGE, selector),\n\t\t\t},\n\t\t\t'percentage-unless-within-keyword-only-block': {\n\t\t\t\texpFunc: (selector, selectorsInBlock) => {\n\t\t\t\t\tif (selectorsInBlock.every((s) => KEYWORD_SELECTORS.has(s))) return true;\n\n\t\t\t\t\treturn PERCENTAGE_SELECTORS.has(selector);\n\t\t\t\t},\n\t\t\t\tfixFunc: (selector) => getFromMap(KEYWORD_TO_PERCENTAGE, selector),\n\t\t\t},\n\t\t});\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectorsInBlock =\n\t\t\t\tprimary === 'percentage-unless-within-keyword-only-block'\n\t\t\t\t\t? getSelectorsInBlock(atRuleKeyframes)\n\t\t\t\t\t: [];\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\ttransformSelector(result, keyframeRule, (selectors) => {\n\t\t\t\t\tselectors.walkTags((selectorTag) => {\n\t\t\t\t\t\tcheckSelector(\n\t\t\t\t\t\t\tselectorTag.value,\n\t\t\t\t\t\t\toptionFuncs[primary],\n\t\t\t\t\t\t\t(fixedSelector) => (selectorTag.value = fixedSelector),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * @param {string} selector\n\t\t\t\t * @param {OptionFuncs} funcs\n\t\t\t\t * @param {(fixedSelector: string) => void} fixer\n\t\t\t\t */\n\t\t\t\tfunction checkSelector(selector, { expFunc, fixFunc }, fixer) {\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!KEYWORD_SELECTORS.has(normalizedSelector) &&\n\t\t\t\t\t\t!PERCENTAGE_SELECTORS.has(normalizedSelector)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (expFunc(selector, selectorsInBlock)) return;\n\n\t\t\t\t\tconst fixedSelector = fixFunc(selector);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixer(fixedSelector);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(selector, fixedSelector),\n\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {Map<string, string>} map\n * @param {string} key\n * @returns {string}\n */\nfunction getFromMap(map, key) {\n\tconst value = map.get(key);\n\n\tassertString(value);\n\n\treturn value;\n}\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string[]}\n */\nfunction getSelectorsInBlock(atRule) {\n\t/** @type {string[]} */\n\tconst selectors = [];\n\n\tatRule.walkRules((r) => {\n\t\tselectors.push(...r.selectors);\n\t});\n\n\treturn selectors;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { URL } = require('url');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\nmodule.exports = function getSchemeFromUrl(urlString) {\n\tlet protocol = null;\n\n\ttry {\n\t\tprotocol = new URL(urlString).protocol;\n\t} catch {\n\t\treturn null;\n\t}\n\n\tif (protocol === null || typeof protocol === 'undefined') {\n\t\treturn null;\n\t}\n\n\tconst scheme = protocol.slice(0, -1); // strip trailing `:`\n\n\t// The URL spec does not require a scheme to be followed by `//`, but checking\n\t// for it allows this rule to differentiate <scheme>:<hostname> urls from\n\t// <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\tconst slashIndex = protocol.length;\n\tconst expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n\tconst isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n\tif (isSchemeLessUrl) {\n\t\treturn null;\n\t}\n\n\treturn scheme;\n};\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-scheme-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.between !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst spaceIndex = statementRaws.between.search(/\\s+$/);\n\n\t\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\t\tstatement.raws.between =\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(spaceIndex);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatementRaws.between += context.newline;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.between = statementRaws.between.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst { fontFamilyKeywords } = require('../../reference/keywords');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (family) => `Expected quotes around \"${family}\"`,\n\trejected: (family) => `Unexpected quotes around \"${family}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-family-name-quotes',\n\tfixable: true,\n};\n\n/**\n * @param {string} font\n * @returns {boolean}\n */\nfunction isSystemFontKeyword(font) {\n\tif (font.startsWith('-apple-')) {\n\t\treturn true;\n\t}\n\n\tif (font === 'BlinkMacSystemFont') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * \"To avoid mistakes in escaping, it is recommended to quote font family names\n * that contain white space, digits, or punctuation characters other than hyphens\"\n * (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRecommended(family) {\n\treturn !/^[-a-zA-Z]+$/.test(family);\n}\n\n/**\n * Quotes are required if the family is not a valid CSS identifier\n * (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRequired(family) {\n\treturn family\n\t\t.split(/\\s+/)\n\t\t.some((word) => /^(?:-?\\d|--)/.test(word) || !/^[-\\w\\u{00A0}-\\u{10FFFF}]+$/u.test(word));\n}\n\n/**\n * @typedef {{\n *   name: string,\n *   rawName: string,\n *   hasQuotes: boolean,\n *   sourceIndex: number,\n *   resetIndexes: (offset: number) => void,\n *   removeQuotes: () => void,\n *   addQuotes: () => void,\n * }} MutableNode\n */\n\n/**\n *\n * @param {import('postcss-value-parser').Node[]} fontFamilies\n * @param {import('postcss').Declaration} decl\n * @returns {MutableNode[]}\n */\nconst makeMutableFontFamilies = (fontFamilies, decl) => {\n\t/**\n\t * @type {MutableNode[]}\n\t */\n\tconst mutableNodes = [];\n\n\tfontFamilies.forEach((fontFamily, idx) => {\n\t\tconst quote = 'quote' in fontFamily && fontFamily.quote;\n\t\tconst name = fontFamily.value;\n\n\t\t/** @type {MutableNode} */\n\t\tconst newNode = {\n\t\t\tname,\n\t\t\trawName: quote ? `${quote}${name}${quote}` : name,\n\t\t\tsourceIndex: fontFamily.sourceIndex,\n\t\t\thasQuotes: Boolean(quote),\n\t\t\tresetIndexes(offset) {\n\t\t\t\tmutableNodes.slice(idx + 1).forEach((n) => (n.sourceIndex += offset));\n\t\t\t},\n\t\t\tremoveQuotes() {\n\t\t\t\tif (this.hasQuotes === false) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length + 2;\n\n\t\t\t\tthis.hasQuotes = false;\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + this.name + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(-2);\n\t\t\t},\n\t\t\taddQuotes() {\n\t\t\t\tif (this.hasQuotes === true) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length;\n\n\t\t\t\tthis.hasQuotes = true;\n\t\t\t\tconst fixedName = `\"${this.name}\"`;\n\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + fixedName + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(2);\n\t\t\t},\n\t\t};\n\n\t\tmutableNodes.push(newNode);\n\t});\n\n\treturn mutableNodes;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tif (!isStandardSyntaxValue(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fontFamilyNodes = makeMutableFontFamilies(findFontFamily(decl.value), decl);\n\n\t\t\tif (fontFamilyNodes.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilyNodes) {\n\t\t\t\tcheckFamilyName(fontFamilyNode, decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {MutableNode} fontFamilyNode\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFamilyName(fontFamilyNode, decl) {\n\t\t\tconst { name: family, rawName: rawFamily, hasQuotes } = fontFamilyNode;\n\n\t\t\tif (isVariable(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Disallow quotes around (case-insensitive) keywords\n\t\t\t// and system font keywords in all cases\n\t\t\tif (fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst required = quotesRequired(family);\n\t\t\tconst recommended = quotesRecommended(family);\n\n\t\t\tswitch (primary) {\n\t\t\t\tcase 'always-unless-keyword':\n\t\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-recommended':\n\t\t\t\t\tif (!recommended && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recommended && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-required':\n\t\t\t\t\tif (!required && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (required && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {string} family\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, family, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tword: family,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-no-scheme-relative';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected scheme-relative url',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-no-scheme-relative',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst url = args.trim().replace(/^['\"]+|['\"]+$/g, '');\n\n\t\t\t\tif (!isStandardSyntaxUrl(url) || !url.startsWith('//')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a selector is standard\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxSelector(selector) {\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(selector)) {\n\t\treturn false;\n\t}\n\n\t// SCSS placeholder selectors\n\tif (selector.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// SCSS nested properties\n\tif (selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\t// Less :extend()\n\tif (/:extend(?:\\(.*?\\))?/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less mixin with resolved nested selectors (e.g. .foo().bar or .foo(@a, @b)[bar])\n\tif (/\\.[\\w-]+\\(.*\\).+/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less non-outputting mixin definition (e.g. .mixin() {})\n\tif (selector.endsWith(')') && !selector.includes(':')) {\n\t\treturn false;\n\t}\n\n\t// Less Parametric mixins (e.g. .mixin(@variable: x) {})\n\tif (/\\(@.*\\)$/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// ERB template tags\n\tif (selector.includes('<%') || selector.includes('%>')) {\n\t\treturn false;\n\t}\n\n\t//  SCSS and Less comments\n\tif (selector.includes('//')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframe-block-no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected duplicate \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-block-no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectors = new Set();\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\tconst ruleSelectors = keyframeRule.selectors;\n\n\t\t\t\truleSelectors.forEach((selector) => {\n\t\t\t\t\tif (!isStandardSyntaxSelector(selector)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tconst isDuplicate = selectors.has(normalizedSelector);\n\n\t\t\t\t\tif (isDuplicate) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectors.add(normalizedSelector);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframe-declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tatRuleKeyframes.walkDecls((decl) => {\n\t\t\t\tif (!decl.important) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\t\tassert(pos);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: pos.index,\n\t\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'linebreaks';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (linebreak) => `Expected linebreak to be ${linebreak}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/linebreaks',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['unix', 'windows'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldHaveCR = primary === 'windows';\n\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif ('selector' in node) {\n\t\t\t\t\tnode.selector = fixData(node.selector);\n\t\t\t\t}\n\n\t\t\t\tif ('value' in node) {\n\t\t\t\t\tnode.value = fixData(node.value);\n\t\t\t\t}\n\n\t\t\t\tif ('text' in node) {\n\t\t\t\t\tnode.text = fixData(node.text);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = fixData(node.raws.before);\n\t\t\t\t}\n\n\t\t\t\tif (typeof node.raws.after === 'string') {\n\t\t\t\t\tnode.raws.after = fixData(node.raws.after);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (typeof root.raws.after === 'string') {\n\t\t\t\troot.raws.after = fixData(root.raws.after);\n\t\t\t}\n\t\t} else {\n\t\t\tif (root.source == null) throw new Error('The root node must have a source');\n\n\t\t\tconst lines = root.source.input.css.split('\\n');\n\n\t\t\tfor (let [i, line] of lines.entries()) {\n\t\t\t\tif (i < lines.length - 1 && !line.includes('\\r')) {\n\t\t\t\t\tline += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (hasError(line)) {\n\t\t\t\t\tconst lineNum = i + 1;\n\t\t\t\t\tconst colNum = line.length;\n\n\t\t\t\t\treportNewlineError(lineNum, colNum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} dataToCheck\n\t\t */\n\t\tfunction hasError(dataToCheck) {\n\t\t\tconst hasNewlineToVerify = /[\\r\\n]/.test(dataToCheck);\n\t\t\tconst hasCR = hasNewlineToVerify ? /\\r/.test(dataToCheck) : false;\n\n\t\t\treturn hasNewlineToVerify && hasCR !== shouldHaveCR;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} data\n\t\t */\n\t\tfunction fixData(data) {\n\t\t\tif (data) {\n\t\t\t\tlet res = data.replace(/\\r/g, '');\n\n\t\t\t\tif (shouldHaveCR) {\n\t\t\t\t\tres = res.replace(/\\n/g, '\\r\\n');\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\n\t\t * @param {number} line\n\t\t * @param {number} column\n\t\t */\n\t\tfunction reportNewlineError(line, column) {\n\t\t\t// Creating a node manually helps us to point to empty lines.\n\t\t\tconst node = postcss.rule({\n\t\t\t\tsource: {\n\t\t\t\t\tstart: { line, column, offset: 0 },\n\t\t\t\t\tinput: new postcss.Input(''),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isStandardSyntaxKeyframesName = require('../../utils/isStandardSyntaxKeyframesName');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframes-name-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (keyframeName, pattern) => `Expected \"${keyframeName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/keyframes-name-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regex = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules(/keyframes/i, (keyframesNode) => {\n\t\t\tconst value = keyframesNode.params;\n\n\t\t\tif (!isStandardSyntaxKeyframesName(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (regex.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(keyframesNode);\n\t\t\tconst endIndex = index + value.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [value, primary],\n\t\t\t\tnode: keyframesNode,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('./hasInterpolation');\n\n/**\n * Check whether a keyframes name is standard\n *\n * @param {string} keyframesName\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxKeyframesName(keyframesName) {\n\tif (hasInterpolation(keyframesName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxRule(rule) {\n\tif (rule.type !== 'rule') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less &:extend rule\n\tif ('extend' in rule && rule.extend) {\n\t\treturn false;\n\t}\n\n\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parser = require('postcss-selector-parser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-nesting-depth';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (depth) => `Expected nesting depth to be no more than ${depth}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-nesting-depth',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\t/**\n\t * @param {import('postcss').Node} node\n\t */\n\tconst isIgnoreAtRule = (node) =>\n\t\tisAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['blockless-at-rules', 'pseudo-classes'],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules(checkStatement);\n\t\troot.walkAtRules(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction checkStatement(statement) {\n\t\t\tif (isIgnoreAtRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isRule(statement) && !isStandardSyntaxRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst depth = nestingDepth(statement, 0);\n\n\t\t\tif (depth > primary) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {import('postcss').Node} node\n\t * @param {number} level\n\t * @returns {number}\n\t */\n\tfunction nestingDepth(node, level) {\n\t\tconst parent = node.parent;\n\n\t\tif (parent == null) {\n\t\t\tthrow new Error('The parent node must exist');\n\t\t}\n\n\t\tif (isIgnoreAtRule(parent)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// The nesting depth level's computation has finished\n\t\t// when this function, recursively called, receives\n\t\t// a node that is not nested -- a direct child of the\n\t\t// root node\n\t\tif (isRoot(parent) || (isAtRule(parent) && parent.parent && isRoot(parent.parent))) {\n\t\t\treturn level;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t */\n\t\tfunction containsPseudoClassesOnly(selector) {\n\t\t\tconst normalized = parser().processSync(selector, { lossless: false });\n\t\t\tconst selectors = normalized.split(',');\n\n\t\t\treturn selectors.every((sel) => extractPseudoRule(sel));\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} selectors\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction containsIgnoredPseudoClassesOnly(selectors) {\n\t\t\tif (!(secondaryOptions && secondaryOptions.ignorePseudoClasses)) return false;\n\n\t\t\treturn selectors.every((selector) => {\n\t\t\t\tconst pseudoRule = extractPseudoRule(selector);\n\n\t\t\t\tif (!pseudoRule) return false;\n\n\t\t\t\treturn optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoRule);\n\t\t\t});\n\t\t}\n\n\t\tif (\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'blockless-at-rules') &&\n\t\t\t\tisAtRule(node) &&\n\t\t\t\tnode.every((child) => !isDeclaration(child))) ||\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'pseudo-classes') &&\n\t\t\t\tisRule(node) &&\n\t\t\t\tcontainsPseudoClassesOnly(node.selector)) ||\n\t\t\t(isRule(node) && containsIgnoredPseudoClassesOnly(node.selectors))\n\t\t) {\n\t\t\treturn nestingDepth(parent, level);\n\t\t}\n\n\t\t// Unless any of the conditions above apply, we want to\n\t\t// add 1 to the nesting depth level and then check the parent,\n\t\t// continuing to add and move up the hierarchy\n\t\t// until we hit the root node\n\t\treturn nestingDepth(parent, level + 1);\n\t}\n};\n\n/**\n * @param {string} selector\n * @returns {string | undefined}\n */\nfunction extractPseudoRule(selector) {\n\treturn selector.startsWith('&:') && selector[2] !== ':' ? selector.slice(2) : undefined;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-property-no-missing-var-function';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (customProperty) => `Unexpected missing var function for \"${customProperty}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-no-missing-var-function',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/** @type {Set<string>} */\n\t\tconst knownCustomProperties = new Set();\n\n\t\troot.walkAtRules(/^property$/i, (atRule) => {\n\t\t\tknownCustomProperties.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls(({ prop }) => {\n\t\t\tif (isCustomProperty(prop)) knownCustomProperties.add(prop);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isVarFunction(node)) return false;\n\n\t\t\t\tif (!isDashedIdent(node)) return;\n\n\t\t\t\tif (!knownCustomProperties.has(node.value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isDashedIdent({ type, value }) {\n\treturn type === 'word' && value.startsWith('--');\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isVarFunction({ type, value }) {\n\treturn type === 'function' && value === 'var';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {AtRule} atRule\n * @param {string} params\n * @returns {AtRule} The atRulearation that was passed in.\n */\nmodule.exports = function setAtRuleParams(atRule, params) {\n\tconst raws = atRule.raws;\n\n\tif (raws.params) {\n\t\traws.params.raw = params;\n\t} else {\n\t\tatRule.params = params;\n\t}\n\n\treturn atRule;\n};\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string}\n */\nmodule.exports = function getAtRuleParams(atRule) {\n\tconst raws = atRule.raws;\n\n\treturn (raws.params && raws.params.raw) || atRule.params;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst ruleName = 'import-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/import-notation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['string', 'url'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, checkAtRuleImportParams);\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleImportParams(atRule) {\n\t\t\tconst params = getAtRuleParams(atRule);\n\t\t\tconst parsed = valueParser(params);\n\n\t\t\tfor (const node of parsed.nodes) {\n\t\t\t\tconst start = atRuleParamIndex(atRule);\n\t\t\t\tconst end = start + node.sourceEndIndex;\n\n\t\t\t\tif (primary === 'string') {\n\t\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\tconst urlFunctionFull = valueParser.stringify(node);\n\t\t\t\t\t\tconst urlFunctionArguments = valueParser.stringify(node.nodes);\n\n\t\t\t\t\t\tconst quotedUrlFunctionFirstArgument =\n\t\t\t\t\t\t\tnode.nodes[0] && node.nodes[0].type === 'word'\n\t\t\t\t\t\t\t\t? `\"${urlFunctionArguments}\"`\n\t\t\t\t\t\t\t\t: urlFunctionArguments;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${quotedUrlFunctionFirstArgument}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expected(urlFunctionFull, quotedUrlFunctionFirstArgument),\n\t\t\t\t\t\t\tatRule,\n\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'url') {\n\t\t\t\t\tif (node.type === 'space') return;\n\n\t\t\t\t\tif (node.type === 'word' || node.type === 'string') {\n\t\t\t\t\t\tconst path = valueParser.stringify(node);\n\n\t\t\t\t\t\tconst urlFunctionFull = `url(${path})`;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${urlFunctionFull}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst quotedNodeValue =\n\t\t\t\t\t\t\tnode.type === 'word' ? `\"${node.value}\"` : `${node.quote}${node.value}${node.quote}`;\n\n\t\t\t\t\t\tcomplain(messages.expected(quotedNodeValue, urlFunctionFull), atRule, start, end);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   fix: ((node: import('postcss').AtRule, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function mediaFeatureColonSpaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ':' }, (match) => {\n\t\t\tcheckColon(params, match.startIndex, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst colonIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, colonIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: colonIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-colon-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index);\n\t\t\t\t\tconst afterColon = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, ' ') + afterColon;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, '') + afterColon;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a media query is a custom\n * @param {string} mediaQuery\n * @returns {boolean}\n */\nmodule.exports = function isCustomMediaQuery(mediaQuery) {\n\treturn mediaQuery.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a media feature is a range context one\n *\n * @param {string} mediaFeature feature\n * @return {boolean} If `true`, media feature is a range context one\n */\nmodule.exports = function isRangeContextMediaFeature(mediaFeature) {\n\treturn mediaFeature.includes('=') || mediaFeature.includes('<') || mediaFeature.includes('>');\n};\n","'use strict';\n\n/**\n * Check whether a media feature name is standard\n *\n * @param {string} mediaFeatureName\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxMediaFeatureName(mediaFeatureName) {\n\t// SCSS interpolation\n\tif (/#\\{.+?\\}|\\$.+/.test(mediaFeatureName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * A very generic node. Pretty much any element of a media query\r\n */\n\nfunction Node(opts) {\n  this.after = opts.after;\n  this.before = opts.before;\n  this.type = opts.type;\n  this.value = opts.value;\n  this.sourceIndex = opts.sourceIndex;\n}\n\nexports.default = Node;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Node = require('./Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Container(opts) {\n  var _this = this;\n\n  this.constructor(opts);\n\n  this.nodes = opts.nodes;\n\n  if (this.after === undefined) {\n    this.after = this.nodes.length > 0 ? this.nodes[this.nodes.length - 1].after : '';\n  }\n\n  if (this.before === undefined) {\n    this.before = this.nodes.length > 0 ? this.nodes[0].before : '';\n  }\n\n  if (this.sourceIndex === undefined) {\n    this.sourceIndex = this.before.length;\n  }\n\n  this.nodes.forEach(function (node) {\n    node.parent = _this; // eslint-disable-line no-param-reassign\n  });\n} /**\r\n   * A node that contains other nodes and support traversing over them\r\n   */\n\nContainer.prototype = Object.create(_Node2.default.prototype);\nContainer.constructor = _Node2.default;\n\n/**\r\n * Iterate over descendant nodes of the node\r\n *\r\n * @param {RegExp|string} filter - Optional. Only nodes with node.type that\r\n *    satisfies the filter will be traversed over\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.walk = function walk(filter, cb) {\n  var hasFilter = typeof filter === 'string' || filter instanceof RegExp;\n  var callback = hasFilter ? cb : filter;\n  var filterReg = typeof filter === 'string' ? new RegExp(filter) : filter;\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    var filtered = hasFilter ? filterReg.test(node.type) : true;\n    if (filtered && callback && callback(node, i, this.nodes) === false) {\n      return false;\n    }\n    if (node.nodes && node.walk(filter, cb) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Iterate over immediate children of the node\r\n *\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.each = function each() {\n  var cb = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    if (cb(node, i, this.nodes) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.default = Container;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMediaFeature = parseMediaFeature;\nexports.parseMediaQuery = parseMediaQuery;\nexports.parseMediaList = parseMediaList;\n\nvar _Node = require('./nodes/Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media feature expression, e.g. `max-width: 10px`, `(color)`\r\n *\r\n * @param {string} string - the source expression string, can be inside parens\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes, the first element being a media feature,\r\n *    the secont - its value (may be missing)\r\n */\n\nfunction parseMediaFeature(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var modesEntered = [{\n    mode: 'normal',\n    character: null\n  }];\n  var result = [];\n  var lastModeIndex = 0;\n  var mediaFeature = '';\n  var colon = null;\n  var mediaFeatureValue = null;\n  var indexLocal = index;\n\n  var stringNormalized = string;\n  // Strip trailing parens (if any), and correct the starting index\n  if (string[0] === '(' && string[string.length - 1] === ')') {\n    stringNormalized = string.substring(1, string.length - 1);\n    indexLocal++;\n  }\n\n  for (var i = 0; i < stringNormalized.length; i++) {\n    var character = stringNormalized[i];\n\n    // If entering/exiting a string\n    if (character === '\\'' || character === '\"') {\n      if (modesEntered[lastModeIndex].isCalculationEnabled === true) {\n        modesEntered.push({\n          mode: 'string',\n          isCalculationEnabled: false,\n          character: character\n        });\n        lastModeIndex++;\n      } else if (modesEntered[lastModeIndex].mode === 'string' && modesEntered[lastModeIndex].character === character && stringNormalized[i - 1] !== '\\\\') {\n        modesEntered.pop();\n        lastModeIndex--;\n      }\n    }\n\n    // If entering/exiting interpolation\n    if (character === '{') {\n      modesEntered.push({\n        mode: 'interpolation',\n        isCalculationEnabled: true\n      });\n      lastModeIndex++;\n    } else if (character === '}') {\n      modesEntered.pop();\n      lastModeIndex--;\n    }\n\n    // If a : is met outside of a string, function call or interpolation, than\n    // this : separates a media feature and a value\n    if (modesEntered[lastModeIndex].mode === 'normal' && character === ':') {\n      var mediaFeatureValueStr = stringNormalized.substring(i + 1);\n      mediaFeatureValue = {\n        type: 'value',\n        before: /^(\\s*)/.exec(mediaFeatureValueStr)[1],\n        after: /(\\s*)$/.exec(mediaFeatureValueStr)[1],\n        value: mediaFeatureValueStr.trim()\n      };\n      // +1 for the colon\n      mediaFeatureValue.sourceIndex = mediaFeatureValue.before.length + i + 1 + indexLocal;\n      colon = {\n        type: 'colon',\n        sourceIndex: i + indexLocal,\n        after: mediaFeatureValue.before,\n        value: ':' };\n      break;\n    }\n\n    mediaFeature += character;\n  }\n\n  // Forming a media feature node\n  mediaFeature = {\n    type: 'media-feature',\n    before: /^(\\s*)/.exec(mediaFeature)[1],\n    after: /(\\s*)$/.exec(mediaFeature)[1],\n    value: mediaFeature.trim()\n  };\n  mediaFeature.sourceIndex = mediaFeature.before.length + indexLocal;\n  result.push(mediaFeature);\n\n  if (colon !== null) {\n    colon.before = mediaFeature.after;\n    result.push(colon);\n  }\n\n  if (mediaFeatureValue !== null) {\n    result.push(mediaFeatureValue);\n  }\n\n  return result;\n}\n\n/**\r\n * Parses a media query, e.g. `screen and (color)`, `only tv`\r\n *\r\n * @param {string} string - the source media query string\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes and Containers\r\n */\n\nfunction parseMediaQuery(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var result = [];\n\n  // How many timies the parser entered parens/curly braces\n  var localLevel = 0;\n  // Has any keyword, media type, media feature expression or interpolation\n  // ('element' hereafter) started\n  var insideSomeValue = false;\n  var node = void 0;\n\n  function resetNode() {\n    return {\n      before: '',\n      after: '',\n      value: ''\n    };\n  }\n\n  node = resetNode();\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    // If not yet entered any element\n    if (!insideSomeValue) {\n      if (character.search(/\\s/) !== -1) {\n        // A whitespace\n        // Don't form 'after' yet; will do it later\n        node.before += character;\n      } else {\n        // Not a whitespace - entering an element\n        // Expression start\n        if (character === '(') {\n          node.type = 'media-feature-expression';\n          localLevel++;\n        }\n        node.value = character;\n        node.sourceIndex = index + i;\n        insideSomeValue = true;\n      }\n    } else {\n      // Already in the middle of some alement\n      node.value += character;\n\n      // Here parens just increase localLevel and don't trigger a start of\n      // a media feature expression (since they can't be nested)\n      // Interpolation start\n      if (character === '{' || character === '(') {\n        localLevel++;\n      }\n      // Interpolation/function call/media feature expression end\n      if (character === ')' || character === '}') {\n        localLevel--;\n      }\n    }\n\n    // If exited all parens/curlies and the next symbol\n    if (insideSomeValue && localLevel === 0 && (character === ')' || i === string.length - 1 || string[i + 1].search(/\\s/) !== -1)) {\n      if (['not', 'only', 'and'].indexOf(node.value) !== -1) {\n        node.type = 'keyword';\n      }\n      // if it's an expression, parse its contents\n      if (node.type === 'media-feature-expression') {\n        node.nodes = parseMediaFeature(node.value, node.sourceIndex);\n      }\n      result.push(Array.isArray(node.nodes) ? new _Container2.default(node) : new _Node2.default(node));\n      node = resetNode();\n      insideSomeValue = false;\n    }\n  }\n\n  // Now process the result array - to specify undefined types of the nodes\n  // and specify the `after` prop\n  for (var _i = 0; _i < result.length; _i++) {\n    node = result[_i];\n    if (_i > 0) {\n      result[_i - 1].after = node.before;\n    }\n\n    // Node types. Might not be set because contains interpolation/function\n    // calls or fully consists of them\n    if (node.type === undefined) {\n      if (_i > 0) {\n        // only `and` can follow an expression\n        if (result[_i - 1].type === 'media-feature-expression') {\n          node.type = 'keyword';\n          continue;\n        }\n        // Anything after 'only|not' is a media type\n        if (result[_i - 1].value === 'not' || result[_i - 1].value === 'only') {\n          node.type = 'media-type';\n          continue;\n        }\n        // Anything after 'and' is an expression\n        if (result[_i - 1].value === 'and') {\n          node.type = 'media-feature-expression';\n          continue;\n        }\n\n        if (result[_i - 1].type === 'media-type') {\n          // if it is the last element - it might be an expression\n          // or 'and' depending on what is after it\n          if (!result[_i + 1]) {\n            node.type = 'media-feature-expression';\n          } else {\n            node.type = result[_i + 1].type === 'media-feature-expression' ? 'keyword' : 'media-feature-expression';\n          }\n        }\n      }\n\n      if (_i === 0) {\n        // `screen`, `fn( ... )`, `#{ ... }`. Not an expression, since then\n        // its type would have been set by now\n        if (!result[_i + 1]) {\n          node.type = 'media-type';\n          continue;\n        }\n\n        // `screen and` or `#{...} (max-width: 10px)`\n        if (result[_i + 1] && (result[_i + 1].type === 'media-feature-expression' || result[_i + 1].type === 'keyword')) {\n          node.type = 'media-type';\n          continue;\n        }\n        if (result[_i + 2]) {\n          // `screen and (color) ...`\n          if (result[_i + 2].type === 'media-feature-expression') {\n            node.type = 'media-type';\n            result[_i + 1].type = 'keyword';\n            continue;\n          }\n          // `only screen and ...`\n          if (result[_i + 2].type === 'keyword') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            continue;\n          }\n        }\n        if (result[_i + 3]) {\n          // `screen and (color) ...`\n          if (result[_i + 3].type === 'media-feature-expression') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            result[_i + 2].type = 'keyword';\n            continue;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query list. Takes a possible `url()` at the start into\r\n * account, and divides the list into media queries that are parsed separately\r\n *\r\n * @param {string} string - the source media query list string\r\n *\r\n * @return {Array} an array of Nodes/Containers\r\n */\n\nfunction parseMediaList(string) {\n  var result = [];\n  var interimIndex = 0;\n  var levelLocal = 0;\n\n  // Check for a `url(...)` part (if it is contents of an @import rule)\n  var doesHaveUrl = /^(\\s*)url\\s*\\(/.exec(string);\n  if (doesHaveUrl !== null) {\n    var i = doesHaveUrl[0].length;\n    var parenthesesLv = 1;\n    while (parenthesesLv > 0) {\n      var character = string[i];\n      if (character === '(') {\n        parenthesesLv++;\n      }\n      if (character === ')') {\n        parenthesesLv--;\n      }\n      i++;\n    }\n    result.unshift(new _Node2.default({\n      type: 'url',\n      value: string.substring(0, i).trim(),\n      sourceIndex: doesHaveUrl[1].length,\n      before: doesHaveUrl[1],\n      after: /^(\\s*)/.exec(string.substring(i))[1]\n    }));\n    interimIndex = i;\n  }\n\n  // Start processing the media query list\n  for (var _i2 = interimIndex; _i2 < string.length; _i2++) {\n    var _character = string[_i2];\n\n    // Dividing the media query list into comma-separated media queries\n    // Only count commas that are outside of any parens\n    // (i.e., not part of function call params list, etc.)\n    if (_character === '(') {\n      levelLocal++;\n    }\n    if (_character === ')') {\n      levelLocal--;\n    }\n    if (levelLocal === 0 && _character === ',') {\n      var _mediaQueryString = string.substring(interimIndex, _i2);\n      var _spaceBefore = /^(\\s*)/.exec(_mediaQueryString)[1];\n      result.push(new _Container2.default({\n        type: 'media-query',\n        value: _mediaQueryString.trim(),\n        sourceIndex: interimIndex + _spaceBefore.length,\n        nodes: parseMediaQuery(_mediaQueryString, interimIndex),\n        before: _spaceBefore,\n        after: /(\\s*)$/.exec(_mediaQueryString)[1]\n      }));\n      interimIndex = _i2 + 1;\n    }\n  }\n\n  var mediaQueryString = string.substring(interimIndex);\n  var spaceBefore = /^(\\s*)/.exec(mediaQueryString)[1];\n  result.push(new _Container2.default({\n    type: 'media-query',\n    value: mediaQueryString.trim(),\n    sourceIndex: interimIndex + spaceBefore.length,\n    nodes: parseMediaQuery(mediaQueryString, interimIndex),\n    before: spaceBefore,\n    after: /(\\s*)$/.exec(mediaQueryString)[1]\n  }));\n\n  return result;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseMedia;\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _parsers = require('./parsers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media query list into an array of nodes. A typical node signature:\r\n *  {string} node.type -- one of: 'media-query', 'media-type', 'keyword',\r\n *    'media-feature-expression', 'media-feature', 'colon', 'value'\r\n *  {string} node.value -- the contents of a particular element, trimmed\r\n *    e.g.: `screen`, `max-width`, `1024px`\r\n *  {string} node.after -- whitespaces that follow the element\r\n *  {string} node.before -- whitespaces that precede the element\r\n *  {string} node.sourceIndex -- the index of the element in a source media\r\n *    query list, 0-based\r\n *  {object} node.parent -- a link to the parent node (a container)\r\n *\r\n * Some nodes (media queries, media feature expressions) contain other nodes.\r\n * They additionally have:\r\n *  {array} node.nodes -- an array of nodes of the type described here\r\n *  {funciton} node.each -- traverses direct children of the node, calling\r\n *    a callback for each one\r\n *  {funciton} node.walk -- traverses ALL descendants of the node, calling\r\n *    a callback for each one\r\n */\n\nfunction parseMedia(value) {\n  return new _Container2.default({\n    nodes: (0, _parsers.parseMediaList)(value),\n    type: 'media-query-list',\n    value: value.trim()\n  });\n}","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst { assert } = require('../utils/validateTypes');\n\nconst rangeOperators = new Set(['>=', '<=', '>', '<', '=']);\n\n/**\n * @param {string} name\n * @returns {boolean}\n */\nfunction isRangeContextName(name) {\n\t// When the node is like \"(width > 10em)\" or \"(10em < width)\"\n\t// Regex is needed because the name can either be in the first or second position\n\treturn /^(?!--)\\D/.test(name) || /^--./.test(name);\n}\n\n/**\n * @typedef {{ value: string, sourceIndex: number }} RangeContextNode\n *\n * @param {import('postcss-media-query-parser').Node} node\n * @returns {{ name: RangeContextNode, values: RangeContextNode[] }}\n */\nmodule.exports = function rangeContextNodeParser(node) {\n\t/** @type {import('postcss-value-parser').WordNode | undefined} */\n\tlet nameNode;\n\n\t/** @type {import('postcss-value-parser').WordNode[]} */\n\tconst valueNodes = [];\n\n\tvalueParser(node.value).walk((valueNode) => {\n\t\tif (valueNode.type !== 'word') return;\n\n\t\tif (rangeOperators.has(valueNode.value)) return;\n\n\t\tif (nameNode == null && isRangeContextName(valueNode.value)) {\n\t\t\tnameNode = valueNode;\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueNodes.push(valueNode);\n\t});\n\n\tassert(nameNode);\n\n\treturn {\n\t\tname: {\n\t\t\tvalue: nameNode.value,\n\t\t\tsourceIndex: node.sourceIndex + nameNode.sourceIndex,\n\t\t},\n\n\t\tvalues: valueNodes.map((valueNode) => ({\n\t\t\tvalue: valueNode.value,\n\t\t\tsourceIndex: node.sourceIndex + valueNode.sourceIndex,\n\t\t})),\n\t};\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst ruleName = 'custom-property-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (propName, pattern) => `Expected \"${propName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-property-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\t/**\n\t\t * @param {string} property\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction check(property) {\n\t\t\treturn (\n\t\t\t\t!isStandardSyntaxProperty(property) ||\n\t\t\t\t!isCustomProperty(property) ||\n\t\t\t\tregexpPattern.test(property.slice(2))\n\t\t\t);\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (node.value.toLowerCase() !== 'var') return;\n\n\t\t\t\tconst { nodes } = node;\n\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tif (!firstNode || check(firstNode.value)) return;\n\n\t\t\t\tcomplain(declarationValueIndex(decl) + firstNode.sourceIndex, firstNode.value, decl);\n\t\t\t});\n\n\t\t\tif (check(prop)) return;\n\n\t\t\tcomplain(0, prop, decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t * @param {string} propName\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(index, propName, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [propName, primary],\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + propName.length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-url-scheme-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isMathFunction = require('../../utils/isMathFunction');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst { lengthUnits } = require('../../reference/units');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'length-zero-no-unit';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected unit',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/length-zero-no-unit',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-properties'],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tlet needsFix;\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode) {\n\t\t\tconst { value, sourceIndex } = valueNode;\n\n\t\t\tif (isMathFunction(valueNode)) return false;\n\n\t\t\tif (isFunction(valueNode) && optionsMatches(secondaryOptions, 'ignoreFunctions', value))\n\t\t\t\treturn false;\n\n\t\t\tif (!isWord(valueNode)) return;\n\n\t\t\tconst numberUnit = valueParser.unit(value);\n\n\t\t\tif (numberUnit === false) return;\n\n\t\t\tconst { number, unit } = numberUnit;\n\n\t\t\tif (unit === '') return;\n\n\t\t\tif (!isLength(unit)) return;\n\n\t\t\tif (isFraction(unit)) return;\n\n\t\t\tif (!isZero(number)) return;\n\n\t\t\tif (context.fix) {\n\t\t\t\tlet regularNumber = number;\n\n\t\t\t\tif (regularNumber.startsWith('.')) {\n\t\t\t\t\tregularNumber = number.slice(1);\n\t\t\t\t}\n\n\t\t\t\tvalueNode.value = regularNumber;\n\t\t\t\tneedsFix = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = nodeIndex + sourceIndex + number.length;\n\t\t\tconst endIndex = index + unit.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} node\n\t\t */\n\t\tfunction checkAtRule(node) {\n\t\t\tif (!isStandardSyntaxAtRule(node)) return;\n\n\t\t\tneedsFix = false;\n\n\t\t\tconst index = atRuleParamIndex(node);\n\t\t\tconst parsedValue = valueParser(getAtRuleParams(node));\n\n\t\t\tparsedValue.walk((valueNode) => check(node, index, valueNode));\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetAtRuleParams(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} node\n\t\t */\n\t\tfunction checkDecl(node) {\n\t\t\tneedsFix = false;\n\n\t\t\tconst { prop } = node;\n\n\t\t\tif (isLineHeight(prop)) return;\n\n\t\t\tif (isFlex(prop)) return;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'custom-properties') && isCustomProperty(prop))\n\t\t\t\treturn;\n\n\t\t\tconst index = declarationValueIndex(node);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(node));\n\n\t\t\tparsedValue.walk((valueNode, valueNodeIndex, valueNodes) => {\n\t\t\t\tif (isLineHeightValue(node, valueNodes, valueNodeIndex)) return;\n\n\t\t\t\treturn check(node, index, valueNode);\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules(checkAtRule);\n\t\troot.walkDecls(checkDecl);\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {import('postcss-value-parser').Node[]} nodes\n * @param {number} index\n */\nfunction isLineHeightValue({ prop }, nodes, index) {\n\tconst lastNode = nodes[index - 1];\n\n\treturn (\n\t\tprop.toLowerCase() === 'font' && lastNode && lastNode.type === 'div' && lastNode.value === '/'\n\t);\n}\n\n/**\n * @param {string} prop\n */\nfunction isLineHeight(prop) {\n\treturn prop.toLowerCase() === 'line-height';\n}\n\n/**\n * @param {string} prop\n */\nfunction isFlex(prop) {\n\treturn prop.toLowerCase() === 'flex';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isWord({ type }) {\n\treturn type === 'word';\n}\n\n/**\n * @param {string} unit\n */\nfunction isLength(unit) {\n\treturn lengthUnits.has(unit.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isFunction({ type }) {\n\treturn type === 'function';\n}\n\n/**\n * @param {string} unit\n */\nfunction isFraction(unit) {\n\treturn unit.toLowerCase() === 'fr';\n}\n\n/**\n * @param {string} number\n */\nfunction isZero(number) {\n\treturn Number.parseFloat(number) === 0;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { mathFunctions } = require('../reference/functions');\n\n/**\n * Check whether a node is math function\n *\n * @param {import('postcss-value-parser').Node} node postcss-value-parser node\n * @return {boolean} If `true`, the node is math function\n */\nmodule.exports = function isMathFunction(node) {\n\treturn node.type === 'function' && mathFunctions.has(node.value.toLowerCase());\n};\n","'use strict';\n\n/**\n * @param {string} source\n *\n * @returns {string}\n */\nmodule.exports = function blurInterpolation(source, blurChar = ' ') {\n\treturn source.replace(/[#@{}]+/g, blurChar);\n};\n","'use strict';\n\nconst blurInterpolation = require('./blurInterpolation');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Get Dimension from value node;\n * `unit` and `number` return null if neither is found\n *\n * @param {import('postcss-value-parser').Node} node\n *\n * @returns {{unit: null, number: null} | valueParser.Dimension}\n */\nmodule.exports = function getDimension(node) {\n\tif (!node || !node.value) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore non-word nodes\n\tif (node.type !== 'word') {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore non standard syntax\n\tif (!isStandardSyntaxValue(node.value)) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Ignore HEX\n\tif (node.value.startsWith('#')) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\t// Remove non standard stuff\n\tconst value = blurInterpolation(node.value, '')\n\t\t// ignore hack unit\n\t\t.replace('\\\\0', '')\n\t\t.replace('\\\\9', '');\n\n\tconst parsedUnit = valueParser.unit(value);\n\n\tif (!parsedUnit) {\n\t\treturn {\n\t\t\tunit: null,\n\t\t\tnumber: null,\n\t\t};\n\t}\n\n\treturn parsedUnit;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getDimension = require('../../utils/getDimension');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tif (node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function')) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\tif (!unit || (unit && propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst { assertString } = require('../utils/validateTypes');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule, index: number) => boolean) | null | undefined,\n *   allowTrailingComments?: boolean,\n * }} opts\n */\nmodule.exports = function mediaQueryListCommaWhitespaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ',' }, (match) => {\n\t\t\tlet index = match.startIndex;\n\n\t\t\tif (opts.allowTrailingComments) {\n\t\t\t\t// if there is a comment on the same line at after the comma, check the space after the comment.\n\t\t\t\tlet execResult;\n\n\t\t\t\twhile ((execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[0]);\n\t\t\t\t\tindex += execResult[0].length;\n\t\t\t\t}\n\n\t\t\t\tif ((execResult = /^([^\\S\\r\\n]*\\/\\/[\\s\\S]*?)\\r?\\n/.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[1]);\n\t\t\t\t\tindex += execResult[1].length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckComma(params, index, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst commaIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, commaIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: commaIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only check for the newline after the comma, while allowing\n\t\t// arbitrary indentation after the newline\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tallowTrailingComments: primary.startsWith('always'),\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = /^\\s*\\n/.test(afterComma)\n\t\t\t\t\t\t\t? beforeComma + afterComma.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t: beforeComma + context.newline + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tlet hasComments = atRule.raws.params && atRule.raws.params.raw;\n\t\t\tconst mediaRule = hasComments ? hasComments : atRule.params;\n\n\t\t\tmediaParser(mediaRule).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst expectedFeatureName = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expectedFeatureName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\thasComments.slice(sourceIndex + expectedFeatureName.length);\n\n\t\t\t\t\t\tif (atRule.raws.params == null) {\n\t\t\t\t\t\t\tthrow new Error('The `AtRuleRaws` node must have a `params` property');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tatRule.raws.params.raw = hasComments;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tatRule.params =\n\t\t\t\t\t\t\tatRule.params.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\tatRule.params.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.expected(value, expectedFeatureName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getDimension = require('../../utils/getDimension');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-property-unit-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\tif (!unit || (unit && !propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-colon-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index + 1);\n\t\t\t\t\tconst afterColon = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected vendor-prefix',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst params = atRule.params;\n\n\t\t\tif (!isAutoprefixable.mediaFeatureName(params)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.params = isAutoprefixable.unprefix(atRule.params);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const match of matches) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: match,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name, value) => `Unexpected value \"${value}\" for name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature-expression$/i, (node) => {\n\t\t\t\tif (!node.nodes) return;\n\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(node.parent.value);\n\n\t\t\t\t// Ignore boolean\n\t\t\t\tif (!node.value.includes(':') && !mediaFeatureRangeContext) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mediaFeatureNode = node.nodes.find((n) => n.type === 'media-feature');\n\n\t\t\t\tif (mediaFeatureNode == null) throw new Error('A `media-feature` node must be present');\n\n\t\t\t\tlet mediaFeatureName;\n\t\t\t\tlet values;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tmediaFeatureName = parsedRangeContext.name.value;\n\t\t\t\t\tvalues = parsedRangeContext.values;\n\t\t\t\t} else {\n\t\t\t\t\tmediaFeatureName = mediaFeatureNode.value;\n\t\t\t\t\tconst valueNode = node.nodes.find((n) => n.type === 'value');\n\n\t\t\t\t\tif (valueNode == null) throw new Error('A `value` node must be present');\n\n\t\t\t\t\tvalues = [valueNode];\n\t\t\t\t}\n\n\t\t\t\tfor (const valueNode of values) {\n\t\t\t\t\tconst value = valueNode.value;\n\t\t\t\t\tconst unprefixedMediaFeatureName = vendor.unprefixed(mediaFeatureName);\n\n\t\t\t\t\tconst allowedValuesKey = Object.keys(primary).find((featureName) =>\n\t\t\t\t\t\tmatchesStringOrRegExp(unprefixedMediaFeatureName, featureName),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (allowedValuesKey == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(primary, allowedValuesKey, value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = atRuleParamIndex(atRule) + valueNode.sourceIndex;\n\t\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tmessage: messages.rejected(mediaFeatureName, value),\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atImport) => `Unexpected duplicate @import rule ${atImport}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-duplicate-at-import-rules',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Record<string, string[]>} */\n\t\tconst imports = {};\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst [firstParam, ...restParams] = valueParser(atRule.params).nodes;\n\n\t\t\tif (!firstParam) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// extract uri from url() if exists\n\t\t\tconst uri =\n\t\t\t\tfirstParam.type === 'function' && firstParam.value === 'url' && firstParam.nodes[0]\n\t\t\t\t\t? firstParam.nodes[0].value\n\t\t\t\t\t: firstParam.value;\n\n\t\t\t// extract media queries if any\n\t\t\tconst media = (mediaParser(valueParser.stringify(restParams)).nodes || [])\n\t\t\t\t.map((n) => n.value.replace(/\\s/g, ''))\n\t\t\t\t.filter((n) => n.length);\n\n\t\t\tlet importedUris = imports[uri];\n\t\t\tconst isDuplicate = media.length\n\t\t\t\t? media.some((q) => importedUris && importedUris.includes(q))\n\t\t\t\t: importedUris;\n\n\t\t\tif (isDuplicate) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(uri),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: atRule.toString(),\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!importedUris) {\n\t\t\t\timportedUris = imports[uri] = [];\n\t\t\t}\n\n\t\t\timportedUris.push(...media);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst rangeOperators = ['>=', '<=', '>', '<', '='];\n\n/** @typedef {import('style-search').StyleSearchMatch} StyleSearchMatch */\n\n/**\n * @template {import('postcss').AtRule} T\n * @param {T} atRule\n * @param {(match: StyleSearchMatch, params: string, atRule: T) => void} cb\n */\nmodule.exports = function findMediaOperator(atRule, cb) {\n\tif (atRule.name.toLowerCase() !== 'media') {\n\t\treturn;\n\t}\n\n\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\tstyleSearch({ source: params, target: rangeOperators }, (match) => {\n\t\tconst before = params[match.startIndex - 1];\n\n\t\tif (before === '>' || before === '<') {\n\t\t\treturn;\n\t\t}\n\n\t\tcb(match, params, atRule);\n\t});\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after range operator',\n\trejectedAfter: () => 'Unexpected whitespace after range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-range-operator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckAfterOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index + 1);\n\t\t\t\t\tconst afterOperator = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkAfterOperator(match, params, node, fix) {\n\t\t\tconst endIndex = match.startIndex + match.target.length - 1;\n\n\t\t\tchecker.after({\n\t\t\t\tsource: params,\n\t\t\t\tindex: endIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(endIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: endIndex + atRuleParamIndex(node) + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isNumbery = require('../../utils/isNumbery');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst {\n\tfontWeightNonNumericKeywords,\n\tfontWeightRelativeKeywords,\n} = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-weight-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} font-weight notation`,\n\texpectedWithActual: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/font-weight-notation',\n\tfixable: true,\n};\n\nconst NORMAL_KEYWORD = 'normal';\n\nconst NAMED_TO_NUMERIC = new Map([\n\t['normal', '400'],\n\t['bold', '700'],\n]);\nconst NUMERIC_TO_NAMED = new Map([\n\t['400', 'normal'],\n\t['700', 'bold'],\n]);\n\n/** @type {import('stylelint').Rule<'numeric' | 'named-where-possible'>} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['numeric', 'named-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['relative'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreRelative = optionsMatches(secondaryOptions, 'ignore', 'relative');\n\n\t\troot.walkDecls(/^font(-weight)?$/i, (decl) => {\n\t\t\tconst isFontShorthandProp = decl.prop.toLowerCase() === 'font';\n\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tconst valueNodes = parsedValue.nodes;\n\n\t\t\tconst hasNumericFontWeight = valueNodes.some((node, index, nodes) => {\n\t\t\t\treturn isNumbery(node.value) && !isDivNode(nodes[index - 1]);\n\t\t\t});\n\n\t\t\tfor (const [index, valueNode] of valueNodes.entries()) {\n\t\t\t\tif (!isPossibleFontWeightNode(valueNode, index, valueNodes)) continue;\n\n\t\t\t\tconst { value } = valueNode;\n\n\t\t\t\tif (isFontShorthandProp) {\n\t\t\t\t\tif (value.toLowerCase() === NORMAL_KEYWORD && hasNumericFontWeight) {\n\t\t\t\t\t\tcontinue; // Not `normal` for font-weight\n\t\t\t\t\t}\n\n\t\t\t\t\tif (checkWeight(decl, valueNode)) {\n\t\t\t\t\t\tbreak; // Stop traverse if font-weight is processed\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcheckWeight(decl, valueNode);\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\t// Autofix after the loop ends can prevent value nodes from changing their positions during the loop.\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {import('postcss-value-parser').Node} weightValueNode\n\t\t * @returns {true | undefined}\n\t\t */\n\t\tfunction checkWeight(decl, weightValueNode) {\n\t\t\tconst weightValue = weightValueNode.value;\n\n\t\t\tif (!isStandardSyntaxValue(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lowerWeightValue = weightValue.toLowerCase();\n\n\t\t\tif (ignoreRelative && fontWeightRelativeKeywords.has(lowerWeightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primary === 'numeric') {\n\t\t\t\tif (!isNumbery(lowerWeightValue) && fontWeightNonNumericKeywords.has(lowerWeightValue)) {\n\t\t\t\t\tconst numericValue = NAMED_TO_NUMERIC.get(lowerWeightValue);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (numericValue) {\n\t\t\t\t\t\t\tweightValueNode.value = numericValue;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst msg = numericValue\n\t\t\t\t\t\t? messages.expectedWithActual(weightValue, numericValue)\n\t\t\t\t\t\t: messages.expected('numeric');\n\n\t\t\t\t\tcomplain(msg, weightValueNode);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (primary === 'named-where-possible') {\n\t\t\t\tif (isNumbery(lowerWeightValue) && NUMERIC_TO_NAMED.has(lowerWeightValue)) {\n\t\t\t\t\tconst namedValue = NUMERIC_TO_NAMED.get(lowerWeightValue);\n\n\t\t\t\t\tassertString(namedValue);\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tweightValueNode.value = namedValue;\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(messages.expectedWithActual(weightValue, namedValue), weightValueNode);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t */\n\t\t\tfunction complain(message, valueNode) {\n\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex;\n\t\t\t\tconst endIndex = index + valueNode.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {boolean}\n */\nfunction isDivNode(node) {\n\treturn node !== undefined && node.type === 'div';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @param {number} index\n * @param {import('postcss-value-parser').Node[]} nodes\n * @returns {boolean}\n */\nfunction isPossibleFontWeightNode(node, index, nodes) {\n\tif (node.type !== 'word') return false;\n\n\t// Exclude `<font-size>/<line-height>` format like `16px/3`.\n\tif (isDivNode(nodes[index - 1])) return false;\n\n\tif (isDivNode(nodes[index + 1])) return false;\n\n\treturn true;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports = function resolveNestedSelector(selector, node) {\n  var parent = node.parent;\n  var parentIsNestAtRule = parent.type === 'atrule' && parent.name === 'nest';\n\n  if (parent.type === 'root') return [selector];\n  if (parent.type !== 'rule' && !parentIsNestAtRule) return resolveNestedSelector(selector, parent);\n\n  var parentSelectors = (parentIsNestAtRule)\n    ? parent.params.split(',').map(function(s) { return s.trim(); })\n    : parent.selectors;\n\n  var resolvedSelectors = parentSelectors.reduce(function(result, parentSelector) {\n    if (selector.indexOf('&') !== -1) {\n      var newlyResolvedSelectors = resolveNestedSelector(parentSelector, parent).map(function(resolvedParentSelector) {\n        return selector.replace(/&/g, resolvedParentSelector);\n      });\n      return result.concat(newlyResolvedSelectors);\n    }\n\n    var combinedSelector = [ parentSelector, selector ].join(' ');\n    return result.concat(resolveNestedSelector(combinedSelector, parent));\n  }, []);\n\n  return resolvedSelectors;\n}\n","import e from\"postcss-selector-parser\";function s(n){if(!n)return{a:0,b:0,c:0};let t=0,c=0,o=0;if(\"universal\"==n.type)return{a:0,b:0,c:0};if(\"id\"===n.type)t+=1;else if(\"tag\"===n.type)o+=1;else if(\"class\"===n.type)c+=1;else if(\"attribute\"===n.type)c+=1;else if(function(s){return e.isPseudoElement(s)}(n))o+=1;else if(e.isPseudoClass(n))switch(n.value.toLowerCase()){case\":-moz-any\":case\":-webkit-any\":case\":any\":case\":has\":case\":is\":case\":matches\":case\":not\":if(n.nodes&&n.nodes.length>0){const e=a(n.nodes);t+=e.a,c+=e.b,o+=e.c}break;case\":where\":break;case\":nth-child\":case\":nth-last-child\":if(c+=1,n.nodes&&n.nodes.length>0){const s=n.nodes[0].nodes.findIndex((e=>\"tag\"===e.type&&\"of\"===e.value.toLowerCase()));if(s>-1){const l=[e.selector({nodes:n.nodes[0].nodes.slice(s+1),value:\"\"})];n.nodes.length>1&&l.push(...n.nodes.slice(1));const r=a(l);t+=r.a,c+=r.b,o+=r.c}}break;case\":local\":case\":global\":n.nodes&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));break;default:c+=1}else e.isContainer(n)&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));return{a:t,b:c,c:o}}function a(e){let a={a:0,b:0,c:0};return e.forEach((e=>{const n=s(e);n.a>a.a?a=n:n.a<a.a||(n.b>a.b?a=n:n.b<a.b||n.c>a.c&&(a=n))})),a}function n(e,s){return e.a===s.a?e.b===s.b?e.c-s.c:e.b-s.b:e.a-s.a}export{n as compare,s as selectorSpecificity};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * Find the at-rule in which a rule is nested.\n *\n * Returns `null` if the rule is not nested within an at-rule.\n *\n * @param {import('postcss').Rule} rule\n * @returns {null | import('postcss').AtRule}\n */\nmodule.exports = function findAtRuleContext(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn null;\n\t}\n\n\tif (isAtRule(parent)) {\n\t\treturn parent;\n\t}\n\n\tif (isRule(parent)) {\n\t\treturn findAtRuleContext(parent);\n\t}\n\n\treturn null;\n};\n","'use strict';\n\nconst htmlTags = require('html-tags');\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst deprecatedHtmlTypeSelectors = new Set([\n\t'acronym',\n\t'applet',\n\t'basefont',\n\t'big',\n\t'blink',\n\t'center',\n\t'content',\n\t'dir',\n\t'font',\n\t'frame',\n\t'frameset',\n\t'hgroup',\n\t'isindex',\n\t'keygen',\n\t'listing',\n\t'marquee',\n\t'nobr',\n\t'noembed',\n\t'plaintext',\n\t'spacer',\n\t'strike',\n\t'tt',\n\t'xmp',\n]);\n\n// typecasting htmlTags to be more generic; see https://github.com/stylelint/stylelint/pull/6013 for discussion\n/** @type {Set<string>} */\nconst standardHtmlTypeSelectors = new Set(htmlTags);\n\nconst htmlTypeSelectors = uniteSets(deprecatedHtmlTypeSelectors, standardHtmlTypeSelectors);\n\nconst mixedCaseSvgTypeSelectors = new Set([\n\t'altGlyph',\n\t'altGlyphDef',\n\t'altGlyphItem',\n\t'animateColor',\n\t'animateMotion',\n\t'animateTransform',\n\t'clipPath',\n\t'feBlend',\n\t'feColorMatrix',\n\t'feComponentTransfer',\n\t'feComposite',\n\t'feConvolveMatrix',\n\t'feDiffuseLighting',\n\t'feDisplacementMap',\n\t'feDistantLight',\n\t'feDropShadow',\n\t'feFlood',\n\t'feFuncA',\n\t'feFuncB',\n\t'feFuncG',\n\t'feFuncR',\n\t'feGaussianBlur',\n\t'feImage',\n\t'feMerge',\n\t'feMergeNode',\n\t'feMorphology',\n\t'feOffset',\n\t'fePointLight',\n\t'feSpecularLighting',\n\t'feSpotLight',\n\t'feTile',\n\t'feTurbulence',\n\t'foreignObject',\n\t'glyphRef',\n\t'linearGradient',\n\t'radialGradient',\n\t'textPath',\n]);\n\n// These are the ones that can have single-colon notation\nconst levelOneAndTwoPseudoElements = new Set(['before', 'after', 'first-line', 'first-letter']);\n\nconst shadowTreePseudoElements = new Set(['part']);\n\nconst webkitScrollbarPseudoElements = new Set([\n\t'-webkit-resizer',\n\t'-webkit-scrollbar',\n\t'-webkit-scrollbar-button',\n\t'-webkit-scrollbar-corner',\n\t'-webkit-scrollbar-thumb',\n\t'-webkit-scrollbar-track',\n\t'-webkit-scrollbar-track-piece',\n]);\n\nconst vendorSpecificPseudoElements = uniteSets(webkitScrollbarPseudoElements, [\n\t'-moz-focus-inner',\n\t'-moz-focus-outer',\n\t'-moz-list-bullet',\n\t'-moz-meter-bar',\n\t'-moz-placeholder',\n\t'-moz-progress-bar',\n\t'-moz-range-progress',\n\t'-moz-range-thumb',\n\t'-moz-range-track',\n\t'-ms-browse',\n\t'-ms-check',\n\t'-ms-clear',\n\t'-ms-expand',\n\t'-ms-fill',\n\t'-ms-fill-lower',\n\t'-ms-fill-upper',\n\t'-ms-reveal',\n\t'-ms-thumb',\n\t'-ms-ticks-after',\n\t'-ms-ticks-before',\n\t'-ms-tooltip',\n\t'-ms-track',\n\t'-ms-value',\n\t'-webkit-color-swatch',\n\t'-webkit-color-swatch-wrapper',\n\t'-webkit-calendar-picker-indicator',\n\t'-webkit-clear-button',\n\t'-webkit-date-and-time-value',\n\t'-webkit-datetime-edit',\n\t'-webkit-datetime-edit-ampm-field',\n\t'-webkit-datetime-edit-day-field',\n\t'-webkit-datetime-edit-fields-wrapper',\n\t'-webkit-datetime-edit-hour-field',\n\t'-webkit-datetime-edit-millisecond-field',\n\t'-webkit-datetime-edit-minute-field',\n\t'-webkit-datetime-edit-month-field',\n\t'-webkit-datetime-edit-second-field',\n\t'-webkit-datetime-edit-text',\n\t'-webkit-datetime-edit-week-field',\n\t'-webkit-datetime-edit-year-field',\n\t'-webkit-details-marker',\n\t'-webkit-distributed',\n\t'-webkit-file-upload-button',\n\t'-webkit-input-placeholder',\n\t'-webkit-keygen-select',\n\t'-webkit-meter-bar',\n\t'-webkit-meter-even-less-good-value',\n\t'-webkit-meter-inner-element',\n\t'-webkit-meter-optimum-value',\n\t'-webkit-meter-suboptimum-value',\n\t'-webkit-progress-bar',\n\t'-webkit-progress-inner-element',\n\t'-webkit-progress-value',\n\t'-webkit-search-cancel-button',\n\t'-webkit-search-decoration',\n\t'-webkit-search-results-button',\n\t'-webkit-search-results-decoration',\n\t'-webkit-slider-runnable-track',\n\t'-webkit-slider-thumb',\n\t'-webkit-textfield-decoration-container',\n\t'-webkit-validation-bubble',\n\t'-webkit-validation-bubble-arrow',\n\t'-webkit-validation-bubble-arrow-clipper',\n\t'-webkit-validation-bubble-heading',\n\t'-webkit-validation-bubble-message',\n\t'-webkit-validation-bubble-text-block',\n]);\n\nconst pseudoElements = uniteSets(\n\tlevelOneAndTwoPseudoElements,\n\tvendorSpecificPseudoElements,\n\tshadowTreePseudoElements,\n\t[\n\t\t'backdrop',\n\t\t'content',\n\t\t'cue',\n\t\t'file-selector-button',\n\t\t'grammar-error',\n\t\t'highlight',\n\t\t'marker',\n\t\t'placeholder',\n\t\t'selection',\n\t\t'shadow',\n\t\t'slotted',\n\t\t'spelling-error',\n\t\t'target-text',\n\t],\n);\n\nconst aNPlusBNotationPseudoClasses = new Set([\n\t'nth-column',\n\t'nth-last-column',\n\t'nth-last-of-type',\n\t'nth-of-type',\n]);\n\nconst aNPlusBOfSNotationPseudoClasses = new Set(['nth-child', 'nth-last-child']);\n\nconst atRulePagePseudoClasses = new Set(['first', 'right', 'left', 'blank']);\n\nconst linguisticPseudoClasses = new Set(['dir', 'lang']);\n\nconst logicalCombinationsPseudoClasses = new Set(['has', 'is', 'matches', 'not', 'where']);\n\nconst vendorSpecificPseudoClasses = new Set([\n\t'-khtml-drag',\n\t'-moz-any',\n\t'-moz-any-link',\n\t'-moz-broken',\n\t'-moz-drag-over',\n\t'-moz-first-node',\n\t'-moz-focusring',\n\t'-moz-full-screen',\n\t'-moz-full-screen-ancestor',\n\t'-moz-last-node',\n\t'-moz-loading',\n\t'-moz-meter-optimum',\n\t'-moz-meter-sub-optimum',\n\t'-moz-meter-sub-sub-optimum',\n\t'-moz-placeholder',\n\t'-moz-submit-invalid',\n\t'-moz-suppressed',\n\t'-moz-ui-invalid',\n\t'-moz-ui-valid',\n\t'-moz-user-disabled',\n\t'-moz-window-inactive',\n\t'-ms-fullscreen',\n\t'-ms-input-placeholder',\n\t'-webkit-drag',\n\t'-webkit-any',\n\t'-webkit-any-link',\n\t'-webkit-autofill',\n\t'-webkit-full-screen',\n\t'-webkit-full-screen-ancestor',\n]);\n\n// https://webkit.org/blog/363/styling-scrollbars/\nconst webkitScrollbarPseudoClasses = new Set([\n\t'horizontal',\n\t'vertical',\n\t'decrement',\n\t'increment',\n\t'start',\n\t'end',\n\t'double-button',\n\t'single-button',\n\t'no-button',\n\t'corner-present',\n\t'window-inactive',\n]);\n\nconst pseudoClasses = uniteSets(\n\taNPlusBNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tvendorSpecificPseudoClasses,\n\t[\n\t\t'active',\n\t\t'any-link',\n\t\t'autofill',\n\t\t'blank',\n\t\t'checked',\n\t\t'current',\n\t\t'default',\n\t\t'defined',\n\t\t'disabled',\n\t\t'empty',\n\t\t'enabled',\n\t\t'first-child',\n\t\t'first-of-type',\n\t\t'focus',\n\t\t'focus-within',\n\t\t'focus-visible',\n\t\t'fullscreen',\n\t\t'fullscreen-ancestor',\n\t\t'future',\n\t\t'host',\n\t\t'host-context',\n\t\t'hover',\n\t\t'indeterminate',\n\t\t'in-range',\n\t\t'invalid',\n\t\t'last-child',\n\t\t'last-of-type',\n\t\t'link',\n\t\t'only-child',\n\t\t'only-of-type',\n\t\t'optional',\n\t\t'out-of-range',\n\t\t'past',\n\t\t'placeholder-shown',\n\t\t'playing',\n\t\t'picture-in-picture',\n\t\t'paused',\n\t\t'read-only',\n\t\t'read-write',\n\t\t'required',\n\t\t'root',\n\t\t'scope',\n\t\t'state',\n\t\t'target',\n\t\t'unresolved',\n\t\t'user-invalid',\n\t\t'user-valid',\n\t\t'valid',\n\t\t'visited',\n\t\t'window-inactive', // for ::selection (chrome)\n\t],\n);\n\nmodule.exports = {\n\taNPlusBNotationPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tatRulePagePseudoClasses,\n\tlevelOneAndTwoPseudoElements,\n\tlinguisticPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n\tmixedCaseSvgTypeSelectors,\n\tpseudoClasses,\n\tpseudoElements,\n\tshadowTreePseudoElements,\n\thtmlTypeSelectors,\n\twebkitScrollbarPseudoClasses,\n\twebkitScrollbarPseudoElements,\n};\n","'use strict';\n\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\nmodule.exports = function nodeContextLookup() {\n\tconst contextMap = new Map();\n\n\treturn {\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {any[]} subContexts\n\t\t * @returns {Map<any, any>}\n\t\t */\n\t\tgetContext(node, ...subContexts) {\n\t\t\tif (!node.source) throw new Error('The node source must be present');\n\n\t\t\tconst nodeSource = node.source.input.from;\n\t\t\tconst baseContext = creativeGetMap(contextMap, nodeSource);\n\n\t\t\treturn subContexts.reduce((result, context) => creativeGetMap(result, context), baseContext);\n\t\t},\n\t};\n};\n\n/**\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\nfunction creativeGetMap(someMap, someThing) {\n\tif (!someMap.has(someThing)) {\n\t\tsomeMap.set(someThing, new Map());\n\t}\n\n\treturn someMap.get(someThing);\n}\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selector\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Node} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function parseSelector(selector, result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(selector);\n\t} catch (err) {\n\t\tresult.warn(`Cannot parse selector (${err})`, { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity: calculate, compare } = require('@csstools/selector-specificity');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { pseudoElements } = require('../../reference/selectors');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-descending-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-descending-specificity',\n};\n\n/** @typedef {{ selector: string, specificity: import('@csstools/selector-specificity').Specificity }} Entry */\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['selectors-within-list'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreSelectorsWithinList = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'selectors-within-list',\n\t\t);\n\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\t// Ignore nested property `foo: {};`\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignores selectors within list of selectors\n\t\t\tif (ignoreSelectorsWithinList && ruleNode.selectors.length > 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {Map<string, Entry[]>} */\n\t\t\tconst comparisonContext = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst trimSelector = selector.trim();\n\n\t\t\t\t// Ignore `.selector, { }`\n\t\t\t\tif (trimSelector === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Resolve any nested selectors before checking\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => {\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcheckSelector(s, ruleNode, comparisonContext);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {Map<string, Entry[]>} comparisonContext\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode, comparisonContext) {\n\t\t\tconst selector = selectorNode.toString();\n\t\t\tconst referenceSelector = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n\n\t\t\tif (referenceSelector === undefined) return;\n\n\t\t\tconst selectorSpecificity = calculate(selectorNode);\n\t\t\tconst entry = { selector, specificity: selectorSpecificity };\n\t\t\tconst priorComparableSelectors = comparisonContext.get(referenceSelector);\n\n\t\t\tif (priorComparableSelectors === undefined) {\n\t\t\t\tcomparisonContext.set(referenceSelector, [entry]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const priorEntry of priorComparableSelectors) {\n\t\t\t\tif (compare(selectorSpecificity, priorEntry.specificity) < 0) {\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, priorEntry.selector),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpriorComparableSelectors.push(entry);\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Root} selectorNode\n * @returns {string | undefined}\n */\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n\tconst firstChild = selectorNode.nodes[0];\n\n\tassert(firstChild);\n\tconst nodesByCombinator = firstChild.split((node) => node.type === 'combinator');\n\tconst nodesAfterLastCombinator = nodesByCombinator[nodesByCombinator.length - 1];\n\n\tassert(nodesAfterLastCombinator);\n\n\tconst nodesWithoutPseudoClasses = nodesAfterLastCombinator.filter((node) => {\n\t\treturn (\n\t\t\tnode.type !== 'pseudo' ||\n\t\t\tnode.value.startsWith('::') ||\n\t\t\tpseudoElements.has(node.value.replace(/:/g, ''))\n\t\t);\n\t});\n\n\tif (nodesWithoutPseudoClasses.length === 0) return undefined;\n\n\treturn nodesWithoutPseudoClasses.join('');\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-query-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index);\n\t\t\t\t\tconst afterComma = params.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, ' ') + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, '') + afterComma;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isWhitespace = require('./isWhitespace');\n\n/**\n * Returns a Boolean indicating whether the input string is only whitespace.\n *\n * @param {string} input\n * @returns {boolean}\n */\nmodule.exports = function isOnlyWhitespace(input) {\n\tfor (const element of input) {\n\t\tif (!isWhitespace(element)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isComment, isDeclaration, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-eol-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected whitespace at end of line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-eol-whitespace',\n\tfixable: true,\n};\n\nconst whitespacesToReject = new Set([' ', '\\t']);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction fixString(str) {\n\treturn str.replace(/[ \\t]+$/, '');\n}\n\n/**\n * @param {number} lastEOLIndex\n * @param {string} string\n * @param {{ ignoreEmptyLines: boolean, isRootFirst: boolean }} options\n * @returns {number}\n */\nfunction findErrorStartIndex(lastEOLIndex, string, { ignoreEmptyLines, isRootFirst }) {\n\tconst eolWhitespaceIndex = lastEOLIndex - 1;\n\n\t// If the character before newline is not whitespace, ignore\n\tif (!whitespacesToReject.has(string.charAt(eolWhitespaceIndex))) {\n\t\treturn -1;\n\t}\n\n\tif (ignoreEmptyLines) {\n\t\t// If there is only whitespace between the previous newline and\n\t\t// this newline, ignore\n\t\tconst beforeNewlineIndex = string.lastIndexOf('\\n', eolWhitespaceIndex);\n\n\t\tif (beforeNewlineIndex >= 0 || isRootFirst) {\n\t\t\tconst line = string.substring(beforeNewlineIndex, eolWhitespaceIndex);\n\n\t\t\tif (isOnlyWhitespace(line)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn eolWhitespaceIndex;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['empty-lines'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreEmptyLines = optionsMatches(secondaryOptions, 'ignore', 'empty-lines');\n\n\t\tif (context.fix) {\n\t\t\tfix(root);\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tconst reportFromIndex = (index) => {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t};\n\n\t\teachEolWhitespace(rootString, reportFromIndex, true);\n\n\t\tconst errorIndex = findErrorStartIndex(rootString.length, rootString, {\n\t\t\tignoreEmptyLines,\n\t\t\tisRootFirst: true,\n\t\t});\n\n\t\tif (errorIndex > -1) {\n\t\t\treportFromIndex(errorIndex);\n\t\t}\n\n\t\t/**\n\t\t * Iterate each whitespace at the end of each line of the given string.\n\t\t * @param {string} string - the source code string\n\t\t * @param {(index: number) => void} callback - callback the whitespace index at the end of each line.\n\t\t * @param {boolean} isRootFirst - set `true` if the given string is the first token of the root.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction eachEolWhitespace(string, callback, isRootFirst) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: string,\n\t\t\t\t\ttarget: ['\\n', '\\r'],\n\t\t\t\t\tcomments: 'check',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst index = findErrorStartIndex(match.startIndex, string, {\n\t\t\t\t\t\tignoreEmptyLines,\n\t\t\t\t\t\tisRootFirst,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tcallback(index);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Root} rootNode\n\t\t */\n\t\tfunction fix(rootNode) {\n\t\t\tlet isRootFirst = true;\n\n\t\t\trootNode.walk((node) => {\n\t\t\t\tfixText(\n\t\t\t\t\tnode.raws.before,\n\t\t\t\t\t(fixed) => {\n\t\t\t\t\t\tnode.raws.before = fixed;\n\t\t\t\t\t},\n\t\t\t\t\tisRootFirst,\n\t\t\t\t);\n\t\t\t\tisRootFirst = false;\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tfixText(node.raws.afterName, (fixed) => {\n\t\t\t\t\t\tnode.raws.afterName = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rawsParams = node.raws.params;\n\n\t\t\t\t\tif (rawsParams) {\n\t\t\t\t\t\tfixText(rawsParams.raw, (fixed) => {\n\t\t\t\t\t\t\trawsParams.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.params, (fixed) => {\n\t\t\t\t\t\t\tnode.params = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tconst rawsSelector = node.raws.selector;\n\n\t\t\t\t\tif (rawsSelector) {\n\t\t\t\t\t\tfixText(rawsSelector.raw, (fixed) => {\n\t\t\t\t\t\t\trawsSelector.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.selector, (fixed) => {\n\t\t\t\t\t\t\tnode.selector = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node) || isDeclaration(node)) {\n\t\t\t\t\tfixText(node.raws.between, (fixed) => {\n\t\t\t\t\t\tnode.raws.between = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst rawsValue = node.raws.value;\n\n\t\t\t\t\tif (rawsValue) {\n\t\t\t\t\t\tfixText(rawsValue.raw, (fixed) => {\n\t\t\t\t\t\t\trawsValue.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.value, (fixed) => {\n\t\t\t\t\t\t\tnode.value = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isComment(node)) {\n\t\t\t\t\tfixText(node.raws.left, (fixed) => {\n\t\t\t\t\t\tnode.raws.left = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!isStandardSyntaxComment(node)) {\n\t\t\t\t\t\tnode.raws.right = node.raws.right && fixString(node.raws.right);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.raws.right, (fixed) => {\n\t\t\t\t\t\t\tnode.raws.right = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tfixText(node.text, (fixed) => {\n\t\t\t\t\t\tnode.text = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node)) {\n\t\t\t\t\tfixText(node.raws.after, (fixed) => {\n\t\t\t\t\t\tnode.raws.after = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfixText(\n\t\t\t\trootNode.raws.after,\n\t\t\t\t(fixed) => {\n\t\t\t\t\trootNode.raws.after = fixed;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (typeof rootNode.raws.after === 'string') {\n\t\t\t\tconst lastEOL = Math.max(\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\n'),\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\r'),\n\t\t\t\t);\n\n\t\t\t\tif (lastEOL !== rootNode.raws.after.length - 1) {\n\t\t\t\t\trootNode.raws.after =\n\t\t\t\t\t\trootNode.raws.after.slice(0, lastEOL + 1) +\n\t\t\t\t\t\tfixString(rootNode.raws.after.slice(lastEOL + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string | undefined} value\n\t\t * @param {(text: string) => void} fixFn\n\t\t * @param {boolean} isRootFirst\n\t\t */\n\t\tfunction fixText(value, fixFn, isRootFirst = false) {\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\n\t\t\teachEolWhitespace(\n\t\t\t\tvalue,\n\t\t\t\t(index) => {\n\t\t\t\t\tconst newlineIndex = index + 1;\n\n\t\t\t\t\tfixed += fixString(value.slice(lastIndex, newlineIndex));\n\t\t\t\t\tlastIndex = newlineIndex;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (lastIndex) {\n\t\t\t\tfixed += value.slice(lastIndex);\n\t\t\t\tfixFn(fixed);\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst uniteSets = require('../utils/uniteSets.js');\n\nconst deprecatedMediaFeatureNames = new Set([\n\t'device-aspect-ratio',\n\t'device-height',\n\t'device-width',\n\t'max-device-aspect-ratio',\n\t'max-device-height',\n\t'max-device-width',\n\t'min-device-aspect-ratio',\n\t'min-device-height',\n\t'min-device-width',\n]);\n\nconst mediaFeatureNames = uniteSets(deprecatedMediaFeatureNames, [\n\t'any-hover',\n\t'any-pointer',\n\t'aspect-ratio',\n\t'color',\n\t'color-gamut',\n\t'color-index',\n\t'display-mode',\n\t'dynamic-range',\n\t'forced-colors',\n\t'grid',\n\t'height',\n\t'hover',\n\t'inverted-colors',\n\t'light-level',\n\t'max-aspect-ratio',\n\t'max-color',\n\t'max-color-index',\n\t'max-height',\n\t'max-monochrome',\n\t'max-resolution',\n\t'max-width',\n\t'min-aspect-ratio',\n\t'min-color',\n\t'min-color-index',\n\t'min-height',\n\t'min-monochrome',\n\t'min-resolution',\n\t'min-width',\n\t'monochrome',\n\t'orientation',\n\t'overflow-block',\n\t'overflow-inline',\n\t'pointer',\n\t'prefers-color-scheme',\n\t'prefers-contrast',\n\t'prefers-reduced-motion',\n\t'prefers-reduced-transparency',\n\t'resolution',\n\t'scan',\n\t'scripting',\n\t'update',\n\t'video-dynamic-range',\n\t'width',\n]);\n\nmodule.exports = {\n\tmediaFeatureNames,\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst { mediaFeatureNames } = require('../../reference/mediaFeatures');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (mediaFeatureName) => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-name-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreMediaFeatureNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreMediaFeatureNames', value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (vendor.prefix(value) || mediaFeatureNames.has(value.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-irregular-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\tunexpected: 'Unexpected irregular whitespace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-irregular-whitespace',\n};\n\nconst IRREGULAR_WHITESPACES = [\n\t'\\u000B', // Line Tabulation (\\v) - <VT>\n\t'\\u000C', // Form Feed (\\f) - <FF>\n\t'\\u00A0', // No-Break Space - <NBSP>\n\t'\\u0085', // Next Line\n\t'\\u1680', // Ogham Space Mark\n\t'\\u180E', // Mongolian Vowel Separator - <MVS>\n\t'\\uFEFF', // Zero Width No-Break Space - <BOM>\n\t'\\u2000', // En Quad\n\t'\\u2001', // Em Quad\n\t'\\u2002', // En Space - <ENSP>\n\t'\\u2003', // Em Space - <EMSP>\n\t'\\u2004', // Tree-Per-Em\n\t'\\u2005', // Four-Per-Em\n\t'\\u2006', // Six-Per-Em\n\t'\\u2007', // Figure Space\n\t'\\u2008', // Punctuation Space - <PUNCSP>\n\t'\\u2009', // Thin Space\n\t'\\u200A', // Hair Space\n\t'\\u200B', // Zero Width Space - <ZWSP>\n\t'\\u2028', // Line Separator\n\t'\\u2029', // Paragraph Separator\n\t'\\u202F', // Narrow No-Break Space\n\t'\\u205F', // Medium Mathematical Space\n\t'\\u3000', // Ideographic Space\n];\n\nconst IRREGULAR_WHITESPACES_PATTERN = new RegExp(`([${IRREGULAR_WHITESPACES.join('')}])`);\n\n/**\n * @param {string} str\n * @returns {string | null}\n */\nconst findIrregularWhitespace = (str) => {\n\tconst result = IRREGULAR_WHITESPACES_PATTERN.exec(str);\n\n\treturn (result && result[1]) || null;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string | undefined} value\n\t\t */\n\t\tconst validate = (node, value) => {\n\t\t\tconst issue = value && findIrregularWhitespace(value);\n\n\t\t\tif (issue) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage: messages.unexpected,\n\t\t\t\t\tnode,\n\t\t\t\t\tword: issue,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tvalidate(atRule, atRule.name);\n\t\t\tvalidate(atRule, atRule.params);\n\t\t\tvalidate(atRule, atRule.raws.before);\n\t\t\tvalidate(atRule, atRule.raws.after);\n\t\t\tvalidate(atRule, atRule.raws.afterName);\n\t\t\tvalidate(atRule, atRule.raws.between);\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tvalidate(ruleNode, ruleNode.selector);\n\t\t\tvalidate(ruleNode, ruleNode.raws.before);\n\t\t\tvalidate(ruleNode, ruleNode.raws.after);\n\t\t\tvalidate(ruleNode, ruleNode.raws.between);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalidate(decl, decl.prop);\n\t\t\tvalidate(decl, decl.value);\n\t\t\tvalidate(decl, decl.raws.before);\n\t\t\tvalidate(decl, decl.raws.between);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * Check if a rule is a keyframe one\n *\n * @param {import('postcss').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function isKeyframeRule(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(parent) && parent.name.toLowerCase() === 'keyframes';\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst selectorParser = require('postcss-selector-parser');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector, firstDuplicateLine) =>\n\t\t`Unexpected duplicate selector \"${selector}\", first used at line ${firstDuplicateLine}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tdisallowInList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldDisallowDuplicateInList = secondaryOptions && secondaryOptions.disallowInList;\n\n\t\t// The top level of this map will be rule sources.\n\t\t// Each source maps to another map, which maps rule parents to a set of selectors.\n\t\t// This ensures that selectors are only checked against selectors\n\t\t// from other rules that share the same parent and the same source.\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contextSelectorSet = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\t\t\tconst resolvedSelectorList = [\n\t\t\t\t...new Set(\n\t\t\t\t\truleNode.selectors.flatMap((selector) => resolvedNestedSelector(selector, ruleNode)),\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tconst normalizedSelectorList = resolvedSelectorList.map(normalize);\n\n\t\t\t// Sort the selectors list so that the order of the constituents\n\t\t\t// doesn't matter\n\t\t\tconst sortedSelectorList = [...normalizedSelectorList].sort().join(',');\n\n\t\t\tif (!ruleNode.source) throw new Error('The rule node must have a source');\n\n\t\t\tif (!ruleNode.source.start) throw new Error('The rule source must have a start position');\n\n\t\t\tconst selectorLine = ruleNode.source.start.line;\n\n\t\t\t// Complain if the same selector list occurs twice\n\n\t\t\tlet previousDuplicatePosition;\n\t\t\t// When `disallowInList` is true, we must parse `sortedSelectorList` into\n\t\t\t// list items.\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectorListParsed = [];\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tparseSelector(sortedSelectorList, result, ruleNode, (selectors) => {\n\t\t\t\t\tselectors.each((s) => {\n\t\t\t\t\t\tconst selector = String(s);\n\n\t\t\t\t\t\tselectorListParsed.push(selector);\n\n\t\t\t\t\t\tif (contextSelectorSet.get(selector)) {\n\t\t\t\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(sortedSelectorList);\n\t\t\t}\n\n\t\t\tif (previousDuplicatePosition) {\n\t\t\t\t// If the selector isn't nested we can use its raw value; otherwise,\n\t\t\t\t// we have to approximate something for the message -- which is close enough\n\t\t\t\tconst isNestedSelector = resolvedSelectorList.join(',') !== ruleNode.selectors.join(',');\n\t\t\t\tconst selectorForMessage = isNestedSelector\n\t\t\t\t\t? resolvedSelectorList.join(', ')\n\t\t\t\t\t: ruleNode.selector;\n\n\t\t\t\treturn report({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selectorForMessage, previousDuplicatePosition),\n\t\t\t\t\tword: selectorForMessage,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst presentedSelectors = new Set();\n\t\t\tconst reportedSelectors = new Set();\n\n\t\t\t// Or complain if one selector list contains the same selector more than once\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst normalized = normalize(selector);\n\n\t\t\t\tif (presentedSelectors.has(normalized)) {\n\t\t\t\t\tif (reportedSelectors.has(normalized)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, selectorLine),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t\treportedSelectors.add(normalized);\n\t\t\t\t} else {\n\t\t\t\t\tpresentedSelectors.add(normalized);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tfor (const selector of selectorListParsed) {\n\t\t\t\t\t// [selectorLine] will not really be accurate for multi-line\n\t\t\t\t\t// selectors, such as \"bar\" in \"foo,\\nbar {}\".\n\t\t\t\t\tcontextSelectorSet.set(selector, selectorLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontextSelectorSet.set(sortedSelectorList, selectorLine);\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} selector\n * @returns {string}\n */\nfunction normalize(selector) {\n\tif (!isStandardSyntaxSelector(selector)) {\n\t\treturn selector;\n\t}\n\n\treturn selectorParser().processSync(selector, { lossless: false });\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../../utils/arrayEqual');\n\n/**\n *\n * @param {string[][]} areas\n * @param {string} name\n * @returns {boolean}\n */\nfunction isContiguousAndRectangular(areas, name) {\n\tconst indicesByRow = areas.map((row) => {\n\t\tconst indices = [];\n\t\tlet idx = row.indexOf(name);\n\n\t\twhile (idx !== -1) {\n\t\t\tindices.push(idx);\n\t\t\tidx = row.indexOf(name, idx + 1);\n\t\t}\n\n\t\treturn indices;\n\t});\n\n\tfor (let i = 0; i < indicesByRow.length; i++) {\n\t\tfor (let j = i + 1; j < indicesByRow.length; j++) {\n\t\t\tconst x = indicesByRow[i];\n\t\t\tconst y = indicesByRow[j];\n\n\t\t\tif ((x && x.length === 0) || (y && y.length === 0)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!arrayEqual(x, y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction namedAreas(areas) {\n\tconst names = new Set(areas.flat());\n\n\tnames.delete('.');\n\n\treturn [...names];\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction findNotContiguousOrRectangular(areas) {\n\treturn namedAreas(areas).filter((name) => !isContiguousAndRectangular(areas, name));\n}\n\nmodule.exports = findNotContiguousOrRectangular;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findNotContiguousOrRectangular = require('./utils/findNotContiguousOrRectangular');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'named-grid-areas-no-invalid';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedToken: () => 'Expected cell token within string',\n\texpectedSameNumber: () => 'Expected same number of cell tokens in each string',\n\texpectedRectangle: (name) => `Expected single filled-in rectangle for \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/named-grid-areas-no-invalid',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^(?:grid|grid-template|grid-template-areas)$/i, (decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (value.toLowerCase().trim() === 'none') return;\n\n\t\t\t/** @type {Array<{ values: string[], index: number, endIndex: number }>} */\n\t\t\tconst areas = [];\n\t\t\tlet reportSent = false;\n\n\t\t\tvalueParser(value).walk(({ sourceIndex, sourceEndIndex, type, value: tokenValue }) => {\n\t\t\t\tif (type !== 'string') return;\n\n\t\t\t\tif (tokenValue === '') {\n\t\t\t\t\tcomplain(messages.expectedToken(), sourceIndex, sourceEndIndex);\n\t\t\t\t\treportSent = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tareas.push({\n\t\t\t\t\tvalues: tokenValue.trim().split(' ').filter(Boolean),\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tendIndex: sourceEndIndex,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (reportSent) return;\n\n\t\t\tconst [firstArea] = areas;\n\n\t\t\tif (firstArea === undefined) return;\n\n\t\t\tconst notSameNumberArea = areas.find(\n\t\t\t\t(area) => area.values.length !== firstArea.values.length,\n\t\t\t);\n\n\t\t\tif (notSameNumberArea !== undefined) {\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedSameNumber(),\n\t\t\t\t\tnotSameNumberArea.index,\n\t\t\t\t\tnotSameNumberArea.endIndex,\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notContiguousOrRectangular = findNotContiguousOrRectangular(areas.map((a) => a.values));\n\n\t\t\tfor (const name of notContiguousOrRectangular.sort()) {\n\t\t\t\tconst area = areas.find((a) => a.values.includes(name));\n\n\t\t\t\tassert(area);\n\t\t\t\tcomplain(messages.expectedRectangle(name), area.index, area.endIndex);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t * @param {number} endIndex\n\t\t\t */\n\t\t\tfunction complain(message, index, endIndex) {\n\t\t\t\tconst start = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: start + index,\n\t\t\t\t\tendIndex: start + endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before range operator',\n\trejectedBefore: () => 'Unexpected whitespace before range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-range-operator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckBeforeOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index);\n\t\t\t\t\tconst afterOperator = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkBeforeOperator(match, params, node, fix) {\n\t\t\t// The extra `+ 1` is because the match itself contains\n\t\t\t// the character before the operator\n\t\t\tchecker.before({\n\t\t\t\tsource: params,\n\t\t\t\tindex: match.startIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: match.startIndex - 1 + atRuleParamIndex(node),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'no-extra-semicolons';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected extra semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-extra-semicolons',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Node} node\n * @returns {number}\n */\nfunction getOffsetByNode(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Document | Container<ChildNode>'\n\tif (node.parent && node.parent.document) {\n\t\treturn 0;\n\t}\n\n\tconst root = node.root();\n\n\tif (!root.source) throw new Error('The root node must have a source');\n\n\tif (!node.source) throw new Error('The node must have a source');\n\n\tif (!node.source.start) throw new Error('The source must have a start position');\n\n\tconst string = root.source.input.css;\n\tconst nodeColumn = node.source.start.column;\n\tconst nodeLine = node.source.start.line;\n\tlet line = 1;\n\tlet column = 1;\n\tlet index = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (column === nodeColumn && nodeLine === line) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (string[i] === '\\n') {\n\t\t\tcolumn = 1;\n\t\t\tline += 1;\n\t\t} else {\n\t\t\tcolumn += 1;\n\t\t}\n\t}\n\n\treturn index;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.raws.after && root.raws.after.trim().length !== 0) {\n\t\t\tconst rawAfterRoot = root.raws.after;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixSemiIndices = [];\n\n\t\t\tstyleSearch({ source: rawAfterRoot, target: ';' }, (match) => {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\t\t\tcomplain(root.source.input.css.length - rawAfterRoot.length + match.startIndex);\n\t\t\t});\n\n\t\t\t// fix\n\t\t\tif (fixSemiIndices.length) {\n\t\t\t\troot.raws.after = removeIndices(rawAfterRoot, fixSemiIndices);\n\t\t\t}\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tif (isAtRule(node) && !isStandardSyntaxAtRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'rule' && !isStandardSyntaxRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.raws.before && node.raws.before.trim().length !== 0) {\n\t\t\t\tconst rawBeforeNode = node.raws.before;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\tconst rawBeforeIndexStart = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawBeforeNode, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex - rawBeforeIndexStart);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(getOffsetByNode(node) - rawBeforeNode.length + match.startIndex);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.before = removeIndices(rawBeforeNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.after === 'string' && node.raws.after.trim().length !== 0) {\n\t\t\t\tconst rawAfterNode = node.raws.after;\n\n\t\t\t\t/**\n\t\t\t\t * If the last child is a Less mixin followed by more than one semicolon,\n\t\t\t\t * node.raws.after will be populated with that semicolon.\n\t\t\t\t * Since we ignore Less mixins, exit here\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\t'last' in node &&\n\t\t\t\t\tnode.last &&\n\t\t\t\t\tnode.last.type === 'atrule' &&\n\t\t\t\t\t!isStandardSyntaxAtRule(node.last)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawAfterNode, target: ';' }, (match) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\t1 -\n\t\t\t\t\t\trawAfterNode.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.after = removeIndices(rawAfterNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.ownSemicolon === 'string') {\n\t\t\t\tconst rawOwnSemicolon = node.raws.ownSemicolon;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawOwnSemicolon, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\trawOwnSemicolon.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.ownSemicolon = removeIndices(rawOwnSemicolon, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} str\n\t\t * @param {number[]} indices\n\t\t * @returns {string}\n\t\t */\n\t\tfunction removeIndices(str, indices) {\n\t\t\tfor (const index of indices.reverse()) {\n\t\t\t\tstr = str.slice(0, index) + str.slice(index + 1);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-source';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty source',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-empty-source',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-first-line';\nconst noEmptyFirstLineTest = /^\\s*[\\r\\n]/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-empty-first-line',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'. Property 'lang' does not exist on type 'Source'.\n\t\tif (!validOptions || root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (!rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (noEmptyFirstLineTest.test(rootString)) {\n\t\t\tif (context.fix) {\n\t\t\t\tif (root.first == null) {\n\t\t\t\t\tthrow new Error('The root node must have the first node.');\n\t\t\t\t}\n\n\t\t\t\tif (root.first.raws.before == null) {\n\t\t\t\t\tthrow new Error('The first node must have spaces before.');\n\t\t\t\t}\n\n\t\t\t\troot.first.raws.before = root.first.raws.before.trimStart();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-invalid-double-slash-comments';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected double-slash CSS comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-invalid-double-slash-comments',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.startsWith('//')) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: decl.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tif (selector.startsWith('//')) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: ruleNode.toString(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-missing-end-of-source-newline';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing end-of-source newline',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-missing-end-of-source-newline',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source property');\n\t\t}\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\tif (root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\n\t\tif (!rootString.trim() || rootString.endsWith('\\n')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fix\n\t\tif (context.fix) {\n\t\t\troot.raws.after = context.newline;\n\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tindex: rootString.length - 1,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'number-max-precision';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-max-precision',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = 'prop' in node ? node.prop : undefined;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tconst { unit } = getDimension(valueNode);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\d*\\.(\\d+)/.exec(valueNode.value);\n\n\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (match[1].length <= primary) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\t\t\t\tconst actual = Number.parseFloat(match[0]);\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: baseIndex + valueNode.sourceIndex + match.index,\n\t\t\t\t\tword: actual.toString(),\n\t\t\t\t\tmessage: messages.expected(actual, actual.toFixed(primary)),\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports.all = require('./data/all.json').properties;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst properties = require('known-css-properties').all;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected unknown property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\tconst allValidProperties = new Set(properties);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tcheckPrefixed: [isBoolean],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldCheckPrefixed = secondaryOptions && secondaryOptions.checkPrefixed;\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!shouldCheckPrefixed && vendor.prefix(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (\n\t\t\t\tparent &&\n\t\t\t\tisRule(parent) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', parent.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {import('postcss').Node | undefined} */\n\t\t\tlet node = parent;\n\n\t\t\twhile (node && node.type !== 'root') {\n\t\t\t\tif (isAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\n\t\t\tif (allValidProperties.has(prop.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: prop,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-no-trailing-zeros';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected trailing zero(s)',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-no-trailing-zeros',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\.(\\d{0,100}?)(0+)(?:\\D|$)/.exec(valueNode.value);\n\n\t\t\t\t// match[1] is any numbers between the decimal and our trailing zero, could be empty\n\t\t\t\t// match[2] is our trailing zero(s)\n\t\t\t\tif (match == null || match[1] == null || match[2] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// our index is:\n\t\t\t\t//  the index of our valueNode +\n\t\t\t\t//  the index of our match +\n\t\t\t\t//  1 for our decimal +\n\t\t\t\t//  the length of our potential non-zero number match (match[1])\n\t\t\t\tconst index = valueNode.sourceIndex + match.index + 1 + match[1].length;\n\n\t\t\t\t// our startIndex is identical to our index except when we have only\n\t\t\t\t// trailing zeros after our decimal. in that case we don't need the decimal\n\t\t\t\t// either so we move our index back by 1.\n\t\t\t\tconst startIndex = match[1].length > 0 ? index : index - 1;\n\n\t\t\t\t// our end index is our original index + the length of our trailing zeros\n\t\t\t\tconst endIndex = index + match[2].length;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\t// this is the index of the _first_ trailing zero\n\t\t\t\t\tindex: baseIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = removeTrailingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeTrailingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeTrailingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/media-feature-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t// If there are comments in the params, the complete string\n\t\t\t// will be at atRule.raws.params.raw\n\t\t\tconst params = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst indexBoost = atRuleParamIndex(atRule);\n\t\t\t/** @type {Array<{ message: string, index: number }>} */\n\t\t\tconst problems = [];\n\n\t\t\tconst parsedParams = valueParser(params).walk((node) => {\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tconst len = valueParser.stringify(node).length;\n\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tif (/[ \\t]/.test(node.before)) {\n\t\t\t\t\t\t\tif (context.fix) node.before = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/[ \\t]/.test(node.after)) {\n\t\t\t\t\t\t\tif (context.fix) node.after = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'always') {\n\t\t\t\t\t\tif (node.before === '') {\n\t\t\t\t\t\t\tif (context.fix) node.before = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.after === '') {\n\t\t\t\t\t\t\tif (context.fix) node.after = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tatRule.params = parsedParams.toString();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const err of problems) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/function-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (nonSpaceCharacter) => `Unexpected \"${nonSpaceCharacter}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-descendant-combinator-no-non-space',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t// Return early for selectors containing comments\n\t\t\t// TODO: renable when parser and stylelint are compatible\n\t\t\tif (selector.includes('/*')) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (combinatorNode.value !== ' ') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = combinatorNode.toString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue.includes('  ') ||\n\t\t\t\t\t\tvalue.includes('\\t') ||\n\t\t\t\t\t\tvalue.includes('\\n') ||\n\t\t\t\t\t\tvalue.includes('\\r')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (context.fix && /^\\s+$/.test(value)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\tif (!combinatorNode.raws) combinatorNode.raws = {};\n\n\t\t\t\t\t\t\tcombinatorNode.raws.value = ' ';\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = new Set([primary].flat());\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator } = attributeNode;\n\n\t\t\t\t\tif (!operator || primaryValues.has(operator)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('operator');\n\t\t\t\t\tconst endIndex = index + operator.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'rule-selector-property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, selector) => `Unexpected property \"${property}\" for selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/rule-selector-property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectors = Object.keys(primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectorKey = selectors.find((selector) =>\n\t\t\t\tmatchesStringOrRegExp(ruleNode.selector, selector),\n\t\t\t);\n\n\t\t\tif (!selectorKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst disallowedProperties = primary[selectorKey];\n\n\t\t\tif (!disallowedProperties) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\truleNode.walkDecls((decl) => {\n\t\t\t\tconst { prop } = decl;\n\n\t\t\t\tif (matchesStringOrRegExp(prop, disallowedProperties)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop, ruleNode.selector),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected newline after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-name-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = new Set([primary].flat());\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator } = attributeNode;\n\n\t\t\t\t\tif (!operator || !primaryValues.has(operator)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('operator');\n\t\t\t\t\tconst endIndex = index + operator.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   checkBeforeOperator: boolean,\n *   fix: ((attributeNode: import('postcss-selector-parser').Attribute) => boolean) | null,\n * }} options\n * @returns {void}\n */\nmodule.exports = function selectorAttributeOperatorSpaceChecker(options) {\n\toptions.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, options.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\tif (!operator) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst attributeNodeString = attributeNode.toString();\n\n\t\t\t\tstyleSearch({ source: attributeNodeString, target: operator }, (match) => {\n\t\t\t\t\tconst index = options.checkBeforeOperator ? match.startIndex : match.endIndex - 1;\n\n\t\t\t\t\tcheckOperator(attributeNodeString, index, rule, attributeNode, operator);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction checkOperator(source, index, node, attributeNode, operator) {\n\t\t\toptions.locationChecker({\n\t\t\t\tsource,\n\t\t\t\tindex,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (options.fix && options.fix(attributeNode)) {\n\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg.replace(\n\t\t\t\t\t\t\toptions.checkBeforeOperator\n\t\t\t\t\t\t\t\t? operator.charAt(0)\n\t\t\t\t\t\t\t\t: operator.charAt(operator.length - 1),\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + index,\n\t\t\t\t\t\tresult: options.result,\n\t\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\"`,\n\trejectedAfter: (operator) => `Unexpected whitespace after \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst checker = whitespaceChecker('space', primary, messages);\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: false,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\t/** @type {{ operatorAfter: string, setOperatorAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { operatorAfter, setOperatorAfter } = (() => {\n\t\t\t\t\t\t\tconst rawOperator = attributeNode.raws.operator;\n\n\t\t\t\t\t\t\tif (rawOperator) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperator.slice(\n\t\t\t\t\t\t\t\t\t\tattributeNode.operator ? attributeNode.operator.length : 0,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tdelete attributeNode.raws.operator;\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces) attributeNode.raws.spaces = {};\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces.operator)\n\t\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rawSpacesOperator =\n\t\t\t\t\t\t\t\tattributeNode.raws.spaces && attributeNode.raws.spaces.operator;\n\t\t\t\t\t\t\tconst rawOperatorAfter = rawSpacesOperator && rawSpacesOperator.after;\n\n\t\t\t\t\t\t\tif (rawOperatorAfter) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawSpacesOperator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperatorAfter:\n\t\t\t\t\t\t\t\t\t(attributeNode.spaces.operator && attributeNode.spaces.operator.after) || '',\n\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.operator) attributeNode.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\tattributeNode.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (!matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected vendor-prefix \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\t//return early if property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', unprefixedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure there's a vendor prefix,\n\t\t\t// but this isn't a custom property\n\n\t\t\tif (prop[0] !== '-' || prop[1] === '-') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.property(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = isAutoprefixable.unprefix(decl.prop);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-brackets-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"[\"',\n\trejectedOpening: 'Unexpected whitespace after \"[\"',\n\texpectedClosing: 'Expected single space before \"]\"',\n\trejectedClosing: 'Unexpected whitespace before \"]\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-brackets-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tlet hasFixed;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeSelectorString = attributeNode.toString();\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: '[' }, (match) => {\n\t\t\t\t\t\tconst nextCharIsSpace = attributeSelectorString[match.startIndex + 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex + 1;\n\n\t\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: ']' }, (match) => {\n\t\t\t\t\t\tconst prevCharIsSpace = attributeSelectorString[match.startIndex - 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex - 1;\n\n\t\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixBefore(attributeNode) {\n\t\tconst spacesAttribute = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\tconst rawAttrBefore = spacesAttribute && spacesAttribute.before;\n\n\t\t/** @type {{ attrBefore: string, setAttrBefore: (fixed: string) => void }} */\n\t\tconst { attrBefore, setAttrBefore } = rawAttrBefore\n\t\t\t? {\n\t\t\t\t\tattrBefore: rawAttrBefore,\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tspacesAttribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tattrBefore:\n\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.before) || '',\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\tattributeNode.spaces.attribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ''));\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixAfter(attributeNode) {\n\t\tconst key = attributeNode.operator\n\t\t\t? attributeNode.insensitive\n\t\t\t\t? 'insensitive'\n\t\t\t\t: 'value'\n\t\t\t: 'attribute';\n\n\t\tconst rawSpaces = attributeNode.raws.spaces && attributeNode.raws.spaces[key];\n\t\tconst rawAfter = rawSpaces && rawSpaces.after;\n\n\t\tconst spaces = attributeNode.spaces[key];\n\n\t\t/** @type {{ after: string, setAfter: (fixed: string) => void }} */\n\t\tconst { after, setAfter } = rawAfter\n\t\t\t? {\n\t\t\t\t\tafter: rawAfter,\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\trawSpaces.after = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tafter: (spaces && spaces.after) || '',\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces[key]) attributeNode.spaces[key] = {};\n\n\t\t\t\t\t\t// @ts-expect-error -- TS2532: Object is possibly 'undefined'.\n\t\t\t\t\t\tattributeNode.spaces[key].after = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ''));\n\t\t}\n\t}\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>, { splitList: boolean, ignore: string[] }>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString, isRegExp],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-block'],\n\t\t\t\t\tsplitList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreInsideBlock = optionsMatches(secondaryOptions, 'ignore', 'inside-block');\n\t\tconst splitList = secondaryOptions && secondaryOptions.splitList;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (ignoreInsideBlock) {\n\t\t\t\tconst { parent } = ruleNode;\n\t\t\t\tconst isInsideBlock = parent && parent.type !== 'root';\n\n\t\t\t\tif (isInsideBlock) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (splitList) {\n\t\t\t\truleNode.selectors.forEach((selector) => {\n\t\t\t\t\tif (matchesStringOrRegExp(selector, primary)) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst { selector, raws } = ruleNode;\n\n\t\t\t\tif (matchesStringOrRegExp(selector, primary)) {\n\t\t\t\t\tconst word = (raws.selector && raws.selector.raw) || selector;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\nmodule.exports = function isStandardSyntaxCombinator(node) {\n\t// if it's not a combinator, then it's not a standard combinator\n\tif (node.type !== 'combinator') {\n\t\treturn false;\n\t}\n\n\t// Ignore reference combinators like `/deep/`\n\tif (node.value.startsWith('/') || node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\t// ignore the combinators that are the first or last node in their container\n\tif (node.parent !== undefined && node.parent !== null) {\n\t\tconst parent = node.parent;\n\n\t\tif (node === parent.first) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node === parent.last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { value } = combinatorNode;\n\t\t\t\t\tconst normalizedValue = normalizeCombinator(value);\n\n\t\t\t\t\tif (!primary.includes(normalizedValue)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { sourceIndex: index, raws } = combinatorNode;\n\t\t\t\t\tconst endIndex = index + ((raws && raws.value) || value).length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(normalizedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\n\n/**\n * @typedef {(args: { source: string, index: number, errTarget: string, err: (message: string) => void }) => void} LocationChecker\n *\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: LocationChecker,\n *   locationType: 'before' | 'after',\n *   checkedRuleName: string,\n *   fix: ((combinator: import('postcss-selector-parser').Combinator) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorCombinatorSpaceChecker(opts) {\n\tlet hasFixed;\n\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\thasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, opts.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkCombinators((node) => {\n\t\t\t\t// Ignore non-standard combinators\n\t\t\t\tif (!isStandardSyntaxCombinator(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore spaced descendant combinator\n\t\t\t\tif (/\\s/.test(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check the exist of node in prev of the combinator.\n\t\t\t\t// in case some that aren't the first begin with combinators (nesting syntax)\n\t\t\t\tif (opts.locationType === 'before' && !node.prev()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parentParentNode = node.parent && node.parent.parent;\n\n\t\t\t\t// Ignore pseudo-classes selector like `.foo:nth-child(2n + 1) {}`\n\t\t\t\tif (parentParentNode && parentParentNode.type === 'pseudo') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\t\t\t\tconst index =\n\t\t\t\t\tnode.value.length > 1 && opts.locationType === 'before'\n\t\t\t\t\t\t? sourceIndex\n\t\t\t\t\t\t: sourceIndex + node.value.length - 1;\n\n\t\t\t\tcheck(selector, node, index, rule, sourceIndex);\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {import('postcss-selector-parser').Combinator} combinator\n\t * @param {number} index\n\t * @param {import('postcss').Node} node\n\t * @param {number} sourceIndex\n\t */\n\tfunction check(source, combinator, index, node, sourceIndex) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terrTarget: combinator.value,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(combinator)) {\n\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (combinator) => `Expected single space after \"${combinator}\"`,\n\trejectedAfter: (combinator) => `Unexpected whitespace after \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tlocationType: 'after',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.after = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.after = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getRuleSelector = require('../../utils/getRuleSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (value) => `Expected quotes around \"${value}\"`,\n\trejected: (value) => `Unexpected quotes around \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-quotes',\n\tfixable: true,\n};\n\nconst acceptedQuoteMark = '\"';\n\n/** @type {import('stylelint').Rule<'always' | 'never'>} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { selector } = ruleNode;\n\n\t\t\tif (!selector.includes('[') || !selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(getRuleSelector(ruleNode), result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { operator, value, quoted } = attributeNode;\n\n\t\t\t\t\tif (!operator || !value) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!quoted && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = acceptedQuoteMark;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expected(value), attributeNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (quoted && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejected(value), attributeNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {import('postcss-selector-parser').Attribute} attrNode\n\t\t\t */\n\t\t\tfunction complain(message, attrNode) {\n\t\t\t\tconst index = attrNode.sourceIndex + attrNode.offsetOf('value');\n\t\t\t\tconst value = attrNode.raws.value || attrNode.value || '';\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {string}\n */\nmodule.exports = function getRuleSelector(ruleNode) {\n\tconst raws = ruleNode.raws;\n\n\treturn (raws.selector && raws.selector.raw) || ruleNode.selector;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'custom-media-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (mediaName, pattern) => `Expected \"${mediaName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/custom-media-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() !== 'custom-media') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [fullName, customMediaName] = atRule.params.match(/^--(\\S+)\\b/) || [];\n\n\t\t\tif (fullName === undefined || customMediaName === undefined) {\n\t\t\t\tthrow new Error(`Unexpected at-rule params: \"${atRule.params}\"`);\n\t\t\t}\n\n\t\t\tif (regexpPattern.test(customMediaName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(atRule);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [fullName, primary],\n\t\t\t\tnode: atRule,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + fullName.length,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get raw selector so we can allow end-of-line comments, e.g.\n\t\t\t// a, /* comment */\n\t\t\t// b {}\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixIndices = [];\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: selector,\n\t\t\t\t\ttarget: ',',\n\t\t\t\t\tfunctionArguments: 'skip',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst nextChars = selector.slice(match.endIndex);\n\n\t\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t\t// ending the comment so we're fine\n\t\t\t\t\tif (/^\\s+\\/\\//.test(nextChars)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\t\tconst indextoCheckAfter = /^\\s+\\/\\*/.test(nextChars)\n\t\t\t\t\t\t? selector.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t\t: match.startIndex;\n\n\t\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\t\tsource: selector,\n\t\t\t\t\t\tindex: indextoCheckAfter,\n\t\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tfixIndices.push(indextoCheckAfter + 1);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: match.startIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixIndices.length) {\n\t\t\t\tlet fixedSelector = selector;\n\n\t\t\t\tfor (const index of fixIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = fixedSelector.slice(0, index);\n\t\t\t\t\tlet afterSelector = fixedSelector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = context.newline + afterSelector;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tfixedSelector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findAnimationName = require('../../utils/findAnimationName');\nconst { animationNameKeywords } = require('../../reference/keywords');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-unknown-animations';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (animationName) => `Unexpected unknown animation name \"${animationName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-unknown-animations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declaredAnimations = new Set();\n\n\t\troot.walkAtRules(/(-(moz|webkit)-)?keyframes/i, (atRule) => {\n\t\t\tdeclaredAnimations.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'animation' || decl.prop.toLowerCase() === 'animation-name') {\n\t\t\t\tconst animationNames = findAnimationName(decl.value);\n\n\t\t\t\tif (animationNames.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const animationNameNode of animationNames) {\n\t\t\t\t\tif (animationNameKeywords.has(animationNameNode.value.toLowerCase())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declaredAnimations.has(animationNameNode.value)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst begin = declarationValueIndex(decl);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(animationNameNode.value),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: begin + animationNameNode.sourceIndex,\n\t\t\t\t\t\tendIndex: begin + animationNameNode.sourceEndIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDimension = require('./getDimension');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isVariable = require('./isVariable');\nconst { animationShorthandKeywords, basicKeywords } = require('../reference/keywords');\nconst postcssValueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\nmodule.exports = function findAnimationName(value) {\n\t/** @type {Node[]} */\n\tconst animationNames = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (nodes.length === 1 && nodes[0] && basicKeywords.has(nodes[0].value.toLowerCase())) {\n\t\treturn [nodes[0]];\n\t}\n\n\tlet shouldBeIgnored = false;\n\n\tvalueNodes.walk((valueNode) => {\n\t\tif (shouldBeIgnored) return;\n\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (valueNode.type !== 'word') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non-standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\t// Cannot find animation name if shorthand has non-standard syntax value (#5532)\n\t\t\tshouldBeIgnored = true;\n\t\t\tanimationNames.length = 0; // clears animationNames\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other animation parts\n\t\tif (animationShorthandKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore numbers with units\n\t\tconst { unit } = getDimension(valueNode);\n\n\t\tif (unit || unit === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tanimationNames.push(valueNode);\n\t});\n\n\treturn animationNames;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-leading-zero';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a leading zero',\n\trejected: 'Unexpected leading zero',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/number-leading-zero',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst neverFixPositions = [];\n\t\t\t/** @type {Array<{ index: number }>} */\n\t\t\tconst alwaysFixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check leading zero\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tconst match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 2 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n\t\t\t\t\t// for regex. And we need the index of \".5\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - match[1].length;\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\talwaysFixPositions.unshift({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.expected, node, baseIndex + index);\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never') {\n\t\t\t\t\tconst match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null || match[2] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 3 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-00.5\"\n\t\t\t\t\t// as an input for regex. And we need the index of \"00\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneverFixPositions.unshift({\n\t\t\t\t\t\t\tstartIndex: index,\n\t\t\t\t\t\t\t// match[1].length is the length of our matched zero(s)\n\t\t\t\t\t\t\tendIndex: index + match[1].length,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex = isAtRule(node) ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.rejected, node, baseIndex + index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (alwaysFixPositions.length) {\n\t\t\t\tfor (const fixPosition of alwaysFixPositions) {\n\t\t\t\t\tconst index = fixPosition.index;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = addLeadingZero(node.params, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = addLeadingZero(node.value, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (neverFixPositions.length) {\n\t\t\t\tfor (const fixPosition of neverFixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\t\tnode.params = removeLeadingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeLeadingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} index\n * @returns {string}\n */\nfunction addLeadingZero(input, index) {\n\t// eslint-disable-next-line prefer-template\n\treturn input.slice(0, index) + '0' + input.slice(index);\n}\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-id-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-id-pattern',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkIds((selectorNode) => {\n\t\t\t\t\tif (normalizedPattern.test(selectorNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selector = String(selectorNode);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst {\n\taNPlusBOfSNotationPseudoClasses,\n\tlogicalCombinationsPseudoClasses,\n} = require('../reference/selectors');\n\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Node} node - postcss-selector-parser node (of type pseudo)\n * @return {node is import('postcss-selector-parser').Pseudo} If `true`, the node is a context-functional pseudo-class\n */\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n\tif (node.type === 'pseudo') {\n\t\tconst normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n\n\t\treturn (\n\t\t\tlogicalCombinationsPseudoClasses.has(normalisedParentName) ||\n\t\t\taNPlusBOfSNotationPseudoClasses.has(normalisedParentName)\n\t\t);\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * @param {unknown} value\n */\nmodule.exports = function isNonNegativeInteger(value) {\n\treturn Number.isInteger(value) && typeof value === 'number' && value >= 0;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} compound ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-compound-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Finds actual selectors in selectorNode object and checks them.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tlet compoundCount = 1;\n\n\t\t\tselectorNode.each((childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Compound selectors are separated by combinators, so increase count when meeting one\n\t\t\t\tif (childNode.type === 'combinator') {\n\t\t\t\t\tcompoundCount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tselectorNode.type !== 'root' &&\n\t\t\t\tselectorNode.type !== 'pseudo' &&\n\t\t\t\tcompoundCount > primary\n\t\t\t) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector if there is a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Process each resolved selector with `checkSelector` via postcss-selector-parser\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'property-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/property-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { parent } = decl;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRule(parent)) {\n\t\t\t\tconst { selector } = parent;\n\n\t\t\t\tif (selector && optionsMatches(secondaryOptions, 'ignoreSelectors', selector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst expectedProp = primary === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n\t\t\tif (prop === expectedProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = expectedProp;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(prop, expectedProp),\n\t\t\t\tword: prop,\n\t\t\t\tnode: decl,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\"`,\n\trejectedBefore: (operator) => `Unexpected whitespace before \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-operator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: true,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\tconst rawAttr = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\t\t\t\t\tconst rawAttrAfter = rawAttr && rawAttr.after;\n\n\t\t\t\t\t\t/** @type {{ attrAfter: string, setAttrAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { attrAfter, setAttrAfter } = rawAttrAfter\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tattrAfter: rawAttrAfter,\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawAttr.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\tattrAfter:\n\t\t\t\t\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.after) || '',\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.spaces.attribute.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  };\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorParser = require('postcss-selector-parser');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-universal';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} universal ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-universal',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAfterCombinators: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\t// All logical combinations will be resolved as nested selector in `postcss-resolve-nested-selector`\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tconst prevChildNode = childNode.prev();\n\t\t\t\tconst prevChildNodeValue = prevChildNode && prevChildNode.value;\n\n\t\t\t\tif (childNode.type === 'universal') {\n\t\t\t\t\tif (!optionsMatches(secondaryOptions, 'ignoreAfterCombinators', prevChildNodeValue)) {\n\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectors = [];\n\n\t\t\tselectorParser()\n\t\t\t\t.astSync(ruleNode.selector)\n\t\t\t\t.walk((node) => {\n\t\t\t\t\tif (node.type === 'selector') {\n\t\t\t\t\t\tselectors.push(String(node).trim());\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tfor (const selector of selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix: ((rule: import('postcss').Rule, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorListCommaWhitespaceChecker(opts) {\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: selector,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckDelimiter(selector, match.startIndex, rule);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Rule} node\n\t */\n\tfunction checkDelimiter(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-newline-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst spaceIndex = beforeSelector.search(/\\s+$/);\n\n\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\tbeforeSelector =\n\t\t\t\t\t\t\t\tbeforeSelector.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\tbeforeSelector.slice(spaceIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbeforeSelector += context.newline;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'never-multi-line') {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = selector.slice(0, index + 1);\n\t\t\t\t\tlet afterSelector = selector.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.includes('always')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.includes('never')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity, compare } = require('@csstools/selector-specificity');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst {\n\taNPlusBOfSNotationPseudoClasses,\n\taNPlusBNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n} = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assertNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) => `Expected \"${selector}\" to have a specificity no more than \"${max}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-specificity',\n};\n\n/** @typedef {import('@csstools/selector-specificity').Specificity} Specificity */\n\n/**\n * Return a zero specificity. We need a new instance each time so that it can mutated.\n *\n * @returns {Specificity}\n */\nconst zeroSpecificity = () => ({ a: 0, b: 0, c: 0 });\n\n/**\n * Calculate the sum of given specificities.\n *\n * @param {Specificity[]} specificities\n * @returns {Specificity}\n */\nconst specificitySum = (specificities) => {\n\tconst sum = zeroSpecificity();\n\n\tfor (const { a, b, c } of specificities) {\n\t\tsum.a += a;\n\t\tsum.b += b;\n\t\tsum.c += c;\n\t}\n\n\treturn sum;\n};\n\n/** @type {import('stylelint').Rule<string>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t// Check that the max specificity is in the form \"a,b,c\"\n\t\t\t\t\t(spec) => isString(spec) && /^\\d+,\\d+,\\d+$/.test(spec),\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Calculate the specificity of a simple selector (type, attribute, class, ID, or pseudos's own value).\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst simpleSpecificity = (node) => {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', node.toString())) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\treturn selectorSpecificity(node);\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of the most specific direct child.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst maxChildSpecificity = (node) =>\n\t\t\tnode.reduce((maxSpec, child) => {\n\t\t\t\tconst childSpecificity = nodeSpecificity(child); // eslint-disable-line no-use-before-define\n\n\t\t\t\treturn compare(childSpecificity, maxSpec) > 0 ? childSpecificity : maxSpec;\n\t\t\t}, zeroSpecificity());\n\n\t\t/**\n\t\t * Calculate the specificity of a pseudo selector including own value and children.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Pseudo} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst pseudoSpecificity = (node) => {\n\t\t\t// `node.toString()` includes children which should be processed separately,\n\t\t\t// so use `node.value` instead\n\t\t\tconst ownValue = node.value.toLowerCase();\n\n\t\t\tif (ownValue === ':where') {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tlet ownSpecificity;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', ownValue)) {\n\t\t\t\townSpecificity = zeroSpecificity();\n\t\t\t} else if (aNPlusBOfSNotationPseudoClasses.has(ownValue.replace(/^:/, ''))) {\n\t\t\t\t// TODO: We need to support `<complex-selector-list>` in `ignoreSelectors`. E.g. `:nth-child(even of .foo)`.\n\t\t\t\treturn selectorSpecificity(node);\n\t\t\t} else {\n\t\t\t\townSpecificity = selectorSpecificity(node.clone({ nodes: [] }));\n\t\t\t}\n\n\t\t\treturn specificitySum([ownSpecificity, maxChildSpecificity(node)]);\n\t\t};\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tconst shouldSkipPseudoClassArgument = (node) => {\n\t\t\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t\t\t// as \"tags\", so we need to ignore them ourselves.\n\t\t\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t\t\t// should be the :nth-child pseudo node.\n\t\t\tconst parentNode = node.parent && node.parent.parent;\n\n\t\t\tif (parentNode && parentNode.type === 'pseudo' && parentNode.value) {\n\t\t\t\tconst pseudoClass = parentNode.value.toLowerCase().replace(/^:/, '');\n\n\t\t\t\treturn (\n\t\t\t\t\taNPlusBNotationPseudoClasses.has(pseudoClass) || linguisticPseudoClasses.has(pseudoClass)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of a node parsed by `postcss-selector-parser`.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst nodeSpecificity = (node) => {\n\t\t\tif (shouldSkipPseudoClassArgument(node)) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'attribute':\n\t\t\t\tcase 'class':\n\t\t\t\tcase 'id':\n\t\t\t\tcase 'tag':\n\t\t\t\t\treturn simpleSpecificity(node);\n\t\t\t\tcase 'pseudo':\n\t\t\t\t\treturn pseudoSpecificity(node);\n\t\t\t\tcase 'selector':\n\t\t\t\t\t// Calculate the sum of all the direct children\n\t\t\t\t\treturn specificitySum(node.map((n) => nodeSpecificity(n)));\n\t\t\t\tdefault:\n\t\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\t\t};\n\n\t\tconst [a, b, c] = primary.split(',').map((s) => Number.parseFloat(s));\n\n\t\tassertNumber(a);\n\t\tassertNumber(b);\n\t\tassertNumber(c);\n\n\t\tconst maxSpecificity = { a, b, c };\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector in the eventuality we have a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Skip non-standard syntax selectors\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\t// Check if the selector specificity exceeds the allowed maximum\n\t\t\t\t\t\tif (compare(maxChildSpecificity(selectorTree), maxSpecificity) > 0) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tmessage: messages.expected(resolvedSelector, primary),\n\t\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-attribute';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} attribute ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-attribute',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAttributes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type !== 'attribute') {\n\t\t\t\t\t// Not an attribute node -> ignore\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAttributes', childNode.attribute)) {\n\t\t\t\t\t// it's an attribute that is supposed to be ignored\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\ttotal += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-combinators';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${\n\t\t\tmax === 1 ? 'combinator' : 'combinators'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-combinators',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'combinator') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(\n\t\t\t\truleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector,\n\t\t\t\tresult,\n\t\t\t\truleNode,\n\t\t\t\t(selectorTree) => {\n\t\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\t\tconst pseudo = pseudoNode.value;\n\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(pseudo)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpseudo.includes('::') ||\n\t\t\t\t\t\t\tlevelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expectedPseudo =\n\t\t\t\t\t\t\tprimary === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n\t\t\t\t\t\tif (pseudo === expectedPseudo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tpseudoNode.value = expectedPseudo;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(pseudo, expectedPseudo),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-nested-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-nested-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (ruleNode.parent && ruleNode.parent.type !== 'rule') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (normalizedPattern.test(selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: selector,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { keyframeSelectorKeywords } = require('../reference/keywords');\n\n/**\n * Check whether a string is a keyframe selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isKeyframeSelector(selector) {\n\tif (keyframeSelectorKeywords.has(selector)) {\n\t\treturn true;\n\t}\n\n\t// Percentages\n\tif (/^(?:\\d+|\\d*\\.\\d+)%$/.test(selector)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolveNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-class-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) => `Expected \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-class-pattern',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp, { resolveNestedSelector: boolean }>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isRegExp, isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tresolveNestedSelectors: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldResolveNestedSelectors = Boolean(\n\t\t\tsecondaryOptions && secondaryOptions.resolveNestedSelectors,\n\t\t);\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst { selector, selectors } = ruleNode;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only bother resolving selectors that have an interpolating &\n\t\t\tif (shouldResolveNestedSelectors && hasInterpolatingAmpersand(selector)) {\n\t\t\t\tfor (const nestedSelector of resolveNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(nestedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(nestedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparseSelector(selector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tselectorNode.walkClasses((classNode) => {\n\t\t\t\tconst { value, sourceIndex: index } = classNode;\n\n\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selector = String(classNode);\n\n\t\t\t\t// TODO: `selector` may be resolved. So, getting its raw value may be pretty hard.\n\t\t\t\t//       It means `endIndex` may be inaccurate (though non-standard selectors).\n\t\t\t\t//\n\t\t\t\t//       For example, given \".abc { &_x {} }\".\n\t\t\t\t//       Then, an expected raw `selector` is \"&_x\",\n\t\t\t\t//       but, an actual `selector` is \".abc_x\".\n\t\t\t\tconst endIndex = index + selector.length;\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tmessageArgs: [selector, primary],\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * An \"interpolating ampersand\" means an \"&\" used to interpolate\n * within another simple selector, rather than an \"&\" that\n * stands on its own as a simple selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nfunction hasInterpolatingAmpersand(selector) {\n\tfor (const [i, char] of Array.from(selector).entries()) {\n\t\tif (char !== '&') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst prevChar = selector.charAt(i - 1);\n\n\t\tif (prevChar && !isCombinator(prevChar)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst nextChar = selector.charAt(i + 1);\n\n\t\tif (nextChar && !isCombinator(nextChar)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} x\n * @returns {boolean}\n */\nfunction isCombinator(x) {\n\treturn /[\\s+>~]/.test(x);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newSelectorString = selector\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = newSelectorString;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = newSelectorString;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tviolatedLFNewLinesRegex.test(selector) ||\n\t\t\t\tviolatedCRLFNewLinesRegex.test(selector)\n\t\t\t) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *  @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t *  @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'class') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-id';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-id',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreContextFunctionalPseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'selector' ||\n\t\t\t\t\t(isContextFunctionalPseudoClass(childNode) &&\n\t\t\t\t\t\t!isIgnoredContextFunctionalPseudoClass(childNode))\n\t\t\t\t) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'id') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredContextFunctionalPseudoClass(node) {\n\t\t\treturn (\n\t\t\t\tnode.type === 'pseudo' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreContextFunctionalPseudoClasses', node.value)\n\t\t\t);\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected vendor-prefix \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-no-vendor-prefix',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst { value } = pseudoNode;\n\n\t\t\t\t\tif (!isAutoprefixable.selector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\truleNode.selector = isAutoprefixable.unprefix(selector);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransformSelector(result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst pseudoElement = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(pseudoElement)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!pseudoElement.includes('::') &&\n\t\t\t\t\t\t!levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst expectedPseudoElement =\n\t\t\t\t\t\tprimary === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n\t\t\t\t\tif (pseudoElement === expectedPseudoElement) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudoNode.value = expectedPseudoElement;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(pseudoElement, expectedPseudoElement),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst { pseudoElements } = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-element selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoElements: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.slice(0, 2) !== '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (vendor.prefix(name) || pseudoElements.has(name.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.charAt(1) !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unexpected, expected) => `Expected \"${unexpected}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/shorthand-property-no-redundant-values',\n\tfixable: true,\n};\n\nconst propertiesWithShorthandNotation = new Set([\n\t'margin',\n\t'padding',\n\t'border-color',\n\t'border-radius',\n\t'border-style',\n\t'border-width',\n\t'grid-gap',\n]);\n\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction hasIgnoredCharacters(value) {\n\treturn ignoredCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {string} property\n * @returns {boolean}\n */\nfunction isShorthandProperty(property) {\n\treturn propertiesWithShorthandNotation.has(property);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {string[]}\n */\nfunction canCondense(top, right, bottom, left) {\n\tconst lowerTop = top.toLowerCase();\n\tconst lowerRight = right.toLowerCase();\n\tconst lowerBottom = bottom && bottom.toLowerCase();\n\tconst lowerLeft = left && left.toLowerCase();\n\n\tif (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top];\n\t}\n\n\tif (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right];\n\t}\n\n\tif (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right, bottom];\n\t}\n\n\treturn [top, right, bottom, left];\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToOneValue(top, right, bottom, left) {\n\tif (top !== right) {\n\t\treturn false;\n\t}\n\n\treturn (top === bottom && (bottom === left || !left)) || (!bottom && !left);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n\treturn (top === bottom && right === left) || (top === bottom && !left && top !== right);\n}\n\n/**\n * @param {string} _top\n * @param {string} right\n * @param {string} _bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToThreeValues(_top, right, _bottom, left) {\n\treturn right === left;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n\t\t\tif (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst valuesToShorthand = [];\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvaluesToShorthand.push(valueParser.stringify(valueNode));\n\t\t\t});\n\n\t\t\tif (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst shortestForm = canCondense(\n\t\t\t\tvaluesToShorthand[0] || '',\n\t\t\t\tvaluesToShorthand[1] || '',\n\t\t\t\tvaluesToShorthand[2] || '',\n\t\t\t\tvaluesToShorthand[3] || '',\n\t\t\t);\n\t\t\tconst shortestFormString = shortestForm.filter(Boolean).join(' ');\n\t\t\tconst valuesFormString = valuesToShorthand.join(' ');\n\n\t\t\tif (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.value = decl.value.replace(value, shortestFormString);\n\t\t\t} else {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value, shortestFormString),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst {\n\taNPlusBNotationPseudoClasses,\n\taNPlusBOfSNotationPseudoClasses,\n\tlinguisticPseudoClasses,\n\tshadowTreePseudoElements,\n} = require('../reference/selectors');\n\n/**\n * Check whether a type selector is standard\n *\n * @param {import('postcss-selector-parser').Tag} node postcss-selector-parser node (of type tag)\n * @return {boolean} If `true`, the type selector is standard\n */\nmodule.exports = function isStandardSyntaxTypeSelector(node) {\n\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t// as \"tags\", so we need to ignore them ourselves.\n\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t// should be the :nth-child pseudo node.\n\tif (!node.parent || !node.parent.parent) {\n\t\treturn false;\n\t}\n\n\tconst _node$parent$parent = node.parent.parent;\n\tconst parentType = _node$parent$parent.type;\n\tconst parentValue = _node$parent$parent.value;\n\n\tif (parentValue) {\n\t\tconst normalisedParentName = parentValue.toLowerCase().replace(/:+/, '');\n\n\t\tif (\n\t\t\tparentType === 'pseudo' &&\n\t\t\t(aNPlusBNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\taNPlusBOfSNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tlinguisticPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tshadowTreePseudoElements.has(normalisedParentName))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// &-bar is a nesting selector combined with a suffix\n\tif (node.prev() && node.prev().type === 'nesting') {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// Reference combinators like `/deep/`\n\tif (node.value.startsWith('/') && node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected qualifying type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-no-qualifying-type',\n};\n\nconst selectorCharacters = ['#', '.', '['];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isSelectorCharacters(value) {\n\treturn selectorCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {import('postcss-selector-parser').Tag} node\n * @returns {Array<import('postcss-selector-parser').Node>}\n */\nfunction getRightNodes(node) {\n\tconst result = [];\n\n\t/** @type {import('postcss-selector-parser').Node} */\n\tlet rightNode = node;\n\n\twhile ((rightNode = rightNode.next())) {\n\t\tif (rightNode.type === 'combinator') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(rightNode);\n\t}\n\n\treturn result;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [true],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['attribute', 'class', 'id'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreId = optionsMatches(secondaryOptions, 'ignore', 'id');\n\t\tconst ignoreClass = optionsMatches(secondaryOptions, 'ignore', 'class');\n\t\tconst ignoreAttribute = optionsMatches(secondaryOptions, 'ignore', 'attribute');\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isSelectorCharacters(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-selector-parser').Root} selectorAST\n\t\t\t */\n\t\t\tfunction checkSelector(selectorAST) {\n\t\t\t\tselectorAST.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) return;\n\n\t\t\t\t\tconst selectorParent = tagNode.parent;\n\n\t\t\t\t\tif (selectorParent && selectorParent.nodes.length === 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectorNodes = getRightNodes(tagNode);\n\n\t\t\t\t\tfor (const selectorNode of selectorNodes) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(selectorNode.type === 'id' && !ignoreId) ||\n\t\t\t\t\t\t\t(selectorNode.type === 'class' && !ignoreClass) ||\n\t\t\t\t\t\t\t(selectorNode.type === 'attribute' && !ignoreAttribute)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst selector = [tagNode, ...selectorNodes].join('').trimStart();\n\n\t\t\t\t\t\t\tcomplain(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const resolvedSelector of resolvedNestedSelector(ruleNode.selector, ruleNode)) {\n\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, checkSelector);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} selector\n\t\t\t */\n\t\t\tfunction complain(selector) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-attribute-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeName = attributeNode.qualifiedAttribute;\n\n\t\t\t\t\tif (!matchesStringOrRegExp(attributeName, primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = attributeNode.sourceIndex + attributeNode.offsetOf('attribute');\n\t\t\t\t\tconst endIndex = index + attributeName.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(attributeName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-parentheses-space-inside',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (!pseudoNode.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paramString = pseudoNode.map((node) => String(node)).join(',');\n\t\t\t\t\tconst nextCharIsSpace = paramString.startsWith(' ');\n\t\t\t\t\tconst openIndex = pseudoNode.sourceIndex + pseudoNode.value.length + 1;\n\n\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst prevCharIsSpace = paramString.endsWith(' ');\n\t\t\t\t\tconst closeIndex = openIndex + paramString.length - 1;\n\n\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setFirstNodeSpaceBefore(node, value) {\n\tconst target = node.first;\n\n\tif (target.type === 'selector') {\n\t\tsetFirstNodeSpaceBefore(target, value);\n\t} else {\n\t\ttarget.spaces.before = value;\n\t}\n}\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setLastNodeSpaceAfter(node, value) {\n\tconst target = node.last;\n\n\tif (target.type === 'selector') {\n\t\tsetLastNodeSpaceAfter(target, value);\n\t} else {\n\t\ttarget.spaces.after = value;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-colon-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} colon pseudo-element notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-colon-notation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['single', 'double'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixedColon = '';\n\n\t\tif (primary === 'single') {\n\t\t\tfixedColon = ':';\n\t\t} else if (primary === 'double') {\n\t\t\tfixedColon = '::';\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// get out early if no pseudo elements or classes\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectors) => {\n\t\t\t\tselectors.walkPseudos((pseudo) => {\n\t\t\t\t\tconst pseudoElement = pseudo.value.replace(/:/g, '');\n\n\t\t\t\t\tif (!levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isDouble = pseudo.value.startsWith('::');\n\n\t\t\t\t\tif (primary === 'single' && !isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'double' && isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudo.replaceWith(pseudo.clone({ value: fixedColon + pseudoElement }));\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tendIndex: pseudo.sourceIndex + (isDouble ? 2 : 1),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tlet emptyLines = 0;\n\tlet lastIndex = -1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst getChars = replaceEmptyLines.bind(null, primary);\n\n\t\t/**\n\t\t * 1. walk nodes & replace enterchar\n\t\t * 2. deal with special case.\n\t\t */\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif (node.type === 'comment' && !ignoreComments) {\n\t\t\t\t\tnode.raws.left = getChars(node.raws.left);\n\t\t\t\t\tnode.raws.right = getChars(node.raws.right);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = getChars(node.raws.before);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// first node\n\t\t\tconst firstNodeRawsBefore = root.first && root.first.raws.before;\n\t\t\t// root raws\n\t\t\tconst rootRawsAfter = root.raws.after;\n\n\t\t\t// not document node\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tif ((root.document && root.document.constructor.name) !== 'Document') {\n\t\t\t\tif (firstNodeRawsBefore) {\n\t\t\t\t\troot.first.raws.before = getChars(firstNodeRawsBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (rootRawsAfter) {\n\t\t\t\t\t// when max setted 0, should be treated as 1 in this situation.\n\t\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter, true);\n\t\t\t\t}\n\t\t\t} else if (rootRawsAfter) {\n\t\t\t\t// `css in js` or `html`\n\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\temptyLines = 0;\n\t\tlastIndex = -1;\n\t\tconst rootString = root.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: rootString,\n\t\t\t\ttarget: /\\r\\n/.test(rootString) ? '\\r\\n' : '\\n',\n\t\t\t\tcomments: ignoreComments ? 'skip' : 'check',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckMatch(rootString, match.startIndex, match.endIndex, root);\n\t\t\t},\n\t\t);\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} matchStartIndex\n\t\t * @param {number} matchEndIndex\n\t\t * @param {import('postcss').Root} node\n\t\t */\n\t\tfunction checkMatch(source, matchStartIndex, matchEndIndex, node) {\n\t\t\tconst eof = matchEndIndex === source.length;\n\t\t\tlet problem = false;\n\n\t\t\t// Additional check for beginning of file\n\t\t\tif (!matchStartIndex || lastIndex === matchStartIndex) {\n\t\t\t\temptyLines++;\n\t\t\t} else {\n\t\t\t\temptyLines = 0;\n\t\t\t}\n\n\t\t\tlastIndex = matchEndIndex;\n\n\t\t\tif (emptyLines > primary) problem = true;\n\n\t\t\tif (!eof && !problem) return;\n\n\t\t\tif (problem) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: matchStartIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Additional check for end of file\n\t\t\tif (eof && primary) {\n\t\t\t\temptyLines++;\n\n\t\t\t\tif (emptyLines > primary && isEofNode(result.root, node)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: matchEndIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} maxLines\n\t\t * @param {unknown} str\n\t\t * @param {boolean?} isSpecialCase\n\t\t */\n\t\tfunction replaceEmptyLines(maxLines, str, isSpecialCase = false) {\n\t\t\tconst repeatTimes = isSpecialCase ? maxLines : maxLines + 1;\n\n\t\t\tif (repeatTimes === 0 || typeof str !== 'string') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst emptyLFLines = '\\n'.repeat(repeatTimes);\n\t\t\tconst emptyCRLFLines = '\\r\\n'.repeat(repeatTimes);\n\n\t\t\treturn /(?:\\r\\n)+/.test(str)\n\t\t\t\t? str.replace(/(\\r\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length / 2 > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyCRLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  })\n\t\t\t\t: str.replace(/(\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  });\n\t\t}\n\t};\n};\n\n/**\n * Checks whether the given node is the last node of file.\n * @param {import('stylelint').PostcssResult['root']} document - the document node with `postcss-html` and `postcss-jsx`.\n * @param {import('postcss').Root} root - the root node of css\n */\nfunction isEofNode(document, root) {\n\tif (!document || document.constructor.name !== 'Document' || !('type' in document)) {\n\t\treturn true;\n\t}\n\n\t// In the `postcss-html` and `postcss-jsx` syntax, checks that there is text after the given node.\n\tlet after;\n\n\tif (root === document.last) {\n\t\tafter = document.raws && document.raws.codeAfter;\n\t} else {\n\t\t// @ts-expect-error -- TS2345: Argument of type 'Root' is not assignable to parameter of type 'number | ChildNode'.\n\t\tconst rootIndex = document.index(root);\n\n\t\tconst nextNode = document.nodes[rootIndex + 1];\n\n\t\tafter = nextNode && nextNode.raws && nextNode.raws.codeBefore;\n\t}\n\n\treturn !String(after).trim();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomSelector = require('../../utils/isCustomSelector');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst {\n\tatRulePagePseudoClasses,\n\tpseudoClasses,\n\tpseudoElements,\n\twebkitScrollbarPseudoClasses,\n\twebkitScrollbarPseudoElements,\n} = require('../../reference/selectors');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-class selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t * @param {import('postcss').ChildNode} node\n\t\t */\n\t\tfunction check(selector, node) {\n\t\t\tparseSelector(selector, result, node, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isCustomSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet index = null;\n\t\t\t\t\tconst name = value.slice(1).toLowerCase();\n\n\t\t\t\t\tif (isAtRule(node) && node.name === 'page') {\n\t\t\t\t\t\tif (atRulePagePseudoClasses.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (vendor.prefix(name) || pseudoClasses.has(name) || pseudoElements.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {import('postcss-selector-parser').Base} */\n\t\t\t\t\t\tlet prevPseudoElement = pseudoNode;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevPseudoElement = /** @type {import('postcss-selector-parser').Base} */ (\n\t\t\t\t\t\t\t\tprevPseudoElement.prev()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (prevPseudoElement);\n\n\t\t\t\t\t\tif (prevPseudoElement) {\n\t\t\t\t\t\t\tconst prevPseudoElementValue = prevPseudoElement.value.toLowerCase().slice(2);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\twebkitScrollbarPseudoElements.has(prevPseudoElementValue) &&\n\t\t\t\t\t\t\t\twebkitScrollbarPseudoClasses.has(name)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = pseudoNode.sourceIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tlet selector = null;\n\n\t\t\tif (node.type === 'rule') {\n\t\t\t\tif (!isStandardSyntaxRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.selector;\n\t\t\t} else if (isAtRule(node) && node.name === 'page' && node.params) {\n\t\t\t\tif (!isStandardSyntaxAtRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.params;\n\t\t\t}\n\n\t\t\t// Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\t\t\tif (!selector) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(selector, node);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a selector is a custom one\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isCustomSelector(selector) {\n\treturn selector.startsWith(':--');\n};\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'unicode-bom';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected Unicode BOM',\n\trejected: 'Unexpected Unicode BOM',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unicode-bom',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (\n\t\t\t!validOptions ||\n\t\t\t!root.source ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\t\troot.source.inline ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'lang' does not exist on type 'Source'.\n\t\t\troot.source.lang === 'object-literal' ||\n\t\t\t// Ignore HTML documents\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\troot.document !== undefined\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { hasBOM } = root.source.input;\n\n\t\tif (primary === 'always' && !hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (primary === 'never' && hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'function') {\n\t\t\t\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t\tif (valueLowerCase === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!unit || !number || (unit && primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t'prop' in node &&\n\t\t\t\t\tsecondaryOptions &&\n\t\t\t\t\toptionsMatches(secondaryOptions.ignoreProperties, unit.toLowerCase(), node.prop)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => check(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-element-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.charAt(1) !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomElement = require('../../utils/isCustomElement');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst { htmlTypeSelectors } = require('../../reference/selectors');\nconst mathMLTags = require('mathml-tag-names');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst svgTags = require('svg-tags');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-type-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-type-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-elements', 'default-namespace'],\n\t\t\t\t\tignoreNamespaces: [isString, isRegExp],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'custom-elements') &&\n\t\t\t\t\t\tisCustomElement(tagNode.value)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'default-namespace') &&\n\t\t\t\t\t\t!(typeof tagNode.namespace === 'string')\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreNamespaces', tagNode.namespace)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tagNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tagName = tagNode.value;\n\t\t\t\t\tconst tagNameLowerCase = tagName.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\thtmlTypeSelectors.has(tagNameLowerCase) ||\n\t\t\t\t\t\t// SVG tags are case-sensitive\n\t\t\t\t\t\tsvgTags.includes(tagName) ||\n\t\t\t\t\t\tmathMLTags.includes(tagNameLowerCase)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(tagName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: tagNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: tagName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { htmlTypeSelectors } = require('../reference/selectors');\nconst mathMLTags = require('mathml-tag-names');\nconst svgTags = require('svg-tags');\n\n/**\n * Check whether a type selector is a custom element\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function isCustomElement(selector) {\n\tif (!/^[a-z]/.test(selector)) {\n\t\treturn false;\n\t}\n\n\tif (!selector.includes('-')) {\n\t\treturn false;\n\t}\n\n\tconst selectorLowerCase = selector.toLowerCase();\n\n\tif (selectorLowerCase !== selector) {\n\t\treturn false;\n\t}\n\n\tif (svgTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (htmlTypeSelectors.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (mathMLTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst { levelOneAndTwoPseudoElements } = require('../../reference/selectors');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-pseudo-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} pseudo-${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-pseudo-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Exclude pseudo elements from the count\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'pseudo' &&\n\t\t\t\t\t(childNode.value.includes('::') ||\n\t\t\t\t\t\tlevelOneAndTwoPseudoElements.has(childNode.value.toLowerCase().slice(1)))\n\t\t\t\t) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'pseudo') {\n\t\t\t\t\ttotal += 1;\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\tcheckSelector(selectorTree, ruleNode);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /\\r?\\n/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected newline in string',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/string-no-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxSelector(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst { value, quoteMark } = attributeNode;\n\n\t\t\t\t\tif (!value || !reNewLine.test(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = [\n\t\t\t\t\t\t// length of our attribute\n\t\t\t\t\t\tattributeNode.attribute,\n\t\t\t\t\t\t// length of our operator , ie '='\n\t\t\t\t\t\tattributeNode.operator || '',\n\t\t\t\t\t].reduce(\n\t\t\t\t\t\t(index, str) => index + str.length,\n\t\t\t\t\t\t// index of the start of our attribute node in our source\n\t\t\t\t\t\t// plus 1 for the opening quotation mark\n\t\t\t\t\t\tattributeNode.sourceIndex + 1,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst valueLength = value.length + (quoteMark || '').length * 2;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: openIndex,\n\t\t\t\t\t\tendIndex: openIndex + valueLength,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!reNewLine.test(valueNode.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst nodeIndex = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + valueNode.sourceIndex,\n\t\t\t\t\tendIndex: nodeIndex + valueNode.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst { mixedCaseSvgTypeSelectors } = require('../../reference/selectors');\n\nconst ruleName = 'selector-type-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-type-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tlet hasComments = ruleNode.raws.selector && ruleNode.raws.selector.raw;\n\t\t\tconst selector = hasComments ? hasComments : ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorAST) => {\n\t\t\t\tselectorAST.walkTags((tag) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tag)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mixedCaseSvgTypeSelectors.has(tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sourceIndex = tag.sourceIndex;\n\t\t\t\t\tconst value = tag.value;\n\n\t\t\t\t\tconst expectedValue = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\t\tif (value === expectedValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\thasComments.slice(sourceIndex + value.length);\n\n\t\t\t\t\t\t\tif (ruleNode.raws.selector == null) {\n\t\t\t\t\t\t\t\tthrow new Error('The `raw` property must be present');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\truleNode.raws.selector.raw = hasComments;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\truleNode.selector =\n\t\t\t\t\t\t\t\truleNode.selector.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\truleNode.selector.slice(sourceIndex + value.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(value, expectedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-case',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} checkedValue\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, checkedValue, getIndex) {\n\t\t\t/** @type {Array<{ index: number, endIndex: number, message: string }>} */\n\t\t\tconst problems = [];\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tfunction processValue(valueNode) {\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!number || !unit) return false;\n\n\t\t\t\tconst expectedUnit = primary === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n\t\t\t\tif (unit === expectedUnit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\tproblems.push({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.expected(unit, expectedUnit),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(checkedValue).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tlet needFix = false;\n\t\t\t\tconst value = valueNode.value;\n\n\t\t\t\tif (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (value.includes('*')) {\n\t\t\t\t\tvalue.split('*').some((val) => {\n\t\t\t\t\t\treturn processValue({\n\t\t\t\t\t\t\t...valueNode,\n\t\t\t\t\t\t\tsourceIndex: value.indexOf(val) + val.length + 1,\n\t\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tneedFix = processValue(valueNode);\n\n\t\t\t\tif (needFix && context.fix) {\n\t\t\t\t\tvalueNode.value = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif ('name' in node && node.name === 'media') {\n\t\t\t\t\t\tnode.params = parsedValue.toString();\n\t\t\t\t\t} else if ('value' in node) {\n\t\t\t\t\t\tnode.value = parsedValue.toString();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const err of problems) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\t\tendIndex: err.endIndex,\n\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !('variable' in atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../utils/isStandardSyntaxProperty');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((node: import('postcss').Declaration, index: number) => boolean) | null,\n *   determineIndex?: (declString: string, match: import('style-search').StyleSearchMatch) => number | false,\n * }} opts\n */\nmodule.exports = function valueListCommaWhitespaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declString = decl.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: declString,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tconst indexToCheckAfter = opts.determineIndex\n\t\t\t\t\t? opts.determineIndex(declString, match)\n\t\t\t\t\t: match.startIndex;\n\n\t\t\t\tif (indexToCheckAfter === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcheckComma(declString, indexToCheckAfter, decl);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Declaration} node\n\t * @returns {void}\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { value } = combinatorNode;\n\t\t\t\t\tconst normalizedValue = normalizeCombinator(value);\n\n\t\t\t\t\tif (primary.includes(normalizedValue)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { sourceIndex: index, raws } = combinatorNode;\n\t\t\t\t\tconst endIndex = index + ((raws && raws.value) || value).length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(normalizedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { longhandTimeProperties, shorthandTimeProperties } = require('../../reference/properties');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isNumber } = require('../../utils/validateTypes');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getDimension = require('../../utils/getDimension');\n\nconst ruleName = 'time-min-milliseconds';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (time) => `Expected a minimum of ${time} milliseconds`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/time-min-milliseconds',\n};\n\nconst DELAY_PROPERTIES = new Set(['animation-delay', 'transition-delay']);\n\n/** @type {import('stylelint').Rule<number>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['delay'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst minimum = primary;\n\t\tconst ignoreDelay = optionsMatches(secondaryOptions, 'ignore', 'delay');\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst propertyName = vendor.unprefixed(decl.prop.toLowerCase());\n\t\t\tconst propertyValue = decl.value;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet timeValueCount = 0;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value, sourceIndex } = node;\n\t\t\t\tconst dimension = getDimension(node);\n\n\t\t\t\tif (\n\t\t\t\t\tlonghandTimeProperties.has(propertyName) &&\n\t\t\t\t\t!isIgnoredProperty(propertyName) &&\n\t\t\t\t\t!isAcceptableTime(dimension)\n\t\t\t\t) {\n\t\t\t\t\tcomplain(decl, 0, propertyValue.length);\n\t\t\t\t}\n\n\t\t\t\tif (!shorthandTimeProperties.has(propertyName)) return;\n\n\t\t\t\ttimeValueCount = calcTimeValueCount(dimension, value, timeValueCount);\n\n\t\t\t\tif (isAcceptableTime(dimension) || (ignoreDelay && timeValueCount !== 1)) return;\n\n\t\t\t\tcomplain(decl, sourceIndex, value.length);\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {{unit: string | null, number: string | null}} dimension\n\t\t * @param {string} value\n\t\t * @param {number} valueTimeCount\n\t\t * @returns {number}\n\t\t */\n\t\tfunction calcTimeValueCount(dimension, value, valueTimeCount) {\n\t\t\tconst { unit } = dimension;\n\n\t\t\tif (unit !== null) valueTimeCount++;\n\n\t\t\tif (value === ',') valueTimeCount = 0;\n\n\t\t\treturn valueTimeCount;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} propertyName\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredProperty(propertyName) {\n\t\t\tif (ignoreDelay && DELAY_PROPERTIES.has(propertyName)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-value-parser').Dimension | {unit: null, number: null}} dimension\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isAcceptableTime(dimension) {\n\t\t\tconst { unit, number } = dimension;\n\n\t\t\tif (unit === null || number === null) return true;\n\n\t\t\tconst numTime = Number(number);\n\n\t\t\tif (numTime <= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst timeUnit = unit.toLowerCase();\n\n\t\t\tif (timeUnit === 'ms' && numTime < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (timeUnit === 's' && numTime * 1000 < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} offset\n\t\t * @param {number} length\n\t\t * @returns {void}\n\t\t */\n\t\tfunction complain(decl, offset, length) {\n\t\t\tconst index = declarationValueIndex(decl) + offset;\n\t\t\tconst endIndex = index + length;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(minimum),\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tnode: decl,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-pseudo-class-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-space-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tdetermineIndex: (declString, match) => {\n\t\t\t\tconst nextChars = declString.substring(match.endIndex, declString.length);\n\n\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t// ending the comment so we're fine\n\t\t\t\tif (/^[ \\t]*\\/\\//.test(nextChars)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\treturn /^[ \\t]*\\/\\*/.test(nextChars)\n\t\t\t\t\t? declString.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t: match.startIndex;\n\t\t\t},\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => a - b).reverse()) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = context.newline + afterValue;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isBoolean, isNumber, isString, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'indentation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (x) => `Expected indentation of ${x}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/indentation',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions = {}, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber, 'tab'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tbaseIndentLevel: [isNumber, 'auto'],\n\t\t\t\t\texcept: ['block', 'value', 'param'],\n\t\t\t\t\tignore: ['value', 'param', 'inside-parens'],\n\t\t\t\t\tindentInsideParens: ['twice', 'once-at-root-twice-in-block'],\n\t\t\t\t\tindentClosingBrace: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst spaceCount = isNumber(primary) ? primary : null;\n\t\tconst indentChar = spaceCount == null ? '\\t' : ' '.repeat(spaceCount);\n\t\tconst warningWord = primary === 'tab' ? 'tab' : 'space';\n\n\t\t/** @type {number | 'auto'} */\n\t\tconst baseIndentLevel = secondaryOptions.baseIndentLevel;\n\t\t/** @type {boolean} */\n\t\tconst indentClosingBrace = secondaryOptions.indentClosingBrace;\n\n\t\t/**\n\t\t * @param {number} level\n\t\t */\n\t\tconst legibleExpectation = (level) => {\n\t\t\tconst count = spaceCount == null ? level : level * spaceCount;\n\t\t\tconst quantifiedWarningWord = count === 1 ? warningWord : `${warningWord}s`;\n\n\t\t\treturn `${count} ${quantifiedWarningWord}`;\n\t\t};\n\n\t\t// Cycle through all nodes using walk.\n\t\troot.walk((node) => {\n\t\t\tif (isRoot(node)) {\n\t\t\t\t// Ignore nested template literals root in css-in-js lang\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeLevel = indentationLevel(node);\n\n\t\t\t// Cut out any * and _ hacks from `before`\n\t\t\tconst before = (node.raws.before || '').replace(/[*_]$/, '');\n\t\t\tconst after = typeof node.raws.after === 'string' ? node.raws.after : '';\n\t\t\tconst parent = node.parent;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tconst expectedOpeningBraceIndentation = indentChar.repeat(nodeLevel);\n\n\t\t\t// Only inspect the spaces before the node\n\t\t\t// if this is the first node in root\n\t\t\t// or there is a newline in the `before` string.\n\t\t\t// (If there is no newline before a node,\n\t\t\t// there is no \"indentation\" to check.)\n\t\t\tconst isFirstChild = parent.type === 'root' && parent.first === node;\n\t\t\tconst lastIndexOfNewline = before.lastIndexOf('\\n');\n\n\t\t\t// Inspect whitespace in the `before` string that is\n\t\t\t// *after* the *last* newline character,\n\t\t\t// because anything besides that is not indentation for this node:\n\t\t\t// it is some other kind of separation, checked by some separate rule\n\t\t\tif (\n\t\t\t\t(lastIndexOfNewline !== -1 ||\n\t\t\t\t\t(isFirstChild &&\n\t\t\t\t\t\t(!getDocument(parent) ||\n\t\t\t\t\t\t\t(parent.raws.codeBefore && parent.raws.codeBefore.endsWith('\\n'))))) &&\n\t\t\t\tbefore.slice(lastIndexOfNewline + 1) !== expectedOpeningBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (isFirstChild && isString(node.raws.before)) {\n\t\t\t\t\t\tnode.raws.before = node.raws.before.replace(\n\t\t\t\t\t\t\t/^[ \\t]*(?=\\S|$)/,\n\t\t\t\t\t\t\texpectedOpeningBraceIndentation,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.raws.before = fixIndentation(node.raws.before, expectedOpeningBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(nodeLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Only blocks have the `after` string to check.\n\t\t\t// Only inspect `after` strings that start with a newline;\n\t\t\t// otherwise there's no indentation involved.\n\t\t\t// And check `indentClosingBrace` to see if it should be indented an extra level.\n\t\t\tconst closingBraceLevel = indentClosingBrace ? nodeLevel + 1 : nodeLevel;\n\t\t\tconst expectedClosingBraceIndentation = indentChar.repeat(closingBraceLevel);\n\n\t\t\tif (\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node) &&\n\t\t\t\tafter &&\n\t\t\t\tafter.includes('\\n') &&\n\t\t\t\tafter.slice(after.lastIndexOf('\\n') + 1) !== expectedClosingBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.raws.after = fixIndentation(node.raws.after, expectedClosingBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(closingBraceLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: node.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a declaration, check the value\n\t\t\tif (isDeclaration(node)) {\n\t\t\t\tcheckValue(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is a rule, check the selector\n\t\t\tif (isRule(node)) {\n\t\t\t\tcheckSelector(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is an at rule, check the params\n\t\t\tif (isAtRule(node)) {\n\t\t\t\tcheckAtRuleParams(node, nodeLevel);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} level\n\t\t * @returns {number}\n\t\t */\n\t\tfunction indentationLevel(node, level = 0) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRoot(node.parent)) {\n\t\t\t\treturn level + getRootBaseIndentLevel(node.parent, baseIndentLevel, primary);\n\t\t\t}\n\n\t\t\tlet calculatedLevel;\n\n\t\t\t// Indentation level equals the ancestor nodes\n\t\t\t// separating this node from root; so recursively\n\t\t\t// run this operation\n\t\t\tcalculatedLevel = indentationLevel(node.parent, level + 1);\n\n\t\t\t// If `secondaryOptions.except` includes \"block\",\n\t\t\t// blocks are taken down one from their calculated level\n\t\t\t// (all blocks are the same level as their parents)\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'block') &&\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node)\n\t\t\t) {\n\t\t\t\tcalculatedLevel--;\n\t\t\t}\n\n\t\t\treturn calculatedLevel;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} declLevel\n\t\t */\n\t\tfunction checkValue(decl, declLevel) {\n\t\t\tif (!decl.value.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'value')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\t\t\tconst valueLevel = optionsMatches(secondaryOptions, 'except', 'value')\n\t\t\t\t? declLevel\n\t\t\t\t: declLevel + 1;\n\n\t\t\tcheckMultilineBit(declString, valueLevel, decl);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkSelector(ruleNode, ruleLevel) {\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Less mixins have params, and they should be indented extra\n\t\t\t// @ts-expect-error -- TS2339: Property 'params' does not exist on type 'Rule'.\n\t\t\tif (ruleNode.params) {\n\t\t\t\truleLevel += 1;\n\t\t\t}\n\n\t\t\tcheckMultilineBit(selector, ruleLevel, ruleNode);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkAtRuleParams(atRule, ruleLevel) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'param')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @nest and SCSS's @at-root rules should be treated like regular rules, not expected\n\t\t\t// to have their params (selectors) indented\n\t\t\tconst paramLevel =\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'param') ||\n\t\t\t\tatRule.name === 'nest' ||\n\t\t\t\tatRule.name === 'at-root'\n\t\t\t\t\t? ruleLevel\n\t\t\t\t\t: ruleLevel + 1;\n\n\t\t\tcheckMultilineBit(beforeBlockString(atRule).trim(), paramLevel, atRule);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} newlineIndentLevel\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkMultilineBit(source, newlineIndentLevel, node) {\n\t\t\tif (!source.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Data for current node fixing\n\t\t\t/** @type {Array<{ expectedIndentation: string, currentIndentation: string, startIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// `outsideParens` because function arguments and also non-standard parenthesized stuff like\n\t\t\t// Sass maps are ignored to allow for arbitrary indentation\n\t\t\tlet parentheticalDepth = 0;\n\n\t\t\tconst ignoreInsideParans = optionsMatches(secondaryOptions, 'ignore', 'inside-parens');\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource,\n\t\t\t\t\ttarget: '\\n',\n\t\t\t\t\t// @ts-expect-error -- The `outsideParens` option is unsupported. Why?\n\t\t\t\t\toutsideParens: ignoreInsideParans,\n\t\t\t\t},\n\t\t\t\t(match, matchCount) => {\n\t\t\t\t\tconst precedesClosingParenthesis = /^[ \\t]*\\)/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (ignoreInsideParans && (precedesClosingParenthesis || match.insideParens)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet expectedIndentLevel = newlineIndentLevel;\n\n\t\t\t\t\t// Modififications for parenthetical content\n\t\t\t\t\tif (!ignoreInsideParans && match.insideParens) {\n\t\t\t\t\t\t// If the first match in is within parentheses, reduce the parenthesis penalty\n\t\t\t\t\t\tif (matchCount === 1) parentheticalDepth -= 1;\n\n\t\t\t\t\t\t// Account for windows line endings\n\t\t\t\t\t\tlet newlineIndex = match.startIndex;\n\n\t\t\t\t\t\tif (source[match.startIndex - 1] === '\\r') {\n\t\t\t\t\t\t\tnewlineIndex--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningParenthesis = /\\([ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningBrace = /\\{[ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningBrace) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst startingClosingBrace = /^[ \\t]*\\}/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\t\tif (startingClosingBrace) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpectedIndentLevel += parentheticalDepth;\n\n\t\t\t\t\t\t// Past this point, adjustments to parentheticalDepth affect next line\n\n\t\t\t\t\t\tif (precedesClosingParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (secondaryOptions.indentInsideParens) {\n\t\t\t\t\t\t\tcase 'twice':\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'once-at-root-twice-in-block':\n\t\t\t\t\t\t\t\tif (node.parent === node.root()) {\n\t\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Starting at the index after the newline, we want to\n\t\t\t\t\t// check that the whitespace characters (excluding newlines) before the first\n\t\t\t\t\t// non-whitespace character equal the expected indentation\n\t\t\t\t\tconst afterNewlineSpaceMatches = /^([ \\t]*)\\S/.exec(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (!afterNewlineSpaceMatches) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst afterNewlineSpace = afterNewlineSpaceMatches[1] || '';\n\t\t\t\t\tconst expectedIndentation = indentChar.repeat(\n\t\t\t\t\t\texpectedIndentLevel > 0 ? expectedIndentLevel : 0,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (afterNewlineSpace !== expectedIndentation) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t// Adding fixes position in reverse order, because if we change indent in the beginning of the string it will break all following fixes for that string\n\t\t\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\t\t\texpectedIndentation,\n\t\t\t\t\t\t\t\tcurrentIndentation: afterNewlineSpace,\n\t\t\t\t\t\t\t\tstartIndex: match.startIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(expectedIndentLevel)),\n\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\tindex: match.startIndex + afterNewlineSpace.length + 1,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tnode.selector = replaceIndentation(\n\t\t\t\t\t\t\tnode.selector,\n\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\tfixPosition.startIndex,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst declProp = node.prop;\n\t\t\t\t\tconst declBetween = node.raws.between;\n\n\t\t\t\t\tif (!isString(declBetween)) {\n\t\t\t\t\t\tthrow new TypeError('The `between` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tif (fixPosition.startIndex < declProp.length + declBetween.length) {\n\t\t\t\t\t\t\tnode.raws.between = replaceIndentation(\n\t\t\t\t\t\t\t\tdeclBetween,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.value = replaceIndentation(\n\t\t\t\t\t\t\t\tnode.value,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length - declBetween.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tconst atRuleName = node.name;\n\t\t\t\t\tconst atRuleAfterName = node.raws.afterName;\n\t\t\t\t\tconst atRuleParams = node.params;\n\n\t\t\t\t\tif (!isString(atRuleAfterName)) {\n\t\t\t\t\t\tthrow new TypeError('The `afterName` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\t// 1 — it's a @ length\n\t\t\t\t\t\tif (fixPosition.startIndex < 1 + atRuleName.length + atRuleAfterName.length) {\n\t\t\t\t\t\t\tnode.raws.afterName = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleAfterName,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.params = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleParams,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - atRuleAfterName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {string} space\n * @returns {number}\n */\nfunction getRootBaseIndentLevel(root, baseIndentLevel, space) {\n\tconst document = getDocument(root);\n\n\tif (!document) {\n\t\treturn 0;\n\t}\n\n\tif (!root.source) {\n\t\tthrow new Error('The root node must have a source');\n\t}\n\n\t/** @type {import('postcss').Source & { baseIndentLevel?: number }} */\n\tconst source = root.source;\n\n\tconst indentLevel = source.baseIndentLevel;\n\n\tif (isNumber(indentLevel) && Number.isSafeInteger(indentLevel)) {\n\t\treturn indentLevel;\n\t}\n\n\tconst newIndentLevel = inferRootIndentLevel(root, baseIndentLevel, () =>\n\t\tinferDocIndentSize(document, space),\n\t);\n\n\tsource.baseIndentLevel = newIndentLevel;\n\n\treturn newIndentLevel;\n}\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction getDocument(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\tconst document = node.document;\n\n\tif (document) {\n\t\treturn document;\n\t}\n\n\tconst root = node.root();\n\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\treturn root && root.document;\n}\n\n/**\n * @param {import('postcss').Document} document\n * @param {string} space\n * returns {number}\n */\nfunction inferDocIndentSize(document, space) {\n\tif (!document.source) throw new Error('The document node must have a source');\n\n\t/** @type {import('postcss').Source & { indentSize?: number }} */\n\tconst docSource = document.source;\n\n\tlet indentSize = docSource.indentSize;\n\n\tif (isNumber(indentSize) && Number.isSafeInteger(indentSize)) {\n\t\treturn indentSize;\n\t}\n\n\tconst source = document.source.input.css;\n\tconst indents = source.match(/^ *(?=\\S)/gm);\n\n\tif (indents) {\n\t\t/** @type {Map<number, number>} */\n\t\tconst scores = new Map();\n\t\tlet lastIndentSize = 0;\n\t\tlet lastLeadingSpacesLength = 0;\n\n\t\t/**\n\t\t * @param {number} leadingSpacesLength\n\t\t */\n\t\tconst vote = (leadingSpacesLength) => {\n\t\t\tif (leadingSpacesLength) {\n\t\t\t\tlastIndentSize = Math.abs(leadingSpacesLength - lastLeadingSpacesLength) || lastIndentSize;\n\n\t\t\t\tif (lastIndentSize > 1) {\n\t\t\t\t\tconst score = scores.get(lastIndentSize);\n\n\t\t\t\t\tif (score) {\n\t\t\t\t\t\tscores.set(lastIndentSize, score + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscores.set(lastIndentSize, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastIndentSize = 0;\n\t\t\t}\n\n\t\t\tlastLeadingSpacesLength = leadingSpacesLength;\n\t\t};\n\n\t\tfor (const leadingSpaces of indents) {\n\t\t\tvote(leadingSpaces.length);\n\t\t}\n\n\t\tlet bestScore = 0;\n\n\t\tfor (const [indentSizeDate, score] of scores.entries()) {\n\t\t\tif (score > bestScore) {\n\t\t\t\tbestScore = score;\n\t\t\t\tindentSize = indentSizeDate;\n\t\t\t}\n\t\t}\n\t}\n\n\tindentSize =\n\t\tNumber(indentSize) || (indents && indents[0] && indents[0].length) || Number(space) || 2;\n\tdocSource.indentSize = indentSize;\n\n\treturn indentSize;\n}\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {() => number} indentSize\n * @returns {number}\n */\nfunction inferRootIndentLevel(root, baseIndentLevel, indentSize) {\n\t/**\n\t * @param {string} indent\n\t */\n\tfunction getIndentLevel(indent) {\n\t\tconst tabMatch = indent.match(/\\t/g);\n\t\tconst tabCount = tabMatch ? tabMatch.length : 0;\n\n\t\tconst spaceMatch = indent.match(/ /g);\n\t\tconst spaceCount = spaceMatch ? Math.round(spaceMatch.length / indentSize()) : 0;\n\n\t\treturn tabCount + spaceCount;\n\t}\n\n\tlet newBaseIndentLevel = 0;\n\n\tif (!isNumber(baseIndentLevel) || !Number.isSafeInteger(baseIndentLevel)) {\n\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\tlet source = root.source.input.css;\n\n\t\tsource = source.replace(/^[^\\r\\n]+/, (firstLine) => {\n\t\t\tconst match = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)$/.exec(root.raws.codeBefore);\n\n\t\t\tif (match) {\n\t\t\t\treturn match[1] + firstLine;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t});\n\n\t\tconst indents = source.match(/^[ \\t]*(?=\\S)/gm);\n\n\t\tif (indents) {\n\t\t\treturn Math.min(...indents.map((indent) => getIndentLevel(indent)));\n\t\t}\n\n\t\tnewBaseIndentLevel = 1;\n\t} else {\n\t\tnewBaseIndentLevel = baseIndentLevel;\n\t}\n\n\tconst indents = [];\n\tconst foundIndents = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)\\S/m.exec(root.raws.codeBefore);\n\n\t// The indent level of the CSS code block in non-CSS-like files is determined by the shortest indent of non-empty line.\n\tif (foundIndents) {\n\t\tlet shortest = Number.MAX_SAFE_INTEGER;\n\t\tlet i = 0;\n\n\t\twhile (++i < foundIndents.length) {\n\t\t\tconst foundIndent = foundIndents[i];\n\n\t\t\tassertString(foundIndent);\n\t\t\tconst current = getIndentLevel(foundIndent);\n\n\t\t\tif (current < shortest) {\n\t\t\t\tshortest = current;\n\n\t\t\t\tif (shortest === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shortest !== Number.MAX_SAFE_INTEGER) {\n\t\t\tindents.push(new Array(shortest).fill(' ').join(''));\n\t\t}\n\t}\n\n\tconst after = root.raws.after;\n\n\tif (after) {\n\t\tlet afterEnd;\n\n\t\tif (after.endsWith('\\n')) {\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tconst document = root.document;\n\n\t\t\tif (document) {\n\t\t\t\tconst nextRoot = document.nodes[document.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : document.raws.codeAfter;\n\t\t\t} else {\n\t\t\t\t// Nested root node in css-in-js lang\n\t\t\t\tconst parent = root.parent;\n\n\t\t\t\tif (!parent) throw new Error('The root node must have a parent');\n\n\t\t\t\tconst nextRoot = parent.nodes[parent.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : root.raws.codeAfter;\n\t\t\t}\n\t\t} else {\n\t\t\tafterEnd = after;\n\t\t}\n\n\t\tif (afterEnd) indents.push(afterEnd.match(/^[ \\t]*/)[0]);\n\t}\n\n\tif (indents.length) {\n\t\treturn Math.max(...indents.map((indent) => getIndentLevel(indent))) + newBaseIndentLevel;\n\t}\n\n\treturn newBaseIndentLevel;\n}\n\n/**\n * @param {string | undefined} str\n * @param {string} whitespace\n */\nfunction fixIndentation(str, whitespace) {\n\tif (!isString(str)) {\n\t\treturn str;\n\t}\n\n\treturn str.replace(/\\n[ \\t]*(?=\\S|$)/g, `\\n${whitespace}`);\n}\n\n/**\n * @param {string} input\n * @param {string} searchString\n * @param {string} replaceString\n * @param {number} startIndex\n */\nfunction replaceIndentation(input, searchString, replaceString, startIndex) {\n\tconst offset = startIndex + 1;\n\tconst stringStart = input.slice(0, offset);\n\tconst stringEnd = input.slice(offset + searchString.length);\n\n\treturn stringStart + replaceString + stringEnd;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst { units } = require('../../reference/units');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'unit-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unknown unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t// and within functions listed in the `ignoreFunctions` option\n\t\t\t\tif (\n\t\t\t\t\tvalueNode.type === 'function' &&\n\t\t\t\t\t(valueNode.value.toLowerCase() === 'url' ||\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueNode.value))\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t\tif (!number || !unit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (unit.toLowerCase() === 'x') {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisAtRule(node) &&\n\t\t\t\t\t\tnode.name === 'media' &&\n\t\t\t\t\t\tnode.params.toLowerCase().includes('resolution')\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet ignoreUnit = false;\n\n\t\t\t\t\t\tmediaParser(node.params).walk((mediaNode, _i, mediaNodes) => {\n\t\t\t\t\t\t\tconst lastMediaNode = mediaNodes[mediaNodes.length - 1];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmediaNode.value.toLowerCase().includes('resolution') &&\n\t\t\t\t\t\t\t\tlastMediaNode &&\n\t\t\t\t\t\t\t\tlastMediaNode.sourceIndex === valueNode.sourceIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tignoreUnit = true;\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (ignoreUnit) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\t\tif (node.prop.toLowerCase() === 'image-resolution') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n\t\t\t\t\t\t\tconst imageSet = parsedValue.nodes.find(\n\t\t\t\t\t\t\t\t(n) => vendor.unprefixed(n.value) === 'image-set',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tassert(imageSet);\n\t\t\t\t\t\t\tassert('nodes' in imageSet);\n\t\t\t\t\t\t\tconst imageSetLastNode = imageSet.nodes[imageSet.nodes.length - 1];\n\n\t\t\t\t\t\t\tassert(imageSetLastNode);\n\t\t\t\t\t\t\tconst imageSetValueLastIndex = imageSetLastNode.sourceIndex;\n\n\t\t\t\t\t\t\tif (imageSetValueLastIndex >= valueNode.sourceIndex) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst index = getIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tindex: index + valueNode.sourceIndex + number.length,\n\t\t\t\t\tendIndex: index + valueNode.sourceEndIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(decl, decl.value, declarationValueIndex);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getDimension = require('../../utils/getDimension');\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst {\n\tanimationNameKeywords,\n\tanimationShorthandKeywords,\n\tcamelCaseKeywords,\n\tfontFamilyKeywords,\n\tfontShorthandKeywords,\n\tgridAreaKeywords,\n\tgridColumnKeywords,\n\tgridRowKeywords,\n\tlistStyleShorthandKeywords,\n\tlistStyleTypeKeywords,\n\tsystemColorsKeywords,\n} = require('../../reference/keywords');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-keyword-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-keyword-case',\n\tfixable: true,\n};\n\n// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\n\nconst mapLowercaseKeywordsToCamelCase = new Map();\n\nfor (const func of camelCaseKeywords) {\n\tmapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreKeywords: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tcamelCaseSvgKeywords: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst propLowerCase = decl.prop.toLowerCase();\n\t\t\tconst value = decl.value;\n\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tlet needFix = false;\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tconst valueLowerCase = node.value.toLowerCase();\n\n\t\t\t\t// Ignore system colors\n\t\t\t\tif (systemColorsKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore keywords within `url` and `var` function\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\t(valueLowerCase === 'url' ||\n\t\t\t\t\t\tvalueLowerCase === 'var' ||\n\t\t\t\t\t\tvalueLowerCase === 'counter' ||\n\t\t\t\t\t\tvalueLowerCase === 'counters' ||\n\t\t\t\t\t\tvalueLowerCase === 'attr')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// ignore keywords within ignoreFunctions functions\n\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst keyword = node.value;\n\n\t\t\t\tconst { unit } = getDimension(node);\n\n\t\t\t\t// Ignore css variables, and hex values, and math operators, and sass interpolation\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'word' ||\n\t\t\t\t\t!isStandardSyntaxValue(node.value) ||\n\t\t\t\t\tvalue.includes('#') ||\n\t\t\t\t\tignoredCharacters.has(keyword) ||\n\t\t\t\t\tunit\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation' &&\n\t\t\t\t\t!animationShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'animation-name' && !animationNameKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font' &&\n\t\t\t\t\t!fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'font-family' && !fontFamilyKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'counter-increment' &&\n\t\t\t\t\tisCounterIncrementCustomIdentValue(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridRowProps.has(propLowerCase) && !gridRowKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridColumnProps.has(propLowerCase) && !gridColumnKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'grid-area' && !gridAreaKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style' &&\n\t\t\t\t\t!listStyleShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'list-style-type' && !listStyleTypeKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreKeywords', keyword)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst keywordLowerCase = keyword.toLocaleLowerCase();\n\t\t\t\tlet expectedKeyword = null;\n\n\t\t\t\t/** @type {boolean} */\n\t\t\t\tconst camelCaseSvgKeywords =\n\t\t\t\t\t(secondaryOptions && secondaryOptions.camelCaseSvgKeywords) || false;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseKeywordsToCamelCase.has(keywordLowerCase) &&\n\t\t\t\t\tcamelCaseSvgKeywords\n\t\t\t\t) {\n\t\t\t\t\texpectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedKeyword = keyword.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\texpectedKeyword = keyword.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (keyword === expectedKeyword) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedKeyword;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(keyword, expectedKeyword),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tdecl.value = parsed.toString();\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { counterIncrementKeywords } = require('../reference/keywords');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function isCounterIncrementCustomIdentValue(value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tcounterIncrementKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst { counterResetKeywords } = require('../reference/keywords');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function isCounterResetCustomIdentValue(value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tcounterResetKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-invalid-position-at-import-rule';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected invalid position @import rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/no-invalid-position-at-import-rule',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, options) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet invalidPosition = false;\n\n\t\troot.walk((node) => {\n\t\t\tconst nodeName = ('name' in node && node.name && node.name.toLowerCase()) || '';\n\n\t\t\tif (\n\t\t\t\t(isAtRule(node) &&\n\t\t\t\t\tnodeName !== 'charset' &&\n\t\t\t\t\tnodeName !== 'import' &&\n\t\t\t\t\tnodeName !== 'layer' &&\n\t\t\t\t\t!optionsMatches(options, 'ignoreAtRules', node.name) &&\n\t\t\t\t\tisStandardSyntaxAtRule(node)) ||\n\t\t\t\t(node.type === 'rule' && isStandardSyntaxRule(node))\n\t\t\t) {\n\t\t\t\tinvalidPosition = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isAtRule(node) && nodeName === 'import' && invalidPosition) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: node.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-list-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-max-empty-lines',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newValueString = value\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tsetDeclarationValue(decl, newValueString);\n\t\t\t} else if (violatedLFNewLinesRegex.test(value) || violatedCRLFNewLinesRegex.test(value)) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/color-hex-case',\n\tfixable: true,\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst expected = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expected) return;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expected;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(value, expected),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterSingleLineComment = require('../../utils/isAfterSingleLineComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before rule',\n\trejected: 'Unexpected empty line before rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/rule-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-block'],\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-rule',\n\t\t\t\t\t\t'after-single-line-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block-and-after-rule',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst expectation = /** @type {string} */ (primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment')) {\n\t\t\t\tconst prevNode = ruleNode.prev();\n\n\t\t\t\tif (prevNode && prevNode.type === 'comment') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isNested = ruleNode.parent && ruleNode.parent.type !== 'root';\n\n\t\t\t// Optionally ignore the expectation if inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore if the expectation is for multiple and the rule is single-line\n\t\t\tif (expectation.includes('multi-line') && isSingleLineString(ruleNode.toString())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = expectation.includes('always');\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-rule') && isAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block-and-after-rule') &&\n\t\t\t\t\tisNested &&\n\t\t\t\t\tisAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-single-line-comment') &&\n\t\t\t\t\tisAfterSingleLineComment(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested)\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(ruleNode.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tconst newline = context.newline;\n\n\t\t\t\tif (typeof newline !== 'string') {\n\t\t\t\t\tthrow new Error(`The \"newline\" property must be a string: ${newline}`);\n\t\t\t\t}\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(ruleNode, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(ruleNode, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: ruleNode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {boolean}\n */\nfunction isAfterRule(ruleNode) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(ruleNode);\n\n\treturn prevNode != null && prevNode.type === 'rule';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction isAfterSingleLineComment(node) {\n\tconst prevNode = node.prev();\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tprevNode.type === 'comment' &&\n\t\t!isSharedLineComment(prevNode) &&\n\t\tprevNode.source &&\n\t\tprevNode.source.start &&\n\t\tprevNode.source.end &&\n\t\tprevNode.source.start.line === prevNode.source.end.line\n\t);\n}\n\nmodule.exports = isAfterSingleLineComment;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, assertString } = require('../../utils/validateTypes');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'string-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} quotes`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/string-quotes',\n\tfixable: true,\n};\n\nconst singleQuote = `'`;\nconst doubleQuote = `\"`;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst correctQuote = primary === 'single' ? singleQuote : doubleQuote;\n\tconst erroneousQuote = primary === 'single' ? doubleQuote : singleQuote;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['single', 'double'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tavoidEscape: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst avoidEscape =\n\t\t\tsecondaryOptions && secondaryOptions.avoidEscape !== undefined\n\t\t\t\t? secondaryOptions.avoidEscape\n\t\t\t\t: true;\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.quoted) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === correctQuote && avoidEscape) {\n\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\tattributeNode.quoteMark = erroneousQuote;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary === 'single' ? 'double' : primary),\n\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === erroneousQuote) {\n\t\t\t\t\t\tif (avoidEscape) {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\truleNode.selector = replaceQuote(ruleNode.selector, fixIndex, correctQuote);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no erroneous quotes\n\t\t\tif (!value.includes(erroneousQuote)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isAtRule(node) && node.name === 'charset') {\n\t\t\t\t// allow @charset rules to have double quotes, in spite of the configuration\n\t\t\t\t// TODO: @charset should always use double-quotes, see https://github.com/stylelint/stylelint/issues/2788\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'string' && valueNode.quote === erroneousQuote) {\n\t\t\t\t\tconst needsEscape = valueNode.value.includes(correctQuote);\n\n\t\t\t\t\tif (avoidEscape && needsEscape) {\n\t\t\t\t\t\t// don't consider this an error\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = valueNode.sourceIndex;\n\n\t\t\t\t\t// we currently don't fix escapes\n\t\t\t\t\tif (context.fix && !needsEscape) {\n\t\t\t\t\t\tconst closeIndex = openIndex + valueNode.value.length + erroneousQuote.length;\n\n\t\t\t\t\t\tfixPositions.push(openIndex, closeIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tnode.params = replaceQuote(node.params, fixIndex, correctQuote);\n\t\t\t\t} else {\n\t\t\t\t\tnode.value = replaceQuote(node.value, fixIndex, correctQuote);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} string\n * @param {number} index\n * @param {string} replace\n * @returns {string}\n */\nfunction replaceQuote(string, index, replace) {\n\treturn string.substring(0, index) + replace + string.substring(index + replace.length);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-type';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} type ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-max-type',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDescendant = optionsMatches(secondaryOptions, 'ignore', 'descendant');\n\t\tconst ignoreChild = optionsMatches(secondaryOptions, 'ignore', 'child');\n\t\tconst ignoreCompounded = optionsMatches(secondaryOptions, 'ignore', 'compounded');\n\t\tconst ignoreNextSibling = optionsMatches(secondaryOptions, 'ignore', 'next-sibling');\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', childNode.value)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreChild && hasChildCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreCompounded && hasCompoundSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\treturn childNode.type === 'tag' ? total + 1 : total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-selector-parser').Node} SelectorNode */\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasDescendantCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isDescendantCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasChildCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isChildCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasCompoundSelector(node) {\n\tif (node.prev() && !isCombinator(node.prev())) {\n\t\treturn true;\n\t}\n\n\treturn node.next() && !isCombinator(node.next());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasNextSiblingCombinator(node) {\n\treturn node.prev() && isNextSiblingCombinator(node.prev());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isCombinator(node) {\n\tif (!node) return false;\n\n\treturn node.type === 'combinator';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isDescendantCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && isString(node.value) && isOnlyWhitespace(node.value);\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isChildCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && node.value === '>';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isNextSiblingCombinator(node) {\n\treturn isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst {\n\tisPseudoClass,\n\tisAttribute,\n\tisClassName,\n\tisUniversal,\n\tisIdentifier,\n\tisTag,\n} = require('postcss-selector-parser');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-not-notation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} :not() pseudo-class notation`,\n});\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-not-notation',\n\tfixable: true,\n};\n\n/** @typedef {import('postcss-selector-parser').Node} Node */\n/** @typedef {import('postcss-selector-parser').Selector} Selector */\n/** @typedef {import('postcss-selector-parser').Pseudo} Pseudo */\n\n/**\n * @param {Node} node\n * @returns {boolean}\n */\nconst isSimpleSelector = (node) =>\n\tisPseudoClass(node) ||\n\tisAttribute(node) ||\n\tisClassName(node) ||\n\tisUniversal(node) ||\n\tisIdentifier(node) ||\n\tisTag(node);\n\n/**\n * @param {Node} node\n * @returns {node is Pseudo}\n */\nconst isNot = (node) =>\n\tisPseudoClass(node) && node.value !== undefined && node.value.toLowerCase() === ':not';\n\n/**\n * @param {Selector[]} list\n * @returns {boolean}\n */\nconst isSimple = (list) => {\n\tif (list.length > 1) return false;\n\n\tassert(list[0], 'list is never empty');\n\tconst [first, second] = list[0].nodes;\n\n\tif (!first) return true;\n\n\tif (second) return false;\n\n\treturn isSimpleSelector(first) && !isNot(first);\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['simple', 'complex'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) return;\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':not(')) return;\n\n\t\t\tif (!isStandardSyntaxSelector(selector)) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (container) => {\n\t\t\t\tcontainer.walkPseudos((pseudo) => {\n\t\t\t\t\tif (!isNot(pseudo)) return;\n\n\t\t\t\t\tif (primary === 'complex') {\n\t\t\t\t\t\tconst prev = pseudo.prev();\n\t\t\t\t\t\tconst hasConsecutiveNot = prev && isNot(prev);\n\n\t\t\t\t\t\tif (!hasConsecutiveNot) return;\n\n\t\t\t\t\t\tif (context.fix) return fixComplex(prev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst selectors = pseudo.nodes;\n\n\t\t\t\t\t\tif (isSimple(selectors)) return;\n\n\t\t\t\t\t\tconst mustFix =\n\t\t\t\t\t\t\tcontext.fix &&\n\t\t\t\t\t\t\tselectors.length > 1 &&\n\t\t\t\t\t\t\tselectors[1] &&\n\t\t\t\t\t\t\t(selectors[1].nodes.length === 0 ||\n\t\t\t\t\t\t\t\tselectors.every(({ nodes }) => nodes.length === 1));\n\n\t\t\t\t\t\tif (mustFix) return fixSimple(pseudo);\n\t\t\t\t\t}\n\n\t\t\t\t\tassert(pseudo.source && pseudo.source.end);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tendIndex: pseudo.source.end.column,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {Pseudo} not\n */\nfunction fixSimple(not) {\n\tconst simpleSelectors = not.nodes\n\t\t.filter(({ nodes }) => nodes[0] && isSimpleSelector(nodes[0]))\n\t\t.map((s) => {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = '';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\n\t\t\treturn s;\n\t\t});\n\tconst firstSelector = simpleSelectors.shift();\n\n\tassert(firstSelector);\n\tassert(not.parent);\n\n\tnot.empty();\n\tnot.nodes.push(firstSelector);\n\n\tfor (const s of simpleSelectors) {\n\t\tconst last = not.parent.last;\n\n\t\tnot.parent.insertAfter(last, last.clone({ nodes: [s] }));\n\t}\n}\n\n/**\n * @param {Pseudo} previousNot\n */\nfunction fixComplex(previousNot) {\n\tconst indentAndTrimRight = (/** @type {Selector[]} */ selectors) => {\n\t\tfor (const s of selectors) {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = ' ';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\t\t}\n\t};\n\tconst [head, ...tail] = previousNot.nodes;\n\tlet node = previousNot.next();\n\n\tif (head == null || head.nodes.length === 0) return;\n\n\tassert(head.nodes[0]);\n\thead.nodes[0].rawSpaceBefore = '';\n\thead.nodes[0].rawSpaceAfter = '';\n\tindentAndTrimRight(tail);\n\n\twhile (isNot(node)) {\n\t\tconst selectors = node.nodes;\n\t\tconst prev = node;\n\n\t\tindentAndTrimRight(selectors);\n\t\tpreviousNot.nodes = previousNot.nodes.concat(selectors);\n\t\tnode = node.next();\n\t\tprev.remove();\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"{\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/block-opening-brace-newline-after',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'rules', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'rules')) {\n\t\t\troot.walkRules(check);\n\t\t}\n\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst backupCommentNextBefores = new Map();\n\n\t\t\t/**\n\t\t\t * next node with checking newlines after comment\n\t\t\t *\n\t\t\t * @param {import('postcss').ChildNode | undefined} startNode\n\t\t\t * @returns {import('postcss').ChildNode | undefined}\n\t\t\t */\n\t\t\tfunction nextNode(startNode) {\n\t\t\t\tif (!startNode || !startNode.next) return;\n\n\t\t\t\tif (startNode.type === 'comment') {\n\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\tconst newLineMatch = reNewLine.test(startNode.raws.before || '');\n\n\t\t\t\t\tconst next = startNode.next();\n\n\t\t\t\t\tif (next && newLineMatch && !reNewLine.test(next.raws.before || '')) {\n\t\t\t\t\t\tbackupCommentNextBefores.set(next, next.raws.before);\n\t\t\t\t\t\tnext.raws.before = startNode.raws.before;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextNode(next);\n\t\t\t\t}\n\n\t\t\t\treturn startNode;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNode(statement.first);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.delete(nodeToCheck);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\t\t\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\t\t\t\t\tnode.raws.before = before;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.clear();\n\n\t\t\t\t\t\t\t// Fix\n\t\t\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\t\t\tlet fixTarget = statement.first;\n\n\t\t\t\t\t\t\twhile (fixTarget) {\n\t\t\t\t\t\t\t\tconst fixTargetRaws = fixTarget.raws;\n\n\t\t\t\t\t\t\t\tif (typeof fixTargetRaws.before !== 'string') continue;\n\n\t\t\t\t\t\t\t\tif (reNewLine.test(fixTargetRaws.before || '')) {\n\t\t\t\t\t\t\t\t\tfixTargetRaws.before = fixTargetRaws.before.replace(/\\r?\\n/g, '');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (fixTarget.type !== 'comment') {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfixTarget = fixTarget.next();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\tnode.raws.before = before;\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (combinator) => `Expected single space before \"${combinator}\"`,\n\trejectedBefore: (combinator) => `Unexpected whitespace before \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/selector-combinator-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tlocationType: 'before',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.before = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.before = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-list-comma-space-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tlet beforeValue = value.slice(0, valueIndex);\n\t\t\t\t\tconst afterValue = value.slice(valueIndex);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (value) => `Unexpected vendor-prefix \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/value-no-vendor-prefix',\n\tfixable: true,\n};\n\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst hasPrefix = (value) => {\n\tconst lowerValue = value.toLowerCase();\n\n\treturn valuePrefixes.some((prefix) => lowerValue.startsWith(prefix));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreValues: [isString],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (\n\t\t\t\t!isStandardSyntaxDeclaration(decl) ||\n\t\t\t\t!isStandardSyntaxProperty(decl.prop) ||\n\t\t\t\t!value.startsWith('-')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreValues', vendor.unprefixed(value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!hasPrefix(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isAutoprefixable.propertyValue(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = isAutoprefixable.unprefix(node.value);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst startIndex = decl.prop.length + (decl.raws.between || '').length + node.sourceIndex;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: startIndex,\n\t\t\t\t\tendIndex: startIndex + node.value.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDimension = require('../../utils/getDimension');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/unit-disallowed-list',\n};\n\n/**\n * a function to retrieve only the media feature name\n * could be externalized in an utils function if needed in other code\n *\n * @param {import('postcss-media-query-parser').Child} mediaFeatureNode\n * @returns {string | undefined}\n */\nconst getMediaFeatureName = (mediaFeatureNode) => {\n\tconst value = mediaFeatureNode.value.toLowerCase();\n\n\tconst match = /((?:-?\\w*)*)/.exec(value);\n\n\treturn match ? match[1] : undefined;\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t\tignoreMediaFeatureNames: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t * @param {string | undefined} input\n\t\t * @param {Record<string, unknown>} options\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode, input, options) {\n\t\t\tconst { number, unit } = getDimension(valueNode);\n\n\t\t\t// There is not unit or it is not configured as a problem\n\t\t\tif (!unit || !number || (unit && !primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The unit has an ignore option for the specific input\n\t\t\tif (optionsMatches(options, unit.toLowerCase(), input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: nodeIndex + valueNode.sourceIndex + number.length,\n\t\t\t\tendIndex: nodeIndex + valueNode.sourceEndIndex,\n\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkMedia(node, value, getIndex) {\n\t\t\tmediaParser(node.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst mediaName = getMediaFeatureName(mediaFeatureNode);\n\t\t\t\tconst parentValue = mediaFeatureNode.parent.value;\n\n\t\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t\t// Ignore all non-word valueNode and\n\t\t\t\t\t// the values not included in the parentValue string\n\t\t\t\t\tif (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcheck(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tgetIndex(node),\n\t\t\t\t\t\tvalueNode,\n\t\t\t\t\t\tmediaName,\n\t\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreMediaFeatureNames : {},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDecl(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcheck(\n\t\t\t\t\tnode,\n\t\t\t\t\tgetIndex(node),\n\t\t\t\t\tvalueNode,\n\t\t\t\t\tnode.prop,\n\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreProperties : {},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => checkMedia(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => checkDecl(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-line-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) =>\n\t\t`Expected line length to be no more than ${max} ${max === 1 ? 'character' : 'characters'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/max-line-length',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['non-comments', 'comments'],\n\t\t\t\t\tignorePattern: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source');\n\t\t}\n\n\t\tconst EXCLUDED_PATTERNS = [\n\t\t\t/url\\(\\s*(\\S.*\\S)\\s*\\)/gi, // allow tab, whitespace in url content\n\t\t\t/@import\\s+(['\"].*['\"])/gi,\n\t\t];\n\n\t\tconst ignoreNonComments = optionsMatches(secondaryOptions, 'ignore', 'non-comments');\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\t\t// Array of skipped sub strings, i.e `url(...)`, `@import \"...\"`\n\t\t/** @type {Array<[number, number]>} */\n\t\tlet skippedSubStrings = [];\n\t\tlet skippedSubStringsIndex = 0;\n\n\t\tfor (const pattern of EXCLUDED_PATTERNS) {\n\t\t\tfor (const match of rootString.matchAll(pattern)) {\n\t\t\t\tconst subMatch = match[1] || '';\n\t\t\t\tconst startOfSubString = (match.index || 0) + (match[0] || '').indexOf(subMatch);\n\n\t\t\t\tskippedSubStrings.push([startOfSubString, startOfSubString + subMatch.length]);\n\t\t\t}\n\t\t}\n\n\t\tskippedSubStrings = skippedSubStrings.sort((a, b) => a[0] - b[0]);\n\n\t\t// Check first line\n\t\tcheckNewline({ endIndex: 0 });\n\t\t// Check subsequent lines\n\t\tstyleSearch({ source: rootString, target: ['\\n'], comments: 'check' }, (match) =>\n\t\t\tcheckNewline(match),\n\t\t);\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: root,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {number} start\n\t\t * @param {number} end\n\t\t */\n\t\tfunction tryToPopSubString(start, end) {\n\t\t\tconst skippedSubString = skippedSubStrings[skippedSubStringsIndex];\n\n\t\t\tassert(skippedSubString);\n\t\t\tconst [startSubString, endSubString] = skippedSubString;\n\n\t\t\t// Excluded substring does not presented in current line\n\t\t\tif (end < startSubString) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// Compute excluded substring size regarding to current line indexes\n\t\t\tconst excluded = Math.min(end, endSubString) - Math.max(start, startSubString);\n\n\t\t\t// Current substring is out of range for next lines\n\t\t\tif (endSubString <= end) {\n\t\t\t\tskippedSubStringsIndex++;\n\t\t\t}\n\n\t\t\treturn excluded;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch | { endIndex: number }} match\n\t\t */\n\t\tfunction checkNewline(match) {\n\t\t\tlet nextNewlineIndex = rootString.indexOf('\\n', match.endIndex);\n\n\t\t\tif (rootString[nextNewlineIndex - 1] === '\\r') {\n\t\t\t\tnextNewlineIndex -= 1;\n\t\t\t}\n\n\t\t\t// Accommodate last line\n\t\t\tif (nextNewlineIndex === -1) {\n\t\t\t\tnextNewlineIndex = rootString.length;\n\t\t\t}\n\n\t\t\tconst rawLineLength = nextNewlineIndex - match.endIndex;\n\t\t\tconst excludedLength = skippedSubStrings[skippedSubStringsIndex]\n\t\t\t\t? tryToPopSubString(match.endIndex, nextNewlineIndex)\n\t\t\t\t: 0;\n\t\t\tconst lineText = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\t// Case sensitive ignorePattern match\n\t\t\tif (optionsMatches(secondaryOptions, 'ignorePattern', lineText)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the line's length is less than or equal to the specified\n\t\t\t// max, ignore it ... So anything below is liable to be complained about.\n\t\t\t// **Note that the length of any url arguments or import urls\n\t\t\t// are excluded from the calculation.**\n\t\t\tif (rawLineLength - excludedLength <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = nextNewlineIndex - 1;\n\n\t\t\tif (ignoreComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars === '/*' || nextTwoChars === '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignoreNonComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn complain(complaintIndex);\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars !== '/*' && nextTwoChars !== '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn complain(complaintIndex);\n\t\t\t}\n\n\t\t\t// If there are no spaces besides initial (indent) spaces, ignore it\n\t\t\tconst lineString = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\tif (!lineString.replace(/^\\s+/, '').includes(' ')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn complain(complaintIndex);\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').rules} */\nconst rules = {\n\t'alpha-value-notation': importLazy('./alpha-value-notation'),\n\t'annotation-no-unknown': importLazy('./annotation-no-unknown'),\n\t'at-rule-allowed-list': importLazy('./at-rule-allowed-list'),\n\t'at-rule-disallowed-list': importLazy('./at-rule-disallowed-list'),\n\t'at-rule-empty-line-before': importLazy('./at-rule-empty-line-before'),\n\t'at-rule-name-case': importLazy('./at-rule-name-case'),\n\t'at-rule-name-newline-after': importLazy('./at-rule-name-newline-after'),\n\t'at-rule-semicolon-space-before': importLazy('./at-rule-semicolon-space-before'),\n\t'at-rule-name-space-after': importLazy('./at-rule-name-space-after'),\n\t'at-rule-no-unknown': importLazy('./at-rule-no-unknown'),\n\t'at-rule-no-vendor-prefix': importLazy('./at-rule-no-vendor-prefix'),\n\t'at-rule-property-required-list': importLazy('./at-rule-property-required-list'),\n\t'at-rule-semicolon-newline-after': importLazy('./at-rule-semicolon-newline-after'),\n\t'block-closing-brace-empty-line-before': importLazy('./block-closing-brace-empty-line-before'),\n\t'block-closing-brace-newline-after': importLazy('./block-closing-brace-newline-after'),\n\t'block-closing-brace-newline-before': importLazy('./block-closing-brace-newline-before'),\n\t'block-closing-brace-space-after': importLazy('./block-closing-brace-space-after'),\n\t'block-closing-brace-space-before': importLazy('./block-closing-brace-space-before'),\n\t'block-no-empty': importLazy('./block-no-empty'),\n\t'block-opening-brace-newline-after': importLazy('./block-opening-brace-newline-after'),\n\t'block-opening-brace-newline-before': importLazy('./block-opening-brace-newline-before'),\n\t'block-opening-brace-space-after': importLazy('./block-opening-brace-space-after'),\n\t'block-opening-brace-space-before': importLazy('./block-opening-brace-space-before'),\n\t'color-function-notation': importLazy('./color-function-notation'),\n\t'color-hex-alpha': importLazy('./color-hex-alpha'),\n\t'color-hex-case': importLazy('./color-hex-case'),\n\t'color-hex-length': importLazy('./color-hex-length'),\n\t'color-named': importLazy('./color-named'),\n\t'color-no-hex': importLazy('./color-no-hex'),\n\t'color-no-invalid-hex': importLazy('./color-no-invalid-hex'),\n\t'comment-empty-line-before': importLazy('./comment-empty-line-before'),\n\t'comment-no-empty': importLazy('./comment-no-empty'),\n\t'comment-pattern': importLazy('./comment-pattern'),\n\t'comment-whitespace-inside': importLazy('./comment-whitespace-inside'),\n\t'comment-word-disallowed-list': importLazy('./comment-word-disallowed-list'),\n\t'custom-media-pattern': importLazy('./custom-media-pattern'),\n\t'custom-property-empty-line-before': importLazy('./custom-property-empty-line-before'),\n\t'custom-property-no-missing-var-function': importLazy(\n\t\t'./custom-property-no-missing-var-function',\n\t),\n\t'custom-property-pattern': importLazy('./custom-property-pattern'),\n\t'declaration-bang-space-after': importLazy('./declaration-bang-space-after'),\n\t'declaration-bang-space-before': importLazy('./declaration-bang-space-before'),\n\t'declaration-block-no-duplicate-custom-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-custom-properties',\n\t),\n\t'declaration-block-no-duplicate-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-properties',\n\t),\n\t'declaration-block-no-redundant-longhand-properties': importLazy(\n\t\t'./declaration-block-no-redundant-longhand-properties',\n\t),\n\t'declaration-block-no-shorthand-property-overrides': importLazy(\n\t\t'./declaration-block-no-shorthand-property-overrides',\n\t),\n\t'declaration-block-semicolon-newline-after': importLazy(\n\t\t'./declaration-block-semicolon-newline-after',\n\t),\n\t'declaration-block-semicolon-newline-before': importLazy(\n\t\t'./declaration-block-semicolon-newline-before',\n\t),\n\t'declaration-block-semicolon-space-after': importLazy(\n\t\t'./declaration-block-semicolon-space-after',\n\t),\n\t'declaration-block-semicolon-space-before': importLazy(\n\t\t'./declaration-block-semicolon-space-before',\n\t),\n\t'declaration-block-single-line-max-declarations': importLazy(\n\t\t'./declaration-block-single-line-max-declarations',\n\t),\n\t'declaration-block-trailing-semicolon': importLazy('./declaration-block-trailing-semicolon'),\n\t'declaration-colon-newline-after': importLazy('./declaration-colon-newline-after'),\n\t'declaration-colon-space-after': importLazy('./declaration-colon-space-after'),\n\t'declaration-colon-space-before': importLazy('./declaration-colon-space-before'),\n\t'declaration-empty-line-before': importLazy('./declaration-empty-line-before'),\n\t'declaration-no-important': importLazy('./declaration-no-important'),\n\t'declaration-property-max-values': importLazy('./declaration-property-max-values'),\n\t'declaration-property-unit-allowed-list': importLazy('./declaration-property-unit-allowed-list'),\n\t'declaration-property-unit-disallowed-list': importLazy(\n\t\t'./declaration-property-unit-disallowed-list',\n\t),\n\t'declaration-property-value-allowed-list': importLazy(\n\t\t'./declaration-property-value-allowed-list',\n\t),\n\t'declaration-property-value-disallowed-list': importLazy(\n\t\t'./declaration-property-value-disallowed-list',\n\t),\n\t'font-family-no-missing-generic-family-keyword': importLazy(\n\t\t'./font-family-no-missing-generic-family-keyword',\n\t),\n\t'font-family-name-quotes': importLazy('./font-family-name-quotes'),\n\t'font-family-no-duplicate-names': importLazy('./font-family-no-duplicate-names'),\n\t'font-weight-notation': importLazy('./font-weight-notation'),\n\t'function-allowed-list': importLazy('./function-allowed-list'),\n\t'function-calc-no-unspaced-operator': importLazy('./function-calc-no-unspaced-operator'),\n\t'function-comma-newline-after': importLazy('./function-comma-newline-after'),\n\t'function-comma-newline-before': importLazy('./function-comma-newline-before'),\n\t'function-comma-space-after': importLazy('./function-comma-space-after'),\n\t'function-comma-space-before': importLazy('./function-comma-space-before'),\n\t'function-disallowed-list': importLazy('./function-disallowed-list'),\n\t'function-linear-gradient-no-nonstandard-direction': importLazy(\n\t\t'./function-linear-gradient-no-nonstandard-direction',\n\t),\n\t'function-max-empty-lines': importLazy('./function-max-empty-lines'),\n\t'function-name-case': importLazy('./function-name-case'),\n\t'function-no-unknown': importLazy('./function-no-unknown'),\n\t'function-parentheses-newline-inside': importLazy('./function-parentheses-newline-inside'),\n\t'function-parentheses-space-inside': importLazy('./function-parentheses-space-inside'),\n\t'function-url-no-scheme-relative': importLazy('./function-url-no-scheme-relative'),\n\t'function-url-quotes': importLazy('./function-url-quotes'),\n\t'function-url-scheme-allowed-list': importLazy('./function-url-scheme-allowed-list'),\n\t'function-url-scheme-disallowed-list': importLazy('./function-url-scheme-disallowed-list'),\n\t'function-whitespace-after': importLazy('./function-whitespace-after'),\n\t'hue-degree-notation': importLazy('./hue-degree-notation'),\n\t'import-notation': importLazy('./import-notation'),\n\t'keyframe-block-no-duplicate-selectors': importLazy('./keyframe-block-no-duplicate-selectors'),\n\t'keyframe-declaration-no-important': importLazy('./keyframe-declaration-no-important'),\n\t'keyframe-selector-notation': importLazy('./keyframe-selector-notation'),\n\t'keyframes-name-pattern': importLazy('./keyframes-name-pattern'),\n\t'length-zero-no-unit': importLazy('./length-zero-no-unit'),\n\tlinebreaks: importLazy('./linebreaks'),\n\t'max-empty-lines': importLazy('./max-empty-lines'),\n\t'max-line-length': importLazy('./max-line-length'),\n\t'max-nesting-depth': importLazy('./max-nesting-depth'),\n\t'media-feature-colon-space-after': importLazy('./media-feature-colon-space-after'),\n\t'media-feature-colon-space-before': importLazy('./media-feature-colon-space-before'),\n\t'media-feature-name-allowed-list': importLazy('./media-feature-name-allowed-list'),\n\t'media-feature-name-case': importLazy('./media-feature-name-case'),\n\t'media-feature-name-disallowed-list': importLazy('./media-feature-name-disallowed-list'),\n\t'media-feature-name-no-unknown': importLazy('./media-feature-name-no-unknown'),\n\t'media-feature-name-no-vendor-prefix': importLazy('./media-feature-name-no-vendor-prefix'),\n\t'media-feature-name-value-allowed-list': importLazy('./media-feature-name-value-allowed-list'),\n\t'media-feature-parentheses-space-inside': importLazy('./media-feature-parentheses-space-inside'),\n\t'media-feature-range-operator-space-after': importLazy(\n\t\t'./media-feature-range-operator-space-after',\n\t),\n\t'media-feature-range-operator-space-before': importLazy(\n\t\t'./media-feature-range-operator-space-before',\n\t),\n\t'media-query-list-comma-newline-after': importLazy('./media-query-list-comma-newline-after'),\n\t'media-query-list-comma-newline-before': importLazy('./media-query-list-comma-newline-before'),\n\t'media-query-list-comma-space-after': importLazy('./media-query-list-comma-space-after'),\n\t'media-query-list-comma-space-before': importLazy('./media-query-list-comma-space-before'),\n\t'named-grid-areas-no-invalid': importLazy('./named-grid-areas-no-invalid'),\n\t'no-descending-specificity': importLazy('./no-descending-specificity'),\n\t'no-duplicate-at-import-rules': importLazy('./no-duplicate-at-import-rules'),\n\t'no-duplicate-selectors': importLazy('./no-duplicate-selectors'),\n\t'no-empty-source': importLazy('./no-empty-source'),\n\t'no-empty-first-line': importLazy('./no-empty-first-line'),\n\t'no-eol-whitespace': importLazy('./no-eol-whitespace'),\n\t'no-extra-semicolons': importLazy('./no-extra-semicolons'),\n\t'no-invalid-double-slash-comments': importLazy('./no-invalid-double-slash-comments'),\n\t'no-invalid-position-at-import-rule': importLazy('./no-invalid-position-at-import-rule'),\n\t'no-irregular-whitespace': importLazy('./no-irregular-whitespace'),\n\t'no-missing-end-of-source-newline': importLazy('./no-missing-end-of-source-newline'),\n\t'no-unknown-animations': importLazy('./no-unknown-animations'),\n\t'number-leading-zero': importLazy('./number-leading-zero'),\n\t'number-max-precision': importLazy('./number-max-precision'),\n\t'number-no-trailing-zeros': importLazy('./number-no-trailing-zeros'),\n\t'property-allowed-list': importLazy('./property-allowed-list'),\n\t'property-case': importLazy('./property-case'),\n\t'property-disallowed-list': importLazy('./property-disallowed-list'),\n\t'property-no-unknown': importLazy('./property-no-unknown'),\n\t'property-no-vendor-prefix': importLazy('./property-no-vendor-prefix'),\n\t'rule-empty-line-before': importLazy('./rule-empty-line-before'),\n\t'rule-selector-property-disallowed-list': importLazy('./rule-selector-property-disallowed-list'),\n\t'selector-attribute-brackets-space-inside': importLazy(\n\t\t'./selector-attribute-brackets-space-inside',\n\t),\n\t'selector-attribute-name-disallowed-list': importLazy(\n\t\t'./selector-attribute-name-disallowed-list',\n\t),\n\t'selector-attribute-operator-allowed-list': importLazy(\n\t\t'./selector-attribute-operator-allowed-list',\n\t),\n\t'selector-attribute-operator-disallowed-list': importLazy(\n\t\t'./selector-attribute-operator-disallowed-list',\n\t),\n\t'selector-attribute-operator-space-after': importLazy(\n\t\t'./selector-attribute-operator-space-after',\n\t),\n\t'selector-attribute-operator-space-before': importLazy(\n\t\t'./selector-attribute-operator-space-before',\n\t),\n\t'selector-attribute-quotes': importLazy('./selector-attribute-quotes'),\n\t'selector-class-pattern': importLazy('./selector-class-pattern'),\n\t'selector-combinator-allowed-list': importLazy('./selector-combinator-allowed-list'),\n\t'selector-combinator-disallowed-list': importLazy('./selector-combinator-disallowed-list'),\n\t'selector-combinator-space-after': importLazy('./selector-combinator-space-after'),\n\t'selector-combinator-space-before': importLazy('./selector-combinator-space-before'),\n\t'selector-descendant-combinator-no-non-space': importLazy(\n\t\t'./selector-descendant-combinator-no-non-space',\n\t),\n\t'selector-disallowed-list': importLazy('./selector-disallowed-list'),\n\t'selector-id-pattern': importLazy('./selector-id-pattern'),\n\t'selector-list-comma-newline-after': importLazy('./selector-list-comma-newline-after'),\n\t'selector-list-comma-newline-before': importLazy('./selector-list-comma-newline-before'),\n\t'selector-list-comma-space-after': importLazy('./selector-list-comma-space-after'),\n\t'selector-list-comma-space-before': importLazy('./selector-list-comma-space-before'),\n\t'selector-max-attribute': importLazy('./selector-max-attribute'),\n\t'selector-max-class': importLazy('./selector-max-class'),\n\t'selector-max-combinators': importLazy('./selector-max-combinators'),\n\t'selector-max-compound-selectors': importLazy('./selector-max-compound-selectors'),\n\t'selector-max-empty-lines': importLazy('./selector-max-empty-lines'),\n\t'selector-max-id': importLazy('./selector-max-id'),\n\t'selector-max-pseudo-class': importLazy('./selector-max-pseudo-class'),\n\t'selector-max-specificity': importLazy('./selector-max-specificity'),\n\t'selector-max-type': importLazy('./selector-max-type'),\n\t'selector-max-universal': importLazy('./selector-max-universal'),\n\t'selector-nested-pattern': importLazy('./selector-nested-pattern'),\n\t'selector-no-qualifying-type': importLazy('./selector-no-qualifying-type'),\n\t'selector-no-vendor-prefix': importLazy('./selector-no-vendor-prefix'),\n\t'selector-not-notation': importLazy('./selector-not-notation'),\n\t'selector-pseudo-class-allowed-list': importLazy('./selector-pseudo-class-allowed-list'),\n\t'selector-pseudo-class-case': importLazy('./selector-pseudo-class-case'),\n\t'selector-pseudo-class-disallowed-list': importLazy('./selector-pseudo-class-disallowed-list'),\n\t'selector-pseudo-class-no-unknown': importLazy('./selector-pseudo-class-no-unknown'),\n\t'selector-pseudo-class-parentheses-space-inside': importLazy(\n\t\t'./selector-pseudo-class-parentheses-space-inside',\n\t),\n\t'selector-pseudo-element-allowed-list': importLazy('./selector-pseudo-element-allowed-list'),\n\t'selector-pseudo-element-case': importLazy('./selector-pseudo-element-case'),\n\t'selector-pseudo-element-colon-notation': importLazy('./selector-pseudo-element-colon-notation'),\n\t'selector-pseudo-element-disallowed-list': importLazy(\n\t\t'./selector-pseudo-element-disallowed-list',\n\t),\n\t'selector-pseudo-element-no-unknown': importLazy('./selector-pseudo-element-no-unknown'),\n\t'selector-type-case': importLazy('./selector-type-case'),\n\t'selector-type-no-unknown': importLazy('./selector-type-no-unknown'),\n\t'shorthand-property-no-redundant-values': importLazy('./shorthand-property-no-redundant-values'),\n\t'string-no-newline': importLazy('./string-no-newline'),\n\t'string-quotes': importLazy('./string-quotes'),\n\t'time-min-milliseconds': importLazy('./time-min-milliseconds'),\n\t'unicode-bom': importLazy('./unicode-bom'),\n\t'unit-allowed-list': importLazy('./unit-allowed-list'),\n\t'unit-case': importLazy('./unit-case'),\n\t'unit-disallowed-list': importLazy('./unit-disallowed-list'),\n\t'unit-no-unknown': importLazy('./unit-no-unknown'),\n\t'value-keyword-case': importLazy('./value-keyword-case'),\n\t'value-list-comma-newline-after': importLazy('./value-list-comma-newline-after'),\n\t'value-list-comma-newline-before': importLazy('./value-list-comma-newline-before'),\n\t'value-list-comma-space-after': importLazy('./value-list-comma-space-after'),\n\t'value-list-comma-space-before': importLazy('./value-list-comma-space-before'),\n\t'value-list-max-empty-lines': importLazy('./value-list-max-empty-lines'),\n\t'value-no-vendor-prefix': importLazy('./value-no-vendor-prefix'),\n\tindentation: importLazy('./indentation'),\n};\n\nmodule.exports = rules;\n","'use strict';\n\nconst rules = require('./rules');\nconst { isPlainObject } = require('./utils/validateTypes');\n\n// Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @template T\n * @template {Object} O\n * @param {import('stylelint').ConfigRuleSettings<T, O>} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the rules themselves, which will not work for plugins\n * @return {[T] | [T, O] | null}\n */\nmodule.exports = function normalizeRuleSettings(\n\trawSettings,\n\truleName,\n\t// If primaryOptionArray is not provided, we try to get it from the\n\t// rules themselves, which will not work for plugins\n\tprimaryOptionArray,\n) {\n\tif (rawSettings === null || rawSettings === undefined) {\n\t\treturn null;\n\t}\n\n\tif (!Array.isArray(rawSettings)) {\n\t\treturn [rawSettings];\n\t}\n\t// Everything below is an array ...\n\n\tif (rawSettings.length > 0 && (rawSettings[0] === null || rawSettings[0] === undefined)) {\n\t\treturn null;\n\t}\n\n\tif (primaryOptionArray === undefined) {\n\t\tconst rule = rules[ruleName];\n\n\t\tif (rule && 'primaryOptionArray' in rule) {\n\t\t\tprimaryOptionArray = rule.primaryOptionArray;\n\t\t}\n\t}\n\n\tif (!primaryOptionArray) {\n\t\treturn rawSettings;\n\t}\n\t// Everything below is a rule that CAN have an array for a primary option ...\n\t// (they might also have something else, e.g. rule-properties-order can\n\t// have the string \"alphabetical\")\n\n\tif (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n\t\treturn rawSettings;\n\t}\n\n\tif (rawSettings.length === 2 && !isPlainObject(rawSettings[0]) && isPlainObject(rawSettings[1])) {\n\t\treturn rawSettings;\n\t}\n\n\t// `T` must be an array type, but TSC thinks it's probably invalid to\n\t// cast `[T]` to `T` so we cast through `any` first.\n\treturn [/** @type {T} */ (/** @type {any} */ (rawSettings))];\n};\n","'use strict';\n\n/**\n * @type {typeof import('stylelint').createPlugin}\n */\nmodule.exports = function createPlugin(ruleName, rule) {\n\treturn {\n\t\truleName,\n\t\trule,\n\t};\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst globalModules = require('global-modules');\nconst resolveFrom = require('resolve-from');\n\n/**\n * @param {string} basedir\n * @param {string} lookup\n * @param {string} [cwd]\n * @return {string}\n */\nmodule.exports = function getModulePath(basedir, lookup, cwd = process.cwd()) {\n\t// 1. Try to resolve from the provided directory\n\t// 2. Try to resolve from `cwd` or `process.cwd()`\n\t// 3. Try to resolve from global `node_modules` directory\n\tlet path = resolveFrom.silent(basedir, lookup);\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(cwd, lookup);\n\t}\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(globalModules, lookup);\n\t}\n\n\tif (!path) {\n\t\tthrow configurationError(`Could not find \"${lookup}\". Do you need a \\`configBasedir\\`?`);\n\t}\n\n\treturn path;\n};\n","'use strict';\n\nvar Path = require('path');\nvar slice = Array.prototype.slice;\n\nfunction join(/* globs */) {\n\tvar args;\n\n\targs = slice.call(arguments, 0);\n\treturn args.reduce(function (result, globs) {\n\t\treturn _apply(result, function (path) {\n\t\t\treturn _apply(globs, function (glob) {\n\t\t\t\treturn _join(path, glob);\n\t\t\t});\n\t\t});\n\t}, '');\n}\n\nfunction _apply(values, fn) {\n\tif (Array.isArray(values)) {\n\t\treturn values.reduce(function (result, value) {\n\t\t\treturn result.concat(fn(value));\n\t\t}, []);\n\t}\n\treturn fn(values);\n}\n\nfunction _join(path, glob) {\n\tvar negative, positive;\n\n\tif (glob[0] === '!') {\n\t\tpositive = glob.substr(1);\n\t\tif (path[0] === '!') {\n\t\t\tnegative = '';\n\t\t} else {\n\t\t\tnegative = '!';\n\t\t}\n\t\treturn negative + Path.join(path, positive);\n\t}\n\treturn Path.join(path, glob);\n}\n\nmodule.exports = join;\n","'use strict';\n\nconst normalizeRuleSettings = require('./normalizeRuleSettings');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction normalizeAllRuleSettings(config) {\n\tif (!config.rules) return config;\n\n\t/** @type {StylelintConfigRules} */\n\tconst normalizedRules = {};\n\n\tfor (const [ruleName, rawRuleSettings] of Object.entries(config.rules)) {\n\t\tconst rule = rules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (rule) {\n\t\t\tnormalizedRules[ruleName] = normalizeRuleSettings(\n\t\t\t\trawRuleSettings,\n\t\t\t\truleName,\n\t\t\t\trule.primaryOptionArray,\n\t\t\t);\n\t\t} else {\n\t\t\tnormalizedRules[ruleName] = [];\n\t\t}\n\t}\n\n\tconfig.rules = normalizedRules;\n\n\treturn config;\n}\n\nmodule.exports = normalizeAllRuleSettings;\n","'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst micromatch = require('micromatch');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\nasync function augmentConfigBasic(\n\tstylelint,\n\tconfig,\n\tconfigDir,\n\tallowOverrides,\n\trootConfigDir,\n\tfilePath,\n) {\n\tlet augmentedConfig = config;\n\n\tif (allowOverrides) {\n\t\taugmentedConfig = addOptions(stylelint, augmentedConfig);\n\t}\n\n\tif (filePath) {\n\t\taugmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n\t}\n\n\taugmentedConfig = await extendConfig(\n\t\tstylelint,\n\t\taugmentedConfig,\n\t\tconfigDir,\n\t\trootConfigDir,\n\t\tfilePath,\n\t);\n\n\tconst cwd = stylelint._options.cwd;\n\n\treturn absolutizePaths(augmentedConfig, configDir, cwd);\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\nfunction augmentConfigExtended(cwd) {\n\treturn async (cosmiconfigResult) => {\n\t\tif (!cosmiconfigResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\t\tconst { config } = cosmiconfigResult;\n\n\t\tconst augmentedConfig = absolutizePaths(config, configDir, cwd);\n\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t};\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n\tif (!cosmiconfigResult) {\n\t\treturn null;\n\t}\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\tlet augmentedConfig = await augmentConfigBasic(\n\t\tstylelint,\n\t\tconfig,\n\t\tconfigDir,\n\t\ttrue,\n\t\tconfigDir,\n\t\tfilePath,\n\t);\n\n\taugmentedConfig = addPluginFunctions(augmentedConfig);\n\taugmentedConfig = addProcessorFunctions(augmentedConfig);\n\n\tif (!augmentedConfig.rules) {\n\t\tthrow configurationError(\n\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t);\n\t}\n\n\taugmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n\n\treturn {\n\t\tconfig: augmentedConfig,\n\t\tfilepath: cosmiconfigResult.filepath,\n\t};\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir, cwd) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = [config.ignoreFiles].flat().map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = [config.plugins].flat().map((lookup) => getModulePath(configDir, lookup, cwd));\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n\tif (config.extends === undefined) {\n\t\treturn config;\n\t}\n\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\tconst normalizedExtends = [configExtends].flat();\n\n\tlet resultConfig = originalWithoutExtends;\n\n\tfor (const extendLookup of normalizedExtends) {\n\t\tconst extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n\t\tif (extendResult) {\n\t\t\tlet extendResultConfig = extendResult.config;\n\t\t\tconst extendConfigDir = path.dirname(extendResult.filepath || '');\n\n\t\t\textendResultConfig = await augmentConfigBasic(\n\t\t\t\tstylelint,\n\t\t\t\textendResultConfig,\n\t\t\t\textendConfigDir,\n\t\t\t\tfalse,\n\t\t\t\trootConfigDir,\n\t\t\t\tfilePath,\n\t\t\t);\n\n\t\t\tresultConfig = mergeConfigs(resultConfig, extendResultConfig);\n\t\t}\n\t}\n\n\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\t/** @type {{overrides: StylelintConfigOverride[]}} */\n\tconst overridesMerger = {};\n\n\tif (a.overrides || b.overrides) {\n\t\toverridesMerger.overrides = [];\n\n\t\tif (a.overrides) {\n\t\t\toverridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n\t\t}\n\n\t\tif (b.overrides) {\n\t\t\toverridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = {\n\t\t...a,\n\t\t...b,\n\t\t...processorMerger,\n\t\t...pluginMerger,\n\t\t...overridesMerger,\n\t\t...rulesMerger,\n\t};\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) {\n\t\treturn config;\n\t}\n\n\tconst normalizedPlugins = [config.plugins].flat();\n\n\t/** @type {StylelintConfig['pluginFunctions']} */\n\tconst pluginFunctions = {};\n\n\tfor (const pluginLookup of normalizedPlugins) {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = [pluginImport].flat();\n\n\t\tfor (const pluginRuleDefinition of normalizedPluginImport) {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t}\n\t}\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {StylelintCodeProcessor[]} */\n\tconst codeProcessors = [];\n\t/** @type {StylelintResultProcessor[]} */\n\tconst resultProcessors = [];\n\n\tfor (const processorConfig of [config.processors].flat()) {\n\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\tlet initializedProcessor;\n\n\t\tif (processorCache.has(processorKey)) {\n\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t} else {\n\t\t\tconst processorLookup =\n\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\tconst processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\tlet processor = require(processorLookup);\n\n\t\t\tprocessor = processor.default || processor;\n\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t}\n\t}\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n\tlet { overrides, ...config } = fullConfig;\n\n\tif (!overrides) {\n\t\treturn config;\n\t}\n\n\tif (!Array.isArray(overrides)) {\n\t\tthrow new TypeError(\n\t\t\t'The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t);\n\t}\n\n\tfor (const override of overrides) {\n\t\tconst { files, ...configOverrides } = override;\n\n\t\tif (!files) {\n\t\t\tthrow new Error(\n\t\t\t\t'Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t\t);\n\t\t}\n\n\t\tconst filesGlobs = [files]\n\t\t\t.flat()\n\t\t\t.map((glob) => {\n\t\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) {\n\t\t\t\t\treturn glob;\n\t\t\t\t}\n\n\t\t\t\treturn globjoin(rootConfigDir, glob);\n\t\t\t})\n\t\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\t\t.map((s) => normalizePath(s));\n\n\t\tif (micromatch.isMatch(filePath, filesGlobs, { dot: true })) {\n\t\t\tconfig = mergeConfigs(config, configOverrides);\n\t\t}\n\t}\n\n\treturn config;\n}\n\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\nfunction addOptions(stylelint, config) {\n\tconst augmentedConfig = {\n\t\t...config,\n\t};\n\n\tif (stylelint._options.ignoreDisables) {\n\t\taugmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n\t}\n\n\tif (stylelint._options.quiet) {\n\t\taugmentedConfig.quiet = stylelint._options.quiet;\n\t}\n\n\tif (stylelint._options.reportNeedlessDisables) {\n\t\taugmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n\t}\n\n\tif (stylelint._options.reportInvalidScopeDisables) {\n\t\taugmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n\t}\n\n\tif (stylelint._options.reportDescriptionlessDisables) {\n\t\taugmentedConfig.reportDescriptionlessDisables =\n\t\t\tstylelint._options.reportDescriptionlessDisables;\n\t}\n\n\tif (stylelint._options.customSyntax) {\n\t\taugmentedConfig.customSyntax = stylelint._options.customSyntax;\n\t}\n\n\treturn augmentedConfig;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull, applyOverrides };\n","'use strict';\n\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst augmentConfig = require('./augmentConfig');\nconst FileCache = require('./utils/FileCache');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @type {import('stylelint')['createLinter']}\n */\nmodule.exports = function createStylelint(options = {}) {\n\tconst cwd = options.cwd || process.cwd();\n\n\treturn {\n\t\t_options: { ...options, cwd },\n\n\t\t_extendExplorer: cosmiconfig('', {\n\t\t\ttransform: augmentConfig.augmentConfigExtended(cwd),\n\t\t\tstopDir: STOP_DIR,\n\t\t}),\n\n\t\t_specifiedConfigCache: new Map(),\n\t\t_postcssResultCache: new Map(),\n\t\t_fileCache: new FileCache(options.cacheLocation, options.cacheStrategy, cwd),\n\t};\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function compactFormatter(results) {\n\treturn results\n\t\t.flatMap((result) =>\n\t\t\tresult.warnings.map(\n\t\t\t\t(warning) =>\n\t\t\t\t\t`${result.source}: ` +\n\t\t\t\t\t`line ${warning.line}, ` +\n\t\t\t\t\t`col ${warning.column}, ` +\n\t\t\t\t\t`${warning.severity} - ` +\n\t\t\t\t\t`${warning.text}`,\n\t\t\t),\n\t\t)\n\t\t.join('\\n');\n};\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n","'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n","/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n\tif (Number.isNaN(codePoint)) {\n\t\treturn false;\n\t}\n\n\t// Code points are derived from:\n\t// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\tif (\n\t\tcodePoint >= 0x1100 && (\n\t\t\tcodePoint <= 0x115F || // Hangul Jamo\n\t\t\tcodePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n\t\t\tcodePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n\t\t\t// CJK Radicals Supplement .. Enclosed CJK Letters and Months\n\t\t\t(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||\n\t\t\t// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n\t\t\t(0x3250 <= codePoint && codePoint <= 0x4DBF) ||\n\t\t\t// CJK Unified Ideographs .. Yi Radicals\n\t\t\t(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||\n\t\t\t// Hangul Jamo Extended-A\n\t\t\t(0xA960 <= codePoint && codePoint <= 0xA97C) ||\n\t\t\t// Hangul Syllables\n\t\t\t(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||\n\t\t\t// CJK Compatibility Ideographs\n\t\t\t(0xF900 <= codePoint && codePoint <= 0xFAFF) ||\n\t\t\t// Vertical Forms\n\t\t\t(0xFE10 <= codePoint && codePoint <= 0xFE19) ||\n\t\t\t// CJK Compatibility Forms .. Small Form Variants\n\t\t\t(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||\n\t\t\t// Halfwidth and Fullwidth Forms\n\t\t\t(0xFF01 <= codePoint && codePoint <= 0xFF60) ||\n\t\t\t(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||\n\t\t\t// Kana Supplement\n\t\t\t(0x1B000 <= codePoint && codePoint <= 0x1B001) ||\n\t\t\t// Enclosed Ideographic Supplement\n\t\t\t(0x1F200 <= codePoint && codePoint <= 0x1F251) ||\n\t\t\t// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n\t\t\t(0x20000 <= codePoint && codePoint <= 0x3FFFD)\n\t\t)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n","'use strict';\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\n\nconst stringWidth = string => {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tlet width = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst code = string.codePointAt(i);\n\n\t\t// Ignore control characters\n\t\tif (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (code >= 0x300 && code <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Surrogates\n\t\tif (code > 0xFFFF) {\n\t\t\ti++;\n\t\t}\n\n\t\twidth += isFullwidthCodePoint(code) ? 2 : 1;\n\t}\n\n\treturn width;\n};\n\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n","\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n","'use strict';\n\n/**\n * Returns the plural form of the given word.\n *\n * @param {string} singular\n * @param {number} count\n * @returns {string}\n */\nmodule.exports = function pluralize(singular, count) {\n\treturn count === 1 ? singular : `${singular}s`;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","export const EOL = \"\\n\";\nexport const release = () => \"\";\n","'use strict';\nconst supportsColor = require('supports-color');\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n\tif (/^\\d{3,4}$/.test(versionString)) {\n\t\t// Env var doesn't always use dots. example: 4601 => 46.1.0\n\t\tconst m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n\t\treturn {\n\t\t\tmajor: 0,\n\t\t\tminor: parseInt(m[1], 10),\n\t\t\tpatch: parseInt(m[2], 10)\n\t\t};\n\t}\n\n\tconst versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n\treturn {\n\t\tmajor: versions[0],\n\t\tminor: versions[1],\n\t\tpatch: versions[2]\n\t};\n}\n\nfunction supportsHyperlink(stream) {\n\tconst {env} = process;\n\n\tif ('FORCE_HYPERLINK' in env) {\n\t\treturn !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n\t}\n\n\tif (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n\t\treturn true;\n\t}\n\n\t// Netlify does not run a TTY, it does not need `supportsColor` check\n\tif ('NETLIFY' in env) {\n\t\treturn true;\n\t}\n\n\t// If they specify no colors, they probably don't want hyperlinks.\n\tif (!supportsColor.supportsColor(stream)) {\n\t\treturn false;\n\t}\n\n\tif (stream && !stream.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn false;\n\t}\n\n\tif ('CI' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\tif (version.major === 3) {\n\t\t\t\t\treturn version.minor >= 1;\n\t\t\t\t}\n\n\t\t\t\treturn version.major > 3;\n\t\t\tcase 'WezTerm':\n\t\t\t\treturn version.major >= 20200620;\n\t\t\tcase 'vscode':\n\t\t\t\treturn version.major > 1 || version.major === 1 && version.minor >= 72;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif ('VTE_VERSION' in env) {\n\t\t// 0.50.0 was supposed to support hyperlinks, but throws a segfault\n\t\tif (env.VTE_VERSION === '0.50.0') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst version = parseVersion(env.VTE_VERSION);\n\t\treturn version.major > 0 || version.minor >= 50;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tsupportsHyperlink,\n\tstdout: supportsHyperlink(process.stdout),\n\tstderr: supportsHyperlink(process.stderr)\n};\n","export const isatty = () => false;\n","const supportsHyperlinks = require('supports-hyperlinks');\n\n// ANSI escapes\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\n\n/**\n * @see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n *\n * @param {string} text\n * @param {string} url\n * @returns {string}\n */\nmodule.exports = function terminalLink(text, url) {\n\tif (supportsHyperlinks.stdout) {\n\t\treturn [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n\t}\n\n\treturn text;\n};\n","'use strict';\n\nconst path = require('path');\nconst stringWidth = require('string-width');\nconst table = require('table');\nconst { yellow, dim, underline, blue, red, green } = require('picocolors');\n\nconst pluralize = require('../utils/pluralize');\nconst { assertNumber } = require('../utils/validateTypes');\nconst terminalLink = require('./terminalLink');\n\nconst MARGIN_WIDTHS = 9;\n\n/**\n * @param {string} s\n * @returns {string}\n */\nfunction nope(s) {\n\treturn s;\n}\n\nconst levelColors = {\n\tinfo: blue,\n\twarning: yellow,\n\terror: red,\n\tsuccess: nope,\n};\n\nconst symbols = {\n\tinfo: blue('ℹ'),\n\twarning: yellow('⚠'),\n\terror: red('✖'),\n\tsuccess: green('✔'),\n};\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @returns {string}\n */\nfunction deprecationsFormatter(results) {\n\tconst allDeprecationWarnings = results.flatMap((result) => result.deprecations);\n\n\tif (allDeprecationWarnings.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst seenText = new Set();\n\n\treturn allDeprecationWarnings.reduce((output, warning) => {\n\t\tif (seenText.has(warning.text)) return output;\n\n\t\tseenText.add(warning.text);\n\n\t\toutput += yellow('Deprecation Warning: ');\n\t\toutput += warning.text;\n\n\t\tif (warning.reference) {\n\t\t\toutput += dim(' See: ');\n\t\t\toutput += dim(underline(warning.reference));\n\t\t}\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @return {string}\n */\nfunction invalidOptionsFormatter(results) {\n\tconst allInvalidOptionWarnings = results.flatMap((result) =>\n\t\tresult.invalidOptionWarnings.map((warning) => warning.text),\n\t);\n\tconst uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n\n\treturn uniqueInvalidOptionWarnings.reduce((output, warning) => {\n\t\toutput += red('Invalid Option: ');\n\t\toutput += warning;\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {string} fromValue\n * @param {string} cwd\n * @return {string}\n */\nfunction logFrom(fromValue, cwd) {\n\tif (fromValue.startsWith('<')) {\n\t\treturn underline(fromValue);\n\t}\n\n\tconst filePath = path.relative(cwd, fromValue).split(path.sep).join('/');\n\n\treturn terminalLink(filePath, `file://${fromValue}`);\n}\n\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\nfunction getMessageWidth(columnWidths) {\n\tconst width = columnWidths[3];\n\n\tassertNumber(width);\n\n\tif (!process.stdout.isTTY) {\n\t\treturn width;\n\t}\n\n\tconst availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n\tconst fullWidth = Object.values(columnWidths).reduce((a, b) => a + b);\n\n\t// If there is no reason to wrap the text, we won't align the last column to the right\n\tif (availableWidth > fullWidth + MARGIN_WIDTHS) {\n\t\treturn width;\n\t}\n\n\treturn availableWidth - (fullWidth - width + MARGIN_WIDTHS);\n}\n\n/**\n * @param {import('stylelint').Warning[]} messages\n * @param {string} source\n * @param {string} cwd\n * @return {string}\n */\nfunction formatter(messages, source, cwd) {\n\tif (!messages.length) return '';\n\n\tconst orderedMessages = [...messages].sort((a, b) => {\n\t\t// positionless first\n\t\tif (!a.line && b.line) return -1;\n\n\t\t// positionless first\n\t\tif (a.line && !b.line) return 1;\n\n\t\tif (a.line < b.line) return -1;\n\n\t\tif (a.line > b.line) return 1;\n\n\t\tif (a.column < b.column) return -1;\n\n\t\tif (a.column > b.column) return 1;\n\n\t\treturn 0;\n\t});\n\n\t/**\n\t * Create a list of column widths, needed to calculate\n\t * the size of the message column and if needed wrap it.\n\t * @type {{[k: string]: number}}\n\t */\n\tconst columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 };\n\n\t/**\n\t * @param {[string, string, string, string, string]} columns\n\t * @return {[string, string, string, string, string]}\n\t */\n\tfunction calculateWidths(columns) {\n\t\tfor (const [key, value] of Object.entries(columns)) {\n\t\t\tconst normalisedValue = value ? value.toString() : value;\n\t\t\tconst width = columnWidths[key];\n\n\t\t\tassertNumber(width);\n\t\t\tcolumnWidths[key] = Math.max(width, stringWidth(normalisedValue));\n\t\t}\n\n\t\treturn columns;\n\t}\n\n\tlet output = '\\n';\n\n\tif (source) {\n\t\toutput += `${logFrom(source, cwd)}\\n`;\n\t}\n\n\t/**\n\t * @param {import('stylelint').Warning} message\n\t * @return {string}\n\t */\n\tfunction formatMessageText(message) {\n\t\tlet result = message.text;\n\n\t\tresult = result\n\t\t\t// Remove all control characters (newline, tab and etc)\n\t\t\t.replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n\t\t\t.replace(/\\.$/, '');\n\n\t\tconst ruleString = ` (${message.rule})`;\n\n\t\tif (result.endsWith(ruleString)) {\n\t\t\tresult = result.slice(0, result.lastIndexOf(ruleString));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tconst cleanedMessages = orderedMessages.map((message) => {\n\t\tconst { line, column, severity } = message;\n\t\t/**\n\t\t * @type {[string, string, string, string, string]}\n\t\t */\n\t\tconst row = [\n\t\t\tline ? line.toString() : '',\n\t\t\tcolumn ? column.toString() : '',\n\t\t\tsymbols[severity] ? levelColors[severity](symbols[severity]) : severity,\n\t\t\tformatMessageText(message),\n\t\t\tdim(message.rule || ''),\n\t\t];\n\n\t\tcalculateWidths(row);\n\n\t\treturn row;\n\t});\n\n\toutput += table\n\t\t.table(cleanedMessages, {\n\t\t\tborder: table.getBorderCharacters('void'),\n\t\t\tcolumns: {\n\t\t\t\t0: { alignment: 'right', width: columnWidths[0], paddingRight: 0 },\n\t\t\t\t1: { alignment: 'left', width: columnWidths[1] },\n\t\t\t\t2: { alignment: 'center', width: columnWidths[2] },\n\t\t\t\t3: {\n\t\t\t\t\talignment: 'left',\n\t\t\t\t\twidth: getMessageWidth(columnWidths),\n\t\t\t\t\twrapWord: getMessageWidth(columnWidths) > 1,\n\t\t\t\t},\n\t\t\t\t4: { alignment: 'left', width: columnWidths[4], paddingRight: 0 },\n\t\t\t},\n\t\t\tdrawHorizontalLine: () => false,\n\t\t})\n\t\t.split('\\n')\n\t\t.map(\n\t\t\t/**\n\t\t\t * @param {string} el\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\t(el) => el.replace(/(\\d+)\\s+(\\d+)/, (_m, p1, p2) => dim(`${p1}:${p2}`)),\n\t\t)\n\t\t.join('\\n');\n\n\treturn output;\n}\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function stringFormatter(results, returnValue) {\n\tlet output = invalidOptionsFormatter(results);\n\n\toutput += deprecationsFormatter(results);\n\n\tlet errorCount = 0;\n\tlet warningCount = 0;\n\n\toutput = results.reduce((accum, result) => {\n\t\t// Treat parseErrors as warnings\n\t\tif (result.parseErrors) {\n\t\t\tfor (const error of result.parseErrors) {\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\tline: error.line,\n\t\t\t\t\tcolumn: error.column,\n\t\t\t\t\trule: error.stylelintType,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${error.text} (${error.stylelintType})`,\n\t\t\t\t});\n\t\t\t\terrorCount += 1;\n\t\t\t}\n\t\t}\n\n\t\taccum += formatter(\n\t\t\tresult.warnings,\n\t\t\tresult.source || '',\n\t\t\t(returnValue && returnValue.cwd) || process.cwd(),\n\t\t);\n\n\t\tfor (const warning of result.warnings) {\n\t\t\tswitch (warning.severity) {\n\t\t\t\tcase 'error':\n\t\t\t\t\terrorCount += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\twarningCount += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unknown severity: \"${warning.severity}\"`);\n\t\t\t}\n\t\t}\n\n\t\treturn accum;\n\t}, output);\n\n\t// Ensure consistent padding\n\toutput = output.trim();\n\n\tif (output !== '') {\n\t\toutput = `\\n${output}\\n\\n`;\n\n\t\tconst total = errorCount + warningCount;\n\n\t\tif (total > 0) {\n\t\t\tconst tally =\n\t\t\t\t`${total} ${pluralize('problem', total)}` +\n\t\t\t\t` (${errorCount} ${pluralize('error', errorCount)}` +\n\t\t\t\t`, ${warningCount} ${pluralize('warning', warningCount)})`;\n\n\t\t\toutput += `${tally}\\n\\n`;\n\t\t}\n\t}\n\n\treturn output;\n};\n","'use strict';\n\nconst { underline, red, yellow, dim, green } = require('picocolors');\n\nconst pluralize = require('../utils/pluralize');\nconst stringFormatter = require('./stringFormatter');\nconst terminalLink = require('./terminalLink');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} LintResult */\n/** @typedef {import('stylelint').Warning} Warning */\n/** @typedef {import('stylelint').Severity} Severity */\n/** @typedef {import('stylelint').RuleMeta} RuleMeta */\n\n/**\n * @type {Formatter}\n */\nmodule.exports = function verboseFormatter(results, returnValue) {\n\tlet output = stringFormatter(results, returnValue);\n\n\tif (output === '') {\n\t\toutput = '\\n';\n\t}\n\n\tconst ignoredCount = results.filter((result) => result.ignored).length;\n\tconst checkedDisplay = ignoredCount\n\t\t? `${results.length - ignoredCount} of ${results.length}`\n\t\t: results.length;\n\n\toutput += underline(`${checkedDisplay} ${pluralize('source', results.length)} checked\\n`);\n\n\tfor (const result of results) {\n\t\tlet formatting = green;\n\n\t\tif (result.errored) {\n\t\t\tformatting = red;\n\t\t} else if (result.warnings.length) {\n\t\t\tformatting = yellow;\n\t\t} else if (result.ignored) {\n\t\t\tformatting = dim;\n\t\t}\n\n\t\tlet sourceText = fileLink(result.source);\n\n\t\tif (result.ignored) {\n\t\t\tsourceText += ' (ignored)';\n\t\t}\n\n\t\toutput += formatting(` ${sourceText}\\n`);\n\t}\n\n\tconst warnings = results.flatMap((r) => r.warnings);\n\n\tif (warnings.length === 0) {\n\t\toutput += '\\n0 problems found\\n';\n\t} else {\n\t\tconst warningsBySeverity = groupBy(warnings, (w) => w.severity);\n\t\tlet fixableProblemsFound = false;\n\n\t\t/**\n\t\t * @param {Severity} severity\n\t\t */\n\t\tconst printProblems = (severity) => {\n\t\t\tconst problems = warningsBySeverity[severity];\n\n\t\t\tif (problems === undefined) return;\n\n\t\t\toutput += '\\n';\n\t\t\toutput += underline(`${problems.length} ${pluralize(severity, problems.length)} found\\n`);\n\n\t\t\tconst problemsByRule = groupBy(problems, (w) => w.rule);\n\t\t\tconst metadata = returnValue.ruleMetadata;\n\n\t\t\tfor (const [rule, list] of Object.entries(problemsByRule)) {\n\t\t\t\tconst meta = metadata[rule];\n\t\t\t\tconst fixable = meta && meta.fixable ? ' (maybe fixable)' : '';\n\n\t\t\t\toutput += dim(` ${ruleLink(rule, meta)}: ${list.length}${fixable}\\n`);\n\n\t\t\t\tif (!fixableProblemsFound && meta && meta.fixable) {\n\t\t\t\t\tfixableProblemsFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprintProblems('error');\n\t\tprintProblems('warning');\n\n\t\tif (fixableProblemsFound) {\n\t\t\toutput += yellow('\\nYou may fix some problems with the \"--fix\" option.\\n');\n\t\t}\n\t}\n\n\treturn `${output}\\n`;\n};\n\n/**\n * @template {string} K\n * @param {Warning[]} array\n * @param {(w: Warning) => K} keyFn\n * @returns {Record<K, Warning[]>}\n */\nfunction groupBy(array, keyFn) {\n\t/** @type {Record<string, Warning[]>} */\n\tconst result = {};\n\n\tfor (const item of array) {\n\t\tconst key = keyFn(item);\n\t\tlet warnings = result[key];\n\n\t\tif (warnings === undefined) {\n\t\t\tresult[key] = warnings = [];\n\t\t}\n\n\t\twarnings.push(item);\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {string | undefined} source\n * @returns {string}\n */\nfunction fileLink(source) {\n\tif (!source || source.startsWith('<')) {\n\t\treturn `${source}`;\n\t}\n\n\treturn terminalLink(source, `file://${source}`);\n}\n\n/**\n * @param {string} rule\n * @param {Partial<RuleMeta> | undefined} metadata\n * @returns {string}\n */\nfunction ruleLink(rule, metadata) {\n\tif (metadata && metadata.url) {\n\t\treturn terminalLink(rule, metadata.url);\n\t}\n\n\treturn rule;\n}\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').formatters} */\nconst formatters = {\n\tcompact: importLazy('./compactFormatter'),\n\tgithub: importLazy('./githubFormatter'),\n\tjson: importLazy('./jsonFormatter'),\n\tstring: importLazy('./stringFormatter'),\n\ttap: importLazy('./tapFormatter'),\n\tunix: importLazy('./unixFormatter'),\n\tverbose: importLazy('./verboseFormatter'),\n};\n\nmodule.exports = formatters;\n","'use strict';\n\n/**\n * @see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function githubFormatter(results, returnValue) {\n\tconst title = 'Stylelint problem';\n\tconst metadata = returnValue.ruleMetadata;\n\n\treturn results\n\t\t.flatMap(({ source, warnings }) =>\n\t\t\twarnings.map(({ line, column, endLine, endColumn, text, severity, rule }) => {\n\t\t\t\tconst msg = buildMessage(text, metadata[rule]);\n\n\t\t\t\treturn endLine === undefined\n\t\t\t\t\t? `::${severity} file=${source},line=${line},col=${column},title=${title}::${msg}`\n\t\t\t\t\t: `::${severity} file=${source},line=${line},col=${column},endLine=${endLine},endColumn=${endColumn},title=${title}::${msg}`;\n\t\t\t}),\n\t\t)\n\t\t.join('\\n');\n};\n\n/**\n * @param {string} msg\n * @param {Partial<import('stylelint').RuleMeta> | undefined} metadata\n * @returns {string}\n */\nfunction buildMessage(msg, metadata) {\n\tif (!metadata) return msg;\n\n\tconst url = metadata.url ? ` - ${metadata.url}` : '';\n\tconst fixable = metadata.fixable ? ' [maybe fixable]' : '';\n\n\treturn `${msg}${fixable}${url}`;\n}\n","'use strict';\n\n/**\n * Omit any properties starting with `_`, which are fake-private\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function jsonFormatter(results) {\n\tconst cleanedResults = results.map((result) =>\n\t\tObject.entries(result)\n\t\t\t.filter(([key]) => !key.startsWith('_'))\n\t\t\t.reduce((/** @type {{ [key: string]: any }} */ obj, [key, value]) => {\n\t\t\t\tobj[key] = value;\n\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t);\n\n\treturn JSON.stringify(cleanedResults);\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function tapFormatter(results) {\n\tconst lines = [`TAP version 13\\n1..${results.length}`];\n\n\tfor (const [index, result] of results.entries()) {\n\t\tlines.push(\n\t\t\t`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${\n\t\t\t\tresult.source\n\t\t\t}`,\n\t\t);\n\n\t\tif (result.warnings.length > 0) {\n\t\t\tlines.push('---', 'messages:');\n\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlines.push(\n\t\t\t\t\t` - message: \"${warning.text}\"`,\n\t\t\t\t\t`   severity: ${warning.severity}`,\n\t\t\t\t\t`   data:`,\n\t\t\t\t\t`     line: ${warning.line}`,\n\t\t\t\t\t`     column: ${warning.column}`,\n\t\t\t\t\t`     endLine: ${warning.endLine}`,\n\t\t\t\t\t`     endColumn: ${warning.endColumn}`,\n\t\t\t\t\t`     ruleId: ${warning.rule}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlines.push('---');\n\t\t}\n\t}\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function unixFormatter(results) {\n\tconst lines = results.flatMap((result) =>\n\t\tresult.warnings.map(\n\t\t\t(warning) =>\n\t\t\t\t`${result.source}:${warning.line}:${warning.column}: ` +\n\t\t\t\t`${warning.text} [${warning.severity}]\\n`,\n\t\t),\n\t);\n\tconst total = lines.length;\n\tlet output = lines.join('');\n\n\tif (total > 0) {\n\t\toutput += `\\n${total} problem${total !== 1 ? 's' : ''}\\n`;\n\t}\n\n\treturn output;\n};\n","import normalize from \"stylelint/lib/normalizeAllRuleSettings\";\n\nexport default async stylelint => ({\n  config: normalize(stylelint._options.config)\n});\n","let tokenizer = require('postcss/lib/tokenize')\nlet Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n  }\n}\n\nmodule.exports = SafeParser\n","let { Input } = require('postcss')\n\nlet SafeParser = require('./safe-parser')\n\nmodule.exports = function safeParse(css, opts) {\n  let input = new Input(css, opts)\n\n  let parser = new SafeParser(input)\n  parser.parse()\n\n  return parser.root\n}\n","'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\nconst path = require('path');\nconst { default: postcss } = require('postcss');\nconst { promises: fs } = require('fs');\n\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('postcss').Syntax} Syntax */\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\nconst postcssProcessor = postcss();\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\nmodule.exports = async function getPostcssResult(stylelint, options = {}) {\n\tconst cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tif (stylelint._options.syntax) {\n\t\tlet error = 'The \"syntax\" option is no longer available. ';\n\n\t\terror +=\n\t\t\tstylelint._options.syntax === 'css'\n\t\t\t\t? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default'\n\t\t\t\t: `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n\n\t\treturn Promise.reject(new Error(error));\n\t}\n\n\tconst syntax = options.customSyntax\n\t\t? getCustomSyntax(options.customSyntax)\n\t\t: cssSyntax(stylelint, options.filePath);\n\n\tconst postcssOptions = {\n\t\tfrom: options.filePath,\n\t\tsyntax,\n\t};\n\n\t/** @type {string | undefined} */\n\tlet getCode;\n\n\tif (options.code !== undefined) {\n\t\tgetCode = options.code;\n\t} else if (options.filePath) {\n\t\tgetCode = await fs.readFile(options.filePath, 'utf8');\n\t}\n\n\tif (getCode === undefined) {\n\t\treturn Promise.reject(new Error('code or filePath required'));\n\t}\n\n\tif (options.codeProcessors && options.codeProcessors.length) {\n\t\tif (stylelint._options.fix) {\n\t\t\tconsole.warn(\n\t\t\t\t'Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?',\n\t\t\t);\n\t\t\tstylelint._options.fix = false;\n\t\t}\n\n\t\tconst sourceName = options.code ? options.codeFilename : options.filePath;\n\n\t\tfor (const codeProcessor of options.codeProcessors) {\n\t\t\tgetCode = codeProcessor(getCode, sourceName);\n\t\t}\n\t}\n\n\tconst postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n\tif (options.filePath) {\n\t\tstylelint._postcssResultCache.set(options.filePath, postcssResult);\n\t}\n\n\treturn postcssResult;\n};\n\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\nfunction getCustomSyntax(customSyntax) {\n\tlet resolved;\n\n\tif (typeof customSyntax === 'string') {\n\t\ttry {\n\t\t\tresolved = require(customSyntax);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror &&\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.code === 'MODULE_NOT_FOUND' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.message.includes(customSyntax)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/*\n\t\t * PostCSS allows for syntaxes that only contain a parser, however,\n\t\t * it then expects the syntax to be set as the `parse` option.\n\t\t */\n\t\tif (!resolved.parse) {\n\t\t\tresolved = {\n\t\t\t\tparse: resolved,\n\t\t\t\tstringify: postcss.stringify,\n\t\t\t};\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tif (typeof customSyntax === 'object') {\n\t\tif (typeof customSyntax.parse === 'function') {\n\t\t\tresolved = { ...customSyntax };\n\t\t} else {\n\t\t\tthrow new TypeError(\n\t\t\t\t`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`,\n\t\t\t);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tthrow new Error(`Custom syntax must be a string or a Syntax object`);\n}\n\n/** @type {{ [key: string]: string }} */\nconst previouslyInferredExtensions = {\n\thtml: 'postcss-html',\n\tjs: '@stylelint/postcss-css-in-js',\n\tjsx: '@stylelint/postcss-css-in-js',\n\tless: 'postcss-less',\n\tmd: 'postcss-markdown',\n\tsass: 'postcss-sass',\n\tsss: 'sugarss',\n\tscss: 'postcss-scss',\n\tsvelte: 'postcss-html',\n\tts: '@stylelint/postcss-css-in-js',\n\ttsx: '@stylelint/postcss-css-in-js',\n\tvue: 'postcss-html',\n\txml: 'postcss-html',\n\txst: 'postcss-html',\n};\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\nfunction cssSyntax(stylelint, filePath) {\n\tconst fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n\tconst extensions = ['css', 'pcss', 'postcss'];\n\n\tif (previouslyInferredExtensions[fileExtension]) {\n\t\tconsole.warn(\n\t\t\t`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`,\n\t\t);\n\t}\n\n\treturn {\n\t\tparse:\n\t\t\tstylelint._options.fix && extensions.includes(fileExtension)\n\t\t\t\t? require('postcss-safe-parser')\n\t\t\t\t: postcss.parse,\n\t\tstringify: postcss.stringify,\n\t};\n}\n","export default async () => false;\n","'use strict';\n\nconst util = require('util');\n\n/**\n * @param {unknown} error\n * @returns {error is NodeJS.ErrnoException}\n */\nmodule.exports = function isPathNotFoundError(error) {\n\t// @ts-expect-error -- TS2339: Property 'code' does not exist on type 'Error'.\n\treturn util.types.isNativeError(error) && error.code === 'ENOENT';\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\nconst {\n\tDISABLE_COMMAND,\n\tDISABLE_LINE_COMMAND,\n\tDISABLE_NEXT_LINE_COMMAND,\n\tENABLE_COMMAND,\n\textractStylelintCommand,\n\tisStylelintCommand,\n} = require('./utils/stylelintCommand');\nconst { assert, assertNumber, assertString } = require('./utils/validateTypes');\n\nconst ALL_RULES = 'all';\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('postcss').Root} PostcssRoot */\n/** @typedef {import('postcss').Document} PostcssDocument */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n\treturn {\n\t\tcomment,\n\t\tstart,\n\t\tend: end || undefined,\n\t\tstrictStart,\n\t\tstrictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n\t\tdescription,\n\t};\n}\n\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\nmodule.exports = function assignDisabledRanges(root, result) {\n\tresult.stylelint = result.stylelint || {\n\t\tdisabledRanges: {},\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t/**\n\t * Most of the functions below work via side effects mutating this object\n\t * @type {DisabledRangeObject & { all: DisabledRange[] }}\n\t */\n\tconst disabledRanges = {\n\t\t[ALL_RULES]: [],\n\t};\n\n\tresult.stylelint.disabledRanges = disabledRanges;\n\n\t// Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n\t// into a single node before passing to `checkComment`.\n\n\t/** @type {PostcssComment?} */\n\tlet inlineEnd;\n\n\troot.walkComments((comment) => {\n\t\tif (inlineEnd) {\n\t\t\t// Ignore comments already processed by grouping with a previous one.\n\t\t\tif (inlineEnd === comment) inlineEnd = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextComment = comment.next();\n\n\t\t// If any of these conditions are not met, do not merge comments.\n\t\tif (\n\t\t\t!(\n\t\t\t\t!isStandardSyntaxComment(comment) &&\n\t\t\t\tisStylelintCommand(comment) &&\n\t\t\t\tnextComment &&\n\t\t\t\tnextComment.type === 'comment' &&\n\t\t\t\t(comment.text.includes('--') || nextComment.text.startsWith('--'))\n\t\t\t)\n\t\t) {\n\t\t\tcheckComment(comment);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastLine = (comment.source && comment.source.end && comment.source.end.line) || 0;\n\t\tconst fullComment = comment.clone();\n\n\t\tlet current = nextComment;\n\n\t\twhile (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n\t\t\tconst currentLine = (current.source && current.source.end && current.source.end.line) || 0;\n\n\t\t\tif (lastLine + 1 !== currentLine) break;\n\n\t\t\tfullComment.text += `\\n${current.text}`;\n\n\t\t\tif (fullComment.source && current.source) {\n\t\t\t\tfullComment.source.end = current.source.end;\n\t\t\t}\n\n\t\t\tinlineEnd = current;\n\t\t\tconst next = current.next();\n\n\t\t\tif (!next || next.type !== 'comment') break;\n\n\t\t\tcurrent = next;\n\t\t\tlastLine = currentLine;\n\t\t}\n\n\t\tcheckComment(fullComment);\n\t});\n\n\treturn result;\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableLineCommand(comment) {\n\t\tif (comment.source && comment.source.start) {\n\t\t\tconst line = comment.source.start.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(DISABLE_LINE_COMMAND, comment.text)) {\n\t\t\t\tdisableLine(comment, line, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableNextLineCommand(comment) {\n\t\tif (comment.source && comment.source.end) {\n\t\t\tconst line = comment.source.end.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(DISABLE_NEXT_LINE_COMMAND, comment.text)) {\n\t\t\t\tdisableLine(comment, line + 1, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {string|undefined} description\n\t */\n\tfunction disableLine(comment, line, ruleName, description) {\n\t\tif (ruleIsDisabled(ALL_RULES)) {\n\t\t\tthrow comment.error('All rules have already been disabled', {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\n\t\tif (ruleName === ALL_RULES) {\n\t\t\tfor (const disabledRuleName of Object.keys(disabledRanges)) {\n\t\t\t\tif (ruleIsDisabled(disabledRuleName)) continue;\n\n\t\t\t\tconst strict = disabledRuleName === ALL_RULES;\n\n\t\t\t\tstartDisabledRange(comment, line, disabledRuleName, strict, description);\n\t\t\t\tendDisabledRange(line, disabledRuleName, strict);\n\t\t\t}\n\t\t} else {\n\t\t\tif (ruleIsDisabled(ruleName)) {\n\t\t\t\tthrow comment.error(`\"${ruleName}\" has already been disabled`, {\n\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstartDisabledRange(comment, line, ruleName, true, description);\n\t\t\tendDisabledRange(line, ruleName, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableCommand(comment) {\n\t\tconst description = getDescription(comment.text);\n\n\t\tfor (const ruleToDisable of getCommandRules(DISABLE_COMMAND, comment.text)) {\n\t\t\tconst isAllRules = ruleToDisable === ALL_RULES;\n\n\t\t\tif (ruleIsDisabled(ruleToDisable)) {\n\t\t\t\tthrow comment.error(\n\t\t\t\t\tisAllRules\n\t\t\t\t\t\t? 'All rules have already been disabled'\n\t\t\t\t\t\t: `\"${ruleToDisable}\" has already been disabled`,\n\t\t\t\t\t{\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (comment.source && comment.source.start) {\n\t\t\t\tconst line = comment.source.start.line;\n\n\t\t\t\tif (isAllRules) {\n\t\t\t\t\tfor (const ruleName of Object.keys(disabledRanges)) {\n\t\t\t\t\t\tstartDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartDisabledRange(comment, line, ruleToDisable, true, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processEnableCommand(comment) {\n\t\tfor (const ruleToEnable of getCommandRules(ENABLE_COMMAND, comment.text)) {\n\t\t\t// need fallback if endLine will be undefined\n\t\t\tconst endLine = comment.source && comment.source.end && comment.source.end.line;\n\n\t\t\tassertNumber(endLine);\n\n\t\t\tif (ruleToEnable === ALL_RULES) {\n\t\t\t\tif (\n\t\t\t\t\tObject.values(disabledRanges).every((ranges) => {\n\t\t\t\t\t\tif (ranges.length === 0) return true;\n\n\t\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\t\treturn lastRange && typeof lastRange.end === 'number';\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tthrow comment.error('No rules have been disabled', {\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\tif (!lastRange || !lastRange.end) {\n\t\t\t\t\t\tendDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n\t\t\t\t// Get a starting point from the where all rules were disabled\n\t\t\t\tdisabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(\n\t\t\t\t\t({ start, end, description }) =>\n\t\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t\t);\n\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ruleToEnable)) {\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction checkComment(comment) {\n\t\t// Ignore comments that are not relevant commands\n\n\t\tif (!isStylelintCommand(comment)) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (extractStylelintCommand(comment)) {\n\t\t\tcase DISABLE_LINE_COMMAND:\n\t\t\t\tprocessDisableLineCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase DISABLE_NEXT_LINE_COMMAND:\n\t\t\t\tprocessDisableNextLineCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase DISABLE_COMMAND:\n\t\t\t\tprocessDisableCommand(comment);\n\t\t\t\tbreak;\n\t\t\tcase ENABLE_COMMAND:\n\t\t\t\tprocessEnableCommand(comment);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} command\n\t * @param {string} fullText\n\t * @returns {string[]}\n\t */\n\tfunction getCommandRules(command, fullText) {\n\t\t// Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n\t\tconst splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n\n\t\tassertString(splitted);\n\t\tconst rules = splitted\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.filter(Boolean)\n\t\t\t.map((r) => r.trim());\n\n\t\tif (rules.length === 0) {\n\t\t\treturn [ALL_RULES];\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * @param {string} fullText\n\t * @returns {string|undefined}\n\t */\n\tfunction getDescription(fullText) {\n\t\tconst descriptionStart = fullText.indexOf('--');\n\n\t\tif (descriptionStart === -1) return;\n\n\t\treturn fullText.slice(descriptionStart + 2).trim();\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t * @param {string|undefined} description\n\t */\n\tfunction startDisabledRange(comment, line, ruleName, strict, description) {\n\t\tconst rangeObj = createDisableRange(comment, line, strict, description);\n\n\t\tensureRuleRanges(ruleName);\n\n\t\tconst range = disabledRanges[ruleName];\n\n\t\tassert(range);\n\t\trange.push(rangeObj);\n\t}\n\n\t/**\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t */\n\tfunction endDisabledRange(line, ruleName, strict) {\n\t\tconst ranges = disabledRanges[ruleName];\n\t\tconst lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n\t\tif (!lastRangeForRule) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add an `end` prop to the last range of that rule\n\t\tlastRangeForRule.end = line;\n\t\tlastRangeForRule.strictEnd = strict;\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t */\n\tfunction ensureRuleRanges(ruleName) {\n\t\tif (!disabledRanges[ruleName]) {\n\t\t\tdisabledRanges[ruleName] = disabledRanges[ALL_RULES].map(\n\t\t\t\t({ comment, start, end, description }) =>\n\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t * @returns {boolean}\n\t */\n\tfunction ruleIsDisabled(ruleName) {\n\t\tconst ranges = disabledRanges[ruleName];\n\n\t\tif (!ranges) return false;\n\n\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\tif (!lastRange) return false;\n\n\t\tif (!lastRange.end) return true;\n\n\t\treturn false;\n\t}\n};\n","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = Array.from({ length: MAX_LEVENSHTEIN_DISTANCE });\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tfor (const existRuleName of Object.keys(rules)) {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t}\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (const [i, suggestion] of suggestions.entries()) {\n\t\tif (suggestion.length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestion);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t});\n};\n","'use strict';\n\nconst path = require('path');\n\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\nconst lintPostcssResult = require('./lintPostcssResult');\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = async function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst isIgnored = await isPathIgnored(stylelint, inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) return false;\n\n\t\tthrow err;\n\t});\n\n\tif (isIgnored) {\n\t\treturn options.existingPostcssResult\n\t\t\t? Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t  })\n\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t}\n\n\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\tconst cwd = stylelint._options.cwd;\n\n\tlet configForFile;\n\n\ttry {\n\t\tconfigForFile = await getConfigForFile(stylelint, configSearchPath, inputFilePath);\n\t} catch (err) {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) {\n\t\t\tconfigForFile = await getConfigForFile(stylelint, cwd);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tif (!configForFile) {\n\t\treturn Promise.reject(new Error('Config file not found'));\n\t}\n\n\tconst config = configForFile.config;\n\tconst existingPostcssResult = options.existingPostcssResult;\n\n\tif (options.cache) {\n\t\tstylelint._fileCache.calcHashOfConfig(config);\n\n\t\tif (options.filePath && !stylelint._fileCache.hasFileChanged(options.filePath)) {\n\t\t\treturn existingPostcssResult\n\t\t\t\t? Object.assign(existingPostcssResult, {\n\t\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t\t  })\n\t\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t\t}\n\t}\n\n\t/** @type {StylelintPostcssResult} */\n\tconst stylelintResult = {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t};\n\n\tconst postcssResult =\n\t\texistingPostcssResult ||\n\t\t(await getPostcssResult(stylelint, {\n\t\t\tcode: options.code,\n\t\t\tcodeFilename: options.codeFilename,\n\t\t\tfilePath: inputFilePath,\n\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\tcustomSyntax: config.customSyntax,\n\t\t}));\n\n\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\tstylelint: stylelintResult,\n\t});\n\n\tawait lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n\n\treturn stylelintPostcssResult;\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t\tstylelintWarning: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n","'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.ruleMetadata = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.stylelintWarning = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string | undefined} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (\n\t\tpostcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]\n\t);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rulesOrder = Object.keys(rules);\n\tconst ruleNames = config.rules\n\t\t? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b))\n\t\t: [];\n\n\tfor (const ruleName of ruleNames) {\n\t\tconst ruleFunction =\n\t\t\trules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ruleSettings = config.rules && config.rules[ruleName];\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\t\t// disableFix in secondary option\n\t\tconst disableFix = (secondaryOptions && secondaryOptions.disableFix === true) || false;\n\n\t\tif (disableFix) {\n\t\t\tpostcssResult.stylelint.ruleDisableFix = true;\n\t\t}\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] =\n\t\t\t(secondaryOptions && secondaryOptions.severity) || defaultSeverity;\n\t\tpostcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n\t\tpostcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\t!disableFix &&\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n","'use strict';\n\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst lintSource = require('./lintSource');\n\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\nmodule.exports = (options = {}) => {\n\tconst [cwd, tailoredOptions] = isConfig(options)\n\t\t? [process.cwd(), { config: options }]\n\t\t: [options.cwd || process.cwd(), options];\n\tconst stylelint = createStylelint(tailoredOptions);\n\n\treturn {\n\t\tpostcssPlugin: 'stylelint',\n\t\tOnce(root, { result }) {\n\t\t\tlet filePath = root.source && root.source.input.file;\n\n\t\t\tif (filePath && !path.isAbsolute(filePath)) {\n\t\t\t\tfilePath = path.join(cwd, filePath);\n\t\t\t}\n\n\t\t\treturn lintSource(stylelint, {\n\t\t\t\tfilePath,\n\t\t\t\texistingPostcssResult: result,\n\t\t\t});\n\t\t},\n\t};\n};\n\nmodule.exports.postcss = true;\n\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\nfunction isConfig(options) {\n\treturn 'rules' in options;\n}\n","'use strict';\n\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst getConfigForFile = require('./getConfigForFile');\n\n/**\n * Resolves the effective configuration for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} options - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\nmodule.exports = async function resolveConfig(\n\tfilePath,\n\t{ cwd = process.cwd(), config, configBasedir, configFile } = {},\n) {\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t});\n\n\tconst absoluteFilePath = !path.isAbsolute(filePath)\n\t\t? path.join(cwd, filePath)\n\t\t: path.normalize(filePath);\n\n\tconst configSearchPath = stylelint._options.configFile || absoluteFilePath;\n\n\tconst resolved = await getConfigForFile(stylelint, configSearchPath, absoluteFilePath);\n\n\tif (!resolved) {\n\t\treturn undefined;\n\t}\n\n\treturn resolved.config;\n};\n","'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = async function createStylelintResult(\n\tstylelint,\n\tpostcssResult,\n\tfilePath,\n\tcssSyntaxError,\n) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\tconst configForFile = await getConfigForFile(stylelint, filePath, filePath);\n\n\tconst config = configForFile === null ? {} : configForFile.config;\n\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\tif (config.resultProcessors) {\n\t\tfor (const resultProcessor of config.resultProcessors) {\n\t\t\t// Result processors might just mutate the result object,\n\t\t\t// or might return a new one\n\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\tif (returned) {\n\t\t\t\tstylelintResult = returned;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function createPartialStylelintResult(postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\tconst deprecationMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'deprecation',\n\t\t);\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\tconst invalidOptionMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'invalidOption',\n\t\t);\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'parseError',\n\t\t);\n\n\t\t// Remove deprecation warnings, invalid options, and parse errors from the messages\n\t\tpostcssResult.messages = postcssResult.messages.filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.stylelintType !== 'deprecation' &&\n\t\t\t\tmessage.stylelintType !== 'invalidOption' &&\n\t\t\t\tmessage.stylelintType !== 'parseError',\n\t\t);\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n\t\t\tparseErrors,\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\tendLine: message.endLine,\n\t\t\t\t\tendColumn: message.endColumn,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\tendLine: cssSyntaxError.endLine,\n\t\t\t\t\tendColumn: cssSyntaxError.endColumn,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\nconst { isPathValid } = require('ignore').default;\n\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n\tconst validForIgnore = filePaths.filter(isPathValid);\n\t// Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\tconst notValidForIgnore = new Set(filePaths.filter((p) => !validForIgnore.includes(p)));\n\n\tconst filteredByIgnore = new Set(ignorer.filter(validForIgnore));\n\n\t// Preserving files order, while removing paths which were filtered by `ignore`\n\treturn filePaths.filter((p) => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};\n","'use strict';\n\nclass NoFilesFoundError extends Error {\n\t/**\n\t * @param {string|string[]} fileList\n\t */\n\tconstructor(fileList) {\n\t\tsuper();\n\n\t\tif (typeof fileList === 'string') {\n\t\t\tfileList = [fileList];\n\t\t}\n\n\t\tconst pattern = fileList.filter((i) => !i.startsWith('!')).join(', ');\n\n\t\tthis.message = `No files matching the pattern \"${pattern}\" were found.`;\n\t}\n}\n\nmodule.exports = NoFilesFoundError;\n","'use strict';\n\nclass AllFilesIgnoredError extends Error {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.message = `All input files were ignored because of the ignore pattern. Either change your input, ignore pattern or use \"--allow-empty-input\" to allow no inputs`;\n\t}\n}\n\nmodule.exports = AllFilesIgnoredError;\n","'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\nconst { isRegExp, isString } = require('./utils/validateTypes');\n\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\nmodule.exports = function validateDisableSettings(result, field) {\n\t// Files with `CssSyntaxError`s don't have `_postcssResult`s.\n\tif (!result) return null;\n\n\tconst stylelintResult = result.stylelint;\n\n\t// Files with linting errors may not have configs associated with them.\n\tif (!stylelintResult.config) return null;\n\n\tconst rawSettings = stylelintResult.config[field];\n\n\t/** @type {boolean} */\n\tlet enabled;\n\t/** @type {DisableOptions} */\n\tlet options;\n\n\tif (Array.isArray(rawSettings)) {\n\t\tenabled = rawSettings[0];\n\t\toptions = rawSettings[1] || {};\n\t} else {\n\t\tenabled = rawSettings || false;\n\t\toptions = {};\n\t}\n\n\tconst validOptions = validateOptions(\n\t\tresult,\n\t\tfield,\n\t\t{\n\t\t\tactual: enabled,\n\t\t\tpossible: [true, false],\n\t\t},\n\t\t{\n\t\t\tactual: options,\n\t\t\tpossible: {\n\t\t\t\texcept: [isString, isRegExp],\n\t\t\t},\n\t\t},\n\t);\n\n\tif (!validOptions) return null;\n\n\t// If the check is disabled with no exceptions, there's no reason to run\n\t// it at all.\n\tif (!enabled && !options.except) return null;\n\n\treturn [\n\t\tenabled,\n\t\t{\n\t\t\texcept: options.except || [],\n\t\t\tseverity: options.severity || stylelintResult.config.defaultSeverity || 'error',\n\t\t},\n\t\tstylelintResult,\n\t];\n};\n","'use strict';\n\n/**\n * If `map` already has the given `key`, returns its value. Otherwise, calls\n * `callback`, adds the result to `map` at `key`, and then returns it.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {() => V} callback\n * @returns {V}\n */\nmodule.exports = function putIfAbsent(map, key, callback) {\n\tif (map.has(key)) return /** @type {V} */ (map.get(key));\n\n\tconst value = callback();\n\n\tmap.set(key, value);\n\n\treturn value;\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst putIfAbsent = require('./utils/putIfAbsent');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function needlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst rangeData = stylelintResult.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst disabledWarnings = stylelintResult.disabledWarnings || [];\n\n\t\t// A map from `stylelint-disable` comments to the set of rules that\n\t\t// are usefully disabled by each comment. We track this\n\t\t// comment-by-comment rather than range-by-range because ranges that\n\t\t// disable *all* rules are duplicated for each rule they apply to in\n\t\t// practice.\n\t\t/** @type {Map<PostcssComment, Set<string>>}} */\n\t\tconst usefulDisables = new Map();\n\n\t\tfor (const warning of disabledWarnings) {\n\t\t\tconst rule = warning.rule;\n\t\t\tconst ruleRanges = rangeData[rule];\n\n\t\t\tif (ruleRanges) {\n\t\t\t\tfor (const range of ruleRanges) {\n\t\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const range of rangeData.all || []) {\n\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst allRangeComments = new Set((rangeData.all || []).map((range) => range.comment));\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\t\tconst useful = usefulDisables.get(range.comment) || new Set();\n\n\t\t\t\t// Only emit a warning if this range's comment isn't useful for this rule.\n\t\t\t\t// For the special rule \"all\", only emit a warning if it's not useful for\n\t\t\t\t// *any* rules, because it covers all of them.\n\t\t\t\tif (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Needless disable for \"${rule}\"`,\n\t\t\t\t\trule: '--report-needless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\nfunction isWarningInRange(warning, range) {\n\tconst line = warning.line;\n\n\t// Need to check if range.end exist, because line number type cannot be compared to undefined\n\treturn (\n\t\trange.start <= line &&\n\t\t((range.end !== undefined && range.end >= line) || range.end === undefined)\n\t);\n}\n","'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\nmodule.exports = function reportDisables(results) {\n\tfor (const result of results) {\n\t\t// File with `CssSyntaxError` don't have `_postcssResult`s.\n\t\tif (!result._postcssResult) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/** @type {{[ruleName: string]: Array<RangeType>}} */\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst config = result._postcssResult.stylelint.config;\n\n\t\tif (!config || !config.rules) continue;\n\n\t\t// If no rules actually disallow disables, don't bother looking for ranges\n\t\t// that correspond to disabled rules.\n\t\tif (!Object.values(config.rules).some((rule) => reportDisablesForRule(rule))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (!reportDisablesForRule(config.rules[rule] || [])) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" may not be disabled`,\n\t\t\t\t\trule: 'reportDisables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\nfunction reportDisablesForRule(options) {\n\tif (!options || !options[1]) return false;\n\n\treturn Boolean(options[1].reportDisables);\n}\n","'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\nconst invalidScopeDisables = require('./invalidScopeDisables');\nconst needlessDisables = require('./needlessDisables');\nconst reportDisables = require('./reportDisables');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').LinterOptions[\"maxWarnings\"]} maxWarnings */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {maxWarnings} maxWarnings\n * @param {Formatter} formatter\n * @param {string} cwd\n *\n * @returns {LinterResult}\n */\nmodule.exports = function prepareReturnValue(stylelintResults, maxWarnings, formatter, cwd) {\n\treportDisables(stylelintResults);\n\tneedlessDisables(stylelintResults);\n\tinvalidScopeDisables(stylelintResults);\n\tdescriptionlessDisables(stylelintResults);\n\n\tconst errored = stylelintResults.some(\n\t\t(result) =>\n\t\t\tresult.errored ||\n\t\t\tresult.parseErrors.length > 0 ||\n\t\t\tresult.warnings.some((warning) => warning.severity === 'error'),\n\t);\n\n\t/** @type {LinterResult} */\n\tconst returnValue = {\n\t\tcwd,\n\t\terrored,\n\t\tresults: [],\n\t\toutput: '',\n\t\treportedDisables: [],\n\t\truleMetadata: getRuleMetadata(stylelintResults),\n\t};\n\n\tif (maxWarnings !== undefined) {\n\t\tconst foundWarnings = stylelintResults.reduce((count, file) => count + file.warnings.length, 0);\n\n\t\tif (foundWarnings > maxWarnings) {\n\t\t\treturnValue.maxWarningsExceeded = { maxWarnings, foundWarnings };\n\t\t}\n\t}\n\n\treturnValue.output = formatter(stylelintResults, returnValue);\n\treturnValue.results = stylelintResults;\n\n\treturn returnValue;\n};\n\n/**\n * @param {StylelintResult[]} lintResults\n */\nfunction getRuleMetadata(lintResults) {\n\tconst [lintResult] = lintResults;\n\n\tif (lintResult === undefined) return {};\n\n\tif (lintResult._postcssResult === undefined) return {};\n\n\treturn lintResult._postcssResult.stylelint.ruleMetadata;\n}\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function invalidScopeDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst configRules = (stylelintResult.config || {}).rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tif (usedRules.has(rule)) continue;\n\n\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function descriptionlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(\n\t\t\tresult._postcssResult,\n\t\t\t'reportDescriptionlessDisables',\n\t\t);\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (range.description) continue;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) {\n\t\t\t\t\t// An 'all' rule will get copied for each individual rule. If the\n\t\t\t\t\t// configuration is `[false, {except: ['specific-rule']}]`, we\n\t\t\t\t\t// don't want to report the copies that match except, so we record\n\t\t\t\t\t// the comment as already reported.\n\t\t\t\t\tif (!enabled && rule === 'all') alreadyReported.add(range.comment);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:standalone');\nconst fastGlob = require('fast-glob');\nconst fs = require('fs');\nconst globby = require('globby');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst createStylelintResult = require('./createStylelintResult');\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst formatters = require('./formatters');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst getFormatterOptionsText = require('./utils/getFormatterOptionsText');\nconst lintSource = require('./lintSource');\nconst NoFilesFoundError = require('./utils/noFilesFoundError');\nconst AllFilesIgnoredError = require('./utils/allFilesIgnoredError');\nconst { assert } = require('./utils/validateTypes');\nconst prepareReturnValue = require('./prepareReturnValue');\n\nconst ALWAYS_IGNORED_GLOBS = ['**/node_modules/**'];\nconst writeFileAtomic = require('write-file-atomic');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').FormatterType} FormatterType */\n\n/**\n *\n * @param {LinterOptions} options\n * @returns {Promise<LinterResult>}\n */\nasync function standalone({\n\tallowEmptyInput = false,\n\tcache: useCache = false,\n\tcacheLocation,\n\tcacheStrategy,\n\tcode,\n\tcodeFilename,\n\tconfig,\n\tconfigBasedir,\n\tconfigFile,\n\tcustomSyntax,\n\tcwd = process.cwd(),\n\tdisableDefaultIgnores,\n\tfiles,\n\tfix,\n\tformatter,\n\tglobbyOptions,\n\tignoreDisables,\n\tignorePath,\n\tignorePattern,\n\tmaxWarnings,\n\tquiet,\n\treportDescriptionlessDisables,\n\treportInvalidScopeDisables,\n\treportNeedlessDisables,\n\tsyntax,\n}) {\n\tconst startTime = Date.now();\n\n\tconst isValidCode = typeof code === 'string';\n\n\tif ((!files && !isValidCode) || (files && (code || isValidCode))) {\n\t\treturn Promise.reject(\n\t\t\tnew Error('You must pass stylelint a `files` glob or a `code` string, though not both'),\n\t\t);\n\t}\n\n\t// The ignorer will be used to filter file paths after the glob is checked,\n\t// before any files are actually read\n\n\t/** @type {import('ignore').Ignore} */\n\tlet ignorer;\n\n\ttry {\n\t\tignorer = getFileIgnorer({ cwd, ignorePath, ignorePattern });\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\t/** @type {Formatter} */\n\tlet formatterFunction;\n\n\ttry {\n\t\tformatterFunction = getFormatterFunction(formatter);\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tcacheLocation,\n\t\tcacheStrategy,\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t\tignoreDisables,\n\t\tignorePath,\n\t\treportNeedlessDisables,\n\t\treportInvalidScopeDisables,\n\t\treportDescriptionlessDisables,\n\t\tsyntax,\n\t\tcustomSyntax,\n\t\tfix,\n\t\tquiet,\n\t});\n\n\tif (!files) {\n\t\tconst absoluteCodeFilename =\n\t\t\tcodeFilename !== undefined && !path.isAbsolute(codeFilename)\n\t\t\t\t? path.join(cwd, codeFilename)\n\t\t\t\t: codeFilename;\n\n\t\t// if file is ignored, return nothing\n\t\tif (\n\t\t\tabsoluteCodeFilename &&\n\t\t\t!filterFilePaths(ignorer, [path.relative(cwd, absoluteCodeFilename)]).length\n\t\t) {\n\t\t\treturn prepareReturnValue([], maxWarnings, formatterFunction, cwd);\n\t\t}\n\n\t\tlet stylelintResult;\n\n\t\ttry {\n\t\t\tconst postcssResult = await lintSource(stylelint, {\n\t\t\t\tcode,\n\t\t\t\tcodeFilename: absoluteCodeFilename,\n\t\t\t});\n\n\t\t\tstylelintResult = await createStylelintResult(stylelint, postcssResult, absoluteCodeFilename);\n\t\t} catch (error) {\n\t\t\tstylelintResult = await handleError(stylelint, error);\n\t\t}\n\n\t\tconst postcssResult = stylelintResult._postcssResult;\n\t\tconst returnValue = prepareReturnValue([stylelintResult], maxWarnings, formatterFunction, cwd);\n\n\t\tif (\n\t\t\tfix &&\n\t\t\tpostcssResult &&\n\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t!postcssResult.stylelint.ruleDisableFix\n\t\t) {\n\t\t\treturnValue.output =\n\t\t\t\t!postcssResult.stylelint.disableWritingFix && postcssResult.opts\n\t\t\t\t\t? // If we're fixing, the output should be the fixed code\n\t\t\t\t\t  postcssResult.root.toString(postcssResult.opts.syntax)\n\t\t\t\t\t: // If the writing of the fix is disabled, the input code is returned as-is\n\t\t\t\t\t  code;\n\t\t}\n\n\t\treturn returnValue;\n\t}\n\n\tlet fileList = [files].flat().map((entry) => {\n\t\tconst globCWD = (globbyOptions && globbyOptions.cwd) || cwd;\n\t\tconst absolutePath = !path.isAbsolute(entry)\n\t\t\t? path.join(globCWD, entry)\n\t\t\t: path.normalize(entry);\n\n\t\tif (fs.existsSync(absolutePath)) {\n\t\t\t// This path points to a file. Return an escaped path to avoid globbing\n\t\t\treturn fastGlob.escapePath(normalizePath(entry));\n\t\t}\n\n\t\treturn entry;\n\t});\n\n\tif (!disableDefaultIgnores) {\n\t\tfileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map((glob) => `!${glob}`));\n\t}\n\n\tif (!useCache) {\n\t\tstylelint._fileCache.destroy();\n\t}\n\n\tconst effectiveGlobbyOptions = {\n\t\tcwd,\n\t\t...(globbyOptions || {}),\n\t\tabsolute: true,\n\t};\n\n\tconst globCWD = effectiveGlobbyOptions.cwd;\n\n\tlet filePaths = await globby(fileList, effectiveGlobbyOptions);\n\t// Record the length of filePaths before ignore operation\n\t// Prevent prompting \"No files matching the pattern 'xx' were found.\" when .stylelintignore ignore all input files\n\tconst filePathsLengthBeforeIgnore = filePaths.length;\n\n\t// The ignorer filter needs to check paths relative to cwd\n\tfilePaths = filterFilePaths(\n\t\tignorer,\n\t\tfilePaths.map((p) => path.relative(globCWD, p)),\n\t);\n\n\tlet stylelintResults;\n\n\tif (filePaths.length) {\n\t\tlet absoluteFilePaths = filePaths.map((filePath) => {\n\t\t\tconst absoluteFilepath = !path.isAbsolute(filePath)\n\t\t\t\t? path.join(globCWD, filePath)\n\t\t\t\t: path.normalize(filePath);\n\n\t\t\treturn absoluteFilepath;\n\t\t});\n\n\t\tconst getStylelintResults = absoluteFilePaths.map(async (absoluteFilepath) => {\n\t\t\tdebug(`Processing ${absoluteFilepath}`);\n\n\t\t\ttry {\n\t\t\t\tconst postcssResult = await lintSource(stylelint, {\n\t\t\t\t\tfilePath: absoluteFilepath,\n\t\t\t\t\tcache: useCache,\n\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\t(postcssResult.stylelint.stylelintError || postcssResult.stylelint.stylelintWarning) &&\n\t\t\t\t\tuseCache\n\t\t\t\t) {\n\t\t\t\t\tdebug(`${absoluteFilepath} contains linting errors and will not be cached.`);\n\t\t\t\t\tstylelint._fileCache.removeEntry(absoluteFilepath);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * If we're fixing, save the file with changed code\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\tpostcssResult.opts &&\n\t\t\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t\t\tfix &&\n\t\t\t\t\t!postcssResult.stylelint.disableWritingFix\n\t\t\t\t) {\n\t\t\t\t\tconst fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\t\tpostcssResult.root.source &&\n\t\t\t\t\t\tpostcssResult.root.source.input.css !== fixedCss\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait writeFileAtomic(absoluteFilepath, fixedCss);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn createStylelintResult(stylelint, postcssResult, absoluteFilepath);\n\t\t\t} catch (error) {\n\t\t\t\t// On any error, we should not cache the lint result\n\t\t\t\tstylelint._fileCache.removeEntry(absoluteFilepath);\n\n\t\t\t\treturn handleError(stylelint, error, absoluteFilepath);\n\t\t\t}\n\t\t});\n\n\t\tstylelintResults = await Promise.all(getStylelintResults);\n\t} else if (allowEmptyInput) {\n\t\tstylelintResults = await Promise.all([]);\n\t} else if (filePathsLengthBeforeIgnore) {\n\t\t// All input files ignored\n\t\tstylelintResults = await Promise.reject(new AllFilesIgnoredError());\n\t} else {\n\t\tstylelintResults = await Promise.reject(new NoFilesFoundError(fileList));\n\t}\n\n\tif (useCache) {\n\t\tstylelint._fileCache.reconcile();\n\t}\n\n\tconst result = prepareReturnValue(stylelintResults, maxWarnings, formatterFunction, cwd);\n\n\tdebug(`Linting complete in ${Date.now() - startTime}ms`);\n\n\treturn result;\n}\n\n/**\n * @param {FormatterType | Formatter | undefined} selected\n * @returns {Formatter}\n */\nfunction getFormatterFunction(selected) {\n\tif (typeof selected === 'string') {\n\t\tconst formatterFunction = formatters[selected];\n\n\t\tif (formatterFunction === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`You must use a valid formatter option: ${getFormatterOptionsText()} or a function`,\n\t\t\t);\n\t\t}\n\n\t\treturn formatterFunction;\n\t}\n\n\tif (typeof selected === 'function') {\n\t\treturn selected;\n\t}\n\n\tassert(formatters.json);\n\n\treturn formatters.json;\n}\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {any} error\n * @param {string} [filePath]\n * @return {Promise<StylelintResult>}\n */\nfunction handleError(stylelint, error, filePath = undefined) {\n\tif (error.name === 'CssSyntaxError') {\n\t\treturn createStylelintResult(stylelint, undefined, filePath, error);\n\t}\n\n\tthrow error;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').lint} */ (standalone);\n","'use strict';\n\nconst checkAgainstRule = require('./utils/checkAgainstRule');\nconst createPlugin = require('./createPlugin');\nconst createStylelint = require('./createStylelint');\nconst formatters = require('./formatters');\nconst postcssPlugin = require('./postcssPlugin');\nconst report = require('./utils/report');\nconst resolveConfig = require('./resolveConfig');\nconst ruleMessages = require('./utils/ruleMessages');\nconst rules = require('./rules');\nconst { longhandSubPropertiesOfShorthandProperties } = require('./reference/properties');\nconst standalone = require('./standalone');\nconst validateOptions = require('./utils/validateOptions');\n\n/** @type {import('stylelint').PublicApi} */\nconst stylelint = Object.assign(postcssPlugin, {\n\tlint: standalone,\n\trules,\n\tformatters,\n\tcreatePlugin,\n\tresolveConfig,\n\tcreateLinter: createStylelint,\n\tutils: {\n\t\treport,\n\t\truleMessages,\n\t\tvalidateOptions,\n\t\tcheckAgainstRule,\n\t},\n\treference: {\n\t\tlonghandSubPropertiesOfShorthandProperties,\n\t},\n});\n\nmodule.exports = stylelint;\n","'use strict';\n\nconst formatters = require('../formatters');\n\n/**\n * @param {{ useOr?: boolean }} [options={}]\n * @returns {string}\n */\nmodule.exports = function getFormatterOptionsText(options = {}) {\n\tlet output = Object.keys(formatters)\n\t\t.map((name) => `\"${name}\"`)\n\t\t.join(', ');\n\n\tif (options.useOr) {\n\t\toutput = output.replace(/, ([a-z\"]+)$/u, ' or $1');\n\t}\n\n\treturn output;\n};\n","/*!\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(path, stripTrailing) {\n  if (typeof path !== 'string') {\n    throw new TypeError('expected path to be a string');\n  }\n\n  if (path === '\\\\' || path === '/') return '/';\n\n  var len = path.length;\n  if (len <= 1) return path;\n\n  // ensure that win32 namespaces has two leading slashes, so that the path is\n  // handled properly by the win32 version of path.parse() after being normalized\n  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\n  var prefix = '';\n  if (len > 4 && path[3] === '\\\\') {\n    var ch = path[2];\n    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\n      path = path.slice(2);\n      prefix = '//';\n    }\n  }\n\n  var segs = path.split(/[/\\\\]+/);\n  if (stripTrailing !== false && segs[segs.length - 1] === '') {\n    segs.pop();\n  }\n  return prefix + segs.join('/');\n};\n","'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\nfunction checkAgainstRule(options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tconst rule = rules[options.ruleName];\n\n\tif (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\t// @ts-expect-error - this error should not occur with PostCSS 8\n\tconst tmpPostcssResult = new Result();\n\n\trule(settings[0], /** @type {O} */ (settings[1]), {})(options.root, tmpPostcssResult);\n\n\tfor (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.checkAgainstRule} */ (\n\tcheckAgainstRule\n);\n","const DEFAULT_RAWS = {\n  colon: ': ',\n  indent: '  ',\n  commentLeft: ' ',\n  commentRight: ' '\n}\n\nmodule.exports = class Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    this[node.type](node, semicolon)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = DEFAULT_RAWS.commentLeft\n    let right = DEFAULT_RAWS.commentRight\n    if (this.has(node.raws.left)) left = node.raws.left\n\n    if (node.raws.inline) {\n      if (this.has(node.raws.inlineRight)) {\n        right = node.raws.inlineRight\n      } else {\n        right = ''\n      }\n      if (node.raws.extraIndent) {\n        this.builder(node.raws.extraIndent)\n      }\n      this.builder('//' + left + node.text + right, node)\n    } else {\n      if (this.has(node.raws.right)) right = node.raws.right\n      this.builder('/*' + left + node.text + right + '*/', node)\n    }\n  }\n\n  decl(node) {\n    let between = node.raws.between || DEFAULT_RAWS.colon\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n  }\n\n  atrule(node) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (this.has(node.raws.afterName)) {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    this.block(node, name + params)\n  }\n\n  body(node) {\n    let indent = node.root().raws.indent || DEFAULT_RAWS.indent\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before =\n        child.raws.before.replace(/[^\\n]*$/, '') + this.indent(node, indent)\n      if (child.type === 'comment' && !child.raws.before.includes('\\n')) {\n        before = child.raws.before\n      }\n      if (before) this.builder(before)\n      this.stringify(child)\n    }\n  }\n\n  block(node, start) {\n    let between = node.raws.sssBetween || ''\n    this.builder(start + between, node, 'start')\n    if (this.has(node.nodes)) this.body(node)\n  }\n\n  indent(node, step) {\n    let result = ''\n    while (node.parent) {\n      result += step\n      node = node.parent\n    }\n    return result\n  }\n\n  has(value) {\n    return typeof value !== 'undefined'\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.sss || raw.raw\n    } else {\n      return value\n    }\n  }\n}\n","function indentError(input, l, p) {\n  throw input.error('Mixed tabs and spaces are not allowed', l, p + 1)\n}\n\nmodule.exports = function preprocess(input, lines) {\n  let indentType\n  let prevNumber = 0\n  let parts = lines.map(line => {\n    let lastComma = false\n    let comment = false\n    let number = prevNumber + 1\n    let atrule = false\n    let indent = ''\n    let tokens = []\n    let colon = false\n\n    if (line.length > 0) {\n      if (line[0][0] === 'space') {\n        indent = line[0][1]\n        tokens = line.slice(1)\n      } else {\n        indent = ''\n        tokens = line\n      }\n\n      if (!indentType && indent.length) {\n        indentType = indent[0] === ' ' ? 'space' : 'tab'\n      }\n      if (indentType === 'space') {\n        if (indent.includes('\\t')) {\n          indentError(input, number, indent.indexOf('\\t'))\n        }\n      } else if (indentType === 'tab') {\n        if (indent.includes(' ')) {\n          indentError(input, number, indent.indexOf(' '))\n        }\n      }\n\n      if (tokens.length) {\n        for (let i = tokens.length - 1; i >= 0; i--) {\n          let type = tokens[i][0]\n          if (type === ',') {\n            lastComma = true\n            break\n          } else if (type === 'space') {\n            continue\n          } else if (type === 'comment') {\n            continue\n          } else if (type === 'newline') {\n            continue\n          } else {\n            break\n          }\n        }\n        comment = tokens[0][0] === 'comment'\n        atrule = tokens[0][0] === 'at-word'\n\n        let brackets = 0\n        for (let i = 0; i < tokens.length - 1; i++) {\n          let type = tokens[i][0]\n          let next = tokens[i + 1][0]\n          if (type === '(') {\n            brackets += 1\n          } else if (type === ')') {\n            brackets -= 1\n          } else if (\n            type === ':' &&\n            brackets === 0 &&\n            (next === 'space' || next === 'newline')\n          ) {\n            colon = true\n          }\n        }\n      }\n\n      let last = tokens[tokens.length - 1]\n      if (last && last[0] === 'newline') prevNumber = last[2]\n    }\n\n    return {\n      number,\n      indent,\n      colon,\n      tokens,\n      atrule,\n      comment,\n      lastComma,\n      before: ''\n    }\n  })\n\n  parts = parts.reduceRight(\n    (all, i) => {\n      if (!i.tokens.length || i.tokens.every(j => j[0] === 'newline')) {\n        let prev = all[0]\n        let before = i.indent + i.tokens.map(j => j[1]).join('')\n        prev.before = before + prev.before\n      } else {\n        all.unshift(i)\n      }\n      return all\n    },\n    [{ end: true, before: '' }]\n  )\n\n  parts.forEach((part, i) => {\n    if (i === 0) return\n\n    let prev = parts[i - 1]\n    let last = prev.tokens[prev.tokens.length - 1]\n    if (last && last[0] === 'newline') {\n      part.before = last[1] + part.before\n      prev.tokens.pop()\n    }\n  })\n\n  return parts\n}\n","const SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERICK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\nconst COMMA = ','.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"'()/;\\\\{]/g\nconst RE_NEW_LINE = /[\\n\\f\\r]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"'(),:;@\\\\{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\n\nmodule.exports = function tokenize(input) {\n  let tokens = []\n  let css = input.css.valueOf()\n\n  let code,\n    next,\n    quote,\n    lines,\n    last,\n    content,\n    escape,\n    nextLine,\n    nextOffset,\n    escaped,\n    escapePos,\n    prev,\n    n\n\n  let length = css.length\n  let offset = -1\n  let line = 1\n  let pos = 0\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, line, pos - offset)\n  }\n\n  while (pos < length) {\n    code = css.charCodeAt(pos)\n\n    if (\n      code === NEWLINE ||\n      code === FEED ||\n      (code === CR && css.charCodeAt(pos + 1) !== NEWLINE)\n    ) {\n      offset = pos\n      line += 1\n    }\n\n    switch (code) {\n      case CR:\n        if (css.charCodeAt(pos + 1) === NEWLINE) {\n          offset = pos\n          line += 1\n          pos += 1\n          tokens.push(['newline', '\\r\\n', line - 1])\n        } else {\n          tokens.push(['newline', '\\r', line - 1])\n        }\n        break\n\n      case FEED:\n      case NEWLINE:\n        tokens.push(['newline', css.slice(pos, pos + 1), line - 1])\n        break\n\n      case SPACE:\n      case TAB:\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (code === SPACE || code === TAB)\n\n        tokens.push(['space', css.slice(pos, next)])\n        pos = next - 1\n        break\n\n      case OPEN_CURLY:\n        tokens.push(['{', '{', line, pos - offset])\n        break\n\n      case CLOSE_CURLY:\n        tokens.push(['}', '}', line, pos - offset])\n        break\n\n      case COLON:\n        tokens.push([':', ':', line, pos - offset])\n        break\n\n      case SEMICOLON:\n        tokens.push([';', ';', line, pos - offset])\n        break\n\n      case COMMA:\n        tokens.push([',', ',', line, pos - offset])\n        break\n\n      case OPEN_PARENTHESES:\n        prev = tokens.length ? tokens[tokens.length - 1][1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) unclosed('bracket')\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          tokens.push([\n            'brackets',\n            css.slice(pos, next + 1),\n            line,\n            pos - offset,\n            line,\n            next - offset\n          ])\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            tokens.push(['(', '(', line, pos - offset])\n          } else {\n            tokens.push([\n              'brackets',\n              content,\n              line,\n              pos - offset,\n              line,\n              next - offset\n            ])\n            pos = next\n          }\n        }\n\n        break\n\n      case CLOSE_PARENTHESES:\n        tokens.push([')', ')', line, pos - offset])\n        break\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) unclosed('quote')\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        content = css.slice(pos, next + 1)\n        lines = content.split('\\n')\n        last = lines.length - 1\n\n        if (last > 0) {\n          nextLine = line + last\n          nextOffset = next - lines[last].length\n        } else {\n          nextLine = line\n          nextOffset = offset\n        }\n\n        tokens.push([\n          'string',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          nextLine,\n          next - nextOffset\n        ])\n\n        offset = nextOffset\n        line = nextLine\n        pos = next\n        break\n\n      case AT:\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n        tokens.push([\n          'at-word',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          line,\n          next - offset\n        ])\n        pos = next\n        break\n\n      case BACKSLASH:\n        next = pos\n        escape = true\n\n        nextLine = line\n\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (escape) {\n          if (code === CR && css.charCodeAt(next + 2) === NEWLINE) {\n            next += 2\n            nextLine += 1\n            nextOffset = next\n          } else if (code === CR || code === NEWLINE || code === FEED) {\n            next += 1\n            nextLine += 1\n            nextOffset = next\n          } else {\n            next += 1\n          }\n        }\n        tokens.push([\n          'word',\n          css.slice(pos, next + 1),\n          line,\n          pos - offset,\n          line,\n          next - offset\n        ])\n        if (nextLine !== line) {\n          line = nextLine\n          offset = nextOffset\n        }\n        pos = next\n        break\n\n      default:\n        n = css.charCodeAt(pos + 1)\n\n        if (code === SLASH && n === ASTERICK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) unclosed('comment')\n\n          content = css.slice(pos, next + 1)\n          lines = content.split('\\n')\n          last = lines.length - 1\n\n          if (last > 0) {\n            nextLine = line + last\n            nextOffset = next - lines[last].length\n          } else {\n            nextLine = line\n            nextOffset = offset\n          }\n\n          tokens.push([\n            'comment',\n            content,\n            line,\n            pos - offset,\n            nextLine,\n            next - nextOffset\n          ])\n\n          offset = nextOffset\n          line = nextLine\n          pos = next\n        } else if (code === SLASH && n === SLASH) {\n          RE_NEW_LINE.lastIndex = pos + 1\n          RE_NEW_LINE.test(css)\n          if (RE_NEW_LINE.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_NEW_LINE.lastIndex - 2\n          }\n\n          content = css.slice(pos, next + 1)\n\n          tokens.push([\n            'comment',\n            content,\n            line,\n            pos - offset,\n            line,\n            next - offset,\n            'inline'\n          ])\n\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          tokens.push([\n            'word',\n            css.slice(pos, next + 1),\n            line,\n            pos - offset,\n            line,\n            next - offset\n          ])\n          pos = next\n        }\n\n        break\n    }\n\n    pos++\n  }\n\n  return tokens\n}\n","let stringify = require('./stringify')\nlet parse = require('./parse')\n\nmodule.exports = { stringify, parse }\n","let Stringifier = require('./stringifier')\n\nmodule.exports = function stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n","let { Input } = require('postcss')\n\nlet preprocess = require('./preprocess')\nlet tokenizer = require('./tokenize')\nlet Parser = require('./parser')\nlet liner = require('./liner')\n\nmodule.exports = function parse(source, opts) {\n  let input = new Input(source, opts)\n\n  let parser = new Parser(input)\n  parser.tokens = tokenizer(input)\n  parser.parts = preprocess(input, liner(parser.tokens))\n  parser.loop()\n\n  return parser.root\n}\n","let { Declaration, Comment, AtRule, Rule, Root } = require('postcss')\n\nmodule.exports = class Parser {\n  constructor(input) {\n    this.input = input\n\n    this.pos = 0\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n\n    this.extraIndent = false\n    this.prevIndent = undefined\n    this.step = undefined\n\n    this.root.source = { input, start: { line: 1, column: 1 } }\n  }\n\n  loop() {\n    let part\n    while (this.pos < this.parts.length) {\n      part = this.parts[this.pos]\n\n      if (part.comment) {\n        this.comment(part)\n      } else if (part.atrule) {\n        this.atrule(part)\n      } else if (part.colon) {\n        let next = this.nextNonComment(this.pos)\n\n        if (next.end || next.atrule) {\n          this.decl(part)\n        } else {\n          let moreIndent = next.indent.length > part.indent.length\n          if (!moreIndent) {\n            this.decl(part)\n          } else if (moreIndent && next.colon) {\n            this.rule(part)\n          } else if (moreIndent && !next.colon) {\n            this.decl(part)\n          }\n        }\n      } else if (part.end) {\n        this.root.raws.after = part.before\n      } else {\n        this.rule(part)\n      }\n\n      this.pos += 1\n    }\n\n    for (let i = this.tokens.length - 1; i >= 0; i--) {\n      if (this.tokens[i].length > 3) {\n        let last = this.tokens[i]\n        this.root.source.end = {\n          line: last[4] || last[2],\n          column: last[5] || last[3]\n        }\n        break\n      }\n    }\n  }\n\n  comment(part) {\n    let token = part.tokens[0]\n    let node = new Comment()\n    this.init(node, part)\n    node.source.end = { line: token[4], column: token[5] }\n    this.commentText(node, token)\n  }\n\n  atrule(part) {\n    let atword = part.tokens[0]\n    let params = part.tokens.slice(1)\n\n    let node = new AtRule()\n    node.name = atword[1].slice(1)\n    this.init(node, part)\n\n    if (node.name === '') this.unnamedAtrule(atword)\n\n    while (!part.end && part.lastComma) {\n      this.pos += 1\n      part = this.parts[this.pos]\n      params.push(['space', part.before + part.indent])\n      params = params.concat(part.tokens)\n    }\n\n    node.raws.afterName = this.firstSpaces(params)\n    this.keepTrailingSpace(node, params)\n    this.checkSemicolon(params)\n    this.checkCurly(params)\n    this.raw(node, 'params', params, atword)\n  }\n\n  decl(part) {\n    let node = new Declaration()\n    this.init(node, part)\n\n    let between = ''\n    let colon = 0\n    let value = []\n    let prop = ''\n    for (let i = 0; i < part.tokens.length; i++) {\n      let token = part.tokens[i]\n      if (token[0] === ':') {\n        between += token[1]\n        colon = token\n        value = part.tokens.slice(i + 1)\n        break\n      } else if (token[0] === 'comment' || token[0] === 'space') {\n        between += token[1]\n      } else if (between !== '') {\n        this.badProp(token)\n      } else {\n        prop += token[1]\n      }\n    }\n\n    if (prop === '') this.unnamedDecl(part.tokens[0])\n    node.prop = prop\n\n    let next = this.parts[this.pos + 1]\n\n    while (\n      !next.end &&\n      !next.atrule &&\n      !next.colon &&\n      next.indent.length > part.indent.length\n    ) {\n      value.push(['space', next.before + next.indent])\n      value = value.concat(next.tokens)\n      this.pos += 1\n      next = this.parts[this.pos + 1]\n    }\n\n    let last = value[value.length - 1]\n    if (last && last[0] === 'comment') {\n      value.pop()\n      let comment = new Comment()\n      this.current.push(comment)\n      comment.source = {\n        input: this.input,\n        start: { line: last[2], column: last[3] },\n        end: { line: last[4], column: last[5] }\n      }\n      let prev = value[value.length - 1]\n      if (prev && prev[0] === 'space') {\n        value.pop()\n        comment.raws.before = prev[1]\n      }\n      this.commentText(comment, last)\n    }\n\n    for (let i = value.length - 1; i > 0; i--) {\n      let t = value[i][0]\n      if (t === 'word' && value[i][1] === '!important') {\n        node.important = true\n        if (i > 0 && value[i - 1][0] === 'space') {\n          node.raws.important = value[i - 1][1] + '!important'\n          value.splice(i - 1, 2)\n        } else {\n          node.raws.important = '!important'\n          value.splice(i, 1)\n        }\n        break\n      } else if (t !== 'space' && t !== 'newline' && t !== 'comment') {\n        break\n      }\n    }\n\n    node.raws.between = between + this.firstSpaces(value)\n    this.checkSemicolon(value)\n    this.raw(node, 'value', value, colon)\n  }\n\n  rule(part) {\n    let node = new Rule()\n    this.init(node, part)\n\n    let selector = part.tokens\n    let next = this.parts[this.pos + 1]\n\n    while (!next.end && next.indent.length === part.indent.length) {\n      selector.push(['space', next.before + next.indent])\n      selector = selector.concat(next.tokens)\n      this.pos += 1\n      next = this.parts[this.pos + 1]\n    }\n\n    this.keepTrailingSpace(node, selector)\n    this.checkCurly(selector)\n    this.raw(node, 'selector', selector)\n  }\n\n  /* Helpers */\n\n  indent(part) {\n    let indent = part.indent.length\n    let isPrev = typeof this.prevIndent !== 'undefined'\n\n    if (!isPrev && indent) this.indentedFirstLine(part)\n\n    if (!this.step && indent) {\n      this.step = indent\n      this.root.raws.indent = part.indent\n    }\n\n    if (isPrev && this.prevIndent !== indent) {\n      let diff = indent - this.prevIndent\n      if (diff > 0) {\n        if (diff !== this.step) {\n          this.wrongIndent(this.prevIndent + this.step, indent, part)\n        } else if (this.current.last.push) {\n          this.current = this.current.last\n        } else {\n          this.extraIndent = ''\n          for (let i = 0; i < diff; i++) {\n            this.extraIndent += ' '\n          }\n        }\n      } else if (diff % this.step !== 0) {\n        let m = indent + (diff % this.step)\n        this.wrongIndent(`${m} or ${m + this.step}`, indent, part)\n      } else {\n        for (let i = 0; i < -diff / this.step; i++) {\n          this.current = this.current.parent\n        }\n      }\n    }\n\n    this.prevIndent = indent\n  }\n\n  init(node, part) {\n    this.indent(part)\n\n    if (!this.current.nodes) this.current.nodes = []\n    this.current.push(node)\n\n    node.raws.before = part.before + part.indent\n    if (this.extraIndent) {\n      node.raws.extraIndent = this.extraIndent\n      this.extraIndent = false\n    }\n    node.source = {\n      start: { line: part.tokens[0][2], column: part.tokens[0][3] },\n      input: this.input\n    }\n  }\n\n  checkCurly(tokens) {\n    for (let token of tokens) {\n      if (token[0] === '{') {\n        this.error('Unnecessary curly bracket', token[2], token[3])\n      }\n    }\n  }\n\n  checkSemicolon(tokens) {\n    for (let token of tokens) {\n      if (token[0] === ';') {\n        this.error('Unnecessary semicolon', token[2], token[3])\n      }\n    }\n  }\n\n  keepTrailingSpace(node, tokens) {\n    let lastSpace = tokens[tokens.length - 1]\n    if (lastSpace && lastSpace[0] === 'space') {\n      tokens.pop()\n      node.raws.sssBetween = lastSpace[1]\n    }\n  }\n\n  firstSpaces(tokens) {\n    let result = ''\n    for (let i = 0; i < tokens.length; i++) {\n      if (tokens[i][0] === 'space' || tokens[i][0] === 'newline') {\n        result += tokens.shift()[1]\n        i -= 1\n      } else {\n        break\n      }\n    }\n    return result\n  }\n\n  raw(node, prop, tokens, altLast) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let sss = tokens.reduce((all, i) => all + i[1], '')\n      let raw = tokens.reduce((all, i) => {\n        if (i[0] === 'comment' && i[6] === 'inline') {\n          return all + '/* ' + i[1].slice(2).trim() + ' */'\n        } else {\n          return all + i[1]\n        }\n      }, '')\n      node.raws[prop] = { value, raw }\n      if (sss !== raw) node.raws[prop].sss = sss\n    }\n    node[prop] = value\n\n    let last\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      if (tokens[i].length > 2) {\n        last = tokens[i]\n        break\n      }\n    }\n    if (!last) last = altLast\n\n    node.source.end = {\n      line: last[4] || last[2],\n      column: last[5] || last[3]\n    }\n  }\n\n  nextNonComment(pos) {\n    let next = pos\n    let part\n    while (next < this.parts.length) {\n      next += 1\n      part = this.parts[next]\n      if (part.end || !part.comment) break\n    }\n    return part\n  }\n\n  commentText(node, token) {\n    let text = token[1]\n    if (token[6] === 'inline') {\n      node.raws.inline = true\n      text = text.slice(2)\n    } else {\n      text = text.slice(2, -2)\n    }\n\n    let match = text.match(/^(\\s*)([^]*\\S)(\\s*)\\n?$/)\n    if (match) {\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.inlineRight = match[3]\n    } else {\n      node.text = ''\n      node.raws.left = ''\n      node.raws.inlineRight = ''\n    }\n  }\n\n  // Errors\n\n  error(msg, line, column) {\n    throw this.input.error(msg, line, column)\n  }\n\n  unnamedAtrule(token) {\n    this.error('At-rule without name', token[2], token[3])\n  }\n\n  unnamedDecl(token) {\n    this.error('Declaration without name', token[2], token[3])\n  }\n\n  indentedFirstLine(part) {\n    this.error('First line should not have indent', part.number, 1)\n  }\n\n  wrongIndent(expected, real, part) {\n    let msg = `Expected ${expected} indent, but get ${real}`\n    this.error(msg, part.number, 1)\n  }\n\n  badProp(token) {\n    this.error('Unexpected separator in property', token[2], token[3])\n  }\n}\n","module.exports = function liner(tokens) {\n  let line = []\n  let result = [line]\n  let brackets = 0\n  for (let token of tokens) {\n    line.push(token)\n    if (token[0] === '(') {\n      brackets += 1\n    } else if (token[0] === ')') {\n      brackets -= 1\n    } else if (token[0] === 'newline' && brackets === 0) {\n      line = []\n      result.push(line)\n    }\n  }\n  return result\n}\n","import stylelint from \"stylelint\";\nimport sugarss from \"sugarss\";\nconst _lint = stylelint.lint;\nstylelint.lint = options => {\n  if (options?.config?.customSyntax === \"sugarss\") {\n    options.config.customSyntax = sugarss;\n  }\n  return _lint.call(stylelint, options);\n}\nstylelint.SugarSSParser = sugarss;\nexport {stylelint as default};\n"],"names":["openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","uLower","uUpper","plus","isUnicodeRange","walk","nodes","cb","bubble","i","max","node","result","length","type","Array","isArray","stringifyNode","custom","buf","customResult","value","undefined","quote","unclosed","before","after","stringify","minus","dot","exp","EXP","ValueParser","this","input","next","prev","token","escape","escapePos","whitespacePos","parenthesesOpenPos","parent","tokens","pos","code","stack","balanced","name","slice","sourceEndIndex","push","sourceIndex","indexOf","pop","test","parse","prototype","toString","unit","nextCode","nextNextCode","likeNumber","number","declarationValueIndex","decl","raws","prop","prefix","raw","suffix","between","reduce","count","str","getDeclarationValue","hasLessInterpolation","string","hasPsvInterpolation","hasScssInterpolation","hasTplInterpolation","hasInterpolation","isStandardSyntaxValue","normalizedValue","charAt","startsWith","matchesStringOrRegExp","comparison","testAgainstStringOrRegExpOrArray","inputItem","testResult","testAgainstStringOrRegExp","comparisonItem","RegExp","match","pattern","substring","firstComparisonChar","lastComparisonChar","secondToLastComparisonChar","comparisonIsRegex","valueMatch","optionsMatches","options","propertyName","Boolean","report","problem","ruleName","message","messageArgs","line","index","endIndex","word","stylelint","ruleSeverities","customMessages","ruleMetadata","quiet","start","rangeBy","startLine","Error","ignoreDisables","config","disabledRanges","ranges","all","range","end","rules","includes","disabledWarnings","rule","severity","stylelintError","stylelintWarning","warningProperties","warningMessage","args","format","arg","replace","String","printfLike","buildWarningMessage","warn","ruleMessages","messages","newMessages","messageId","messageText","Object","entries","concat","setDeclarationValue","arrayEqual","a","b","every","elem","isObject","o","call","isBoolean","isNullish","isNumber","Number","isRegExp","isString","isPlainObject","ctor","prot","constructor","hasOwnProperty","_isPlainObject","assert","console","assertFunction","Function","isFunction","assertNumber","assertString","IGNORED_OPTIONS","Set","validateOptions","optionDescriptions","noErrors","optionDescription","validate","complain","stylelintType","opts","possible","actual","optional","nothingPossible","flat","isValid","optionName","optionValue","has","possibleValue","possibility","JSON","expected","unfixed","fixed","ALPHA_PROPS","ALPHA_FUNCS","primary","secondaryOptions","context","root","exceptProperties","optionFuncs","freeze","expFunc","fixFunc","asNumber","percentage","isPercentage","asPercentage","walkDecls","needsFix","parsedValue","valueParser","alpha","toLowerCase","findAlphaInValue","filter","slashNodeIndex","findIndex","find","findAlphaInFunction","expectation","fix","toPrecision","dimension","meta","url","fixable","addEmptyLineBefore","newline","repeat","getNodeLine","source","getPreviousNonSharedLineCommentNode","previousNode","previousNode2","hasEmptyLine","getNextNonSharedLineCommentNode","nextNode","_export_isRoot_","_export_isRule_","_export_isAtRule_","_export_isComment_","_export_isDeclaration_","_export_isValueFunction_","_export_hasSource_","nodesShareLines","isSharedLineComment","isComment","nextNonSharedLineCommentNode","parentNode","isRoot","isAfterComment","hasBlock","statement","isBlocklessAtRuleAfterBlocklessAtRule","atRule","isAtRule","isBlocklessAtRuleAfterSameNameBlocklessAtRule","isFirstNested","first","parentNodes","firstNode","hasSource","openingBraceLine","isFirstNodeOfRoot","isStandardSyntaxAtRule","params","mixin","variable","afterName","removeEmptyLinesBefore","rejected","except","ignore","ignoreAtRules","walkAtRules","isNested","hasEmptyLineBefore","expectEmptyLineBefore","isAtRuleAfterSameNameAtRule","atRuleNameSpaceChecker","locationChecker","err","m","checkedRuleName","errTarget","checkColon","configurationError","text","isSingleLineString","isWhitespace","char","whitespaceChecker","targetWhitespace","activeArgs","lineCheckStr","onlyOneChar","allowIndentation","expectBefore","rejectBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","expectAfter","rejectAfter","expectedAfterSingleLine","rejectedAfterSingleLine","expectedAfterMultiLine","rejectedAfterMultiLine","messageFunc","expectedBefore","_activeArgs2","expectedChar","expectBeforeAllowingIndentation","_activeArgs","oneCharBefore","twoCharsBefore","rejectedBefore","_activeArgs3","expectedAfter","_activeArgs4","oneCharAfter","twoCharsAfter","threeCharsAfter","rejectedAfter","_activeArgs5","beforeAllowingIndentation","obj","afterOneOnly","_secondary","checker","flattenArray","validateObjectWithArrayProps","validators","values","item","some","v","property","atRuleName","propList","expectedName","toUpperCase","beforeBlockString","noRawBefore","isRule","selector","DISABLE_COMMAND","DISABLE_LINE_COMMAND","DISABLE_NEXT_LINE_COMMAND","ENABLE_COMMAND","ALL_COMMANDS","extractStylelintCommand","comment","command","split","isStylelintCommand","ignoreComments","check","child","hasNotableChild","positionBy","walkRules","rawNodeString","blockString","nodeToCheck","reportIndex","msg","nodeToCheckRaws","search","hasEmptyBlock","_secondaryOptions","statementString","statementRaws","uniteSets","set","atKeywords","_export_prefix_","_export_unprefixed_","vendor","atName","blockIsMultiLine","firstWhitespaceIndex","newlineBefore","newlineAfter","newlineIndex","isStandardSyntaxComment","walkComments","AT_RULES","SELECTORS","PROPERTIES","PROPERTY_VALUES","_export_unprefix_","p","identifier","isAutoprefixable","isStandardSyntaxFunction","isStandardSyntaxColorFunction","fnNode","LEGACY_FUNCS","LEGACY_NOTATION_FUNCS","isValueFunction","hasCommas","commaCount","map","childNode","isComma","atLeastOneSpace","whitespace","primaryValues","primaryOptionArray","hex","unexpected","HEX","isUrlFunction","isHexColor","hasAlphaChannel","beforeBraceNoRaw","ignoreSelectors","acceptCustomIdentsProperties","longhandSubPropertiesOfShorthandProperties","Map","longhandTimeProperties","shorthandTimeProperties","r","grad","turn","rad","Math","PI","t","n","pow","round","e","u","isFinite","g","s","h","min","floor","l","d","f","c","y","exec","parseInt","substr","object","N","M","H","$","j","parsed","trim","x","rgba","brightness","isDark","isLight","toHex","toRgb","toRgbString","toHsl","toHslString","toHsv","invert","w","saturate","desaturate","grayscale","lighten","darken","rotate","hue","isEqual","S","z","cbrt","atan2","sqrt","cos","sin","parseHwbWithCommaString","endsWith","whiteness","blackness","extraArgs","colordInstance","colord","parseGrayString","lightness","lightnessWithUnit","colorObject","alphaWithUnit","forEach","extend","white","bisque","blue","cadetblue","chartreuse","chocolate","coral","antiquewhite","aqua","azure","whitesmoke","papayawhip","plum","blanchedalmond","black","gold","goldenrod","gainsboro","cornsilk","cornflowerblue","burlywood","aquamarine","beige","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkkhaki","darkgray","darkgreen","darkgrey","peachpuff","darkmagenta","darkred","darkorchid","darkorange","darkslateblue","gray","darkslategray","darkslategrey","deeppink","deepskyblue","wheat","firebrick","floralwhite","ghostwhite","darkviolet","magenta","green","dodgerblue","grey","honeydew","hotpink","blueviolet","forestgreen","lawngreen","indianred","indigo","fuchsia","brown","maroon","mediumblue","lightcoral","darkturquoise","lightcyan","ivory","lightyellow","lightsalmon","lightseagreen","linen","mediumaquamarine","lemonchiffon","lime","khaki","mediumseagreen","limegreen","mediumspringgreen","lightskyblue","lightblue","midnightblue","lightpink","mistyrose","moccasin","mintcream","lightslategray","lightslategrey","navajowhite","navy","mediumvioletred","powderblue","palegoldenrod","oldlace","paleturquoise","mediumturquoise","mediumorchid","rebeccapurple","lightsteelblue","mediumslateblue","thistle","tan","orchid","mediumpurple","purple","pink","skyblue","springgreen","palegreen","red","yellow","slateblue","lavenderblush","peru","palevioletred","violet","teal","slategray","slategrey","aliceblue","darkseagreen","darkolivegreen","greenyellow","seagreen","seashell","tomato","silver","sienna","lavender","lightgreen","orange","orangered","steelblue","royalblue","turquoise","yellowgreen","salmon","saddlebrown","sandybrown","rosybrown","darksalmon","lightgoldenrodyellow","snow","lightgrey","lightgray","dimgray","dimgrey","olivedrab","olive","toName","closest","toHwb","toHwbString","toLab","delta","abs","F","L","I","P","k","q","A","B","toLch","toLchString","_colordClass","parsers","named","original","NODE_TYPES","ignoreProperties","rawColorString","colorString","color","namedColor","normalizedPattern","testAgainstString","matchesWord","containsString","statementFirst","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","rawComment","firstFourChars","leftMatches","rightMatches","opener","leftSpace","rightSpace","closer","left","right","addWhitespaceBefore","addWhitespaceAfter","IGNORED_FUNCTIONS","isIgnoredFunction","eachDeclarationBlock","callback","each","decls","bind","isCustomProperty","isScssVariable","isStandardSyntaxProperty","ignoreDuplicates","ignoreDiffValues","ignorePrefixlessSameValues","eachDecl","lowerProp","indexDuplicate","removePreviousDuplicate","duplicateDecl","duplicateValue","declarations","lowerProperty","declToRemove","remove","SKIP","ONLY","styleSearch","target","skipComments","comments","skipStrings","strings","skipFunctionNames","functionNames","skipFunctionArguments","functionArguments","skipParentheticals","parentheticals","onceOptionUsed","keys","key","openingQuote","onlyComments","onlyStrings","onlyFunctionNames","onlyFunctionArguments","onlyParentheticals","insideString","insideComment","insideSingleLineComment","insideParens","insideFunctionArguments","openingParenCount","matchCount","getMatch","ti","tl","checkResult","getMatchBase","targetString","targetStringLength","startIndex","currentChar","handleMatch","isFunctionName","once","declarationBangSpaceChecker","indexOffset","declString","valueString","bangIndex","setFixed","val","important","targetBefore","targetAfter","shorthand","unprefixedProp","overrideables","get","longhandProp","declaration","nextNonCommentNode","startNode","parentRule","semicolon","last","declValue","nextDecl","ruleNode","block","props","IGNORED_VALUES","ignoreShorthands","longhandToShorthands","longhandProps","longhand","shorthands","longhandDeclarations","shorthandProperties","shorthandProperty","prefixedShorthandProperty","longhandDeclaration","shorthandProps","prefixedShorthandData","from","sort","propKeys","propPatterns","checkLastNode","hasSemicolon","isStandardSyntaxDeclaration","lang","endOfPropIndex","propPlusColon","indexToCheck","betweenStart","sliceIndex","betweenBefore","betweenAfter","isValueNode","validator","propLength","propKey","propIdentifier","hexValue","canShrink","expectedHex","longer","shorter","hexVariant","isAfterStandardPropertyDeclaration","prevNode","isDeclaration","isStandardSyntaxHexColor","hexMatch","isValidHex","declarationColonSpaceChecker","colonIndex","add","isAfterCustomProperty","nodeString","isNumbery","basicKeywords","systemFontKeywords","fontFamilyKeywords","fontWeightRelativeKeywords","fontWeightAbsoluteKeywords","fontWeightNonNumericKeywords","fontWeightNumericKeywords","fontWeightKeywords","fontStyleKeywords","fontVariantKeywords","fontStretchKeywords","fontSizeKeywords","lineHeightKeywords","fontShorthandKeywords","animationNameKeywords","animationTimingFunctionKeywords","animationIterationCountKeywords","animationDirectionKeywords","animationFillModeKeywords","animationPlayStateKeywords","animationShorthandKeywords","gridRowKeywords","gridColumnKeywords","gridAreaKeywords","counterIncrementKeywords","counterResetKeywords","listStyleTypeKeywords","listStylePositionKeywords","listStyleImageKeywords","listStyleShorthandKeywords","camelCaseKeywords","keyframeSelectorKeywords","systemColorsKeywords","lengthUnits","units","isValidFontSize","numberUnit","isVariable","nodeTypesToCheck","findFontFamily","fontFamilies","valueNodes","postcssValueParser","children","needMergeNodesByValue","mergeCharacters","valueNode","valueLowerCase","prevPrevNode","fontFamily","lastFontFamily","secondNode","charactersBetween","ignoreFontFamilyNames","keywords","familyNames","fontFamilyNode","family","rawFamily","process","cwd","env","NO_COLOR","FORCE_COLOR","argv","isColorSupported","platform","formatter","open","close","replaceClose","nextIndex","createColors","enabled","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","_module_exports_","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","tokenizer$1","content","escaped","currentToken","css","valueOf","ignoreErrors","buffer","returned","what","error","back","nextToken","ignoreUnclosed","controlChar","fromCharCode","lastIndex","endOfFile","position","Input","HIGHLIGHT_THEME","brackets","pico","class","hash","getTokenType","processor","terminalHighlight","tokenizer","join","registerInput","dependant","CssSyntaxError","column","file","plugin","super","reason","endLine","endColumn","setMessage","captureStackTrace","showSourceCode","mark","aside","lines","maxWidth","gutter","spacing","default","_export_isClean_","Symbol","_export_my_","DEFAULT_RAW","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","emptyBody","commentLeft","commentRight","Stringifier","builder","document","body","rawValue","ownSemicolon","atrule","own","detect","rawCache","beforeAfter","method","capitalize","rawSemicolon","rawEmptyBody","rawIndent","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","depth","step","cloneNode","cloned","Node","defaults","isClean","my","clone","append","data","removeChild","stringifier","assign","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","bookmark","foundSelf","defaultType","cleanRaws","keepBetween","toJSON","_","inputs","emitInputs","inputsNextIndex","inputId","positionInside","getProxyProcessor","markDirty","toProxy","proxyCache","Proxy","addToError","postcssNode","proxyOf","Declaration","noop","cosmiconfig","catch","SourceMapConsumer","SourceMapGenerator","_require_source_map_js_","dirname","_require_path_","PreviousMap","loadAnnotation","inline","startWith","annotation","loadMap","mapFile","consumer","consumerCache","withContent","sourcesContent","getAnnotationURL","sourceMapString","lastIndexOf","decodeInline","decodeURIComponent","lastMatch","Buffer","window","atob","fromBase64","encoding","loadFile","path","existsSync","readFileSync","fromSourceMap","isMap","prevPath","mappings","_mappings","sections","resolve","isAbsolute","fromOffsetCache","sourceMapAvailable","pathAvailable","hasBOM","mapResolve","id","size","random","nanoid","fromOffset","offset","lastLine","lineToIndex","prevIndex","mid","col","origin","pathToFileURL","to","fromUrl","originalPositionFor","URL","sourceRoot","protocol","fileURLToPath","sourceContentFor","json","_objectSpread","Rule","AtRule","Root","LazyResult","Processor","relative","sep","MapGenerator","cssString","mapOpts","usesFileUrls","absolute","previous","previousMaps","isInline","isSourcesContent","clearAnnotation","setSourcesContent","already","toFileUrl","toUrl","setSourceContent","applyPrevMaps","applySourceMap","isAnnotation","toBase64","btoa","unescape","encodeURIComponent","addAnnotation","outputFile","eol","generateMap","generateString","addMapping","generated","encodeURI","sourcePath","noSource","mapping","generate","Comment","cleanSource","markDirtyUp","Container","iterator","getIterator","indexes","normalize","prepend","reverse","unshift","exist","existIndex","splice","removeAll","replaceValues","fast","condition","sample","processed","rebuild","other","lastEach","registerParse","registerRule","registerAtRule","registerRoot","setPrototypeOf","Document","toResult","registerLazyResult","registerProcessor","printed","warnOnce","Warning","opt","Result","lastPlugin","postcssPlugin","warning","warnings","list","separators","array","current","func","inQuote","prevQuote","letter","space","selectors","SAFE_COMMENT_NEIGHBOR","empty","Parser","spaces","customProperty","createTokenizer","freeSemicolon","emptyRule","endFile","init","getPosition","bracket","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","findLastWithPosition","shift","firstSpaces","precheckMissedSemicolon","stringFrom","spacesFromEnd","cache","hasWord","checkMissedSemicolon","unnamedAtrule","spacesAndCommentsFromStart","unexpectedClose","unclosedBlock","clean","lastTokenType","element","doubleColon","founded","parser","NODE_ENV","TYPE_TO_CLASS_NAME","PLUGIN_PROPS","prepare","Once","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","DocumentExit","OnceExit","NOT_VISITORS","isPromise","then","getEvents","toStack","events","eventIndex","visitors","visitorIndex","cleanMarks","postcss","stringified","syntax","helpers","plugins","toStringTag","sync","onFulfilled","onRejected","async","finally","onFinally","Promise","reject","processing","runAsync","getAsyncError","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","subRoot","visitSync","event","visitor","promise","handleError","roots","postcssVersion","pluginName","pluginVer","runtimeVer","version","visitTick","visit","registerPostcss","NoWorkResult","_processor","_css","_opts","_map","self","defineProperty","generatedCSS","generatedMap","_root","use","normalized","_excluded","_excluded2","fromJSON","ownInputs","inputHydrated","__proto__","_defaults$source","_objectWithoutProperties","initializer","warningPrinted","creator","LANG","transformer","processOpts","pluginOpts","ignoreFontFamilies","lastValue","isLastFontFamilyVariable","isFamilyNameKeyword","valueIndex","fixer","div","symb","functionCommaSpaceChecker","hasFixed","argumentStrings","getCommaCheckIndex","commaNode","nodeIndex","commaBefore","commaDataList","checkIndex","getImportantPosition","ignoreAnnotations","tokenValue","placeIndexOnValueStart","maxAdjacentNewlines","violatedCRLFNewLinesRegex","violatedLFNewLinesRegex","allowedLFNewLinesString","allowedCRLFNewLinesString","stringValue","splittedValue","sourceIndexStart","stringifiedNode","newNodeString","updatedValue","acc","curr","maybeMatch","pre","post","reg","begs","beg","ai","bi","functionArgumentsSearch","functionName","parensMatch","balancedMatch","expression","expressionIndex","firstArg","trimEnd","withToPrefix","regexp","matches","isStandardDirection","HUE_FIRST_ARG_FUNCS","HUE_THIRD_ARG_FUNCS","HUE_FUNCS","findHue","isDegree","asDegree","TypeError","operator","expectedOperatorBeforeSign","OPERATORS","OPERATOR_REGEX","ALL_OPERATORS","checkAroundOperator","operatorNode","currentNode","isBeforeOp","operatorSourceIndex","isSingleSpace","lastChar","firstChar","indexOfFirstNewLine","checkWords","operatorIndex","charBefore","charAfter","insertCharAtIndex","checkForOperatorInFirstNode","lastNode","isOperator","checkForOperatorInLastNode","foundOperatorNode","currNode","nodeBefore","nodeAfter","operators","camelCaseFunctions","mathFunctions","mapLowercaseFunctionNamesToCamelCase","ignoreFunctions","needFix","functionNameLowerCase","expectedFunctionName","atRuleParamIndex","isStandardSyntaxUrl","checkArgs","shouldHasQuotes","leftTrimmedArgs","trimStart","complaintIndex","complaintEndIndex","hasQuotes","trimmedArg","isEmptyArgument","atRuleParamsLowerCase","childNodeTypes","addEmptyLineAfter","removeEmptyLinesAfter","expectedOpeningMultiLine","rejectedOpeningMultiLine","expectedClosingMultiLine","rejectedClosingMultiLine","functionString","isMultiLine","containsNewline","openingIndex","checkBefore","getCheckBefore","fixBeforeForAlways","fixBeforeForNever","closingIndex","checkAfter","getCheckAfter","fixAfterForAlways","fixAfterForNever","functionsList","expectedOpeningSingleLine","rejectedOpeningSingleLine","expectedClosingSingleLine","rejectedClosingSingleLine","isSingleLine","ACCEPTABLE_AFTER_CLOSING_PAREN","nextChar","checkClosingParen","createFixer","applyFix","whitespaceEndIndex","param","gobbleHex","lower","spaceTerminated","codePoint","fromCodePoint","__esModule","CONTAINS_ESCAPE","ret","gobbled","_len","arguments","_key","commentStart","lastEnd","commentEnd","_export_ensureObject_","_export_getProp_","_export_unesc_","_unesc","_interopRequireDefault","_require__$unesc_","_getProp","_require__$getProp_","_ensureObject","_require__$ensureObject_","_require__$stripComments_","_defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_proto","at","appendToPropertyAndEscape","valueEscaped","originalValue","originalEscaped","setPropertyAndEscape","setPropertyWithoutEscape","isAtPosition","stringifyProperty","valueToString","rawSpaceBefore","rawSpaceAfter","rawSpace","UNIVERSAL","ATTRIBUTE","CLASS","COMBINATOR","COMMENT","ID","NESTING","PSEUDO","ROOT","SELECTOR","STRING","TAG","_node","_require__$node_","types","_getRequireWildcardCache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","_interopRequireWildcard","_require__$types_","WeakMap","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_arrayLikeToArray","_unsupportedIterableToArray","done","arr","len","arr2","_setPrototypeOf","_Node","subClass","superClass","_this","create","_step","_iterator","oldNode","newNode","oldIndex","_findChildAtPosition","found","atPosition","foundChild","_inferEndPosition","walkAttributes","_this2","walkClasses","_this3","walkCombinators","_this4","_this5","walkIds","_this6","walkNesting","_this7","walkPseudos","_this8","walkTags","_this9","walkUniversals","_this10","_this11","memo","_container","_require__$container_","_Container","_types","trailingComma","_error","handler","Selector","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","merge","quotes","isIdentifier","output","counter","character","extra","escapeEverything","$0","$1","$2","wrap","_cssesc","_require_cssesc_","ClassName","_constructed","_value","Namespace","apply","qualifiedName","namespace","namespaceString","_namespace","ns","_require__$namespace_","Tag","_Namespace","Pseudo","deprecate","fn","unescapeValue","_CSSESC_QUOTE_OPTIONS","_require___$util$unesc_","WRAPPED_IN_QUOTES","warnOfDeprecatedValueAssignment","warnOfDeprecatedQuotedAssignment","warnOfDeprecatedConstructor","deprecatedUsage","quoteMark","unescaped","Attribute","_unescapeValue","handleDeprecatedContructorOpts","getQuotedValue","_determineQuoteMark","cssescopts","CSSESC_QUOTE_OPTIONS","smart","smartQuoteMark","preferredQuoteMark","setValue","_quoteMark","_syncRawValue","numSingleQuotes","numDoubleQuotes","NO_QUOTE","pref","preferCurrentQuoteMark","_handleEscapes","_spacesFor","rawSpaces","_stringFor","spaceName","defaultAttrConcat","attrSpaces","offsetOf","attributeSpaces","operatorSpaces","valueSpaces","insensitive","attrValue","quoted","qm","attribute","_unescapeValue2","_attribute","Universal","Combinator","Nesting","_export_combinator_","_export_word_","_export_comment_","_export_str_","_export_tab_","_export_newline_","_export_feed_","_export_cr_","_export_backslash_","_export_bang_","_export_slash_","_export_doubleQuote_","_export_singleQuote_","_export_space_","_export_greaterThan_","_export_pipe_","_export_equals_","_export_plus_","_export_caret_","_export_tilde_","_export_dollar_","_export_closeSquare_","_export_openSquare_","_export_closeParenthesis_","_export_openParenthesis_","_export_semicolon_","_export_colon_","_export_comma_","_export_at_","_export_asterisk_","_export_ampersand_","nextLine","nextOffset","tokenType","safe","tab","cr","feed","greaterThan","tilde","pipe","combinator","asterisk","ampersand","bang","equals","dollar","caret","openSquare","closeSquare","openParenthesis","closeParenthesis","consumeWord","_unescapable","_wordDelimiters","_require__$tokenTypes_","unescapable","wordDelimiters","hexChars","consumeEscape","hexDigits","FIELDS","TYPE","START_LINE","START_COL","END_LINE","END_COL","START_POS","END_POS","_WHITESPACE_TOKENS","_Object$assign","_require__$selectors$root_","_selector","_require__$selectors$selector_","_className","_require__$selectors$className_","_comment","_require__$selectors$comment_","_id","_require__$selectors$id_","_tag","_require__$selectors$tag_","_string","_require__$selectors$string_","_pseudo","_require__$selectors$pseudo_","_require__$selectors$attribute_","_universal","_require__$selectors$universal_","_combinator","_require__$selectors$combinator_","_nesting","_require__$selectors$nesting_","_sortAscending","_require__$sortAscending_","_tokenize","_require__$tokenize_","_require__$selectors$types_","WHITESPACE_TOKENS","WHITESPACE_EQUIV_TOKENS","tokenStart","tokenEnd","getSource","startColumn","getTokenSource","getTokenSourceSpan","startToken","endToken","unescapeProp","indexesOf","lossy","_errorGenerator","rootSource","errorGenerator","loop","errorOptions","attr","startingToken","currToken","spaceBefore","commentBefore","lastAdded","spaceAfterMeaningfulToken","prevContent","existingComment","oldRawValue","_unescaped","_oldRawValue","oldValue","insensitiveFlag","lastComment","_util","rawLastComment","rawLastValue","parseWhitespaceEquivalentTokens","stopPosition","startPosition","firstToken","lastToken","convertWhitespaceNodesToSpace","requiredSpace","lossySpace","isNamedCombinator","namedCombinator","nameRaw","nextSigTokenPos","locateNextMeaningfulToken","spaceOrDescendantSelectorNodes","_this$convertWhitespa2","_space","_rawSpace","_this$convertWhitespa3","_space2","_rawSpace2","optionalSpace","_this$convertWhitespa","missingBackslash","missingParenthesis","missingSquareBracket","prevToken","universal","nesting","parentheses","unbalanced","parenEnd","parenStart","parenValue","parseParenthesisToken","pseudo","pseudoStr","splitWord","firstCallback","hasClass","escapedDot","isKeyframesPercent","hasId","interpolations","hashIndex","indices","uniqs","ind","classNameOpts","idOpts","tagOpts","throwOnParenthesis","description","an","required","searchPosition","_parser","_require__$parser_","funcRes","_shouldUpdateSelector","updateSelector","_isLossy","lossless","_parseOptions","_run","transform","_runSync","ast","astSync","transformSync","processSync","tag","className","_require__$attribute_","_require__$className_","_require__$combinator_","_require__$comment_","_require__$id_","_require__$nesting_","_require__$pseudo_","_require__$root_","_require__$selector_","_require__$string_","_require__$tag_","_require__$universal_","_IS_TYPE","isNode","isPseudoElement","isPseudoClass","isPseudo","isContainer","isNamespace","isAttribute","isTag","isUniversal","isSelector","isNesting","isCombinator","isClassName","IS_TYPE","isNodeType","_constructors","_guards","_require__$processor_","_require__$selectors_","_default","transformSelector","selectorParser","_unused","fixedSelector","PERCENTAGE_SELECTORS","KEYWORD_SELECTORS","PERCENTAGE_TO_KEYWORD","KEYWORD_TO_PERCENTAGE","keyword","getFromMap","selectorsInBlock","atRuleKeyframes","getSelectorsInBlock","keyframeRule","selectorTag","normalizedSelector","checkSelector","getSchemeFromUrl","urlString","scheme","slashIndex","unspacedUrlString","spaceIndex","makeMutableFontFamilies","mutableNodes","idx","rawName","resetIndexes","removeQuotes","openIndex","closeIndex","addQuotes","fixedName","checkFamilyName","font","quotesRequired","recommended","quotesRecommended","fontFamilyNodes","isStandardSyntaxSelector","linebreak","shouldHaveCR","fixData","hasError","reportNewlineError","dataToCheck","hasNewlineToVerify","hasCR","res","keyframeName","regex","keyframesNode","isStandardSyntaxRule","isIgnoreAtRule","checkStatement","nestingDepth","ignorePseudoClasses","level","sel","extractPseudoRule","containsPseudoClassesOnly","pseudoRule","containsIgnoredPseudoClassesOnly","knownCustomProperties","isVarFunction","isDashedIdent","setAtRuleParams","getAtRuleParams","urlFunctionFull","urlFunctionArguments","quotedUrlFunctionFirstArgument","restAtRuleParams","quotedNodeValue","mediaFeatureColonSpaceChecker","paramColonIndex","colonIndices","beforeColon","afterColon","isCustomMediaQuery","mediaQuery","isRangeContextMediaFeature","mediaFeature","isStandardSyntaxMediaFeatureName","mediaFeatureName","_Node2","hasFilter","filterReg","parseMediaFeature","parseMediaQuery","parseMediaList","interimIndex","levelLocal","doesHaveUrl","parenthesesLv","_i2","_character","_mediaQueryString","_spaceBefore","_Container2","mediaQueryString","modesEntered","mode","lastModeIndex","mediaFeatureValue","indexLocal","stringNormalized","isCalculationEnabled","mediaFeatureValueStr","localLevel","insideSomeValue","_i","_parsers","rangeOperators","rangeContextNodeParser","nameNode","mediaParser","_require_postcss_media_query_parser_","mediaFeatureNode","parsedRangeContext","propName","regexpPattern","isMathFunction","isWord","isLength","isFraction","parseFloat","isZero","regularNumber","isLineHeight","isFlex","valueNodeIndex","isLineHeightValue","getDimension","blurChar","blurInterpolation","parsedUnit","mediaQueryListCommaWhitespaceChecker","allowTrailingComments","execResult","commaIndex","checkComma","paramCommaIndex","commaIndices","beforeComma","afterComma","hasComments","mediaRule","expectedFeatureName","mediaFeatureRangeContext","unprefixedMediaFeatureName","allowedValuesKey","featureName","atImport","imports","firstParam","restParams","uri","media","importedUris","findMediaOperator","fixOperatorIndices","checkAfterOperator","beforeOperator","afterOperator","expectedWithActual","NAMED_TO_NUMERIC","NUMERIC_TO_NAMED","ignoreRelative","checkWeight","weightValueNode","weightValue","lowerWeightValue","numericValue","namedValue","isFontShorthandProp","hasNumericFontWeight","isDivNode","isPossibleFontWeightNode","resolvedNestedSelector","resolveNestedSelector","parentIsNestAtRule","parentSelectors","parentSelector","newlyResolvedSelectors","resolvedParentSelector","combinedSelector","findAtRuleContext","htmlTypeSelectors","mixedCaseSvgTypeSelectors","levelOneAndTwoPseudoElements","shadowTreePseudoElements","webkitScrollbarPseudoElements","vendorSpecificPseudoElements","pseudoElements","aNPlusBNotationPseudoClasses","aNPlusBOfSNotationPseudoClasses","atRulePagePseudoClasses","linguisticPseudoClasses","logicalCombinationsPseudoClasses","vendorSpecificPseudoClasses","webkitScrollbarPseudoClasses","pseudoClasses","nodeContextLookup","contextMap","getContext","subContexts","nodeSource","baseContext","creativeGetMap","someMap","someThing","parseSelector","ignoreSelectorsWithinList","selectorContextLookup","selectorNode","comparisonContext","referenceSelector","firstChild","nodesByCombinator","nodesAfterLastCombinator","nodesWithoutPseudoClasses","lastCompoundSelectorWithoutPseudoClasses","selectorSpecificity","calculate","entry","specificity","priorComparableSelectors","priorEntry","compare","resolvedSelector","isOnlyWhitespace","whitespacesToReject","fixString","findErrorStartIndex","lastEOLIndex","ignoreEmptyLines","isRootFirst","eolWhitespaceIndex","beforeNewlineIndex","rootNode","fixText","rawsParams","rawsSelector","rawsValue","lastEOL","rootString","reportFromIndex","eachEolWhitespace","errorIndex","fixFn","mediaFeatureNames","ignoreMediaFeatureNames","IRREGULAR_WHITESPACES_PATTERN","issue","findIrregularWhitespace","isKeyframeRule","firstDuplicateLine","disallowInList","shouldDisallowDuplicateInList","contextSelectorSet","resolvedSelectorList","flatMap","sortedSelectorList","selectorLine","previousDuplicatePosition","selectorListParsed","selectorForMessage","presentedSelectors","reportedSelectors","findNotContiguousOrRectangular","areas","names","delete","namedAreas","indicesByRow","row","isContiguousAndRectangular","expectedToken","expectedSameNumber","expectedRectangle","reportSent","firstArea","notSameNumberArea","area","notContiguousOrRectangular","checkBeforeOperator","getOffsetByNode","nodeColumn","nodeLine","rawAfterRoot","fixSemiIndices","removeIndices","rawBeforeNode","allowedSemi","rawBeforeIndexStart","rawAfterNode","rawOwnSemicolon","noEmptyFirstLineTest","baseIndex","toFixed","ignoreUnits","_export_all_","allValidProperties","properties","checkPrefixed","shouldCheckPrefixed","fixPositions","fixPosition","removeTrailingZeros","indexBoost","problems","parsedParams","nonSpaceCharacter","fullSelector","combinatorNode","selectorTree","attributeNode","selectorKey","disallowedProperties","selectorAttributeOperatorSpaceChecker","attributeNodeString","checkOperator","operatorAfter","setOperatorAfter","rawOperator","rawSpacesOperator","rawOperatorAfter","ident","attributeSelectorString","nextCharIsSpace","fixBefore","prevCharIsSpace","fixAfter","spacesAttribute","rawAttrBefore","attrBefore","setAttrBefore","rawAfter","setAfter","splitList","ignoreInsideBlock","isStandardSyntaxCombinator","normalizeCombinator","selectorCombinatorSpaceChecker","locationType","parentParentNode","attrNode","getRuleSelector","selectorFixed","mediaName","fullName","customMediaName","fixIndices","nextChars","indextoCheckAfter","beforeSelector","afterSelector","animationName","declaredAnimations","animationNames","shouldBeIgnored","findAnimationName","animationNameNode","begin","neverFixPositions","alwaysFixPositions","capturingGroupIndex","addLeadingZero","removeLeadingZeros","isContextFunctionalPseudoClass","normalisedParentName","isNonNegativeInteger","isInteger","compoundCount","expectedProp","rawAttr","rawAttrAfter","attrAfter","setAttrAfter","total","prevChildNode","prevChildNodeValue","ignoreAfterCombinators","container","selectorListCommaWhitespaceChecker","checkDelimiter","specificitySum","specificities","sum","spec","maxChildSpecificity","maxSpec","childSpecificity","nodeSpecificity","pseudoClass","shouldSkipPseudoClassArgument","simpleSpecificity","ownValue","ownSpecificity","pseudoSpecificity","maxSpecificity","ignoreAttributes","pseudoNode","expectedPseudo","isKeyframeSelector","resolveNestedSelectors","shouldResolveNestedSelectors","classNode","prevChar","hasInterpolatingAmpersand","nestedSelector","newSelectorString","ignoreContextFunctionalPseudoClasses","pseudoElement","expectedPseudoElement","ignorePseudoElements","propertiesWithShorthandNotation","ignoredCharacters","normalizedProp","hasIgnoredCharacters","valuesToShorthand","shortestFormString","top","bottom","lowerTop","lowerRight","lowerBottom","lowerLeft","canCondenseToOneValue","canCondenseToTwoValues","_top","_bottom","canCondenseToThreeValues","canCondense","valuesFormString","isStandardSyntaxTypeSelector","_node$parent$parent","parentType","parentValue","selectorCharacters","ignoreId","ignoreClass","ignoreAttribute","selectorAST","tagNode","selectorParent","selectorNodes","rightNode","getRightNodes","attributeName","qualifiedAttribute","paramString","setFirstNodeSpaceBefore","setLastNodeSpaceAfter","fixedColon","isDouble","emptyLines","getChars","replaceEmptyLines","firstNodeRawsBefore","rootRawsAfter","maxLines","isSpecialCase","repeatTimes","emptyLFLines","emptyCRLFLines","matchStartIndex","matchEndIndex","eof","codeAfter","rootIndex","codeBefore","isEofNode","checkMatch","isCustomSelector","prevPseudoElement","prevPseudoElementValue","getIndex","ignoreNamespaces","ignoreTypes","selectorLowerCase","svgTags","mathMLTags","isCustomElement","tagName","tagNameLowerCase","reNewLine","checkDeclOrAtRule","valueLength","checkRule","expectedValue","checkedValue","processValue","expectedUnit","valueListCommaWhitespaceChecker","indexToCheckAfter","determineIndex","time","DELAY_PROPERTIES","minimum","ignoreDelay","isAcceptableTime","numTime","timeUnit","propertyValue","timeValueCount","isIgnoredProperty","valueTimeCount","calcTimeValueCount","declNode","beforeValue","afterValue","baseIndentLevel","indentInsideParens","indentClosingBrace","spaceCount","indentChar","warningWord","legibleExpectation","quantifiedWarningWord","indentationLevel","getDocument","indentLevel","isSafeInteger","newIndentLevel","indentSize","getIndentLevel","tabMatch","tabCount","spaceMatch","newBaseIndentLevel","firstLine","indents","foundIndents","shortest","MAX_SAFE_INTEGER","foundIndent","fill","afterEnd","nextRoot","inferRootIndentLevel","docSource","scores","lastIndentSize","lastLeadingSpacesLength","vote","leadingSpacesLength","score","leadingSpaces","bestScore","indentSizeDate","inferDocIndentSize","getRootBaseIndentLevel","calculatedLevel","checkMultilineBit","newlineIndentLevel","parentheticalDepth","ignoreInsideParans","outsideParens","precedesClosingParenthesis","expectedIndentLevel","afterNewlineSpaceMatches","afterNewlineSpace","expectedIndentation","currentIndentation","replaceIndentation","declProp","declBetween","atRuleAfterName","atRuleParams","nodeLevel","expectedOpeningBraceIndentation","isFirstChild","lastIndexOfNewline","fixIndentation","closingBraceLevel","expectedClosingBraceIndentation","declLevel","valueLevel","checkValue","ruleLevel","paramLevel","checkAtRuleParams","searchString","replaceString","ignoreUnit","mediaNode","mediaNodes","lastMediaNode","imageSet","imageSetLastNode","gridRowProps","gridColumnProps","mapLowercaseKeywordsToCamelCase","ignoreKeywords","camelCaseSvgKeywords","propLowerCase","isCounterIncrementCustomIdentValue","isCounterResetCustomIdentValue","keywordLowerCase","toLocaleLowerCase","expectedKeyword","invalidPosition","nodeName","newValueString","isAfterRule","isAfterSingleLineComment","correctQuote","erroneousQuote","avoidEscape","needsEscape","fixIndex","replaceQuote","needsCorrectEscape","ignoreDescendant","ignoreChild","ignoreCompounded","ignoreNextSibling","isDescendantCombinator","hasDescendantCombinatorBefore","isChildCombinator","hasChildCombinatorBefore","hasCompoundSelector","isNextSiblingCombinator","_require_postcss_selector_parser_","isSimpleSelector","isNot","previousNot","indentAndTrimRight","head","tail","fixComplex","second","isSimple","not","simpleSelectors","firstSelector","fixSimple","backupCommentNextBefores","newLineMatch","clear","fixTarget","fixTargetRaws","valuePrefixes","ignoreValues","lowerValue","hasPrefix","checkMedia","getMediaFeatureName","checkDecl","ignorePattern","EXCLUDED_PATTERNS","ignoreNonComments","skippedSubStrings","skippedSubStringsIndex","matchAll","subMatch","startOfSubString","checkNewline","nextNewlineIndex","rawLineLength","excludedLength","skippedSubString","startSubString","endSubString","excluded","tryToPopSubString","lineText","nextTwoChars","_require__$alpha_value_notation_","_require__$annotation_no_unknown_","_require__$at_rule_allowed_list_","_require__$at_rule_disallowed_list_","_require__$at_rule_empty_line_before_","_require__$at_rule_name_case_","_require__$at_rule_name_newline_after_","_require__$at_rule_semicolon_space_before_","_require__$at_rule_name_space_after_","_require__$at_rule_no_unknown_","_require__$at_rule_no_vendor_prefix_","_require__$at_rule_property_required_list_","_require__$at_rule_semicolon_newline_after_","_require__$block_closing_brace_empty_line_before_","_require__$block_closing_brace_newline_after_","_require__$block_closing_brace_newline_before_","_require__$block_closing_brace_space_after_","_require__$block_closing_brace_space_before_","_require__$block_no_empty_","_require__$block_opening_brace_newline_after_","_require__$block_opening_brace_newline_before_","_require__$block_opening_brace_space_after_","_require__$block_opening_brace_space_before_","_require__$color_function_notation_","_require__$color_hex_alpha_","_require__$color_hex_case_","_require__$color_hex_length_","_require__$color_named_","_require__$color_no_hex_","_require__$color_no_invalid_hex_","_require__$comment_empty_line_before_","_require__$comment_no_empty_","_require__$comment_pattern_","_require__$comment_whitespace_inside_","_require__$comment_word_disallowed_list_","_require__$custom_media_pattern_","_require__$custom_property_empty_line_before_","_require__$custom_property_no_missing_var_function_","_require__$custom_property_pattern_","_require__$declaration_bang_space_after_","_require__$declaration_bang_space_before_","_require__$declaration_block_no_duplicate_custom_properties_","_require__$declaration_block_no_duplicate_properties_","_require__$declaration_block_no_redundant_longhand_properties_","_require__$declaration_block_no_shorthand_property_overrides_","_require__$declaration_block_semicolon_newline_after_","_require__$declaration_block_semicolon_newline_before_","_require__$declaration_block_semicolon_space_after_","_require__$declaration_block_semicolon_space_before_","_require__$declaration_block_single_line_max_declarations_","_require__$declaration_block_trailing_semicolon_","_require__$declaration_colon_newline_after_","_require__$declaration_colon_space_after_","_require__$declaration_colon_space_before_","_require__$declaration_empty_line_before_","_require__$declaration_no_important_","_require__$declaration_property_max_values_","_require__$declaration_property_unit_allowed_list_","_require__$declaration_property_unit_disallowed_list_","_require__$declaration_property_value_allowed_list_","_require__$declaration_property_value_disallowed_list_","_require__$font_family_no_missing_generic_family_keyword_","_require__$font_family_name_quotes_","_require__$font_family_no_duplicate_names_","_require__$font_weight_notation_","_require__$function_allowed_list_","_require__$function_calc_no_unspaced_operator_","_require__$function_comma_newline_after_","_require__$function_comma_newline_before_","_require__$function_comma_space_after_","_require__$function_comma_space_before_","_require__$function_disallowed_list_","_require__$function_linear_gradient_no_nonstandard_direction_","_require__$function_max_empty_lines_","_require__$function_name_case_","_require__$function_no_unknown_","_require__$function_parentheses_newline_inside_","_require__$function_parentheses_space_inside_","_require__$function_url_no_scheme_relative_","_require__$function_url_quotes_","_require__$function_url_scheme_allowed_list_","_require__$function_url_scheme_disallowed_list_","_require__$function_whitespace_after_","_require__$hue_degree_notation_","_require__$import_notation_","_require__$keyframe_block_no_duplicate_selectors_","_require__$keyframe_declaration_no_important_","_require__$keyframe_selector_notation_","_require__$keyframes_name_pattern_","_require__$length_zero_no_unit_","linebreaks","_require__$linebreaks_","_require__$max_empty_lines_","_require__$max_line_length_","_require__$max_nesting_depth_","_require__$media_feature_colon_space_after_","_require__$media_feature_colon_space_before_","_require__$media_feature_name_allowed_list_","_require__$media_feature_name_case_","_require__$media_feature_name_disallowed_list_","_require__$media_feature_name_no_unknown_","_require__$media_feature_name_no_vendor_prefix_","_require__$media_feature_name_value_allowed_list_","_require__$media_feature_parentheses_space_inside_","_require__$media_feature_range_operator_space_after_","_require__$media_feature_range_operator_space_before_","_require__$media_query_list_comma_newline_after_","_require__$media_query_list_comma_newline_before_","_require__$media_query_list_comma_space_after_","_require__$media_query_list_comma_space_before_","_require__$named_grid_areas_no_invalid_","_require__$no_descending_specificity_","_require__$no_duplicate_at_import_rules_","_require__$no_duplicate_selectors_","_require__$no_empty_source_","_require__$no_empty_first_line_","_require__$no_eol_whitespace_","_require__$no_extra_semicolons_","_require__$no_invalid_double_slash_comments_","_require__$no_invalid_position_at_import_rule_","_require__$no_irregular_whitespace_","_require__$no_missing_end_of_source_newline_","_require__$no_unknown_animations_","_require__$number_leading_zero_","_require__$number_max_precision_","_require__$number_no_trailing_zeros_","_require__$property_allowed_list_","_require__$property_case_","_require__$property_disallowed_list_","_require__$property_no_unknown_","_require__$property_no_vendor_prefix_","_require__$rule_empty_line_before_","_require__$rule_selector_property_disallowed_list_","_require__$selector_attribute_brackets_space_inside_","_require__$selector_attribute_name_disallowed_list_","_require__$selector_attribute_operator_allowed_list_","_require__$selector_attribute_operator_disallowed_list_","_require__$selector_attribute_operator_space_after_","_require__$selector_attribute_operator_space_before_","_require__$selector_attribute_quotes_","_require__$selector_class_pattern_","_require__$selector_combinator_allowed_list_","_require__$selector_combinator_disallowed_list_","_require__$selector_combinator_space_after_","_require__$selector_combinator_space_before_","_require__$selector_descendant_combinator_no_non_space_","_require__$selector_disallowed_list_","_require__$selector_id_pattern_","_require__$selector_list_comma_newline_after_","_require__$selector_list_comma_newline_before_","_require__$selector_list_comma_space_after_","_require__$selector_list_comma_space_before_","_require__$selector_max_attribute_","_require__$selector_max_class_","_require__$selector_max_combinators_","_require__$selector_max_compound_selectors_","_require__$selector_max_empty_lines_","_require__$selector_max_id_","_require__$selector_max_pseudo_class_","_require__$selector_max_specificity_","_require__$selector_max_type_","_require__$selector_max_universal_","_require__$selector_nested_pattern_","_require__$selector_no_qualifying_type_","_require__$selector_no_vendor_prefix_","_require__$selector_not_notation_","_require__$selector_pseudo_class_allowed_list_","_require__$selector_pseudo_class_case_","_require__$selector_pseudo_class_disallowed_list_","_require__$selector_pseudo_class_no_unknown_","_require__$selector_pseudo_class_parentheses_space_inside_","_require__$selector_pseudo_element_allowed_list_","_require__$selector_pseudo_element_case_","_require__$selector_pseudo_element_colon_notation_","_require__$selector_pseudo_element_disallowed_list_","_require__$selector_pseudo_element_no_unknown_","_require__$selector_type_case_","_require__$selector_type_no_unknown_","_require__$shorthand_property_no_redundant_values_","_require__$string_no_newline_","_require__$string_quotes_","_require__$time_min_milliseconds_","_require__$unicode_bom_","_require__$unit_allowed_list_","_require__$unit_case_","_require__$unit_disallowed_list_","_require__$unit_no_unknown_","_require__$value_keyword_case_","_require__$value_list_comma_newline_after_","_require__$value_list_comma_newline_before_","_require__$value_list_comma_space_after_","_require__$value_list_comma_space_before_","_require__$value_list_max_empty_lines_","_require__$value_no_vendor_prefix_","indentation","_require__$indentation_","normalizeRuleSettings","rawSettings","getModulePath","basedir","lookup","resolveFrom","silent","globalModules","_apply","_join","glob","positive","Path","normalizeAllRuleSettings","normalizedRules","rawRuleSettings","pluginFunctions","augmentConfigExtended","cosmiconfigResult","configDir","filepath","augmentedConfig","ignoreFiles","globs","globjoin","processors","absolutizeProcessors","absolutizePaths","_require_cosmiconfig_","STOP_DIR","createStylelint","_options","_extendExplorer","augmentConfig","stopDir","_specifiedConfigCache","_postcssResultCache","_fileCache","FileCache","cacheLocation","cacheStrategy","stripAnsi","onlyFirst","ansiRegex","isFullwidthCodePoint","isNaN","stringWidth","width","codePointAt","pluralize","singular","hasFlag","flag","terminatorPosition","forceColor","translateLevel","hasBasic","has256","has16m","supportsColor","haveStream","streamIsTTY","TERM","osRelease","sign","CI_NAME","TEAMCITY_VERSION","COLORTERM","TERM_PROGRAM_VERSION","TERM_PROGRAM","parseVersion","versionString","major","minor","patch","versions","supportsHyperlink","stream","FORCE_HYPERLINK","isTTY","VTE_VERSION","_export_stdout_","stdout","stderr","OSC","BEL","SEP","terminalLink","supportsHyperlinks","_require_picocolors_","levelColors","info","success","symbols","getMessageWidth","columnWidths","availableWidth","columns","fullWidth","orderedMessages","formatMessageText","ruleString","fromValue","filePath","logFrom","cleanedMessages","normalisedValue","calculateWidths","table","border","getBorderCharacters","alignment","paddingRight","wrapWord","drawHorizontalLine","el","_m","p1","p2","_require__$stringFormatter_","results","returnValue","allInvalidOptionWarnings","invalidOptionWarnings","invalidOptionsFormatter","allDeprecationWarnings","deprecations","seenText","reference","deprecationsFormatter","errorCount","warningCount","accum","parseErrors","tally","groupBy","keyFn","fileLink","ruleLink","metadata","formatters","compact","github","title","buildMessage","cleanedResults","tap","errored","ignored","unix","verbose","stringFormatter","ignoredCount","checkedDisplay","formatting","sourceText","warningsBySeverity","fixableProblemsFound","printProblems","problemsByRule","getConfigForFile","SafeParser","nextStart","prevEnd","_require_postcss_safe_parser_","_require_postcss$lib$lazy_result_","postcssProcessor","getPostcssResult","cached","customSyntax","resolved","require","getCustomSyntax","fileExtension","extname","extensions","previouslyInferredExtensions","cssSyntax","postcssOptions","getCode","fs","promises","readFile","codeProcessors","sourceName","codeFilename","codeProcessor","postcssResult","html","js","jsx","less","md","sass","sss","scss","svelte","ts","tsx","vue","xml","xst","isPathNotFoundError","ALL_RULES","createDisableRange","strictStart","strictEnd","assignDisabledRanges","inlineEnd","nextComment","checkComment","fullComment","currentLine","disableLine","ruleIsDisabled","disabledRuleName","strict","startDisabledRange","endDisabledRange","getDescription","getCommandRules","processDisableLineCommand","processDisableNextLineCommand","ruleToDisable","isAllRules","processDisableCommand","ruleToEnable","lastRange","processEnableCommand","fullText","splitted","descriptionStart","rangeObj","ensureRuleRanges","lastRangeForRule","peq","Uint32Array","distance","tmp","lst","pv","mv","sc","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","vlen","pb","mb","xh","ph","mh","myers_x","reportUnknownRuleNames","unknownRuleName","postcssRoot","suggestions","existRuleName","levenshtein","suggestion","extractSuggestions","rejectMessage","lintSource","existingPostcssResult","isCodeNotFile","inputFilePath","isPathIgnored","createEmptyPostcssResult","configFile","configForFile","calcHashOfConfig","hasFileChanged","stylelintPostcssResult","stylelintOptions","postcssDoc","newlineMatch","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","performRules","rulesOrder","ruleNames","ruleFunction","ruleSettings","primaryOption","defaultSeverity","disableFix","ruleDisableFix","lintPostcssResult","tailoredOptions","isConfig","createStylelintResult","cssSyntaxError","stylelintResult","deprecationMessage","stylelintReference","invalidOptionMessage","_postcssResult","createPartialStylelintResult","resultProcessors","resultProcessor","isPathValid","_require_ignore_","filterFilePaths","ignorer","filePaths","validForIgnore","notValidForIgnore","filteredByIgnore","NoFilesFoundError","fileList","AllFilesIgnoredError","validateDisableSettings","field","putIfAbsent","isWarningInRange","reportDisablesForRule","reportDisables","prepareReturnValue","stylelintResults","maxWarnings","rangeData","settings","usefulDisables","ruleRanges","allRangeComments","useful","needlessDisables","configRules","usedRules","invalidScopeDisables","alreadyReported","descriptionlessDisables","reportedDisables","getRuleMetadata","foundWarnings","maxWarningsExceeded","lintResults","lintResult","debug","_require_debug_","ALWAYS_IGNORED_GLOBS","lint","allowEmptyInput","useCache","configBasedir","disableDefaultIgnores","files","globbyOptions","ignorePath","reportDescriptionlessDisables","reportInvalidScopeDisables","reportNeedlessDisables","isValidCode","formatterFunction","getFileIgnorer","selected","getFormatterOptionsText","useOr","getFormatterFunction","absoluteCodeFilename","globCWD","absolutePath","fastGlob","escapePath","stripTrailing","ch","segs","normalizePath","destroy","globby","filePathsLengthBeforeIgnore","getStylelintResults","absoluteFilepath","removeEntry","fixedCss","writeFileAtomic","reconcile","createPlugin","resolveConfig","createLinter","utils","checkAgainstRule","tmpPostcssResult","DEFAULT_RAWS","indentError","ASTERICK","COMMA","RE_NEW_LINE","inlineRight","extraIndent","sssBetween","prevIndent","part","nextNonComment","moreIndent","commentText","atword","lastComma","keepTrailingSpace","checkSemicolon","checkCurly","badProp","unnamedDecl","isPrev","indentedFirstLine","diff","wrongIndent","lastSpace","altLast","real","indentType","prevNumber","reduceRight","preprocess","liner","_lint","_options$config","sugarss","SugarSSParser"],"mappings":"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B3C,GAAalO,GAIvC,OAID,GAAI4L,EAAQwB,IAAK,CAChB,GAA+B,iBAApBxB,EAAQ+B,QAAsB,OAQzC,YANIkD,EACHnD,GAAmB+H,EAAS7J,EAAQ+B,SAEpC0C,GAAuBoF,EAAS7J,EAAQ+B,SAI1C,CAEA,MAAMvI,EAAUyL,EAAwBjJ,GAASyD,SAAWzD,GAAS0I,SAErErL,EAAO,CACNG,UACAlG,KAAMuW,EACNtW,SACAgG,SAAAA,IACC,GACD,EAIJ0B,GAAK1B,SAAWA,GAChB0B,GAAKe,SAAWA,GAChBf,GAAK0G,KA7GQ,CACZC,IAAK,kEACLC,SAAS,GCHV,MAAMmK,GAAW,IAAI5N,IAAI,CACxB,oBACA,kBACA,iBACA,gBACA,gBACA,eACA,qBACA,gBAOK6N,GAAY,IAAI7N,IAAI,CACzB,iBACA,oBACA,oBACA,0BACA,kBACA,mBACA,kBACA,yBACA,oBACA,uBACA,qBACA,mBACA,0BACA,qBACA,gCASK8N,GAAa,IAAI9N,IAAI,CAC1B,gBACA,cACA,aACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,aACA,kBACA,sBACA,kBACA,oBACA,kBACA,mBACA,qBACA,4BACA,6BACA,eACA,oBACA,sBACA,gBACA,yBACA,0BACA,uBACA,aACA,aACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,aACA,cACA,oBACA,oBACA,oBACA,cACA,eACA,UACA,SACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,YACA,wBACA,eACA,yBACA,yBACA,YACA,cACA,oBACA,kBACA,oBACA,WACA,iBACA,eACA,iBACA,gBACA,sBACA,wBACA,qBACA,UACA,kBACA,kBACA,mBACA,qBACA,oBACA,sBACA,OACA,cACA,qBACA,qBACA,oBACA,qBACA,oBACA,YACA,iBACA,aACA,cACA,gBACA,cACA,YACA,aACA,kBACA,QACA,sBACA,oBACA,sBACA,qBACA,uBACA,cACA,qBACA,aACA,kBACA,yBACA,0BACA,uBACA,uBACA,mBACA,wBACA,eACA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4BAGF,CACC,qBACA,IAAIA,IAAI,CAEP,2BACA,2BACA,8BAGF,CACC,gBACA,IAAIA,IAAI,CAEP,sBACA,sBACA,yBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,eACA,IAAIA,IAAI,CACP,sBACA,qBACA,qBACA,sBACA,yBAGF,CACC,oBACA,IAAIA,IAAI,CAEP,0BACA,0BACA,6BAGF,CACC,sBACA,IAAIA,IAAI,CACP,4BACA,4BACA,+BAGF,CACC,cACA,IAAIA,IAAI,CAEP,oBACA,oBACA,uBAGF,CACC,gBACA,IAAIA,IAAI,CACP,0BACA,yBACA,6BACA,+BAGF,CACC,eACA,IAAIA,IAAI,CAEP,qBACA,qBACA,wBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,aACA,IAAIA,IAAI,CAEP,mBACA,mBACA,sBAGF,CACC,eACA,IAAIA,IAAI,CAEP,mBACA,sBACA,oBACA,wBAGF,CACC,cACA,IAAIA,IAAI,CAEP,oBACA,oBACA,uBAGF,CACC,UACA,IAAIA,IAAI,CAEP,eACA,kBAGF,CACC,OACA,IAAIA,IAAI,CAEP,YACA,cACA,gBAGF,CACC,YACA,IAAIA,IAAI,CAEP,iBACA,eAGF,CACC,OACA,IAAIA,IAAI,CACP,aACA,eACA,cACA,eACA,YACA,cACA,iBAGF,CACC,OACA,IAAIA,IAAI,CACP,qBACA,wBACA,sBACA,iBACA,oBACA,iBACA,kBACA,kBAGF,CACC,YACA,IAAIA,IAAI,CAEP,iBACA,oBACA,eACA,qBAGF,CACC,cACA,IAAIA,IAAI,CAEP,oBACA,qBAGF,CACC,WACA,IAAIA,IAAI,CAEP,eACA,qBAGF,CACC,WACA,IAAIA,IAAI,CAEP,iBACA,kBAGF,CACC,gBACA,IAAIA,IAAI,CAEP,wBACA,qBACA,yBAGF,CACC,aACA,IAAIA,IAAI,CAEP,kBACA,sBACA,sBAGF,CACC,SACA,IAAIA,IAAI,CAEP,aACA,gBACA,cACA,kBAGF,CACC,OACA,IAAIA,IAAI,CACP,aACA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,SAEvDuB,GAAmBve,GAAUgd,GAAe,CAAC,OAAQ,SAGrDwB,GAA2Bxe,GAAUgd,GAAe,CAAC,SAErDyB,GAAuBze,GAAUgd,GAAe,CAAC,SAGjD0B,GAAwB1e,GAAUgd,GAAe,CACtD,OACA,OACA,SACA,SACA,UACA,cACA,uBACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eACA,WACA,UACA,YACA,qBACA,kBACA,aACA,mBACA,WACA,WACA,WACA,SACA,WACA,iBACA,kBACA,oBACA,UACA,WACA,iBACA,QACA,uBACA,sBACA,wBACA,MACA,iBACA,YACA,YACA,UACA,QACA,UACA,sBACA,wBACA,QACA,SACA,OACA,UACA,sBACA,wBACA,iBACA,kBACA,oBAEA,oBACA,uBACA,0BACA,0BACA,SACA,mBACA,SAGK2B,GAA4B3e,GAAUgd,GAAe,CAAC,SAAU,YAEhE4B,GAAyB5e,GAAUgd,GAAe,CAAC,SAEnD6B,GAA6B7e,GAClCgd,GACA0B,GACAC,GACAC,IAGKE,GAAoB,IAAI5rB,IAAI,CACjC,gBACA,kBACA,qBACA,qBACA,eACA,aACA,iBACA,cACA,gBACA,OACA,cAGK6rB,GAA2B,IAAI7rB,IAAI,CAAC,OAAQ,OAG5C8rB,GAAuB,IAAI9rB,IAAI,CACpC,eACA,gBACA,eACA,aACA,aACA,kBACA,eACA,aACA,cACA,WACA,YACA,gBACA,iBACA,kBACA,sBACA,iBACA,WACA,OACA,WACA,YACA,mBACA,aACA,kBACA,oBACA,eACA,SACA,cACA,eC5SK+rB,GAAc,IAAI/rB,IAAI,CAE3B,MACA,KACA,KACA,KACA,KACA,KACA,OACA,MACA,MACA,MACA,MACA,MAEA,MACA,MACA,MACA,QACA,QACA,MACA,MACA,MACA,MACA,QACA,QACA,MACA,MACA,MACA,MACA,QACA,QACA,MACA,KACA,KACA,KACA,KACA,OACA,OACA,KAEA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,QAEA,KAEA,MACA,MACA,MACA,MACA,QACA,UAGKgsB,GAAQlf,GAAUif,GAAa,C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,aACA,WACA,iBACA,iBACA,aACA,YACA,kBACA,mBACA,cACA,YACA,YACA,uBACA,+BACA,oCACA,uBACA,8BACA,wBACA,mCACA,kCACA,uCACA,mCACA,0CACA,qCACA,oCACA,qCACA,6BACA,mCACA,mCACA,yBACA,sBACA,6BACA,4BACA,wBACA,oBACA,qCACA,8BACA,8BACA,iCACA,uBACA,iCACA,yBACA,+BACA,4BACA,gCACA,oCACA,gCACA,uBACA,yCACA,4BACA,kCACA,0CACA,oCACA,oCACA,yCAGKE,GAAiBvuD,GACtBmuD,GACAG,GACAF,GACA,CACC,WACA,UACA,MACA,uBACA,gBACA,YACA,SACA,cACA,YACA,SACA,UACA,iBACA,gBAIII,GAA+B,IAAIt7D,IAAI,CAC5C,aACA,kBACA,mBACA,gBAGKu7D,GAAkC,IAAIv7D,IAAI,CAAC,YAAa,mBAExDw7D,GAA0B,IAAIx7D,IAAI,CAAC,QAAS,QAAS,OAAQ,UAE7Dy7D,GAA0B,IAAIz7D,IAAI,CAAC,MAAO,SAE1C07D,GAAmC,IAAI17D,IAAI,CAAC,MAAO,KAAM,UAAW,MAAO,UAE3E27D,GAA8B,IAAI37D,IAAI,CAC3C,cACA,WACA,gBACA,cACA,iBACA,kBACA,iBACA,mBACA,4BACA,iBACA,eACA,qBACA,yBACA,6BACA,mBACA,sBACA,kBACA,kBACA,gBACA,qBACA,uBACA,iBACA,wBACA,eACA,cACA,mBACA,mBACA,sBACA,iCAIK47D,GAA+B,IAAI57D,IAAI,CAC5C,aACA,WACA,YACA,YACA,QACA,MACA,gBACA,gBACA,YACA,iBACA,oBAGK67D,GAAgB/uD,GACrBwuD,GACAG,GACAC,GACAH,GACAI,GACA,CACC,SACA,WACA,WACA,QACA,UACA,UACA,UACA,UACA,WACA,QACA,UACA,cACA,gBACA,QACA,eACA,gBACA,aACA,sBACA,SACA,OACA,eACA,QACA,gBACA,WACA,UACA,aACA,eACA,OACA,aACA,eACA,WACA,eACA,OACA,oBACA,UACA,qBACA,SACA,YACA,aACA,WACA,O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"}