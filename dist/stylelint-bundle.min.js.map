{"version":3,"file":"stylelint-bundle.min.js","sources":["../node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.js","../node_modules/stylelint/lib/utils/report.js","../node_modules/stylelint/lib/utils/ruleMessages.js","../node_modules/stylelint/lib/utils/arrayEqual.js","../node_modules/is-plain-object/dist/is-plain-object.mjs","../node_modules/stylelint/lib/utils/validateTypes.js","../node_modules/stylelint/lib/utils/validateOptions.js","../node_modules/stylelint/lib/utils/vendor.js","../node_modules/stylelint/lib/rules/at-rule-allowed-list/index.js","../node_modules/stylelint/lib/utils/isAutoprefixable.js","../node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js","../node_modules/stylelint/lib/reference/keywordSets.js","../node_modules/stylelint/lib/utils/matchesStringOrRegExp.js","../node_modules/stylelint/lib/utils/optionsMatches.js","../node_modules/stylelint/lib/rules/at-rule-no-unknown/index.js","../node_modules/stylelint/lib/rules/at-rule-name-case/index.js","../node_modules/stylelint/lib/utils/flattenArray.js","../node_modules/stylelint/lib/utils/validateObjectWithArrayProps.js","../node_modules/stylelint/lib/rules/at-rule-property-required-list/index.js","../node_modules/stylelint/lib/utils/hasBlock.js","../node_modules/stylelint/lib/utils/rawNodeString.js","../node_modules/stylelint/lib/utils/configurationError.js","../node_modules/stylelint/lib/utils/isSingleLineString.js","../node_modules/stylelint/lib/utils/isWhitespace.js","../node_modules/stylelint/lib/utils/whitespaceChecker.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-space-before/index.js","../node_modules/stylelint/lib/utils/typeGuards.js","../node_modules/stylelint/lib/utils/beforeBlockString.js","../node_modules/stylelint/lib/utils/blockString.js","../node_modules/stylelint/lib/utils/hasEmptyBlock.js","../node_modules/stylelint/lib/utils/hasEmptyLine.js","../node_modules/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js","../node_modules/stylelint/lib/utils/addEmptyLineAfter.js","../node_modules/stylelint/lib/utils/removeEmptyLinesAfter.js","../node_modules/stylelint/lib/utils/nextNonCommentNode.js","../node_modules/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-newline-after/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-before/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-after/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-after/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-newline-before/index.js","../node_modules/stylelint/lib/rules/block-closing-brace-space-after/index.js","../node_modules/stylelint/lib/rules/block-opening-brace-space-before/index.js","../node_modules/postcss-value-parser/lib/parse.js","../node_modules/postcss-value-parser/lib/walk.js","../node_modules/postcss-value-parser/lib/stringify.js","../node_modules/postcss-value-parser/lib/unit.js","../node_modules/postcss-value-parser/lib/index.js","../node_modules/stylelint/lib/utils/declarationValueIndex.js","../node_modules/stylelint/lib/utils/getDeclarationValue.js","../node_modules/stylelint/lib/utils/isStandardSyntaxFunction.js","../node_modules/stylelint/lib/utils/isStandardSyntaxColorFunction.js","../node_modules/stylelint/lib/utils/setDeclarationValue.js","../node_modules/stylelint/lib/rules/color-function-notation/index.js","../node_modules/stylelint/lib/rules/color-hex-alpha/index.js","../node_modules/stylelint/lib/utils/addEmptyLineBefore.js","../node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.js","../node_modules/stylelint/lib/utils/isSharedLineComment.js","../node_modules/stylelint/lib/utils/isAfterComment.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.js","../node_modules/stylelint/lib/utils/isFirstNested.js","../node_modules/stylelint/lib/utils/isFirstNodeOfRoot.js","../node_modules/stylelint/lib/utils/removeEmptyLinesBefore.js","../node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.js","../node_modules/stylelint/lib/rules/color-hex-case/index.js","../node_modules/stylelint/lib/utils/hasLessInterpolation.js","../node_modules/stylelint/lib/utils/hasPsvInterpolation.js","../node_modules/stylelint/lib/utils/hasScssInterpolation.js","../node_modules/stylelint/lib/utils/hasTplInterpolation.js","../node_modules/stylelint/lib/utils/hasInterpolation.js","../node_modules/stylelint/lib/utils/isStandardSyntaxValue.js","../node_modules/stylelint/lib/reference/propertySets.js","../node_modules/colord/index.mjs","../node_modules/colord/plugins/hwb.mjs","../node_modules/colord/plugins/lab.mjs","../node_modules/colord/plugins/lch.mjs","../node_modules/stylelint/lib/rules/color-named/colordUtils.js","../node_modules/colord/plugins/names.mjs","../node_modules/stylelint/lib/rules/color-named/index.js","../node_modules/stylelint/lib/rules/color-no-invalid-hex/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxHexColor.js","../node_modules/stylelint/lib/utils/isValidHex.js","../node_modules/stylelint/lib/rules/atRuleNameSpaceChecker.js","../node_modules/stylelint/lib/rules/at-rule-name-newline-after/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxComment.js","../node_modules/stylelint/lib/rules/comment-whitespace-inside/index.js","../node_modules/stylelint/lib/rules/comment-no-empty/index.js","../node_modules/stylelint/lib/rules/comment-pattern/index.js","../node_modules/stylelint/lib/utils/isCustomProperty.js","../node_modules/stylelint/lib/utils/isScssVariable.js","../node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.js","../node_modules/stylelint/lib/rules/custom-property-empty-line-before/index.js","../node_modules/stylelint/lib/utils/atRuleParamIndex.js","../node_modules/stylelint/lib/rules/custom-media-pattern/index.js","../node_modules/stylelint/lib/rules/custom-property-no-missing-var-function/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxProperty.js","../node_modules/stylelint/lib/rules/custom-property-pattern/index.js","../node_modules/style-search/index.js","../node_modules/stylelint/lib/rules/declarationBangSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-bang-space-after/index.js","../node_modules/stylelint/lib/rules/color-no-hex/index.js","../node_modules/stylelint/lib/rules/declaration-bang-space-before/index.js","../node_modules/stylelint/lib/utils/eachDeclarationBlock.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-custom-properties/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js","../node_modules/stylelint/lib/reference/shorthandData.js","../node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js","../node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js","../node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js","../node_modules/stylelint/lib/utils/containsString.js","../node_modules/stylelint/lib/rules/comment-word-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js","../node_modules/stylelint/lib/rules/declarationColonSpaceChecker.js","../node_modules/stylelint/lib/rules/declaration-colon-space-after/index.js","../node_modules/stylelint/lib/rules/at-rule-name-space-after/index.js","../node_modules/stylelint/lib/rules/declaration-colon-newline-after/index.js","../node_modules/stylelint/lib/rules/alpha-value-notation/index.js","../node_modules/stylelint/lib/utils/getImportantPosition.js","../node_modules/stylelint/lib/rules/declaration-no-important/index.js","../node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.js","../node_modules/stylelint/lib/rules/declaration-empty-line-before/index.js","../node_modules/stylelint/lib/rules/declaration-colon-space-before/index.js","../node_modules/stylelint/lib/utils/getUnitFromValueNode.js","../node_modules/stylelint/lib/utils/blurInterpolation.js","../node_modules/stylelint/lib/rules/declaration-property-unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-disallowed-list/index.js","../node_modules/stylelint/lib/rules/declaration-property-max-values/index.js","../node_modules/stylelint/lib/utils/validateObjectWithProps.js","../node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.js","../node_modules/stylelint/lib/utils/isNumbery.js","../node_modules/stylelint/lib/utils/isValidFontSize.js","../node_modules/stylelint/lib/utils/isVariable.js","../node_modules/stylelint/lib/utils/findFontFamily.js","../shim/process.js","../node_modules/picocolors/picocolors.js","../node_modules/postcss/lib/tokenize.js","../node_modules/postcss/lib/terminal-highlight.js","../node_modules/postcss/lib/css-syntax-error.js","../node_modules/postcss/lib/symbols.js","../node_modules/postcss/lib/stringifier.js","../node_modules/postcss/lib/stringify.js","../node_modules/postcss/lib/node.js","../node_modules/postcss/lib/declaration.js","../shim/empty.js","../node_modules/postcss/node_modules/nanoid/non-secure/index.js","../node_modules/postcss/lib/previous-map.js","../node_modules/postcss/lib/input.js","../node_modules/postcss/lib/map-generator.js","../node_modules/postcss/lib/container.js","../node_modules/postcss/lib/document.js","../node_modules/postcss/lib/comment.js","../node_modules/postcss/lib/warn-once.js","../node_modules/postcss/lib/warning.js","../node_modules/postcss/lib/result.js","../node_modules/postcss/lib/at-rule.js","../node_modules/postcss/lib/root.js","../node_modules/postcss/lib/list.js","../node_modules/postcss/lib/rule.js","../node_modules/postcss/lib/parser.js","../node_modules/postcss/lib/parse.js","../node_modules/postcss/lib/lazy-result.js","../node_modules/postcss/lib/no-work-result.js","../node_modules/postcss/lib/processor.js","../node_modules/postcss/lib/fromJSON.js","../node_modules/postcss/lib/postcss.js","../node_modules/postcss/lib/postcss.mjs","../node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.js","../node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.js","../node_modules/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js","../node_modules/stylelint/lib/rules/comment-empty-line-before/index.js","../node_modules/stylelint/lib/rules/font-weight-notation/index.js","../node_modules/stylelint/lib/rules/functionCommaSpaceFix.js","../node_modules/stylelint/lib/rules/functionCommaSpaceChecker.js","../node_modules/stylelint/lib/rules/function-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/font-family-name-quotes/index.js","../node_modules/stylelint/lib/rules/function-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-comma-space-after/index.js","../node_modules/stylelint/lib/rules/function-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/function-comma-space-before/index.js","../node_modules/stylelint/lib/rules/declaration-property-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/function-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomFunction.js","../node_modules/stylelint/node_modules/balanced-match/index.js","../node_modules/stylelint/lib/utils/functionArgumentsSearch.js","../node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js","../node_modules/stylelint/lib/rules/function-disallowed-list/index.js","../node_modules/stylelint/lib/utils/getSchemeFromUrl.js","../node_modules/stylelint/lib/utils/isStandardSyntaxUrl.js","../node_modules/stylelint/lib/rules/function-url-scheme-allowed-list/index.js","../node_modules/stylelint/lib/rules/function-name-case/index.js","../node_modules/stylelint/lib/rules/function-parentheses-newline-inside/index.js","../node_modules/stylelint/lib/rules/function-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/function-whitespace-after/index.js","../node_modules/stylelint/lib/rules/function-url-no-scheme-relative/index.js","../node_modules/stylelint/lib/rules/function-url-scheme-disallowed-list/index.js","../node_modules/stylelint/lib/rules/keyframe-declaration-no-important/index.js","../node_modules/stylelint/lib/rules/function-url-quotes/index.js","../node_modules/stylelint/lib/utils/setAtRuleParams.js","../node_modules/stylelint/lib/utils/getAtRuleParams.js","../node_modules/stylelint/lib/rules/import-notation/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxSelector.js","../node_modules/stylelint/lib/rules/keyframe-block-no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/keyframes-name-pattern/index.js","../node_modules/stylelint/lib/rules/max-empty-lines/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxRule.js","../node_modules/postcss-selector-parser/dist/util/unesc.js","../node_modules/postcss-selector-parser/dist/util/getProp.js","../node_modules/postcss-selector-parser/dist/util/ensureObject.js","../node_modules/postcss-selector-parser/dist/util/stripComments.js","../node_modules/postcss-selector-parser/dist/util/index.js","../node_modules/postcss-selector-parser/dist/selectors/node.js","../node_modules/postcss-selector-parser/dist/selectors/types.js","../node_modules/postcss-selector-parser/dist/selectors/container.js","../node_modules/postcss-selector-parser/dist/selectors/root.js","../node_modules/postcss-selector-parser/dist/selectors/selector.js","../node_modules/cssesc/cssesc.js","../node_modules/postcss-selector-parser/dist/selectors/className.js","../node_modules/postcss-selector-parser/dist/selectors/comment.js","../node_modules/postcss-selector-parser/dist/selectors/id.js","../node_modules/postcss-selector-parser/dist/selectors/namespace.js","../node_modules/postcss-selector-parser/dist/selectors/tag.js","../node_modules/postcss-selector-parser/dist/selectors/string.js","../node_modules/postcss-selector-parser/dist/selectors/pseudo.js","../node_modules/util-deprecate/node.js","../shim/util.js","../node_modules/postcss-selector-parser/dist/selectors/attribute.js","../node_modules/postcss-selector-parser/dist/selectors/universal.js","../node_modules/postcss-selector-parser/dist/selectors/combinator.js","../node_modules/postcss-selector-parser/dist/selectors/nesting.js","../node_modules/postcss-selector-parser/dist/sortAscending.js","../node_modules/postcss-selector-parser/dist/tokenTypes.js","../node_modules/postcss-selector-parser/dist/tokenize.js","../node_modules/postcss-selector-parser/dist/parser.js","../node_modules/postcss-selector-parser/dist/processor.js","../node_modules/postcss-selector-parser/dist/selectors/constructors.js","../node_modules/postcss-selector-parser/dist/selectors/guards.js","../node_modules/postcss-selector-parser/dist/selectors/index.js","../node_modules/postcss-selector-parser/dist/index.js","../node_modules/stylelint/lib/rules/max-nesting-depth/index.js","../node_modules/stylelint/lib/utils/isCustomMediaQuery.js","../node_modules/stylelint/lib/utils/isRangeContextMediaFeature.js","../node_modules/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js","../node_modules/postcss-media-query-parser/dist/nodes/Node.js","../node_modules/postcss-media-query-parser/dist/nodes/Container.js","../node_modules/postcss-media-query-parser/dist/parsers.js","../node_modules/postcss-media-query-parser/dist/index.js","../node_modules/stylelint/lib/rules/rangeContextNodeParser.js","../node_modules/stylelint/lib/rules/media-feature-name-allowed-list/index.js","../node_modules/stylelint/lib/reference/mathFunctions.js","../node_modules/stylelint/lib/rules/length-zero-no-unit/index.js","../node_modules/stylelint/lib/utils/isMathFunction.js","../node_modules/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-after/index.js","../node_modules/stylelint/lib/rules/media-feature-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/media-feature-colon-space-before/index.js","../node_modules/stylelint/lib/rules/media-feature-name-case/index.js","../node_modules/clone-regexp/index.js","../node_modules/is-regexp/index.js","../node_modules/execall/index.js","../node_modules/stylelint/lib/rules/max-line-length/index.js","../node_modules/stylelint/lib/rules/linebreaks/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.js","../node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/media-feature-name-value-allowed-list/index.js","../node_modules/stylelint/lib/rules/findMediaOperator.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-after/index.js","../node_modules/stylelint/lib/rules/media-feature-range-operator-space-before/index.js","../node_modules/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-space-after/index.js","../node_modules/postcss-resolve-nested-selector/index.js","../node_modules/@csstools/selector-specificity/dist/index.mjs","../node_modules/stylelint/lib/utils/findAtRuleContext.js","../node_modules/stylelint/lib/utils/nodeContextLookup.js","../node_modules/stylelint/lib/utils/parseSelector.js","../node_modules/stylelint/lib/rules/no-descending-specificity/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-before/index.js","../node_modules/stylelint/lib/utils/isKeyframeRule.js","../node_modules/stylelint/lib/rules/no-duplicate-selectors/index.js","../node_modules/stylelint/lib/rules/media-query-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/findNotContiguousOrRectangular.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/index.js","../node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/utils/isRectangular.js","../node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.js","../node_modules/stylelint/lib/rules/no-empty-source/index.js","../node_modules/stylelint/lib/utils/isOnlyWhitespace.js","../node_modules/stylelint/lib/rules/no-eol-whitespace/index.js","../node_modules/stylelint/lib/rules/no-invalid-double-slash-comments/index.js","../node_modules/stylelint/lib/rules/no-empty-first-line/index.js","../node_modules/stylelint/lib/rules/no-extra-semicolons/index.js","../node_modules/stylelint/lib/rules/no-missing-end-of-source-newline/index.js","../node_modules/stylelint/lib/rules/number-max-precision/index.js","../node_modules/stylelint/lib/rules/no-irregular-whitespace/index.js","../node_modules/stylelint/lib/rules/number-no-trailing-zeros/index.js","../node_modules/stylelint/lib/rules/no-invalid-position-at-import-rule/index.js","../node_modules/stylelint/lib/rules/property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/property-case/index.js","../node_modules/stylelint/lib/rules/no-unknown-animations/index.js","../node_modules/stylelint/lib/utils/findAnimationName.js","../node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/number-leading-zero/index.js","../node_modules/known-css-properties/index.js","../node_modules/stylelint/lib/rules/property-no-unknown/index.js","../node_modules/stylelint/lib/rules/rule-empty-line-before/index.js","../node_modules/stylelint/lib/utils/isAfterSingleLineComment.js","../node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-before/index.js","../node_modules/stylelint/lib/rules/rule-selector-property-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.js","../node_modules/stylelint/lib/utils/isKeyframeSelector.js","../node_modules/stylelint/lib/rules/selector-class-pattern/index.js","../node_modules/stylelint/lib/rules/selector-attribute-quotes/index.js","../node_modules/stylelint/lib/utils/getRuleSelector.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-attribute-operator-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxCombinator.js","../node_modules/stylelint/lib/rules/selector-combinator-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selectorCombinatorSpaceChecker.js","../node_modules/stylelint/lib/rules/selector-combinator-space-before/index.js","../node_modules/stylelint/lib/rules/selector-combinator-space-after/index.js","../node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.js","../node_modules/stylelint/lib/rules/block-no-empty/index.js","../node_modules/stylelint/lib/rules/selector-id-pattern/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/selector-disallowed-list/index.js","../node_modules/stylelint/lib/utils/isContextFunctionalPseudoClass.js","../node_modules/stylelint/lib/utils/isNonNegativeInteger.js","../node_modules/stylelint/lib/rules/selector-max-attribute/index.js","../node_modules/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/at-rule-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/selector-max-combinators/index.js","../node_modules/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js","../node_modules/stylelint/lib/rules/selector-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/selector-max-class/index.js","../node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.js","../node_modules/stylelint/lib/rules/property-allowed-list/index.js","../node_modules/stylelint/lib/utils/isStandardSyntaxTypeSelector.js","../node_modules/stylelint/lib/rules/selector-max-type/index.js","../node_modules/stylelint/lib/rules/selector-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/selector-max-id/index.js","../node_modules/stylelint/lib/rules/hue-degree-notation/index.js","../node_modules/stylelint/lib/rules/color-hex-length/index.js","../node_modules/stylelint/lib/rules/selector-nested-pattern/index.js","../node_modules/stylelint/lib/rules/selector-max-universal/index.js","../node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/selector-max-pseudo-class/index.js","../node_modules/stylelint/lib/rules/selector-max-specificity/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-case/index.js","../node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-disallowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomSelector.js","../node_modules/stylelint/lib/rules/selector-not-notation/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-case/index.js","../node_modules/stylelint/lib/utils/transformSelector.js","../node_modules/stylelint/lib/rules/selector-pseudo-class-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-allowed-list/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js","../node_modules/stylelint/lib/rules/selector-type-case/index.js","../node_modules/stylelint/lib/rules/string-quotes/index.js","../node_modules/stylelint/lib/rules/string-no-newline/index.js","../node_modules/stylelint/lib/rules/selector-pseudo-element-disallowed-list/index.js","../node_modules/stylelint/lib/rules/unicode-bom/index.js","../node_modules/stylelint/lib/rules/selector-type-no-unknown/index.js","../node_modules/stylelint/lib/utils/isCustomElement.js","../node_modules/stylelint/lib/rules/unit-no-unknown/index.js","../node_modules/stylelint/lib/rules/unit-case/index.js","../node_modules/stylelint/lib/rules/unit-allowed-list/index.js","../node_modules/stylelint/lib/rules/valueListCommaWhitespaceChecker.js","../node_modules/stylelint/lib/rules/value-list-comma-space-before/index.js","../node_modules/stylelint/lib/rules/time-min-milliseconds/index.js","../node_modules/stylelint/lib/rules/value-keyword-case/index.js","../node_modules/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js","../node_modules/stylelint/lib/utils/isCounterResetCustomIdentValue.js","../node_modules/stylelint/lib/rules/value-list-comma-space-after/index.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-after/index.js","../node_modules/stylelint/lib/rules/value-list-max-empty-lines/index.js","../node_modules/stylelint/lib/rules/value-list-comma-newline-before/index.js","../node_modules/stylelint/lib/rules/unit-disallowed-list/index.js","../node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.js","../node_modules/stylelint/lib/rules/indentation/index.js","../node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js","../node_modules/stylelint/lib/rules/index.js","../node_modules/stylelint/lib/normalizeRuleSettings.js","../node_modules/stylelint/lib/utils/getModulePath.js","../node_modules/globjoin/index.js","../node_modules/stylelint/lib/normalizeAllRuleSettings.js","../node_modules/stylelint/lib/augmentConfig.js","../node_modules/stylelint/lib/createStylelintResult.js","../node_modules/stylelint/lib/createPartialStylelintResult.js","../shim/getConfigForFile.js","../node_modules/postcss-safe-parser/lib/safe-parser.js","../node_modules/postcss-safe-parser/lib/safe-parse.js","../node_modules/stylelint/lib/getPostcssResult.js","../shim/isPathIgnored.js","../node_modules/stylelint/lib/utils/isPathNotFoundError.js","../node_modules/stylelint/lib/assignDisabledRanges.js","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/stylelint/lib/reportUnknownRuleNames.js","../node_modules/stylelint/lib/lintSource.js","../node_modules/stylelint/lib/lintPostcssResult.js","../shim/os.js","../node_modules/stylelint/lib/createStylelint.js","../node_modules/ansi-regex/index.js","../node_modules/strip-ansi/index.js","../node_modules/is-fullwidth-code-point/index.js","../node_modules/string-width/index.js","../node_modules/emoji-regex/index.js","../node_modules/supports-hyperlinks/node_modules/has-flag/index.js","../node_modules/supports-hyperlinks/node_modules/supports-color/index.js","../node_modules/supports-hyperlinks/index.js","../shim/tty.js","../node_modules/stylelint/lib/formatters/terminalLink.js","../node_modules/stylelint/lib/formatters/stringFormatter.js","../node_modules/stylelint/lib/formatters/verboseFormatter.js","../node_modules/stylelint/lib/formatters/unixFormatter.js","../node_modules/stylelint/lib/formatters/index.js","../node_modules/stylelint/lib/formatters/compactFormatter.js","../node_modules/stylelint/lib/formatters/jsonFormatter.js","../node_modules/stylelint/lib/formatters/tapFormatter.js","../node_modules/stylelint/lib/postcssPlugin.js","../node_modules/imurmurhash/imurmurhash.js","../node_modules/stylelint/lib/utils/hash.js","../node_modules/stylelint/lib/utils/FileCache.js","../node_modules/stylelint/lib/utils/getCacheFile.js","../node_modules/stylelint/lib/utils/filterFilePaths.js","../node_modules/stylelint/lib/utils/noFilesFoundError.js","../node_modules/stylelint/lib/utils/allFilesIgnoredError.js","../node_modules/stylelint/lib/validateDisableSettings.js","../node_modules/stylelint/lib/utils/putIfAbsent.js","../node_modules/stylelint/lib/needlessDisables.js","../node_modules/stylelint/lib/reportDisables.js","../node_modules/stylelint/lib/prepareReturnValue.js","../node_modules/stylelint/lib/invalidScopeDisables.js","../node_modules/stylelint/lib/descriptionlessDisables.js","../node_modules/stylelint/lib/standalone.js","../node_modules/stylelint/lib/index.js","../node_modules/stylelint/lib/utils/getFormatterOptionsText.js","../node_modules/normalize-path/index.js","../node_modules/stylelint/lib/createPlugin.js","../node_modules/stylelint/lib/resolveConfig.js","../node_modules/stylelint/lib/utils/checkAgainstRule.js"],"sourcesContent":["'use strict';\n\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\nmodule.exports = function (atRule) {\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\nmodule.exports = function report(problem) {\n\tconst { ruleName, result, message, line, node, index, endIndex, word } = problem;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\tconst { start } = (node && node.rangeBy({ index, endIndex })) || {};\n\n\t// If a line is not passed, use the node.rangeBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || (start && start.line);\n\n\tif (!startLine) {\n\t\tthrow new Error('You must pass either a node or a line number');\n\t}\n\n\tconst { ignoreDisables } = result.stylelint.config || {};\n\n\tif (result.stylelint.disabledRanges) {\n\t\tconst ranges =\n\t\t\tresult.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the problem is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\t// Collect disabled warnings\n\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\tconst disabledWarnings =\n\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\trule: ruleName,\n\t\t\t\t\tline: startLine,\n\t\t\t\t});\n\n\t\t\t\tif (!ignoreDisables) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\t/** @type {import('stylelint').WarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (problem.start) {\n\t\twarningProperties.start = problem.start;\n\t} else if (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (problem.end) {\n\t\twarningProperties.end = problem.end;\n\t} else if (endIndex) {\n\t\twarningProperties.endIndex = endIndex;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst warningMessage =\n\t\t(result.stylelint.customMessages && result.stylelint.customMessages[ruleName]) || message;\n\n\tresult.warn(warningMessage, warningProperties);\n};\n","'use strict';\n\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\nfunction ruleMessages(ruleName, messages) {\n\t/** @typedef {keyof T} K */\n\tconst newMessages = /** @type {R} */ ({});\n\n\tfor (const [messageId, messageText] of /** @type {[K, T[K]][]} */ (Object.entries(messages))) {\n\t\tif (typeof messageText === 'string') {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (`${messageText} (${ruleName})`);\n\t\t} else {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (\n\t\t\t\t(...args) => `${messageText(...args)} (${ruleName})`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn newMessages;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.ruleMessages} */ (ruleMessages);\n","'use strict';\n\n/**\n * Tests if two arrays are equal.\n *\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nmodule.exports = function arrayEqual(a, b) {\n\tif (!Array.isArray(a) || !Array.isArray(b)) return false;\n\n\tif (a.length !== b.length) return false;\n\n\treturn a.every((elem, index) => elem === b[index]);\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","'use strict';\n\nconst { isPlainObject: _isPlainObject } = require('is-plain-object');\n\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\nfunction isBoolean(value) {\n\treturn typeof value === 'boolean' || value instanceof Boolean;\n}\n\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\nfunction isFunction(value) {\n\treturn typeof value === 'function' || value instanceof Function;\n}\n\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\nfunction isNullish(value) {\n\treturn value == null;\n}\n\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\nfunction isNumber(value) {\n\treturn typeof value === 'number' || value instanceof Number;\n}\n\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\nfunction isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\nfunction isString(value) {\n\treturn typeof value === 'string' || value instanceof String;\n}\n\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\nfunction isPlainObject(value) {\n\treturn _isPlainObject(value);\n}\n\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\nfunction assert(value, message = undefined) {\n\tif (message) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value, message);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value);\n\t}\n}\n\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\nfunction assertFunction(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\nfunction assertNumber(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\nfunction assertString(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n\tisBoolean,\n\tisFunction,\n\tisNullish,\n\tisNumber,\n\tisRegExp,\n\tisString,\n\tisPlainObject,\n\n\tassert,\n\tassertFunction,\n\tassertNumber,\n\tassertString,\n};\n","'use strict';\n\nconst arrayEqual = require('./arrayEqual');\nconst { isPlainObject } = require('./validateTypes');\n\nconst IGNORED_OPTIONS = new Set(['severity', 'message', 'reportDisables', 'disableFix']);\n\n/** @typedef {import('stylelint').RuleOptions} RuleOptions */\n/** @typedef {import('stylelint').RuleOptionsPossible} Possible */\n/** @typedef {import('stylelint').RuleOptionsPossibleFunc} PossibleFunc */\n\n/**\n * Validate a rule's options.\n *\n * See existing rules for examples.\n *\n * @param {import('stylelint').PostcssResult} result - postcss result\n * @param {string} ruleName\n * @param {...RuleOptions} optionDescriptions - Each optionDescription can\n *   have the following properties:\n *   - `actual` (required): the actual passed option value or object.\n *   - `possible` (required): a schema representation of what values are\n *      valid for those options. `possible` should be an object if the\n *      options are an object, with corresponding keys; if the options are not an\n *      object, `possible` isn't, either. All `possible` value representations\n *      should be **arrays of either values or functions**. Values are === checked\n *      against `actual`. Functions are fed `actual` as an argument and their\n *      return value is interpreted: truthy = valid, falsy = invalid.\n *    - `optional` (optional): If this is `true`, `actual` can be undefined.\n * @return {boolean} Whether or not the options are valid (true = valid)\n */\nfunction validateOptions(result, ruleName, ...optionDescriptions) {\n\tlet noErrors = true;\n\n\tfor (const optionDescription of optionDescriptions) {\n\t\tvalidate(optionDescription, ruleName, complain);\n\t}\n\n\t/**\n\t * @param {string} message\n\t */\n\tfunction complain(message) {\n\t\tnoErrors = false;\n\t\tresult.warn(message, {\n\t\t\tstylelintType: 'invalidOption',\n\t\t});\n\t\tresult.stylelint = result.stylelint || {\n\t\t\tdisabledRanges: {},\n\t\t\truleSeverities: {},\n\t\t\tcustomMessages: {},\n\t\t\truleMetadata: {},\n\t\t};\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\treturn noErrors;\n}\n\n/**\n * @param {RuleOptions} opts\n * @param {string} ruleName\n * @param {(message: string) => void} complain\n */\nfunction validate(opts, ruleName, complain) {\n\tconst possible = opts.possible;\n\tconst actual = opts.actual;\n\tconst optional = opts.optional;\n\n\tif (actual === null || arrayEqual(actual, [null])) {\n\t\treturn;\n\t}\n\n\tconst nothingPossible =\n\t\tpossible === undefined || (Array.isArray(possible) && possible.length === 0);\n\n\tif (nothingPossible && actual === true) {\n\t\treturn;\n\t}\n\n\tif (actual === undefined) {\n\t\tif (nothingPossible || optional) {\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Expected option value for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (nothingPossible) {\n\t\tif (optional) {\n\t\t\tcomplain(\n\t\t\t\t`Incorrect configuration for rule \"${ruleName}\". Rule should have \"possible\" values for options validation`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tcomplain(`Unexpected option value ${stringify(actual)} for rule \"${ruleName}\"`);\n\n\t\treturn;\n\t}\n\n\tif (typeof possible === 'function') {\n\t\tif (!possible(actual)) {\n\t\t\tcomplain(`Invalid option ${stringify(actual)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If `possible` is an array instead of an object ...\n\tif (Array.isArray(possible)) {\n\t\tfor (const a of [actual].flat()) {\n\t\t\tif (isValid(possible, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid option value ${stringify(a)} for rule \"${ruleName}\"`);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// If actual is NOT an object ...\n\tif (!isPlainObject(actual) || typeof actual !== 'object' || actual == null) {\n\t\tcomplain(\n\t\t\t`Invalid option value ${stringify(actual)} for rule \"${ruleName}\": should be an object`,\n\t\t);\n\n\t\treturn;\n\t}\n\n\tfor (const [optionName, optionValue] of Object.entries(actual)) {\n\t\tif (IGNORED_OPTIONS.has(optionName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst possibleValue = possible && possible[optionName];\n\n\t\tif (!possibleValue) {\n\t\t\tcomplain(`Invalid option name \"${optionName}\" for rule \"${ruleName}\"`);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const a of [optionValue].flat()) {\n\t\t\tif (isValid(possibleValue, a)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcomplain(`Invalid value ${stringify(a)} for option \"${optionName}\" of rule \"${ruleName}\"`);\n\t\t}\n\t}\n}\n\n/**\n * @param {Possible | Possible[]} possible\n * @param {unknown} actual\n * @returns {boolean}\n */\nfunction isValid(possible, actual) {\n\tfor (const possibility of [possible].flat()) {\n\t\tif (typeof possibility === 'function' && possibility(actual)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (actual === possibility) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nfunction stringify(value) {\n\tif (typeof value === 'string') {\n\t\treturn `\"${value}\"`;\n\t}\n\n\treturn `\"${JSON.stringify(value)}\"`;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.validateOptions} */ (validateOptions);\n","'use strict';\n\n/**\n * Contains helpers for working with vendor prefixes.\n *\n * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2\n *\n * @namespace vendor\n */\nmodule.exports = {\n\t/**\n\t * Returns the vendor prefix extracted from an input string.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} vendor prefix or empty string\n\t *\n\t * @example\n\t * vendor.prefix('-moz-tab-size') //=> '-moz-'\n\t * vendor.prefix('tab-size')      //=> ''\n\t */\n\tprefix(prop) {\n\t\tconst match = prop.match(/^(-\\w+-)/);\n\n\t\tif (match) {\n\t\t\treturn match[0] || '';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\t/**\n\t * Returns the input string stripped of its vendor prefix.\n\t *\n\t * @param {string} prop String with or without vendor prefix.\n\t *\n\t * @return {string} String name without vendor prefixes.\n\t *\n\t * @example\n\t * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n\t */\n\tunprefixed(prop) {\n\t\treturn prop.replace(/^-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst vendor = require('./vendor');\n\n/**\n * Extract each list using the internal API of Autoprefixer 10.2.5.\n *\n * @see https://github.com/postcss/autoprefixer/tree/10.2.5\n *\n * @example\n * const autoprefixer = require('autoprefixer');\n * const Browsers = require('autoprefixer/lib/browsers');\n * const Prefixes = require('autoprefixer/lib/prefixes');\n * const utils = require('autoprefixer/lib/utils');\n *\n * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));\n */\n\n/**\n * @example\n * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));\n */\nconst AT_RULES = new Set([\n\t'@-khtml-keyframes',\n\t'@-moz-keyframes',\n\t'@-ms-keyframes',\n\t'@-ms-viewport',\n\t'@-o-keyframes',\n\t'@-o-viewport',\n\t'@-webkit-keyframes',\n\t'@resolution',\n]);\n\n/**\n * @example\n * prefixes.remove.selectors.map((s) => s.prefixed);\n */\nconst SELECTORS = new Set([\n\t':-moz-any-link',\n\t':-moz-full-screen',\n\t':-moz-placeholder',\n\t':-moz-placeholder-shown',\n\t':-moz-read-only',\n\t':-moz-read-write',\n\t':-ms-fullscreen',\n\t':-ms-input-placeholder',\n\t':-webkit-any-link',\n\t':-webkit-full-screen',\n\t'::-moz-placeholder',\n\t'::-moz-selection',\n\t'::-ms-input-placeholder',\n\t'::-webkit-backdrop',\n\t'::-webkit-input-placeholder',\n]);\n\n/**\n * @example\n * Object.entries(autoprefixer.data.prefixes)\n *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))\n *   .map(([key, value]) => key);\n */\nconst PROPERTIES = new Set([\n\t'align-content',\n\t'align-items',\n\t'align-self',\n\t'animation',\n\t'animation-delay',\n\t'animation-direction',\n\t'animation-duration',\n\t'animation-fill-mode',\n\t'animation-iteration-count',\n\t'animation-name',\n\t'animation-play-state',\n\t'animation-timing-function',\n\t'appearance',\n\t'backdrop-filter',\n\t'backface-visibility',\n\t'background-clip',\n\t'background-origin',\n\t'background-size',\n\t'border-block-end',\n\t'border-block-start',\n\t'border-bottom-left-radius',\n\t'border-bottom-right-radius',\n\t'border-image',\n\t'border-inline-end',\n\t'border-inline-start',\n\t'border-radius',\n\t'border-top-left-radius',\n\t'border-top-right-radius',\n\t'box-decoration-break',\n\t'box-shadow',\n\t'box-sizing',\n\t'break-after',\n\t'break-before',\n\t'break-inside',\n\t'clip-path',\n\t'color-adjust',\n\t'column-count',\n\t'column-fill',\n\t'column-gap',\n\t'column-rule',\n\t'column-rule-color',\n\t'column-rule-style',\n\t'column-rule-width',\n\t'column-span',\n\t'column-width',\n\t'columns',\n\t'filter',\n\t'flex',\n\t'flex-basis',\n\t'flex-direction',\n\t'flex-flow',\n\t'flex-grow',\n\t'flex-shrink',\n\t'flex-wrap',\n\t'flow-from',\n\t'flow-into',\n\t'font-feature-settings',\n\t'font-kerning',\n\t'font-language-override',\n\t'font-variant-ligatures',\n\t'grid-area',\n\t'grid-column',\n\t'grid-column-align',\n\t'grid-column-end',\n\t'grid-column-start',\n\t'grid-row',\n\t'grid-row-align',\n\t'grid-row-end',\n\t'grid-row-start',\n\t'grid-template',\n\t'grid-template-areas',\n\t'grid-template-columns',\n\t'grid-template-rows',\n\t'hyphens',\n\t'image-rendering',\n\t'justify-content',\n\t'margin-block-end',\n\t'margin-block-start',\n\t'margin-inline-end',\n\t'margin-inline-start',\n\t'mask',\n\t'mask-border',\n\t'mask-border-outset',\n\t'mask-border-repeat',\n\t'mask-border-slice',\n\t'mask-border-source',\n\t'mask-border-width',\n\t'mask-clip',\n\t'mask-composite',\n\t'mask-image',\n\t'mask-origin',\n\t'mask-position',\n\t'mask-repeat',\n\t'mask-size',\n\t'object-fit',\n\t'object-position',\n\t'order',\n\t'overscroll-behavior',\n\t'padding-block-end',\n\t'padding-block-start',\n\t'padding-inline-end',\n\t'padding-inline-start',\n\t'perspective',\n\t'perspective-origin',\n\t'place-self',\n\t'region-fragment',\n\t'scroll-snap-coordinate',\n\t'scroll-snap-destination',\n\t'scroll-snap-points-x',\n\t'scroll-snap-points-y',\n\t'scroll-snap-type',\n\t'shape-image-threshold',\n\t'shape-margin',\n\t'shape-outside',\n\t'tab-size',\n\t'text-align-last',\n\t'text-decoration',\n\t'text-decoration-color',\n\t'text-decoration-line',\n\t'text-decoration-skip',\n\t'text-decoration-skip-ink',\n\t'text-decoration-style',\n\t'text-emphasis',\n\t'text-emphasis-color',\n\t'text-emphasis-position',\n\t'text-emphasis-style',\n\t'text-orientation',\n\t'text-overflow',\n\t'text-size-adjust',\n\t'text-spacing',\n\t'touch-action',\n\t'transform',\n\t'transform-origin',\n\t'transform-style',\n\t'transition',\n\t'transition-delay',\n\t'transition-duration',\n\t'transition-property',\n\t'transition-timing-function',\n\t'user-select',\n\t'writing-mode',\n]);\n\n/**\n * @example\n * Object.values(prefixes.remove)\n *   .filter((p) => Array.isArray(p.values))\n *   .flatMap((p) => p.values)\n *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'\n *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only\n *\n * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013\n */\nconst PROPERTY_VALUES = new Set([\n\t'-moz-available',\n\t'-moz-box',\n\t'-moz-calc',\n\t'-moz-crisp-edges',\n\t'-moz-element',\n\t'-moz-fit-content',\n\t'-moz-grab',\n\t'-moz-grabbing',\n\t'-moz-inline-box',\n\t'-moz-isolate',\n\t'-moz-isolate-override',\n\t'-moz-linear-gradient',\n\t'-moz-max-content',\n\t'-moz-min-content',\n\t'-moz-plaintext',\n\t'-moz-radial-gradient',\n\t'-moz-repeating-linear-gradient',\n\t'-moz-repeating-radial-gradient',\n\t'-moz-zoom-in',\n\t'-moz-zoom-out',\n\t'-ms-flexbox',\n\t'-ms-grid',\n\t'-ms-inline-flexbox',\n\t'-ms-inline-grid',\n\t'-ms-linear-gradient',\n\t'-ms-radial-gradient',\n\t'-ms-repeating-linear-gradient',\n\t'-ms-repeating-radial-gradient',\n\t'-o-linear-gradient',\n\t'-o-pixelated',\n\t'-o-radial-gradient',\n\t'-o-repeating-linear-gradient',\n\t'-o-repeating-radial-gradient',\n\t'-webkit-box',\n\t'-webkit-calc',\n\t'-webkit-cross-fade',\n\t'-webkit-fill-available',\n\t'-webkit-filter',\n\t'-webkit-fit-content',\n\t'-webkit-flex',\n\t'-webkit-grab',\n\t'-webkit-grabbing',\n\t'-webkit-image-set',\n\t'-webkit-inline-box',\n\t'-webkit-inline-flex',\n\t'-webkit-isolate',\n\t'-webkit-linear-gradient',\n\t'-webkit-max-content',\n\t'-webkit-min-content',\n\t'-webkit-optimize-contrast',\n\t'-webkit-radial-gradient',\n\t'-webkit-repeating-linear-gradient',\n\t'-webkit-repeating-radial-gradient',\n\t'-webkit-sticky',\n\t'-webkit-zoom-in',\n\t'-webkit-zoom-out',\n]);\n\n/**\n * Most identifier types have to be looked up in a unique way,\n * so we're exposing special functions for each.\n */\nmodule.exports = {\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tatRuleName(identifier) {\n\t\treturn AT_RULES.has(`@${identifier.toLowerCase()}`);\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tselector(identifier) {\n\t\treturn SELECTORS.has(identifier.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tmediaFeatureName(identifier) {\n\t\treturn identifier.toLowerCase().includes('device-pixel-ratio');\n\t},\n\n\t/**\n\t * @param {string} identifier\n\t * @returns {boolean}\n\t */\n\tproperty(identifier) {\n\t\tconst ident = identifier.toLowerCase();\n\n\t\t// HACK: `interpolation-mode` does not exist. This is an IE extension for `image-rendering`.\n\t\t//       See <https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#examples>\n\t\tif (ident === '-ms-interpolation-mode') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (vendor.prefix(ident).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn PROPERTIES.has(vendor.unprefixed(ident));\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {boolean}\n\t */\n\tpropertyValue(value) {\n\t\treturn PROPERTY_VALUES.has(value.toLowerCase());\n\t},\n\n\t/**\n\t * @param {string} value\n\t * @returns {string}\n\t */\n\tunprefix(value) {\n\t\treturn value.replace(/-\\w+-/, '');\n\t},\n};\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (p) => `Unexpected vendor-prefixed at-rule \"@${p}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!name.startsWith('-')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.atRuleName(name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = isAutoprefixable.unprefix(atRule.name);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst htmlTags = require('html-tags');\n\nconst keywordSets = {};\n\nkeywordSets.nonLengthUnits = new Set([\n\t// Relative length units\n\t'%',\n\t// Time length units\n\t's',\n\t'ms',\n\t// Angle\n\t'deg',\n\t'grad',\n\t'turn',\n\t'rad',\n\t// Frequency\n\t'Hz',\n\t'kHz',\n\t// Resolution\n\t'dpi',\n\t'dpcm',\n\t'dppx',\n]);\n\nkeywordSets.lengthUnits = new Set([\n\t// Relative length units\n\t'em',\n\t'ex',\n\t'ch',\n\t'rem',\n\t'rlh',\n\t'lh',\n\t// Viewport-percentage lengths\n\t'dvh',\n\t'dvmax',\n\t'dvmin',\n\t'dvw',\n\t'lvh',\n\t'lvmax',\n\t'lvmin',\n\t'lvw',\n\t'svh',\n\t'svmax',\n\t'svmin',\n\t'svw',\n\t'vh',\n\t'vw',\n\t'vmin',\n\t'vmax',\n\t'vm',\n\t// Absolute length units\n\t'px',\n\t'mm',\n\t'cm',\n\t'in',\n\t'pt',\n\t'pc',\n\t'q',\n\t'mozmm',\n\t// Flexible length units\n\t'fr',\n]);\n\nkeywordSets.units = uniteSets(keywordSets.nonLengthUnits, keywordSets.lengthUnits);\n\nkeywordSets.camelCaseFunctionNames = new Set([\n\t'translateX',\n\t'translateY',\n\t'translateZ',\n\t'scaleX',\n\t'scaleY',\n\t'scaleZ',\n\t'rotateX',\n\t'rotateY',\n\t'rotateZ',\n\t'skewX',\n\t'skewY',\n]);\n\nkeywordSets.basicKeywords = new Set(['initial', 'inherit', 'revert', 'revert-layer', 'unset']);\n\nkeywordSets.systemFontValues = uniteSets(keywordSets.basicKeywords, [\n\t'caption',\n\t'icon',\n\t'menu',\n\t'message-box',\n\t'small-caption',\n\t'status-bar',\n]);\n\nkeywordSets.fontFamilyKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'serif',\n\t'sans-serif',\n\t'cursive',\n\t'fantasy',\n\t'monospace',\n\t'system-ui',\n\t'ui-serif',\n\t'ui-sans-serif',\n\t'ui-monospace',\n\t'ui-rounded',\n]);\n\nkeywordSets.fontWeightRelativeKeywords = new Set(['bolder', 'lighter']);\n\nkeywordSets.fontWeightAbsoluteKeywords = new Set(['bold']);\n\nkeywordSets.fontWeightNumericKeywords = new Set([\n\t'100',\n\t'200',\n\t'300',\n\t'400',\n\t'500',\n\t'600',\n\t'700',\n\t'800',\n\t'900',\n]);\n\nkeywordSets.fontWeightKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.fontWeightRelativeKeywords,\n\tkeywordSets.fontWeightAbsoluteKeywords,\n\tkeywordSets.fontWeightNumericKeywords,\n);\n\nkeywordSets.animationNameKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.animationTimingFunctionKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'linear',\n\t'ease',\n\t'ease-in',\n\t'ease-in-out',\n\t'ease-out',\n\t'step-start',\n\t'step-end',\n\t'steps',\n\t'cubic-bezier',\n]);\n\nkeywordSets.animationIterationCountKeywords = new Set(['infinite']);\n\nkeywordSets.animationDirectionKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'reverse',\n\t'alternate',\n\t'alternate-reverse',\n]);\n\nkeywordSets.animationFillModeKeywords = new Set(['none', 'forwards', 'backwards', 'both']);\n\nkeywordSets.animationPlayStateKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'running',\n\t'paused',\n]);\n\n// cf. https://developer.mozilla.org/en-US/docs/Web/CSS/animation\nkeywordSets.animationShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.animationNameKeywords,\n\tkeywordSets.animationTimingFunctionKeywords,\n\tkeywordSets.animationIterationCountKeywords,\n\tkeywordSets.animationDirectionKeywords,\n\tkeywordSets.animationFillModeKeywords,\n\tkeywordSets.animationPlayStateKeywords,\n);\n\n// These are the ones that can have single-colon notation\nkeywordSets.levelOneAndTwoPseudoElements = new Set([\n\t'before',\n\t'after',\n\t'first-line',\n\t'first-letter',\n]);\n\nkeywordSets.levelThreeAndUpPseudoElements = new Set([\n\t'before',\n\t'after',\n\t'first-line',\n\t'first-letter',\n\t// These are the ones that require double-colon notation\n\t'backdrop',\n\t'content',\n\t'cue',\n\t'file-selector-button',\n\t'grammar-error',\n\t'marker',\n\t'placeholder',\n\t'selection',\n\t'shadow',\n\t'slotted',\n\t'spelling-error',\n\t'target-text',\n]);\n\nkeywordSets.shadowTreePseudoElements = new Set(['part']);\n\nkeywordSets.webkitScrollbarPseudoElements = new Set([\n\t'-webkit-resizer',\n\t'-webkit-scrollbar',\n\t'-webkit-scrollbar-button',\n\t'-webkit-scrollbar-corner',\n\t'-webkit-scrollbar-thumb',\n\t'-webkit-scrollbar-track',\n\t'-webkit-scrollbar-track-piece',\n]);\n\nkeywordSets.vendorSpecificPseudoElements = new Set([\n\t'-moz-focus-inner',\n\t'-moz-focus-outer',\n\t'-moz-list-bullet',\n\t'-moz-meter-bar',\n\t'-moz-placeholder',\n\t'-moz-progress-bar',\n\t'-moz-range-progress',\n\t'-moz-range-thumb',\n\t'-moz-range-track',\n\t'-ms-browse',\n\t'-ms-check',\n\t'-ms-clear',\n\t'-ms-expand',\n\t'-ms-fill',\n\t'-ms-fill-lower',\n\t'-ms-fill-upper',\n\t'-ms-reveal',\n\t'-ms-thumb',\n\t'-ms-ticks-after',\n\t'-ms-ticks-before',\n\t'-ms-tooltip',\n\t'-ms-track',\n\t'-ms-value',\n\t'-webkit-color-swatch',\n\t'-webkit-color-swatch-wrapper',\n\t'-webkit-calendar-picker-indicator',\n\t'-webkit-clear-button',\n\t'-webkit-date-and-time-value',\n\t'-webkit-datetime-edit',\n\t'-webkit-datetime-edit-ampm-field',\n\t'-webkit-datetime-edit-day-field',\n\t'-webkit-datetime-edit-fields-wrapper',\n\t'-webkit-datetime-edit-hour-field',\n\t'-webkit-datetime-edit-millisecond-field',\n\t'-webkit-datetime-edit-minute-field',\n\t'-webkit-datetime-edit-month-field',\n\t'-webkit-datetime-edit-second-field',\n\t'-webkit-datetime-edit-text',\n\t'-webkit-datetime-edit-week-field',\n\t'-webkit-datetime-edit-year-field',\n\t'-webkit-details-marker',\n\t'-webkit-distributed',\n\t'-webkit-file-upload-button',\n\t'-webkit-input-placeholder',\n\t'-webkit-keygen-select',\n\t'-webkit-meter-bar',\n\t'-webkit-meter-even-less-good-value',\n\t'-webkit-meter-inner-element',\n\t'-webkit-meter-optimum-value',\n\t'-webkit-meter-suboptimum-value',\n\t'-webkit-progress-bar',\n\t'-webkit-progress-inner-element',\n\t'-webkit-progress-value',\n\t'-webkit-search-cancel-button',\n\t'-webkit-search-decoration',\n\t'-webkit-search-results-button',\n\t'-webkit-search-results-decoration',\n\t'-webkit-slider-runnable-track',\n\t'-webkit-slider-thumb',\n\t'-webkit-textfield-decoration-container',\n\t'-webkit-validation-bubble',\n\t'-webkit-validation-bubble-arrow',\n\t'-webkit-validation-bubble-arrow-clipper',\n\t'-webkit-validation-bubble-heading',\n\t'-webkit-validation-bubble-message',\n\t'-webkit-validation-bubble-text-block',\n\t...keywordSets.webkitScrollbarPseudoElements,\n]);\n\nkeywordSets.pseudoElements = uniteSets(\n\tkeywordSets.levelOneAndTwoPseudoElements,\n\tkeywordSets.levelThreeAndUpPseudoElements,\n\tkeywordSets.vendorSpecificPseudoElements,\n\tkeywordSets.shadowTreePseudoElements,\n);\n\nkeywordSets.aNPlusBNotationPseudoClasses = new Set([\n\t'nth-column',\n\t'nth-last-column',\n\t'nth-last-of-type',\n\t'nth-of-type',\n]);\n\nkeywordSets.linguisticPseudoClasses = new Set(['dir', 'lang']);\n\nkeywordSets.atRulePagePseudoClasses = new Set(['first', 'right', 'left', 'blank']);\n\nkeywordSets.logicalCombinationsPseudoClasses = new Set(['has', 'is', 'matches', 'not', 'where']);\n\nkeywordSets.aNPlusBOfSNotationPseudoClasses = new Set(['nth-child', 'nth-last-child']);\n\nkeywordSets.otherPseudoClasses = new Set([\n\t'active',\n\t'any-link',\n\t'autofill',\n\t'blank',\n\t'checked',\n\t'current',\n\t'default',\n\t'defined',\n\t'disabled',\n\t'empty',\n\t'enabled',\n\t'first-child',\n\t'first-of-type',\n\t'focus',\n\t'focus-within',\n\t'focus-visible',\n\t'fullscreen',\n\t'fullscreen-ancestor',\n\t'future',\n\t'host',\n\t'host-context',\n\t'hover',\n\t'indeterminate',\n\t'in-range',\n\t'invalid',\n\t'last-child',\n\t'last-of-type',\n\t'link',\n\t'only-child',\n\t'only-of-type',\n\t'optional',\n\t'out-of-range',\n\t'past',\n\t'placeholder-shown',\n\t'playing',\n\t'picture-in-picture',\n\t'paused',\n\t'read-only',\n\t'read-write',\n\t'required',\n\t'root',\n\t'scope',\n\t'state',\n\t'target',\n\t'unresolved',\n\t'user-invalid',\n\t'user-valid',\n\t'valid',\n\t'visited',\n\t'window-inactive', // for ::selection (chrome)\n]);\n\nkeywordSets.vendorSpecificPseudoClasses = new Set([\n\t'-khtml-drag',\n\t'-moz-any',\n\t'-moz-any-link',\n\t'-moz-broken',\n\t'-moz-drag-over',\n\t'-moz-first-node',\n\t'-moz-focusring',\n\t'-moz-full-screen',\n\t'-moz-full-screen-ancestor',\n\t'-moz-last-node',\n\t'-moz-loading',\n\t'-moz-meter-optimum',\n\t'-moz-meter-sub-optimum',\n\t'-moz-meter-sub-sub-optimum',\n\t'-moz-placeholder',\n\t'-moz-submit-invalid',\n\t'-moz-suppressed',\n\t'-moz-ui-invalid',\n\t'-moz-ui-valid',\n\t'-moz-user-disabled',\n\t'-moz-window-inactive',\n\t'-ms-fullscreen',\n\t'-ms-input-placeholder',\n\t'-webkit-drag',\n\t'-webkit-any',\n\t'-webkit-any-link',\n\t'-webkit-autofill',\n\t'-webkit-full-screen',\n\t'-webkit-full-screen-ancestor',\n]);\n\n// https://webkit.org/blog/363/styling-scrollbars/\nkeywordSets.webkitScrollbarPseudoClasses = new Set([\n\t'horizontal',\n\t'vertical',\n\t'decrement',\n\t'increment',\n\t'start',\n\t'end',\n\t'double-button',\n\t'single-button',\n\t'no-button',\n\t'corner-present',\n\t'window-inactive',\n]);\n\nkeywordSets.pseudoClasses = uniteSets(\n\tkeywordSets.aNPlusBNotationPseudoClasses,\n\tkeywordSets.linguisticPseudoClasses,\n\tkeywordSets.logicalCombinationsPseudoClasses,\n\tkeywordSets.aNPlusBOfSNotationPseudoClasses,\n\tkeywordSets.otherPseudoClasses,\n\tkeywordSets.vendorSpecificPseudoClasses,\n);\n\nkeywordSets.shorthandTimeProperties = new Set(['transition', 'animation']);\n\nkeywordSets.longhandTimeProperties = new Set([\n\t'transition-duration',\n\t'transition-delay',\n\t'animation-duration',\n\t'animation-delay',\n]);\n\nkeywordSets.timeProperties = uniteSets(\n\tkeywordSets.shorthandTimeProperties,\n\tkeywordSets.longhandTimeProperties,\n);\n\nkeywordSets.camelCaseKeywords = new Set([\n\t'optimizeSpeed',\n\t'optimizeQuality',\n\t'optimizeLegibility',\n\t'geometricPrecision',\n\t'currentColor',\n\t'crispEdges',\n\t'visiblePainted',\n\t'visibleFill',\n\t'visibleStroke',\n\t'sRGB',\n\t'linearRGB',\n]);\n\n// https://developer.mozilla.org/docs/Web/CSS/counter-increment\nkeywordSets.counterIncrementKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.counterResetKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.gridRowKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\nkeywordSets.gridColumnKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\nkeywordSets.gridAreaKeywords = uniteSets(keywordSets.basicKeywords, ['auto', 'span']);\n\n// https://developer.mozilla.org/ru/docs/Web/CSS/list-style-type\nkeywordSets.listStyleTypeKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'none',\n\t'disc',\n\t'circle',\n\t'square',\n\t'decimal',\n\t'cjk-decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-greek',\n\t'lower-alpha',\n\t'lower-latin',\n\t'upper-alpha',\n\t'upper-latin',\n\t'arabic-indic',\n\t'armenian',\n\t'bengali',\n\t'cambodian',\n\t'cjk-earthly-branch',\n\t'cjk-ideographic',\n\t'devanagari',\n\t'ethiopic-numeric',\n\t'georgian',\n\t'gujarati',\n\t'gurmukhi',\n\t'hebrew',\n\t'hiragana',\n\t'hiragana-iroha',\n\t'japanese-formal',\n\t'japanese-informal',\n\t'kannada',\n\t'katakana',\n\t'katakana-iroha',\n\t'khmer',\n\t'korean-hangul-formal',\n\t'korean-hanja-formal',\n\t'korean-hanja-informal',\n\t'lao',\n\t'lower-armenian',\n\t'malayalam',\n\t'mongolian',\n\t'myanmar',\n\t'oriya',\n\t'persian',\n\t'simp-chinese-formal',\n\t'simp-chinese-informal',\n\t'tamil',\n\t'telugu',\n\t'thai',\n\t'tibetan',\n\t'trad-chinese-formal',\n\t'trad-chinese-informal',\n\t'upper-armenian',\n\t'disclosure-open',\n\t'disclosure-closed',\n\t// Non-standard extensions (without prefixe)\n\t'ethiopic-halehame',\n\t'ethiopic-halehame-am',\n\t'ethiopic-halehame-ti-er',\n\t'ethiopic-halehame-ti-et',\n\t'hangul',\n\t'hangul-consonant',\n\t'urdu',\n]);\n\nkeywordSets.listStylePositionKeywords = uniteSets(keywordSets.basicKeywords, ['inside', 'outside']);\n\nkeywordSets.listStyleImageKeywords = uniteSets(keywordSets.basicKeywords, ['none']);\n\nkeywordSets.listStyleShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.listStyleTypeKeywords,\n\tkeywordSets.listStylePositionKeywords,\n\tkeywordSets.listStyleImageKeywords,\n);\n\nkeywordSets.fontStyleKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'italic',\n\t'oblique',\n]);\n\nkeywordSets.fontVariantKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'normal',\n\t'none',\n\t'historical-forms',\n\t'none',\n\t'common-ligatures',\n\t'no-common-ligatures',\n\t'discretionary-ligatures',\n\t'no-discretionary-ligatures',\n\t'historical-ligatures',\n\t'no-historical-ligatures',\n\t'contextual',\n\t'no-contextual',\n\t'small-caps',\n\t'small-caps',\n\t'all-small-caps',\n\t'petite-caps',\n\t'all-petite-caps',\n\t'unicase',\n\t'titling-caps',\n\t'lining-nums',\n\t'oldstyle-nums',\n\t'proportional-nums',\n\t'tabular-nums',\n\t'diagonal-fractions',\n\t'stacked-fractions',\n\t'ordinal',\n\t'slashed-zero',\n\t'jis78',\n\t'jis83',\n\t'jis90',\n\t'jis04',\n\t'simplified',\n\t'traditional',\n\t'full-width',\n\t'proportional-width',\n\t'ruby',\n]);\n\nkeywordSets.fontStretchKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'semi-condensed',\n\t'condensed',\n\t'extra-condensed',\n\t'ultra-condensed',\n\t'semi-expanded',\n\t'expanded',\n\t'extra-expanded',\n\t'ultra-expanded',\n]);\n\nkeywordSets.fontSizeKeywords = uniteSets(keywordSets.basicKeywords, [\n\t'xx-small',\n\t'x-small',\n\t'small',\n\t'medium',\n\t'large',\n\t'x-large',\n\t'xx-large',\n\t'larger',\n\t'smaller',\n]);\n\nkeywordSets.lineHeightKeywords = uniteSets(keywordSets.basicKeywords, ['normal']);\n\nkeywordSets.fontShorthandKeywords = uniteSets(\n\tkeywordSets.basicKeywords,\n\tkeywordSets.fontStyleKeywords,\n\tkeywordSets.fontVariantKeywords,\n\tkeywordSets.fontWeightKeywords,\n\tkeywordSets.fontStretchKeywords,\n\tkeywordSets.fontSizeKeywords,\n\tkeywordSets.lineHeightKeywords,\n\tkeywordSets.fontFamilyKeywords,\n);\n\nkeywordSets.keyframeSelectorKeywords = new Set(['from', 'to']);\n\n// https://www.w3.org/TR/css-page-3/#syntax-page-selector\nkeywordSets.pageMarginAtRules = new Set([\n\t'top-left-corner',\n\t'top-left',\n\t'top-center',\n\t'top-right',\n\t'top-right-corner',\n\t'bottom-left-corner',\n\t'bottom-left',\n\t'bottom-center',\n\t'bottom-right',\n\t'bottom-right-corner',\n\t'left-top',\n\t'left-middle',\n\t'left-bottom',\n\t'right-top',\n\t'right-middle',\n\t'right-bottom',\n]);\n\n// https://developer.mozilla.org/en/docs/Web/CSS/At-rule\nkeywordSets.atRules = uniteSets(keywordSets.pageMarginAtRules, [\n\t'annotation',\n\t'apply',\n\t'character-variant',\n\t'charset',\n\t'counter-style',\n\t'custom-media',\n\t'custom-selector',\n\t'document',\n\t'font-face',\n\t'font-feature-values',\n\t'import',\n\t'keyframes',\n\t'layer',\n\t'media',\n\t'namespace',\n\t'nest',\n\t'ornaments',\n\t'page',\n\t'property',\n\t'styleset',\n\t'stylistic',\n\t'supports',\n\t'swash',\n\t'viewport',\n]);\n\n// https://drafts.csswg.org/mediaqueries/#descdef-media-update\nkeywordSets.deprecatedMediaFeatureNames = new Set([\n\t'device-aspect-ratio',\n\t'device-height',\n\t'device-width',\n\t'max-device-aspect-ratio',\n\t'max-device-height',\n\t'max-device-width',\n\t'min-device-aspect-ratio',\n\t'min-device-height',\n\t'min-device-width',\n]);\n\n// https://drafts.csswg.org/mediaqueries/#descdef-media-update\nkeywordSets.mediaFeatureNames = uniteSets(keywordSets.deprecatedMediaFeatureNames, [\n\t'any-hover',\n\t'any-pointer',\n\t'aspect-ratio',\n\t'color',\n\t'color-gamut',\n\t'color-index',\n\t'display-mode',\n\t'dynamic-range',\n\t'forced-colors',\n\t'grid',\n\t'height',\n\t'hover',\n\t'inverted-colors',\n\t'light-level',\n\t'max-aspect-ratio',\n\t'max-color',\n\t'max-color-index',\n\t'max-height',\n\t'max-monochrome',\n\t'max-resolution',\n\t'max-width',\n\t'min-aspect-ratio',\n\t'min-color',\n\t'min-color-index',\n\t'min-height',\n\t'min-monochrome',\n\t'min-resolution',\n\t'min-width',\n\t'monochrome',\n\t'orientation',\n\t'overflow-block',\n\t'overflow-inline',\n\t'pointer',\n\t'prefers-color-scheme',\n\t'prefers-contrast',\n\t'prefers-reduced-motion',\n\t'prefers-reduced-transparency',\n\t'resolution',\n\t'scan',\n\t'scripting',\n\t'update',\n\t'video-dynamic-range',\n\t'width',\n]);\n\n// https://www.w3.org/TR/CSS22/ui.html#system-colors\nkeywordSets.systemColors = new Set([\n\t'activeborder',\n\t'activecaption',\n\t'appworkspace',\n\t'background',\n\t'buttonface',\n\t'buttonhighlight',\n\t'buttonshadow',\n\t'buttontext',\n\t'captiontext',\n\t'graytext',\n\t'highlight',\n\t'highlighttext',\n\t'inactiveborder',\n\t'inactivecaption',\n\t'inactivecaptiontext',\n\t'infobackground',\n\t'infotext',\n\t'menu',\n\t'menutext',\n\t'scrollbar',\n\t'threeddarkshadow',\n\t'threedface',\n\t'threedhighlight',\n\t'threedlightshadow',\n\t'threedshadow',\n\t'window',\n\t'windowframe',\n\t'windowtext',\n]);\n\n// typecasting htmlTags to be more generic; see https://github.com/stylelint/stylelint/pull/6013 for discussion\n/** @type {Set<string>} */\nkeywordSets.standardHtmlTags = new Set(htmlTags);\n\n// htmlTags includes only \"standard\" tags. So we augment it with older tags etc.\nkeywordSets.nonStandardHtmlTags = new Set([\n\t'acronym',\n\t'applet',\n\t'basefont',\n\t'big',\n\t'blink',\n\t'center',\n\t'content',\n\t'dir',\n\t'font',\n\t'frame',\n\t'frameset',\n\t'hgroup',\n\t'isindex',\n\t'keygen',\n\t'listing',\n\t'marquee',\n\t'nobr',\n\t'noembed',\n\t'plaintext',\n\t'spacer',\n\t'strike',\n\t'tt',\n\t'xmp',\n]);\n\nkeywordSets.validMixedCaseSvgElements = new Set([\n\t'altGlyph',\n\t'altGlyphDef',\n\t'altGlyphItem',\n\t'animateColor',\n\t'animateMotion',\n\t'animateTransform',\n\t'clipPath',\n\t'feBlend',\n\t'feColorMatrix',\n\t'feComponentTransfer',\n\t'feComposite',\n\t'feConvolveMatrix',\n\t'feDiffuseLighting',\n\t'feDisplacementMap',\n\t'feDistantLight',\n\t'feDropShadow',\n\t'feFlood',\n\t'feFuncA',\n\t'feFuncB',\n\t'feFuncG',\n\t'feFuncR',\n\t'feGaussianBlur',\n\t'feImage',\n\t'feMerge',\n\t'feMergeNode',\n\t'feMorphology',\n\t'feOffset',\n\t'fePointLight',\n\t'feSpecularLighting',\n\t'feSpotLight',\n\t'feTile',\n\t'feTurbulence',\n\t'foreignObject',\n\t'glyphRef',\n\t'linearGradient',\n\t'radialGradient',\n\t'textPath',\n]);\n\n/**\n * @param {(string[] | Set<string>)[]} args\n */\nfunction uniteSets(...args) {\n\treturn new Set([...args].reduce((result, set) => [...result, ...set], []));\n}\n\nmodule.exports = keywordSets;\n","'use strict';\n\n/**\n * Compares a string to a second value that, if it fits a certain convention,\n * is converted to a regular expression before the comparison.\n * If it doesn't fit the convention, then two strings are compared.\n *\n * Any strings starting and ending with `/` are interpreted\n * as regular expressions.\n *\n * @param {string | Array<string>} input\n * @param {string | RegExp | Array<string | RegExp>} comparison\n *\n * @returns {false | {match: string, pattern: (string | RegExp), substring: string}}\n */\nmodule.exports = function matchesStringOrRegExp(input, comparison) {\n\tif (!Array.isArray(input)) {\n\t\treturn testAgainstStringOrRegExpOrArray(input, comparison);\n\t}\n\n\tfor (const inputItem of input) {\n\t\tconst testResult = testAgainstStringOrRegExpOrArray(inputItem, comparison);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {string | RegExp | Array<string | RegExp>} comparison\n */\nfunction testAgainstStringOrRegExpOrArray(value, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstStringOrRegExp(value, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstStringOrRegExp(value, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} value\n * @param {string | RegExp} comparison\n */\nfunction testAgainstStringOrRegExp(value, comparison) {\n\t// If it's a RegExp, test directly\n\tif (comparison instanceof RegExp) {\n\t\tconst match = value.match(comparison);\n\n\t\treturn match ? { match: value, pattern: comparison, substring: match[0] || '' } : false;\n\t}\n\n\t// Check if it's RegExp in a string\n\tconst firstComparisonChar = comparison[0];\n\tconst lastComparisonChar = comparison[comparison.length - 1];\n\tconst secondToLastComparisonChar = comparison[comparison.length - 2];\n\n\tconst comparisonIsRegex =\n\t\tfirstComparisonChar === '/' &&\n\t\t(lastComparisonChar === '/' ||\n\t\t\t(secondToLastComparisonChar === '/' && lastComparisonChar === 'i'));\n\n\tconst hasCaseInsensitiveFlag = comparisonIsRegex && lastComparisonChar === 'i';\n\n\t// If so, create a new RegExp from it\n\tif (comparisonIsRegex) {\n\t\tconst valueMatch = hasCaseInsensitiveFlag\n\t\t\t? value.match(new RegExp(comparison.slice(1, -2), 'i'))\n\t\t\t: value.match(new RegExp(comparison.slice(1, -1)));\n\n\t\treturn valueMatch\n\t\t\t? { match: value, pattern: comparison, substring: valueMatch[0] || '' }\n\t\t\t: false;\n\t}\n\n\t// Otherwise, it's a string. Do a strict comparison\n\treturn value === comparison ? { match: value, pattern: comparison, substring: value } : false;\n}\n","'use strict';\n\nconst matchesStringOrRegExp = require('./matchesStringOrRegExp');\n\n/**\n * Check if an options object's propertyName contains a user-defined string or\n * regex that matches the passed in input.\n *\n * @param {{ [x: string]: any; }} options\n * @param {string} propertyName\n * @param {unknown} input\n *\n * @returns {boolean}\n */\nmodule.exports = function optionsMatches(options, propertyName, input) {\n\treturn Boolean(\n\t\toptions &&\n\t\t\toptions[propertyName] &&\n\t\t\ttypeof input === 'string' &&\n\t\t\tmatchesStringOrRegExp(input, options[propertyName]),\n\t);\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atRule) => `Unexpected unknown at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (vendor.prefix(name) || keywordSets.atRules.has(name.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst atName = `@${name}`;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(atName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t\tword: atName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'lower' | 'upper'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tconst expectedName = expectation === 'lower' ? name.toLowerCase() : name.toUpperCase();\n\n\t\t\tif (name === expectedName) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = expectedName;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(name, expectedName),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Convert the specified value to an array. If an array is specified, the array is returned as-is.\n *\n * @template T\n * @param {T | T[] | undefined | null} value\n * @returns {T[] | undefined}\n */\nmodule.exports = function flattenArray(value) {\n\tif (value == null) {\n\t\treturn;\n\t}\n\n\treturn Array.isArray(value) ? value : [value];\n};\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties are one or more values\n * that satisfy the specified validator(s):\n *\n * @example\n * ignoreProperties = {\n *   value1: [\"item11\", \"item12\", \"item13\"],\n *   value2: \"item2\",\n * };\n * validateObjectWithArrayProps(isString)(ignoreProperties);\n * //=> true\n *\n * @typedef {(value: unknown) => boolean} Validator\n * @param {...Validator} validators\n * @returns {Validator}\n */\nmodule.exports = function validateObjectWithArrayProps(...validators) {\n\treturn (value) => {\n\t\tif (!isPlainObject(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.values(value)\n\t\t\t.flat()\n\t\t\t.every((item) => validators.some((v) => v(item)));\n\t};\n};\n","'use strict';\n\nconst flattenArray = require('../../utils/flattenArray');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-property-required-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\t\t\tconst propList = flattenArray(primary[atRuleName]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const property of propList) {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t(node) => node.type === 'decl' && node.prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @return {boolean} True if `statement` has a block (empty or otherwise)\n */\nmodule.exports = function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n};\n","'use strict';\n\n/**\n * Stringify PostCSS node including its raw \"before\" string.\n *\n * @param {import('postcss').Node} node\n *\n * @returns {string}\n */\nmodule.exports = function (node) {\n\tlet result = '';\n\n\tif (node.raws.before) {\n\t\tresult += node.raws.before;\n\t}\n\n\tresult += node.toString();\n\n\treturn result;\n};\n","'use strict';\n\n/** @typedef {import('stylelint').ConfigurationError} ConfigurationError */\n\n/**\n * Create configurationError from text and set CLI exit code\n * @param {string} text\n * @returns {ConfigurationError}\n */\nmodule.exports = function (text) {\n\tconst err = /** @type {ConfigurationError} */ (new Error(text));\n\n\terr.code = 78;\n\n\treturn err;\n};\n","'use strict';\n\n/**\n * Check if a string is a single line (i.e. does not contain\n * any newline characters).\n *\n * @param {string} input\n * @return {boolean}\n */\nmodule.exports = function (input) {\n\treturn !/[\\n\\r]/.test(input);\n};\n","'use strict';\n\n/**\n * Check if a character is whitespace.\n *\n * @param {string} char\n * @returns {boolean}\n */\nmodule.exports = function (char) {\n\treturn [' ', '\\n', '\\t', '\\r', '\\f'].includes(char);\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst isSingleLineString = require('./isSingleLineString');\nconst isWhitespace = require('./isWhitespace');\nconst { assertFunction, isNullish } = require('./validateTypes');\n\n/**\n * @typedef {(message: string) => string} MessageFunction\n */\n\n/**\n * @typedef {Object} Messages\n * @property {MessageFunction} [expectedBefore]\n * @property {MessageFunction} [rejectedBefore]\n * @property {MessageFunction} [expectedAfter]\n * @property {MessageFunction} [rejectedAfter]\n * @property {MessageFunction} [expectedBeforeSingleLine]\n * @property {MessageFunction} [rejectedBeforeSingleLine]\n * @property {MessageFunction} [expectedBeforeMultiLine]\n * @property {MessageFunction} [rejectedBeforeMultiLine]\n * @property {MessageFunction} [expectedAfterSingleLine]\n * @property {MessageFunction} [rejectedAfterSingleLine]\n * @property {MessageFunction} [expectedAfterMultiLine]\n * @property {MessageFunction} [rejectedAfterMultiLine]\n */\n\n/**\n * @typedef {Object} WhitespaceCheckerArgs\n * @property {string} source - The source string\n * @property {number} index - The index of the character to check before\n * @property {(message: string) => void} err - If a problem is found, this callback\n *   will be invoked with the relevant warning message.\n *   Typically this callback will report() the problem.\n * @property {string} [errTarget] - If a problem is found, this string\n *   will be sent to the relevant warning message.\n * @property {string} [lineCheckStr] - Single- and multi-line checkers\n *   will use this string to determine whether they should proceed,\n *   i.e. if this string is one line only, single-line checkers will check,\n *   multi-line checkers will ignore.\n *   If none is passed, they will use `source`.\n * @property {boolean} [onlyOneChar=false] - Only check *one* character before.\n *   By default, \"always-*\" checks will look for the `targetWhitespace` one\n *   before and then ensure there is no whitespace two before. This option\n *   bypasses that second check.\n * @property {boolean} [allowIndentation=false] - Allow arbitrary indentation\n *   between the `targetWhitespace` (almost definitely a newline) and the `index`.\n *   With this option, the checker will see if a newline *begins* the whitespace before\n *   the `index`.\n */\n\n/**\n * @typedef {(args: WhitespaceCheckerArgs) => void} WhitespaceChecker\n */\n\n/**\n * @typedef {{\n *   before: WhitespaceChecker,\n *   beforeAllowingIndentation: WhitespaceChecker,\n *   after: WhitespaceChecker,\n *   afterOneOnly: WhitespaceChecker,\n * }} WhitespaceCheckers\n */\n\n/**\n * Create a whitespaceChecker, which exposes the following functions:\n * - `before()`\n * - `beforeAllowingIndentation()`\n * - `after()`\n * - `afterOneOnly()`\n *\n * @param {\"space\" | \"newline\"} targetWhitespace - This is a keyword instead\n *   of the actual character (e.g. \" \") in order to accommodate\n *   different styles of newline (\"\\n\" vs \"\\r\\n\")\n * @param {\"always\" | \"never\" | \"always-single-line\" | \"always-multi-line\" | \"never-single-line\" | \"never-multi-line\"} expectation\n * @param {Messages} messages - An object of message functions;\n *   calling `before*()` or `after*()` and the `expectation` that is passed\n *   determines which message functions are required\n *\n * @returns {WhitespaceCheckers} The checker, with its exposed checking functions\n */\nmodule.exports = function whitespaceChecker(targetWhitespace, expectation, messages) {\n\t// Keep track of active arguments in order to avoid passing\n\t// too much stuff around, making signatures long and confusing.\n\t// This variable gets reset anytime a checking function is called.\n\t/** @type {WhitespaceCheckerArgs} */\n\tlet activeArgs;\n\n\t/**\n\t * Check for whitespace *before* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction before({\n\t\tsource,\n\t\tindex,\n\t\terr,\n\t\terrTarget,\n\t\tlineCheckStr,\n\t\tonlyOneChar = false,\n\t\tallowIndentation = false,\n\t}) {\n\t\tactiveArgs = {\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr,\n\t\t\terrTarget,\n\t\t\tonlyOneChar,\n\t\t\tallowIndentation,\n\t\t};\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectBefore();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectBefore(messages.expectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectBefore(messages.rejectedBeforeMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * Check for whitespace *after* a character.\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction after({ source, index, err, errTarget, lineCheckStr, onlyOneChar = false }) {\n\t\tactiveArgs = { source, index, err, errTarget, onlyOneChar };\n\n\t\tswitch (expectation) {\n\t\t\tcase 'always':\n\t\t\t\texpectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'never':\n\t\t\t\trejectAfter();\n\t\t\t\tbreak;\n\t\t\tcase 'always-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-single-line':\n\t\t\t\tif (!isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterSingleLine);\n\t\t\t\tbreak;\n\t\t\tcase 'always-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\texpectAfter(messages.expectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tcase 'never-multi-line':\n\t\t\t\tif (isSingleLineString(lineCheckStr || source)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trejectAfter(messages.rejectedAfterMultiLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow configurationError(`Unknown expectation \"${expectation}\"`);\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction beforeAllowingIndentation(obj) {\n\t\tbefore({ ...obj, allowIndentation: true });\n\t}\n\n\tfunction expectBefore(messageFunc = messages.expectedBefore) {\n\t\tif (activeArgs.allowIndentation) {\n\t\t\texpectBeforeAllowingIndentation(messageFunc);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst _activeArgs = activeArgs;\n\t\tconst source = _activeArgs.source;\n\t\tconst index = _activeArgs.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\t\tconst twoCharsBefore = source[index - 2];\n\n\t\tif (isNullish(oneCharBefore)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharBefore === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsBefore) || !isWhitespace(twoCharsBefore))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction expectBeforeAllowingIndentation(messageFunc = messages.expectedBefore) {\n\t\tconst _activeArgs2 = activeArgs;\n\t\tconst source = _activeArgs2.source;\n\t\tconst index = _activeArgs2.index;\n\t\tconst err = _activeArgs2.err;\n\n\t\tconst expectedChar = targetWhitespace === 'newline' ? '\\n' : undefined;\n\t\tlet i = index - 1;\n\n\t\twhile (source[i] !== expectedChar) {\n\t\t\tif (source[i] === '\\t' || source[i] === ' ') {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tassertFunction(messageFunc);\n\t\t\terr(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction rejectBefore(messageFunc = messages.rejectedBefore) {\n\t\tconst _activeArgs3 = activeArgs;\n\t\tconst source = _activeArgs3.source;\n\t\tconst index = _activeArgs3.index;\n\n\t\tconst oneCharBefore = source[index - 1];\n\n\t\tif (!isNullish(oneCharBefore) && isWhitespace(oneCharBefore)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\t/**\n\t * @type {WhitespaceChecker}\n\t */\n\tfunction afterOneOnly(obj) {\n\t\tafter({ ...obj, onlyOneChar: true });\n\t}\n\n\tfunction expectAfter(messageFunc = messages.expectedAfter) {\n\t\tconst _activeArgs4 = activeArgs;\n\t\tconst source = _activeArgs4.source;\n\t\tconst index = _activeArgs4.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\t\tconst twoCharsAfter = source[index + 2];\n\t\tconst threeCharsAfter = source[index + 3];\n\n\t\tif (isNullish(oneCharAfter)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (targetWhitespace === 'newline') {\n\t\t\t// If index is followed by a Windows CR-LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\r' &&\n\t\t\t\ttwoCharsAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(threeCharsAfter) || !isWhitespace(threeCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If index is followed by a Unix LF ...\n\t\t\tif (\n\t\t\t\toneCharAfter === '\\n' &&\n\t\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttargetWhitespace === 'space' &&\n\t\t\toneCharAfter === ' ' &&\n\t\t\t(activeArgs.onlyOneChar || isNullish(twoCharsAfter) || !isWhitespace(twoCharsAfter))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tassertFunction(messageFunc);\n\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t}\n\n\tfunction rejectAfter(messageFunc = messages.rejectedAfter) {\n\t\tconst _activeArgs5 = activeArgs;\n\t\tconst source = _activeArgs5.source;\n\t\tconst index = _activeArgs5.index;\n\n\t\tconst oneCharAfter = source[index + 1];\n\n\t\tif (!isNullish(oneCharAfter) && isWhitespace(oneCharAfter)) {\n\t\t\tassertFunction(messageFunc);\n\t\t\tactiveArgs.err(messageFunc(activeArgs.errTarget || source.charAt(index)));\n\t\t}\n\t}\n\n\treturn {\n\t\tbefore,\n\t\tbeforeAllowingIndentation,\n\t\tafter,\n\t\tafterOneOnly,\n\t};\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeString = rawNodeString(atRule);\n\n\t\t\tchecker.before({\n\t\t\t\tsource: nodeString,\n\t\t\t\tindex: nodeString.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: nodeString.length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n/** @typedef {import('postcss').Node} NodeSource */\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Root}\n */\nmodule.exports.isRoot = function isRoot(node) {\n\treturn node.type === 'root';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Rule}\n */\nmodule.exports.isRule = function isRule(node) {\n\treturn node.type === 'rule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').AtRule}\n */\nmodule.exports.isAtRule = function isAtRule(node) {\n\treturn node.type === 'atrule';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Comment}\n */\nmodule.exports.isComment = function isComment(node) {\n\treturn node.type === 'comment';\n};\n\n/**\n * @param {Node} node\n * @returns {node is import('postcss').Declaration}\n */\nmodule.exports.isDeclaration = function isDeclaration(node) {\n\treturn node.type === 'decl';\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').FunctionNode}\n */\nmodule.exports.isValueFunction = function isValueFunction(node) {\n\treturn node.type === 'function';\n};\n\n/**\n * @param {Node} node\n * @returns {node is (Node & {source: NodeSource})}\n */\nmodule.exports.hasSource = function hasSource(node) {\n\treturn Boolean(node.source);\n};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function beforeBlockString(statement, { noRawBefore } = { noRawBefore: false }) {\n\tlet result = '';\n\n\tconst before = statement.raws.before || '';\n\n\tif (!noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (isRule(statement)) {\n\t\tresult += statement.selector;\n\t} else if (isAtRule(statement)) {\n\t\tresult += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;\n\t} else {\n\t\treturn '';\n\t}\n\n\tresult += statement.raws.between || '';\n\n\treturn result;\n};\n","'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\nconst hasBlock = require('./hasBlock');\nconst rawNodeString = require('./rawNodeString');\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`), returns an empty string.\n *\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nmodule.exports = function blockString(statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn '';\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n};\n","'use strict';\n\n/**\n * Check if a statement has an empty block.\n *\n * @param {import('postcss').Rule | import('postcss').AtRule} statement - postcss rule or at-rule node\n * @return {boolean} True if the statement has a block and it is empty\n */\nmodule.exports = function (statement) {\n\treturn (\n\t\tstatement.nodes !== undefined && statement.nodes.length === 0 // has block\n\t); // and is empty\n};\n","'use strict';\n\n/**\n * Check if a string contains at least one empty line\n *\n * @param {string | undefined} string\n * @returns {boolean}\n */\nmodule.exports = function (string) {\n\tif (string === '' || string === undefined) return false;\n\n\treturn /\\n[\\r\\t ]*\\n/.test(string);\n};\n","'use strict';\n\nconst addEmptyLineAfter = require('../../utils/addEmptyLineAfter');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesAfter = require('../../utils/removeEmptyLinesAfter');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before closing brace',\n\trejected: 'Unexpected empty line before closing brace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always-multi-line', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['after-closing-brace'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get whitespace after \"\"}\", ignoring extra semicolon\n\t\t\tconst before = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\t// Calculate index\n\t\t\tconst statementString = statement.toString();\n\t\t\tlet index = statementString.length - 1;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// Set expectation\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tconst childNodeTypes = statement.nodes.map((item) => item.type);\n\n\t\t\t\t// Reverse the primary options if `after-closing-brace` is set\n\t\t\t\tif (\n\t\t\t\t\toptionsMatches(secondaryOptions, 'except', 'after-closing-brace') &&\n\t\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\t\t!childNodeTypes.includes('decl')\n\t\t\t\t) {\n\t\t\t\t\treturn primary === 'never';\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always-multi-line' && !isSingleLineString(blockString(statement));\n\t\t\t})();\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst { newline } = context;\n\n\t\t\t\tif (typeof newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineAfter(statement, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesAfter(statement, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tnode: statement,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineAfter(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.after !== 'string') {\n\t\treturn node;\n\t}\n\n\tconst spaces = raws.after.split(';');\n\tconst after = spaces[spaces.length - 1] || '';\n\n\tif (!/\\r?\\n/.test(after)) {\n\t\traws.after += newline.repeat(2);\n\t} else {\n\t\traws.after = raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n\t}\n\n\treturn node;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Rule | import('postcss').AtRule} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesAfter(node, newline) {\n\tnode.raws.after = node.raws.after ? node.raws.after.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n * Get the next non-comment node in a PostCSS AST\n * at or after a given node.\n *\n * @param {PostcssNode | void} startNode\n * @returns {PostcssNode | null}\n */\nmodule.exports = function nextNonCommentNode(startNode) {\n\tif (!startNode || !startNode.next) return null;\n\n\tif (startNode.type === 'comment') {\n\t\treturn nextNonCommentNode(startNode.next());\n\t}\n\n\treturn startNode;\n};\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-semicolon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst nextNode = atRule.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tnodeToCheck.raws.before = context.newline + nodeToCheck.raws.before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\t\tindex: atRule.toString().length + 1,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'block-closing-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: 'Expected newline before \"}\"',\n\texpectedBeforeMultiLine: 'Expected newline before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore extra semicolon\n\t\t\tconst after = (statement.raws.after || '').replace(/;+/, '');\n\n\t\t\tif (after === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockIsMultiLine = !isSingleLineString(blockString(statement));\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\t// We're really just checking whether a\n\t\t\t// newline *starts* the block's final space -- between\n\t\t\t// the last declaration and the closing brace. We can\n\t\t\t// ignore any other whitespace between them, because that\n\t\t\t// will be checked by the indentation rule.\n\t\t\tif (!after.startsWith('\\n') && !after.startsWith('\\r\\n')) {\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tcomplain(messages.expectedBefore);\n\t\t\t\t} else if (blockIsMultiLine && primary === 'always-multi-line') {\n\t\t\t\t\tcomplain(messages.expectedBeforeMultiLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (after !== '' && blockIsMultiLine && primary === 'never-multi-line') {\n\t\t\t\tcomplain(messages.rejectedBeforeMultiLine);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t */\n\t\t\tfunction complain(message) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst firstWhitespaceIndex = statementRaws.after.search(/\\s/);\n\t\t\t\t\t\tconst newlineBefore =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0\n\t\t\t\t\t\t\t\t? statementRaws.after.slice(0, firstWhitespaceIndex)\n\t\t\t\t\t\t\t\t: statementRaws.after;\n\t\t\t\t\t\tconst newlineAfter =\n\t\t\t\t\t\t\tfirstWhitespaceIndex >= 0 ? statementRaws.after.slice(firstWhitespaceIndex) : '';\n\t\t\t\t\t\tconst newlineIndex = newlineAfter.search(/\\r?\\n/);\n\n\t\t\t\t\t\tstatementRaws.after =\n\t\t\t\t\t\t\tnewlineIndex >= 0\n\t\t\t\t\t\t\t\t? newlineBefore + newlineAfter.slice(newlineIndex)\n\t\t\t\t\t\t\t\t: newlineBefore + context.newline + newlineAfter;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s/g, '');\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-closing-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected newline after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected newline after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment x spaces after the brace\n\t\t\tconst nextNodeIsSingleLineComment =\n\t\t\t\tnextNode.type === 'comment' &&\n\t\t\t\t!/[^ ]/.test(nextNode.raws.before || '') &&\n\t\t\t\t!nextNode.toString().includes('\\n');\n\n\t\t\tconst nodeToCheck = nextNodeIsSingleLineComment ? nextNode.next() : nextNode;\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nodeToCheck);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\t// Only check one after, because there might be other\n\t\t\t// spaces handled by the indentation rule\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"}\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"}\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = blockString(statement);\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length - 1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.after !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, ' ');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.after = statementRaws.after.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \"{\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'rules', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'rules')) {\n\t\t\troot.walkRules(check);\n\t\t}\n\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst backupCommentNextBefores = new Map();\n\n\t\t\t/**\n\t\t\t * next node with checking newlines after comment\n\t\t\t *\n\t\t\t * @param {import('postcss').ChildNode | undefined} startNode\n\t\t\t * @returns {import('postcss').ChildNode | undefined}\n\t\t\t */\n\t\t\tfunction nextNode(startNode) {\n\t\t\t\tif (!startNode || !startNode.next) return;\n\n\t\t\t\tif (startNode.type === 'comment') {\n\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\tconst newLineMatch = reNewLine.test(startNode.raws.before || '');\n\n\t\t\t\t\tconst next = startNode.next();\n\n\t\t\t\t\tif (next && newLineMatch && !reNewLine.test(next.raws.before || '')) {\n\t\t\t\t\t\tbackupCommentNextBefores.set(next, next.raws.before);\n\t\t\t\t\t\tnext.raws.before = startNode.raws.before;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextNode(next);\n\t\t\t\t}\n\n\t\t\t\treturn startNode;\n\t\t\t}\n\n\t\t\t// Allow an end-of-line comment\n\t\t\tconst nodeToCheck = nextNode(statement.first);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst nodeToCheckRaws = nodeToCheck.raws;\n\n\t\t\t\t\t\tif (typeof nodeToCheckRaws.before !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheckRaws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheckRaws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheckRaws.before;\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.delete(nodeToCheck);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\t\t\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\t\t\t\t\tnode.raws.before = before;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbackupCommentNextBefores.clear();\n\n\t\t\t\t\t\t\t// Fix\n\t\t\t\t\t\t\tconst reNewLine = /\\r?\\n/;\n\t\t\t\t\t\t\tlet fixTarget = statement.first;\n\n\t\t\t\t\t\t\twhile (fixTarget) {\n\t\t\t\t\t\t\t\tconst fixTargetRaws = fixTarget.raws;\n\n\t\t\t\t\t\t\t\tif (typeof fixTargetRaws.before !== 'string') continue;\n\n\t\t\t\t\t\t\t\tif (reNewLine.test(fixTargetRaws.before || '')) {\n\t\t\t\t\t\t\t\t\tfixTargetRaws.before = fixTargetRaws.before.replace(/\\r?\\n/g, '');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (fixTarget.type !== 'comment') {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfixTarget = fixTarget.next();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnodeToCheckRaws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Restore the `before` of the node next to the comment node.\n\t\t\tfor (const [node, before] of backupCommentNextBefores.entries()) {\n\t\t\t\tnode.raws.before = before;\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"{\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"{\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['at-rules'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\n\t\tif (!optionsMatches(secondaryOptions, 'ignore', 'at-rules')) {\n\t\t\troot.walkAtRules(check);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: blockString(statement),\n\t\t\t\tindex: 0,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementFirst = statement.first;\n\n\t\t\t\t\t\tif (statementFirst == null) return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementFirst.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst statementRaws = statement.raws;\n\n\t\t\t\t\t\tif (typeof statementRaws.between !== 'string') return;\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst spaceIndex = statementRaws.between.search(/\\s+$/);\n\n\t\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\t\tstatement.raws.between =\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\t\tstatementRaws.between.slice(spaceIndex);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatementRaws.between += context.newline;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatementRaws.between = statementRaws.between.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"}\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"}\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"}\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"}\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"}\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"}\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-closing-brace-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tconst nextNode = statement.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet reportIndex = statement.toString().length;\n\t\t\tlet source = rawNodeString(nextNode);\n\n\t\t\t// Skip a semicolon at the beginning, if any\n\t\t\tif (source && source.startsWith(';')) {\n\t\t\t\tsource = source.slice(1);\n\t\t\t\treportIndex++;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource,\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (msg) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: reportIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-opening-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"{\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-opening-brace-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t'always',\n\t\t\t\t\t'never',\n\t\t\t\t\t'always-single-line',\n\t\t\t\t\t'never-single-line',\n\t\t\t\t\t'always-multi-line',\n\t\t\t\t\t'never-multi-line',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'atrule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreAtRules', statement.name)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if selector is to be ignored\n\t\t\tif (\n\t\t\t\tstatement.type === 'rule' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', statement.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.raws.between = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.between = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n","module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n","function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n","var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n","var parse = require(\"./parse\");\nvar walk = require(\"./walk\");\nvar stringify = require(\"./stringify\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = require(\"./unit\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n","'use strict';\n\n/**\n * Get the index of a declaration's value\n *\n * @param {import('postcss').Declaration} decl\n * @returns {number}\n */\nmodule.exports = function declarationValueIndex(decl) {\n\tconst raws = decl.raws;\n\n\treturn [\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.prefix,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t(raws.prop && raws.prop.raw) || decl.prop,\n\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\traws.prop && raws.prop.suffix,\n\t\traws.between || ':',\n\t\t// @ts-expect-error -- TS2339: Property 'prefix' does not exist on type '{ value: string; raw: string; }'.\n\t\traws.value && raws.value.prefix,\n\t].reduce((count, str) => {\n\t\tif (str) {\n\t\t\treturn count + str.length;\n\t\t}\n\n\t\treturn count;\n\t}, 0);\n};\n","'use strict';\n\n/**\n * @param {import('postcss').Declaration} decl\n * @returns {string}\n */\nmodule.exports = function getDeclarationValue(decl) {\n\tconst raws = decl.raws;\n\n\treturn (raws.value && raws.value.raw) || decl.value;\n};\n","'use strict';\n\n/**\n * Check whether a function is standard\n *\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nmodule.exports = function (node) {\n\t// Function nodes without names are things in parentheses like Sass lists\n\tif (!node.value) {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('#{')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxFunction = require('./isStandardSyntaxFunction');\n\n/**\n * Check whether a function is standard syntax color function\n *\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxColorFunction(node) {\n\tif (!isStandardSyntaxFunction(node)) return false;\n\n\t// scss can accept a #hex, or $var variables and we need to check all nested fn nodes\n\tfor (const fnNode of node.nodes) {\n\t\tif (fnNode.type === 'function') return isStandardSyntaxColorFunction(fnNode);\n\n\t\tif (fnNode.type === 'word' && (fnNode.value.startsWith('#') || fnNode.value.startsWith('$')))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/**\n * @param {Declaration} decl\n * @param {string} value\n * @returns {Declaration} The declaration that was passed in.\n */\nmodule.exports = function setDeclarationValue(decl, value) {\n\tconst raws = decl.raws;\n\n\tif (raws.value) {\n\t\traws.value.raw = value;\n\t} else {\n\t\tdecl.value = value;\n\t}\n\n\treturn decl;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxColorFunction = require('../../utils/isStandardSyntaxColorFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (primary) => `Expected ${primary} color-function notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-function-notation',\n};\n\nconst LEGACY_FUNCS = new Set(['rgba', 'hsla']);\nconst LEGACY_NOTATION_FUNCS = new Set(['rgb', 'rgba', 'hsl', 'hsla']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['modern', 'legacy'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (!isStandardSyntaxColorFunction(node)) return;\n\n\t\t\t\tconst { value, sourceIndex, sourceEndIndex, nodes } = node;\n\n\t\t\t\tif (!LEGACY_NOTATION_FUNCS.has(value.toLowerCase())) return;\n\n\t\t\t\tif (primary === 'modern' && !hasCommas(node)) return;\n\n\t\t\t\tif (primary === 'legacy' && hasCommas(node)) return;\n\n\t\t\t\tif (context.fix && primary === 'modern') {\n\t\t\t\t\tlet commaCount = 0;\n\n\t\t\t\t\t// Convert punctuation\n\t\t\t\t\tnode.nodes = nodes.map((childNode) => {\n\t\t\t\t\t\tif (isComma(childNode)) {\n\t\t\t\t\t\t\t// Non-alpha commas to space and alpha commas to slashes\n\t\t\t\t\t\t\tif (commaCount < 2) {\n\t\t\t\t\t\t\t\t// @ts-expect-error -- TS2322: Type '\"space\"' is not assignable to type '\"div\"'.\n\t\t\t\t\t\t\t\tchildNode.type = 'space';\n\t\t\t\t\t\t\t\tchildNode.value = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t\tcommaCount++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchildNode.value = '/';\n\t\t\t\t\t\t\t\tchildNode.before = atLeastOneSpace(childNode.before);\n\t\t\t\t\t\t\t\tchildNode.after = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove trailing 'a' from legacy function name\n\t\t\t\t\tif (LEGACY_FUNCS.has(node.value.toLowerCase())) {\n\t\t\t\t\t\tnode.value = node.value.slice(0, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + (sourceEndIndex - sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} whitespace\n */\nfunction atLeastOneSpace(whitespace) {\n\treturn whitespace !== '' ? whitespace : ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {node is import('postcss-value-parser').DivNode}\n */\nfunction isComma(node) {\n\treturn node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction hasCommas(node) {\n\treturn node.nodes && node.nodes.some((childNode) => isComma(childNode));\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-hex-alpha';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (hex) => `Expected alpha channel in \"${hex}\"`,\n\tunexpected: (hex) => `Unexpected alpha channel in \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-alpha',\n};\n\nconst HEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(decl.value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isUrlFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (primary === 'always' && hasAlphaChannel(value)) return;\n\n\t\t\t\tif (primary === 'never' && !hasAlphaChannel(value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: primary === 'never' ? messages.unexpected(value) : messages.expected(value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isUrlFunction({ type, value }) {\n\treturn type === 'function' && value === 'url';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\n/**\n * @param {string} hex\n */\nfunction hasAlphaChannel(hex) {\n\treturn hex.length === 5 || hex.length === 9;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Add an empty line before a node. Mutates the node.\n *\n * @template {import('postcss').ChildNode} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function addEmptyLineBefore(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.before !== 'string') {\n\t\treturn node;\n\t}\n\n\traws.before = !/\\r?\\n/.test(raws.before)\n\t\t? newline.repeat(2) + raws.before\n\t\t: raws.before.replace(/(\\r?\\n)/, `${newline}$1`);\n\n\treturn node;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node} node\n */\nfunction getNodeLine(node) {\n\treturn node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | undefined} node\n * @returns {Node | undefined}\n */\nmodule.exports = function getPreviousNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn previousNode;\n\t}\n\n\tif (getNodeLine(node) === getNodeLine(previousNode)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\tconst previousNode2 = previousNode.prev();\n\n\tif (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\treturn previousNode;\n};\n","'use strict';\n\n/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node | void} node\n */\nfunction getNodeLine(node) {\n\treturn node && node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | void} node\n * @returns {Node | void}\n */\nmodule.exports = function getNextNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/** @type {Node | void} */\n\tconst nextNode = node.next();\n\n\tif (!nextNode || nextNode.type !== 'comment') {\n\t\treturn nextNode;\n\t}\n\n\tif (\n\t\tgetNodeLine(node) === getNodeLine(nextNode) ||\n\t\tgetNodeLine(nextNode) === getNodeLine(nextNode.next())\n\t) {\n\t\treturn getNextNonSharedLineCommentNode(nextNode);\n\t}\n\n\treturn nextNode;\n};\n","'use strict';\n\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst { isRoot, isComment } = require('./typeGuards');\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\tconst aLine = a && a.source && a.source.end && a.source.end.line;\n\tconst bLine = b && b.source && b.source.start && b.source.start.line;\n\n\treturn aLine === bLine;\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nmodule.exports = function isSharedLineComment(node) {\n\tif (!isComment(node)) {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\t!isRoot(parentNode) &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function (node) {\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\treturn !isSharedLineComment(previousNode);\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst hasBlock = require('./hasBlock');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function (atRule) {\n\tif (atRule.type !== 'atrule') {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode === undefined) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(previousNode) && !hasBlock(previousNode) && !hasBlock(atRule);\n};\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('./isBlocklessAtRuleAfterBlocklessAtRule');\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nmodule.exports = function (atRule) {\n\tif (!isBlocklessAtRuleAfterBlocklessAtRule(atRule)) {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode && isAtRule(previousNode)) {\n\t\treturn previousNode.name === atRule.name;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst { isComment, hasSource } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} statement\n * @returns {boolean}\n */\nmodule.exports = function (statement) {\n\tconst parentNode = statement.parent;\n\n\tif (parentNode === undefined || parentNode.type === 'root') {\n\t\treturn false;\n\t}\n\n\tif (statement === parentNode.first) {\n\t\treturn true;\n\t}\n\n\t/*\n\t * Search for the statement in the parent's nodes, ignoring comment\n\t * nodes on the same line as the parent's opening brace.\n\t */\n\n\tconst parentNodes = parentNode.nodes;\n\n\tif (!parentNodes) {\n\t\treturn false;\n\t}\n\n\tconst firstNode = parentNodes[0];\n\n\tif (!firstNode) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!isComment(firstNode) ||\n\t\t(typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\\n'))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (!hasSource(firstNode) || !firstNode.source.start) {\n\t\treturn false;\n\t}\n\n\tconst openingBraceLine = firstNode.source.start.line;\n\n\tif (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, node] of parentNodes.entries()) {\n\t\tif (index === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === statement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t!isComment(node) ||\n\t\t\t(hasSource(node) && node.source.end && node.source.end.line !== openingBraceLine)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* istanbul ignore next: Should always return in the loop */\n\treturn false;\n};\n","'use strict';\n\nconst { isRoot } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nmodule.exports = function (node) {\n\tif (isRoot(node)) return false;\n\n\tconst parentNode = node.parent;\n\n\tif (!parentNode) {\n\t\treturn false;\n\t}\n\n\treturn isRoot(parentNode) && node === parentNode.first;\n};\n","'use strict';\n\n/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nmodule.exports = function removeEmptyLinesBefore(node, newline) {\n\tnode.raws.before = node.raws.before ? node.raws.before.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isBlocklessAtRuleAfterBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterBlocklessAtRule');\nconst isBlocklessAtRuleAfterSameNameBlocklessAtRule = require('../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before at-rule',\n\trejected: 'Unexpected empty line before at-rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-same-name',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t],\n\t\t\t\t\tignoreAtRules: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'always' | 'never'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst isNested = atRule.parent && atRule.parent.type !== 'root';\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\t// and following another blockless at-rule with the same name\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-same-name-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(atRule.raws.before);\n\t\t\tlet expectEmptyLineBefore = expectation === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-same-name') &&\n\t\t\t\t\tisAtRuleAfterSameNameAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-same-name-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix && context.newline) {\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(atRule, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(atRule, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: atRule, result, ruleName });\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').AtRule} atRule\n */\nfunction isAtRuleAfterSameNameAtRule(atRule) {\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\t// @ts-expect-error -- TS2339: Property 'name' does not exist on type 'Node'.\n\treturn previousNode && previousNode.type === 'atrule' && previousNode.name === atRule.name;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-case',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst expected = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expected) return;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expected;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(value, expected),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a string has less interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has less interpolation\n */\nmodule.exports = function (string) {\n\treturn /@\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has postcss-simple-vars interpolation\n *\n * @param {string} string\n */\nmodule.exports = function (string) {\n\treturn /\\$\\(.+?\\)/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has scss interpolation\n *\n * @param {string} string\n */\nmodule.exports = function (string) {\n\treturn /#\\{.+?\\}/.test(string);\n};\n","'use strict';\n\n/**\n * Check whether a string has JS template literal interpolation or HTML-like template\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has template literal interpolation\n */\nmodule.exports = function (string) {\n\treturn /\\{.+?\\}/.test(string);\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a string has interpolation\n *\n * @param {string} string\n * @return {boolean} If `true`, a string has interpolation\n */\nmodule.exports = function (string) {\n\t// SCSS or Less interpolation\n\tif (\n\t\thasLessInterpolation(string) ||\n\t\thasScssInterpolation(string) ||\n\t\thasTplInterpolation(string) ||\n\t\thasPsvInterpolation(string)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a value is standard\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function (value) {\n\tlet normalizedValue = value;\n\n\t// Ignore operators before variables (example -$variable)\n\tif (/^[-+*/]/.test(value.charAt(0))) {\n\t\tnormalizedValue = normalizedValue.slice(1);\n\t}\n\n\t// SCSS variable (example $variable)\n\tif (normalizedValue.startsWith('$')) {\n\t\treturn false;\n\t}\n\n\t// SCSS namespace (example namespace.$variable)\n\tif (/^.+\\.\\$/.test(value)) {\n\t\treturn false;\n\t}\n\n\t// Less variable\n\tif (normalizedValue.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(normalizedValue)) {\n\t\treturn false;\n\t}\n\n\t// WebExtension replacement keyword used by Chrome/Firefox\n\t// more information: https://developer.chrome.com/extensions/i18n\n\t// and https://github.com/stylelint/stylelint/issues/4707\n\tif (/__MSG_\\S+__/.test(value)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst propertySets = {};\n\npropertySets.acceptCustomIdents = new Set([\n\t'animation',\n\t'animation-name',\n\t'font',\n\t'font-family',\n\t'counter-increment',\n\t'grid-row',\n\t'grid-column',\n\t'grid-area',\n\t'list-style',\n\t'list-style-type',\n]);\n\nmodule.exports = propertySets;\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},u=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},a=function(r){return{h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),w:u(r.w,0,100),b:u(r.b,0,100),a:u(r.a)};var t},e=function(r){return{h:n(r.h),w:n(r.w),b:n(r.b),a:n(r.a,3)}},b=function(r){return{h:function(r){var t=r.r,n=r.g,u=r.b,a=r.a,e=Math.max(t,n,u),b=e-Math.min(t,n,u),o=b?e===t?(n-u)/b:e===n?2+(u-t)/b:4+(t-n)/b:0;return{h:60*(o<0?o+6:o),s:e?b/e*100:0,v:e/255*100,a:a}}(r).h,w:Math.min(r.r,r.g,r.b)/255*100,b:100-Math.max(r.r,r.g,r.b)/255*100,a:r.a}},o=function(r){return function(r){var t=r.h,n=r.s,u=r.v,a=r.a;t=t/360*6,n/=100,u/=100;var e=Math.floor(t),b=u*(1-n),o=u*(1-(t-e)*n),i=u*(1-(1-t+e)*n),h=e%6;return{r:255*[u,o,b,b,i,u][h],g:255*[i,u,u,o,b,b][h],b:255*[b,b,i,u,u,o][h],a:a}}({h:r.h,s:100===r.b?0:100-r.w/(100-r.b)*100,v:100-r.b,a:r.a})},i=function(r){var n=r.h,u=r.w,e=r.b,b=r.a,i=void 0===b?1:b;if(!t(n)||!t(u)||!t(e))return null;var h=a({h:Number(n),w:Number(u),b:Number(e),a:Number(i)});return o(h)},h=/^hwb\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,d=function(t){var n=h.exec(t);if(!n)return null;var u,e,b=a({h:(u=n[1],e=n[2],void 0===e&&(e=\"deg\"),Number(u)*(r[e]||1)),w:Number(n[3]),b:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return o(b)};export default function(r,t){r.prototype.toHwb=function(){return e(b(this.rgba))},r.prototype.toHwbString=function(){return r=e(b(this.rgba)),t=r.h,n=r.w,u=r.b,(a=r.a)<1?\"hwb(\"+t+\" \"+n+\"% \"+u+\"% / \"+a+\")\":\"hwb(\"+t+\" \"+n+\"% \"+u+\"%)\";var r,t,n,u,a},t.string.push([d,\"hwb\"]),t.object.push([i,\"hwb\"])}\n","var a=function(a){return\"string\"==typeof a?a.length>0:\"number\"==typeof a},t=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=Math.pow(10,t)),Math.round(o*a)/o+0},o=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=1),a>o?o:a>t?a:t},r=function(a){var t=a/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(a){return 255*(a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a)},n=96.422,p=100,M=82.521,u=function(a){var t,r,n={x:.9555766*(t=a).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return r={r:h(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:h(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:h(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:a.a},{r:o(r.r,0,255),g:o(r.g,0,255),b:o(r.b,0,255),a:o(r.a)}},e=function(a){var t=r(a.r),h=r(a.g),u=r(a.b);return function(a){return{x:o(a.x,0,n),y:o(a.y,0,p),z:o(a.z,0,M),a:o(a.a)}}(function(a){return{x:1.0478112*a.x+.0228866*a.y+-.050127*a.z,y:.0295424*a.x+.9904844*a.y+-.0170491*a.z,z:-.0092345*a.x+.0150436*a.y+.7521316*a.z,a:a.a}}({x:100*(.4124564*t+.3575761*h+.1804375*u),y:100*(.2126729*t+.7151522*h+.072175*u),z:100*(.0193339*t+.119192*h+.9503041*u),a:a.a}))},w=216/24389,b=24389/27,i=function(t){var r=t.l,h=t.a,n=t.b,p=t.alpha,M=void 0===p?1:p;if(!a(r)||!a(h)||!a(n))return null;var u=function(a){return{l:o(a.l,0,400),a:a.a,b:a.b,alpha:o(a.alpha)}}({l:Number(r),a:Number(h),b:Number(n),alpha:Number(M)});return l(u)},l=function(a){var t=(a.l+16)/116,o=a.a/500+t,r=t-a.b/200;return u({x:(Math.pow(o,3)>w?Math.pow(o,3):(116*o-16)/b)*n,y:(a.l>8?Math.pow((a.l+16)/116,3):a.l/b)*p,z:(Math.pow(r,3)>w?Math.pow(r,3):(116*r-16)/b)*M,a:a.alpha})};export default function(a,r){a.prototype.toLab=function(){return o=e(this.rgba),h=o.y/p,u=o.z/M,r=(r=o.x/n)>w?Math.cbrt(r):(b*r+16)/116,a={l:116*(h=h>w?Math.cbrt(h):(b*h+16)/116)-16,a:500*(r-h),b:200*(h-(u=u>w?Math.cbrt(u):(b*u+16)/116)),alpha:o.a},{l:t(a.l,2),a:t(a.a,2),b:t(a.b,2),alpha:t(a.alpha,3)};var a,o,r,h,u},a.prototype.delta=function(r){void 0===r&&(r=\"#FFF\");var h=r instanceof a?r:new a(r),n=function(a,t){var o=a.l,r=a.a,h=a.b,n=t.l,p=t.a,M=t.b,u=180/Math.PI,e=Math.PI/180,w=Math.pow(Math.pow(r,2)+Math.pow(h,2),.5),b=Math.pow(Math.pow(p,2)+Math.pow(M,2),.5),i=(o+n)/2,l=Math.pow((w+b)/2,7),c=.5*(1-Math.pow(l/(l+Math.pow(25,7)),.5)),f=r*(1+c),y=p*(1+c),v=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),x=Math.pow(Math.pow(y,2)+Math.pow(M,2),.5),z=(v+x)/2,s=0===f&&0===h?0:Math.atan2(h,f)*u,d=0===y&&0===M?0:Math.atan2(M,y)*u;s<0&&(s+=360),d<0&&(d+=360);var g=d-s,m=Math.abs(d-s);m>180&&d<=s?g+=360:m>180&&d>s&&(g-=360);var N=s+d;m<=180?N/=2:N=(s+d<360?N+360:N-360)/2;var F=1-.17*Math.cos(e*(N-30))+.24*Math.cos(2*e*N)+.32*Math.cos(e*(3*N+6))-.2*Math.cos(e*(4*N-63)),L=n-o,I=x-v,P=2*Math.sin(e*g/2)*Math.pow(v*x,.5),j=1+.015*Math.pow(i-50,2)/Math.pow(20+Math.pow(i-50,2),.5),k=1+.045*z,q=1+.015*z*F,A=30*Math.exp(-1*Math.pow((N-275)/25,2)),B=-2*Math.pow(l/(l+Math.pow(25,7)),.5)*Math.sin(2*e*A);return Math.pow(Math.pow(L/1/j,2)+Math.pow(I/1/k,2)+Math.pow(P/1/q,2)+B*I*P/(1*k*1*q),.5)}(this.toLab(),h.toLab())/100;return o(t(n,3))},r.object.push([i,\"lab\"])}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},a=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=Math.pow(10,t)),Math.round(a*r)/a+0},n=function(r,t,a){return void 0===t&&(t=0),void 0===a&&(a=1),r>a?a:r>t?r:t},u=function(r){var t=r/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(r){return 255*(r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r)},o=96.422,e=100,c=82.521,i=function(r){var t,a,u={x:.9555766*(t=r).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return a={r:h(.032404542*u.x-.015371385*u.y-.004985314*u.z),g:h(-.00969266*u.x+.018760108*u.y+41556e-8*u.z),b:h(556434e-9*u.x-.002040259*u.y+.010572252*u.z),a:r.a},{r:n(a.r,0,255),g:n(a.g,0,255),b:n(a.b,0,255),a:n(a.a)}},l=function(r){var t=u(r.r),a=u(r.g),h=u(r.b);return function(r){return{x:n(r.x,0,o),y:n(r.y,0,e),z:n(r.z,0,c),a:n(r.a)}}(function(r){return{x:1.0478112*r.x+.0228866*r.y+-.050127*r.z,y:.0295424*r.x+.9904844*r.y+-.0170491*r.z,z:-.0092345*r.x+.0150436*r.y+.7521316*r.z,a:r.a}}({x:100*(.4124564*t+.3575761*a+.1804375*h),y:100*(.2126729*t+.7151522*a+.072175*h),z:100*(.0193339*t+.119192*a+.9503041*h),a:r.a}))},f=216/24389,b=24389/27,d=function(r){return{l:n(r.l,0,100),c:r.c,h:(t=r.h,(t=isFinite(t)?t%360:0)>0?t:t+360),a:r.a};var t},p=function(r){return{l:a(r.l,2),c:a(r.c,2),h:a(r.h,2),a:a(r.a,3)}},v=function(r){var a=r.l,n=r.c,u=r.h,h=r.a,o=void 0===h?1:h;if(!t(a)||!t(n)||!t(u))return null;var e=d({l:Number(a),c:Number(n),h:Number(u),a:Number(o)});return M(e)},y=function(r){var t=function(r){var t=l(r),a=t.x/o,n=t.y/e,u=t.z/c;return a=a>f?Math.cbrt(a):(b*a+16)/116,{l:116*(n=n>f?Math.cbrt(n):(b*n+16)/116)-16,a:500*(a-n),b:200*(n-(u=u>f?Math.cbrt(u):(b*u+16)/116)),alpha:t.a}}(r),n=a(t.a,3),u=a(t.b,3),h=Math.atan2(u,n)/Math.PI*180;return{l:t.l,c:Math.sqrt(n*n+u*u),h:h<0?h+360:h,a:t.alpha}},M=function(r){return t={l:r.l,a:r.c*Math.cos(r.h*Math.PI/180),b:r.c*Math.sin(r.h*Math.PI/180),alpha:r.a},n=t.a/500+(a=(t.l+16)/116),u=a-t.b/200,i({x:(Math.pow(n,3)>f?Math.pow(n,3):(116*n-16)/b)*o,y:(t.l>8?Math.pow((t.l+16)/116,3):t.l/b)*e,z:(Math.pow(u,3)>f?Math.pow(u,3):(116*u-16)/b)*c,a:t.alpha});var t,a,n,u},x=/^lch\\(\\s*([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,s=function(t){var a=x.exec(t);if(!a)return null;var n,u,h=d({l:Number(a[1]),c:Number(a[2]),h:(n=a[3],u=a[4],void 0===u&&(u=\"deg\"),Number(n)*(r[u]||1)),a:void 0===a[5]?1:Number(a[5])/(a[6]?100:1)});return M(h)};export default function(r,t){r.prototype.toLch=function(){return p(y(this.rgba))},r.prototype.toLchString=function(){return r=p(y(this.rgba)),t=r.l,a=r.c,n=r.h,(u=r.a)<1?\"lch(\"+t+\"% \"+a+\" \"+n+\" / \"+u+\")\":\"lch(\"+t+\"% \"+a+\" \"+n+\")\";var r,t,a,n,u},t.string.push([s,\"lch\"]),t.object.push([v,\"lch\"])}\n","const { colord, extend } = require('colord');\nconst valueParser = require('postcss-value-parser');\n\nconst namesPlugin = require('colord/plugins/names');\nconst hwbPlugin = require('colord/plugins/hwb');\nconst labPlugin = require('colord/plugins/lab');\nconst lchPlugin = require('colord/plugins/lch');\n\nextend([\n\t// Type definitions are not compatible with commonjs.\n\t/** @type {any} */ (namesPlugin),\n\t/** @type {any} */ (hwbPlugin),\n\t/** @type {any} */ (labPlugin),\n\t/** @type {any} */ (lchPlugin),\n\n\t/* Syntaxes that is removed in Color Module Level 4 specification. */\n\n\t// hwb() with comma\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseHwbWithCommaString, /** @type {any} */ ('hwb-with-comma')]);\n\t},\n\t// gray()\n\t(_colordClass, parsers) => {\n\t\tparsers.string.push([parseGrayString, /** @type {any} */ ('gray')]);\n\t},\n]);\n\nmodule.exports = {\n\tcolord,\n};\n\n/**\n * Parses a valid hwb with comma CSS color function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()#syntax\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseHwbWithCommaString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('hwb(') || !input.endsWith(')') || input.includes('/')) {\n\t\treturn null;\n\t}\n\n\tconst [hue, whiteness = '', blackness = '', alpha, ...extraArgs] = input.slice(4, -1).split(',');\n\n\tif (!hue || !hue.trim() || !whiteness.trim() || !blackness.trim() || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\t// Change the delimiter and parse with colord.\n\tconst colordInstance = colord(\n\t\t`hwb(${hue} ${whiteness} ${blackness}${alpha ? ` / ${alpha}` : ''})`,\n\t);\n\n\tif (!colordInstance.isValid()) {\n\t\treturn null;\n\t}\n\n\treturn colordInstance.rgba;\n}\n\n/**\n * Parses a valid gray() CSS color function\n * @type {import('colord/types').ParseFunction<string>}\n */\nfunction parseGrayString(input) {\n\tinput = input.toLowerCase();\n\n\tif (!input.startsWith('gray(') || !input.endsWith(')')) {\n\t\treturn null;\n\t}\n\n\tconst [lightness, alpha, ...extraArgs] = input.slice(5, -1).split(',');\n\n\tif (!lightness || extraArgs.length > 0) {\n\t\treturn null;\n\t}\n\n\tconst lightnessWithUnit = valueParser.unit(lightness.trim());\n\n\tif (!lightnessWithUnit || !['', '%'].includes(lightnessWithUnit.unit)) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {import('colord/types').LabColor | import('colord/types').LabaColor}\n\t */\n\tlet colorObject = {\n\t\tl: Number(lightnessWithUnit.number),\n\t\ta: 0,\n\t\tb: 0,\n\t};\n\n\tif (alpha) {\n\t\tconst alphaWithUnit = valueParser.unit(alpha.trim());\n\n\t\tif (!alphaWithUnit || !['', '%'].includes(alphaWithUnit.unit)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tcolorObject = {\n\t\t\t...colorObject,\n\t\t\talpha: Number(alphaWithUnit.number) / (alphaWithUnit.unit ? 100 : 1),\n\t\t};\n\t}\n\n\treturn colord(colorObject).rgba;\n}\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst propertySets = require('../../reference/propertySets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { colord } = require('./colordUtils');\n\nconst ruleName = 'color-named';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (named, original) => `Expected \"${original}\" to be \"${named}\"`,\n\trejected: (named) => `Unexpected named color \"${named}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-named',\n};\n\n// Todo tested on case insensitivity\nconst NODE_TYPES = new Set(['word', 'function']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['never', 'always-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (propertySets.acceptCustomIdents.has(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if the property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tconst value = node.value;\n\t\t\t\tconst type = node.type;\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function') && type === 'function') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if neither a word nor a function\n\t\t\t\tif (!NODE_TYPES.has(type)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for named colors for \"never\" option\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'never' &&\n\t\t\t\t\ttype === 'word' &&\n\t\t\t\t\t/^[a-z]+$/iu.test(value) &&\n\t\t\t\t\tvalue.toLowerCase() !== 'transparent' &&\n\t\t\t\t\tcolord(value).isValid()\n\t\t\t\t) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(value),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\tvalue.length,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check \"always-where-possible\" option ...\n\t\t\t\tif (primary !== 'always-where-possible') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet rawColorString = null;\n\t\t\t\tlet colorString = null;\n\n\t\t\t\tif (type === 'function') {\n\t\t\t\t\trawColorString = valueParser.stringify(node);\n\n\t\t\t\t\t// First by checking for alternative color function representations ...\n\t\t\t\t\t// Remove all spaces to match what's in `representations`\n\t\t\t\t\tcolorString = rawColorString.replace(/\\s*([,/()])\\s*/g, '$1').replace(/\\s{2,}/g, ' ');\n\t\t\t\t} else if (type === 'word' && value.startsWith('#')) {\n\t\t\t\t\t// Then by checking for alternative hex representations\n\t\t\t\t\trawColorString = colorString = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst color = colord(colorString);\n\n\t\t\t\tif (!color.isValid()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst namedColor = color.toName();\n\n\t\t\t\tif (namedColor && namedColor.toLowerCase() !== 'transparent') {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.expected(namedColor, colorString),\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t\tdeclarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\t\trawColorString.length,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t */\n\t\tfunction complain(message, node, index, length) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxHexColor = require('../../utils/isStandardSyntaxHexColor');\nconst isValidHex = require('../../utils/isValidHex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected invalid hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-no-invalid-hex',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxHexColor(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(decl.value).walk(({ value, type, sourceIndex }) => {\n\t\t\t\tif (type === 'function' && value.endsWith('url')) return false;\n\n\t\t\t\tif (type !== 'word') return;\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n\n\t\t\t\tif (!hexMatch) return;\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\tif (!hexValue || isValidHex(hexValue)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + sourceIndex;\n\t\t\t\tconst endIndex = index + hexValue.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a hex color is standard\n *\n * @param {string} hex\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxHexColor(hex) {\n\t// Less map usage (e.g. .myclass { color: #colors[somecolor]; })\n\tif (hex.includes('[')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/**\n * Check if a value is a valid 3, 4, 6 or 8 digit hex\n *\n * @param {string} value\n * @returns {boolean}\n */\nmodule.exports = function (value) {\n\treturn /^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(value);\n};\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../utils/isStandardSyntaxAtRule');\nconst report = require('../utils/report');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void, errTarget: string }) => void,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule) => void) | null,\n * }} options\n */\nmodule.exports = function atRuleNameSpaceChecker(options) {\n\toptions.root.walkAtRules((atRule) => {\n\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckColon(\n\t\t\t`@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`,\n\t\t\tatRule.name.length,\n\t\t\tatRule,\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\toptions.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (m) => {\n\t\t\t\tif (options.fix) {\n\t\t\t\t\toptions.fix(node);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: m,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: options.result,\n\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t\terrTarget: `@${node.name}`,\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected newline after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Comment} comment\n * @returns {boolean}\n */\nmodule.exports = function isStandardSyntaxComment(comment) {\n\t// We check both here because the Sass parser uses `raws.inline` to indicate\n\t// inline comments, while the Less parser uses `inline`.\n\tif ('inline' in comment) return false;\n\n\tif ('inline' in comment.raws) return false;\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-whitespace-inside',\n};\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceBefore(comment) {\n\tif (comment.text.startsWith('*')) {\n\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t} else {\n\t\tcomment.raws.left = ' ';\n\t}\n}\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceAfter(comment) {\n\tif (comment.text[comment.text.length - 1] === '*') {\n\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t} else {\n\t\tcomment.raws.right = ' ';\n\t}\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n\n\t\t\tif (leftMatches == null || leftMatches[1] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n\n\t\t\tif (rightMatches == null || rightMatches[2] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftSpace = leftMatches[2] || '';\n\t\t\tconst rightSpace = rightMatches[1] || '';\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (primary === 'never' && leftSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'never' && rightSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!leftSpace) {\n\t\t\t\t\t\t\taddWhitespaceBefore(comment);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rightSpace) {\n\t\t\t\t\t\t\taddWhitespaceAfter(comment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// To ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// To ignore comments that are not empty\n\t\t\tif (comment.text && comment.text.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected comment to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\n\t\t\tif (normalizedPattern.test(text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a property is a custom one\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\treturn property.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a property is SCSS variable\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\t// SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))\n\tif (property.startsWith('$')) {\n\t\treturn true;\n\t}\n\n\t// SCSS var within a namespace (e.g. namespace.$var: x)\n\tif (property.includes('.$')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isScssVariable = require('./isScssVariable');\nconst { isRoot, isRule } = require('./typeGuards');\n\n/**\n * @param {string} [lang]\n */\nfunction isStandardSyntaxLang(lang) {\n\treturn lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\nmodule.exports = function (decl) {\n\tconst prop = decl.prop;\n\tconst parent = decl.parent;\n\n\t// Declarations belong in a declaration block or standard CSS source\n\tif (\n\t\tparent &&\n\t\tisRoot(parent) &&\n\t\tparent.source &&\n\t\t!isStandardSyntaxLang(\n\t\t\t/** @type {import('postcss').Source & {lang?: string}} */ (parent.source).lang,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// SCSS var; covers map and list declarations\n\tif (isScssVariable(prop)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\tif (prop[0] === '@' && prop[1] !== '{') {\n\t\treturn false;\n\t}\n\n\t// Less map declaration\n\tif (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {\n\t\treturn false;\n\t}\n\n\t// Less map (e.g. #my-map() { myprop: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector.startsWith('#') &&\n\t\tparent.selector.endsWith('()')\n\t) {\n\t\treturn false;\n\t}\n\n\t// Sass nested properties (e.g. border: { style: solid; color: red; })\n\tif (\n\t\tparent &&\n\t\tisRule(parent) &&\n\t\tparent.selector &&\n\t\tparent.selector[parent.selector.length - 1] === ':' &&\n\t\tparent.selector.substring(0, 2) !== '--'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Less &:extend\n\tif ('extend' in decl && decl.extend) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'custom-property-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before custom property',\n\trejected: 'Unexpected empty line before custom property',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-custom-property'],\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-single-line-block'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tparent != null &&\n\t\t\t\t(isAtRule(parent) || isRule(parent)) &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-custom-property') &&\n\t\t\t\t\tisAfterCustomProperty(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction isAfterCustomProperty(decl) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(decl);\n\n\treturn prevNode != null && isDeclaration(prevNode) && isCustomProperty(prevNode.prop);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {number}\n */\nmodule.exports = function (atRule) {\n\t// Initial 1 is for the `@`\n\tlet index = 1 + atRule.name.length;\n\n\tif (atRule.raws.afterName) {\n\t\tindex += atRule.raws.afterName.length;\n\t}\n\n\treturn index;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'custom-media-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected custom media query name to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-media-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() !== 'custom-media') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst match = atRule.params.match(/^--(\\S+)\\b/);\n\n\t\t\tif (match == null || match[0] == null) {\n\t\t\t\tthrow new Error(`Unexpected at-rule params: \"${atRule.params}\"`);\n\t\t\t}\n\n\t\t\tconst customMediaName = match[1];\n\n\t\t\tif (regexpPattern.test(customMediaName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(atRule);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: atRule,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + match[0].length,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-property-no-missing-var-function';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (customProperty) => `Unexpected missing var function for \"${customProperty}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-no-missing-var-function',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/** @type {Set<string>} */\n\t\tconst knownCustomProperties = new Set();\n\n\t\troot.walkAtRules(/^property$/i, (atRule) => {\n\t\t\tknownCustomProperties.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls(({ prop }) => {\n\t\t\tif (isCustomProperty(prop)) knownCustomProperties.add(prop);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isVarFunction(node)) return false;\n\n\t\t\t\tif (!isDashedIdent(node)) return;\n\n\t\t\t\tif (!knownCustomProperties.has(node.value)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isDashedIdent({ type, value }) {\n\treturn type === 'word' && value.startsWith('--');\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isVarFunction({ type, value }) {\n\treturn type === 'function' && value === 'var';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\nconst isScssVariable = require('./isScssVariable');\n\n/**\n * Check whether a property is standard\n *\n * @param {string} property\n * @returns {boolean}\n */\nmodule.exports = function (property) {\n\t// SCSS var\n\tif (isScssVariable(property)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x)\n\tif (property.startsWith('@')) {\n\t\treturn false;\n\t}\n\n\t// Less append property value with space (e.g. transform+_: scale(2))\n\tif (property.endsWith('+') || property.endsWith('+_')) {\n\t\treturn false;\n\t}\n\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(property)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isValueFunction } = require('../../utils/typeGuards');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst ruleName = 'custom-property-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected custom property name to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/custom-property-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\t/**\n\t\t * @param {string} property\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction check(property) {\n\t\t\treturn (\n\t\t\t\t!isStandardSyntaxProperty(property) ||\n\t\t\t\t!isCustomProperty(property) ||\n\t\t\t\tregexpPattern.test(property.slice(2))\n\t\t\t);\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!isValueFunction(node)) return;\n\n\t\t\t\tif (node.value.toLowerCase() !== 'var') return;\n\n\t\t\t\tconst { nodes } = node;\n\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tif (!firstNode || check(firstNode.value)) return;\n\n\t\t\t\tcomplain(declarationValueIndex(decl) + firstNode.sourceIndex, firstNode.value.length, decl);\n\t\t\t});\n\n\t\t\tif (check(prop)) return;\n\n\t\t\tcomplain(0, prop.length, decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","var SKIP = 'skip';\nvar CHECK = 'check';\nvar ONLY = 'only';\n\nmodule.exports = function (options, callback) {\n  var source = options.source;\n  var target = options.target;\n\n  var skipComments = (options.comments) ? options.comments === SKIP : true;\n  var skipStrings = (options.strings) ? options.strings === SKIP : true;\n  var skipFunctionNames = (options.functionNames) ? options.functionNames === SKIP : true;\n  var skipFunctionArguments = options.functionArguments === SKIP;\n  var skipParentheticals = options.parentheticals === SKIP;\n\n  var onceOptionUsed = false;\n  Object.keys(options).forEach(function(key) {\n    if (options[key] !== ONLY) return;\n    if (!onceOptionUsed) {\n      onceOptionUsed = true;\n    } else {\n      throw new Error('Only one syntax feature option can be the \"only\" one to check');\n    }\n  });\n\n  var onlyComments = options.comments === ONLY;\n  var onlyStrings = options.strings === ONLY;\n  var onlyFunctionNames = options.functionNames === ONLY;\n  var onlyFunctionArguments = options.functionArguments === ONLY;\n  var onlyParentheticals = options.parentheticals === ONLY;\n\n  var insideString = false;\n  var insideComment = false;\n  var insideSingleLineComment = false;\n  var insideParens = false;\n  var insideFunctionArguments = false;\n  var openingParenCount = 0;\n  var matchCount = 0;\n  var openingQuote;\n\n  var targetIsArray = Array.isArray(target);\n\n  // If the target is just a string, it is easy to check whether\n  // some index of the source matches it.\n  // If the target is an array of strings, though, we have to\n  // check whether some index of the source matches *any* of\n  // those target strings (stopping after the first match).\n  var getMatch = (function () {\n    if (!targetIsArray) {\n      return getMatchBase.bind(null, target);\n    }\n    return function(index) {\n      for (var ti = 0, tl = target.length; ti < tl; ti++) {\n        var checkResult = getMatchBase(target[ti], index);\n        if (checkResult) return checkResult;\n      }\n      return false;\n    }\n  })();\n\n  function getMatchBase(targetString, index) {\n    var targetStringLength = targetString.length;\n\n    // Target is a single character\n    if (targetStringLength === 1 && source[index] !== targetString) return false;\n\n    // Target is multiple characters\n    if (source.substr(index, targetStringLength) !== targetString) return false;\n\n    return {\n      insideParens: insideParens,\n      insideFunctionArguments: insideFunctionArguments,\n      insideComment: insideComment,\n      insideString: insideString,\n      startIndex: index,\n      endIndex: index + targetStringLength,\n      target: targetString,\n    };\n  }\n\n  for (var i = 0, l = source.length; i < l; i++) {\n    var currentChar = source[i];\n\n    // Register the beginning of a comment\n    if (\n      !insideString && !insideComment\n      && currentChar === \"/\"\n      && source[i - 1] !== \"\\\\\" // escaping\n    ) {\n      // standard comments\n      if (source[i + 1] === \"*\") {\n        insideComment = true;\n        continue;\n      }\n      // single-line comments\n      if (source[i + 1] === \"/\") {\n        insideComment = true;\n        insideSingleLineComment = true;\n        continue;\n      }\n    }\n\n    if (insideComment) {\n      // Register the end of a standard comment\n      if (\n        !insideSingleLineComment\n        && currentChar === \"*\"\n        && source[i - 1] !== \"\\\\\" // escaping\n        && source[i + 1] === \"/\"\n        && source[i - 1] !== \"/\" // don't end if it's /*/\n      ) {\n        insideComment = false;\n        continue;\n      }\n\n      // Register the end of a single-line comment\n      if (\n        insideSingleLineComment\n        && currentChar === \"\\n\"\n      ) {\n        insideComment = false;\n        insideSingleLineComment = false;\n      }\n\n      if (skipComments) continue;\n    }\n\n    // Register the beginning of a string\n    if (!insideComment && !insideString && (currentChar === \"\\\"\" || currentChar === \"'\")) {\n      if (source[i - 1] === \"\\\\\") continue; // escaping\n\n      openingQuote = currentChar;\n      insideString = true;\n\n      // For string-quotes rule\n      if (target === currentChar) handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideString) {\n      // Register the end of a string\n      if (currentChar === openingQuote) {\n        if (source[i - 1] === \"\\\\\") continue; // escaping\n        insideString = false;\n        continue;\n      }\n\n      if (skipStrings) continue;\n    }\n\n    // Register the beginning of parens/functions\n    if (!insideString && !insideComment && currentChar === \"(\") {\n      // Keep track of opening parentheticals so that we\n      // know when the outermost function (possibly\n      // containing nested functions) is closing\n      openingParenCount++;\n\n      insideParens = true;\n      // Only inside a function if there is a function name\n      // before the opening paren\n      if (/[a-zA-Z]/.test(source[i - 1])) {\n        insideFunctionArguments = true;\n      }\n\n      if (target === \"(\") handleMatch(getMatch(i));\n      continue;\n    }\n\n    if (insideParens) {\n      // Register the end of a function\n      if (currentChar === \")\") {\n        openingParenCount--;\n        // Do this here so the match is still technically inside a function\n        if (target === \")\") handleMatch(getMatch(i));\n        if (openingParenCount === 0) {\n          insideParens = false;\n          insideFunctionArguments = false;\n        }\n        continue;\n      }\n    }\n\n    var isFunctionName = /^[a-zA-Z]*\\(/.test(source.slice(i));\n    if (skipFunctionNames && isFunctionName) continue;\n    if (onlyFunctionNames && !isFunctionName) continue;\n\n    var match = getMatch(i);\n\n    if (!match) continue;\n    handleMatch(match);\n    if (options.once) return;\n  }\n\n  function handleMatch(match) {\n    if (onlyParentheticals && !insideParens) return;\n    if (skipParentheticals && insideParens) return;\n    if (onlyFunctionArguments && !insideFunctionArguments) return;\n    if (skipFunctionArguments && insideFunctionArguments) return;\n    if (onlyStrings && !insideString) return;\n    if (onlyComments && !insideComment) return;\n    matchCount++;\n    callback(match, matchCount);\n  }\n}\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/** @typedef {import('postcss').Declaration} Declaration */\n\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n *   fix: ((decl: Declaration, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function declarationBangSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst indexOffset = declarationValueIndex(decl);\n\t\tconst declString = decl.toString();\n\t\tconst valueString = decl.toString().slice(indexOffset);\n\n\t\tif (!valueString.includes('!')) {\n\t\t\treturn;\n\t\t}\n\n\t\tstyleSearch({ source: valueString, target: '!' }, (match) => {\n\t\t\tcheck(declString, match.startIndex + indexOffset, decl);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {Declaration} decl\n\t */\n\tfunction check(source, index, decl) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(decl, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"!\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-bang-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(value: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < declValue.length) {\n\t\t\t\t\t\t\ttarget = declValue;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= declValue.length;\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex + 1);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex + 1);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected hex color \"${hex}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-no-hex',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"!\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"!\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-bang-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\t/** @type {(val: string) => void} */\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < value.length) {\n\t\t\t\t\t\t\ttarget = value;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, val);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= value.length;\n\t\t\t\t\t\t\tsetFixed = (val) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = val;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex);\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + ' ' + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore.replace(/\\s*$/, '') + targetAfter);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isRoot, isAtRule, isRule } = require('./typeGuards');\n\n/** @typedef {import('postcss').Root} Root */\n/** @typedef {import('postcss').Root} Document */\n/** @typedef {import('postcss').Node} PostcssNode */\n/** @typedef {import('postcss').Container} PostcssContainerNode */\n/** @typedef {import('postcss').Declaration} Declaration */\n/** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */\n\n/**\n * @param {PostcssNode} node\n * @returns {node is PostcssContainerNode}\n */\nfunction isContainerNode(node) {\n\treturn isRule(node) || isAtRule(node) || isRoot(node);\n}\n\n/**\n * In order to accommodate nested blocks (postcss-nested),\n * we need to run a shallow loop (instead of eachDecl() or eachRule(),\n * which loop recursively) and allow each nested block to accumulate\n * its own list of properties -- so that a property in a nested rule\n * does not conflict with the same property in the parent rule\n * executes a provided function once for each declaration block.\n *\n * @param {Root | Document} root - root element of file.\n * @param {(eachDecl: EachDeclaration) => void} callback - Function to execute for each declaration block\n *\n * @returns {void}\n */\nmodule.exports = function eachDeclarationBlock(root, callback) {\n\t/**\n\t * @param {PostcssNode} statement\n\t *\n\t * @returns {void}\n\t */\n\tfunction each(statement) {\n\t\tif (!isContainerNode(statement)) return;\n\n\t\tif (statement.nodes && statement.nodes.length) {\n\t\t\t/** @type {Declaration[]} */\n\t\t\tconst decls = [];\n\n\t\t\tfor (const node of statement.nodes) {\n\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\tdecls.push(node);\n\t\t\t\t}\n\n\t\t\t\teach(node);\n\t\t\t}\n\n\t\t\tif (decls.length) {\n\t\t\t\tcallback(decls.forEach.bind(decls));\n\t\t\t}\n\t\t}\n\t}\n\n\teach(root);\n};\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-no-duplicate-custom-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-duplicate-custom-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst decls = new Set();\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isDuplicate = decls.has(prop);\n\n\t\t\t\tif (isDuplicate) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdecls.add(prop);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-duplicate-properties';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected duplicate \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-duplicate-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'consecutive-duplicates',\n\t\t\t\t\t\t'consecutive-duplicates-with-different-values',\n\t\t\t\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t\t\t\t],\n\t\t\t\t\tignoreProperties: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDuplicates = optionsMatches(secondaryOptions, 'ignore', 'consecutive-duplicates');\n\t\tconst ignoreDiffValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-different-values',\n\t\t);\n\t\tconst ignorePrefixlessSameValues = optionsMatches(\n\t\t\tsecondaryOptions,\n\t\t\t'ignore',\n\t\t\t'consecutive-duplicates-with-same-prefixless-values',\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {string[]} */\n\t\t\tconst decls = [];\n\t\t\t/** @type {string[]} */\n\t\t\tconst values = [];\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst value = decl.value;\n\n\t\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Return early if the property is to be ignored\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore the src property as commonly duplicated in at-fontface\n\t\t\t\tif (prop.toLowerCase() === 'src') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst indexDuplicate = decls.indexOf(prop.toLowerCase());\n\n\t\t\t\tif (indexDuplicate !== -1) {\n\t\t\t\t\tif (ignoreDiffValues || ignorePrefixlessSameValues) {\n\t\t\t\t\t\t// fails if duplicates are not consecutive\n\t\t\t\t\t\tif (indexDuplicate !== decls.length - 1) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst duplicateValue = values[indexDuplicate] || '';\n\n\t\t\t\t\t\tif (ignorePrefixlessSameValues) {\n\t\t\t\t\t\t\t// fails if values of consecutive, unprefixed duplicates are equal\n\t\t\t\t\t\t\tif (vendor.unprefixed(value) !== vendor.unprefixed(duplicateValue)) {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fails if values of consecutive duplicates are equal\n\t\t\t\t\t\tif (value === duplicateValue) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tword: prop,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ignoreDuplicates && indexDuplicate === decls.length - 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdecls.push(prop.toLowerCase());\n\t\t\t\tvalues.push(value.toLowerCase());\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @type {Record<string, string[]>} */\nmodule.exports = {\n\tmargin: ['margin-top', 'margin-bottom', 'margin-left', 'margin-right'],\n\tpadding: ['padding-top', 'padding-bottom', 'padding-left', 'padding-right'],\n\tbackground: [\n\t\t'background-image',\n\t\t'background-size',\n\t\t'background-position',\n\t\t'background-repeat',\n\t\t'background-origin',\n\t\t'background-clip',\n\t\t'background-attachment',\n\t\t'background-color',\n\t],\n\tfont: [\n\t\t'font-style',\n\t\t'font-variant',\n\t\t'font-weight',\n\t\t'font-stretch',\n\t\t'font-size',\n\t\t'font-family',\n\t\t'line-height',\n\t],\n\tborder: [\n\t\t'border-top-width',\n\t\t'border-bottom-width',\n\t\t'border-left-width',\n\t\t'border-right-width',\n\t\t'border-top-style',\n\t\t'border-bottom-style',\n\t\t'border-left-style',\n\t\t'border-right-style',\n\t\t'border-top-color',\n\t\t'border-bottom-color',\n\t\t'border-left-color',\n\t\t'border-right-color',\n\t],\n\t'border-top': ['border-top-width', 'border-top-style', 'border-top-color'],\n\t'border-bottom': ['border-bottom-width', 'border-bottom-style', 'border-bottom-color'],\n\t'border-left': ['border-left-width', 'border-left-style', 'border-left-color'],\n\t'border-right': ['border-right-width', 'border-right-style', 'border-right-color'],\n\t'border-width': [\n\t\t'border-top-width',\n\t\t'border-bottom-width',\n\t\t'border-left-width',\n\t\t'border-right-width',\n\t],\n\t'border-style': [\n\t\t'border-top-style',\n\t\t'border-bottom-style',\n\t\t'border-left-style',\n\t\t'border-right-style',\n\t],\n\t'border-color': [\n\t\t'border-top-color',\n\t\t'border-bottom-color',\n\t\t'border-left-color',\n\t\t'border-right-color',\n\t],\n\t'list-style': ['list-style-type', 'list-style-position', 'list-style-image'],\n\t'border-radius': [\n\t\t'border-top-right-radius',\n\t\t'border-top-left-radius',\n\t\t'border-bottom-right-radius',\n\t\t'border-bottom-left-radius',\n\t],\n\ttransition: [\n\t\t'transition-delay',\n\t\t'transition-duration',\n\t\t'transition-property',\n\t\t'transition-timing-function',\n\t],\n\tanimation: [\n\t\t'animation-name',\n\t\t'animation-duration',\n\t\t'animation-timing-function',\n\t\t'animation-delay',\n\t\t'animation-iteration-count',\n\t\t'animation-direction',\n\t\t'animation-fill-mode',\n\t\t'animation-play-state',\n\t],\n\t'border-block-end': [\n\t\t'border-block-end-width',\n\t\t'border-block-end-style',\n\t\t'border-block-end-color',\n\t],\n\t'border-block-start': [\n\t\t'border-block-start-width',\n\t\t'border-block-start-style',\n\t\t'border-block-start-color',\n\t],\n\t'border-image': [\n\t\t'border-image-source',\n\t\t'border-image-slice',\n\t\t'border-image-width',\n\t\t'border-image-outset',\n\t\t'border-image-repeat',\n\t],\n\t'border-inline-end': [\n\t\t'border-inline-end-width',\n\t\t'border-inline-end-style',\n\t\t'border-inline-end-color',\n\t],\n\t'border-inline-start': [\n\t\t'border-inline-start-width',\n\t\t'border-inline-start-style',\n\t\t'border-inline-start-color',\n\t],\n\t'column-rule': ['column-rule-width', 'column-rule-style', 'column-rule-color'],\n\tcolumns: ['column-width', 'column-count'],\n\tflex: ['flex-grow', 'flex-shrink', 'flex-basis'],\n\t'flex-flow': ['flex-direction', 'flex-wrap'],\n\tgrid: [\n\t\t'grid-template-rows',\n\t\t'grid-template-columns',\n\t\t'grid-template-areas',\n\t\t'grid-auto-rows',\n\t\t'grid-auto-columns',\n\t\t'grid-auto-flow',\n\t\t'grid-column-gap',\n\t\t'grid-row-gap',\n\t],\n\t'grid-area': ['grid-row-start', 'grid-column-start', 'grid-row-end', 'grid-column-end'],\n\t'grid-column': ['grid-column-start', 'grid-column-end'],\n\t'grid-gap': ['grid-row-gap', 'grid-column-gap'],\n\t'grid-row': ['grid-row-start', 'grid-row-end'],\n\t'grid-template': ['grid-template-columns', 'grid-template-rows', 'grid-template-areas'],\n\toutline: ['outline-color', 'outline-style', 'outline-width'],\n\t'text-decoration': ['text-decoration-color', 'text-decoration-style', 'text-decoration-line'],\n\t'text-emphasis': ['text-emphasis-style', 'text-emphasis-color'],\n\tmask: [\n\t\t'mask-image',\n\t\t'mask-mode',\n\t\t'mask-position',\n\t\t'mask-size',\n\t\t'mask-repeat',\n\t\t'mask-origin',\n\t\t'mask-clip',\n\t\t'mask-composite',\n\t],\n};\n","'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-shorthand-property-overrides',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Record<string, string>} */\n\t\t\tconst declarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop).toLowerCase();\n\n\t\t\t\tconst overrideables = shorthandData[unprefixedProp.toLowerCase()];\n\n\t\t\t\tif (!overrideables) {\n\t\t\t\t\tdeclarations[prop.toLowerCase()] = prop;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const longhandProp of overrideables) {\n\t\t\t\t\tif (!Object.prototype.hasOwnProperty.call(declarations, prefix + longhandProp)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.rejected(prop, declarations[prefix + longhandProp] || ''),\n\t\t\t\t\t\tword: prop,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../utils/arrayEqual');\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (props) => `Expected shorthand property \"${props}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-no-redundant-longhand-properties',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreShorthands: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst longhandProperties = Object.entries(shorthandData).reduce(\n\t\t\t(/** @type {Record<string, string[]>} */ longhandProps, [key, values]) => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreShorthands', key)) {\n\t\t\t\t\treturn longhandProps;\n\t\t\t\t}\n\n\t\t\t\tfor (const value of values) {\n\t\t\t\t\t(longhandProps[value] || (longhandProps[value] = [])).push(key);\n\t\t\t\t}\n\n\t\t\t\treturn longhandProps;\n\t\t\t},\n\t\t\t{},\n\t\t);\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\t/** @type {Record<string, string[]>} */\n\t\t\tconst longhandDeclarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop.toLowerCase();\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop);\n\n\t\t\t\tconst shorthandProperties = longhandProperties[unprefixedProp];\n\n\t\t\t\tif (!shorthandProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const shorthandProperty of shorthandProperties) {\n\t\t\t\t\tconst prefixedShorthandProperty = prefix + shorthandProperty;\n\t\t\t\t\tlet longhandDeclaration = longhandDeclarations[prefixedShorthandProperty];\n\n\t\t\t\t\tif (!longhandDeclaration) {\n\t\t\t\t\t\tlonghandDeclaration = longhandDeclarations[prefixedShorthandProperty] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tlonghandDeclaration.push(prop);\n\n\t\t\t\t\tconst prefixedShorthandData = (shorthandData[shorthandProperty] || []).map(\n\t\t\t\t\t\t(item) => prefix + item,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!arrayEqual(prefixedShorthandData.sort(), longhandDeclaration.sort())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.expected(prefixedShorthandProperty),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-single-line-max-declarations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst block = blockString(ruleNode);\n\n\t\t\tif (!isSingleLineString(block)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = ruleNode.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: block,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst nextNonCommentNode = require('../../utils/nextNonCommentNode');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \";\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \";\" in a multi-line declaration block',\n\trejectedAfterMultiLine: () => 'Unexpected newline after \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextNode = decl.next();\n\n\t\t\tif (!nextNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow end-of-line comment\n\t\t\tconst nodeToCheck = nextNonCommentNode(nextNode);\n\n\t\t\tif (!nodeToCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.afterOneOnly({\n\t\t\t\tsource: rawNodeString(nodeToCheck),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tconst index = nodeToCheck.raws.before.search(/\\r?\\n/);\n\n\t\t\t\t\t\t\tnodeToCheck.raws.before =\n\t\t\t\t\t\t\t\tindex >= 0\n\t\t\t\t\t\t\t\t\t? nodeToCheck.raws.before.slice(index)\n\t\t\t\t\t\t\t\t\t: context.newline + nodeToCheck.raws.before;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never-multi-line') {\n\t\t\t\t\t\t\tnodeToCheck.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \";\"',\n\trejectedAfter: () => 'Unexpected whitespace after \";\"',\n\texpectedAfterSingleLine: () =>\n\t\t'Expected single space after \";\" in a single-line declaration block',\n\trejectedAfterSingleLine: () =>\n\t\t'Unexpected whitespace after \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextDecl = decl.next();\n\n\t\t\tif (!nextDecl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: rawNodeString(nextDecl),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-trailing-semicolon';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a trailing semicolon',\n\trejected: 'Unexpected trailing semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-trailing-semicolon',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['single-declaration'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!atRule.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (atRule.parent === root) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (atRule !== atRule.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(atRule);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (decl.parent.type === 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl !== decl.parent.last) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheckLastNode(decl);\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkLastNode(node) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tconst hasSemicolon = node.parent.raws.semicolon;\n\t\t\tconst ignoreSingleDeclaration = optionsMatches(\n\t\t\t\tsecondaryOptions,\n\t\t\t\t'ignore',\n\t\t\t\t'single-declaration',\n\t\t\t);\n\n\t\t\tif (ignoreSingleDeclaration && node.parent.first === node) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet message;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tif (hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = true;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.raws.between = '';\n\t\t\t\t\t\tnode.parent.raws.after = ' ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.expected;\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tif (!hasSemicolon) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// auto-fix\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.parent.raws.semicolon = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmessage = messages.rejected;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected primary option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex: node.toString().trim().length - 1,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \";\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n\trejectedBeforeMultiLine: () =>\n\t\t'Unexpected whitespace before \";\" in a multi-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isString } = require('./validateTypes');\n\n/** @typedef {false | { match: string, pattern: string, substring: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @template {unknown} T\n * @param {string} input\n * @param {T | T[]} comparison\n * @returns {ReturnValue}\n */\nmodule.exports = function containsString(input, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstString(input, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstString(input, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * @param {string} value\n * @param {unknown} comparison\n * @returns {ReturnValue}\n */\nfunction testAgainstString(value, comparison) {\n\tif (!comparison) return false;\n\n\tif (!isString(comparison)) return false;\n\n\tif (comparison.startsWith('/') && comparison.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\tif (value.includes(comparison)) {\n\t\treturn { match: value, pattern: comparison, substring: comparison };\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nconst containsString = require('../../utils/containsString');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-word-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (pattern) => `Unexpected word matching pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-word-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap\n\t\t\tif (firstFourChars === '/*# ') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchesWord = matchesStringOrRegExp(text, primary) || containsString(text, primary);\n\n\t\t\tif (!matchesWord) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(matchesWord.pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tword: matchesWord.substring,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n\texpectedBeforeSingleLine: () =>\n\t\t'Expected single space before \";\" in a single-line declaration block',\n\trejectedBeforeSingleLine: () =>\n\t\t'Unexpected whitespace before \";\" in a single-line declaration block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-block-semicolon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule) throw new Error('A parent node must be present');\n\n\t\t\tif (!isAtRule(parentRule) && !isRule(parentRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.before({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = ' !important ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ' '));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary.startsWith('never')) {\n\t\t\t\t\t\t\tif (decl.raws.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetDeclarationValue(decl, value.replace(/\\s*$/, ''));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst report = require('../utils/report');\n\n/** @typedef {(args: { source: string, index: number, lineCheckStr: string, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((decl: import('postcss').Declaration, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function declarationColonSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the raw prop, and only the prop\n\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\topts.locationChecker({\n\t\t\t\tsource: propPlusColon,\n\t\t\t\tindex: i,\n\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\terr: (message) => {\n\t\t\t\t\tif (opts.fix && opts.fix(decl, i)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.prop.toString().length + 1,\n\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t});\n};\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \":\" with a single-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ': ');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex) + between.slice(colonIndex).replace(/^:\\s*/, ':');\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected single space after at-rule name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-name-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule) => {\n\t\t\t\t\t\tif (typeof atRule.raws.afterName === 'string') {\n\t\t\t\t\t\t\tatRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \":\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \":\" with a multi-line declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the raw prop, and only the prop\n\t\t\tconst endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || '').length - 1;\n\n\t\t\t// The extra characters tacked onto the end ensure that there is a character to check\n\t\t\t// after the colon. Otherwise, with `background:pink` the character after the\n\t\t\tconst propPlusColon = `${decl.toString().slice(0, endOfPropIndex)}xxx`;\n\n\t\t\tfor (let i = 0, l = propPlusColon.length; i < l; i++) {\n\t\t\t\tif (propPlusColon[i] !== ':') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst indexToCheck = /^[^\\S\\r\\n]*\\/\\*/.test(propPlusColon.slice(i + 1))\n\t\t\t\t\t? propPlusColon.indexOf('*/', i) + 1\n\t\t\t\t\t: i;\n\n\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\tsource: propPlusColon,\n\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\tlineCheckStr: decl.value,\n\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\t\tconst betweenStart = declarationValueIndex(decl) - between.length;\n\t\t\t\t\t\t\tconst sliceIndex = indexToCheck - betweenStart + 1;\n\t\t\t\t\t\t\tconst betweenBefore = between.slice(0, sliceIndex);\n\t\t\t\t\t\t\tconst betweenAfter = between.slice(sliceIndex);\n\n\t\t\t\t\t\t\tdecl.raws.between = /^\\s*\\n/.test(betweenAfter)\n\t\t\t\t\t\t\t\t? betweenBefore + betweenAfter.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t\t: betweenBefore + context.newline + betweenAfter;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tindex: indexToCheck,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'alpha-value-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/alpha-value-notation',\n};\n\nconst ALPHA_PROPS = new Set(['opacity', 'shape-image-threshold']);\nconst ALPHA_FUNCS = new Set(['hsl', 'hsla', 'hwb', 'lab', 'lch', 'rgb', 'rgba']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['number', 'percentage'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texceptProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tconst optionFuncs = Object.freeze({\n\t\t\tnumber: {\n\t\t\t\texpFunc: isNumber,\n\t\t\t\tfixFunc: asNumber,\n\t\t\t},\n\t\t\tpercentage: {\n\t\t\t\texpFunc: isPercentage,\n\t\t\t\tfixFunc: asPercentage,\n\t\t\t},\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\t/** @type {import('postcss-value-parser').Node | undefined} */\n\t\t\t\tlet alpha;\n\n\t\t\t\tif (ALPHA_PROPS.has(decl.prop.toLowerCase())) {\n\t\t\t\t\talpha = findAlphaInValue(node);\n\t\t\t\t} else {\n\t\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\t\tif (!ALPHA_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\t\talpha = findAlphaInFunction(node);\n\t\t\t\t}\n\n\t\t\t\tif (!alpha) return;\n\n\t\t\t\tconst { value } = alpha;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isNumber(value) && !isPercentage(value)) return;\n\n\t\t\t\t/** @type {'number' | 'percentage'} */\n\t\t\t\tlet expectation = primary;\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'exceptProperties', decl.prop)) {\n\t\t\t\t\tif (expectation === 'number') {\n\t\t\t\t\t\texpectation = 'percentage';\n\t\t\t\t\t} else if (expectation === 'percentage') {\n\t\t\t\t\t\texpectation = 'number';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (optionFuncs[expectation].expFunc(value)) return;\n\n\t\t\t\tconst fixed = optionFuncs[expectation].fixFunc(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\talpha.value = String(fixed);\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + alpha.sourceIndex;\n\t\t\t\tconst endIndex = index + alpha.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asPercentage(value) {\n\tconst number = Number(value);\n\n\treturn `${Number((number * 100).toPrecision(3))}%`;\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tassert(dimension);\n\n\tconst number = Number(dimension.number);\n\n\treturn Number((number / 100).toPrecision(3)).toString();\n}\n\n/**\n * @template {import('postcss-value-parser').Node} T\n * @param {T} node\n * @returns {T | undefined}\n */\nfunction findAlphaInValue(node) {\n\treturn node.type === 'word' || node.type === 'function' ? node : undefined;\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n * @returns {import('postcss-value-parser').Node | undefined}\n */\nfunction findAlphaInFunction(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\n\tif (args.length === 4) return args[3];\n\n\tconst slashNodeIndex = node.nodes.findIndex(({ type, value }) => type === 'div' && value === '/');\n\n\tif (slashNodeIndex !== -1) {\n\t\tconst nodesAfterSlash = node.nodes.slice(slashNodeIndex + 1, node.nodes.length);\n\n\t\treturn nodesAfterSlash.find(({ type }) => type === 'word');\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isPercentage(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '%';\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Returns a position of `!important` (or `! important` including whitespaces)\n * from the specified CSS source code. If not found, returns `undefined`.\n *\n * @param {string} source\n * @returns {{ index: number, endIndex: number } | undefined}\n */\nmodule.exports = function getImportantPosition(source) {\n\tconst pattern = /!\\s*important\\b/gi;\n\tconst match = pattern.exec(source);\n\n\tif (!match) return;\n\n\treturn { index: match.index, endIndex: pattern.lastIndex };\n};\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.important) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\tassert(pos);\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex: pos.index,\n\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\nconst isCustomProperty = require('./isCustomProperty');\nconst isStandardSyntaxDeclaration = require('./isStandardSyntaxDeclaration');\nconst { isDeclaration } = require('./typeGuards');\n\n/**\n * @param {import('postcss').Node} node\n */\nmodule.exports = function (node) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(node);\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tisDeclaration(prevNode) &&\n\t\tisStandardSyntaxDeclaration(prevNode) &&\n\t\t!isCustomProperty(prevNode.prop || '')\n\t);\n};\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst blockString = require('../../utils/blockString');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isAfterStandardPropertyDeclaration = require('../../utils/isAfterStandardPropertyDeclaration');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isRule, isRoot } = require('../../utils/typeGuards');\n\nconst ruleName = 'declaration-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before declaration',\n\trejected: 'Unexpected empty line before declaration',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested', 'after-comment', 'after-declaration'],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'after-declaration',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-single-line-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAtRule(parent) && !isRule(parent) && !isRoot(parent)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a comment precedes it\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if a declaration precedes it\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'after-declaration') &&\n\t\t\t\tisAfterStandardPropertyDeclaration(decl)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore nodes inside single-line blocks\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'inside-single-line-block') &&\n\t\t\t\tisSingleLineString(blockString(parent))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = primary === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-comment') && isAfterComment(decl)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-declaration') &&\n\t\t\t\t\tisAfterStandardPropertyDeclaration(decl))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Check for at least one empty line\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(decl.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (context.newline == null) return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(decl, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(decl, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({ message, node: decl, result, ruleName });\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-colon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (between == null) throw new Error('`between` must be present');\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst blurInterpolation = require('./blurInterpolation');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {import('postcss-value-parser').Node} node\n *\n * @returns {string | null}\n */\nmodule.exports = function (node) {\n\tif (!node || !node.value) {\n\t\treturn null;\n\t}\n\n\t// Ignore non-word nodes\n\tif (node.type !== 'word') {\n\t\treturn null;\n\t}\n\n\t// Ignore non standard syntax\n\tif (!isStandardSyntaxValue(node.value)) {\n\t\treturn null;\n\t}\n\n\t// Ignore HEX\n\tif (node.value.startsWith('#')) {\n\t\treturn null;\n\t}\n\n\t// Remove non standard stuff\n\tconst value = blurInterpolation(node.value, '')\n\t\t// ignore hack unit\n\t\t.replace('\\\\0', '')\n\t\t.replace('\\\\9', '');\n\n\tconst parsedUnit = valueParser.unit(value);\n\n\tif (!parsedUnit) {\n\t\treturn null;\n\t}\n\n\treturn parsedUnit.unit;\n};\n","'use strict';\n\n/**\n * @param {string} source\n *\n * @returns {string}\n */\nmodule.exports = function (source, blurChar = ' ') {\n\treturn source.replace(/[#@{}]+/g, blurChar);\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['inside-function'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tif (node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-function')) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(node);\n\n\t\t\t\tif (!unit || (unit && propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-value-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!optionsMatches(primary, propKey, value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst vendor = require('../../utils/vendor');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, assertNumber } = require('../../utils/validateTypes');\nconst validateObjectWithProps = require('../../utils/validateObjectWithProps');\n\nconst ruleName = 'declaration-property-max-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, max) =>\n\t\t`Expected \"${property}\" to have no more than ${max} ${max === 1 ? 'value' : 'values'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-max-values',\n};\n\n/**\n * @param {valueParser.Node} node\n */\nconst isValueNode = (node) => {\n\treturn node.type === 'word' || node.type === 'function' || node.type === 'string';\n};\n\n/** @type {import('stylelint').Rule<Record<string, number>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithProps(isNumber)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { prop, value } = decl;\n\t\t\tconst propLength = valueParser(value).nodes.filter(isValueNode).length;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max = primary[propKey];\n\n\t\t\tassertNumber(max);\n\n\t\t\tif (propLength <= max) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, max),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isPlainObject } = require('./validateTypes');\n\n/**\n * Check whether the variable is an object and all its properties agree with the provided validator.\n *\n * @example\n * config = {\n *   value1: 1,\n *   value2: 2,\n *   value3: 3,\n * };\n * validateObjectWithProps(isNumber)(config);\n * //=> true\n *\n * @param {(value: unknown) => boolean} validator\n * @returns {(value: unknown) => boolean}\n */\nmodule.exports = (validator) => (value) => {\n\tif (!isPlainObject(value)) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(value).every((item) => {\n\t\treturn validator(item);\n\t});\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst flattenArray = require('../../utils/flattenArray');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-unit-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | string[]>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst propList = flattenArray(primary[propKey]);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(node);\n\n\t\t\t\tif (!unit || (unit && !propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether it's a number or a number-like string:\n * i.e. when coerced to a number it == itself.\n *\n * @param {string | number} value\n */\nmodule.exports = function (value) {\n\t/* eslint-disable eqeqeq */\n\treturn value.toString().trim().length !== 0 && Number(value) == value;\n\t/* eslint-enable eqeqeq */\n};\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\nconst valueParser = require('postcss-value-parser');\n\n/**\n * Check if a word is a font-size value.\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function (word) {\n\tif (!word) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.fontSizeKeywords.has(word)) {\n\t\treturn true;\n\t}\n\n\tconst numberUnit = valueParser.unit(word);\n\n\tif (!numberUnit) {\n\t\treturn false;\n\t}\n\n\tconst unit = numberUnit.unit;\n\n\tif (unit === '%') {\n\t\treturn true;\n\t}\n\n\tif (keywordSets.lengthUnits.has(unit.toLowerCase())) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * Check whether a word is a variable i.e var(--custom-property).\n *\n * @param {string} word\n * @returns {boolean}\n */\nmodule.exports = function (word) {\n\treturn word.toLowerCase().startsWith('var(');\n};\n","'use strict';\n\nconst postcssValueParser = require('postcss-value-parser');\n\nconst isNumbery = require('./isNumbery');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isValidFontSize = require('./isValidFontSize');\nconst isVariable = require('./isVariable');\nconst { assert } = require('./validateTypes');\nconst keywordSets = require('../reference/keywordSets');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n\tfirstNode.value = firstNode.value + charactersBetween + secondNode.value;\n\n\treturn firstNode;\n}\n\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @returns {Node[]} Collection font-family nodes\n */\nmodule.exports = function findFontFamily(value) {\n\t/** @type {Node[]} */\n\tconst fontFamilies = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes: children } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tchildren.length === 1 &&\n\t\tchildren[0] &&\n\t\tkeywordSets.basicKeywords.has(children[0].value.toLowerCase())\n\t) {\n\t\treturn [children[0]];\n\t}\n\n\tlet needMergeNodesByValue = false;\n\t/** @type {string | null} */\n\tlet mergeCharacters = null;\n\n\tvalueNodes.walk((valueNode, index, nodes) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!nodeTypesToCheck.has(valueNode.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other font parts\n\t\tif (\n\t\t\tkeywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore font-sizes\n\t\tif (isValidFontSize(valueNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst prevPrevNode = nodes[index - 2];\n\n\t\t// Ignore anything come after a <font-size>/, because it's a line-height\n\t\tif (prevNode && prevNode.value === '/' && prevPrevNode && isValidFontSize(prevPrevNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore number values\n\t\tif (isNumbery(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\t\tif (\n\t\t\t(valueNode.type === 'space' || (valueNode.type === 'div' && valueNode.value !== ',')) &&\n\t\t\tfontFamilies.length !== 0\n\t\t) {\n\t\t\tneedMergeNodesByValue = true;\n\t\t\tmergeCharacters = valueNode.value;\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (valueNode.type === 'space' || valueNode.type === 'div') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontFamily = valueNode;\n\n\t\tif (needMergeNodesByValue) {\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\t\t\tjoinValueNodes(lastFontFamily, fontFamily, mergeCharacters);\n\t\t\tneedMergeNodesByValue = false;\n\t\t\tmergeCharacters = null;\n\t\t} else {\n\t\t\tfontFamilies.push(fontFamily);\n\t\t}\n\t});\n\n\treturn fontFamilies;\n};\n","export default {\n  cwd: () => \"/\",\n  env: {\n    NO_COLOR: \"true\",\n    FORCE_COLOR: \"false\"\n  },\n  argv: []\n};\n","let tty = require(\"tty\")\n\nlet isColorSupported =\n\t!(\"NO_COLOR\" in process.env || process.argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in process.env ||\n\t\tprocess.argv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(tty.isatty(1) && process.env.TERM !== \"dumb\") ||\n\t\t\"CI\" in process.env)\n\nlet formatter =\n\t(open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input\n\t\tlet index = string.indexOf(close, open.length)\n\t\treturn ~index\n\t\t\t? open + replaceClose(string, close, replace, index) + close\n\t\t\t: open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet start = string.substring(0, index) + replace\n\tlet end = string.substring(index + close.length)\n\tlet nextIndex = end.indexOf(close)\n\treturn ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end\n}\n\nlet createColors = (enabled = isColorSupported) => ({\n\tisColorSupported: enabled,\n\treset: enabled ? s => `\\x1b[0m${s}\\x1b[0m` : String,\n\tbold: enabled ? formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\") : String,\n\tdim: enabled ? formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\") : String,\n\titalic: enabled ? formatter(\"\\x1b[3m\", \"\\x1b[23m\") : String,\n\tunderline: enabled ? formatter(\"\\x1b[4m\", \"\\x1b[24m\") : String,\n\tinverse: enabled ? formatter(\"\\x1b[7m\", \"\\x1b[27m\") : String,\n\thidden: enabled ? formatter(\"\\x1b[8m\", \"\\x1b[28m\") : String,\n\tstrikethrough: enabled ? formatter(\"\\x1b[9m\", \"\\x1b[29m\") : String,\n\tblack: enabled ? formatter(\"\\x1b[30m\", \"\\x1b[39m\") : String,\n\tred: enabled ? formatter(\"\\x1b[31m\", \"\\x1b[39m\") : String,\n\tgreen: enabled ? formatter(\"\\x1b[32m\", \"\\x1b[39m\") : String,\n\tyellow: enabled ? formatter(\"\\x1b[33m\", \"\\x1b[39m\") : String,\n\tblue: enabled ? formatter(\"\\x1b[34m\", \"\\x1b[39m\") : String,\n\tmagenta: enabled ? formatter(\"\\x1b[35m\", \"\\x1b[39m\") : String,\n\tcyan: enabled ? formatter(\"\\x1b[36m\", \"\\x1b[39m\") : String,\n\twhite: enabled ? formatter(\"\\x1b[37m\", \"\\x1b[39m\") : String,\n\tgray: enabled ? formatter(\"\\x1b[90m\", \"\\x1b[39m\") : String,\n\tbgBlack: enabled ? formatter(\"\\x1b[40m\", \"\\x1b[49m\") : String,\n\tbgRed: enabled ? formatter(\"\\x1b[41m\", \"\\x1b[49m\") : String,\n\tbgGreen: enabled ? formatter(\"\\x1b[42m\", \"\\x1b[49m\") : String,\n\tbgYellow: enabled ? formatter(\"\\x1b[43m\", \"\\x1b[49m\") : String,\n\tbgBlue: enabled ? formatter(\"\\x1b[44m\", \"\\x1b[49m\") : String,\n\tbgMagenta: enabled ? formatter(\"\\x1b[45m\", \"\\x1b[49m\") : String,\n\tbgCyan: enabled ? formatter(\"\\x1b[46m\", \"\\x1b[49m\") : String,\n\tbgWhite: enabled ? formatter(\"\\x1b[47m\", \"\\x1b[49m\") : String,\n})\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n","'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput(dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': pico.cyan,\n  'at-word': pico.cyan,\n  'comment': pico.gray,\n  'string': pico.green,\n  'class': pico.yellow,\n  'hash': pico.magenta,\n  'call': pico.cyan,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n","'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n","'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","const noop = () => noop;\nnoop.default = noop.cosmiconfig = noop.catch = noop;\nexport default noop;\n\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            this.map.setSourceContent(\n              this.toUrl(this.path(from)),\n              node.source.input.css\n            )\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString()\n      } else {\n        throw new Error(\n          '`map.absolute` option is not available in this PostCSS build'\n        )\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n","'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n","'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n","'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n","'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n","'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.16'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n","'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing generic font family',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-no-missing-generic-family-keyword',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n * @returns {boolean}\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst isLastFontFamilyVariable = (value) => {\n\tconst lastValue = postcss.list.comma(value).pop();\n\n\treturn lastValue != null && (isVariable(lastValue) || !isStandardSyntaxValue(lastValue));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilies: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\t// Ignore @font-face\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl.prop === 'font' && keywordSets.systemFontValues.has(decl.value.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isLastFontFamilyVariable(decl.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some((node) => isFamilyNameKeyword(node))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tfontFamilies.some((node) =>\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFontFamilies', node.value),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastFontFamily = fontFamilies[fontFamilies.length - 1];\n\n\t\t\tassert(lastFontFamily);\n\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst index = valueIndex + lastFontFamily.sourceIndex;\n\t\t\tconst endIndex = valueIndex + lastFontFamily.sourceEndIndex;\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'font-family-no-duplicate-names';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected duplicate name ${name}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-no-duplicate-names',\n};\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nconst isFamilyNameKeyword = (node) =>\n\t!('quote' in node) && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilyNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst keywords = new Set();\n\t\t\tconst familyNames = new Set();\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilies) {\n\t\t\t\tconst family = fontFamilyNode.value.trim();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFontFamilyNames', family)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rawFamily =\n\t\t\t\t\t'quote' in fontFamilyNode ? fontFamilyNode.quote + family + fontFamilyNode.quote : family;\n\n\t\t\t\tif (isFamilyNameKeyword(fontFamilyNode)) {\n\t\t\t\t\tif (keywords.has(family.toLowerCase())) {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tkeywords.add(family);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (familyNames.has(family)) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\trawFamily.length,\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfamilyNames.add(family);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {number} index\n\t\t * @param {number} length\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, index, length, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex: index + length,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-calc-no-unspaced-operator';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\" operator`,\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\" operator`,\n\texpectedOperatorBeforeSign: (operator) => `Expected an operator before sign \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-calc-no-unspaced-operator',\n};\n\nconst OPERATORS = new Set(['+', '-']);\nconst OPERATOR_REGEX = /[+-]/;\nconst ALL_OPERATORS = new Set([...OPERATORS, '*', '/']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) return;\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction complain(message, node, index, operator) {\n\t\t\tconst endIndex = index + operator.length;\n\n\t\t\treport({ message, node, index, endIndex, result, ruleName });\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst valueIndex = declarationValueIndex(decl);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} operatorNode\n\t\t\t * @param {import('postcss-value-parser').Node} currentNode\n\t\t\t * @param {boolean} isBeforeOp\n\t\t\t */\n\t\t\tfunction checkAroundOperator(operatorNode, currentNode, isBeforeOp) {\n\t\t\t\tconst operator = operatorNode.value;\n\t\t\t\tconst operatorSourceIndex = operatorNode.sourceIndex;\n\n\t\t\t\tif (currentNode && !isSingleSpace(currentNode)) {\n\t\t\t\t\tif (currentNode.type === 'word') {\n\t\t\t\t\t\tif (isBeforeOp) {\n\t\t\t\t\t\t\tconst lastChar = currentNode.value.slice(-1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${currentNode.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\t\toperatorSourceIndex,\n\t\t\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst firstChar = currentNode.value.slice(0, 1);\n\n\t\t\t\t\t\t\tif (OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tcurrentNode.value = `${firstChar} ${currentNode.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcomplain(messages.expectedAfter(operator), decl, operatorSourceIndex, operator);\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tisBeforeOp ? messages.expectedBefore(operator) : messages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + operatorSourceIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'space') {\n\t\t\t\t\t\tconst indexOfFirstNewLine = currentNode.value.search(/(\\n|\\r\\n)/);\n\n\t\t\t\t\t\tif (indexOfFirstNewLine === 0) return;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value =\n\t\t\t\t\t\t\t\tindexOfFirstNewLine === -1 ? ' ' : currentNode.value.slice(indexOfFirstNewLine);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentNode.type === 'function') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\t\tcurrentNode.value = isBeforeOp ? `${currentNode.value} ` : ` ${currentNode.value}`;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst message = isBeforeOp\n\t\t\t\t\t\t\t? messages.expectedBefore(operator)\n\t\t\t\t\t\t\t: messages.expectedAfter(operator);\n\n\t\t\t\t\t\tcomplain(message, decl, valueIndex + operatorSourceIndex, operator);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInFirstNode(nodes) {\n\t\t\t\tconst firstNode = nodes[0];\n\n\t\t\t\tassert(firstNode);\n\n\t\t\t\tif (firstNode.type !== 'word') return false;\n\n\t\t\t\tif (!isStandardSyntaxValue(firstNode.value)) return false;\n\n\t\t\t\tconst operatorIndex = firstNode.value.search(OPERATOR_REGEX);\n\t\t\t\tconst operator = firstNode.value.slice(operatorIndex, operatorIndex + 1);\n\n\t\t\t\tif (operatorIndex <= 0) return false;\n\n\t\t\t\tconst charBefore = firstNode.value.charAt(operatorIndex - 1);\n\t\t\t\tconst charAfter = firstNode.value.charAt(operatorIndex + 1);\n\n\t\t\t\tif (charBefore && charBefore !== ' ' && charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex + 1, ' ');\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charBefore && charBefore !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedBefore(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (charAfter && charAfter !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneedsFix = true;\n\t\t\t\t\t\tfirstNode.value = insertCharAtIndex(firstNode.value, operatorIndex, ' ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expectedAfter(operator),\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\tvalueIndex + firstNode.sourceIndex + operatorIndex + 1,\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkForOperatorInLastNode(nodes) {\n\t\t\t\tif (nodes.length === 1) return false;\n\n\t\t\t\tconst lastNode = nodes[nodes.length - 1];\n\n\t\t\t\tassert(lastNode);\n\n\t\t\t\tif (lastNode.type !== 'word') return false;\n\n\t\t\t\tconst operatorIndex = lastNode.value.search(OPERATOR_REGEX);\n\n\t\t\t\tif (operatorIndex === -1) return false;\n\n\t\t\t\tif (lastNode.value.charAt(operatorIndex - 1) === ' ') return false;\n\n\t\t\t\t// E.g. \"10px * -2\" when the last node is \"-2\"\n\t\t\t\tif (\n\t\t\t\t\tisOperator(nodes[nodes.length - 3], ALL_OPERATORS) &&\n\t\t\t\t\tisSingleSpace(nodes[nodes.length - 2])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedsFix = true;\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex + 1, ' ').trim();\n\t\t\t\t\tlastNode.value = insertCharAtIndex(lastNode.value, operatorIndex, ' ').trim();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst operator = lastNode.value.charAt(operatorIndex);\n\n\t\t\t\tcomplain(\n\t\t\t\t\tmessages.expectedOperatorBeforeSign(operator),\n\t\t\t\t\tdecl,\n\t\t\t\t\tvalueIndex + lastNode.sourceIndex + operatorIndex,\n\t\t\t\t\toperator,\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node[]} nodes\n\t\t\t */\n\t\t\tfunction checkWords(nodes) {\n\t\t\t\tif (checkForOperatorInFirstNode(nodes) || checkForOperatorInLastNode(nodes)) return;\n\n\t\t\t\tfor (const [index, node] of nodes.entries()) {\n\t\t\t\t\tconst lastChar = node.value.slice(-1);\n\t\t\t\t\tconst firstChar = node.value.slice(0, 1);\n\n\t\t\t\t\tif (node.type === 'word') {\n\t\t\t\t\t\tif (index === 0 && OPERATORS.has(lastChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${node.value.slice(0, -1)} ${lastChar}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedBefore(lastChar), decl, node.sourceIndex, lastChar);\n\t\t\t\t\t\t} else if (index === nodes.length && OPERATORS.has(firstChar)) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tnode.value = `${firstChar} ${node.value.slice(1)}`;\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expectedOperatorBeforeSign(firstChar),\n\t\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t\t\tnode.sourceIndex,\n\t\t\t\t\t\t\t\tfirstChar,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || node.value.toLowerCase() !== 'calc') return;\n\n\t\t\t\tconst { nodes } = node;\n\t\t\t\tlet foundOperatorNode = false;\n\n\t\t\t\tfor (const [nodeIndex, currNode] of nodes.entries()) {\n\t\t\t\t\tif (!isOperator(currNode)) continue;\n\n\t\t\t\t\tfoundOperatorNode = true;\n\n\t\t\t\t\tconst nodeBefore = nodes[nodeIndex - 1];\n\t\t\t\t\tconst nodeAfter = nodes[nodeIndex + 1];\n\n\t\t\t\t\tif (isSingleSpace(nodeBefore) && isSingleSpace(nodeAfter)) continue;\n\n\t\t\t\t\tif (nodeAfter && checkAroundOperator(currNode, nodeAfter, false)) continue;\n\n\t\t\t\t\tnodeBefore && checkAroundOperator(currNode, nodeBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (!foundOperatorNode) {\n\t\t\t\t\tcheckWords(nodes);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} str\n * @param {number} index\n * @param {string} char\n */\nfunction insertCharAtIndex(str, index, char) {\n\treturn str.slice(0, index) + char + str.slice(index, str.length);\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @returns {node is import('postcss-value-parser').SpaceNode & { value: ' ' } }\n */\nfunction isSingleSpace(node) {\n\treturn node != null && node.type === 'space' && node.value === ' ';\n}\n\n/**\n * @param {import('postcss-value-parser').Node | undefined} node\n * @param {Set<string>} [operators]\n * @returns {node is import('postcss-value-parser').WordNode}\n */\nfunction isOperator(node, operators = OPERATORS) {\n\treturn node != null && node.type === 'word' && operators.has(node.value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterComment = require('../../utils/isAfterComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSharedLineComment = require('../../utils/isSharedLineComment');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'comment-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before comment',\n\trejected: 'Unexpected empty line before comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/comment-empty-line-before',\n};\n\nconst stylelintCommandPrefix = 'stylelint-';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['first-nested'],\n\t\t\t\t\tignore: ['stylelint-commands', 'after-comment'],\n\t\t\t\t\tignoreComments: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore stylelint commands\n\t\t\tif (\n\t\t\t\tcomment.text.startsWith(stylelintCommandPrefix) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'stylelint-commands')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore newlines between comments\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore comments matching the ignoreComments option.\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreComments', comment.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore shared-line comments\n\t\t\tif (isSharedLineComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore non-standard comments\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expectEmptyLineBefore = (() => {\n\t\t\t\tif (optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(comment)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn primary === 'always';\n\t\t\t})();\n\n\t\t\tconst before = comment.raws.before || '';\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tif (typeof context.newline !== 'string') return;\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(comment, context.newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(comment, context.newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isNumbery = require('../../utils/isNumbery');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'font-weight-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} font-weight notation`,\n\tinvalidNamed: (name) => `Unexpected invalid font-weight name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-weight-notation',\n};\n\nconst INHERIT_KEYWORD = 'inherit';\nconst INITIAL_KEYWORD = 'initial';\nconst NORMAL_KEYWORD = 'normal';\nconst WEIGHTS_WITH_KEYWORD_EQUIVALENTS = new Set(['400', '700']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['numeric', 'named-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['relative'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-weight)?$/i, (decl) => {\n\t\t\tconst prop = decl.prop.toLowerCase();\n\n\t\t\tif (prop === 'font-weight') {\n\t\t\t\tcheckWeight(decl, decl.value);\n\t\t\t} else if (prop === 'font') {\n\t\t\t\tcheckFont(decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFont(decl) {\n\t\t\tconst valueNodes = findFontWeights(decl.value);\n\n\t\t\t// We do not need to more carefully distinguish font-weight\n\t\t\t// numbers from unitless line-heights because line-heights in\n\t\t\t// `font` values need to be part of a font-size/line-height pair\n\t\t\tconst hasNumericFontWeight = valueNodes.some(({ value }) => isNumbery(value));\n\n\t\t\tfor (const valueNode of valueNodes) {\n\t\t\t\tconst value = valueNode.value;\n\t\t\t\tconst lowerValue = value.toLowerCase();\n\n\t\t\t\tif (\n\t\t\t\t\t(lowerValue === NORMAL_KEYWORD && !hasNumericFontWeight) ||\n\t\t\t\t\tisNumbery(value) ||\n\t\t\t\t\t(lowerValue !== NORMAL_KEYWORD && keywordSets.fontWeightKeywords.has(lowerValue))\n\t\t\t\t) {\n\t\t\t\t\tcheckWeight(decl, value, valueNode);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {string} weightValue\n\t\t * @param {import('postcss-value-parser').Node} [weightValueNode]\n\t\t */\n\t\tfunction checkWeight(decl, weightValue, weightValueNode) {\n\t\t\tif (!isStandardSyntaxValue(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (includesOnlyFunction(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lowerWeightValue = weightValue.toLowerCase();\n\n\t\t\tif (lowerWeightValue === INHERIT_KEYWORD || lowerWeightValue === INITIAL_KEYWORD) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'relative') &&\n\t\t\t\tkeywordSets.fontWeightRelativeKeywords.has(lowerWeightValue)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (primary === 'numeric') {\n\t\t\t\tconst parent = decl.parent;\n\n\t\t\t\tif (parent && isAtRule(parent) && parent.name.toLowerCase() === 'font-face') {\n\t\t\t\t\t// @font-face allows multiple values.\n\t\t\t\t\tfor (const valueNode of findFontWeights(weightValue)) {\n\t\t\t\t\t\tif (!isNumbery(valueNode.value)) {\n\t\t\t\t\t\t\treturn complain(messages.expected('numeric'), valueNode.value, valueNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isNumbery(weightValue)) {\n\t\t\t\t\treturn complain(messages.expected('numeric'), weightValue, weightValueNode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (primary === 'named-where-possible') {\n\t\t\t\tif (isNumbery(weightValue)) {\n\t\t\t\t\tif (WEIGHTS_WITH_KEYWORD_EQUIVALENTS.has(weightValue)) {\n\t\t\t\t\t\tcomplain(messages.expected('named'), weightValue, weightValueNode);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!keywordSets.fontWeightKeywords.has(lowerWeightValue) &&\n\t\t\t\t\tlowerWeightValue !== NORMAL_KEYWORD\n\t\t\t\t) {\n\t\t\t\t\treturn complain(messages.invalidNamed(weightValue), weightValue, weightValueNode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {string} value\n\t\t\t * @param {import('postcss-value-parser').Node | undefined} valueNode\n\t\t\t */\n\t\t\tfunction complain(message, value, valueNode) {\n\t\t\t\tconst index = declarationValueIndex(decl) + (valueNode ? valueNode.sourceIndex : 0);\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {import('postcss-value-parser').Node[]}\n */\nfunction findFontWeights(value) {\n\treturn valueParser(value).nodes.filter((node, index, nodes) => {\n\t\tif (node.type !== 'word') return false;\n\n\t\t// Exclude `<font-size>/<line-height>` format like `16px/3`.\n\t\tconst prevNode = nodes[index - 1];\n\t\tconst nextNode = nodes[index + 1];\n\n\t\tif (prevNode && prevNode.type === 'div') return false;\n\n\t\tif (nextNode && nextNode.type === 'div') return false;\n\n\t\treturn true;\n\t});\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction includesOnlyFunction(value) {\n\treturn valueParser(value).nodes.every(({ type }) => {\n\t\treturn type === 'function' || type === 'comment' || type === 'space';\n\t});\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {{\n *   div: import('postcss-value-parser').DivNode,\n *   index: number,\n *   nodes: import('postcss-value-parser').Node[],\n *   expectation: string,\n *   position: 'before' | 'after',\n *   symb: string,\n * }} params\n * @returns {boolean}\n */\nmodule.exports = function functionCommaSpaceFix(params) {\n\tconst { div, index, nodes, expectation, position, symb } = params;\n\n\tif (expectation.startsWith('always')) {\n\t\tdiv[position] = symb;\n\n\t\treturn true;\n\t}\n\n\tif (expectation.startsWith('never')) {\n\t\tdiv[position] = '';\n\n\t\tfor (let i = index + 1; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tif (node === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'comment') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (node.type === 'space') {\n\t\t\t\tnode.value = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../utils/declarationValueIndex');\nconst getDeclarationValue = require('../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../utils/isStandardSyntaxFunction');\nconst report = require('../utils/report');\nconst setDeclarationValue = require('../utils/setDeclarationValue');\nconst valueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} ValueParserNode */\n/** @typedef {import('postcss-value-parser').DivNode} ValueParserDivNode */\n/** @typedef {(args: { source: string, index: number, err: (message: string) => void }) => void} LocationChecker */\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: LocationChecker,\n *   fix: ((node: ValueParserDivNode, index: number, nodes: ValueParserNode[]) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function functionCommaSpaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tconst declValue = getDeclarationValue(decl);\n\n\t\tlet hasFixed;\n\t\tconst parsedValue = valueParser(declValue);\n\n\t\tparsedValue.walk((valueNode) => {\n\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore `url()` arguments, which may contain data URIs or other funky stuff\n\t\t\tif (valueNode.value.toLowerCase() === 'url') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst argumentStrings = valueNode.nodes.map((node) => valueParser.stringify(node));\n\n\t\t\tconst functionArguments = (() => {\n\t\t\t\t// Remove function name and parens\n\t\t\t\tlet result = valueNode.before + argumentStrings.join('') + valueNode.after;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tresult = result.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn result;\n\t\t\t})();\n\n\t\t\t/**\n\t\t\t * Gets the index of the comma for checking.\n\t\t\t * @param {ValueParserDivNode} commaNode The comma node\n\t\t\t * @param {number} nodeIndex The index of the comma node\n\t\t\t * @returns {number} The index of the comma for checking\n\t\t\t */\n\t\t\tconst getCommaCheckIndex = (commaNode, nodeIndex) => {\n\t\t\t\tlet commaBefore =\n\t\t\t\t\tvalueNode.before + argumentStrings.slice(0, nodeIndex).join('') + commaNode.before;\n\n\t\t\t\t// 1. Remove comments including preceding whitespace (when only succeeded by whitespace)\n\t\t\t\t// 2. Remove all other comments, but leave adjacent whitespace intact\n\t\t\t\t// eslint-disable-next-line regexp/no-dupe-disjunctions -- TODO: Possible to simplify the regex.\n\t\t\t\tcommaBefore = commaBefore.replace(/( *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, '');\n\n\t\t\t\treturn commaBefore.length;\n\t\t\t};\n\n\t\t\t/** @type {{ commaNode: ValueParserDivNode, checkIndex: number, nodeIndex: number }[]} */\n\t\t\tconst commaDataList = [];\n\n\t\t\tfor (const [nodeIndex, node] of valueNode.nodes.entries()) {\n\t\t\t\tif (node.type !== 'div' || node.value !== ',') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst checkIndex = getCommaCheckIndex(node, nodeIndex);\n\n\t\t\t\tcommaDataList.push({\n\t\t\t\t\tcommaNode: node,\n\t\t\t\t\tcheckIndex,\n\t\t\t\t\tnodeIndex,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const { commaNode, checkIndex, nodeIndex } of commaDataList) {\n\t\t\t\topts.locationChecker({\n\t\t\t\t\tsource: functionArguments,\n\t\t\t\t\tindex: checkIndex,\n\t\t\t\t\terr: (message) => {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + commaNode.sourceIndex + commaNode.before.length;\n\n\t\t\t\t\t\tif (opts.fix && opts.fix(commaNode, nodeIndex, valueNode.nodes)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tresult: opts.result,\n\t\t\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasFixed) {\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t}\n\t});\n};\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line function',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (family) => `Expected quotes around \"${family}\"`,\n\trejected: (family) => `Unexpected quotes around \"${family}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/font-family-name-quotes',\n};\n\n/**\n * @param {string} font\n * @returns {boolean}\n */\nfunction isSystemFontKeyword(font) {\n\tif (font.startsWith('-apple-')) {\n\t\treturn true;\n\t}\n\n\tif (font === 'BlinkMacSystemFont') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * \"To avoid mistakes in escaping, it is recommended to quote font family names\n * that contain white space, digits, or punctuation characters other than hyphens\"\n * (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRecommended(family) {\n\treturn !/^[-a-zA-Z]+$/.test(family);\n}\n\n/**\n * Quotes are required if the family is not a valid CSS identifier\n * (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\n *\n * @param {string} family\n * @returns {boolean}\n */\nfunction quotesRequired(family) {\n\treturn family\n\t\t.split(/\\s+/)\n\t\t.some((word) => /^(?:-?\\d|--)/.test(word) || !/^[-\\w\\u{00A0}-\\u{10FFFF}]+$/u.test(word));\n}\n\n/**\n * @typedef {{\n *   name: string,\n *   rawName: string,\n *   hasQuotes: boolean,\n *   sourceIndex: number,\n *   resetIndexes: (offset: number) => void,\n *   removeQuotes: () => void,\n *   addQuotes: () => void,\n * }} MutableNode\n */\n\n/**\n *\n * @param {import('postcss-value-parser').Node[]} fontFamilies\n * @param {import('postcss').Declaration} decl\n * @returns {MutableNode[]}\n */\nconst makeMutableFontFamilies = (fontFamilies, decl) => {\n\t/**\n\t * @type {MutableNode[]}\n\t */\n\tconst mutableNodes = [];\n\n\tfontFamilies.forEach((fontFamily, idx) => {\n\t\tconst quote = 'quote' in fontFamily && fontFamily.quote;\n\t\tconst name = fontFamily.value;\n\n\t\t/** @type {MutableNode} */\n\t\tconst newNode = {\n\t\t\tname,\n\t\t\trawName: quote ? `${quote}${name}${quote}` : name,\n\t\t\tsourceIndex: fontFamily.sourceIndex,\n\t\t\thasQuotes: Boolean(quote),\n\t\t\tresetIndexes(offset) {\n\t\t\t\tmutableNodes.slice(idx + 1).forEach((n) => (n.sourceIndex += offset));\n\t\t\t},\n\t\t\tremoveQuotes() {\n\t\t\t\tif (this.hasQuotes === false) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length + 2;\n\n\t\t\t\tthis.hasQuotes = false;\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + this.name + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(-2);\n\t\t\t},\n\t\t\taddQuotes() {\n\t\t\t\tif (this.hasQuotes === true) return;\n\n\t\t\t\tconst openIndex = this.sourceIndex;\n\t\t\t\tconst closeIndex = openIndex + this.name.length;\n\n\t\t\t\tthis.hasQuotes = true;\n\t\t\t\tconst fixedName = `\"${this.name}\"`;\n\n\t\t\t\tdecl.value = decl.value.slice(0, openIndex) + fixedName + decl.value.substring(closeIndex);\n\t\t\t\tthis.resetIndexes(2);\n\t\t\t},\n\t\t};\n\n\t\tmutableNodes.push(newNode);\n\t});\n\n\treturn mutableNodes;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondary, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tlet fontFamilyNodes = makeMutableFontFamilies(findFontFamily(decl.value), decl);\n\n\t\t\tif (fontFamilyNodes.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const fontFamilyNode of fontFamilyNodes) {\n\t\t\t\tcheckFamilyName(fontFamilyNode, decl);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {MutableNode} fontFamilyNode\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkFamilyName(fontFamilyNode, decl) {\n\t\t\tconst { name: family, rawName: rawFamily, hasQuotes } = fontFamilyNode;\n\n\t\t\tif (!isStandardSyntaxValue(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Disallow quotes around (case-insensitive) keywords\n\t\t\t// and system font keywords in all cases\n\t\t\tif (keywordSets.fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst required = quotesRequired(family);\n\t\t\tconst recommended = quotesRecommended(family);\n\n\t\t\tswitch (primary) {\n\t\t\t\tcase 'always-unless-keyword':\n\t\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-recommended':\n\t\t\t\t\tif (!recommended && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recommended && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-required':\n\t\t\t\t\tif (!required && hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.removeQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.rejected(family), rawFamily, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (required && !hasQuotes) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tfontFamilyNode.addQuotes();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn complain(messages.expected(family), rawFamily, decl);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {string} family\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction complain(message, family, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tword: family,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line function',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'after',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line function',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: context.newline || '',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) =>\n\t\t\t\t\t\tfixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation: primary,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t})\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/declaration-property-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propKey = Object.keys(primary).find((propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(primary, propKey, value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = declarationValueIndex(decl);\n\t\t\tconst endIndex = index + decl.value.length;\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-max-empty-lines',\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n */\nfunction placeIndexOnValueStart(decl) {\n\tif (decl.raws.between == null) throw new Error('`between` must be present');\n\n\treturn decl.prop.length + decl.raws.between.length - 1;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst stringValue = getDeclarationValue(decl);\n\t\t\t/** @type {Array<[string, string]>} */\n\t\t\tconst splittedValue = [];\n\t\t\tlet sourceIndexStart = 0;\n\n\t\t\tvalueParser(stringValue).walk((node) => {\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'function' /* ignore non functions */ ||\n\t\t\t\t\tnode.value.length === 0 /* ignore sass lists */\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stringifiedNode = valueParser.stringify(node);\n\n\t\t\t\tif (\n\t\t\t\t\t!violatedLFNewLinesRegex.test(stringifiedNode) &&\n\t\t\t\t\t!violatedCRLFNewLinesRegex.test(stringifiedNode)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst newNodeString = stringifiedNode\n\t\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\t\tsplittedValue.push([\n\t\t\t\t\t\tstringValue.slice(sourceIndexStart, node.sourceIndex),\n\t\t\t\t\t\tnewNodeString,\n\t\t\t\t\t]);\n\t\t\t\t\tsourceIndexStart = node.sourceIndex + stringifiedNode.length;\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: placeIndexOnValueStart(decl) + node.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (context.fix && splittedValue.length > 0) {\n\t\t\t\tconst updatedValue =\n\t\t\t\t\tsplittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') +\n\t\t\t\t\tstringValue.slice(sourceIndexStart);\n\n\t\t\t\tsetDeclarationValue(decl, updatedValue);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst fs = require('fs');\nconst valueParser = require('postcss-value-parser');\nconst functionsListPath = require('css-functions-list');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst isCustomFunction = require('../../utils/isCustomFunction');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected unknown function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst functionsList = JSON.parse(fs.readFileSync(functionsListPath.toString(), 'utf8'));\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\tconst name = node.value;\n\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isCustomFunction(name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (functionsList.includes(name.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: name,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a function is custom / user-defined\n * https://github.com/w3c/css-houdini-drafts/issues/1007\n * @param {string} func\n * @returns {boolean}\n */\nmodule.exports = function (func) {\n\treturn func.startsWith('--');\n};\n","'use strict'\nmodule.exports = balanced\nfunction balanced (a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str)\n  if (b instanceof RegExp) b = maybeMatch(b, str)\n\n  const r = range(a, b, str)\n\n  return (\n    r && {\n      start: r[0],\n      end: r[1],\n      pre: str.slice(0, r[0]),\n      body: str.slice(r[0] + a.length, r[1]),\n      post: str.slice(r[1] + b.length)\n    }\n  )\n}\n\nfunction maybeMatch (reg, str) {\n  const m = str.match(reg)\n  return m ? m[0] : null\n}\n\nbalanced.range = range\nfunction range (a, b, str) {\n  let begs, beg, left, right, result\n  let ai = str.indexOf(a)\n  let bi = str.indexOf(b, ai + 1)\n  let i = ai\n\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi]\n    }\n    begs = []\n    left = str.length\n\n    while (i >= 0 && !result) {\n      if (i === ai) {\n        begs.push(i)\n        ai = str.indexOf(a, i + 1)\n      } else if (begs.length === 1) {\n        result = [begs.pop(), bi]\n      } else {\n        beg = begs.pop()\n        if (beg < left) {\n          left = beg\n          right = bi\n        }\n\n        bi = str.indexOf(b, i + 1)\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi\n    }\n\n    if (begs.length) {\n      result = [left, right]\n    }\n  }\n\n  return result\n}\n","'use strict';\n\nconst balancedMatch = require('balanced-match');\nconst valueParser = require('postcss-value-parser');\n\nconst { assert, isString, isRegExp } = require('./validateTypes');\n\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string | RegExp} functionName\n * @param {(expression: string, expressionIndex: number) => void} callback\n * @returns {void}\n */\nmodule.exports = function functionArgumentsSearch(source, functionName, callback) {\n\tvalueParser(source).walk((node) => {\n\t\tif (node.type !== 'function') return;\n\n\t\tconst { value } = node;\n\n\t\tif (isString(functionName) && value !== functionName) return;\n\n\t\tif (isRegExp(functionName) && !functionName.test(node.value)) return;\n\n\t\tconst parensMatch = balancedMatch('(', ')', source.slice(node.sourceIndex));\n\n\t\tassert(parensMatch);\n\n\t\tconst expression = parensMatch.body;\n\t\tconst parenLength = 1; // == '('\n\t\tconst expressionIndex = node.sourceIndex + value.length + parenLength;\n\n\t\tcallback(expression, expressionIndex);\n\t});\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected nonstandard direction',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-linear-gradient-no-nonstandard-direction',\n};\n\n/**\n * @param {string} source\n * @param {boolean} withToPrefix\n */\nfunction isStandardDirection(source, withToPrefix) {\n\tconst regexp = withToPrefix\n\t\t? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/\n\t\t: /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n\n\tconst matches = source.match(regexp);\n\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\tif (matches.length === 2) {\n\t\treturn true;\n\t}\n\n\t// Cannot repeat side-or-corner, e.g. \"to top top\"\n\tif (matches.length === 3 && matches[1] !== matches[2]) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunctionArgumentsSearch(\n\t\t\t\t\tvalueParser.stringify(valueNode).toLowerCase(),\n\t\t\t\t\t/^(-webkit-|-moz-|-o-|-ms-)?linear-gradient$/i,\n\t\t\t\t\t(expression, expressionIndex) => {\n\t\t\t\t\t\tconst args = expression.split(',');\n\t\t\t\t\t\tconst firstArg = (args[0] || '').trim();\n\n\t\t\t\t\t\t// If the first arg is not standard, return early\n\t\t\t\t\t\tif (!isStandardSyntaxValue(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first character is a number, we can assume the user intends an angle\n\t\t\t\t\t\tif (/[\\d.]/.test(firstArg.charAt(0))) {\n\t\t\t\t\t\t\tif (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The first argument may not be a direction: it may be an angle,\n\t\t\t\t\t\t// or a color stop (in which case user gets default direction, \"to bottom\")\n\t\t\t\t\t\t// cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\t\t\t\t\t\tif (!/left|right|top|bottom/.test(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst withToPrefix = !vendor.prefix(valueNode.value);\n\n\t\t\t\t\t\tif (!isStandardDirection(firstArg, withToPrefix)) {\n\t\t\t\t\t\t\tcomplain();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfunction complain() {\n\t\t\t\t\t\t\tconst index = declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex;\n\t\t\t\t\t\t\tconst endIndex = index + (args[0] || '').trimEnd().length;\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(node.value), primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { URL } = require('url');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\nmodule.exports = function (urlString) {\n\tlet protocol = null;\n\n\ttry {\n\t\tprotocol = new URL(urlString).protocol;\n\t} catch {\n\t\treturn null;\n\t}\n\n\tif (protocol === null || typeof protocol === 'undefined') {\n\t\treturn null;\n\t}\n\n\tconst scheme = protocol.slice(0, -1); // strip trailing `:`\n\n\t// The URL spec does not require a scheme to be followed by `//`, but checking\n\t// for it allows this rule to differentiate <scheme>:<hostname> urls from\n\t// <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\tconst slashIndex = protocol.length;\n\tconst expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n\tconst isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n\tif (isSchemeLessUrl) {\n\t\treturn null;\n\t}\n\n\treturn scheme;\n};\n","'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\nmodule.exports = function (url) {\n\tif (url.length === 0) {\n\t\treturn true;\n\t}\n\n\t// Sass interpolation works anywhere\n\tif (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n\t\treturn false;\n\t}\n\n\t// Inside `'` and `\"` work only LESS interpolation\n\tif ((url.startsWith(`'`) && url.endsWith(`'`)) || (url.startsWith(`\"`) && url.endsWith(`\"`))) {\n\t\tif (hasLessInterpolation(url)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Less variable works only at the beginning\n\t// Check is less variable, allow use '@url/some/path'\n\t// https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\tif (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n\t\treturn false;\n\t}\n\n\t// In url without quotes scss variable can be everywhere\n\t// But in this case it is allowed to use only specific characters\n\t// Also forbidden \"/\" at the end of url\n\tif (url.includes('$') && /^[$\\s\\w+\\-,./*'\"]+$/.test(url) && !url.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-scheme-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-name-case',\n};\n\nconst mapLowercaseFunctionNamesToCamelCase = new Map();\n\nfor (const func of keywordSets.camelCaseFunctionNames) {\n\tmapLowercaseFunctionNamesToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needFix = false;\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tif (node.type !== 'function' || !isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionName = node.value;\n\t\t\t\tconst functionNameLowerCase = functionName.toLowerCase();\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', functionName)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet expectedFunctionName = null;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseFunctionNamesToCamelCase.has(functionNameLowerCase)\n\t\t\t\t) {\n\t\t\t\t\texpectedFunctionName = mapLowercaseFunctionNamesToCamelCase.get(functionNameLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedFunctionName = functionNameLowerCase;\n\t\t\t\t} else {\n\t\t\t\t\texpectedFunctionName = functionName.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (functionName === expectedFunctionName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedFunctionName;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(functionName, expectedFunctionName),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tsetDeclarationValue(decl, parsed.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-newline-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected newline after \"(\"',\n\texpectedClosing: 'Expected newline before \")\"',\n\texpectedOpeningMultiLine: 'Expected newline after \"(\" in a multi-line function',\n\trejectedOpeningMultiLine: 'Unexpected whitespace after \"(\" in a multi-line function',\n\texpectedClosingMultiLine: 'Expected newline before \")\" in a multi-line function',\n\trejectedClosingMultiLine: 'Unexpected whitespace before \")\" in a multi-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-parentheses-newline-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isMultiLine = !isSingleLineString(functionString);\n\t\t\t\tconst containsNewline = (/** @type {string} */ str) => str.includes('\\n');\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\t\t\t\tconst checkBefore = getCheckBefore(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkBefore)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkBefore !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixBeforeForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningMultiLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\t\t\t\tconst checkAfter = getCheckAfter(valueNode);\n\n\t\t\t\tif (primary === 'always' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'always-multi-line' && !containsNewline(checkAfter)) {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForAlways(valueNode, context.newline || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isMultiLine && primary === 'never-multi-line' && checkAfter !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tfixAfterForNever(valueNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingMultiLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-value-parser').FunctionNode} FunctionNode */\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckBefore(valueNode) {\n\tlet before = valueNode.before;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tbefore += node.value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\treturn before;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction getCheckAfter(valueNode) {\n\tlet after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tafter = node.value + after;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tafter += valueNode.after;\n\n\treturn after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixBeforeForAlways(valueNode, newline) {\n\tlet target;\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\ttarget = node;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tif (target) {\n\t\ttarget.value = newline + target.value;\n\t} else {\n\t\tvalueNode.before = newline + valueNode.before;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixBeforeForNever(valueNode) {\n\tvalueNode.before = '';\n\n\tfor (const node of valueNode.nodes) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\n/**\n * @param {FunctionNode} valueNode\n * @param {string} newline\n */\nfunction fixAfterForAlways(valueNode, newline) {\n\tvalueNode.after = newline + valueNode.after;\n}\n\n/**\n * @param {FunctionNode} valueNode\n */\nfunction fixAfterForNever(valueNode) {\n\tvalueNode.after = '';\n\n\tfor (const node of [...valueNode.nodes].reverse()) {\n\t\tif (node.type === 'comment') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node.type === 'space') {\n\t\t\tnode.value = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n\texpectedOpeningSingleLine: 'Expected single space after \"(\" in a single-line function',\n\trejectedOpeningSingleLine: 'Unexpected whitespace after \"(\" in a single-line function',\n\texpectedClosingSingleLine: 'Expected single space before \")\" in a single-line function',\n\trejectedClosingSingleLine: 'Unexpected whitespace before \")\" in a single-line function',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst declValue = getDeclarationValue(decl);\n\t\t\tconst parsedValue = valueParser(declValue);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(valueNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore function without parameters\n\t\t\t\tif (!valueNode.nodes.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst functionString = valueParser.stringify(valueNode);\n\t\t\t\tconst isSingleLine = isSingleLineString(functionString);\n\n\t\t\t\t// Check opening ...\n\n\t\t\t\tconst openingIndex = valueNode.sourceIndex + valueNode.value.length + 1;\n\n\t\t\t\tif (primary === 'always' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpening, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.before !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.before !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.before = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedOpeningSingleLine, openingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check closing ...\n\n\t\t\t\tconst closingIndex = valueNode.sourceIndex + functionString.length - 2;\n\n\t\t\t\tif (primary === 'always' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosing, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'always-single-line' && valueNode.after !== ' ') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.expectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isSingleLine && primary === 'never-single-line' && valueNode.after !== '') {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\tvalueNode.after = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomplain(messages.rejectedClosingSingleLine, closingIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} offset\n\t\t\t */\n\t\t\tfunction complain(message, offset) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-whitespace-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected whitespace after \")\"',\n\trejected: 'Unexpected whitespace after \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-whitespace-after',\n};\n\nconst ACCEPTABLE_AFTER_CLOSING_PAREN = new Set([')', ',', '}', ':', '/', undefined]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string} value\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction check(node, value, nodeIndex, fix) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: value,\n\t\t\t\t\ttarget: ')',\n\t\t\t\t\tfunctionArguments: 'only',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tcheckClosingParen(value, match.startIndex + 1, node, nodeIndex, fix);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {((index: number) => void) | undefined} fix\n\t\t */\n\t\tfunction checkClosingParen(source, index, node, nodeIndex, fix) {\n\t\t\tconst nextChar = source.charAt(index);\n\n\t\t\tif (!nextChar) return;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\t// Allow for the next character to be a single empty space,\n\t\t\t\t// another closing parenthesis, a comma, or the end of the value\n\t\t\t\tif (nextChar === ' ') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (nextChar === '\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (source.slice(index, index + 2) === '\\r\\n') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ACCEPTABLE_AFTER_CLOSING_PAREN.has(nextChar)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t} else if (primary === 'never' && isWhitespace(nextChar)) {\n\t\t\t\tif (fix) {\n\t\t\t\t\tfix(index);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: nodeIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} value\n\t\t */\n\t\tfunction createFixer(value) {\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\t\t\t/** @type {(index: number) => void} */\n\t\t\tlet applyFix;\n\n\t\t\tif (primary === 'always') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t\tfixed += value.slice(lastIndex, index) + ' ';\n\t\t\t\t\tlastIndex = index;\n\t\t\t\t};\n\t\t\t} else if (primary === 'never') {\n\t\t\t\tapplyFix = (index) => {\n\t\t\t\t\tlet whitespaceEndIndex = index + 1;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\twhitespaceEndIndex < value.length &&\n\t\t\t\t\t\tisWhitespace(value.charAt(whitespaceEndIndex))\n\t\t\t\t\t) {\n\t\t\t\t\t\twhitespaceEndIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tfixed += value.slice(lastIndex, index);\n\t\t\t\t\tlastIndex = whitespaceEndIndex;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected option: \"${primary}\"`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tapplyFix,\n\t\t\t\tget hasFixed() {\n\t\t\t\t\treturn Boolean(lastIndex);\n\t\t\t\t},\n\t\t\t\tget fixed() {\n\t\t\t\t\treturn fixed + value.slice(lastIndex);\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst param = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst fixer = context.fix && createFixer(param);\n\n\t\t\tcheck(atRule, param, atRuleParamIndex(atRule), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = fixer.fixed;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = fixer.fixed;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\t\t\tconst fixer = context.fix && createFixer(value);\n\n\t\t\tcheck(decl, value, declarationValueIndex(decl), fixer ? fixer.applyFix : undefined);\n\n\t\t\tif (fixer && fixer.hasFixed) {\n\t\t\t\tsetDeclarationValue(decl, fixer.fixed);\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-no-scheme-relative';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected scheme-relative url',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-no-scheme-relative',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst url = args.trim().replace(/^['\"]+|['\"]+$/g, '');\n\n\t\t\t\tif (!isStandardSyntaxUrl(url) || !url.startsWith('//')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst getSchemeFromUrl = require('../../utils/getSchemeFromUrl');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'function-url-scheme-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (scheme) => `Unexpected URL scheme \"${scheme}:\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-scheme-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tconst unspacedUrlString = args.trim();\n\n\t\t\t\tif (!isStandardSyntaxUrl(unspacedUrlString)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlString = unspacedUrlString.replace(/^['\"]+|['\"]+$/g, '');\n\t\t\t\tconst scheme = getSchemeFromUrl(urlString);\n\n\t\t\t\tif (scheme === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(scheme, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(scheme),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex: index + args.length,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getImportantPosition = require('../../utils/getImportantPosition');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframe-declaration-no-important';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected !important',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframe-declaration-no-important',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tatRuleKeyframes.walkDecls((decl) => {\n\t\t\t\tif (!decl.important) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst pos = getImportantPosition(decl.toString());\n\n\t\t\t\tassert(pos);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: pos.index,\n\t\t\t\t\tendIndex: pos.endIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (functionName) => `Expected quotes around \"${functionName}\" function argument`,\n\trejected: (functionName) => `Unexpected quotes around \"${functionName}\" function argument`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/function-url-quotes',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['empty'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(checkAtRuleParams);\n\t\troot.walkDecls(checkDeclParams);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkDeclParams(decl) {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, decl, index, 'url');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleParams(atRule) {\n\t\t\tconst atRuleParamsLowerCase = atRule.params.toLowerCase();\n\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} args\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {string} functionName\n\t\t */\n\t\tfunction checkArgs(args, node, index, functionName) {\n\t\t\tlet shouldHasQuotes = primary === 'always';\n\n\t\t\tconst leftTrimmedArgs = args.trimStart();\n\n\t\t\tif (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = index + args.length - leftTrimmedArgs.length;\n\t\t\tconst complaintEndIndex = index + args.length;\n\t\t\tconst hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n\n\t\t\tconst trimmedArg = args.trim();\n\t\t\tconst isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n\t\t\tif (optionsMatches(secondaryOptions, 'except', 'empty') && isEmptyArgument) {\n\t\t\t\tshouldHasQuotes = !shouldHasQuotes;\n\t\t\t}\n\n\t\t\tif (shouldHasQuotes) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.expected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t} else {\n\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.rejected(functionName), node, complaintIndex, complaintEndIndex);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {AtRule} atRule\n * @param {string} params\n * @returns {AtRule} The atRulearation that was passed in.\n */\nmodule.exports = function setAtRuleParams(atRule, params) {\n\tconst raws = atRule.raws;\n\n\tif (raws.params) {\n\t\traws.params.raw = params;\n\t} else {\n\t\tatRule.params = params;\n\t}\n\n\treturn atRule;\n};\n","'use strict';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {string}\n */\nmodule.exports = function getAtRuleParams(atRule) {\n\tconst raws = atRule.raws;\n\n\treturn (raws.params && raws.params.raw) || atRule.params;\n};\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst ruleName = 'import-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/import-notation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['string', 'url'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^import$/i, checkAtRuleImportParams);\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t */\n\t\tfunction checkAtRuleImportParams(atRule) {\n\t\t\tconst params = getAtRuleParams(atRule);\n\t\t\tconst parsed = valueParser(params);\n\n\t\t\tfor (const node of parsed.nodes) {\n\t\t\t\tconst start = atRuleParamIndex(atRule);\n\t\t\t\tconst end = start + node.sourceEndIndex;\n\n\t\t\t\tif (primary === 'string') {\n\t\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\t\tconst urlFunctionFull = valueParser.stringify(node);\n\t\t\t\t\t\tconst urlFunctionArguments = valueParser.stringify(node.nodes);\n\n\t\t\t\t\t\tconst quotedUrlFunctionFirstArgument =\n\t\t\t\t\t\t\tnode.nodes[0] && node.nodes[0].type === 'word'\n\t\t\t\t\t\t\t\t? `\"${urlFunctionArguments}\"`\n\t\t\t\t\t\t\t\t: urlFunctionArguments;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${quotedUrlFunctionFirstArgument}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expected(urlFunctionFull, quotedUrlFunctionFirstArgument),\n\t\t\t\t\t\t\tatRule,\n\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'url') {\n\t\t\t\t\tif (node.type === 'space') return;\n\n\t\t\t\t\tif (node.type === 'word' || node.type === 'string') {\n\t\t\t\t\t\tconst path = valueParser.stringify(node);\n\n\t\t\t\t\t\tconst urlFunctionFull = `url(${path})`;\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tconst restAtRuleParams = atRule.params.slice(node.sourceEndIndex);\n\n\t\t\t\t\t\t\tsetAtRuleParams(atRule, `${urlFunctionFull}${restAtRuleParams}`);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst quotedNodeValue =\n\t\t\t\t\t\t\tnode.type === 'word' ? `\"${node.value}\"` : `${node.quote}${node.value}${node.quote}`;\n\n\t\t\t\t\t\tcomplain(messages.expected(quotedNodeValue, urlFunctionFull), atRule, start, end);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t * @param {number} endIndex\n\t\t */\n\t\tfunction complain(message, node, index, endIndex) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst hasInterpolation = require('../utils/hasInterpolation');\n\n/**\n * Check whether a selector is standard\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\t// SCSS or Less interpolation\n\tif (hasInterpolation(selector)) {\n\t\treturn false;\n\t}\n\n\t// SCSS placeholder selectors\n\tif (selector.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// SCSS nested properties\n\tif (selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\t// Less :extend()\n\tif (/:extend(?:\\(.*?\\))?/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less mixin with resolved nested selectors (e.g. .foo().bar or .foo(@a, @b)[bar])\n\tif (/\\.[\\w-]+\\(.*\\).+/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Less non-outputting mixin definition (e.g. .mixin() {})\n\tif (selector.endsWith(')') && !selector.includes(':')) {\n\t\treturn false;\n\t}\n\n\t// Less Parametric mixins (e.g. .mixin(@variable: x) {})\n\tif (/\\(@.*\\)$/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// ERB template tags\n\tif (selector.includes('<%') || selector.includes('%>')) {\n\t\treturn false;\n\t}\n\n\t//  SCSS and Less comments\n\tif (selector.includes('//')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframe-block-no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected duplicate \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframe-block-no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, (atRuleKeyframes) => {\n\t\t\tconst selectors = new Set();\n\n\t\t\tatRuleKeyframes.walkRules((keyframeRule) => {\n\t\t\t\tconst ruleSelectors = keyframeRule.selectors;\n\n\t\t\t\truleSelectors.forEach((selector) => {\n\t\t\t\t\tif (!isStandardSyntaxSelector(selector)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst normalizedSelector = selector.toLowerCase();\n\n\t\t\t\t\tconst isDuplicate = selectors.has(normalizedSelector);\n\n\t\t\t\t\tif (isDuplicate) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\t\t\t\tnode: keyframeRule,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectors.add(normalizedSelector);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'keyframes-name-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (keyframeName, pattern) =>\n\t\t`Expected keyframe name \"${keyframeName}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/keyframes-name-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regex = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkAtRules(/keyframes/i, (keyframesNode) => {\n\t\t\tconst value = keyframesNode.params;\n\n\t\t\tif (regex.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = atRuleParamIndex(keyframesNode);\n\t\t\tconst endIndex = index + value.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\tnode: keyframesNode,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tlet emptyLines = 0;\n\tlet lastIndex = -1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst getChars = replaceEmptyLines.bind(null, primary);\n\n\t\t/**\n\t\t * 1. walk nodes & replace enterchar\n\t\t * 2. deal with special case.\n\t\t */\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif (node.type === 'comment' && !ignoreComments) {\n\t\t\t\t\tnode.raws.left = getChars(node.raws.left);\n\t\t\t\t\tnode.raws.right = getChars(node.raws.right);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = getChars(node.raws.before);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// first node\n\t\t\tconst firstNodeRawsBefore = root.first && root.first.raws.before;\n\t\t\t// root raws\n\t\t\tconst rootRawsAfter = root.raws.after;\n\n\t\t\t// not document node\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tif ((root.document && root.document.constructor.name) !== 'Document') {\n\t\t\t\tif (firstNodeRawsBefore) {\n\t\t\t\t\troot.first.raws.before = getChars(firstNodeRawsBefore, true);\n\t\t\t\t}\n\n\t\t\t\tif (rootRawsAfter) {\n\t\t\t\t\t// when max setted 0, should be treated as 1 in this situation.\n\t\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter, true);\n\t\t\t\t}\n\t\t\t} else if (rootRawsAfter) {\n\t\t\t\t// `css in js` or `html`\n\t\t\t\troot.raws.after = replaceEmptyLines(primary === 0 ? 1 : primary, rootRawsAfter);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\temptyLines = 0;\n\t\tlastIndex = -1;\n\t\tconst rootString = root.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: rootString,\n\t\t\t\ttarget: /\\r\\n/.test(rootString) ? '\\r\\n' : '\\n',\n\t\t\t\tcomments: ignoreComments ? 'skip' : 'check',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckMatch(rootString, match.startIndex, match.endIndex, root);\n\t\t\t},\n\t\t);\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} matchStartIndex\n\t\t * @param {number} matchEndIndex\n\t\t * @param {import('postcss').Root} node\n\t\t */\n\t\tfunction checkMatch(source, matchStartIndex, matchEndIndex, node) {\n\t\t\tconst eof = matchEndIndex === source.length;\n\t\t\tlet problem = false;\n\n\t\t\t// Additional check for beginning of file\n\t\t\tif (!matchStartIndex || lastIndex === matchStartIndex) {\n\t\t\t\temptyLines++;\n\t\t\t} else {\n\t\t\t\temptyLines = 0;\n\t\t\t}\n\n\t\t\tlastIndex = matchEndIndex;\n\n\t\t\tif (emptyLines > primary) problem = true;\n\n\t\t\tif (!eof && !problem) return;\n\n\t\t\tif (problem) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: matchStartIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Additional check for end of file\n\t\t\tif (eof && primary) {\n\t\t\t\temptyLines++;\n\n\t\t\t\tif (emptyLines > primary && isEofNode(result.root, node)) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: matchEndIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} maxLines\n\t\t * @param {unknown} str\n\t\t * @param {boolean?} isSpecialCase\n\t\t */\n\t\tfunction replaceEmptyLines(maxLines, str, isSpecialCase = false) {\n\t\t\tconst repeatTimes = isSpecialCase ? maxLines : maxLines + 1;\n\n\t\t\tif (repeatTimes === 0 || typeof str !== 'string') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst emptyLFLines = '\\n'.repeat(repeatTimes);\n\t\t\tconst emptyCRLFLines = '\\r\\n'.repeat(repeatTimes);\n\n\t\t\treturn /(?:\\r\\n)+/.test(str)\n\t\t\t\t? str.replace(/(\\r\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length / 2 > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyCRLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  })\n\t\t\t\t: str.replace(/(\\n)+/g, ($1) => {\n\t\t\t\t\t\tif ($1.length > repeatTimes) {\n\t\t\t\t\t\t\treturn emptyLFLines;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $1;\n\t\t\t\t  });\n\t\t}\n\t};\n};\n\n/**\n * Checks whether the given node is the last node of file.\n * @param {import('stylelint').PostcssResult['root']} document - the document node with `postcss-html` and `postcss-jsx`.\n * @param {import('postcss').Root} root - the root node of css\n */\nfunction isEofNode(document, root) {\n\tif (!document || document.constructor.name !== 'Document' || !('type' in document)) {\n\t\treturn true;\n\t}\n\n\t// In the `postcss-html` and `postcss-jsx` syntax, checks that there is text after the given node.\n\tlet after;\n\n\tif (root === document.last) {\n\t\tafter = document.raws && document.raws.codeAfter;\n\t} else {\n\t\t// @ts-expect-error -- TS2345: Argument of type 'Root' is not assignable to parameter of type 'number | ChildNode'.\n\t\tconst rootIndex = document.index(root);\n\n\t\tconst nextNode = document.nodes[rootIndex + 1];\n\n\t\tafter = nextNode && nextNode.raws && nextNode.raws.codeBefore;\n\t}\n\n\treturn !String(after).trim();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function (rule) {\n\tif (rule.type !== 'rule') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less &:extend rule\n\tif ('extend' in rule && rule.extend) {\n\t\treturn false;\n\t}\n\n\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc;\n\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = getProp;\n\nfunction getProp(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      return undefined;\n    }\n\n    obj = obj[prop];\n  }\n\n  return obj;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = ensureObject;\n\nfunction ensureObject(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  while (props.length > 0) {\n    var prop = props.shift();\n\n    if (!obj[prop]) {\n      obj[prop] = {};\n    }\n\n    obj = obj[prop];\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = stripComments;\n\nfunction stripComments(str) {\n  var s = \"\";\n  var commentStart = str.indexOf(\"/*\");\n  var lastEnd = 0;\n\n  while (commentStart >= 0) {\n    s = s + str.slice(lastEnd, commentStart);\n    var commentEnd = str.indexOf(\"*/\", commentStart + 2);\n\n    if (commentEnd < 0) {\n      return s;\n    }\n\n    lastEnd = commentEnd + 2;\n    commentStart = str.indexOf(\"/*\", lastEnd);\n  }\n\n  s = s + str.slice(lastEnd);\n  return s;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.stripComments = exports.ensureObject = exports.getProp = exports.unesc = void 0;\n\nvar _unesc = _interopRequireDefault(require(\"./unesc\"));\n\nexports.unesc = _unesc[\"default\"];\n\nvar _getProp = _interopRequireDefault(require(\"./getProp\"));\n\nexports.getProp = _getProp[\"default\"];\n\nvar _ensureObject = _interopRequireDefault(require(\"./ensureObject\"));\n\nexports.ensureObject = _ensureObject[\"default\"];\n\nvar _stripComments = _interopRequireDefault(require(\"./stripComments\"));\n\nexports.stripComments = _stripComments[\"default\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _util = require(\"../util\");\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar cloneNode = function cloneNode(obj, parent) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var value = obj[i];\n    var type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n\n  return cloned;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || '';\n    this.spaces.after = this.spaces.after || '';\n  }\n\n  var _proto = Node.prototype;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  };\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  };\n\n  _proto.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n\n  _proto.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */\n  ;\n\n  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  }\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */\n  ;\n\n  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    this.raws[name] = valueEscaped;\n  }\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */\n  ;\n\n  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  }\n  /**\n   *\n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */\n  ;\n\n  _proto.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n\n      if (this.source.end.line < line) {\n        return false;\n      }\n\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return undefined;\n  };\n\n  _proto.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n\n  _proto.valueToString = function valueToString() {\n    return String(this.stringifyProperty(\"value\"));\n  };\n\n  _proto.toString = function toString() {\n    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');\n  };\n\n  _createClass(Node, [{\n    key: \"rawSpaceBefore\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: \"rawSpaceAfter\",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports[\"default\"] = Node;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.UNIVERSAL = exports.ATTRIBUTE = exports.CLASS = exports.COMBINATOR = exports.COMMENT = exports.ID = exports.NESTING = exports.PSEUDO = exports.ROOT = exports.SELECTOR = exports.STRING = exports.TAG = void 0;\nvar TAG = 'tag';\nexports.TAG = TAG;\nvar STRING = 'string';\nexports.STRING = STRING;\nvar SELECTOR = 'selector';\nexports.SELECTOR = SELECTOR;\nvar ROOT = 'root';\nexports.ROOT = ROOT;\nvar PSEUDO = 'pseudo';\nexports.PSEUDO = PSEUDO;\nvar NESTING = 'nesting';\nexports.NESTING = NESTING;\nvar ID = 'id';\nexports.ID = ID;\nvar COMMENT = 'comment';\nexports.COMMENT = COMMENT;\nvar COMBINATOR = 'combinator';\nexports.COMBINATOR = COMBINATOR;\nvar CLASS = 'class';\nexports.CLASS = CLASS;\nvar ATTRIBUTE = 'attribute';\nexports.ATTRIBUTE = ATTRIBUTE;\nvar UNIVERSAL = 'universal';\nexports.UNIVERSAL = UNIVERSAL;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar types = _interopRequireWildcard(require(\"./types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n\n  function Container(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n\n    return _this;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.append = function append(selector) {\n    selector.parent = this;\n    this.nodes.push(selector);\n    return this;\n  };\n\n  _proto.prepend = function prepend(selector) {\n    selector.parent = this;\n    this.nodes.unshift(selector);\n    return this;\n  };\n\n  _proto.at = function at(index) {\n    return this.nodes[index];\n  };\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n\n    return this.nodes.indexOf(child);\n  };\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.at(child).parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n      var node = _step.value;\n      node.parent = undefined;\n    }\n\n    this.nodes = [];\n    return this;\n  };\n\n  _proto.empty = function empty() {\n    return this.removeAll();\n  };\n\n  _proto.insertAfter = function insertAfter(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex + 1, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (oldIndex <= index) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.insertBefore = function insertBefore(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex, 0, newNode);\n    newNode.parent = this;\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index <= oldIndex) {\n        this.indexes[id] = index + 1;\n      }\n    }\n\n    return this;\n  };\n\n  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {\n    var found = undefined;\n    this.each(function (node) {\n      if (node.atPosition) {\n        var foundChild = node.atPosition(line, col);\n\n        if (foundChild) {\n          found = foundChild;\n          return false;\n        }\n      } else if (node.isAtPosition(line, col)) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n  /**\n   * Return the most specific node at the line and column number given.\n   * The source location is based on the original parsed location, locations aren't\n   * updated as selector nodes are mutated.\n   * \n   * Note that this location is relative to the location of the first character\n   * of the selector, and not the location of the selector in the overall document\n   * when used in conjunction with postcss.\n   *\n   * If not found, returns undefined.\n   * @param {number} line The line number of the node to find. (1-based index)\n   * @param {number} col  The column number of the node to find. (1-based index)\n   */\n  ;\n\n  _proto.atPosition = function atPosition(line, col) {\n    if (this.isAtPosition(line, col)) {\n      return this._findChildAtPosition(line, col) || this;\n    } else {\n      return undefined;\n    }\n  };\n\n  _proto._inferEndPosition = function _inferEndPosition() {\n    if (this.last && this.last.source && this.last.source.end) {\n      this.source = this.source || {};\n      this.source.end = this.source.end || {};\n      Object.assign(this.source.end, this.last.source.end);\n    }\n  };\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) {\n      this.lastEach = 0;\n    }\n\n    if (!this.indexes) {\n      this.indexes = {};\n    }\n\n    this.lastEach++;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n\n    if (!this.length) {\n      return undefined;\n    }\n\n    var index, result;\n\n    while (this.indexes[id] < this.length) {\n      index = this.indexes[id];\n      result = callback(this.at(index), index);\n\n      if (result === false) {\n        break;\n      }\n\n      this.indexes[id] += 1;\n    }\n\n    delete this.indexes[id];\n\n    if (result === false) {\n      return false;\n    }\n  };\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (node, i) {\n      var result = callback(node, i);\n\n      if (result !== false && node.length) {\n        result = node.walk(callback);\n      }\n\n      if (result === false) {\n        return false;\n      }\n    });\n  };\n\n  _proto.walkAttributes = function walkAttributes(callback) {\n    var _this2 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ATTRIBUTE) {\n        return callback.call(_this2, selector);\n      }\n    });\n  };\n\n  _proto.walkClasses = function walkClasses(callback) {\n    var _this3 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.CLASS) {\n        return callback.call(_this3, selector);\n      }\n    });\n  };\n\n  _proto.walkCombinators = function walkCombinators(callback) {\n    var _this4 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMBINATOR) {\n        return callback.call(_this4, selector);\n      }\n    });\n  };\n\n  _proto.walkComments = function walkComments(callback) {\n    var _this5 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.COMMENT) {\n        return callback.call(_this5, selector);\n      }\n    });\n  };\n\n  _proto.walkIds = function walkIds(callback) {\n    var _this6 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.ID) {\n        return callback.call(_this6, selector);\n      }\n    });\n  };\n\n  _proto.walkNesting = function walkNesting(callback) {\n    var _this7 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.NESTING) {\n        return callback.call(_this7, selector);\n      }\n    });\n  };\n\n  _proto.walkPseudos = function walkPseudos(callback) {\n    var _this8 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.PSEUDO) {\n        return callback.call(_this8, selector);\n      }\n    });\n  };\n\n  _proto.walkTags = function walkTags(callback) {\n    var _this9 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.TAG) {\n        return callback.call(_this9, selector);\n      }\n    });\n  };\n\n  _proto.walkUniversals = function walkUniversals(callback) {\n    var _this10 = this;\n\n    return this.walk(function (selector) {\n      if (selector.type === types.UNIVERSAL) {\n        return callback.call(_this10, selector);\n      }\n    });\n  };\n\n  _proto.split = function split(callback) {\n    var _this11 = this;\n\n    var current = [];\n    return this.reduce(function (memo, node, index) {\n      var split = callback.call(_this11, node);\n      current.push(node);\n\n      if (split) {\n        memo.push(current);\n        current = [];\n      } else if (index === _this11.length - 1) {\n        memo.push(current);\n      }\n\n      return memo;\n    }, []);\n  };\n\n  _proto.map = function map(callback) {\n    return this.nodes.map(callback);\n  };\n\n  _proto.reduce = function reduce(callback, memo) {\n    return this.nodes.reduce(callback, memo);\n  };\n\n  _proto.every = function every(callback) {\n    return this.nodes.every(callback);\n  };\n\n  _proto.some = function some(callback) {\n    return this.nodes.some(callback);\n  };\n\n  _proto.filter = function filter(callback) {\n    return this.nodes.filter(callback);\n  };\n\n  _proto.sort = function sort(callback) {\n    return this.nodes.sort(callback);\n  };\n\n  _proto.toString = function toString() {\n    return this.map(String).join('');\n  };\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      return this.at(0);\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      return this.at(this.length - 1);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.nodes.length;\n    }\n  }]);\n\n  return Container;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Container;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n\n  function Root(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.ROOT;\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.toString = function toString() {\n    var str = this.reduce(function (memo, selector) {\n      memo.push(String(selector));\n      return memo;\n    }, []).join(',');\n    return this.trailingComma ? str + ',' : str;\n  };\n\n  _proto.error = function error(message, options) {\n    if (this._error) {\n      return this._error(message, options);\n    } else {\n      return new Error(message);\n    }\n  };\n\n  _createClass(Root, [{\n    key: \"errorGenerator\",\n    set: function set(handler) {\n      this._error = handler;\n    }\n  }]);\n\n  return Root;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Root;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Selector = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Selector, _Container);\n\n  function Selector(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.SELECTOR;\n    return _this;\n  }\n\n  return Selector;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Selector;\nmodule.exports = exports.default;","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClassName = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ClassName, _Node);\n\n  function ClassName(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.CLASS;\n    _this._constructed = true;\n    return _this;\n  }\n\n  var _proto = ClassName.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '.' + _Node.prototype.valueToString.call(this);\n  };\n\n  _createClass(ClassName, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      if (this._constructed) {\n        var escaped = (0, _cssesc[\"default\"])(v, {\n          isIdentifier: true\n        });\n\n        if (escaped !== v) {\n          (0, _util.ensureObject)(this, \"raws\");\n          this.raws.value = escaped;\n        } else if (this.raws) {\n          delete this.raws.value;\n        }\n      }\n\n      this._value = v;\n    }\n  }]);\n\n  return ClassName;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ClassName;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n\n  function Comment(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMMENT;\n    return _this;\n  }\n\n  return Comment;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Comment;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ID = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ID, _Node);\n\n  function ID(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.ID;\n    return _this;\n  }\n\n  var _proto = ID.prototype;\n\n  _proto.valueToString = function valueToString() {\n    return '#' + _Node.prototype.valueToString.call(this);\n  };\n\n  return ID;\n}(_node[\"default\"]);\n\nexports[\"default\"] = ID;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _util = require(\"../util\");\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Namespace = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Namespace, _Node);\n\n  function Namespace() {\n    return _Node.apply(this, arguments) || this;\n  }\n\n  var _proto = Namespace.prototype;\n\n  _proto.qualifiedName = function qualifiedName(value) {\n    if (this.namespace) {\n      return this.namespaceString + \"|\" + value;\n    } else {\n      return value;\n    }\n  };\n\n  _proto.valueToString = function valueToString() {\n    return this.qualifiedName(_Node.prototype.valueToString.call(this));\n  };\n\n  _createClass(Namespace, [{\n    key: \"namespace\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      if (namespace === true || namespace === \"*\" || namespace === \"&\") {\n        this._namespace = namespace;\n\n        if (this.raws) {\n          delete this.raws.namespace;\n        }\n\n        return;\n      }\n\n      var escaped = (0, _cssesc[\"default\"])(namespace, {\n        isIdentifier: true\n      });\n      this._namespace = namespace;\n\n      if (escaped !== namespace) {\n        (0, _util.ensureObject)(this, \"raws\");\n        this.raws.namespace = escaped;\n      } else if (this.raws) {\n        delete this.raws.namespace;\n      }\n    }\n  }, {\n    key: \"ns\",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      this.namespace = namespace;\n    }\n  }, {\n    key: \"namespaceString\",\n    get: function get() {\n      if (this.namespace) {\n        var ns = this.stringifyProperty(\"namespace\");\n\n        if (ns === true) {\n          return '';\n        } else {\n          return ns;\n        }\n      } else {\n        return '';\n      }\n    }\n  }]);\n\n  return Namespace;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Namespace;\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Tag = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Tag, _Namespace);\n\n  function Tag(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.TAG;\n    return _this;\n  }\n\n  return Tag;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Tag;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar String = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(String, _Node);\n\n  function String(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.STRING;\n    return _this;\n  }\n\n  return String;\n}(_node[\"default\"]);\n\nexports[\"default\"] = String;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Pseudo = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Pseudo, _Container);\n\n  function Pseudo(opts) {\n    var _this;\n\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.PSEUDO;\n    return _this;\n  }\n\n  var _proto = Pseudo.prototype;\n\n  _proto.toString = function toString() {\n    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n    return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), params, this.rawSpaceAfter].join('');\n  };\n\n  return Pseudo;\n}(_container[\"default\"]);\n\nexports[\"default\"] = Pseudo;\nmodule.exports = exports.default;","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","export const deprecate = fn => fn;\nexport const types = {\n  isNativeError: () => true\n};\n","\"use strict\";\n\nexports.__esModule = true;\nexports.unescapeValue = unescapeValue;\nexports[\"default\"] = void 0;\n\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\n\nvar _unesc = _interopRequireDefault(require(\"../util/unesc\"));\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nvar _CSSESC_QUOTE_OPTIONS;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar deprecate = require(\"util-deprecate\");\n\nvar WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n\n  unescaped = (0, _unesc[\"default\"])(unescaped);\n\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\n\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n\n  if (opts.value === undefined) {\n    return opts;\n  }\n\n  warnOfDeprecatedConstructor();\n\n  var _unescapeValue = unescapeValue(opts.value),\n      quoteMark = _unescapeValue.quoteMark,\n      unescaped = _unescapeValue.unescaped;\n\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\n\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n\n  function Attribute(opts) {\n    var _this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n\n\n  var _proto = Attribute.prototype;\n\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var quoteMark = this._determineQuoteMark(options);\n\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc[\"default\"])(this._value, cssescopts);\n    return escaped;\n  };\n\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */\n  ;\n\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n\n    this._syncRawValue();\n  }\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */\n  ;\n\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc[\"default\"])(v, {\n        isIdentifier: true\n      });\n\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc[\"default\"])(v, opts);\n\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */\n  ;\n\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n\n    return quoteMark;\n  };\n\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc[\"default\"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc[\"default\"])(value, {\n        isIdentifier: true\n      });\n\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n\n    var attrSpaces = this._spacesFor(spaceName);\n\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */\n  ;\n\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n\n    var attributeSpaces = this._spacesFor(\"attribute\");\n\n    count += attributeSpaces.before.length;\n\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n\n    if (name === \"attributeNS\") {\n      return count;\n    }\n\n    count += this.namespaceString.length;\n\n    if (this.namespace) {\n      count += 1;\n    }\n\n    if (name === \"attribute\") {\n      return count;\n    }\n\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n\n    var operatorSpaces = this._spacesFor(\"operator\");\n\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n\n    count += operator.length;\n    count += operatorSpaces.after.length;\n\n    var valueSpaces = this._spacesFor(\"value\");\n\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n\n    count += value.length;\n    count += valueSpaces.after.length;\n\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n\n    count += insensitiveSpaces.before.length;\n\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n\n    return -1;\n  };\n\n  _proto.toString = function toString() {\n    var _this2 = this;\n\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n    if (this.operator && (this.value || this.value === '')) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */\n    ,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    ,\n    set: function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n            deprecatedUsage = _unescapeValue2.deprecatedUsage,\n            unescaped = _unescapeValue2.unescaped,\n            quoteMark = _unescapeValue2.quoteMark;\n\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n\n      this._attribute = name;\n    }\n  }]);\n\n  return Attribute;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Universal = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Universal, _Namespace);\n\n  function Universal(opts) {\n    var _this;\n\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.UNIVERSAL;\n    _this.value = '*';\n    return _this;\n  }\n\n  return Universal;\n}(_namespace[\"default\"]);\n\nexports[\"default\"] = Universal;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Combinator = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Combinator, _Node);\n\n  function Combinator(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMBINATOR;\n    return _this;\n  }\n\n  return Combinator;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Combinator;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Nesting = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Nesting, _Node);\n\n  function Nesting(opts) {\n    var _this;\n\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.NESTING;\n    _this.value = '&';\n    return _this;\n  }\n\n  return Nesting;\n}(_node[\"default\"]);\n\nexports[\"default\"] = Nesting;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = sortAscending;\n\nfunction sortAscending(list) {\n  return list.sort(function (a, b) {\n    return a - b;\n  });\n}\n\n;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.combinator = exports.word = exports.comment = exports.str = exports.tab = exports.newline = exports.feed = exports.cr = exports.backslash = exports.bang = exports.slash = exports.doubleQuote = exports.singleQuote = exports.space = exports.greaterThan = exports.pipe = exports.equals = exports.plus = exports.caret = exports.tilde = exports.dollar = exports.closeSquare = exports.openSquare = exports.closeParenthesis = exports.openParenthesis = exports.semicolon = exports.colon = exports.comma = exports.at = exports.asterisk = exports.ampersand = void 0;\nvar ampersand = 38; // `&`.charCodeAt(0);\n\nexports.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\n\nexports.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\n\nexports.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\n\nexports.comma = comma;\nvar colon = 58; // `:`.charCodeAt(0);\n\nexports.colon = colon;\nvar semicolon = 59; // `;`.charCodeAt(0);\n\nexports.semicolon = semicolon;\nvar openParenthesis = 40; // `(`.charCodeAt(0);\n\nexports.openParenthesis = openParenthesis;\nvar closeParenthesis = 41; // `)`.charCodeAt(0);\n\nexports.closeParenthesis = closeParenthesis;\nvar openSquare = 91; // `[`.charCodeAt(0);\n\nexports.openSquare = openSquare;\nvar closeSquare = 93; // `]`.charCodeAt(0);\n\nexports.closeSquare = closeSquare;\nvar dollar = 36; // `$`.charCodeAt(0);\n\nexports.dollar = dollar;\nvar tilde = 126; // `~`.charCodeAt(0);\n\nexports.tilde = tilde;\nvar caret = 94; // `^`.charCodeAt(0);\n\nexports.caret = caret;\nvar plus = 43; // `+`.charCodeAt(0);\n\nexports.plus = plus;\nvar equals = 61; // `=`.charCodeAt(0);\n\nexports.equals = equals;\nvar pipe = 124; // `|`.charCodeAt(0);\n\nexports.pipe = pipe;\nvar greaterThan = 62; // `>`.charCodeAt(0);\n\nexports.greaterThan = greaterThan;\nvar space = 32; // ` `.charCodeAt(0);\n\nexports.space = space;\nvar singleQuote = 39; // `'`.charCodeAt(0);\n\nexports.singleQuote = singleQuote;\nvar doubleQuote = 34; // `\"`.charCodeAt(0);\n\nexports.doubleQuote = doubleQuote;\nvar slash = 47; // `/`.charCodeAt(0);\n\nexports.slash = slash;\nvar bang = 33; // `!`.charCodeAt(0);\n\nexports.bang = bang;\nvar backslash = 92; // '\\\\'.charCodeAt(0);\n\nexports.backslash = backslash;\nvar cr = 13; // '\\r'.charCodeAt(0);\n\nexports.cr = cr;\nvar feed = 12; // '\\f'.charCodeAt(0);\n\nexports.feed = feed;\nvar newline = 10; // '\\n'.charCodeAt(0);\n\nexports.newline = newline;\nvar tab = 9; // '\\t'.charCodeAt(0);\n// Expose aliases primarily for readability.\n\nexports.tab = tab;\nvar str = singleQuote; // No good single character representation!\n\nexports.str = str;\nvar comment = -1;\nexports.comment = comment;\nvar word = -2;\nexports.word = word;\nvar combinator = -3;\nexports.combinator = combinator;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = tokenize;\nexports.FIELDS = void 0;\n\nvar t = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar _unescapable, _wordDelimiters;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);\nvar wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);\nvar hex = {};\nvar hexChars = \"0123456789abcdefABCDEF\";\n\nfor (var i = 0; i < hexChars.length; i++) {\n  hex[hexChars.charCodeAt(i)] = true;\n}\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word's first letter occurs\n */\n\n\nfunction consumeWord(css, start) {\n  var next = start;\n  var code;\n\n  do {\n    code = css.charCodeAt(next);\n\n    if (wordDelimiters[code]) {\n      return next - 1;\n    } else if (code === t.backslash) {\n      next = consumeEscape(css, next) + 1;\n    } else {\n      // All other characters are part of the word\n      next++;\n    }\n  } while (next < css.length);\n\n  return next - 1;\n}\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\n\n\nfunction consumeEscape(css, start) {\n  var next = start;\n  var code = css.charCodeAt(next + 1);\n\n  if (unescapable[code]) {// just consume the escape char\n  } else if (hex[code]) {\n    var hexDigits = 0; // consume up to 6 hex chars\n\n    do {\n      next++;\n      hexDigits++;\n      code = css.charCodeAt(next + 1);\n    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape\n\n\n    if (hexDigits < 6 && code === t.space) {\n      next++;\n    }\n  } else {\n    // the next char is part of the current word\n    next++;\n  }\n\n  return next;\n}\n\nvar FIELDS = {\n  TYPE: 0,\n  START_LINE: 1,\n  START_COL: 2,\n  END_LINE: 3,\n  END_COL: 4,\n  START_POS: 5,\n  END_POS: 6\n};\nexports.FIELDS = FIELDS;\n\nfunction tokenize(input) {\n  var tokens = [];\n  var css = input.css.valueOf();\n  var _css = css,\n      length = _css.length;\n  var offset = -1;\n  var line = 1;\n  var start = 0;\n  var end = 0;\n  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;\n\n  function unclosed(what, fix) {\n    if (input.safe) {\n      // fyi: this is never set to true.\n      css += fix;\n      next = css.length - 1;\n    } else {\n      throw input.error('Unclosed ' + what, line, start - offset, start);\n    }\n  }\n\n  while (start < length) {\n    code = css.charCodeAt(start);\n\n    if (code === t.newline) {\n      offset = start;\n      line += 1;\n    }\n\n    switch (code) {\n      case t.space:\n      case t.tab:\n      case t.newline:\n      case t.cr:\n      case t.feed:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n\n          if (code === t.newline) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n\n        tokenType = t.space;\n        endLine = line;\n        endColumn = next - offset - 1;\n        end = next;\n        break;\n\n      case t.plus:\n      case t.greaterThan:\n      case t.tilde:\n      case t.pipe:\n        next = start;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n\n        tokenType = t.combinator;\n        endLine = line;\n        endColumn = start - offset;\n        end = next;\n        break;\n      // Consume these characters as single tokens.\n\n      case t.asterisk:\n      case t.ampersand:\n      case t.bang:\n      case t.comma:\n      case t.equals:\n      case t.dollar:\n      case t.caret:\n      case t.openSquare:\n      case t.closeSquare:\n      case t.colon:\n      case t.semicolon:\n      case t.openParenthesis:\n      case t.closeParenthesis:\n        next = start;\n        tokenType = code;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      case t.singleQuote:\n      case t.doubleQuote:\n        quote = code === t.singleQuote ? \"'\" : '\"';\n        next = start;\n\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n\n          if (next === -1) {\n            unclosed('quote', quote);\n          }\n\n          escapePos = next;\n\n          while (css.charCodeAt(escapePos - 1) === t.backslash) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n\n        tokenType = t.str;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n\n      default:\n        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n          next = css.indexOf('*/', start + 2) + 1;\n\n          if (next === 0) {\n            unclosed('comment', '*/');\n          }\n\n          content = css.slice(start, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n\n          tokenType = t.comment;\n          line = nextLine;\n          endLine = nextLine;\n          endColumn = next - nextOffset;\n        } else if (code === t.slash) {\n          next = start;\n          tokenType = code;\n          endLine = line;\n          endColumn = start - offset;\n          end = next + 1;\n        } else {\n          next = consumeWord(css, start);\n          tokenType = t.word;\n          endLine = line;\n          endColumn = next - offset;\n        }\n\n        end = next + 1;\n        break;\n    } // Ensure that the token structure remains consistent\n\n\n    tokens.push([tokenType, // [0] Token type\n    line, // [1] Starting line\n    start - offset, // [2] Starting column\n    endLine, // [3] Ending line\n    endColumn, // [4] Ending column\n    start, // [5] Start position / Source index\n    end // [6] End position\n    ]); // Reset offset for the next token\n\n    if (nextOffset) {\n      offset = nextOffset;\n      nextOffset = null;\n    }\n\n    start = end;\n  }\n\n  return tokens;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _root = _interopRequireDefault(require(\"./selectors/root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selectors/selector\"));\n\nvar _className = _interopRequireDefault(require(\"./selectors/className\"));\n\nvar _comment = _interopRequireDefault(require(\"./selectors/comment\"));\n\nvar _id = _interopRequireDefault(require(\"./selectors/id\"));\n\nvar _tag = _interopRequireDefault(require(\"./selectors/tag\"));\n\nvar _string = _interopRequireDefault(require(\"./selectors/string\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./selectors/pseudo\"));\n\nvar _attribute = _interopRequireWildcard(require(\"./selectors/attribute\"));\n\nvar _universal = _interopRequireDefault(require(\"./selectors/universal\"));\n\nvar _combinator = _interopRequireDefault(require(\"./selectors/combinator\"));\n\nvar _nesting = _interopRequireDefault(require(\"./selectors/nesting\"));\n\nvar _sortAscending = _interopRequireDefault(require(\"./sortAscending\"));\n\nvar _tokenize = _interopRequireWildcard(require(\"./tokenize\"));\n\nvar tokens = _interopRequireWildcard(require(\"./tokenTypes\"));\n\nvar types = _interopRequireWildcard(require(\"./selectors/types\"));\n\nvar _util = require(\"./util\");\n\nvar _WHITESPACE_TOKENS, _Object$assign;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);\nvar WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));\n\nfunction tokenStart(token) {\n  return {\n    line: token[_tokenize.FIELDS.START_LINE],\n    column: token[_tokenize.FIELDS.START_COL]\n  };\n}\n\nfunction tokenEnd(token) {\n  return {\n    line: token[_tokenize.FIELDS.END_LINE],\n    column: token[_tokenize.FIELDS.END_COL]\n  };\n}\n\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n}\n\nfunction getTokenSource(token) {\n  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);\n}\n\nfunction getTokenSourceSpan(startToken, endToken) {\n  if (!startToken) {\n    return undefined;\n  }\n\n  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);\n}\n\nfunction unescapeProp(node, prop) {\n  var value = node[prop];\n\n  if (typeof value !== \"string\") {\n    return;\n  }\n\n  if (value.indexOf(\"\\\\\") !== -1) {\n    (0, _util.ensureObject)(node, 'raws');\n    node[prop] = (0, _util.unesc)(value);\n\n    if (node.raws[prop] === undefined) {\n      node.raws[prop] = value;\n    }\n  }\n\n  return node;\n}\n\nfunction indexesOf(array, item) {\n  var i = -1;\n  var indexes = [];\n\n  while ((i = array.indexOf(item, i + 1)) !== -1) {\n    indexes.push(i);\n  }\n\n  return indexes;\n}\n\nfunction uniqs() {\n  var list = Array.prototype.concat.apply([], arguments);\n  return list.filter(function (item, i) {\n    return i === list.indexOf(item);\n  });\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.rule = rule;\n    this.options = Object.assign({\n      lossy: false,\n      safe: false\n    }, options);\n    this.position = 0;\n    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n    this.tokens = (0, _tokenize[\"default\"])({\n      css: this.css,\n      error: this._errorGenerator(),\n      safe: this.options.safe\n    });\n    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n    this.root = new _root[\"default\"]({\n      source: rootSource\n    });\n    this.root.errorGenerator = this._errorGenerator();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: {\n          line: 1,\n          column: 1\n        }\n      }\n    });\n    this.root.append(selector);\n    this.current = selector;\n    this.loop();\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto._errorGenerator = function _errorGenerator() {\n    var _this = this;\n\n    return function (message, errorOptions) {\n      if (typeof _this.rule === 'string') {\n        return new Error(message);\n      }\n\n      return _this.rule.error(message, errorOptions);\n    };\n  };\n\n  _proto.attribute = function attribute() {\n    var attr = [];\n    var startingToken = this.currToken;\n    this.position++;\n\n    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      attr.push(this.currToken);\n      this.position++;\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n\n    var len = attr.length;\n    var node = {\n      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n    };\n\n    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {\n      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);\n    }\n\n    var pos = 0;\n    var spaceBefore = '';\n    var commentBefore = '';\n    var lastAdded = null;\n    var spaceAfterMeaningfulToken = false;\n\n    while (pos < len) {\n      var token = attr[pos];\n      var content = this.content(token);\n      var next = attr[pos + 1];\n\n      switch (token[_tokenize.FIELDS.TYPE]) {\n        case tokens.space:\n          // if (\n          //     len === 1 ||\n          //     pos === 0 && this.content(next) === '|'\n          // ) {\n          //     return this.expected('attribute', token[TOKEN.START_POS], content);\n          // }\n          spaceAfterMeaningfulToken = true;\n\n          if (this.options.lossy) {\n            break;\n          }\n\n          if (lastAdded) {\n            (0, _util.ensureObject)(node, 'spaces', lastAdded);\n            var prevContent = node.spaces[lastAdded].after || '';\n            node.spaces[lastAdded].after = prevContent + content;\n            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;\n\n            if (existingComment) {\n              node.raws.spaces[lastAdded].after = existingComment + content;\n            }\n          } else {\n            spaceBefore = spaceBefore + content;\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        case tokens.asterisk:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = spaceBefore;\n              commentBefore = '';\n            }\n\n            node.namespace = (node.namespace || \"\") + content;\n            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;\n\n            if (rawValue) {\n              node.raws.namespace += content;\n            }\n\n            lastAdded = 'namespace';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.dollar:\n          if (lastAdded === \"value\") {\n            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');\n            node.value += \"$\";\n\n            if (oldRawValue) {\n              node.raws.value = oldRawValue + \"$\";\n            }\n\n            break;\n          }\n\n        // Falls through\n\n        case tokens.caret:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.combinator:\n          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n\n          if (content !== '|') {\n            spaceAfterMeaningfulToken = false;\n            break;\n          }\n\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if (!node.namespace && !node.attribute) {\n            node.namespace = true;\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.word:\n          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.\n          !node.operator && !node.namespace) {\n            node.namespace = content;\n            lastAdded = 'namespace';\n          } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = commentBefore;\n              commentBefore = '';\n            }\n\n            node.attribute = (node.attribute || \"\") + content;\n\n            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;\n\n            if (_rawValue) {\n              node.raws.attribute += content;\n            }\n\n            lastAdded = 'attribute';\n          } else if (!node.value && node.value !== \"\" || lastAdded === \"value\" && !spaceAfterMeaningfulToken) {\n            var _unescaped = (0, _util.unesc)(content);\n\n            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';\n\n            var oldValue = node.value || '';\n            node.value = oldValue + _unescaped;\n            node.quoteMark = null;\n\n            if (_unescaped !== content || _oldRawValue) {\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws.value = (_oldRawValue || oldValue) + content;\n            }\n\n            lastAdded = 'value';\n          } else {\n            var insensitive = content === 'i' || content === \"I\";\n\n            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n              node.insensitive = insensitive;\n\n              if (!insensitive || content === \"I\") {\n                (0, _util.ensureObject)(node, 'raws');\n                node.raws.insensitiveFlag = content;\n              }\n\n              lastAdded = 'insensitive';\n\n              if (spaceBefore) {\n                (0, _util.ensureObject)(node, 'spaces', 'insensitive');\n                node.spaces.insensitive.before = spaceBefore;\n                spaceBefore = '';\n              }\n\n              if (commentBefore) {\n                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');\n                node.raws.spaces.insensitive.before = commentBefore;\n                commentBefore = '';\n              }\n            } else if (node.value || node.value === '') {\n              lastAdded = 'value';\n              node.value += content;\n\n              if (node.raws.value) {\n                node.raws.value += content;\n              }\n            }\n          }\n\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.str:\n          if (!node.attribute || !node.operator) {\n            return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          var _unescapeValue = (0, _attribute.unescapeValue)(content),\n              unescaped = _unescapeValue.unescaped,\n              quoteMark = _unescapeValue.quoteMark;\n\n          node.value = unescaped;\n          node.quoteMark = quoteMark;\n          lastAdded = 'value';\n          (0, _util.ensureObject)(node, 'raws');\n          node.raws.value = content;\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.equals:\n          if (!node.attribute) {\n            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);\n          }\n\n          if (node.value) {\n            return this.error('Unexpected \"=\" found; an operator was already defined.', {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n\n          node.operator = node.operator ? node.operator + content : content;\n          lastAdded = 'operator';\n          spaceAfterMeaningfulToken = false;\n          break;\n\n        case tokens.comment:\n          if (lastAdded) {\n            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {\n              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';\n              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);\n              node.raws.spaces[lastAdded].after = rawLastComment + content;\n            } else {\n              var lastValue = node[lastAdded] || '';\n              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws[lastAdded] = rawLastValue + content;\n            }\n          } else {\n            commentBefore = commentBefore + content;\n          }\n\n          break;\n\n        default:\n          return this.error(\"Unexpected \\\"\" + content + \"\\\" found.\", {\n            index: token[_tokenize.FIELDS.START_POS]\n          });\n      }\n\n      pos++;\n    }\n\n    unescapeProp(node, \"attribute\");\n    unescapeProp(node, \"namespace\");\n    this.newNode(new _attribute[\"default\"](node));\n    this.position++;\n  }\n  /**\n   * return a node containing meaningless garbage up to (but not including) the specified token position.\n   * if the token position is negative, all remaining tokens are consumed.\n   *\n   * This returns an array containing a single string node if all whitespace,\n   * otherwise an array of comment nodes with space before and after.\n   *\n   * These tokens are not added to the current selector, the caller can add them or use them to amend\n   * a previous node's space metadata.\n   *\n   * In lossy mode, this returns only comments.\n   */\n  ;\n\n  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {\n    if (stopPosition < 0) {\n      stopPosition = this.tokens.length;\n    }\n\n    var startPosition = this.position;\n    var nodes = [];\n    var space = \"\";\n    var lastComment = undefined;\n\n    do {\n      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n        if (!this.options.lossy) {\n          space += this.content();\n        }\n      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {\n        var spaces = {};\n\n        if (space) {\n          spaces.before = space;\n          space = \"\";\n        }\n\n        lastComment = new _comment[\"default\"]({\n          value: this.content(),\n          source: getTokenSource(this.currToken),\n          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n          spaces: spaces\n        });\n        nodes.push(lastComment);\n      }\n    } while (++this.position < stopPosition);\n\n    if (space) {\n      if (lastComment) {\n        lastComment.spaces.after = space;\n      } else if (!this.options.lossy) {\n        var firstToken = this.tokens[startPosition];\n        var lastToken = this.tokens[this.position - 1];\n        nodes.push(new _string[\"default\"]({\n          value: '',\n          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),\n          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n          spaces: {\n            before: space,\n            after: ''\n          }\n        }));\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * \n   * @param {*} nodes \n   */\n  ;\n\n  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {\n    var _this2 = this;\n\n    if (requiredSpace === void 0) {\n      requiredSpace = false;\n    }\n\n    var space = \"\";\n    var rawSpace = \"\";\n    nodes.forEach(function (n) {\n      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);\n\n      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);\n\n      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n    });\n\n    if (rawSpace === space) {\n      rawSpace = undefined;\n    }\n\n    var result = {\n      space: space,\n      rawSpace: rawSpace\n    };\n    return result;\n  };\n\n  _proto.isNamedCombinator = function isNamedCombinator(position) {\n    if (position === void 0) {\n      position = this.position;\n    }\n\n    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;\n  };\n\n  _proto.namedCombinator = function namedCombinator() {\n    if (this.isNamedCombinator()) {\n      var nameRaw = this.content(this.tokens[this.position + 1]);\n      var name = (0, _util.unesc)(nameRaw).toLowerCase();\n      var raws = {};\n\n      if (name !== nameRaw) {\n        raws.value = \"/\" + nameRaw + \"/\";\n      }\n\n      var node = new _combinator[\"default\"]({\n        value: \"/\" + name + \"/\",\n        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n        raws: raws\n      });\n      this.position = this.position + 3;\n      return node;\n    } else {\n      this.unexpected();\n    }\n  };\n\n  _proto.combinator = function combinator() {\n    var _this3 = this;\n\n    if (this.content() === '|') {\n      return this.namespace();\n    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n\n\n    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n\n    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {\n      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n\n      if (nodes.length > 0) {\n        var last = this.current.last;\n\n        if (last) {\n          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),\n              space = _this$convertWhitespa.space,\n              rawSpace = _this$convertWhitespa.rawSpace;\n\n          if (rawSpace !== undefined) {\n            last.rawSpaceAfter += rawSpace;\n          }\n\n          last.spaces.after += space;\n        } else {\n          nodes.forEach(function (n) {\n            return _this3.newNode(n);\n          });\n        }\n      }\n\n      return;\n    }\n\n    var firstToken = this.currToken;\n    var spaceOrDescendantSelectorNodes = undefined;\n\n    if (nextSigTokenPos > this.position) {\n      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n    }\n\n    var node;\n\n    if (this.isNamedCombinator()) {\n      node = this.namedCombinator();\n    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n      node = new _combinator[\"default\"]({\n        value: this.content(),\n        source: getTokenSource(this.currToken),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n      });\n      this.position++;\n    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {// pass\n    } else if (!spaceOrDescendantSelectorNodes) {\n      this.unexpected();\n    }\n\n    if (node) {\n      if (spaceOrDescendantSelectorNodes) {\n        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),\n            _space = _this$convertWhitespa2.space,\n            _rawSpace = _this$convertWhitespa2.rawSpace;\n\n        node.spaces.before = _space;\n        node.rawSpaceBefore = _rawSpace;\n      }\n    } else {\n      // descendant combinator\n      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),\n          _space2 = _this$convertWhitespa3.space,\n          _rawSpace2 = _this$convertWhitespa3.rawSpace;\n\n      if (!_rawSpace2) {\n        _rawSpace2 = _space2;\n      }\n\n      var spaces = {};\n      var raws = {\n        spaces: {}\n      };\n\n      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {\n        spaces.before = _space2.slice(0, _space2.length - 1);\n        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);\n      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {\n        spaces.after = _space2.slice(1);\n        raws.spaces.after = _rawSpace2.slice(1);\n      } else {\n        raws.value = _rawSpace2;\n      }\n\n      node = new _combinator[\"default\"]({\n        value: ' ',\n        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n        spaces: spaces,\n        raws: raws\n      });\n    }\n\n    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {\n      node.spaces.after = this.optionalSpace(this.content());\n      this.position++;\n    }\n\n    return this.newNode(node);\n  };\n\n  _proto.comma = function comma() {\n    if (this.position === this.tokens.length - 1) {\n      this.root.trailingComma = true;\n      this.position++;\n      return;\n    }\n\n    this.current._inferEndPosition();\n\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: tokenStart(this.tokens[this.position + 1])\n      }\n    });\n    this.current.parent.append(selector);\n    this.current = selector;\n    this.position++;\n  };\n\n  _proto.comment = function comment() {\n    var current = this.currToken;\n    this.newNode(new _comment[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.error = function error(message, opts) {\n    throw this.root.error(message, opts);\n  };\n\n  _proto.missingBackslash = function missingBackslash() {\n    return this.error('Expected a backslash preceding the semicolon.', {\n      index: this.currToken[_tokenize.FIELDS.START_POS]\n    });\n  };\n\n  _proto.missingParenthesis = function missingParenthesis() {\n    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.missingSquareBracket = function missingSquareBracket() {\n    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.unexpected = function unexpected() {\n    return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n\n  _proto.namespace = function namespace() {\n    var before = this.prevToken && this.content(this.prevToken) || true;\n\n    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.position++;\n      return this.word(before);\n    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {\n      this.position++;\n      return this.universal(before);\n    }\n  };\n\n  _proto.nesting = function nesting() {\n    if (this.nextToken) {\n      var nextContent = this.content(this.nextToken);\n\n      if (nextContent === \"|\") {\n        this.position++;\n        return;\n      }\n    }\n\n    var current = this.currToken;\n    this.newNode(new _nesting[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.parentheses = function parentheses() {\n    var last = this.current.last;\n    var unbalanced = 1;\n    this.position++;\n\n    if (last && last.type === types.PSEUDO) {\n      var selector = new _selector[\"default\"]({\n        source: {\n          start: tokenStart(this.tokens[this.position - 1])\n        }\n      });\n      var cache = this.current;\n      last.append(selector);\n      this.current = selector;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        if (unbalanced) {\n          this.parse();\n        } else {\n          this.current.source.end = tokenEnd(this.currToken);\n          this.current.parent.source.end = tokenEnd(this.currToken);\n          this.position++;\n        }\n      }\n\n      this.current = cache;\n    } else {\n      // I think this case should be an error. It's used to implement a basic parse of media queries\n      // but I don't think it's a good idea.\n      var parenStart = this.currToken;\n      var parenValue = \"(\";\n      var parenEnd;\n\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n\n        parenEnd = this.currToken;\n        parenValue += this.parseParenthesisToken(this.currToken);\n        this.position++;\n      }\n\n      if (last) {\n        last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n      } else {\n        this.newNode(new _string[\"default\"]({\n          value: parenValue,\n          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),\n          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]\n        }));\n      }\n    }\n\n    if (unbalanced) {\n      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.pseudo = function pseudo() {\n    var _this4 = this;\n\n    var pseudoStr = '';\n    var startingToken = this.currToken;\n\n    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {\n      pseudoStr += this.content();\n      this.position++;\n    }\n\n    if (!this.currToken) {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n    }\n\n    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.splitWord(false, function (first, length) {\n        pseudoStr += first;\n\n        _this4.newNode(new _pseudo[\"default\"]({\n          value: pseudoStr,\n          source: getTokenSourceSpan(startingToken, _this4.currToken),\n          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n        }));\n\n        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          _this4.error('Misplaced parenthesis.', {\n            index: _this4.nextToken[_tokenize.FIELDS.START_POS]\n          });\n        }\n      });\n    } else {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n\n  _proto.space = function space() {\n    var content = this.content(); // Handle space before and after the selector\n\n    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {\n      return node.type === 'comment';\n    })) {\n      this.spaces = this.optionalSpace(content);\n      this.position++;\n    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      this.current.last.spaces.after = this.optionalSpace(content);\n      this.position++;\n    } else {\n      this.combinator();\n    }\n  };\n\n  _proto.string = function string() {\n    var current = this.currToken;\n    this.newNode(new _string[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n\n  _proto.universal = function universal(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    var current = this.currToken;\n    this.newNode(new _universal[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }), namespace);\n    this.position++;\n  };\n\n  _proto.splitWord = function splitWord(namespace, firstCallback) {\n    var _this5 = this;\n\n    var nextToken = this.nextToken;\n    var word = this.content();\n\n    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {\n      this.position++;\n      var current = this.content();\n      word += current;\n\n      if (current.lastIndexOf('\\\\') === current.length - 1) {\n        var next = this.nextToken;\n\n        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {\n          word += this.requiredSpace(this.content(next));\n          this.position++;\n        }\n      }\n\n      nextToken = this.nextToken;\n    }\n\n    var hasClass = indexesOf(word, '.').filter(function (i) {\n      // Allow escaped dot within class name\n      var escapedDot = word[i - 1] === '\\\\'; // Allow decimal numbers percent in @keyframes\n\n      var isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n      return !escapedDot && !isKeyframesPercent;\n    });\n    var hasId = indexesOf(word, '#').filter(function (i) {\n      return word[i - 1] !== '\\\\';\n    }); // Eliminate Sass interpolations from the list of id indexes\n\n    var interpolations = indexesOf(word, '#{');\n\n    if (interpolations.length) {\n      hasId = hasId.filter(function (hashIndex) {\n        return !~interpolations.indexOf(hashIndex);\n      });\n    }\n\n    var indices = (0, _sortAscending[\"default\"])(uniqs([0].concat(hasClass, hasId)));\n    indices.forEach(function (ind, i) {\n      var index = indices[i + 1] || word.length;\n      var value = word.slice(ind, index);\n\n      if (i === 0 && firstCallback) {\n        return firstCallback.call(_this5, value, indices.length);\n      }\n\n      var node;\n      var current = _this5.currToken;\n      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];\n      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n\n      if (~hasClass.indexOf(ind)) {\n        var classNameOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n      } else if (~hasId.indexOf(ind)) {\n        var idOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n      } else {\n        var tagOpts = {\n          value: value,\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        unescapeProp(tagOpts, \"value\");\n        node = new _tag[\"default\"](tagOpts);\n      }\n\n      _this5.newNode(node, namespace); // Ensure that the namespace is used only once\n\n\n      namespace = null;\n    });\n    this.position++;\n  };\n\n  _proto.word = function word(namespace) {\n    var nextToken = this.nextToken;\n\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n\n    return this.splitWord(namespace);\n  };\n\n  _proto.loop = function loop() {\n    while (this.position < this.tokens.length) {\n      this.parse(true);\n    }\n\n    this.current._inferEndPosition();\n\n    return this.root;\n  };\n\n  _proto.parse = function parse(throwOnParenthesis) {\n    switch (this.currToken[_tokenize.FIELDS.TYPE]) {\n      case tokens.space:\n        this.space();\n        break;\n\n      case tokens.comment:\n        this.comment();\n        break;\n\n      case tokens.openParenthesis:\n        this.parentheses();\n        break;\n\n      case tokens.closeParenthesis:\n        if (throwOnParenthesis) {\n          this.missingParenthesis();\n        }\n\n        break;\n\n      case tokens.openSquare:\n        this.attribute();\n        break;\n\n      case tokens.dollar:\n      case tokens.caret:\n      case tokens.equals:\n      case tokens.word:\n        this.word();\n        break;\n\n      case tokens.colon:\n        this.pseudo();\n        break;\n\n      case tokens.comma:\n        this.comma();\n        break;\n\n      case tokens.asterisk:\n        this.universal();\n        break;\n\n      case tokens.ampersand:\n        this.nesting();\n        break;\n\n      case tokens.slash:\n      case tokens.combinator:\n        this.combinator();\n        break;\n\n      case tokens.str:\n        this.string();\n        break;\n      // These cases throw; no break needed.\n\n      case tokens.closeSquare:\n        this.missingSquareBracket();\n\n      case tokens.semicolon:\n        this.missingBackslash();\n\n      default:\n        this.unexpected();\n    }\n  }\n  /**\n   * Helpers\n   */\n  ;\n\n  _proto.expected = function expected(description, index, found) {\n    if (Array.isArray(description)) {\n      var last = description.pop();\n      description = description.join(', ') + \" or \" + last;\n    }\n\n    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n\n    if (!found) {\n      return this.error(\"Expected \" + an + \" \" + description + \".\", {\n        index: index\n      });\n    }\n\n    return this.error(\"Expected \" + an + \" \" + description + \", found \\\"\" + found + \"\\\" instead.\", {\n      index: index\n    });\n  };\n\n  _proto.requiredSpace = function requiredSpace(space) {\n    return this.options.lossy ? ' ' : space;\n  };\n\n  _proto.optionalSpace = function optionalSpace(space) {\n    return this.options.lossy ? '' : space;\n  };\n\n  _proto.lossySpace = function lossySpace(space, required) {\n    if (this.options.lossy) {\n      return required ? ' ' : '';\n    } else {\n      return space;\n    }\n  };\n\n  _proto.parseParenthesisToken = function parseParenthesisToken(token) {\n    var content = this.content(token);\n\n    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {\n      return this.requiredSpace(content);\n    } else {\n      return content;\n    }\n  };\n\n  _proto.newNode = function newNode(node, namespace) {\n    if (namespace) {\n      if (/^ +$/.test(namespace)) {\n        if (!this.options.lossy) {\n          this.spaces = (this.spaces || '') + namespace;\n        }\n\n        namespace = true;\n      }\n\n      node.namespace = namespace;\n      unescapeProp(node, \"namespace\");\n    }\n\n    if (this.spaces) {\n      node.spaces.before = this.spaces;\n      this.spaces = '';\n    }\n\n    return this.current.append(node);\n  };\n\n  _proto.content = function content(token) {\n    if (token === void 0) {\n      token = this.currToken;\n    }\n\n    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);\n  };\n\n  /**\n   * returns the index of the next non-whitespace, non-comment token.\n   * returns -1 if no meaningful token is found.\n   */\n  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = this.position + 1;\n    }\n\n    var searchPosition = startPosition;\n\n    while (searchPosition < this.tokens.length) {\n      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {\n        searchPosition++;\n        continue;\n      } else {\n        return searchPosition;\n      }\n    }\n\n    return -1;\n  };\n\n  _createClass(Parser, [{\n    key: \"currToken\",\n    get: function get() {\n      return this.tokens[this.position];\n    }\n  }, {\n    key: \"nextToken\",\n    get: function get() {\n      return this.tokens[this.position + 1];\n    }\n  }, {\n    key: \"prevToken\",\n    get: function get() {\n      return this.tokens[this.position - 1];\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports[\"default\"] = Parser;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;","\"use strict\";\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;\n\nvar _attribute = _interopRequireDefault(require(\"./attribute\"));\n\nvar _className = _interopRequireDefault(require(\"./className\"));\n\nvar _combinator = _interopRequireDefault(require(\"./combinator\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _id = _interopRequireDefault(require(\"./id\"));\n\nvar _nesting = _interopRequireDefault(require(\"./nesting\"));\n\nvar _pseudo = _interopRequireDefault(require(\"./pseudo\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nvar _selector = _interopRequireDefault(require(\"./selector\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _tag = _interopRequireDefault(require(\"./tag\"));\n\nvar _universal = _interopRequireDefault(require(\"./universal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar attribute = function attribute(opts) {\n  return new _attribute[\"default\"](opts);\n};\n\nexports.attribute = attribute;\n\nvar className = function className(opts) {\n  return new _className[\"default\"](opts);\n};\n\nexports.className = className;\n\nvar combinator = function combinator(opts) {\n  return new _combinator[\"default\"](opts);\n};\n\nexports.combinator = combinator;\n\nvar comment = function comment(opts) {\n  return new _comment[\"default\"](opts);\n};\n\nexports.comment = comment;\n\nvar id = function id(opts) {\n  return new _id[\"default\"](opts);\n};\n\nexports.id = id;\n\nvar nesting = function nesting(opts) {\n  return new _nesting[\"default\"](opts);\n};\n\nexports.nesting = nesting;\n\nvar pseudo = function pseudo(opts) {\n  return new _pseudo[\"default\"](opts);\n};\n\nexports.pseudo = pseudo;\n\nvar root = function root(opts) {\n  return new _root[\"default\"](opts);\n};\n\nexports.root = root;\n\nvar selector = function selector(opts) {\n  return new _selector[\"default\"](opts);\n};\n\nexports.selector = selector;\n\nvar string = function string(opts) {\n  return new _string[\"default\"](opts);\n};\n\nexports.string = string;\n\nvar tag = function tag(opts) {\n  return new _tag[\"default\"](opts);\n};\n\nexports.tag = tag;\n\nvar universal = function universal(opts) {\n  return new _universal[\"default\"](opts);\n};\n\nexports.universal = universal;","\"use strict\";\n\nexports.__esModule = true;\nexports.isNode = isNode;\nexports.isPseudoElement = isPseudoElement;\nexports.isPseudoClass = isPseudoClass;\nexports.isContainer = isContainer;\nexports.isNamespace = isNamespace;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;\n\nvar _types = require(\"./types\");\n\nvar _IS_TYPE;\n\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\n\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\n\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n}\n\nvar isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nexports.isAttribute = isAttribute;\nvar isClassName = isNodeType.bind(null, _types.CLASS);\nexports.isClassName = isClassName;\nvar isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nexports.isCombinator = isCombinator;\nvar isComment = isNodeType.bind(null, _types.COMMENT);\nexports.isComment = isComment;\nvar isIdentifier = isNodeType.bind(null, _types.ID);\nexports.isIdentifier = isIdentifier;\nvar isNesting = isNodeType.bind(null, _types.NESTING);\nexports.isNesting = isNesting;\nvar isPseudo = isNodeType.bind(null, _types.PSEUDO);\nexports.isPseudo = isPseudo;\nvar isRoot = isNodeType.bind(null, _types.ROOT);\nexports.isRoot = isRoot;\nvar isSelector = isNodeType.bind(null, _types.SELECTOR);\nexports.isSelector = isSelector;\nvar isString = isNodeType.bind(null, _types.STRING);\nexports.isString = isString;\nvar isTag = isNodeType.bind(null, _types.TAG);\nexports.isTag = isTag;\nvar isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\nexports.isUniversal = isUniversal;\n\nfunction isPseudoElement(node) {\n  return isPseudo(node) && node.value && (node.value.startsWith(\"::\") || node.value.toLowerCase() === \":before\" || node.value.toLowerCase() === \":after\" || node.value.toLowerCase() === \":first-letter\" || node.value.toLowerCase() === \":first-line\");\n}\n\nfunction isPseudoClass(node) {\n  return isPseudo(node) && !isPseudoElement(node);\n}\n\nfunction isContainer(node) {\n  return !!(isNode(node) && node.walk);\n}\n\nfunction isNamespace(node) {\n  return isAttribute(node) || isTag(node);\n}","\"use strict\";\n\nexports.__esModule = true;\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\n\nvar _constructors = require(\"./constructors\");\n\nObject.keys(_constructors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _constructors[key]) return;\n  exports[key] = _constructors[key];\n});\n\nvar _guards = require(\"./guards\");\n\nObject.keys(_guards).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _guards[key]) return;\n  exports[key] = _guards[key];\n});","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar selectors = _interopRequireWildcard(require(\"./selectors\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parser = function parser(processor) {\n  return new _processor[\"default\"](processor);\n};\n\nObject.assign(parser, selectors);\ndelete parser.__esModule;\nvar _default = parser;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parser = require('postcss-selector-parser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-nesting-depth';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (depth) => `Expected nesting depth to be no more than ${depth}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-nesting-depth',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\t/**\n\t * @param {import('postcss').Node} node\n\t */\n\tconst isIgnoreAtRule = (node) =>\n\t\tisAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['blockless-at-rules', 'pseudo-classes'],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t\tignorePseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules(checkStatement);\n\t\troot.walkAtRules(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction checkStatement(statement) {\n\t\t\tif (isIgnoreAtRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isRule(statement) && !isStandardSyntaxRule(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst depth = nestingDepth(statement, 0);\n\n\t\t\tif (depth > primary) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: statement,\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {import('postcss').Node} node\n\t * @param {number} level\n\t * @returns {number}\n\t */\n\tfunction nestingDepth(node, level) {\n\t\tconst parent = node.parent;\n\n\t\tif (parent == null) {\n\t\t\tthrow new Error('The parent node must exist');\n\t\t}\n\n\t\tif (isIgnoreAtRule(parent)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// The nesting depth level's computation has finished\n\t\t// when this function, recursively called, receives\n\t\t// a node that is not nested -- a direct child of the\n\t\t// root node\n\t\tif (isRoot(parent) || (isAtRule(parent) && parent.parent && isRoot(parent.parent))) {\n\t\t\treturn level;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t */\n\t\tfunction containsPseudoClassesOnly(selector) {\n\t\t\tconst normalized = parser().processSync(selector, { lossless: false });\n\t\t\tconst selectors = normalized.split(',');\n\n\t\t\treturn selectors.every((sel) => extractPseudoRule(sel));\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} selectors\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction containsIgnoredPseudoClassesOnly(selectors) {\n\t\t\tif (!(secondaryOptions && secondaryOptions.ignorePseudoClasses)) return false;\n\n\t\t\treturn selectors.every((selector) => {\n\t\t\t\tconst pseudoRule = extractPseudoRule(selector);\n\n\t\t\t\tif (!pseudoRule) return false;\n\n\t\t\t\treturn optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoRule);\n\t\t\t});\n\t\t}\n\n\t\tif (\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'blockless-at-rules') &&\n\t\t\t\tisAtRule(node) &&\n\t\t\t\tnode.every((child) => !isDeclaration(child))) ||\n\t\t\t(optionsMatches(secondaryOptions, 'ignore', 'pseudo-classes') &&\n\t\t\t\tisRule(node) &&\n\t\t\t\tcontainsPseudoClassesOnly(node.selector)) ||\n\t\t\t(isRule(node) && containsIgnoredPseudoClassesOnly(node.selectors))\n\t\t) {\n\t\t\treturn nestingDepth(parent, level);\n\t\t}\n\n\t\t// Unless any of the conditions above apply, we want to\n\t\t// add 1 to the nesting depth level and then check the parent,\n\t\t// continuing to add and move up the hierarchy\n\t\t// until we hit the root node\n\t\treturn nestingDepth(parent, level + 1);\n\t}\n};\n\n/**\n * @param {string} selector\n * @returns {string | undefined}\n */\nfunction extractPseudoRule(selector) {\n\treturn selector.startsWith('&:') && selector[2] !== ':' ? selector.slice(2) : undefined;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a media query is a custom\n * @param {string} mediaQuery\n * @returns {boolean}\n */\nmodule.exports = function (mediaQuery) {\n\treturn mediaQuery.startsWith('--');\n};\n","'use strict';\n\n/**\n * Check whether a media feature is a range context one\n *\n * @param {string} mediaFeature feature\n * @return {boolean} If `true`, media feature is a range context one\n */\nmodule.exports = function (mediaFeature) {\n\treturn mediaFeature.includes('=') || mediaFeature.includes('<') || mediaFeature.includes('>');\n};\n","'use strict';\n\n/**\n * Check whether a media feature name is standard\n *\n * @param {string} mediaFeatureName\n * @returns {boolean}\n */\nmodule.exports = function (mediaFeatureName) {\n\t// SCSS interpolation\n\tif (/#\\{.+?\\}|\\$.+/.test(mediaFeatureName)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * A very generic node. Pretty much any element of a media query\r\n */\n\nfunction Node(opts) {\n  this.after = opts.after;\n  this.before = opts.before;\n  this.type = opts.type;\n  this.value = opts.value;\n  this.sourceIndex = opts.sourceIndex;\n}\n\nexports.default = Node;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Node = require('./Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Container(opts) {\n  var _this = this;\n\n  this.constructor(opts);\n\n  this.nodes = opts.nodes;\n\n  if (this.after === undefined) {\n    this.after = this.nodes.length > 0 ? this.nodes[this.nodes.length - 1].after : '';\n  }\n\n  if (this.before === undefined) {\n    this.before = this.nodes.length > 0 ? this.nodes[0].before : '';\n  }\n\n  if (this.sourceIndex === undefined) {\n    this.sourceIndex = this.before.length;\n  }\n\n  this.nodes.forEach(function (node) {\n    node.parent = _this; // eslint-disable-line no-param-reassign\n  });\n} /**\r\n   * A node that contains other nodes and support traversing over them\r\n   */\n\nContainer.prototype = Object.create(_Node2.default.prototype);\nContainer.constructor = _Node2.default;\n\n/**\r\n * Iterate over descendant nodes of the node\r\n *\r\n * @param {RegExp|string} filter - Optional. Only nodes with node.type that\r\n *    satisfies the filter will be traversed over\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.walk = function walk(filter, cb) {\n  var hasFilter = typeof filter === 'string' || filter instanceof RegExp;\n  var callback = hasFilter ? cb : filter;\n  var filterReg = typeof filter === 'string' ? new RegExp(filter) : filter;\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    var filtered = hasFilter ? filterReg.test(node.type) : true;\n    if (filtered && callback && callback(node, i, this.nodes) === false) {\n      return false;\n    }\n    if (node.nodes && node.walk(filter, cb) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Iterate over immediate children of the node\r\n *\r\n * @param {function} cb - callback to call on each node. Takes theese params:\r\n *    node - the node being processed, i - it's index, nodes - the array\r\n *    of all nodes\r\n *    If false is returned, the iteration breaks\r\n *\r\n * @return (boolean) false, if the iteration was broken\r\n */\nContainer.prototype.each = function each() {\n  var cb = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];\n\n  for (var i = 0; i < this.nodes.length; i++) {\n    var node = this.nodes[i];\n    if (cb(node, i, this.nodes) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.default = Container;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMediaFeature = parseMediaFeature;\nexports.parseMediaQuery = parseMediaQuery;\nexports.parseMediaList = parseMediaList;\n\nvar _Node = require('./nodes/Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media feature expression, e.g. `max-width: 10px`, `(color)`\r\n *\r\n * @param {string} string - the source expression string, can be inside parens\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes, the first element being a media feature,\r\n *    the secont - its value (may be missing)\r\n */\n\nfunction parseMediaFeature(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var modesEntered = [{\n    mode: 'normal',\n    character: null\n  }];\n  var result = [];\n  var lastModeIndex = 0;\n  var mediaFeature = '';\n  var colon = null;\n  var mediaFeatureValue = null;\n  var indexLocal = index;\n\n  var stringNormalized = string;\n  // Strip trailing parens (if any), and correct the starting index\n  if (string[0] === '(' && string[string.length - 1] === ')') {\n    stringNormalized = string.substring(1, string.length - 1);\n    indexLocal++;\n  }\n\n  for (var i = 0; i < stringNormalized.length; i++) {\n    var character = stringNormalized[i];\n\n    // If entering/exiting a string\n    if (character === '\\'' || character === '\"') {\n      if (modesEntered[lastModeIndex].isCalculationEnabled === true) {\n        modesEntered.push({\n          mode: 'string',\n          isCalculationEnabled: false,\n          character: character\n        });\n        lastModeIndex++;\n      } else if (modesEntered[lastModeIndex].mode === 'string' && modesEntered[lastModeIndex].character === character && stringNormalized[i - 1] !== '\\\\') {\n        modesEntered.pop();\n        lastModeIndex--;\n      }\n    }\n\n    // If entering/exiting interpolation\n    if (character === '{') {\n      modesEntered.push({\n        mode: 'interpolation',\n        isCalculationEnabled: true\n      });\n      lastModeIndex++;\n    } else if (character === '}') {\n      modesEntered.pop();\n      lastModeIndex--;\n    }\n\n    // If a : is met outside of a string, function call or interpolation, than\n    // this : separates a media feature and a value\n    if (modesEntered[lastModeIndex].mode === 'normal' && character === ':') {\n      var mediaFeatureValueStr = stringNormalized.substring(i + 1);\n      mediaFeatureValue = {\n        type: 'value',\n        before: /^(\\s*)/.exec(mediaFeatureValueStr)[1],\n        after: /(\\s*)$/.exec(mediaFeatureValueStr)[1],\n        value: mediaFeatureValueStr.trim()\n      };\n      // +1 for the colon\n      mediaFeatureValue.sourceIndex = mediaFeatureValue.before.length + i + 1 + indexLocal;\n      colon = {\n        type: 'colon',\n        sourceIndex: i + indexLocal,\n        after: mediaFeatureValue.before,\n        value: ':' };\n      break;\n    }\n\n    mediaFeature += character;\n  }\n\n  // Forming a media feature node\n  mediaFeature = {\n    type: 'media-feature',\n    before: /^(\\s*)/.exec(mediaFeature)[1],\n    after: /(\\s*)$/.exec(mediaFeature)[1],\n    value: mediaFeature.trim()\n  };\n  mediaFeature.sourceIndex = mediaFeature.before.length + indexLocal;\n  result.push(mediaFeature);\n\n  if (colon !== null) {\n    colon.before = mediaFeature.after;\n    result.push(colon);\n  }\n\n  if (mediaFeatureValue !== null) {\n    result.push(mediaFeatureValue);\n  }\n\n  return result;\n}\n\n/**\r\n * Parses a media query, e.g. `screen and (color)`, `only tv`\r\n *\r\n * @param {string} string - the source media query string\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes and Containers\r\n */\n\nfunction parseMediaQuery(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  var result = [];\n\n  // How many timies the parser entered parens/curly braces\n  var localLevel = 0;\n  // Has any keyword, media type, media feature expression or interpolation\n  // ('element' hereafter) started\n  var insideSomeValue = false;\n  var node = void 0;\n\n  function resetNode() {\n    return {\n      before: '',\n      after: '',\n      value: ''\n    };\n  }\n\n  node = resetNode();\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    // If not yet entered any element\n    if (!insideSomeValue) {\n      if (character.search(/\\s/) !== -1) {\n        // A whitespace\n        // Don't form 'after' yet; will do it later\n        node.before += character;\n      } else {\n        // Not a whitespace - entering an element\n        // Expression start\n        if (character === '(') {\n          node.type = 'media-feature-expression';\n          localLevel++;\n        }\n        node.value = character;\n        node.sourceIndex = index + i;\n        insideSomeValue = true;\n      }\n    } else {\n      // Already in the middle of some alement\n      node.value += character;\n\n      // Here parens just increase localLevel and don't trigger a start of\n      // a media feature expression (since they can't be nested)\n      // Interpolation start\n      if (character === '{' || character === '(') {\n        localLevel++;\n      }\n      // Interpolation/function call/media feature expression end\n      if (character === ')' || character === '}') {\n        localLevel--;\n      }\n    }\n\n    // If exited all parens/curlies and the next symbol\n    if (insideSomeValue && localLevel === 0 && (character === ')' || i === string.length - 1 || string[i + 1].search(/\\s/) !== -1)) {\n      if (['not', 'only', 'and'].indexOf(node.value) !== -1) {\n        node.type = 'keyword';\n      }\n      // if it's an expression, parse its contents\n      if (node.type === 'media-feature-expression') {\n        node.nodes = parseMediaFeature(node.value, node.sourceIndex);\n      }\n      result.push(Array.isArray(node.nodes) ? new _Container2.default(node) : new _Node2.default(node));\n      node = resetNode();\n      insideSomeValue = false;\n    }\n  }\n\n  // Now process the result array - to specify undefined types of the nodes\n  // and specify the `after` prop\n  for (var _i = 0; _i < result.length; _i++) {\n    node = result[_i];\n    if (_i > 0) {\n      result[_i - 1].after = node.before;\n    }\n\n    // Node types. Might not be set because contains interpolation/function\n    // calls or fully consists of them\n    if (node.type === undefined) {\n      if (_i > 0) {\n        // only `and` can follow an expression\n        if (result[_i - 1].type === 'media-feature-expression') {\n          node.type = 'keyword';\n          continue;\n        }\n        // Anything after 'only|not' is a media type\n        if (result[_i - 1].value === 'not' || result[_i - 1].value === 'only') {\n          node.type = 'media-type';\n          continue;\n        }\n        // Anything after 'and' is an expression\n        if (result[_i - 1].value === 'and') {\n          node.type = 'media-feature-expression';\n          continue;\n        }\n\n        if (result[_i - 1].type === 'media-type') {\n          // if it is the last element - it might be an expression\n          // or 'and' depending on what is after it\n          if (!result[_i + 1]) {\n            node.type = 'media-feature-expression';\n          } else {\n            node.type = result[_i + 1].type === 'media-feature-expression' ? 'keyword' : 'media-feature-expression';\n          }\n        }\n      }\n\n      if (_i === 0) {\n        // `screen`, `fn( ... )`, `#{ ... }`. Not an expression, since then\n        // its type would have been set by now\n        if (!result[_i + 1]) {\n          node.type = 'media-type';\n          continue;\n        }\n\n        // `screen and` or `#{...} (max-width: 10px)`\n        if (result[_i + 1] && (result[_i + 1].type === 'media-feature-expression' || result[_i + 1].type === 'keyword')) {\n          node.type = 'media-type';\n          continue;\n        }\n        if (result[_i + 2]) {\n          // `screen and (color) ...`\n          if (result[_i + 2].type === 'media-feature-expression') {\n            node.type = 'media-type';\n            result[_i + 1].type = 'keyword';\n            continue;\n          }\n          // `only screen and ...`\n          if (result[_i + 2].type === 'keyword') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            continue;\n          }\n        }\n        if (result[_i + 3]) {\n          // `screen and (color) ...`\n          if (result[_i + 3].type === 'media-feature-expression') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            result[_i + 2].type = 'keyword';\n            continue;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query list. Takes a possible `url()` at the start into\r\n * account, and divides the list into media queries that are parsed separately\r\n *\r\n * @param {string} string - the source media query list string\r\n *\r\n * @return {Array} an array of Nodes/Containers\r\n */\n\nfunction parseMediaList(string) {\n  var result = [];\n  var interimIndex = 0;\n  var levelLocal = 0;\n\n  // Check for a `url(...)` part (if it is contents of an @import rule)\n  var doesHaveUrl = /^(\\s*)url\\s*\\(/.exec(string);\n  if (doesHaveUrl !== null) {\n    var i = doesHaveUrl[0].length;\n    var parenthesesLv = 1;\n    while (parenthesesLv > 0) {\n      var character = string[i];\n      if (character === '(') {\n        parenthesesLv++;\n      }\n      if (character === ')') {\n        parenthesesLv--;\n      }\n      i++;\n    }\n    result.unshift(new _Node2.default({\n      type: 'url',\n      value: string.substring(0, i).trim(),\n      sourceIndex: doesHaveUrl[1].length,\n      before: doesHaveUrl[1],\n      after: /^(\\s*)/.exec(string.substring(i))[1]\n    }));\n    interimIndex = i;\n  }\n\n  // Start processing the media query list\n  for (var _i2 = interimIndex; _i2 < string.length; _i2++) {\n    var _character = string[_i2];\n\n    // Dividing the media query list into comma-separated media queries\n    // Only count commas that are outside of any parens\n    // (i.e., not part of function call params list, etc.)\n    if (_character === '(') {\n      levelLocal++;\n    }\n    if (_character === ')') {\n      levelLocal--;\n    }\n    if (levelLocal === 0 && _character === ',') {\n      var _mediaQueryString = string.substring(interimIndex, _i2);\n      var _spaceBefore = /^(\\s*)/.exec(_mediaQueryString)[1];\n      result.push(new _Container2.default({\n        type: 'media-query',\n        value: _mediaQueryString.trim(),\n        sourceIndex: interimIndex + _spaceBefore.length,\n        nodes: parseMediaQuery(_mediaQueryString, interimIndex),\n        before: _spaceBefore,\n        after: /(\\s*)$/.exec(_mediaQueryString)[1]\n      }));\n      interimIndex = _i2 + 1;\n    }\n  }\n\n  var mediaQueryString = string.substring(interimIndex);\n  var spaceBefore = /^(\\s*)/.exec(mediaQueryString)[1];\n  result.push(new _Container2.default({\n    type: 'media-query',\n    value: mediaQueryString.trim(),\n    sourceIndex: interimIndex + spaceBefore.length,\n    nodes: parseMediaQuery(mediaQueryString, interimIndex),\n    before: spaceBefore,\n    after: /(\\s*)$/.exec(mediaQueryString)[1]\n  }));\n\n  return result;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseMedia;\n\nvar _Container = require('./nodes/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _parsers = require('./parsers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Parses a media query list into an array of nodes. A typical node signature:\r\n *  {string} node.type -- one of: 'media-query', 'media-type', 'keyword',\r\n *    'media-feature-expression', 'media-feature', 'colon', 'value'\r\n *  {string} node.value -- the contents of a particular element, trimmed\r\n *    e.g.: `screen`, `max-width`, `1024px`\r\n *  {string} node.after -- whitespaces that follow the element\r\n *  {string} node.before -- whitespaces that precede the element\r\n *  {string} node.sourceIndex -- the index of the element in a source media\r\n *    query list, 0-based\r\n *  {object} node.parent -- a link to the parent node (a container)\r\n *\r\n * Some nodes (media queries, media feature expressions) contain other nodes.\r\n * They additionally have:\r\n *  {array} node.nodes -- an array of nodes of the type described here\r\n *  {funciton} node.each -- traverses direct children of the node, calling\r\n *    a callback for each one\r\n *  {funciton} node.walk -- traverses ALL descendants of the node, calling\r\n *    a callback for each one\r\n */\n\nfunction parseMedia(value) {\n  return new _Container2.default({\n    nodes: (0, _parsers.parseMediaList)(value),\n    type: 'media-query-list',\n    value: value.trim()\n  });\n}","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst { assert } = require('../utils/validateTypes');\n\nconst rangeOperators = new Set(['>=', '<=', '>', '<', '=']);\n\n/**\n * @param {string} name\n * @returns {boolean}\n */\nfunction isRangeContextName(name) {\n\t// When the node is like \"(width > 10em)\" or \"(10em < width)\"\n\t// Regex is needed because the name can either be in the first or second position\n\treturn /^(?!--)\\D/.test(name) || /^--./.test(name);\n}\n\n/**\n * @typedef {{ value: string, sourceIndex: number }} RangeContextNode\n *\n * @param {import('postcss-media-query-parser').Node} node\n * @returns {{ name: RangeContextNode, values: RangeContextNode[] }}\n */\nmodule.exports = function rangeContextNodeParser(node) {\n\t/** @type {import('postcss-value-parser').WordNode | undefined} */\n\tlet nameNode;\n\n\t/** @type {import('postcss-value-parser').WordNode[]} */\n\tconst valueNodes = [];\n\n\tvalueParser(node.value).walk((valueNode) => {\n\t\tif (valueNode.type !== 'word') return;\n\n\t\tif (rangeOperators.has(valueNode.value)) return;\n\n\t\tif (nameNode == null && isRangeContextName(valueNode.value)) {\n\t\t\tnameNode = valueNode;\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueNodes.push(valueNode);\n\t});\n\n\tassert(nameNode);\n\n\treturn {\n\t\tname: {\n\t\t\tvalue: nameNode.value,\n\t\t\tsourceIndex: node.sourceIndex + nameNode.sourceIndex,\n\t\t},\n\n\t\tvalues: valueNodes.map((valueNode) => ({\n\t\t\tvalue: valueNode.value,\n\t\t\tsourceIndex: node.sourceIndex + valueNode.sourceIndex,\n\t\t})),\n\t};\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nmodule.exports = ['calc', 'clamp', 'max', 'min'];\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getAtRuleParams = require('../../utils/getAtRuleParams');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isMathFunction = require('../../utils/isMathFunction');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setAtRuleParams = require('../../utils/setAtRuleParams');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'length-zero-no-unit';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected unit',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/length-zero-no-unit',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-properties'],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) return;\n\n\t\tlet needsFix;\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode) {\n\t\t\tconst { value, sourceIndex } = valueNode;\n\n\t\t\tif (isMathFunction(valueNode)) return false;\n\n\t\t\tif (isFunction(valueNode) && optionsMatches(secondaryOptions, 'ignoreFunctions', value))\n\t\t\t\treturn false;\n\n\t\t\tif (!isWord(valueNode)) return;\n\n\t\t\tconst numberUnit = valueParser.unit(value);\n\n\t\t\tif (numberUnit === false) return;\n\n\t\t\tconst { number, unit } = numberUnit;\n\n\t\t\tif (unit === '') return;\n\n\t\t\tif (!isLength(unit)) return;\n\n\t\t\tif (isFraction(unit)) return;\n\n\t\t\tif (!isZero(number)) return;\n\n\t\t\tif (context.fix) {\n\t\t\t\tlet regularNumber = number;\n\n\t\t\t\tif (regularNumber.startsWith('.')) {\n\t\t\t\t\tregularNumber = number.slice(1);\n\t\t\t\t}\n\n\t\t\t\tvalueNode.value = regularNumber;\n\t\t\t\tneedsFix = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = nodeIndex + sourceIndex + number.length;\n\t\t\tconst endIndex = index + unit.length;\n\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tendIndex,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} node\n\t\t */\n\t\tfunction checkAtRule(node) {\n\t\t\tif (!isStandardSyntaxAtRule(node)) return;\n\n\t\t\tneedsFix = false;\n\n\t\t\tconst index = atRuleParamIndex(node);\n\t\t\tconst parsedValue = valueParser(getAtRuleParams(node));\n\n\t\t\tparsedValue.walk((valueNode) => check(node, index, valueNode));\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetAtRuleParams(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} node\n\t\t */\n\t\tfunction checkDecl(node) {\n\t\t\tneedsFix = false;\n\n\t\t\tconst { prop } = node;\n\n\t\t\tif (isLineHeight(prop)) return;\n\n\t\t\tif (isFlex(prop)) return;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'custom-properties') && isCustomProperty(prop))\n\t\t\t\treturn;\n\n\t\t\tconst index = declarationValueIndex(node);\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(node));\n\n\t\t\tparsedValue.walk((valueNode, valueNodeIndex, valueNodes) => {\n\t\t\t\tif (isLineHeightValue(node, valueNodes, valueNodeIndex)) return;\n\n\t\t\t\treturn check(node, index, valueNode);\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(node, parsedValue.toString());\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules(checkAtRule);\n\t\troot.walkDecls(checkDecl);\n\t};\n};\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {import('postcss-value-parser').Node[]} nodes\n * @param {number} index\n */\nfunction isLineHeightValue({ prop }, nodes, index) {\n\tconst lastNode = nodes[index - 1];\n\n\treturn (\n\t\tprop.toLowerCase() === 'font' && lastNode && lastNode.type === 'div' && lastNode.value === '/'\n\t);\n}\n\n/**\n * @param {string} prop\n */\nfunction isLineHeight(prop) {\n\treturn prop.toLowerCase() === 'line-height';\n}\n\n/**\n * @param {string} prop\n */\nfunction isFlex(prop) {\n\treturn prop.toLowerCase() === 'flex';\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isWord({ type }) {\n\treturn type === 'word';\n}\n\n/**\n * @param {string} unit\n */\nfunction isLength(unit) {\n\treturn keywordSets.lengthUnits.has(unit.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isFunction({ type }) {\n\treturn type === 'function';\n}\n\n/**\n * @param {string} unit\n */\nfunction isFraction(unit) {\n\treturn unit.toLowerCase() === 'fr';\n}\n\n/**\n * @param {string} number\n */\nfunction isZero(number) {\n\treturn Number.parseFloat(number) === 0;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst MATH_FUNCTIONS = require('../reference/mathFunctions');\n\n/**\n * Check whether a node is math function\n *\n * @param {import('postcss-value-parser').Node} node postcss-value-parser node\n * @return {boolean} If `true`, the node is math function\n */\nmodule.exports = function isMathFunction(node) {\n\treturn node.type === 'function' && MATH_FUNCTIONS.includes(node.value.toLowerCase());\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   fix: ((node: import('postcss').AtRule, index: number) => boolean) | null,\n *   result: import('stylelint').PostcssResult,\n *   checkedRuleName: string,\n * }} opts\n */\nmodule.exports = function mediaFeatureColonSpaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ':' }, (match) => {\n\t\t\tcheckColon(params, match.startIndex, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkColon(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst colonIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, colonIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: colonIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-colon-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index + 1);\n\t\t\t\t\tconst afterColon = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(value, primary)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-colon-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, colonIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of colonIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeColon = params.slice(0, index);\n\t\t\t\t\tconst afterColon = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, ' ') + afterColon;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeColon.replace(/\\s*$/, '') + afterColon;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tlet hasComments = atRule.raws.params && atRule.raws.params.raw;\n\t\t\tconst mediaRule = hasComments ? hasComments : atRule.params;\n\n\t\t\tmediaParser(mediaRule).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst expectedFeatureName = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expectedFeatureName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\thasComments.slice(sourceIndex + expectedFeatureName.length);\n\n\t\t\t\t\t\tif (atRule.raws.params == null) {\n\t\t\t\t\t\t\tthrow new Error('The `AtRuleRaws` node must have a `params` property');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tatRule.raws.params.raw = hasComments;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tatRule.params =\n\t\t\t\t\t\t\tatRule.params.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\tatRule.params.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.expected(value, expectedFeatureName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\nconst isRegexp = require('is-regexp');\n\nconst flagMap = {\n\tglobal: 'g',\n\tignoreCase: 'i',\n\tmultiline: 'm',\n\tdotAll: 's',\n\tsticky: 'y',\n\tunicode: 'u'\n};\n\nmodule.exports = (regexp, options = {}) => {\n\tif (!isRegexp(regexp)) {\n\t\tthrow new TypeError('Expected a RegExp instance');\n\t}\n\n\tconst flags = Object.keys(flagMap).map(flag => (\n\t\t(typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : ''\n\t)).join('');\n\n\tconst clonedRegexp = new RegExp(options.source || regexp.source, flags);\n\n\tclonedRegexp.lastIndex = typeof options.lastIndex === 'number' ?\n\t\toptions.lastIndex :\n\t\tregexp.lastIndex;\n\n\treturn clonedRegexp;\n};\n","'use strict';\n\nmodule.exports = input => Object.prototype.toString.call(input) === '[object RegExp]';\n","'use strict';\nconst cloneRegexp = require('clone-regexp');\n\nmodule.exports = (regexp, string) => {\n\tlet match;\n\tconst matches = [];\n\tconst clonedRegexp = cloneRegexp(regexp, {lastIndex: 0});\n\tconst isGlobal = clonedRegexp.global;\n\n\t// eslint-disable-next-line no-cond-assign\n\twhile (match = clonedRegexp.exec(string)) {\n\t\tmatches.push({\n\t\t\tmatch: match[0],\n\t\t\tsubMatches: match.slice(1),\n\t\t\tindex: match.index\n\t\t});\n\n\t\tif (!isGlobal) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn matches;\n};\n","'use strict';\n\nconst execall = require('execall');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'max-line-length';\nconst EXCLUDED_PATTERNS = [\n\t/url\\(\\s*(\\S.*\\S)\\s*\\)/gi, // allow tab, whitespace in url content\n\t/@import\\s+(['\"].*['\"])/gi,\n];\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) =>\n\t\t`Expected line length to be no more than ${max} ${max === 1 ? 'character' : 'characters'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/max-line-length',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['non-comments', 'comments'],\n\t\t\t\t\tignorePattern: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source');\n\t\t}\n\n\t\tconst ignoreNonComments = optionsMatches(secondaryOptions, 'ignore', 'non-comments');\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\t\t// Array of skipped sub strings, i.e `url(...)`, `@import \"...\"`\n\t\t/** @type {Array<[number, number]>} */\n\t\tlet skippedSubStrings = [];\n\t\tlet skippedSubStringsIndex = 0;\n\n\t\tfor (const pattern of EXCLUDED_PATTERNS)\n\t\t\tfor (const match of execall(pattern, rootString)) {\n\t\t\t\tconst subMatch = match.subMatches[0] || '';\n\t\t\t\tconst startOfSubString = match.index + match.match.indexOf(subMatch);\n\n\t\t\t\tskippedSubStrings.push([startOfSubString, startOfSubString + subMatch.length]);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\tskippedSubStrings = skippedSubStrings.sort((a, b) => a[0] - b[0]);\n\n\t\t// Check first line\n\t\tcheckNewline({ endIndex: 0 });\n\t\t// Check subsequent lines\n\t\tstyleSearch({ source: rootString, target: ['\\n'], comments: 'check' }, (match) =>\n\t\t\tcheckNewline(match),\n\t\t);\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode: root,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {number} start\n\t\t * @param {number} end\n\t\t */\n\t\tfunction tryToPopSubString(start, end) {\n\t\t\tconst skippedSubString = skippedSubStrings[skippedSubStringsIndex];\n\n\t\t\tassert(skippedSubString);\n\t\t\tconst [startSubString, endSubString] = skippedSubString;\n\n\t\t\t// Excluded substring does not presented in current line\n\t\t\tif (end < startSubString) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// Compute excluded substring size regarding to current line indexes\n\t\t\tconst excluded = Math.min(end, endSubString) - Math.max(start, startSubString);\n\n\t\t\t// Current substring is out of range for next lines\n\t\t\tif (endSubString <= end) {\n\t\t\t\tskippedSubStringsIndex++;\n\t\t\t}\n\n\t\t\treturn excluded;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch | { endIndex: number }} match\n\t\t */\n\t\tfunction checkNewline(match) {\n\t\t\tlet nextNewlineIndex = rootString.indexOf('\\n', match.endIndex);\n\n\t\t\tif (rootString[nextNewlineIndex - 1] === '\\r') {\n\t\t\t\tnextNewlineIndex -= 1;\n\t\t\t}\n\n\t\t\t// Accommodate last line\n\t\t\tif (nextNewlineIndex === -1) {\n\t\t\t\tnextNewlineIndex = rootString.length;\n\t\t\t}\n\n\t\t\tconst rawLineLength = nextNewlineIndex - match.endIndex;\n\t\t\tconst excludedLength = skippedSubStrings[skippedSubStringsIndex]\n\t\t\t\t? tryToPopSubString(match.endIndex, nextNewlineIndex)\n\t\t\t\t: 0;\n\t\t\tconst lineText = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\t// Case sensitive ignorePattern match\n\t\t\tif (optionsMatches(secondaryOptions, 'ignorePattern', lineText)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the line's length is less than or equal to the specified\n\t\t\t// max, ignore it ... So anything below is liable to be complained about.\n\t\t\t// **Note that the length of any url arguments or import urls\n\t\t\t// are excluded from the calculation.**\n\t\t\tif (rawLineLength - excludedLength <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = nextNewlineIndex - 1;\n\n\t\t\tif (ignoreComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars === '/*' || nextTwoChars === '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignoreNonComments) {\n\t\t\t\tif ('insideComment' in match && match.insideComment) {\n\t\t\t\t\treturn complain(complaintIndex);\n\t\t\t\t}\n\n\t\t\t\t// This trimming business is to notice when the line starts a\n\t\t\t\t// comment but that comment is indented, e.g.\n\t\t\t\t//       /* something here */\n\t\t\t\tconst nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2);\n\n\t\t\t\tif (nextTwoChars !== '/*' && nextTwoChars !== '//') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn complain(complaintIndex);\n\t\t\t}\n\n\t\t\t// If there are no spaces besides initial (indent) spaces, ignore it\n\t\t\tconst lineString = rootString.slice(match.endIndex, nextNewlineIndex);\n\n\t\t\tif (!lineString.replace(/^\\s+/, '').includes(' ')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn complain(complaintIndex);\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'linebreaks';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (linebreak) => `Expected linebreak to be ${linebreak}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/linebreaks',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['unix', 'windows'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldHaveCR = primary === 'windows';\n\n\t\tif (context.fix) {\n\t\t\troot.walk((node) => {\n\t\t\t\tif ('selector' in node) {\n\t\t\t\t\tnode.selector = fixData(node.selector);\n\t\t\t\t}\n\n\t\t\t\tif ('value' in node) {\n\t\t\t\t\tnode.value = fixData(node.value);\n\t\t\t\t}\n\n\t\t\t\tif ('text' in node) {\n\t\t\t\t\tnode.text = fixData(node.text);\n\t\t\t\t}\n\n\t\t\t\tif (node.raws.before) {\n\t\t\t\t\tnode.raws.before = fixData(node.raws.before);\n\t\t\t\t}\n\n\t\t\t\tif (typeof node.raws.after === 'string') {\n\t\t\t\t\tnode.raws.after = fixData(node.raws.after);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (typeof root.raws.after === 'string') {\n\t\t\t\troot.raws.after = fixData(root.raws.after);\n\t\t\t}\n\t\t} else {\n\t\t\tif (root.source == null) throw new Error('The root node must have a source');\n\n\t\t\tconst lines = root.source.input.css.split('\\n');\n\n\t\t\tfor (let [i, line] of lines.entries()) {\n\t\t\t\tif (i < lines.length - 1 && !line.includes('\\r')) {\n\t\t\t\t\tline += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (hasError(line)) {\n\t\t\t\t\tconst lineNum = i + 1;\n\t\t\t\t\tconst colNum = line.length;\n\n\t\t\t\t\treportNewlineError(lineNum, colNum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} dataToCheck\n\t\t */\n\t\tfunction hasError(dataToCheck) {\n\t\t\tconst hasNewlineToVerify = /[\\r\\n]/.test(dataToCheck);\n\t\t\tconst hasCR = hasNewlineToVerify ? /\\r/.test(dataToCheck) : false;\n\n\t\t\treturn hasNewlineToVerify && hasCR !== shouldHaveCR;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} data\n\t\t */\n\t\tfunction fixData(data) {\n\t\t\tif (data) {\n\t\t\t\tlet res = data.replace(/\\r/g, '');\n\n\t\t\t\tif (shouldHaveCR) {\n\t\t\t\t\tres = res.replace(/\\n/g, '\\r\\n');\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\n\t\t * @param {number} line\n\t\t * @param {number} column\n\t\t */\n\t\tfunction reportNewlineError(line, column) {\n\t\t\t// Creating a node manually helps us to point to empty lines.\n\t\t\tconst node = postcss.rule({\n\t\t\t\tsource: {\n\t\t\t\t\tstart: { line, column, offset: 0 },\n\t\t\t\t\tinput: new postcss.Input(''),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'media-feature-name-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (mediaFeatureName) => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreMediaFeatureNames: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreMediaFeatureNames', value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (vendor.prefix(value) || keywordSets.mediaFeatureNames.has(value.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = atRuleParamIndex(atRule) + sourceIndex;\n\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected vendor-prefix',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst params = atRule.params;\n\n\t\t\tif (!isAutoprefixable.mediaFeatureName(params)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.params = isAutoprefixable.unprefix(atRule.params);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const match of matches) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: match,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst { assertString } = require('../utils/validateTypes');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (args: { source: string, index: number, err: (message: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((atRule: import('postcss').AtRule, index: number) => boolean) | null | undefined,\n *   allowTrailingComments?: boolean,\n * }} opts\n */\nmodule.exports = function mediaQueryListCommaWhitespaceChecker(opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ',' }, (match) => {\n\t\t\tlet index = match.startIndex;\n\n\t\t\tif (opts.allowTrailingComments) {\n\t\t\t\t// if there is a comment on the same line at after the comma, check the space after the comment.\n\t\t\t\tlet execResult;\n\n\t\t\t\twhile ((execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[0]);\n\t\t\t\t\tindex += execResult[0].length;\n\t\t\t\t}\n\n\t\t\t\tif ((execResult = /^([^\\S\\r\\n]*\\/\\/[\\s\\S]*?)\\r?\\n/.exec(params.slice(index + 1)))) {\n\t\t\t\t\tassertString(execResult[1]);\n\t\t\t\t\tindex += execResult[1].length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckComma(params, index, atRule);\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').AtRule} node\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tconst commaIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, commaIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: commaIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index);\n\t\t\t\t\tconst afterComma = params.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, ' ') + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma.replace(/\\s*$/, '') + afterComma;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-value-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name, value) => `Unexpected value \"${value}\" for name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-name-value-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature-expression$/i, (node) => {\n\t\t\t\tif (!node.nodes) return;\n\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(node.parent.value);\n\n\t\t\t\t// Ignore boolean\n\t\t\t\tif (!node.value.includes(':') && !mediaFeatureRangeContext) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mediaFeatureNode = node.nodes.find((n) => n.type === 'media-feature');\n\n\t\t\t\tif (mediaFeatureNode == null) throw new Error('A `media-feature` node must be present');\n\n\t\t\t\tlet mediaFeatureName;\n\t\t\t\tlet values;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tmediaFeatureName = parsedRangeContext.name.value;\n\t\t\t\t\tvalues = parsedRangeContext.values;\n\t\t\t\t} else {\n\t\t\t\t\tmediaFeatureName = mediaFeatureNode.value;\n\t\t\t\t\tconst valueNode = node.nodes.find((n) => n.type === 'value');\n\n\t\t\t\t\tif (valueNode == null) throw new Error('A `value` node must be present');\n\n\t\t\t\t\tvalues = [valueNode];\n\t\t\t\t}\n\n\t\t\t\tfor (const valueNode of values) {\n\t\t\t\t\tconst value = valueNode.value;\n\t\t\t\t\tconst unprefixedMediaFeatureName = vendor.unprefixed(mediaFeatureName);\n\n\t\t\t\t\tconst allowedValuesKey = Object.keys(primary).find((featureName) =>\n\t\t\t\t\t\tmatchesStringOrRegExp(unprefixedMediaFeatureName, featureName),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (allowedValuesKey == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(primary, allowedValuesKey, value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = atRuleParamIndex(atRule) + valueNode.sourceIndex;\n\t\t\t\t\tconst endIndex = index + value.length;\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t\tmessage: messages.rejected(mediaFeatureName, value),\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst rangeOperators = ['>=', '<=', '>', '<', '='];\n\n/** @typedef {import('style-search').StyleSearchMatch} StyleSearchMatch */\n\n/**\n * @template {import('postcss').AtRule} T\n * @param {T} atRule\n * @param {(match: StyleSearchMatch, params: string, atRule: T) => void} cb\n */\nmodule.exports = function findMediaOperator(atRule, cb) {\n\tif (atRule.name.toLowerCase() !== 'media') {\n\t\treturn;\n\t}\n\n\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\tstyleSearch({ source: params, target: rangeOperators }, (match) => {\n\t\tconst before = params[match.startIndex - 1];\n\n\t\tif (before === '>' || before === '<') {\n\t\t\treturn;\n\t\t}\n\n\t\tcb(match, params, atRule);\n\t});\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after range operator',\n\trejectedAfter: () => 'Unexpected whitespace after range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-range-operator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckAfterOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index + 1);\n\t\t\t\t\tconst afterOperator = params.slice(index + 1);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator + afterOperator.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkAfterOperator(match, params, node, fix) {\n\t\t\tconst endIndex = match.startIndex + match.target.length - 1;\n\n\t\t\tchecker.after({\n\t\t\t\tsource: params,\n\t\t\t\tindex: endIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(endIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: endIndex + atRuleParamIndex(node) + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before range operator',\n\trejectedBefore: () => 'Unexpected whitespace before range operator',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-range-operator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixOperatorIndices = [];\n\t\t\t/** @type {((index: number) => void) | null} */\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckBeforeOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of fixOperatorIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeOperator = params.slice(0, index);\n\t\t\t\t\tconst afterOperator = params.slice(index);\n\n\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n\t\t\t\t\t} else if (primary === 'never') {\n\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('style-search').StyleSearchMatch} match\n\t\t * @param {string} params\n\t\t * @param {import('postcss').AtRule} node\n\t\t * @param {((index: number) => void) | null} fix\n\t\t */\n\t\tfunction checkBeforeOperator(match, params, node, fix) {\n\t\t\t// The extra `+ 1` is because the match itself contains\n\t\t\t// the character before the operator\n\t\t\tchecker.before({\n\t\t\t\tsource: params,\n\t\t\t\tindex: match.startIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: match.startIndex - 1 + atRuleParamIndex(node),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-feature-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t// If there are comments in the params, the complete string\n\t\t\t// will be at atRule.raws.params.raw\n\t\t\tconst params = (atRule.raws.params && atRule.raws.params.raw) || atRule.params;\n\t\t\tconst indexBoost = atRuleParamIndex(atRule);\n\t\t\t/** @type {Array<{ message: string, index: number }>} */\n\t\t\tconst problems = [];\n\n\t\t\tconst parsedParams = valueParser(params).walk((node) => {\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tconst len = valueParser.stringify(node).length;\n\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tif (/[ \\t]/.test(node.before)) {\n\t\t\t\t\t\t\tif (context.fix) node.before = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/[ \\t]/.test(node.after)) {\n\t\t\t\t\t\t\tif (context.fix) node.after = '';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'always') {\n\t\t\t\t\t\tif (node.before === '') {\n\t\t\t\t\t\t\tif (context.fix) node.before = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.after === '') {\n\t\t\t\t\t\t\tif (context.fix) node.after = ' ';\n\n\t\t\t\t\t\t\tproblems.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tatRule.params = parsedParams.toString();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const err of problems) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports = function resolveNestedSelector(selector, node) {\n  var parent = node.parent;\n  var parentIsNestAtRule = parent.type === 'atrule' && parent.name === 'nest';\n\n  if (parent.type === 'root') return [selector];\n  if (parent.type !== 'rule' && !parentIsNestAtRule) return resolveNestedSelector(selector, parent);\n\n  var parentSelectors = (parentIsNestAtRule)\n    ? parent.params.split(',').map(function(s) { return s.trim(); })\n    : parent.selectors;\n\n  var resolvedSelectors = parentSelectors.reduce(function(result, parentSelector) {\n    if (selector.indexOf('&') !== -1) {\n      var newlyResolvedSelectors = resolveNestedSelector(parentSelector, parent).map(function(resolvedParentSelector) {\n        return selector.replace(/&/g, resolvedParentSelector);\n      });\n      return result.concat(newlyResolvedSelectors);\n    }\n\n    var combinedSelector = [ parentSelector, selector ].join(' ');\n    return result.concat(resolveNestedSelector(combinedSelector, parent));\n  }, []);\n\n  return resolvedSelectors;\n}\n","import e from\"postcss-selector-parser\";function s(n){if(!n)return{a:0,b:0,c:0};let t=0,c=0,o=0;if(\"universal\"==n.type)return{a:0,b:0,c:0};if(\"id\"===n.type)t+=1;else if(\"tag\"===n.type)o+=1;else if(\"class\"===n.type)c+=1;else if(\"attribute\"===n.type)c+=1;else if(function(s){return e.isPseudoElement(s)}(n))o+=1;else if(e.isPseudoClass(n))switch(n.value.toLowerCase()){case\":-moz-any\":case\":-webkit-any\":case\":any\":case\":has\":case\":is\":case\":matches\":case\":not\":if(n.nodes&&n.nodes.length>0){const e=a(n.nodes);t+=e.a,c+=e.b,o+=e.c}break;case\":where\":break;case\":nth-child\":case\":nth-last-child\":if(c+=1,n.nodes&&n.nodes.length>0){const s=n.nodes[0].nodes.findIndex((e=>\"tag\"===e.type&&\"of\"===e.value.toLowerCase()));if(s>-1){const l=[e.selector({nodes:n.nodes[0].nodes.slice(s+1),value:\"\"})];n.nodes.length>1&&l.push(...n.nodes.slice(1));const r=a(l);t+=r.a,c+=r.b,o+=r.c}}break;case\":local\":case\":global\":n.nodes&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));break;default:c+=1}else e.isContainer(n)&&n.nodes.length>0&&n.nodes.forEach((e=>{const a=s(e);t+=a.a,c+=a.b,o+=a.c}));return{a:t,b:c,c:o}}function a(e){let a={a:0,b:0,c:0};return e.forEach((e=>{const n=s(e);n.a>a.a?a=n:n.a<a.a||(n.b>a.b?a=n:n.b<a.b||n.c>a.c&&(a=n))})),a}function n(e,s){return e.a===s.a?e.b===s.b?e.c-s.c:e.b-s.b:e.a-s.a}export{n as compare,s as selectorSpecificity};\n","'use strict';\n\nconst { isAtRule, isRule } = require('./typeGuards');\n\n/**\n * Find the at-rule in which a rule is nested.\n *\n * Returns `null` if the rule is not nested within an at-rule.\n *\n * @param {import('postcss').Rule} rule\n * @returns {null | import('postcss').AtRule}\n */\nmodule.exports = function findAtRuleContext(rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn null;\n\t}\n\n\tif (isAtRule(parent)) {\n\t\treturn parent;\n\t}\n\n\tif (isRule(parent)) {\n\t\treturn findAtRuleContext(parent);\n\t}\n\n\treturn null;\n};\n","'use strict';\n\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\nmodule.exports = function nodeContextLookup() {\n\tconst contextMap = new Map();\n\n\treturn {\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {any[]} subContexts\n\t\t * @returns {Map<any, any>}\n\t\t */\n\t\tgetContext(node, ...subContexts) {\n\t\t\tif (!node.source) throw new Error('The node source must be present');\n\n\t\t\tconst nodeSource = node.source.input.from;\n\t\t\tconst baseContext = creativeGetMap(contextMap, nodeSource);\n\n\t\t\treturn subContexts.reduce((result, context) => creativeGetMap(result, context), baseContext);\n\t\t},\n\t};\n};\n\n/**\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\nfunction creativeGetMap(someMap, someThing) {\n\tif (!someMap.has(someThing)) {\n\t\tsomeMap.set(someThing, new Map());\n\t}\n\n\treturn someMap.get(someThing);\n}\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selector\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Node} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function parseSelector(selector, result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(selector);\n\t} catch (err) {\n\t\tresult.warn(`Cannot parse selector (${err})`, { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity: calculate, compare } = require('@csstools/selector-specificity');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-descending-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-descending-specificity',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['selectors-within-list'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\t// Ignore nested property `foo: {};`\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignores selectors within list of selectors\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'selectors-within-list') &&\n\t\t\t\truleNode.selectors.length > 1\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst comparisonContext = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst trimSelector = selector.trim();\n\n\t\t\t\t// Ignore `.selector, { }`\n\t\t\t\tif (trimSelector === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Resolve any nested selectors before checking\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => {\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcheckSelector(s, ruleNode, comparisonContext);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {Map<any, any>} comparisonContext\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode, comparisonContext) {\n\t\t\tconst selector = selectorNode.toString();\n\t\t\tconst referenceSelectorNode = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n\t\t\tconst selectorSpecificity = calculate(selectorNode);\n\t\t\tconst entry = { selector, specificity: selectorSpecificity };\n\n\t\t\tif (!comparisonContext.has(referenceSelectorNode)) {\n\t\t\t\tcomparisonContext.set(referenceSelectorNode, [entry]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {Array<typeof entry>} */\n\t\t\tconst priorComparableSelectors = comparisonContext.get(referenceSelectorNode);\n\n\t\t\tfor (const priorEntry of priorComparableSelectors) {\n\t\t\t\tif (compare(selectorSpecificity, priorEntry.specificity) < 0) {\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, priorEntry.selector),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpriorComparableSelectors.push(entry);\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Root} selectorNode\n */\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n\tconst firstChild = selectorNode.nodes[0];\n\n\tassert(firstChild);\n\tconst nodesByCombinator = firstChild.split((node) => node.type === 'combinator');\n\tconst nodesAfterLastCombinator = nodesByCombinator[nodesByCombinator.length - 1];\n\n\tassert(nodesAfterLastCombinator);\n\tconst nodesWithoutPseudoClasses = nodesAfterLastCombinator\n\t\t.filter((node) => {\n\t\t\treturn (\n\t\t\t\tnode.type !== 'pseudo' ||\n\t\t\t\tnode.value.startsWith('::') ||\n\t\t\t\tkeywordSets.pseudoElements.has(node.value.replace(/:/g, ''))\n\t\t\t);\n\t\t})\n\t\t.join('');\n\n\treturn nodesWithoutPseudoClasses.toString();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst { isAtRule } = require('./typeGuards');\n\n/**\n * Check if a rule is a keyframe one\n *\n * @param {import('postcss').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function (rule) {\n\tconst parent = rule.parent;\n\n\tif (!parent) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(parent) && parent.name.toLowerCase() === 'keyframes';\n};\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst selectorParser = require('postcss-selector-parser');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-duplicate-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector, firstDuplicateLine) =>\n\t\t`Unexpected duplicate selector \"${selector}\", first used at line ${firstDuplicateLine}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-duplicate-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tdisallowInList: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldDisallowDuplicateInList = secondaryOptions && secondaryOptions.disallowInList;\n\n\t\t// The top level of this map will be rule sources.\n\t\t// Each source maps to another map, which maps rule parents to a set of selectors.\n\t\t// This ensures that selectors are only checked against selectors\n\t\t// from other rules that share the same parent and the same source.\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contextSelectorSet = selectorContextLookup.getContext(\n\t\t\t\truleNode,\n\t\t\t\tfindAtRuleContext(ruleNode),\n\t\t\t);\n\t\t\tconst resolvedSelectorList = [\n\t\t\t\t...new Set(\n\t\t\t\t\truleNode.selectors.flatMap((selector) => resolvedNestedSelector(selector, ruleNode)),\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tconst normalizedSelectorList = resolvedSelectorList.map(normalize);\n\n\t\t\t// Sort the selectors list so that the order of the constituents\n\t\t\t// doesn't matter\n\t\t\tconst sortedSelectorList = [...normalizedSelectorList].sort().join(',');\n\n\t\t\tif (!ruleNode.source) throw new Error('The rule node must have a source');\n\n\t\t\tif (!ruleNode.source.start) throw new Error('The rule source must have a start position');\n\n\t\t\tconst selectorLine = ruleNode.source.start.line;\n\n\t\t\t// Complain if the same selector list occurs twice\n\n\t\t\tlet previousDuplicatePosition;\n\t\t\t// When `disallowInList` is true, we must parse `sortedSelectorList` into\n\t\t\t// list items.\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectorListParsed = [];\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tparseSelector(sortedSelectorList, result, ruleNode, (selectors) => {\n\t\t\t\t\tselectors.each((s) => {\n\t\t\t\t\t\tconst selector = String(s);\n\n\t\t\t\t\t\tselectorListParsed.push(selector);\n\n\t\t\t\t\t\tif (contextSelectorSet.get(selector)) {\n\t\t\t\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(selector);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpreviousDuplicatePosition = contextSelectorSet.get(sortedSelectorList);\n\t\t\t}\n\n\t\t\tif (previousDuplicatePosition) {\n\t\t\t\t// If the selector isn't nested we can use its raw value; otherwise,\n\t\t\t\t// we have to approximate something for the message -- which is close enough\n\t\t\t\tconst isNestedSelector = resolvedSelectorList.join(',') !== ruleNode.selectors.join(',');\n\t\t\t\tconst selectorForMessage = isNestedSelector\n\t\t\t\t\t? resolvedSelectorList.join(', ')\n\t\t\t\t\t: ruleNode.selector;\n\n\t\t\t\treturn report({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected(selectorForMessage, previousDuplicatePosition),\n\t\t\t\t\tword: selectorForMessage,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst presentedSelectors = new Set();\n\t\t\tconst reportedSelectors = new Set();\n\n\t\t\t// Or complain if one selector list contains the same selector more than once\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tconst normalized = normalize(selector);\n\n\t\t\t\tif (presentedSelectors.has(normalized)) {\n\t\t\t\t\tif (reportedSelectors.has(normalized)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tmessage: messages.rejected(selector, selectorLine),\n\t\t\t\t\t\tword: selector,\n\t\t\t\t\t});\n\t\t\t\t\treportedSelectors.add(normalized);\n\t\t\t\t} else {\n\t\t\t\t\tpresentedSelectors.add(normalized);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldDisallowDuplicateInList) {\n\t\t\t\tfor (const selector of selectorListParsed) {\n\t\t\t\t\t// [selectorLine] will not really be accurate for multi-line\n\t\t\t\t\t// selectors, such as \"bar\" in \"foo,\\nbar {}\".\n\t\t\t\t\tcontextSelectorSet.set(selector, selectorLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontextSelectorSet.set(sortedSelectorList, selectorLine);\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} selector\n * @returns {string}\n */\nfunction normalize(selector) {\n\tif (!isStandardSyntaxSelector(selector)) {\n\t\treturn selector;\n\t}\n\n\treturn selectorParser().processSync(selector, { lossless: false });\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/media-query-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only check for the newline after the comma, while allowing\n\t\t// arbitrary indentation after the newline\n\t\t/** @type {Map<import('postcss').AtRule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tallowTrailingComments: primary.startsWith('always'),\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [atRule, commaIndices] of fixData.entries()) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tparams = /^\\s*\\n/.test(afterComma)\n\t\t\t\t\t\t\t? beforeComma + afterComma.replace(/^[^\\S\\r\\n]*/, '')\n\t\t\t\t\t\t\t: beforeComma + context.newline + afterComma;\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst arrayEqual = require('../../../utils/arrayEqual');\n\n/**\n *\n * @param {string[][]} areas\n * @param {string} name\n * @returns {boolean}\n */\nfunction isContiguousAndRectangular(areas, name) {\n\tconst indicesByRow = areas.map((row) => {\n\t\tconst indices = [];\n\t\tlet idx = row.indexOf(name);\n\n\t\twhile (idx !== -1) {\n\t\t\tindices.push(idx);\n\t\t\tidx = row.indexOf(name, idx + 1);\n\t\t}\n\n\t\treturn indices;\n\t});\n\n\tfor (let i = 0; i < indicesByRow.length; i++) {\n\t\tfor (let j = i + 1; j < indicesByRow.length; j++) {\n\t\t\tconst x = indicesByRow[i];\n\t\t\tconst y = indicesByRow[j];\n\n\t\t\tif ((x && x.length === 0) || (y && y.length === 0)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!arrayEqual(x, y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction namedAreas(areas) {\n\tconst names = new Set(areas.flat());\n\n\tnames.delete('.');\n\n\treturn [...names];\n}\n\n/**\n *\n * @param {string[][]} areas\n * @returns {string[]}\n */\nfunction findNotContiguousOrRectangular(areas) {\n\treturn namedAreas(areas).filter((name) => !isContiguousAndRectangular(areas, name));\n}\n\nmodule.exports = findNotContiguousOrRectangular;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findNotContiguousOrRectangular = require('./utils/findNotContiguousOrRectangular');\nconst isRectangular = require('./utils/isRectangular');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'named-grid-areas-no-invalid';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedToken: () => 'Expected cell token within string',\n\texpectedSameNumber: () => 'Expected same number of cell tokens in each string',\n\texpectedRectangle: (name) => `Expected single filled-in rectangle for \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/named-grid-areas-no-invalid',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^(?:grid|grid-template|grid-template-areas)$/i, (decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (value.toLowerCase().trim() === 'none') return;\n\n\t\t\t/** @type {string[][]} */\n\t\t\tconst areas = [];\n\t\t\tlet reportSent = false;\n\n\t\t\tvalueParser(value).walk(({ sourceIndex, type, value: tokenValue }) => {\n\t\t\t\tif (type !== 'string') return;\n\n\t\t\t\tif (tokenValue === '') {\n\t\t\t\t\tcomplain(messages.expectedToken(), sourceIndex);\n\t\t\t\t\treportSent = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tareas.push(\n\t\t\t\t\ttokenValue\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(' ')\n\t\t\t\t\t\t.filter((s) => s.length > 0),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tif (reportSent) return;\n\n\t\t\tif (areas.length === 0) return;\n\n\t\t\tif (!isRectangular(areas)) {\n\t\t\t\tcomplain(messages.expectedSameNumber());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notContiguousOrRectangular = findNotContiguousOrRectangular(areas);\n\n\t\t\tfor (const name of notContiguousOrRectangular.sort()) {\n\t\t\t\tcomplain(messages.expectedRectangle(name));\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} [sourceIndex=0]\n\t\t\t */\n\t\t\tfunction complain(message, sourceIndex = 0) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n *\n * @param {string[][]} areas\n * @returns {boolean}\n */\nfunction isRectangular(areas) {\n\tconst firstArea = areas[0];\n\n\tif (firstArea === undefined) return false;\n\n\treturn areas.every((row) => row.length === firstArea.length);\n}\n\nmodule.exports = isRectangular;\n","'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atImport) => `Unexpected duplicate @import rule ${atImport}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-duplicate-at-import-rules',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Record<string, string[]>} */\n\t\tconst imports = {};\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst [firstParam, ...restParams] = valueParser(atRule.params).nodes;\n\n\t\t\tif (!firstParam) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// extract uri from url() if exists\n\t\t\tconst uri =\n\t\t\t\tfirstParam.type === 'function' && firstParam.value === 'url' && firstParam.nodes[0]\n\t\t\t\t\t? firstParam.nodes[0].value\n\t\t\t\t\t: firstParam.value;\n\n\t\t\t// extract media queries if any\n\t\t\tconst media = (mediaParser(valueParser.stringify(restParams)).nodes || [])\n\t\t\t\t.map((n) => n.value.replace(/\\s/g, ''))\n\t\t\t\t.filter((n) => n.length);\n\n\t\t\tlet importedUris = imports[uri];\n\t\t\tconst isDuplicate = media.length\n\t\t\t\t? media.some((q) => importedUris && importedUris.includes(q))\n\t\t\t\t: importedUris;\n\n\t\t\tif (isDuplicate) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(uri),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: atRule.toString(),\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!importedUris) {\n\t\t\t\timportedUris = imports[uri] = [];\n\t\t\t}\n\n\t\t\timportedUris.push(...media);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-source';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty source',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-empty-source',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isWhitespace = require('./isWhitespace');\n\n/**\n * Returns a Boolean indicating whether the the input string is only whitespace.\n *\n * @param {string} input\n * @returns {boolean}\n */\nmodule.exports = function (input) {\n\tlet isOnlyWhitespace = true;\n\n\tfor (const element of input) {\n\t\tif (!isWhitespace(element)) {\n\t\t\tisOnlyWhitespace = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn isOnlyWhitespace;\n};\n","'use strict';\n\nconst styleSearch = require('style-search');\n\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxComment = require('../../utils/isStandardSyntaxComment');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isComment, isDeclaration, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-eol-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected whitespace at end of line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-eol-whitespace',\n};\n\nconst whitespacesToReject = new Set([' ', '\\t']);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction fixString(str) {\n\treturn str.replace(/[ \\t]+$/, '');\n}\n\n/**\n * @param {number} lastEOLIndex\n * @param {string} string\n * @param {{ ignoreEmptyLines?: boolean, isRootFirst?: boolean }} [options]\n * @returns {number}\n */\nfunction findErrorStartIndex(\n\tlastEOLIndex,\n\tstring,\n\t{ ignoreEmptyLines, isRootFirst } = {\n\t\tignoreEmptyLines: false,\n\t\tisRootFirst: false,\n\t},\n) {\n\tconst eolWhitespaceIndex = lastEOLIndex - 1;\n\n\t// If the character before newline is not whitespace, ignore\n\tif (!whitespacesToReject.has(string.charAt(eolWhitespaceIndex))) {\n\t\treturn -1;\n\t}\n\n\tif (ignoreEmptyLines) {\n\t\t// If there is only whitespace between the previous newline and\n\t\t// this newline, ignore\n\t\tconst beforeNewlineIndex = string.lastIndexOf('\\n', eolWhitespaceIndex);\n\n\t\tif (beforeNewlineIndex >= 0 || isRootFirst) {\n\t\t\tconst line = string.substring(beforeNewlineIndex, eolWhitespaceIndex);\n\n\t\t\tif (isOnlyWhitespace(line)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn eolWhitespaceIndex;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['empty-lines'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreEmptyLines = optionsMatches(secondaryOptions, 'ignore', 'empty-lines');\n\n\t\tif (context.fix) {\n\t\t\tfix(root);\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tconst reportFromIndex = (index) => {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t};\n\n\t\teachEolWhitespace(rootString, reportFromIndex, true);\n\n\t\tconst errorIndex = findErrorStartIndex(rootString.length, rootString, {\n\t\t\tignoreEmptyLines,\n\t\t\tisRootFirst: true,\n\t\t});\n\n\t\tif (errorIndex > -1) {\n\t\t\treportFromIndex(errorIndex);\n\t\t}\n\n\t\t/**\n\t\t * Iterate each whitespace at the end of each line of the given string.\n\t\t * @param {string} string - the source code string\n\t\t * @param {(index: number) => void} callback - callback the whitespace index at the end of each line.\n\t\t * @param {boolean} isRootFirst - set `true` if the given string is the first token of the root.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction eachEolWhitespace(string, callback, isRootFirst) {\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: string,\n\t\t\t\t\ttarget: ['\\n', '\\r'],\n\t\t\t\t\tcomments: 'check',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst index = findErrorStartIndex(match.startIndex, string, {\n\t\t\t\t\t\tignoreEmptyLines,\n\t\t\t\t\t\tisRootFirst,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tcallback(index);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Root} rootNode\n\t\t */\n\t\tfunction fix(rootNode) {\n\t\t\tlet isRootFirst = true;\n\n\t\t\trootNode.walk((node) => {\n\t\t\t\tfixText(\n\t\t\t\t\tnode.raws.before,\n\t\t\t\t\t(fixed) => {\n\t\t\t\t\t\tnode.raws.before = fixed;\n\t\t\t\t\t},\n\t\t\t\t\tisRootFirst,\n\t\t\t\t);\n\t\t\t\tisRootFirst = false;\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tfixText(node.raws.afterName, (fixed) => {\n\t\t\t\t\t\tnode.raws.afterName = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst rawsParams = node.raws.params;\n\n\t\t\t\t\tif (rawsParams) {\n\t\t\t\t\t\tfixText(rawsParams.raw, (fixed) => {\n\t\t\t\t\t\t\trawsParams.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.params, (fixed) => {\n\t\t\t\t\t\t\tnode.params = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tconst rawsSelector = node.raws.selector;\n\n\t\t\t\t\tif (rawsSelector) {\n\t\t\t\t\t\tfixText(rawsSelector.raw, (fixed) => {\n\t\t\t\t\t\t\trawsSelector.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.selector, (fixed) => {\n\t\t\t\t\t\t\tnode.selector = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node) || isDeclaration(node)) {\n\t\t\t\t\tfixText(node.raws.between, (fixed) => {\n\t\t\t\t\t\tnode.raws.between = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst rawsValue = node.raws.value;\n\n\t\t\t\t\tif (rawsValue) {\n\t\t\t\t\t\tfixText(rawsValue.raw, (fixed) => {\n\t\t\t\t\t\t\trawsValue.raw = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.value, (fixed) => {\n\t\t\t\t\t\t\tnode.value = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isComment(node)) {\n\t\t\t\t\tfixText(node.raws.left, (fixed) => {\n\t\t\t\t\t\tnode.raws.left = fixed;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!isStandardSyntaxComment(node)) {\n\t\t\t\t\t\tnode.raws.right = node.raws.right && fixString(node.raws.right);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfixText(node.raws.right, (fixed) => {\n\t\t\t\t\t\t\tnode.raws.right = fixed;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tfixText(node.text, (fixed) => {\n\t\t\t\t\t\tnode.text = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node) || isRule(node)) {\n\t\t\t\t\tfixText(node.raws.after, (fixed) => {\n\t\t\t\t\t\tnode.raws.after = fixed;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfixText(\n\t\t\t\trootNode.raws.after,\n\t\t\t\t(fixed) => {\n\t\t\t\t\trootNode.raws.after = fixed;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (typeof rootNode.raws.after === 'string') {\n\t\t\t\tconst lastEOL = Math.max(\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\n'),\n\t\t\t\t\trootNode.raws.after.lastIndexOf('\\r'),\n\t\t\t\t);\n\n\t\t\t\tif (lastEOL !== rootNode.raws.after.length - 1) {\n\t\t\t\t\trootNode.raws.after =\n\t\t\t\t\t\trootNode.raws.after.slice(0, lastEOL + 1) +\n\t\t\t\t\t\tfixString(rootNode.raws.after.slice(lastEOL + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string | undefined} value\n\t\t * @param {(text: string) => void} fixFn\n\t\t * @param {boolean} isRootFirst\n\t\t */\n\t\tfunction fixText(value, fixFn, isRootFirst = false) {\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet fixed = '';\n\t\t\tlet lastIndex = 0;\n\n\t\t\teachEolWhitespace(\n\t\t\t\tvalue,\n\t\t\t\t(index) => {\n\t\t\t\t\tconst newlineIndex = index + 1;\n\n\t\t\t\t\tfixed += fixString(value.slice(lastIndex, newlineIndex));\n\t\t\t\t\tlastIndex = newlineIndex;\n\t\t\t\t},\n\t\t\t\tisRootFirst,\n\t\t\t);\n\n\t\t\tif (lastIndex) {\n\t\t\t\tfixed += value.slice(lastIndex);\n\t\t\t\tfixFn(fixed);\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-invalid-double-slash-comments';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected double-slash CSS comment',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-invalid-double-slash-comments',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.startsWith('//')) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: decl.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tif (selector.startsWith('//')) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword: ruleNode.toString(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-empty-first-line';\nconst noEmptyFirstLineTest = /^\\s*[\\r\\n]/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty line',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-empty-first-line',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'. Property 'lang' does not exist on type 'Source'.\n\t\tif (!validOptions || root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : (root.source && root.source.input.css) || '';\n\n\t\tif (!rootString.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (noEmptyFirstLineTest.test(rootString)) {\n\t\t\tif (context.fix) {\n\t\t\t\tif (root.first == null) {\n\t\t\t\t\tthrow new Error('The root node must have the first node.');\n\t\t\t\t}\n\n\t\t\t\tif (root.first.raws.before == null) {\n\t\t\t\t\tthrow new Error('The first node must have spaces before.');\n\t\t\t\t}\n\n\t\t\t\troot.first.raws.before = root.first.raws.before.trimStart();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-extra-semicolons';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected extra semicolon',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-extra-semicolons',\n};\n\n/**\n * @param {import('postcss').Node} node\n * @returns {number}\n */\nfunction getOffsetByNode(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Document | Container<ChildNode>'\n\tif (node.parent && node.parent.document) {\n\t\treturn 0;\n\t}\n\n\tconst root = node.root();\n\n\tif (!root.source) throw new Error('The root node must have a source');\n\n\tif (!node.source) throw new Error('The node must have a source');\n\n\tif (!node.source.start) throw new Error('The source must have a start position');\n\n\tconst string = root.source.input.css;\n\tconst nodeColumn = node.source.start.column;\n\tconst nodeLine = node.source.start.line;\n\tlet line = 1;\n\tlet column = 1;\n\tlet index = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (column === nodeColumn && nodeLine === line) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (string[i] === '\\n') {\n\t\t\tcolumn = 1;\n\t\t\tline += 1;\n\t\t} else {\n\t\t\tcolumn += 1;\n\t\t}\n\t}\n\n\treturn index;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.raws.after && root.raws.after.trim().length !== 0) {\n\t\t\tconst rawAfterRoot = root.raws.after;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixSemiIndices = [];\n\n\t\t\tstyleSearch({ source: rawAfterRoot, target: ';' }, (match) => {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\t\t\tcomplain(root.source.input.css.length - rawAfterRoot.length + match.startIndex);\n\t\t\t});\n\n\t\t\t// fix\n\t\t\tif (fixSemiIndices.length) {\n\t\t\t\troot.raws.after = removeIndices(rawAfterRoot, fixSemiIndices);\n\t\t\t}\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tif (node.type === 'atrule' && !isStandardSyntaxAtRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'rule' && !isStandardSyntaxRule(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.raws.before && node.raws.before.trim().length !== 0) {\n\t\t\t\tconst rawBeforeNode = node.raws.before;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\tconst rawBeforeIndexStart = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawBeforeNode, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex - rawBeforeIndexStart);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(getOffsetByNode(node) - rawBeforeNode.length + match.startIndex);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.before = removeIndices(rawBeforeNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.after === 'string' && node.raws.after.trim().length !== 0) {\n\t\t\t\tconst rawAfterNode = node.raws.after;\n\n\t\t\t\t/**\n\t\t\t\t * If the last child is a Less mixin followed by more than one semicolon,\n\t\t\t\t * node.raws.after will be populated with that semicolon.\n\t\t\t\t * Since we ignore Less mixins, exit here\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\t'last' in node &&\n\t\t\t\t\tnode.last &&\n\t\t\t\t\tnode.last.type === 'atrule' &&\n\t\t\t\t\t!isStandardSyntaxAtRule(node.last)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawAfterNode, target: ';' }, (match) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\t1 -\n\t\t\t\t\t\trawAfterNode.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.after = removeIndices(rawAfterNode, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof node.raws.ownSemicolon === 'string') {\n\t\t\t\tconst rawOwnSemicolon = node.raws.ownSemicolon;\n\t\t\t\tconst allowedSemi = 0;\n\n\t\t\t\t/** @type {number[]} */\n\t\t\t\tconst fixSemiIndices = [];\n\n\t\t\t\tstyleSearch({ source: rawOwnSemicolon, target: ';' }, (match, count) => {\n\t\t\t\t\tif (count === allowedSemi) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tfixSemiIndices.push(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index =\n\t\t\t\t\t\tgetOffsetByNode(node) +\n\t\t\t\t\t\tnode.toString().length -\n\t\t\t\t\t\trawOwnSemicolon.length +\n\t\t\t\t\t\tmatch.startIndex;\n\n\t\t\t\t\tcomplain(index);\n\t\t\t\t});\n\n\t\t\t\t// fix\n\t\t\t\tif (fixSemiIndices.length) {\n\t\t\t\t\tnode.raws.ownSemicolon = removeIndices(rawOwnSemicolon, fixSemiIndices);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(index) {\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {string} str\n\t\t * @param {number[]} indices\n\t\t * @returns {string}\n\t\t */\n\t\tfunction removeIndices(str, indices) {\n\t\t\tfor (const index of indices.reverse()) {\n\t\t\t\tstr = str.slice(0, index) + str.slice(index + 1);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-missing-end-of-source-newline';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing end-of-source newline',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-missing-end-of-source-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (root.source == null) {\n\t\t\tthrow new Error('The root node must have a source property');\n\t\t}\n\n\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\tif (root.source.inline || root.source.lang === 'object-literal') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootString = context.fix ? root.toString() : root.source.input.css;\n\n\t\tif (!rootString.trim() || rootString.endsWith('\\n')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fix\n\t\tif (context.fix) {\n\t\t\troot.raws.after = context.newline;\n\n\t\t\treturn;\n\t\t}\n\n\t\treport({\n\t\t\tmessage: messages.rejected,\n\t\t\tnode: root,\n\t\t\tindex: rootString.length - 1,\n\t\t\tresult,\n\t\t\truleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'number-max-precision';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-max-precision',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = 'prop' in node ? node.prop : undefined;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\d*\\.(\\d+)/.exec(valueNode.value);\n\n\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (match[1].length <= primary) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex =\n\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\t\t\t\tconst actual = Number.parseFloat(match[0]);\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: baseIndex + valueNode.sourceIndex + match.index,\n\t\t\t\t\tmessage: messages.expected(actual, actual.toFixed(primary)),\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-irregular-whitespace';\n\nconst messages = ruleMessages(ruleName, {\n\tunexpected: 'Unexpected irregular whitespace',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-irregular-whitespace',\n};\n\nconst IRREGULAR_WHITESPACES = [\n\t'\\u000B', // Line Tabulation (\\v) - <VT>\n\t'\\u000C', // Form Feed (\\f) - <FF>\n\t'\\u00A0', // No-Break Space - <NBSP>\n\t'\\u0085', // Next Line\n\t'\\u1680', // Ogham Space Mark\n\t'\\u180E', // Mongolian Vowel Separator - <MVS>\n\t'\\uFEFF', // Zero Width No-Break Space - <BOM>\n\t'\\u2000', // En Quad\n\t'\\u2001', // Em Quad\n\t'\\u2002', // En Space - <ENSP>\n\t'\\u2003', // Em Space - <EMSP>\n\t'\\u2004', // Tree-Per-Em\n\t'\\u2005', // Four-Per-Em\n\t'\\u2006', // Six-Per-Em\n\t'\\u2007', // Figure Space\n\t'\\u2008', // Punctuation Space - <PUNCSP>\n\t'\\u2009', // Thin Space\n\t'\\u200A', // Hair Space\n\t'\\u200B', // Zero Width Space - <ZWSP>\n\t'\\u2028', // Line Separator\n\t'\\u2029', // Paragraph Separator\n\t'\\u202F', // Narrow No-Break Space\n\t'\\u205F', // Medium Mathematical Space\n\t'\\u3000', // Ideographic Space\n];\n\nconst IRREGULAR_WHITESPACES_PATTERN = new RegExp(`([${IRREGULAR_WHITESPACES.join('')}])`);\n\n/**\n * @param {string} str\n * @returns {string | null}\n */\nconst findIrregularWhitespace = (str) => {\n\tconst result = IRREGULAR_WHITESPACES_PATTERN.exec(str);\n\n\treturn (result && result[1]) || null;\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {string | undefined} value\n\t\t */\n\t\tconst validate = (node, value) => {\n\t\t\tconst issue = value && findIrregularWhitespace(value);\n\n\t\t\tif (issue) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage: messages.unexpected,\n\t\t\t\t\tnode,\n\t\t\t\t\tword: issue,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tvalidate(atRule, atRule.name);\n\t\t\tvalidate(atRule, atRule.params);\n\t\t\tvalidate(atRule, atRule.raws.before);\n\t\t\tvalidate(atRule, atRule.raws.after);\n\t\t\tvalidate(atRule, atRule.raws.afterName);\n\t\t\tvalidate(atRule, atRule.raws.between);\n\t\t});\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tvalidate(ruleNode, ruleNode.selector);\n\t\t\tvalidate(ruleNode, ruleNode.raws.before);\n\t\t\tvalidate(ruleNode, ruleNode.raws.after);\n\t\t\tvalidate(ruleNode, ruleNode.raws.between);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalidate(decl, decl.prop);\n\t\t\tvalidate(decl, decl.value);\n\t\t\tvalidate(decl, decl.raws.before);\n\t\t\tvalidate(decl, decl.raws.between);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-no-trailing-zeros';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected trailing zero(s)',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-no-trailing-zeros',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = /\\.(\\d{0,100}?)(0+)(?:\\D|$)/.exec(valueNode.value);\n\n\t\t\t\t// match[1] is any numbers between the decimal and our trailing zero, could be empty\n\t\t\t\t// match[2] is our trailing zero(s)\n\t\t\t\tif (match == null || match[1] == null || match[2] == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// our index is:\n\t\t\t\t//  the index of our valueNode +\n\t\t\t\t//  the index of our match +\n\t\t\t\t//  1 for our decimal +\n\t\t\t\t//  the length of our potential non-zero number match (match[1])\n\t\t\t\tconst index = valueNode.sourceIndex + match.index + 1 + match[1].length;\n\n\t\t\t\t// our startIndex is identical to our index except when we have only\n\t\t\t\t// trailing zeros after our decimal. in that case we don't need the decimal\n\t\t\t\t// either so we move our index back by 1.\n\t\t\t\tconst startIndex = match[1].length > 0 ? index : index - 1;\n\n\t\t\t\t// our end index is our original index + the length of our trailing zeros\n\t\t\t\tconst endIndex = index + match[2].length;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tendIndex,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseIndex =\n\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\t// this is the index of the _first_ trailing zero\n\t\t\t\t\tindex: baseIndex + index,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = removeTrailingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeTrailingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeTrailingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'no-invalid-position-at-import-rule';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected invalid position @import rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-invalid-position-at-import-rule',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, options) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet invalidPosition = false;\n\n\t\troot.walk((node) => {\n\t\t\tconst nodeName = ('name' in node && node.name && node.name.toLowerCase()) || '';\n\n\t\t\tif (\n\t\t\t\t(node.type === 'atrule' &&\n\t\t\t\t\tnodeName !== 'charset' &&\n\t\t\t\t\tnodeName !== 'import' &&\n\t\t\t\t\tnodeName !== 'layer' &&\n\t\t\t\t\t!optionsMatches(options, 'ignoreAtRules', node.name) &&\n\t\t\t\t\tisStandardSyntaxAtRule(node)) ||\n\t\t\t\t(node.type === 'rule' && isStandardSyntaxRule(node))\n\t\t\t) {\n\t\t\t\tinvalidPosition = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'atrule' && nodeName === 'import' && invalidPosition) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: node.toString(),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (!matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\nconst { isRule } = require('../../utils/typeGuards');\n\nconst ruleName = 'property-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { parent } = decl;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRule(parent)) {\n\t\t\t\tconst { selector } = parent;\n\n\t\t\t\tif (selector && optionsMatches(secondaryOptions, 'ignoreSelectors', selector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst expectedProp = primary === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n\t\t\tif (prop === expectedProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = expectedProp;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(prop, expectedProp),\n\t\t\t\tnode: decl,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findAnimationName = require('../../utils/findAnimationName');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-unknown-animations';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (animationName) => `Unexpected unknown animation name \"${animationName}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/no-unknown-animations',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declaredAnimations = new Set();\n\n\t\troot.walkAtRules(/(-(moz|webkit)-)?keyframes/i, (atRule) => {\n\t\t\tdeclaredAnimations.add(atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'animation' || decl.prop.toLowerCase() === 'animation-name') {\n\t\t\t\tconst animationNames = findAnimationName(decl.value);\n\n\t\t\t\tif (animationNames.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const animationNameNode of animationNames) {\n\t\t\t\t\tif (keywordSets.animationNameKeywords.has(animationNameNode.value.toLowerCase())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declaredAnimations.has(animationNameNode.value)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(animationNameNode.value),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: declarationValueIndex(decl) + animationNameNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getUnitFromValueNode = require('./getUnitFromValueNode');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isVariable = require('./isVariable');\nconst keywordSets = require('../reference/keywordSets');\nconst postcssValueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\nmodule.exports = function findAnimationName(value) {\n\t/** @type {Node[]} */\n\tconst animationNames = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\tconst { nodes } = valueNodes;\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tnodes.length === 1 &&\n\t\tnodes[0] &&\n\t\tkeywordSets.basicKeywords.has(nodes[0].value.toLowerCase())\n\t) {\n\t\treturn [nodes[0]];\n\t}\n\n\tvalueNodes.walk((valueNode) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (valueNode.type !== 'word') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non-standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other animation parts\n\t\tif (keywordSets.animationShorthandKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore numbers with units\n\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\tif (unit || unit === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tanimationNames.push(valueNode);\n\t});\n\n\treturn animationNames;\n};\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected vendor-prefix \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\t//return early if property is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', unprefixedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure there's a vendor prefix,\n\t\t\t// but this isn't a custom property\n\n\t\t\tif (prop[0] !== '-' || prop[1] === '-') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.property(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = isAutoprefixable.unprefix(decl.prop);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'number-leading-zero';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a leading zero',\n\trejected: 'Unexpected leading zero',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/number-leading-zero',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value));\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule | import('postcss').Declaration} node\n\t\t * @param {string} value\n\t\t */\n\t\tfunction check(node, value) {\n\t\t\t/** @type {Array<{ startIndex: number, endIndex: number }>} */\n\t\t\tconst neverFixPositions = [];\n\t\t\t/** @type {Array<{ index: number }>} */\n\t\t\tconst alwaysFixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check leading zero\n\t\t\t\tif (primary === 'always') {\n\t\t\t\t\tconst match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 2 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n\t\t\t\t\t// for regex. And we need the index of \".5\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - match[1].length;\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\talwaysFixPositions.unshift({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex =\n\t\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.expected, node, baseIndex + index);\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'never') {\n\t\t\t\t\tconst match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match == null || match[0] == null || match[1] == null || match[2] == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 3 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-00.5\"\n\t\t\t\t\t// as an input for regex. And we need the index of \"00\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneverFixPositions.unshift({\n\t\t\t\t\t\t\tstartIndex: index,\n\t\t\t\t\t\t\t// match[1].length is the length of our matched zero(s)\n\t\t\t\t\t\t\tendIndex: index + match[1].length,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst baseIndex =\n\t\t\t\t\t\tnode.type === 'atrule' ? atRuleParamIndex(node) : declarationValueIndex(node);\n\n\t\t\t\t\tcomplain(messages.rejected, node, baseIndex + index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (alwaysFixPositions.length) {\n\t\t\t\tfor (const fixPosition of alwaysFixPositions) {\n\t\t\t\t\tconst index = fixPosition.index;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = addLeadingZero(node.params, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = addLeadingZero(node.value, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (neverFixPositions.length) {\n\t\t\t\tfor (const fixPosition of neverFixPositions) {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = removeLeadingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeLeadingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} message\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} index\n\t\t */\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * @param {string} input\n * @param {number} index\n * @returns {string}\n */\nfunction addLeadingZero(input, index) {\n\t// eslint-disable-next-line prefer-template\n\treturn input.slice(0, index) + '0' + input.slice(index);\n}\n\n/**\n * @param {string} input\n * @param {number} startIndex\n * @param {number} endIndex\n * @returns {string}\n */\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","module.exports.all = require('./data/all.json').properties;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst properties = require('known-css-properties').all;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst { isAtRule, isRule } = require('../../utils/typeGuards');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected unknown property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\tconst allValidProperties = new Set(properties);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tcheckPrefixed: [isBoolean],\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldCheckPrefixed = secondaryOptions && secondaryOptions.checkPrefixed;\n\n\t\troot.walkDecls(checkStatement);\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t */\n\t\tfunction checkStatement(decl) {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!shouldCheckPrefixed && vendor.prefix(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent = decl.parent;\n\n\t\t\tif (\n\t\t\t\tparent &&\n\t\t\t\tisRule(parent) &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreSelectors', parent.selector)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {import('postcss').Node | undefined} */\n\t\t\tlet node = parent;\n\n\t\t\twhile (node && node.type !== 'root') {\n\t\t\t\tif (isAtRule(node) && optionsMatches(secondaryOptions, 'ignoreAtRules', node.name)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\n\t\t\tif (allValidProperties.has(prop.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: prop,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst addEmptyLineBefore = require('../../utils/addEmptyLineBefore');\nconst getPreviousNonSharedLineCommentNode = require('../../utils/getPreviousNonSharedLineCommentNode');\nconst hasEmptyLine = require('../../utils/hasEmptyLine');\nconst isAfterSingleLineComment = require('../../utils/isAfterSingleLineComment');\nconst isFirstNested = require('../../utils/isFirstNested');\nconst isFirstNodeOfRoot = require('../../utils/isFirstNodeOfRoot');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst removeEmptyLinesBefore = require('../../utils/removeEmptyLinesBefore');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before rule',\n\trejected: 'Unexpected empty line before rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/rule-empty-line-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never', 'always-multi-line', 'never-multi-line'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['after-comment', 'first-nested', 'inside-block'],\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-rule',\n\t\t\t\t\t\t'after-single-line-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block-and-after-rule',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst expectation = /** @type {string} */ (primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment')) {\n\t\t\t\tconst prevNode = ruleNode.prev();\n\n\t\t\t\tif (prevNode && prevNode.type === 'comment') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isNested = ruleNode.parent && ruleNode.parent.type !== 'root';\n\n\t\t\t// Optionally ignore the expectation if inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore if the expectation is for multiple and the rule is single-line\n\t\t\tif (expectation.includes('multi-line') && isSingleLineString(ruleNode.toString())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet expectEmptyLineBefore = expectation.includes('always');\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-rule') && isAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block-and-after-rule') &&\n\t\t\t\t\tisNested &&\n\t\t\t\t\tisAfterRule(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-single-line-comment') &&\n\t\t\t\t\tisAfterSingleLineComment(ruleNode)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested)\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(ruleNode.raws.before);\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix\n\t\t\tif (context.fix) {\n\t\t\t\tconst newline = context.newline;\n\n\t\t\t\tif (typeof newline !== 'string') {\n\t\t\t\t\tthrow new Error(`The \"newline\" property must be a string: ${newline}`);\n\t\t\t\t}\n\n\t\t\t\tif (expectEmptyLineBefore) {\n\t\t\t\t\taddEmptyLineBefore(ruleNode, newline);\n\t\t\t\t} else {\n\t\t\t\t\tremoveEmptyLinesBefore(ruleNode, newline);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: ruleNode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {boolean}\n */\nfunction isAfterRule(ruleNode) {\n\tconst prevNode = getPreviousNonSharedLineCommentNode(ruleNode);\n\n\treturn prevNode != null && prevNode.type === 'rule';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isSharedLineComment = require('./isSharedLineComment');\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction isAfterSingleLineComment(node) {\n\tconst prevNode = node.prev();\n\n\treturn (\n\t\tprevNode !== undefined &&\n\t\tprevNode.type === 'comment' &&\n\t\t!isSharedLineComment(prevNode) &&\n\t\tprevNode.source &&\n\t\tprevNode.source.start &&\n\t\tprevNode.source.end &&\n\t\tprevNode.source.start.line === prevNode.source.end.line\n\t);\n}\n\nmodule.exports = isAfterSingleLineComment;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected name \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-name-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeName = attributeNode.qualifiedAttribute;\n\n\t\t\t\t\tif (!matchesStringOrRegExp(attributeName, primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(attributeName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('attribute'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   checkBeforeOperator: boolean,\n *   fix: ((attributeNode: import('postcss-selector-parser').Attribute) => boolean) | null,\n * }} options\n * @returns {void}\n */\nmodule.exports = function selectorAttributeOperatorSpaceChecker(options) {\n\toptions.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet hasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, options.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\tif (!operator) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst attributeNodeString = attributeNode.toString();\n\n\t\t\t\tstyleSearch({ source: attributeNodeString, target: operator }, (match) => {\n\t\t\t\t\tconst index = options.checkBeforeOperator ? match.startIndex : match.endIndex - 1;\n\n\t\t\t\t\tcheckOperator(attributeNodeString, index, rule, attributeNode, operator);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} index\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t\t * @param {string} operator\n\t\t */\n\t\tfunction checkOperator(source, index, node, attributeNode, operator) {\n\t\t\toptions.locationChecker({\n\t\t\t\tsource,\n\t\t\t\tindex,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (options.fix && options.fix(attributeNode)) {\n\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg.replace(\n\t\t\t\t\t\t\toptions.checkBeforeOperator\n\t\t\t\t\t\t\t\t? operator.charAt(0)\n\t\t\t\t\t\t\t\t: operator.charAt(operator.length - 1),\n\t\t\t\t\t\t\toperator,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + index,\n\t\t\t\t\t\tresult: options.result,\n\t\t\t\t\t\truleName: options.checkedRuleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (operator) => `Expected single space before \"${operator}\"`,\n\trejectedBefore: (operator) => `Unexpected whitespace before \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: true,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\tconst rawAttr = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\t\t\t\t\tconst rawAttrAfter = rawAttr && rawAttr.after;\n\n\t\t\t\t\t\t/** @type {{ attrAfter: string, setAttrAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { attrAfter, setAttrAfter } = rawAttrAfter\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tattrAfter: rawAttrAfter,\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawAttr.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\tattrAfter:\n\t\t\t\t\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.after) || '',\n\t\t\t\t\t\t\t\t\tsetAttrAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.spaces.attribute.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  };\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetAttrAfter(attrAfter.replace(/\\s*$/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString, isRegExp } = require('../../utils/validateTypes');\n\nconst ruleName = 'rule-selector-property-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, selector) => `Unexpected property \"${property}\" for selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/rule-selector-property-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<Record<string, string | RegExp | Array<string | RegExp>>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectors = Object.keys(primary);\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectorKey = selectors.find((selector) =>\n\t\t\t\tmatchesStringOrRegExp(ruleNode.selector, selector),\n\t\t\t);\n\n\t\t\tif (!selectorKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst disallowedProperties = primary[selectorKey];\n\n\t\t\tif (!disallowedProperties) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const node of ruleNode.nodes) {\n\t\t\t\tconst isDisallowedProperty =\n\t\t\t\t\tnode.type === 'decl' && matchesStringOrRegExp(node.prop, disallowedProperties);\n\n\t\t\t\tif (isDisallowedProperty) {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(node.prop, ruleNode.selector),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\t\tif (!operator || (operator && !primaryValues.includes(operator))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a string is a keyframe selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\tif (keywordSets.keyframeSelectorKeywords.has(selector)) {\n\t\treturn true;\n\t}\n\n\t// Percentages\n\tif (/^(?:\\d+|\\d*\\.\\d+)%$/.test(selector)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolveNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-class-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selectorValue, pattern) =>\n\t\t`Expected class selector \".${selectorValue}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-class-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isRegExp, isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tresolveNestedSelectors: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {boolean} */\n\t\tconst shouldResolveNestedSelectors =\n\t\t\tsecondaryOptions && secondaryOptions.resolveNestedSelectors;\n\t\t/** @type {RegExp} */\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only bother resolving selectors that have an interpolating &\n\t\t\tif (shouldResolveNestedSelectors && hasInterpolatingAmpersand(selector)) {\n\t\t\t\tfor (const nestedSelector of resolveNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(nestedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(nestedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparseSelector(selector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Root} fullSelector\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(fullSelector, ruleNode) {\n\t\t\tfullSelector.walkClasses((classNode) => {\n\t\t\t\tconst value = classNode.value;\n\t\t\t\tconst sourceIndex = classNode.sourceIndex;\n\n\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * An \"interpolating ampersand\" means an \"&\" used to interpolate\n * within another simple selector, rather than an \"&\" that\n * stands on its own as a simple selector.\n *\n * @param {string} selector\n * @returns {boolean}\n */\nfunction hasInterpolatingAmpersand(selector) {\n\tfor (const [i, char] of Array.from(selector).entries()) {\n\t\tif (char !== '&') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst prevChar = selector.charAt(i - 1);\n\n\t\tif (prevChar && !isCombinator(prevChar)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst nextChar = selector.charAt(i + 1);\n\n\t\tif (nextChar && !isCombinator(nextChar)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {string} x\n * @returns {boolean}\n */\nfunction isCombinator(x) {\n\treturn /[\\s+>~]/.test(x);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getRuleSelector = require('../../utils/getRuleSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (value) => `Expected quotes around \"${value}\"`,\n\trejected: (value) => `Unexpected quotes around \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-quotes',\n};\n\nconst acceptedQuoteMark = '\"';\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(getRuleSelector(ruleNode), result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.operator) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!attributeNode.quoted && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = acceptedQuoteMark;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.expected(attributeNode.value),\n\t\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoted && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\t\tmessages.rejected(attributeNode.value),\n\t\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * @param {import('postcss').Rule} ruleNode\n * @returns {string}\n */\nmodule.exports = function getRuleSelector(ruleNode) {\n\tconst raws = ruleNode.raws;\n\n\treturn (raws.selector && raws.selector.raw) || ruleNode.selector;\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\"`,\n\trejectedAfter: (operator) => `Unexpected whitespace after \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst checker = whitespaceChecker('space', primary, messages);\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: false,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\t/** @type {{ operatorAfter: string, setOperatorAfter: (fixed: string) => void }} */\n\t\t\t\t\t\tconst { operatorAfter, setOperatorAfter } = (() => {\n\t\t\t\t\t\t\tconst rawOperator = attributeNode.raws.operator;\n\n\t\t\t\t\t\t\tif (rawOperator) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperator.slice(\n\t\t\t\t\t\t\t\t\t\tattributeNode.operator ? attributeNode.operator.length : 0,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tdelete attributeNode.raws.operator;\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces) attributeNode.raws.spaces = {};\n\n\t\t\t\t\t\t\t\t\t\tif (!attributeNode.raws.spaces.operator)\n\t\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rawSpacesOperator =\n\t\t\t\t\t\t\t\tattributeNode.raws.spaces && attributeNode.raws.spaces.operator;\n\t\t\t\t\t\t\tconst rawOperatorAfter = rawSpacesOperator && rawSpacesOperator.after;\n\n\t\t\t\t\t\t\tif (rawOperatorAfter) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\trawSpacesOperator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperatorAfter:\n\t\t\t\t\t\t\t\t\t(attributeNode.spaces.operator && attributeNode.spaces.operator.after) || '',\n\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\tif (!attributeNode.spaces.operator) attributeNode.spaces.operator = {};\n\n\t\t\t\t\t\t\t\t\tattributeNode.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-attribute-operator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-operator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\t\tif (!operator || (operator && primaryValues.includes(operator))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-brackets-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"[\"',\n\trejectedOpening: 'Unexpected whitespace after \"[\"',\n\texpectedClosing: 'Expected single space before \"]\"',\n\trejectedClosing: 'Unexpected whitespace before \"]\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-attribute-brackets-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tlet hasFixed;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeSelectorString = attributeNode.toString();\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: '[' }, (match) => {\n\t\t\t\t\t\tconst nextCharIsSpace = attributeSelectorString[match.startIndex + 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex + 1;\n\n\t\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixBefore(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstyleSearch({ source: attributeSelectorString, target: ']' }, (match) => {\n\t\t\t\t\t\tconst prevCharIsSpace = attributeSelectorString[match.startIndex - 1] === ' ';\n\t\t\t\t\t\tconst index = attributeNode.sourceIndex + match.startIndex - 1;\n\n\t\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\t\tfixAfter(attributeNode);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixBefore(attributeNode) {\n\t\tconst spacesAttribute = attributeNode.raws.spaces && attributeNode.raws.spaces.attribute;\n\t\tconst rawAttrBefore = spacesAttribute && spacesAttribute.before;\n\n\t\t/** @type {{ attrBefore: string, setAttrBefore: (fixed: string) => void }} */\n\t\tconst { attrBefore, setAttrBefore } = rawAttrBefore\n\t\t\t? {\n\t\t\t\t\tattrBefore: rawAttrBefore,\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tspacesAttribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tattrBefore:\n\t\t\t\t\t\t(attributeNode.spaces.attribute && attributeNode.spaces.attribute.before) || '',\n\t\t\t\t\tsetAttrBefore(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces.attribute) attributeNode.spaces.attribute = {};\n\n\t\t\t\t\t\tattributeNode.spaces.attribute.before = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAttrBefore(attrBefore.replace(/^\\s*/, ''));\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('postcss-selector-parser').Attribute} attributeNode\n\t */\n\tfunction fixAfter(attributeNode) {\n\t\tconst key = attributeNode.operator\n\t\t\t? attributeNode.insensitive\n\t\t\t\t? 'insensitive'\n\t\t\t\t: 'value'\n\t\t\t: 'attribute';\n\n\t\tconst rawSpaces = attributeNode.raws.spaces && attributeNode.raws.spaces[key];\n\t\tconst rawAfter = rawSpaces && rawSpaces.after;\n\n\t\tconst spaces = attributeNode.spaces[key];\n\n\t\t/** @type {{ after: string, setAfter: (fixed: string) => void }} */\n\t\tconst { after, setAfter } = rawAfter\n\t\t\t? {\n\t\t\t\t\tafter: rawAfter,\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\trawSpaces.after = fixed;\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tafter: (spaces && spaces.after) || '',\n\t\t\t\t\tsetAfter(fixed) {\n\t\t\t\t\t\tif (!attributeNode.spaces[key]) attributeNode.spaces[key] = {};\n\n\t\t\t\t\t\t// @ts-expect-error -- TS2532: Object is possibly 'undefined'.\n\t\t\t\t\t\tattributeNode.spaces[key].after = fixed;\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tif (primary === 'always') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ' '));\n\t\t} else if (primary === 'never') {\n\t\t\tsetAfter(after.replace(/\\s*$/, ''));\n\t\t}\n\t}\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\nmodule.exports = function (node) {\n\t// if it's not a combinator, then it's not a standard combinator\n\tif (node.type !== 'combinator') {\n\t\treturn false;\n\t}\n\n\t// Ignore reference combinators like `/deep/`\n\tif (node.value.startsWith('/') || node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\t// ignore the combinators that are the first or last node in their container\n\tif (node.parent !== undefined && node.parent !== null) {\n\t\tconst parent = node.parent;\n\n\t\tif (node === parent.first) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node === parent.last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = normalizeCombinator(combinatorNode.value);\n\n\t\t\t\t\tif (!primary.includes(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst parseSelector = require('../utils/parseSelector');\nconst report = require('../utils/report');\n\n/**\n * @typedef {(args: { source: string, index: number, errTarget: string, err: (message: string) => void }) => void} LocationChecker\n *\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: LocationChecker,\n *   locationType: 'before' | 'after',\n *   checkedRuleName: string,\n *   fix: ((combinator: import('postcss-selector-parser').Combinator) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorCombinatorSpaceChecker(opts) {\n\tlet hasFixed;\n\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\thasFixed = false;\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tconst fixedSelector = parseSelector(selector, opts.result, rule, (selectorTree) => {\n\t\t\tselectorTree.walkCombinators((node) => {\n\t\t\t\t// Ignore non-standard combinators\n\t\t\t\tif (!isStandardSyntaxCombinator(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore spaced descendant combinator\n\t\t\t\tif (/\\s/.test(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check the exist of node in prev of the combinator.\n\t\t\t\t// in case some that aren't the first begin with combinators (nesting syntax)\n\t\t\t\tif (opts.locationType === 'before' && !node.prev()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parentParentNode = node.parent && node.parent.parent;\n\n\t\t\t\t// Ignore pseudo-classes selector like `.foo:nth-child(2n + 1) {}`\n\t\t\t\tif (parentParentNode && parentParentNode.type === 'pseudo') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceIndex = node.sourceIndex;\n\t\t\t\tconst index =\n\t\t\t\t\tnode.value.length > 1 && opts.locationType === 'before'\n\t\t\t\t\t\t? sourceIndex\n\t\t\t\t\t\t: sourceIndex + node.value.length - 1;\n\n\t\t\t\tcheck(selector, node, index, rule, sourceIndex);\n\t\t\t});\n\t\t});\n\n\t\tif (hasFixed && fixedSelector) {\n\t\t\tif (!rule.raws.selector) {\n\t\t\t\trule.selector = fixedSelector;\n\t\t\t} else {\n\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {import('postcss-selector-parser').Combinator} combinator\n\t * @param {number} index\n\t * @param {import('postcss').Node} node\n\t * @param {number} sourceIndex\n\t */\n\tfunction check(source, combinator, index, node, sourceIndex) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terrTarget: combinator.value,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(combinator)) {\n\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: (combinator) => `Expected single space before \"${combinator}\"`,\n\trejectedBefore: (combinator) => `Unexpected whitespace before \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tlocationType: 'before',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.before = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.before = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorCombinatorSpaceChecker = require('../selectorCombinatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-combinator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (combinator) => `Expected single space after \"${combinator}\"`,\n\trejectedAfter: (combinator) => `Unexpected whitespace after \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorCombinatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tlocationType: 'after',\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (combinator) => {\n\t\t\t\t\t\tif (primary === 'always') {\n\t\t\t\t\t\t\tcombinator.spaces.after = ' ';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\t\tcombinator.spaces.after = '';\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-combinator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-combinator-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = normalizeCombinator(combinatorNode.value);\n\n\t\t\t\t\tif (primary.includes(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isBoolean } = require('../../utils/validateTypes');\n\nconst ruleName = 'block-no-empty';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected empty block',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/block-no-empty',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isBoolean,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['comments'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreComments = optionsMatches(secondaryOptions, 'ignore', 'comments');\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\t/**\n\t\t * @param {import('postcss').Rule | import('postcss').AtRule} statement\n\t\t */\n\t\tfunction check(statement) {\n\t\t\tif (!hasEmptyBlock(statement) && !ignoreComments) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!hasBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasCommentsOnly = statement.nodes.every((node) => node.type === 'comment');\n\n\t\t\tif (!hasCommentsOnly) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet index = beforeBlockString(statement, { noRawBefore: true }).length;\n\n\t\t\t// For empty blocks when using SugarSS parser\n\t\t\tif (statement.raws.between === undefined) {\n\t\t\t\tindex--;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: statement,\n\t\t\t\tstart: statement.positionBy({ index }),\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-id-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selectorValue, pattern) =>\n\t\t`Expected ID selector \"#${selectorValue}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-id-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {RegExp} */\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walk((selectorNode) => {\n\t\t\t\t\tif (selectorNode.type !== 'id') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = selectorNode.value;\n\t\t\t\t\tconst sourceIndex = selectorNode.sourceIndex;\n\n\t\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.expected(value, primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get raw selector so we can allow end-of-line comments, e.g.\n\t\t\t// a, /* comment */\n\t\t\t// b {}\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixIndices = [];\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource: selector,\n\t\t\t\t\ttarget: ',',\n\t\t\t\t\tfunctionArguments: 'skip',\n\t\t\t\t},\n\t\t\t\t(match) => {\n\t\t\t\t\tconst nextChars = selector.slice(match.endIndex);\n\n\t\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t\t// ending the comment so we're fine\n\t\t\t\t\tif (/^\\s+\\/\\//.test(nextChars)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\t\tconst indextoCheckAfter = /^\\s+\\/\\*/.test(nextChars)\n\t\t\t\t\t\t? selector.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t\t: match.startIndex;\n\n\t\t\t\t\tchecker.afterOneOnly({\n\t\t\t\t\t\tsource: selector,\n\t\t\t\t\t\tindex: indextoCheckAfter,\n\t\t\t\t\t\terr: (m) => {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tfixIndices.push(indextoCheckAfter + 1);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: match.startIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixIndices.length) {\n\t\t\t\tlet fixedSelector = selector;\n\n\t\t\t\tfor (const index of fixIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = fixedSelector.slice(0, index);\n\t\t\t\t\tlet afterSelector = fixedSelector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = context.newline + afterSelector;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tfixedSelector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!matchesStringOrRegExp(selector, primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected(selector),\n\t\t\t\tnode: ruleNode,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Node} node - postcss-selector-parser node (of type pseudo)\n * @return {node is import('postcss-selector-parser').Pseudo} If `true`, the node is a context-functional pseudo-class\n */\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n\tif (node.type === 'pseudo') {\n\t\tconst normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n\n\t\treturn (\n\t\t\tkeywordSets.logicalCombinationsPseudoClasses.has(normalisedParentName) ||\n\t\t\tkeywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName)\n\t\t);\n\t}\n\n\treturn false;\n};\n","'use strict';\n\n/**\n * @param {unknown} value\n */\nmodule.exports = function isNonNegativeInteger(value) {\n\treturn Number.isInteger(value) && typeof value === 'number' && value >= 0;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-attribute';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} attribute ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-attribute',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAttributes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type !== 'attribute') {\n\t\t\t\t\t// Not an attribute node -> ignore\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAttributes', childNode.attribute)) {\n\t\t\t\t\t// it's an attribute that is supposed to be ignored\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\ttotal += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../utils/isStandardSyntaxRule');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix: ((rule: import('postcss').Rule, index: number) => boolean) | null,\n * }} opts\n * @returns {void}\n */\nmodule.exports = function selectorListCommaWhitespaceChecker(opts) {\n\topts.root.walkRules((rule) => {\n\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: selector,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tcheckDelimiter(selector, match.startIndex, rule);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Rule} node\n\t */\n\tfunction checkDelimiter(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst beforeSelector = selector.slice(0, index + 1);\n\t\t\t\t\tlet afterSelector = selector.slice(index + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterSelector = afterSelector.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'at-rule-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/at-rule-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!primaryValues.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tword: `@${atRule.name}`,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.includes('always')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.includes('never')) {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-combinators';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${\n\t\t\tmax === 1 ? 'combinator' : 'combinators'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-combinators',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'combinator') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (nonSpaceCharacter) => `Unexpected \"${nonSpaceCharacter}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-descendant-combinator-no-non-space',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t// Return early for selectors containing comments\n\t\t\t// TODO: renable when parser and stylelint are compatible\n\t\t\tif (selector.includes('/*')) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (combinatorNode.value !== ' ') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = combinatorNode.toString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue.includes('  ') ||\n\t\t\t\t\t\tvalue.includes('\\t') ||\n\t\t\t\t\t\tvalue.includes('\\n') ||\n\t\t\t\t\t\tvalue.includes('\\r')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (context.fix && /^\\s+$/.test(value)) {\n\t\t\t\t\t\t\thasFixed = true;\n\n\t\t\t\t\t\t\tif (!combinatorNode.raws) combinatorNode.raws = {};\n\n\t\t\t\t\t\t\tcombinatorNode.raws.value = ' ';\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorListCommaWhitespaceChecker = require('../selectorListCommaWhitespaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Rule, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tselectorListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (ruleNode, index) => {\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(ruleNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(ruleNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [ruleNode, commaIndices] of fixData.entries()) {\n\t\t\t\tlet selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tlet beforeSelector = selector.slice(0, index);\n\t\t\t\t\tconst afterSelector = selector.slice(index);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tconst spaceIndex = beforeSelector.search(/\\s+$/);\n\n\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\tbeforeSelector =\n\t\t\t\t\t\t\t\tbeforeSelector.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\tbeforeSelector.slice(spaceIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbeforeSelector += context.newline;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (primary === 'never-multi-line') {\n\t\t\t\t\t\tbeforeSelector = beforeSelector.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = beforeSelector + afterSelector;\n\t\t\t\t}\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = selector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = selector;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *  @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t *  @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'class') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} compound ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-compound-selectors',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Finds actual selectors in selectorNode object and checks them.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tlet compoundCount = 1;\n\n\t\t\tselectorNode.each((childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Compound selectors are separated by combinators, so increase count when meeting one\n\t\t\t\tif (childNode.type === 'combinator') {\n\t\t\t\t\tcompoundCount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tselectorNode.type !== 'root' &&\n\t\t\t\tselectorNode.type !== 'pseudo' &&\n\t\t\t\tcompoundCount > primary\n\t\t\t) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector if there is a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Process each resolved selector with `checkSelector` via postcss-selector-parser\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (s) => checkSelector(s, ruleNode));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'property-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/property-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// either the prefix or unprefixed version is in the list\n\t\t\tif (matchesStringOrRegExp([prop, vendor.unprefixed(prop)], primary)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a type selector is standard\n *\n * @param {import('postcss-selector-parser').Tag} node postcss-selector-parser node (of type tag)\n * @return {boolean} If `true`, the type selector is standard\n */\nmodule.exports = function (node) {\n\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t// as \"tags\", so we need to ignore them ourselves.\n\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t// should be the :nth-child pseudo node.\n\tif (!node.parent || !node.parent.parent) {\n\t\treturn false;\n\t}\n\n\tconst _node$parent$parent = node.parent.parent;\n\tconst parentType = _node$parent$parent.type;\n\tconst parentValue = _node$parent$parent.value;\n\n\tif (parentValue) {\n\t\tconst normalisedParentName = parentValue.toLowerCase().replace(/:+/, '');\n\n\t\tif (\n\t\t\tparentType === 'pseudo' &&\n\t\t\t(keywordSets.aNPlusBNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.linguisticPseudoClasses.has(normalisedParentName) ||\n\t\t\t\tkeywordSets.shadowTreePseudoElements.has(normalisedParentName))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// &-bar is a nesting selector combined with a suffix\n\tif (node.prev() && node.prev().type === 'nesting') {\n\t\treturn false;\n\t}\n\n\tif (node.value.startsWith('%')) {\n\t\treturn false;\n\t}\n\n\t// Reference combinators like `/deep/`\n\tif (node.value.startsWith('/') && node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-type';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} type ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-type',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDescendant = optionsMatches(secondaryOptions, 'ignore', 'descendant');\n\t\tconst ignoreChild = optionsMatches(secondaryOptions, 'ignore', 'child');\n\t\tconst ignoreCompounded = optionsMatches(secondaryOptions, 'ignore', 'compounded');\n\t\tconst ignoreNextSibling = optionsMatches(secondaryOptions, 'ignore', 'next-sibling');\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', childNode.value)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreChild && hasChildCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreCompounded && hasCompoundSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\treturn childNode.type === 'tag' ? total + 1 : total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/** @typedef {import('postcss-selector-parser').Node} SelectorNode */\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasDescendantCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isDescendantCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasChildCombinatorBefore(node) {\n\tif (!node.parent) return false;\n\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some((n) => isChildCombinator(n));\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasCompoundSelector(node) {\n\tif (node.prev() && !isCombinator(node.prev())) {\n\t\treturn true;\n\t}\n\n\treturn node.next() && !isCombinator(node.next());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction hasNextSiblingCombinator(node) {\n\treturn node.prev() && isNextSiblingCombinator(node.prev());\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isCombinator(node) {\n\tif (!node) return false;\n\n\treturn node.type === 'combinator';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isDescendantCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && isString(node.value) && isOnlyWhitespace(node.value);\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isChildCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && node.value === '>';\n}\n\n/**\n * @param {SelectorNode} node\n * @returns {boolean}\n */\nfunction isNextSiblingCombinator(node) {\n\treturn isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newSelectorString = selector\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = newSelectorString;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = newSelectorString;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tviolatedLFNewLinesRegex.test(selector) ||\n\t\t\t\tviolatedCRLFNewLinesRegex.test(selector)\n\t\t\t) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-id';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-id',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNonNegativeInteger,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreContextFunctionalPseudoClasses: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'selector' ||\n\t\t\t\t\t(isContextFunctionalPseudoClass(childNode) &&\n\t\t\t\t\t\t!isIgnoredContextFunctionalPseudoClass(childNode))\n\t\t\t\t) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'id') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredContextFunctionalPseudoClass(node) {\n\t\t\treturn (\n\t\t\t\tnode.type === 'pseudo' &&\n\t\t\t\toptionsMatches(secondaryOptions, 'ignoreContextFunctionalPseudoClasses', node.value)\n\t\t\t);\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'hue-degree-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (unfixed, fixed) => `Expected \"${unfixed}\" to be \"${fixed}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/hue-degree-notation',\n};\n\nconst HUE_FIRST_ARG_FUNCS = ['hsl', 'hsla', 'hwb'];\nconst HUE_THIRD_ARG_FUNCS = ['lch'];\nconst HUE_FUNCS = new Set([...HUE_FIRST_ARG_FUNCS, ...HUE_THIRD_ARG_FUNCS]);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['angle', 'number'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (node.type !== 'function') return;\n\n\t\t\t\tif (!HUE_FUNCS.has(node.value.toLowerCase())) return;\n\n\t\t\t\tconst hue = findHue(node);\n\n\t\t\t\tif (!hue) return;\n\n\t\t\t\tconst { value } = hue;\n\n\t\t\t\tif (!isStandardSyntaxValue(value)) return;\n\n\t\t\t\tif (!isDegree(value) && !isNumber(value)) return;\n\n\t\t\t\tif (primary === 'angle' && isDegree(value)) return;\n\n\t\t\t\tif (primary === 'number' && isNumber(value)) return;\n\n\t\t\t\tconst fixed = primary === 'angle' ? asDegree(value) : asNumber(value);\n\t\t\t\tconst unfixed = value;\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\thue.value = fixed;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst valueIndex = declarationValueIndex(decl);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(unfixed, fixed),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: valueIndex + hue.sourceIndex,\n\t\t\t\t\tendIndex: valueIndex + hue.sourceEndIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} value\n */\nfunction asDegree(value) {\n\treturn `${value}deg`;\n}\n\n/**\n * @param {string} value\n */\nfunction asNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\tif (dimension) return dimension.number;\n\n\tthrow new TypeError(`The \"${value}\" value must have a unit`);\n}\n\n/**\n * @param {import('postcss-value-parser').FunctionNode} node\n */\nfunction findHue(node) {\n\tconst args = node.nodes.filter(({ type }) => type === 'word' || type === 'function');\n\tconst value = node.value.toLowerCase();\n\n\tif (HUE_FIRST_ARG_FUNCS.includes(value)) {\n\t\treturn args[0];\n\t}\n\n\tif (HUE_THIRD_ARG_FUNCS.includes(value)) {\n\t\treturn args[2];\n\t}\n\n\treturn undefined;\n}\n\n/**\n * @param {string} value\n */\nfunction isDegree(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit.toLowerCase() === 'deg';\n}\n\n/**\n * @param {string} value\n */\nfunction isNumber(value) {\n\tconst dimension = valueParser.unit(value);\n\n\treturn dimension && dimension.unit === '';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/color-hex-length',\n};\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['short', 'long'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getDeclarationValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value: hexValue } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tif (primary === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (primary === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst variant = primary === 'long' ? longer : shorter;\n\t\t\t\tconst expectedHex = variant(hexValue);\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expectedHex;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst index = declarationValueIndex(decl) + node.sourceIndex;\n\t\t\t\tconst endIndex = index + node.value.length;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(hexValue, expectedHex),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {string} hex\n */\nfunction canShrink(hex) {\n\thex = hex.toLowerCase();\n\n\treturn (\n\t\thex[1] === hex[2] &&\n\t\thex[3] === hex[4] &&\n\t\thex[5] === hex[6] &&\n\t\t(hex.length === 7 || (hex.length === 9 && hex[7] === hex[8]))\n\t);\n}\n\n/**\n * @param {string} hex\n */\nfunction shorter(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i += 2) {\n\t\thexVariant += hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {string} hex\n */\nfunction longer(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i++) {\n\t\thexVariant += hex.charAt(i).repeat(2);\n\t}\n\n\treturn hexVariant;\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\n/**\n * @param {import('postcss-value-parser').Node} node\n */\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-nested-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) =>\n\t\t`Expected nested selector \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-nested-pattern',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isRegExp, isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = isString(primary) ? new RegExp(primary) : primary;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (ruleNode.parent && ruleNode.parent.type !== 'rule') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (normalizedPattern.test(selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\tnode: ruleNode,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorParser = require('postcss-selector-parser');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-universal';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} universal ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-universal',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors\n\t\t\t\t// All logical combinations will be resolved as nested selector in `postcss-resolve-nested-selector`\n\t\t\t\tif (childNode.type === 'selector') {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'universal') total += 1;\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst selectors = [];\n\n\t\t\tselectorParser()\n\t\t\t\t.astSync(ruleNode.selector)\n\t\t\t\t.walk((node) => {\n\t\t\t\t\tif (node.type === 'selector') {\n\t\t\t\t\t\tselectors.push(String(node).trim());\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tfor (const selector of selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected vendor-prefix \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-no-vendor-prefix',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (isAutoprefixable.selector(pseudoNode.value)) {\n\t\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', pseudoNode.value)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\truleNode.selector = isAutoprefixable.unprefix(ruleNode.selector);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(pseudoNode.value),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: (ruleNode.raws.before || '').length + pseudoNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isNonNegativeInteger = require('../../utils/isNonNegativeInteger');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-pseudo-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} pseudo-${max === 1 ? 'class' : 'classes'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-pseudo-class',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNonNegativeInteger,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} selectorNode\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t */\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\t// Exclude pseudo elements from the count\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'pseudo' &&\n\t\t\t\t\t(childNode.value.includes('::') ||\n\t\t\t\t\t\tkeywordSets.levelOneAndTwoPseudoElements.has(childNode.value.toLowerCase().slice(1)))\n\t\t\t\t) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'pseudo') {\n\t\t\t\t\ttotal += 1;\n\t\t\t\t}\n\n\t\t\t\treturn total;\n\t\t\t}, 0);\n\n\t\t\tif (count > primary) {\n\t\t\t\tconst selector = selectorNode.toString();\n\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selector, primary),\n\t\t\t\t\tword: selector,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\tcheckSelector(selectorTree, ruleNode);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst { selectorSpecificity, compare } = require('@csstools/selector-specificity');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString, assertNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-max-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) => `Expected \"${selector}\" to have a specificity no more than \"${max}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-max-specificity',\n};\n\n/** @typedef {import('@csstools/selector-specificity').Specificity} Specificity */\n\n/**\n * Return a zero specificity. We need a new instance each time so that it can mutated.\n *\n * @returns {Specificity}\n */\nconst zeroSpecificity = () => ({ a: 0, b: 0, c: 0 });\n\n/**\n * Calculate the sum of given specificiies.\n *\n * @param {Specificity[]} specificities\n * @returns {Specificity}\n */\nconst specificitySum = (specificities) => {\n\tconst sum = zeroSpecificity();\n\n\tfor (const { a, b, c } of specificities) {\n\t\tsum.a += a;\n\t\tsum.b += b;\n\t\tsum.c += c;\n\t}\n\n\treturn sum;\n};\n\n/** @type {import('stylelint').Rule<string>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [\n\t\t\t\t\t// Check that the max specificity is in the form \"a,b,c\"\n\t\t\t\t\t(spec) => isString(spec) && /^\\d+,\\d+,\\d+$/.test(spec),\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Calculate the specificity of a simple selector (type, attribute, class, ID, or pseudos's own value).\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst simpleSpecificity = (node) => {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', node.toString())) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\treturn selectorSpecificity(node);\n\t\t};\n\n\t\t/**\n\t\t * Calculate the the specificity of the most specific direct child.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Container<unknown>} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst maxChildSpecificity = (node) =>\n\t\t\tnode.reduce((maxSpec, child) => {\n\t\t\t\tconst childSpecificity = nodeSpecificity(child); // eslint-disable-line no-use-before-define\n\n\t\t\t\treturn compare(childSpecificity, maxSpec) > 0 ? childSpecificity : maxSpec;\n\t\t\t}, zeroSpecificity());\n\n\t\t/**\n\t\t * Calculate the specificity of a pseudo selector including own value and children.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Pseudo} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst pseudoSpecificity = (node) => {\n\t\t\t// `node.toString()` includes children which should be processed separately,\n\t\t\t// so use `node.value` instead\n\t\t\tconst ownValue = node.value.toLowerCase();\n\n\t\t\tif (ownValue === ':where') {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tlet ownSpecificity;\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreSelectors', ownValue)) {\n\t\t\t\townSpecificity = zeroSpecificity();\n\t\t\t} else if (keywordSets.aNPlusBOfSNotationPseudoClasses.has(ownValue.replace(/^:/, ''))) {\n\t\t\t\t// TODO: We need to support `<complex-selector-list>` in `ignoreSelectors`. E.g. `:nth-child(even of .foo)`.\n\t\t\t\treturn selectorSpecificity(node);\n\t\t\t} else {\n\t\t\t\townSpecificity = selectorSpecificity(node.clone({ nodes: [] }));\n\t\t\t}\n\n\t\t\treturn specificitySum([ownSpecificity, maxChildSpecificity(node)]);\n\t\t};\n\n\t\t/**\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {boolean}\n\t\t */\n\t\tconst shouldSkipPseudoClassArgument = (node) => {\n\t\t\t// postcss-selector-parser includes the arguments to nth-child() functions\n\t\t\t// as \"tags\", so we need to ignore them ourselves.\n\t\t\t// The fake-tag's \"parent\" is actually a selector node, whose parent\n\t\t\t// should be the :nth-child pseudo node.\n\t\t\tconst parentNode = node.parent && node.parent.parent;\n\n\t\t\tif (parentNode && parentNode.type === 'pseudo' && parentNode.value) {\n\t\t\t\tconst pseudoClass = parentNode.value.toLowerCase().replace(/^:/, '');\n\n\t\t\t\treturn (\n\t\t\t\t\tkeywordSets.aNPlusBNotationPseudoClasses.has(pseudoClass) ||\n\t\t\t\t\tkeywordSets.linguisticPseudoClasses.has(pseudoClass)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t * Calculate the specificity of a node parsed by `postcss-selector-parser`.\n\t\t *\n\t\t * @param {import('postcss-selector-parser').Node} node\n\t\t * @returns {Specificity}\n\t\t */\n\t\tconst nodeSpecificity = (node) => {\n\t\t\tif (shouldSkipPseudoClassArgument(node)) {\n\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'attribute':\n\t\t\t\tcase 'class':\n\t\t\t\tcase 'id':\n\t\t\t\tcase 'tag':\n\t\t\t\t\treturn simpleSpecificity(node);\n\t\t\t\tcase 'pseudo':\n\t\t\t\t\treturn pseudoSpecificity(node);\n\t\t\t\tcase 'selector':\n\t\t\t\t\t// Calculate the sum of all the direct children\n\t\t\t\t\treturn specificitySum(node.map((n) => nodeSpecificity(n)));\n\t\t\t\tdefault:\n\t\t\t\t\treturn zeroSpecificity();\n\t\t\t}\n\t\t};\n\n\t\tconst [a, b, c] = primary.split(',').map((s) => Number.parseFloat(s));\n\n\t\tassertNumber(a);\n\t\tassertNumber(b);\n\t\tassertNumber(c);\n\n\t\tconst maxSpecificity = { a, b, c };\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `.selectors` gets us each selector in the eventuality we have a comma separated set\n\t\t\tfor (const selector of ruleNode.selectors) {\n\t\t\t\tfor (const resolvedSelector of resolvedNestedSelector(selector, ruleNode)) {\n\t\t\t\t\t// Skip non-standard syntax selectors\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (selectorTree) => {\n\t\t\t\t\t\t// Check if the selector specificity exceeds the allowed maximum\n\t\t\t\t\t\tif (compare(maxChildSpecificity(selectorTree), maxSpecificity) > 0) {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tmessage: messages.expected(resolvedSelector, primary),\n\t\t\t\t\t\t\t\tword: selector,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(\n\t\t\t\truleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector,\n\t\t\t\tresult,\n\t\t\t\truleNode,\n\t\t\t\t(selectorTree) => {\n\t\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\t\tconst pseudo = pseudoNode.value;\n\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(pseudo)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpseudo.includes('::') ||\n\t\t\t\t\t\t\tkeywordSets.levelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expectedPseudo =\n\t\t\t\t\t\t\tprimary === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n\t\t\t\t\t\tif (pseudo === expectedPseudo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tpseudoNode.value = expectedPseudo;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(pseudo, expectedPseudo),\n\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\tif (ruleNode.raws.selector) {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected qualifying type selector',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-no-qualifying-type',\n};\n\nconst selectorCharacters = ['#', '.', '['];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isSelectorCharacters(value) {\n\treturn selectorCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {import('postcss-selector-parser').Tag} node\n * @returns {Array<import('postcss-selector-parser').Node>}\n */\nfunction getRightNodes(node) {\n\tconst result = [];\n\n\t/** @type {import('postcss-selector-parser').Node} */\n\tlet rightNode = node;\n\n\twhile ((rightNode = rightNode.next())) {\n\t\tif (rightNode.type === 'combinator') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(rightNode);\n\t}\n\n\treturn result;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [true, false],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['attribute', 'class', 'id'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isKeyframeRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isSelectorCharacters(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-selector-parser').Root} selectorAST\n\t\t\t */\n\t\t\tfunction checkSelector(selectorAST) {\n\t\t\t\tselectorAST.walkTags((selector) => {\n\t\t\t\t\tconst selectorParent = selector.parent;\n\n\t\t\t\t\tif (selectorParent && selectorParent.nodes.length === 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectorNodes = getRightNodes(selector);\n\t\t\t\t\tconst index = selector.sourceIndex;\n\n\t\t\t\t\tfor (const selectorNode of selectorNodes) {\n\t\t\t\t\t\tif (selectorNode.type === 'id' && !optionsMatches(secondaryOptions, 'ignore', 'id')) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselectorNode.type === 'class' &&\n\t\t\t\t\t\t\t!optionsMatches(secondaryOptions, 'ignore', 'class')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselectorNode.type === 'attribute' &&\n\t\t\t\t\t\t\t!optionsMatches(secondaryOptions, 'ignore', 'attribute')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const resolvedSelector of resolvedNestedSelector(ruleNode.selector, ruleNode)) {\n\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, checkSelector);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(index) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomSelector = require('../../utils/isCustomSelector');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-class selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoClasses: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} selector\n\t\t * @param {import('postcss').ChildNode} node\n\t\t */\n\t\tfunction check(selector, node) {\n\t\t\tparseSelector(selector, result, node, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isCustomSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet index = null;\n\t\t\t\t\tconst name = value.slice(1).toLowerCase();\n\n\t\t\t\t\tif (node.type === 'atrule' && node.name === 'page') {\n\t\t\t\t\t\tif (keywordSets.atRulePagePseudoClasses.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvendor.prefix(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoClasses.has(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoElements.has(name)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {import('postcss-selector-parser').Base} */\n\t\t\t\t\t\tlet prevPseudoElement = pseudoNode;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevPseudoElement = /** @type {import('postcss-selector-parser').Base} */ (\n\t\t\t\t\t\t\t\tprevPseudoElement.prev()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (prevPseudoElement);\n\n\t\t\t\t\t\tif (prevPseudoElement) {\n\t\t\t\t\t\t\tconst prevPseudoElementValue = prevPseudoElement.value.toLowerCase().slice(2);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tkeywordSets.webkitScrollbarPseudoElements.has(prevPseudoElementValue) &&\n\t\t\t\t\t\t\t\tkeywordSets.webkitScrollbarPseudoClasses.has(name)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = pseudoNode.sourceIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tlet selector = null;\n\n\t\t\tif (node.type === 'rule') {\n\t\t\t\tif (!isStandardSyntaxRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.selector;\n\t\t\t} else if (node.type === 'atrule' && node.name === 'page' && node.params) {\n\t\t\t\tif (!isStandardSyntaxAtRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.params;\n\t\t\t}\n\n\t\t\t// Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\t\t\tif (!selector) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(selector, node);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\n/**\n * Check whether a selector is a custom one\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\treturn selector.startsWith(':--');\n};\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst {\n\tisPseudoClass,\n\tisAttribute,\n\tisClassName,\n\tisUniversal,\n\tisIdentifier,\n\tisTag,\n} = require('postcss-selector-parser');\nconst { assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-not-notation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} :not() pseudo-class notation`,\n});\nconst meta = { url: 'https://stylelint.io/user-guide/rules/list/selector-not-notation' };\n\n/** @typedef {import('postcss-selector-parser').Node} Node */\n/** @typedef {import('postcss-selector-parser').Selector} Selector */\n/** @typedef {import('postcss-selector-parser').Pseudo} Pseudo */\n\n/**\n * @param {Node} node\n * @returns {boolean}\n */\nconst isSimpleSelector = (node) =>\n\tisPseudoClass(node) ||\n\tisAttribute(node) ||\n\tisClassName(node) ||\n\tisUniversal(node) ||\n\tisIdentifier(node) ||\n\tisTag(node);\n\n/**\n * @param {Node} node\n * @returns {node is Pseudo}\n */\nconst isNot = (node) =>\n\tisPseudoClass(node) && node.value !== undefined && node.value.toLowerCase() === ':not';\n\n/**\n * @param {Selector[]} list\n * @returns {boolean}\n */\nconst isSimple = (list) => {\n\tif (list.length > 1) return false;\n\n\tassert(list[0], 'list is never empty');\n\tconst [first, second] = list[0].nodes;\n\n\tif (!first) return true;\n\n\tif (second) return false;\n\n\treturn isSimpleSelector(first) && !isNot(first);\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['simple', 'complex'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) return;\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':not(')) return;\n\n\t\t\tif (!isStandardSyntaxSelector(selector)) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (container) => {\n\t\t\t\tcontainer.walkPseudos((pseudo) => {\n\t\t\t\t\tif (!isNot(pseudo)) return;\n\n\t\t\t\t\tif (primary === 'complex') {\n\t\t\t\t\t\tconst prev = pseudo.prev();\n\t\t\t\t\t\tconst hasConsecutiveNot = prev && isNot(prev);\n\n\t\t\t\t\t\tif (!hasConsecutiveNot) return;\n\n\t\t\t\t\t\tif (context.fix) return fixComplex(prev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst selectors = pseudo.nodes;\n\n\t\t\t\t\t\tif (isSimple(selectors)) return;\n\n\t\t\t\t\t\tconst mustFix =\n\t\t\t\t\t\t\tcontext.fix &&\n\t\t\t\t\t\t\tselectors.length > 1 &&\n\t\t\t\t\t\t\tselectors[1] &&\n\t\t\t\t\t\t\t(selectors[1].nodes.length === 0 ||\n\t\t\t\t\t\t\t\tselectors.every(({ nodes }) => nodes.length === 1));\n\n\t\t\t\t\t\tif (mustFix) return fixSimple(pseudo);\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {Pseudo} not\n */\nfunction fixSimple(not) {\n\tconst simpleSelectors = not.nodes\n\t\t.filter(({ nodes }) => nodes[0] && isSimpleSelector(nodes[0]))\n\t\t.map((s) => {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = '';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\n\t\t\treturn s;\n\t\t});\n\tconst firstSelector = simpleSelectors.shift();\n\n\tassert(firstSelector);\n\tassert(not.parent);\n\n\tnot.empty();\n\tnot.nodes.push(firstSelector);\n\n\tfor (const s of simpleSelectors) {\n\t\tconst last = not.parent.last;\n\n\t\tnot.parent.insertAfter(last, last.clone({ nodes: [s] }));\n\t}\n}\n\n/**\n * @param {Pseudo} previousNot\n */\nfunction fixComplex(previousNot) {\n\tconst indentAndTrimRight = (/** @type {Selector[]} */ selectors) => {\n\t\tfor (const s of selectors) {\n\t\t\tassert(s.nodes[0]);\n\t\t\ts.nodes[0].rawSpaceBefore = ' ';\n\t\t\ts.nodes[0].rawSpaceAfter = '';\n\t\t}\n\t};\n\tconst [head, ...tail] = previousNot.nodes;\n\tlet node = previousNot.next();\n\n\tif (head == null || head.nodes.length === 0) return;\n\n\tassert(head.nodes[0]);\n\thead.nodes[0].rawSpaceBefore = '';\n\thead.nodes[0].rawSpaceAfter = '';\n\tindentAndTrimRight(tail);\n\n\twhile (isNot(node)) {\n\t\tconst selectors = node.nodes;\n\t\tconst prev = node;\n\n\t\tindentAndTrimRight(selectors);\n\t\tpreviousNot.nodes = previousNot.nodes.concat(selectors);\n\t\tnode = node.next();\n\t\tprev.remove();\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-parentheses-space-inside',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = ruleNode.raws.selector ? ruleNode.raws.selector.raw : ruleNode.selector;\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (!pseudoNode.length) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paramString = pseudoNode.map((node) => String(node)).join(',');\n\t\t\t\t\tconst nextCharIsSpace = paramString.startsWith(' ');\n\t\t\t\t\tconst openIndex = pseudoNode.sourceIndex + pseudoNode.value.length + 1;\n\n\t\t\t\t\tif (nextCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!nextCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetFirstNodeSpaceBefore(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedOpening, openIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst prevCharIsSpace = paramString.endsWith(' ');\n\t\t\t\t\tconst closeIndex = openIndex + paramString.length - 1;\n\n\t\t\t\t\tif (prevCharIsSpace && primary === 'never') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.rejectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!prevCharIsSpace && primary === 'always') {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tsetLastNodeSpaceAfter(pseudoNode, ' ');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplain(messages.expectedClosing, closeIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed && fixedSelector) {\n\t\t\t\tif (!ruleNode.raws.selector) {\n\t\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\truleNode.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t */\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setFirstNodeSpaceBefore(node, value) {\n\tconst target = node.first;\n\n\tif (target.type === 'selector') {\n\t\tsetFirstNodeSpaceBefore(target, value);\n\t} else {\n\t\ttarget.spaces.before = value;\n\t}\n}\n\n/**\n * @param {import('postcss-selector-parser').Container} node\n * @param {string} value\n * @returns {void}\n */\nfunction setLastNodeSpaceAfter(node, value) {\n\tconst target = node.last;\n\n\tif (target.type === 'selector') {\n\t\tsetLastNodeSpaceAfter(target, value);\n\t} else {\n\t\ttarget.spaces.after = value;\n\t}\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransformSelector(result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst pseudoElement = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(pseudoElement)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!pseudoElement.includes('::') &&\n\t\t\t\t\t\t!keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst expectedPseudoElement =\n\t\t\t\t\t\tprimary === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n\t\t\t\t\tif (pseudoElement === expectedPseudoElement) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudoNode.value = expectedPseudoElement;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(pseudoElement, expectedPseudoElement),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {import('stylelint').PostcssResult} result\n * @param {import('postcss').Rule} node\n * @param {(root: import('postcss-selector-parser').Root) => void} callback\n * @returns {string | undefined}\n */\nmodule.exports = function transformSelector(result, node, callback) {\n\ttry {\n\t\treturn selectorParser(callback).processSync(node, { updateSelector: true });\n\t} catch {\n\t\tresult.warn('Cannot parse selector', { node, stylelintType: 'parseError' });\n\n\t\treturn undefined;\n\t}\n};\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-class-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-class \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-class-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(1);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value[1] !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-element selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoElements: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.slice(0, 2) !== '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (vendor.prefix(name) || keywordSets.pseudoElements.has(name.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-colon-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} colon pseudo-element notation`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-colon-notation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['single', 'double'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixedColon = '';\n\n\t\tif (primary === 'single') {\n\t\t\tfixedColon = ':';\n\t\t} else if (primary === 'double') {\n\t\t\tfixedColon = '::';\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// get out early if no pseudo elements or classes\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, ruleNode, (selectors) => {\n\t\t\t\tselectors.walkPseudos((pseudo) => {\n\t\t\t\t\tconst pseudoElement = pseudo.value.replace(/:/g, '');\n\n\t\t\t\t\tif (!keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isDouble = pseudo.value.startsWith('::');\n\n\t\t\t\t\tif (primary === 'single' && !isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (primary === 'double' && isDouble) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudo.replaceWith(pseudo.clone({ value: fixedColon + pseudoElement }));\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: pseudo.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && fixedSelector) {\n\t\t\t\truleNode.selector = fixedSelector;\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isString } = require('../../utils/validateTypes');\nconst keywordSets = require('../../reference/keywordSets');\n\nconst ruleName = 'selector-type-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-type-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreTypes: [isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tlet hasComments = ruleNode.raws.selector && ruleNode.raws.selector.raw;\n\t\t\tconst selector = hasComments ? hasComments : ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorAST) => {\n\t\t\t\tselectorAST.walkTags((tag) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tag)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keywordSets.validMixedCaseSvgElements.has(tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sourceIndex = tag.sourceIndex;\n\t\t\t\t\tconst value = tag.value;\n\n\t\t\t\t\tconst expectedValue = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\t\tif (value === expectedValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\thasComments.slice(sourceIndex + value.length);\n\n\t\t\t\t\t\t\tif (ruleNode.raws.selector == null) {\n\t\t\t\t\t\t\t\tthrow new Error('The `raw` property must be present');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\truleNode.raws.selector.raw = hasComments;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\truleNode.selector =\n\t\t\t\t\t\t\t\truleNode.selector.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\truleNode.selector.slice(sourceIndex + value.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(value, expectedValue),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'string-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (q) => `Expected ${q} quotes`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/string-quotes',\n};\n\nconst singleQuote = `'`;\nconst doubleQuote = `\"`;\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\tconst correctQuote = primary === 'single' ? singleQuote : doubleQuote;\n\tconst erroneousQuote = primary === 'single' ? doubleQuote : singleQuote;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['single', 'double'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tavoidEscape: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst avoidEscape =\n\t\t\tsecondaryOptions && secondaryOptions.avoidEscape !== undefined\n\t\t\t\t? secondaryOptions.avoidEscape\n\t\t\t\t: true;\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tlet selectorFixed = false;\n\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.quoted) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === correctQuote && avoidEscape) {\n\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\tattributeNode.quoteMark = erroneousQuote;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary === 'single' ? 'double' : primary),\n\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoteMark === erroneousQuote) {\n\t\t\t\t\t\tif (avoidEscape) {\n\t\t\t\t\t\t\tassertString(attributeNode.value);\n\t\t\t\t\t\t\tconst needsCorrectEscape = attributeNode.value.includes(correctQuote);\n\t\t\t\t\t\t\tconst needsOtherEscape = attributeNode.value.includes(erroneousQuote);\n\n\t\t\t\t\t\t\tif (needsOtherEscape) {\n\t\t\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (needsCorrectEscape) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tselectorFixed = true;\n\t\t\t\t\t\t\tattributeNode.quoteMark = correctQuote;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (selectorFixed) {\n\t\t\t\t\truleNode.selector = selectorTree.toString();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\truleNode.selector = replaceQuote(ruleNode.selector, fixIndex, correctQuote);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t/** @type {number[]} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// Get out quickly if there are no erroneous quotes\n\t\t\tif (!value.includes(erroneousQuote)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node.type === 'atrule' && node.name === 'charset') {\n\t\t\t\t// allow @charset rules to have double quotes, in spite of the configuration\n\t\t\t\t// TODO: @charset should always use double-quotes, see https://github.com/stylelint/stylelint/issues/2788\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'string' && valueNode.quote === erroneousQuote) {\n\t\t\t\t\tconst needsEscape = valueNode.value.includes(correctQuote);\n\n\t\t\t\t\tif (avoidEscape && needsEscape) {\n\t\t\t\t\t\t// don't consider this an error\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = valueNode.sourceIndex;\n\n\t\t\t\t\t// we currently don't fix escapes\n\t\t\t\t\tif (context.fix && !needsEscape) {\n\t\t\t\t\t\tconst closeIndex = openIndex + valueNode.value.length + erroneousQuote.length;\n\n\t\t\t\t\t\tfixPositions.push(openIndex, closeIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const fixIndex of fixPositions) {\n\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\tnode.params = replaceQuote(node.params, fixIndex, correctQuote);\n\t\t\t\t} else {\n\t\t\t\t\tnode.value = replaceQuote(node.value, fixIndex, correctQuote);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {string} string\n * @param {number} index\n * @param {string} replace\n * @returns {string}\n */\nfunction replaceQuote(string, index, replace) {\n\treturn string.substring(0, index) + replace + string.substring(index + replace.length);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /\\r?\\n/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected newline in string',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/string-no-newline',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkRule(ruleNode) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxSelector(ruleNode.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst match = reNewLine.exec(attributeNode.value || '');\n\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = [\n\t\t\t\t\t\t// length of our attribute\n\t\t\t\t\t\tattributeNode.attribute,\n\t\t\t\t\t\t// length of our operator , ie '='\n\t\t\t\t\t\tattributeNode.operator || '',\n\t\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\t\tmatch.input.slice(0, match.index),\n\t\t\t\t\t].reduce(\n\t\t\t\t\t\t(index, str) => index + str.length,\n\t\t\t\t\t\t// index of the start of our attribute node in our source\n\t\t\t\t\t\t// plus 1 for the opening quotation mark\n\t\t\t\t\t\tattributeNode.sourceIndex + 1,\n\t\t\t\t\t);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: openIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = reNewLine.exec(valueNode.value);\n\n\t\t\t\tif (!match) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst openIndex = [\n\t\t\t\t\t// length of the quote\n\t\t\t\t\tvalueNode.quote,\n\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\tmatch.input.slice(0, match.index),\n\t\t\t\t].reduce((index, str) => index + str.length, valueNode.sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-pseudo-element-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected pseudo-element \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-pseudo-element-disallowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | RegExp | Array<string | RegExp>>} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isString, isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\tif (!selector.includes('::')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value[1] !== ':') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(name), primary)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'unicode-bom';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected Unicode BOM',\n\trejected: 'Unexpected Unicode BOM',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unicode-bom',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (\n\t\t\t!validOptions ||\n\t\t\t!root.source ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'inline' does not exist on type 'Source'.\n\t\t\troot.source.inline ||\n\t\t\t// @ts-expect-error -- TS2339: Property 'lang' does not exist on type 'Source'.\n\t\t\troot.source.lang === 'object-literal' ||\n\t\t\t// Ignore HTML documents\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\troot.document !== undefined\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { hasBOM } = root.source.input;\n\n\t\tif (primary === 'always' && !hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (primary === 'never' && hasBOM) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: root,\n\t\t\t\tline: 1,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isCustomElement = require('../../utils/isCustomElement');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst mathMLTags = require('mathml-tag-names');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst svgTags = require('svg-tags');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'selector-type-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown type selector \"${selector}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/selector-type-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['custom-elements', 'default-namespace'],\n\t\t\t\t\tignoreNamespaces: [isString, isRegExp],\n\t\t\t\t\tignoreTypes: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selector = ruleNode.selector;\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkTags((tagNode) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tagNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'custom-elements') &&\n\t\t\t\t\t\tisCustomElement(tagNode.value)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'default-namespace') &&\n\t\t\t\t\t\t!(typeof tagNode.namespace === 'string')\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreNamespaces', tagNode.namespace)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreTypes', tagNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tagName = tagNode.value;\n\t\t\t\t\tconst tagNameLowerCase = tagName.toLowerCase();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tkeywordSets.standardHtmlTags.has(tagNameLowerCase) ||\n\t\t\t\t\t\t// SVG tags are case-sensitive\n\t\t\t\t\t\tsvgTags.includes(tagName) ||\n\t\t\t\t\t\tkeywordSets.nonStandardHtmlTags.has(tagNameLowerCase) ||\n\t\t\t\t\t\tmathMLTags.includes(tagNameLowerCase)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(tagName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: tagNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tword: tagName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\nconst mathMLTags = require('mathml-tag-names');\nconst svgTags = require('svg-tags');\n\n/**\n * Check whether a type selector is a custom element\n *\n * @param {string} selector\n * @returns {boolean}\n */\nmodule.exports = function (selector) {\n\tif (!/^[a-z]/.test(selector)) {\n\t\treturn false;\n\t}\n\n\tif (!selector.includes('-')) {\n\t\treturn false;\n\t}\n\n\tconst selectorLowerCase = selector.toLowerCase();\n\n\tif (selectorLowerCase !== selector) {\n\t\treturn false;\n\t}\n\n\tif (svgTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.standardHtmlTags.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (keywordSets.nonStandardHtmlTags.has(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\tif (mathMLTags.includes(selectorLowerCase)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isRegExp, isString, assert } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unknown unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-no-unknown',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreUnits: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t// and within functions listed in the `ignoreFunctions` option\n\t\t\t\tif (\n\t\t\t\t\tvalueNode.type === 'function' &&\n\t\t\t\t\t(valueNode.value.toLowerCase() === 'url' ||\n\t\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueNode.value))\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (keywordSets.units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (unit.toLowerCase() === 'x') {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.type === 'atrule' &&\n\t\t\t\t\t\tnode.name === 'media' &&\n\t\t\t\t\t\tnode.params.toLowerCase().includes('resolution')\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet ignoreUnit = false;\n\n\t\t\t\t\t\tmediaParser(node.params).walk((mediaNode, _i, mediaNodes) => {\n\t\t\t\t\t\t\tconst lastMediaNode = mediaNodes[mediaNodes.length - 1];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmediaNode.value.toLowerCase().includes('resolution') &&\n\t\t\t\t\t\t\t\tlastMediaNode &&\n\t\t\t\t\t\t\t\tlastMediaNode.sourceIndex === valueNode.sourceIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tignoreUnit = true;\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (ignoreUnit) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\t\tif (node.prop.toLowerCase() === 'image-resolution') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n\t\t\t\t\t\t\tconst imageSet = parsedValue.nodes.find(\n\t\t\t\t\t\t\t\t(n) => vendor.unprefixed(n.value) === 'image-set',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tassert(imageSet);\n\t\t\t\t\t\t\tassert('nodes' in imageSet);\n\t\t\t\t\t\t\tconst imageSetLastNode = imageSet.nodes[imageSet.nodes.length - 1];\n\n\t\t\t\t\t\t\tassert(imageSetLastNode);\n\t\t\t\t\t\t\tconst imageSetValueLastIndex = imageSetLastNode.sourceIndex;\n\n\t\t\t\t\t\t\tif (imageSetValueLastIndex >= valueNode.sourceIndex) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(decl, decl.value, declarationValueIndex);\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-case',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} checkedValue\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, checkedValue, getIndex) {\n\t\t\t/** @type {Array<{ index: number, message: string }>} */\n\t\t\tconst problems = [];\n\n\t\t\t/**\n\t\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tfunction processValue(valueNode) {\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst expectedUnit = primary === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n\t\t\t\tif (unit === expectedUnit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tproblems.push({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.expected(unit, expectedUnit),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(checkedValue).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tlet needFix = false;\n\t\t\t\tconst value = valueNode.value;\n\n\t\t\t\tif (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (value.includes('*')) {\n\t\t\t\t\tvalue.split('*').some((val) => {\n\t\t\t\t\t\treturn processValue({\n\t\t\t\t\t\t\t...valueNode,\n\t\t\t\t\t\t\tsourceIndex: value.indexOf(val) + val.length + 1,\n\t\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tneedFix = processValue(valueNode);\n\n\t\t\t\tif (needFix && context.fix) {\n\t\t\t\t\tvalueNode.value = primary === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (problems.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif ('name' in node && node.name === 'media') {\n\t\t\t\t\t\tnode.params = parsedValue.toString();\n\t\t\t\t\t} else if ('value' in node) {\n\t\t\t\t\t\tnode.value = parsedValue.toString();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const err of problems) {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !('variable' in atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-allowed-list',\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule | import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type === 'function') {\n\t\t\t\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t\tif (valueLowerCase === 'url') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit || (unit && primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t'prop' in node &&\n\t\t\t\t\tsecondaryOptions &&\n\t\t\t\t\toptionsMatches(secondaryOptions.ignoreProperties, unit.toLowerCase(), node.prop)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => check(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../utils/isStandardSyntaxProperty');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\n/**\n * @param {{\n *   root: import('postcss').Root,\n *   result: import('stylelint').PostcssResult,\n *   locationChecker: (opts: { source: string, index: number, err: (msg: string) => void }) => void,\n *   checkedRuleName: string,\n *   fix?: ((node: import('postcss').Declaration, index: number) => boolean) | null,\n *   determineIndex?: (declString: string, match: import('style-search').StyleSearchMatch) => number | false,\n * }} opts\n */\nmodule.exports = function valueListCommaWhitespaceChecker(opts) {\n\topts.root.walkDecls((decl) => {\n\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst declString = decl.toString();\n\n\t\tstyleSearch(\n\t\t\t{\n\t\t\t\tsource: declString,\n\t\t\t\ttarget: ',',\n\t\t\t\tfunctionArguments: 'skip',\n\t\t\t},\n\t\t\t(match) => {\n\t\t\t\tconst indexToCheckAfter = opts.determineIndex\n\t\t\t\t\t? opts.determineIndex(declString, match)\n\t\t\t\t\t: match.startIndex;\n\n\t\t\t\tif (indexToCheckAfter === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcheckComma(declString, indexToCheckAfter, decl);\n\t\t\t},\n\t\t);\n\t});\n\n\t/**\n\t * @param {string} source\n\t * @param {number} index\n\t * @param {import('postcss').Declaration} node\n\t * @returns {void}\n\t */\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (message) => {\n\t\t\t\tif (opts.fix && opts.fix(node, index)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-space-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tlet beforeValue = value.slice(0, valueIndex);\n\t\t\t\t\tconst afterValue = value.slice(valueIndex);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tbeforeValue = beforeValue.replace(/\\s*$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'time-min-milliseconds';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (time) => `Expected a minimum of ${time} milliseconds`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/time-min-milliseconds',\n};\n\nconst DELAY_PROPERTIES = new Set(['animation-delay', 'transition-delay']);\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: isNumber,\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['delay'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst minimum = /** @type {number} */ (primary);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst propertyName = vendor.unprefixed(decl.prop.toLowerCase());\n\n\t\t\tif (\n\t\t\t\tkeywordSets.longhandTimeProperties.has(propertyName) &&\n\t\t\t\t!isIgnoredProperty(propertyName) &&\n\t\t\t\t!isAcceptableTime(decl.value)\n\t\t\t) {\n\t\t\t\tcomplain(decl);\n\t\t\t}\n\n\t\t\tif (keywordSets.shorthandTimeProperties.has(propertyName)) {\n\t\t\t\tconst valueListList = postcss.list.comma(decl.value);\n\n\t\t\t\tfor (const valueListString of valueListList) {\n\t\t\t\t\tconst valueList = postcss.list.space(valueListString);\n\n\t\t\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'delay')) {\n\t\t\t\t\t\t// Check only duration time values\n\t\t\t\t\t\tconst duration = getDuration(valueList);\n\n\t\t\t\t\t\tif (duration && !isAcceptableTime(duration)) {\n\t\t\t\t\t\t\tcomplain(decl, decl.value.indexOf(duration));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Check all time values\n\t\t\t\t\t\tfor (const value of valueList) {\n\t\t\t\t\t\t\tif (!isAcceptableTime(value)) {\n\t\t\t\t\t\t\t\tcomplain(decl, decl.value.indexOf(value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Get the duration within an `animation` or `transition` shorthand property value.\n\t\t *\n\t\t * @param {string[]} valueList\n\t\t * @returns {string | undefined}\n\t\t */\n\t\tfunction getDuration(valueList) {\n\t\t\tfor (const value of valueList) {\n\t\t\t\tconst parsedTime = valueParser.unit(value);\n\n\t\t\t\tif (!parsedTime) continue;\n\n\t\t\t\t// The first numeric value in an animation shorthand is the duration.\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} propertyName\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isIgnoredProperty(propertyName) {\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'delay') &&\n\t\t\t\tDELAY_PROPERTIES.has(propertyName)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} time\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isAcceptableTime(time) {\n\t\t\tconst parsedTime = valueParser.unit(time);\n\n\t\t\tif (!parsedTime) return true;\n\n\t\t\tconst numTime = Number(parsedTime.number);\n\n\t\t\tif (numTime <= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst unit = parsedTime.unit.toLowerCase();\n\n\t\t\tif (unit === 'ms' && numTime < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (unit === 's' && numTime * 1000 < minimum) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} [offset]\n\t\t * @returns {void}\n\t\t */\n\t\tfunction complain(decl, offset = 0) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(minimum),\n\t\t\t\tindex: declarationValueIndex(decl) + offset,\n\t\t\t\tnode: decl,\n\t\t\t});\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isBoolean, isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-keyword-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-keyword-case',\n};\n\n// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\n\nconst mapLowercaseKeywordsToCamelCase = new Map();\n\nfor (const func of keywordSets.camelCaseKeywords) {\n\tmapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [isString, isRegExp],\n\t\t\t\t\tignoreKeywords: [isString, isRegExp],\n\t\t\t\t\tignoreFunctions: [isString, isRegExp],\n\t\t\t\t\tcamelCaseSvgKeywords: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst propLowerCase = decl.prop.toLowerCase();\n\t\t\tconst value = decl.value;\n\n\t\t\tconst parsed = valueParser(getDeclarationValue(decl));\n\n\t\t\tlet needFix = false;\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tconst valueLowerCase = node.value.toLowerCase();\n\n\t\t\t\t// Ignore system colors\n\t\t\t\tif (keywordSets.systemColors.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore keywords within `url` and `var` function\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\t(valueLowerCase === 'url' ||\n\t\t\t\t\t\tvalueLowerCase === 'var' ||\n\t\t\t\t\t\tvalueLowerCase === 'counter' ||\n\t\t\t\t\t\tvalueLowerCase === 'counters' ||\n\t\t\t\t\t\tvalueLowerCase === 'attr')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// ignore keywords within ignoreFunctions functions\n\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\toptionsMatches(secondaryOptions, 'ignoreFunctions', valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst keyword = node.value;\n\n\t\t\t\t// Ignore css variables, and hex values, and math operators, and sass interpolation\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'word' ||\n\t\t\t\t\t!isStandardSyntaxValue(node.value) ||\n\t\t\t\t\tvalue.includes('#') ||\n\t\t\t\t\tignoredCharacters.has(keyword) ||\n\t\t\t\t\tgetUnitFromValueNode(node)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation' &&\n\t\t\t\t\t!keywordSets.animationShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation-name' &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font' &&\n\t\t\t\t\t!keywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font-family' &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'counter-increment' &&\n\t\t\t\t\tisCounterIncrementCustomIdentValue(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridRowProps.has(propLowerCase) && !keywordSets.gridRowKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tgridColumnProps.has(propLowerCase) &&\n\t\t\t\t\t!keywordSets.gridColumnKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'grid-area' && !keywordSets.gridAreaKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style' &&\n\t\t\t\t\t!keywordSets.listStyleShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style-type' &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreKeywords', keyword)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst keywordLowerCase = keyword.toLocaleLowerCase();\n\t\t\t\tlet expectedKeyword = null;\n\n\t\t\t\t/** @type {boolean} */\n\t\t\t\tconst camelCaseSvgKeywords =\n\t\t\t\t\t(secondaryOptions && secondaryOptions.camelCaseSvgKeywords) || false;\n\n\t\t\t\tif (\n\t\t\t\t\tprimary === 'lower' &&\n\t\t\t\t\tmapLowercaseKeywordsToCamelCase.has(keywordLowerCase) &&\n\t\t\t\t\tcamelCaseSvgKeywords\n\t\t\t\t) {\n\t\t\t\t\texpectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n\t\t\t\t} else if (primary === 'lower') {\n\t\t\t\t\texpectedKeyword = keyword.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\texpectedKeyword = keyword.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (keyword === expectedKeyword) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedKeyword;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(keyword, expectedKeyword),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tdecl.value = parsed.toString();\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function (value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tkeywordSets.counterIncrementKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check value is a custom ident\n *\n * @param {string} value\n */\nmodule.exports = function (value) {\n\tconst valueLowerCase = value.toLowerCase();\n\n\tif (\n\t\tkeywordSets.counterResetKeywords.has(valueLowerCase) ||\n\t\tNumber.isFinite(Number.parseInt(valueLowerCase, 10))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-space-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('space', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => b - a)) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, ' ');\n\t\t\t\t\t} else if (primary.startsWith('never')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected newline after \",\"',\n\texpectedAfterMultiLine: () => 'Expected newline after \",\" in a multi-line list',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-newline-after',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {Map<import('postcss').Declaration, number[]> | undefined} */\n\t\tlet fixData;\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (declNode, index) => {\n\t\t\t\t\t\tconst valueIndex = declarationValueIndex(declNode);\n\n\t\t\t\t\t\tif (index <= valueIndex) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(declNode) || [];\n\n\t\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t\t\tfixData.set(declNode, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tdetermineIndex: (declString, match) => {\n\t\t\t\tconst nextChars = declString.substring(match.endIndex, declString.length);\n\n\t\t\t\t// If there's a // comment, that means there has to be a newline\n\t\t\t\t// ending the comment so we're fine\n\t\t\t\tif (/^[ \\t]*\\/\\//.test(nextChars)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If there are spaces and then a comment begins, look for the newline\n\t\t\t\treturn /^[ \\t]*\\/\\*/.test(nextChars)\n\t\t\t\t\t? declString.indexOf('*/', match.endIndex) + 1\n\t\t\t\t\t: match.startIndex;\n\t\t\t},\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfor (const [decl, commaIndices] of fixData.entries()) {\n\t\t\t\tfor (const index of commaIndices.sort((a, b) => a - b).reverse()) {\n\t\t\t\t\tconst value = getDeclarationValue(decl);\n\t\t\t\t\tconst valueIndex = index - declarationValueIndex(decl);\n\t\t\t\t\tconst beforeValue = value.slice(0, valueIndex + 1);\n\t\t\t\t\tlet afterValue = value.slice(valueIndex + 1);\n\n\t\t\t\t\tif (primary.startsWith('always')) {\n\t\t\t\t\t\tafterValue = context.newline + afterValue;\n\t\t\t\t\t} else if (primary.startsWith('never-multi-line')) {\n\t\t\t\t\t\tafterValue = afterValue.replace(/^\\s*/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDeclarationValue(decl, beforeValue + afterValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst getDeclarationValue = require('../../utils/getDeclarationValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isNumber } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-list-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-max-empty-lines',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\tconst maxAdjacentNewlines = primary + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = getDeclarationValue(decl);\n\n\t\t\tif (context.fix) {\n\t\t\t\tconst newValueString = value\n\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\tsetDeclarationValue(decl, newValueString);\n\t\t\t} else if (violatedLFNewLinesRegex.test(value) || violatedCRLFNewLinesRegex.test(value)) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueListCommaWhitespaceChecker = require('../valueListCommaWhitespaceChecker');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'value-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-list-comma-newline-before',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary) => {\n\tconst checker = whitespaceChecker('newline', primary, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst { isRegExp, isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/unit-disallowed-list',\n};\n\n/**\n * a function to retrieve only the media feature name\n * could be externalized in an utils function if needed in other code\n *\n * @param {import('postcss-media-query-parser').Child} mediaFeatureNode\n * @returns {string | undefined}\n */\nconst getMediaFeatureName = (mediaFeatureNode) => {\n\tconst value = mediaFeatureNode.value.toLowerCase();\n\n\tconst match = /((?:-?\\w*)*)/.exec(value);\n\n\treturn match ? match[1] : undefined;\n};\n\n/** @type {import('stylelint').Rule<string | string[]>} */\nconst rule = (primary, secondaryOptions) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t\tignoreMediaFeatureNames: [validateObjectWithArrayProps(isString, isRegExp)],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryValues = [primary].flat();\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} nodeIndex\n\t\t * @param {import('postcss-value-parser').Node} valueNode\n\t\t * @param {string | undefined} input\n\t\t * @param {Record<string, unknown>} options\n\t\t * @returns {void}\n\t\t */\n\t\tfunction check(node, nodeIndex, valueNode, input, options) {\n\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t// There is not unit or it is not configured as a problem\n\t\t\tif (!unit || (unit && !primaryValues.includes(unit.toLowerCase()))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The unit has an ignore option for the specific input\n\t\t\tif (optionsMatches(options, unit.toLowerCase(), input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: nodeIndex + valueNode.sourceIndex,\n\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').AtRule} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkMedia(node, value, getIndex) {\n\t\t\tmediaParser(node.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst mediaName = getMediaFeatureName(mediaFeatureNode);\n\t\t\t\tconst parentValue = mediaFeatureNode.parent.value;\n\n\t\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t\t// Ignore all non-word valueNode and\n\t\t\t\t\t// the values not included in the parentValue string\n\t\t\t\t\tif (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcheck(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tgetIndex(node),\n\t\t\t\t\t\tvalueNode,\n\t\t\t\t\t\tmediaName,\n\t\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreMediaFeatureNames : {},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @template {import('postcss').Declaration} T\n\t\t * @param {T} node\n\t\t * @param {string} value\n\t\t * @param {(node: T) => number} getIndex\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkDecl(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcheck(\n\t\t\t\t\tnode,\n\t\t\t\t\tgetIndex(node),\n\t\t\t\t\tvalueNode,\n\t\t\t\t\tnode.prop,\n\t\t\t\t\tsecondaryOptions ? secondaryOptions.ignoreProperties : {},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => checkMedia(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => checkDecl(decl, decl.value, declarationValueIndex));\n\t};\n};\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst setDeclarationValue = require('../../utils/setDeclarationValue');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\nconst { isString } = require('../../utils/validateTypes');\n\nconst ruleName = 'value-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (value) => `Unexpected vendor-prefix \"${value}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/value-no-vendor-prefix',\n};\n\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nconst hasPrefix = (value) => {\n\tconst lowerValue = value.toLowerCase();\n\n\treturn valuePrefixes.some((prefix) => lowerValue.startsWith(prefix));\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual: primary },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreValues: [isString],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst { value } = decl;\n\n\t\t\tif (\n\t\t\t\t!isStandardSyntaxDeclaration(decl) ||\n\t\t\t\t!isStandardSyntaxProperty(decl.prop) ||\n\t\t\t\t!value.startsWith('-')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreValues', vendor.unprefixed(value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(value);\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tif (!hasPrefix(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isAutoprefixable.propertyValue(node.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = isAutoprefixable.unprefix(node.value);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: decl.prop.length + (decl.raws.between || '').length + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsetDeclarationValue(decl, parsedValue.toString());\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst { isAtRule, isDeclaration, isRoot, isRule } = require('../../utils/typeGuards');\nconst { isBoolean, isNumber, isString, assertString } = require('../../utils/validateTypes');\n\nconst ruleName = 'indentation';\nconst messages = ruleMessages(ruleName, {\n\texpected: (x) => `Expected indentation of ${x}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/indentation',\n};\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, secondaryOptions = {}, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: [isNumber, 'tab'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\tbaseIndentLevel: [isNumber, 'auto'],\n\t\t\t\t\texcept: ['block', 'value', 'param'],\n\t\t\t\t\tignore: ['value', 'param', 'inside-parens'],\n\t\t\t\t\tindentInsideParens: ['twice', 'once-at-root-twice-in-block'],\n\t\t\t\t\tindentClosingBrace: [isBoolean],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst spaceCount = isNumber(primary) ? primary : null;\n\t\tconst indentChar = spaceCount == null ? '\\t' : ' '.repeat(spaceCount);\n\t\tconst warningWord = primary === 'tab' ? 'tab' : 'space';\n\n\t\t/** @type {number | 'auto'} */\n\t\tconst baseIndentLevel = secondaryOptions.baseIndentLevel;\n\t\t/** @type {boolean} */\n\t\tconst indentClosingBrace = secondaryOptions.indentClosingBrace;\n\n\t\t/**\n\t\t * @param {number} level\n\t\t */\n\t\tconst legibleExpectation = (level) => {\n\t\t\tconst count = spaceCount == null ? level : level * spaceCount;\n\t\t\tconst quantifiedWarningWord = count === 1 ? warningWord : `${warningWord}s`;\n\n\t\t\treturn `${count} ${quantifiedWarningWord}`;\n\t\t};\n\n\t\t// Cycle through all nodes using walk.\n\t\troot.walk((node) => {\n\t\t\tif (isRoot(node)) {\n\t\t\t\t// Ignore nested template literals root in css-in-js lang\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeLevel = indentationLevel(node);\n\n\t\t\t// Cut out any * and _ hacks from `before`\n\t\t\tconst before = (node.raws.before || '').replace(/[*_]$/, '');\n\t\t\tconst after = typeof node.raws.after === 'string' ? node.raws.after : '';\n\t\t\tconst parent = node.parent;\n\n\t\t\tif (!parent) throw new Error('A parent node must be present');\n\n\t\t\tconst expectedOpeningBraceIndentation = indentChar.repeat(nodeLevel);\n\n\t\t\t// Only inspect the spaces before the node\n\t\t\t// if this is the first node in root\n\t\t\t// or there is a newline in the `before` string.\n\t\t\t// (If there is no newline before a node,\n\t\t\t// there is no \"indentation\" to check.)\n\t\t\tconst isFirstChild = parent.type === 'root' && parent.first === node;\n\t\t\tconst lastIndexOfNewline = before.lastIndexOf('\\n');\n\n\t\t\t// Inspect whitespace in the `before` string that is\n\t\t\t// *after* the *last* newline character,\n\t\t\t// because anything besides that is not indentation for this node:\n\t\t\t// it is some other kind of separation, checked by some separate rule\n\t\t\tif (\n\t\t\t\t(lastIndexOfNewline !== -1 ||\n\t\t\t\t\t(isFirstChild &&\n\t\t\t\t\t\t(!getDocument(parent) ||\n\t\t\t\t\t\t\t(parent.raws.codeBefore && parent.raws.codeBefore.endsWith('\\n'))))) &&\n\t\t\t\tbefore.slice(lastIndexOfNewline + 1) !== expectedOpeningBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (isFirstChild && isString(node.raws.before)) {\n\t\t\t\t\t\tnode.raws.before = node.raws.before.replace(\n\t\t\t\t\t\t\t/^[ \\t]*(?=\\S|$)/,\n\t\t\t\t\t\t\texpectedOpeningBraceIndentation,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.raws.before = fixIndentation(node.raws.before, expectedOpeningBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(nodeLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Only blocks have the `after` string to check.\n\t\t\t// Only inspect `after` strings that start with a newline;\n\t\t\t// otherwise there's no indentation involved.\n\t\t\t// And check `indentClosingBrace` to see if it should be indented an extra level.\n\t\t\tconst closingBraceLevel = indentClosingBrace ? nodeLevel + 1 : nodeLevel;\n\t\t\tconst expectedClosingBraceIndentation = indentChar.repeat(closingBraceLevel);\n\n\t\t\tif (\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node) &&\n\t\t\t\tafter &&\n\t\t\t\tafter.includes('\\n') &&\n\t\t\t\tafter.slice(after.lastIndexOf('\\n') + 1) !== expectedClosingBraceIndentation\n\t\t\t) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.raws.after = fixIndentation(node.raws.after, expectedClosingBraceIndentation);\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(closingBraceLevel)),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: node.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a declaration, check the value\n\t\t\tif (isDeclaration(node)) {\n\t\t\t\tcheckValue(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is a rule, check the selector\n\t\t\tif (isRule(node)) {\n\t\t\t\tcheckSelector(node, nodeLevel);\n\t\t\t}\n\n\t\t\t// If this is an at rule, check the params\n\t\t\tif (isAtRule(node)) {\n\t\t\t\tcheckAtRuleParams(node, nodeLevel);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t * @param {number} level\n\t\t * @returns {number}\n\t\t */\n\t\tfunction indentationLevel(node, level = 0) {\n\t\t\tif (!node.parent) throw new Error('A parent node must be present');\n\n\t\t\tif (isRoot(node.parent)) {\n\t\t\t\treturn level + getRootBaseIndentLevel(node.parent, baseIndentLevel, primary);\n\t\t\t}\n\n\t\t\tlet calculatedLevel;\n\n\t\t\t// Indentation level equals the ancestor nodes\n\t\t\t// separating this node from root; so recursively\n\t\t\t// run this operation\n\t\t\tcalculatedLevel = indentationLevel(node.parent, level + 1);\n\n\t\t\t// If `secondaryOptions.except` includes \"block\",\n\t\t\t// blocks are taken down one from their calculated level\n\t\t\t// (all blocks are the same level as their parents)\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'block') &&\n\t\t\t\t(isRule(node) || isAtRule(node)) &&\n\t\t\t\thasBlock(node)\n\t\t\t) {\n\t\t\t\tcalculatedLevel--;\n\t\t\t}\n\n\t\t\treturn calculatedLevel;\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Declaration} decl\n\t\t * @param {number} declLevel\n\t\t */\n\t\tfunction checkValue(decl, declLevel) {\n\t\t\tif (!decl.value.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'value')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\t\t\tconst valueLevel = optionsMatches(secondaryOptions, 'except', 'value')\n\t\t\t\t? declLevel\n\t\t\t\t: declLevel + 1;\n\n\t\t\tcheckMultilineBit(declString, valueLevel, decl);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').Rule} ruleNode\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkSelector(ruleNode, ruleLevel) {\n\t\t\tconst selector = ruleNode.selector;\n\n\t\t\t// Less mixins have params, and they should be indented extra\n\t\t\t// @ts-expect-error -- TS2339: Property 'params' does not exist on type 'Rule'.\n\t\t\tif (ruleNode.params) {\n\t\t\t\truleLevel += 1;\n\t\t\t}\n\n\t\t\tcheckMultilineBit(selector, ruleLevel, ruleNode);\n\t\t}\n\n\t\t/**\n\t\t * @param {import('postcss').AtRule} atRule\n\t\t * @param {number} ruleLevel\n\t\t */\n\t\tfunction checkAtRuleParams(atRule, ruleLevel) {\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'param')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @nest and SCSS's @at-root rules should be treated like regular rules, not expected\n\t\t\t// to have their params (selectors) indented\n\t\t\tconst paramLevel =\n\t\t\t\toptionsMatches(secondaryOptions, 'except', 'param') ||\n\t\t\t\tatRule.name === 'nest' ||\n\t\t\t\tatRule.name === 'at-root'\n\t\t\t\t\t? ruleLevel\n\t\t\t\t\t: ruleLevel + 1;\n\n\t\t\tcheckMultilineBit(beforeBlockString(atRule).trim(), paramLevel, atRule);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} source\n\t\t * @param {number} newlineIndentLevel\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tfunction checkMultilineBit(source, newlineIndentLevel, node) {\n\t\t\tif (!source.includes('\\n')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Data for current node fixing\n\t\t\t/** @type {Array<{ expectedIndentation: string, currentIndentation: string, startIndex: number }>} */\n\t\t\tconst fixPositions = [];\n\n\t\t\t// `outsideParens` because function arguments and also non-standard parenthesized stuff like\n\t\t\t// Sass maps are ignored to allow for arbitrary indentation\n\t\t\tlet parentheticalDepth = 0;\n\n\t\t\tconst ignoreInsideParans = optionsMatches(secondaryOptions, 'ignore', 'inside-parens');\n\n\t\t\tstyleSearch(\n\t\t\t\t{\n\t\t\t\t\tsource,\n\t\t\t\t\ttarget: '\\n',\n\t\t\t\t\t// @ts-expect-error -- The `outsideParens` option is unsupported. Why?\n\t\t\t\t\toutsideParens: ignoreInsideParans,\n\t\t\t\t},\n\t\t\t\t(match, matchCount) => {\n\t\t\t\t\tconst precedesClosingParenthesis = /^[ \\t]*\\)/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (ignoreInsideParans && (precedesClosingParenthesis || match.insideParens)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet expectedIndentLevel = newlineIndentLevel;\n\n\t\t\t\t\t// Modififications for parenthetical content\n\t\t\t\t\tif (!ignoreInsideParans && match.insideParens) {\n\t\t\t\t\t\t// If the first match in is within parentheses, reduce the parenthesis penalty\n\t\t\t\t\t\tif (matchCount === 1) parentheticalDepth -= 1;\n\n\t\t\t\t\t\t// Account for windows line endings\n\t\t\t\t\t\tlet newlineIndex = match.startIndex;\n\n\t\t\t\t\t\tif (source[match.startIndex - 1] === '\\r') {\n\t\t\t\t\t\t\tnewlineIndex--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningParenthesis = /\\([ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst followsOpeningBrace = /\\{[ \\t]*$/.test(source.slice(0, newlineIndex));\n\n\t\t\t\t\t\tif (followsOpeningBrace) {\n\t\t\t\t\t\t\tparentheticalDepth += 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst startingClosingBrace = /^[ \\t]*\\}/.test(source.slice(match.startIndex + 1));\n\n\t\t\t\t\t\tif (startingClosingBrace) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpectedIndentLevel += parentheticalDepth;\n\n\t\t\t\t\t\t// Past this point, adjustments to parentheticalDepth affect next line\n\n\t\t\t\t\t\tif (precedesClosingParenthesis) {\n\t\t\t\t\t\t\tparentheticalDepth -= 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (secondaryOptions.indentInsideParens) {\n\t\t\t\t\t\t\tcase 'twice':\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'once-at-root-twice-in-block':\n\t\t\t\t\t\t\t\tif (node.parent === node.root()) {\n\t\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!precedesClosingParenthesis || indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel += 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif (precedesClosingParenthesis && !indentClosingBrace) {\n\t\t\t\t\t\t\t\t\texpectedIndentLevel -= 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Starting at the index after the newline, we want to\n\t\t\t\t\t// check that the whitespace characters (excluding newlines) before the first\n\t\t\t\t\t// non-whitespace character equal the expected indentation\n\t\t\t\t\tconst afterNewlineSpaceMatches = /^([ \\t]*)\\S/.exec(source.slice(match.startIndex + 1));\n\n\t\t\t\t\tif (!afterNewlineSpaceMatches) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst afterNewlineSpace = afterNewlineSpaceMatches[1] || '';\n\t\t\t\t\tconst expectedIndentation = indentChar.repeat(\n\t\t\t\t\t\texpectedIndentLevel > 0 ? expectedIndentLevel : 0,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (afterNewlineSpace !== expectedIndentation) {\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\t// Adding fixes position in reverse order, because if we change indent in the beginning of the string it will break all following fixes for that string\n\t\t\t\t\t\t\tfixPositions.unshift({\n\t\t\t\t\t\t\t\texpectedIndentation,\n\t\t\t\t\t\t\t\tcurrentIndentation: afterNewlineSpace,\n\t\t\t\t\t\t\t\tstartIndex: match.startIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.expected(legibleExpectation(expectedIndentLevel)),\n\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\tindex: match.startIndex + afterNewlineSpace.length + 1,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (fixPositions.length) {\n\t\t\t\tif (isRule(node)) {\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tnode.selector = replaceIndentation(\n\t\t\t\t\t\t\tnode.selector,\n\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\tfixPosition.startIndex,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isDeclaration(node)) {\n\t\t\t\t\tconst declProp = node.prop;\n\t\t\t\t\tconst declBetween = node.raws.between;\n\n\t\t\t\t\tif (!isString(declBetween)) {\n\t\t\t\t\t\tthrow new TypeError('The `between` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\tif (fixPosition.startIndex < declProp.length + declBetween.length) {\n\t\t\t\t\t\t\tnode.raws.between = replaceIndentation(\n\t\t\t\t\t\t\t\tdeclBetween,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.value = replaceIndentation(\n\t\t\t\t\t\t\t\tnode.value,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - declProp.length - declBetween.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isAtRule(node)) {\n\t\t\t\t\tconst atRuleName = node.name;\n\t\t\t\t\tconst atRuleAfterName = node.raws.afterName;\n\t\t\t\t\tconst atRuleParams = node.params;\n\n\t\t\t\t\tif (!isString(atRuleAfterName)) {\n\t\t\t\t\t\tthrow new TypeError('The `afterName` property must be a string');\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const fixPosition of fixPositions) {\n\t\t\t\t\t\t// 1 — it's a @ length\n\t\t\t\t\t\tif (fixPosition.startIndex < 1 + atRuleName.length + atRuleAfterName.length) {\n\t\t\t\t\t\t\tnode.raws.afterName = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleAfterName,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.params = replaceIndentation(\n\t\t\t\t\t\t\t\tatRuleParams,\n\t\t\t\t\t\t\t\tfixPosition.currentIndentation,\n\t\t\t\t\t\t\t\tfixPosition.expectedIndentation,\n\t\t\t\t\t\t\t\tfixPosition.startIndex - atRuleName.length - atRuleAfterName.length - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {string} space\n * @returns {number}\n */\nfunction getRootBaseIndentLevel(root, baseIndentLevel, space) {\n\tconst document = getDocument(root);\n\n\tif (!document) {\n\t\treturn 0;\n\t}\n\n\tif (!root.source) {\n\t\tthrow new Error('The root node must have a source');\n\t}\n\n\t/** @type {import('postcss').Source & { baseIndentLevel?: number }} */\n\tconst source = root.source;\n\n\tconst indentLevel = source.baseIndentLevel;\n\n\tif (isNumber(indentLevel) && Number.isSafeInteger(indentLevel)) {\n\t\treturn indentLevel;\n\t}\n\n\tconst newIndentLevel = inferRootIndentLevel(root, baseIndentLevel, () =>\n\t\tinferDocIndentSize(document, space),\n\t);\n\n\tsource.baseIndentLevel = newIndentLevel;\n\n\treturn newIndentLevel;\n}\n\n/**\n * @param {import('postcss').Node} node\n */\nfunction getDocument(node) {\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\tconst document = node.document;\n\n\tif (document) {\n\t\treturn document;\n\t}\n\n\tconst root = node.root();\n\n\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Node'.\n\treturn root && root.document;\n}\n\n/**\n * @param {import('postcss').Document} document\n * @param {string} space\n * returns {number}\n */\nfunction inferDocIndentSize(document, space) {\n\tif (!document.source) throw new Error('The document node must have a source');\n\n\t/** @type {import('postcss').Source & { indentSize?: number }} */\n\tconst docSource = document.source;\n\n\tlet indentSize = docSource.indentSize;\n\n\tif (isNumber(indentSize) && Number.isSafeInteger(indentSize)) {\n\t\treturn indentSize;\n\t}\n\n\tconst source = document.source.input.css;\n\tconst indents = source.match(/^ *(?=\\S)/gm);\n\n\tif (indents) {\n\t\t/** @type {Map<number, number>} */\n\t\tconst scores = new Map();\n\t\tlet lastIndentSize = 0;\n\t\tlet lastLeadingSpacesLength = 0;\n\n\t\t/**\n\t\t * @param {number} leadingSpacesLength\n\t\t */\n\t\tconst vote = (leadingSpacesLength) => {\n\t\t\tif (leadingSpacesLength) {\n\t\t\t\tlastIndentSize = Math.abs(leadingSpacesLength - lastLeadingSpacesLength) || lastIndentSize;\n\n\t\t\t\tif (lastIndentSize > 1) {\n\t\t\t\t\tconst score = scores.get(lastIndentSize);\n\n\t\t\t\t\tif (score) {\n\t\t\t\t\t\tscores.set(lastIndentSize, score + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscores.set(lastIndentSize, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastIndentSize = 0;\n\t\t\t}\n\n\t\t\tlastLeadingSpacesLength = leadingSpacesLength;\n\t\t};\n\n\t\tfor (const leadingSpaces of indents) {\n\t\t\tvote(leadingSpaces.length);\n\t\t}\n\n\t\tlet bestScore = 0;\n\n\t\tfor (const [indentSizeDate, score] of scores.entries()) {\n\t\t\tif (score > bestScore) {\n\t\t\t\tbestScore = score;\n\t\t\t\tindentSize = indentSizeDate;\n\t\t\t}\n\t\t}\n\t}\n\n\tindentSize =\n\t\tNumber(indentSize) || (indents && indents[0] && indents[0].length) || Number(space) || 2;\n\tdocSource.indentSize = indentSize;\n\n\treturn indentSize;\n}\n\n/**\n * @param {import('postcss').Root} root\n * @param {number | 'auto'} baseIndentLevel\n * @param {() => number} indentSize\n * @returns {number}\n */\nfunction inferRootIndentLevel(root, baseIndentLevel, indentSize) {\n\t/**\n\t * @param {string} indent\n\t */\n\tfunction getIndentLevel(indent) {\n\t\tconst tabMatch = indent.match(/\\t/g);\n\t\tconst tabCount = tabMatch ? tabMatch.length : 0;\n\n\t\tconst spaceMatch = indent.match(/ /g);\n\t\tconst spaceCount = spaceMatch ? Math.round(spaceMatch.length / indentSize()) : 0;\n\n\t\treturn tabCount + spaceCount;\n\t}\n\n\tlet newBaseIndentLevel = 0;\n\n\tif (!isNumber(baseIndentLevel) || !Number.isSafeInteger(baseIndentLevel)) {\n\t\tif (!root.source) throw new Error('The root node must have a source');\n\n\t\tlet source = root.source.input.css;\n\n\t\tsource = source.replace(/^[^\\r\\n]+/, (firstLine) => {\n\t\t\tconst match = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)$/.exec(root.raws.codeBefore);\n\n\t\t\tif (match) {\n\t\t\t\treturn match[1] + firstLine;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t});\n\n\t\tconst indents = source.match(/^[ \\t]*(?=\\S)/gm);\n\n\t\tif (indents) {\n\t\t\treturn Math.min(...indents.map((indent) => getIndentLevel(indent)));\n\t\t}\n\n\t\tnewBaseIndentLevel = 1;\n\t} else {\n\t\tnewBaseIndentLevel = baseIndentLevel;\n\t}\n\n\tconst indents = [];\n\tconst foundIndents = root.raws.codeBefore && /(?:^|\\n)([ \\t]*)\\S/m.exec(root.raws.codeBefore);\n\n\t// The indent level of the CSS code block in non-CSS-like files is determined by the shortest indent of non-empty line.\n\tif (foundIndents) {\n\t\tlet shortest = Number.MAX_SAFE_INTEGER;\n\t\tlet i = 0;\n\n\t\twhile (++i < foundIndents.length) {\n\t\t\tconst foundIndent = foundIndents[i];\n\n\t\t\tassertString(foundIndent);\n\t\t\tconst current = getIndentLevel(foundIndent);\n\n\t\t\tif (current < shortest) {\n\t\t\t\tshortest = current;\n\n\t\t\t\tif (shortest === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shortest !== Number.MAX_SAFE_INTEGER) {\n\t\t\tindents.push(new Array(shortest).fill(' ').join(''));\n\t\t}\n\t}\n\n\tconst after = root.raws.after;\n\n\tif (after) {\n\t\tlet afterEnd;\n\n\t\tif (after.endsWith('\\n')) {\n\t\t\t// @ts-expect-error -- TS2339: Property 'document' does not exist on type 'Root'.\n\t\t\tconst document = root.document;\n\n\t\t\tif (document) {\n\t\t\t\tconst nextRoot = document.nodes[document.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : document.raws.codeAfter;\n\t\t\t} else {\n\t\t\t\t// Nested root node in css-in-js lang\n\t\t\t\tconst parent = root.parent;\n\n\t\t\t\tif (!parent) throw new Error('The root node must have a parent');\n\n\t\t\t\tconst nextRoot = parent.nodes[parent.nodes.indexOf(root) + 1];\n\n\t\t\t\tafterEnd = nextRoot ? nextRoot.raws.codeBefore : root.raws.codeAfter;\n\t\t\t}\n\t\t} else {\n\t\t\tafterEnd = after;\n\t\t}\n\n\t\tif (afterEnd) indents.push(afterEnd.match(/^[ \\t]*/)[0]);\n\t}\n\n\tif (indents.length) {\n\t\treturn Math.max(...indents.map((indent) => getIndentLevel(indent))) + newBaseIndentLevel;\n\t}\n\n\treturn newBaseIndentLevel;\n}\n\n/**\n * @param {string | undefined} str\n * @param {string} whitespace\n */\nfunction fixIndentation(str, whitespace) {\n\tif (!isString(str)) {\n\t\treturn str;\n\t}\n\n\treturn str.replace(/\\n[ \\t]*(?=\\S|$)/g, `\\n${whitespace}`);\n}\n\n/**\n * @param {string} input\n * @param {string} searchString\n * @param {string} replaceString\n * @param {number} startIndex\n */\nfunction replaceIndentation(input, searchString, replaceString, startIndex) {\n\tconst offset = startIndex + 1;\n\tconst stringStart = input.slice(0, offset);\n\tconst stringEnd = input.slice(offset + searchString.length);\n\n\treturn stringStart + replaceString + stringEnd;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unexpected, expected) =>\n\t\t`Unexpected longhand value '${unexpected}' instead of '${expected}'`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/list/shorthand-property-no-redundant-values',\n};\n\nconst propertiesWithShorthandNotation = new Set([\n\t'margin',\n\t'padding',\n\t'border-color',\n\t'border-radius',\n\t'border-style',\n\t'border-width',\n\t'grid-gap',\n]);\n\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction hasIgnoredCharacters(value) {\n\treturn ignoredCharacters.some((char) => value.includes(char));\n}\n\n/**\n * @param {string} property\n * @returns {boolean}\n */\nfunction isShorthandProperty(property) {\n\treturn propertiesWithShorthandNotation.has(property);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {string[]}\n */\nfunction canCondense(top, right, bottom, left) {\n\tconst lowerTop = top.toLowerCase();\n\tconst lowerRight = right.toLowerCase();\n\tconst lowerBottom = bottom && bottom.toLowerCase();\n\tconst lowerLeft = left && left.toLowerCase();\n\n\tif (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top];\n\t}\n\n\tif (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right];\n\t}\n\n\tif (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right, bottom];\n\t}\n\n\treturn [top, right, bottom, left];\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToOneValue(top, right, bottom, left) {\n\tif (top !== right) {\n\t\treturn false;\n\t}\n\n\treturn (top === bottom && (bottom === left || !left)) || (!bottom && !left);\n}\n\n/**\n * @param {string} top\n * @param {string} right\n * @param {string} bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n\treturn (top === bottom && right === left) || (top === bottom && !left && top !== right);\n}\n\n/**\n * @param {string} _top\n * @param {string} right\n * @param {string} _bottom\n * @param {string} left\n * @returns {boolean}\n */\nfunction canCondenseToThreeValues(_top, right, _bottom, left) {\n\treturn right === left;\n}\n\n/** @type {import('stylelint').Rule} */\nconst rule = (primary, _secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual: primary });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n\t\t\tif (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type {string[]} */\n\t\t\tconst valuesToShorthand = [];\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvaluesToShorthand.push(valueParser.stringify(valueNode));\n\t\t\t});\n\n\t\t\tif (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst shortestForm = canCondense(\n\t\t\t\tvaluesToShorthand[0] || '',\n\t\t\t\tvaluesToShorthand[1] || '',\n\t\t\t\tvaluesToShorthand[2] || '',\n\t\t\t\tvaluesToShorthand[3] || '',\n\t\t\t);\n\t\t\tconst shortestFormString = shortestForm.filter(Boolean).join(' ');\n\t\t\tconst valuesFormString = valuesToShorthand.join(' ');\n\n\t\t\tif (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.value = decl.value.replace(value, shortestFormString);\n\t\t\t} else {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value, shortestFormString),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nmodule.exports = rule;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').rules} */\nconst rules = {\n\t'alpha-value-notation': importLazy('./alpha-value-notation'),\n\t'at-rule-allowed-list': importLazy('./at-rule-allowed-list'),\n\t'at-rule-disallowed-list': importLazy('./at-rule-disallowed-list'),\n\t'at-rule-empty-line-before': importLazy('./at-rule-empty-line-before'),\n\t'at-rule-name-case': importLazy('./at-rule-name-case'),\n\t'at-rule-name-newline-after': importLazy('./at-rule-name-newline-after'),\n\t'at-rule-semicolon-space-before': importLazy('./at-rule-semicolon-space-before'),\n\t'at-rule-name-space-after': importLazy('./at-rule-name-space-after'),\n\t'at-rule-no-unknown': importLazy('./at-rule-no-unknown'),\n\t'at-rule-no-vendor-prefix': importLazy('./at-rule-no-vendor-prefix'),\n\t'at-rule-property-required-list': importLazy('./at-rule-property-required-list'),\n\t'at-rule-semicolon-newline-after': importLazy('./at-rule-semicolon-newline-after'),\n\t'block-closing-brace-empty-line-before': importLazy('./block-closing-brace-empty-line-before'),\n\t'block-closing-brace-newline-after': importLazy('./block-closing-brace-newline-after'),\n\t'block-closing-brace-newline-before': importLazy('./block-closing-brace-newline-before'),\n\t'block-closing-brace-space-after': importLazy('./block-closing-brace-space-after'),\n\t'block-closing-brace-space-before': importLazy('./block-closing-brace-space-before'),\n\t'block-no-empty': importLazy('./block-no-empty'),\n\t'block-opening-brace-newline-after': importLazy('./block-opening-brace-newline-after'),\n\t'block-opening-brace-newline-before': importLazy('./block-opening-brace-newline-before'),\n\t'block-opening-brace-space-after': importLazy('./block-opening-brace-space-after'),\n\t'block-opening-brace-space-before': importLazy('./block-opening-brace-space-before'),\n\t'color-function-notation': importLazy('./color-function-notation'),\n\t'color-hex-alpha': importLazy('./color-hex-alpha'),\n\t'color-hex-case': importLazy('./color-hex-case'),\n\t'color-hex-length': importLazy('./color-hex-length'),\n\t'color-named': importLazy('./color-named'),\n\t'color-no-hex': importLazy('./color-no-hex'),\n\t'color-no-invalid-hex': importLazy('./color-no-invalid-hex'),\n\t'comment-empty-line-before': importLazy('./comment-empty-line-before'),\n\t'comment-no-empty': importLazy('./comment-no-empty'),\n\t'comment-pattern': importLazy('./comment-pattern'),\n\t'comment-whitespace-inside': importLazy('./comment-whitespace-inside'),\n\t'comment-word-disallowed-list': importLazy('./comment-word-disallowed-list'),\n\t'custom-media-pattern': importLazy('./custom-media-pattern'),\n\t'custom-property-empty-line-before': importLazy('./custom-property-empty-line-before'),\n\t'custom-property-no-missing-var-function': importLazy(\n\t\t'./custom-property-no-missing-var-function',\n\t),\n\t'custom-property-pattern': importLazy('./custom-property-pattern'),\n\t'declaration-bang-space-after': importLazy('./declaration-bang-space-after'),\n\t'declaration-bang-space-before': importLazy('./declaration-bang-space-before'),\n\t'declaration-block-no-duplicate-custom-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-custom-properties',\n\t),\n\t'declaration-block-no-duplicate-properties': importLazy(\n\t\t'./declaration-block-no-duplicate-properties',\n\t),\n\t'declaration-block-no-redundant-longhand-properties': importLazy(\n\t\t'./declaration-block-no-redundant-longhand-properties',\n\t),\n\t'declaration-block-no-shorthand-property-overrides': importLazy(\n\t\t'./declaration-block-no-shorthand-property-overrides',\n\t),\n\t'declaration-block-semicolon-newline-after': importLazy(\n\t\t'./declaration-block-semicolon-newline-after',\n\t),\n\t'declaration-block-semicolon-newline-before': importLazy(\n\t\t'./declaration-block-semicolon-newline-before',\n\t),\n\t'declaration-block-semicolon-space-after': importLazy(\n\t\t'./declaration-block-semicolon-space-after',\n\t),\n\t'declaration-block-semicolon-space-before': importLazy(\n\t\t'./declaration-block-semicolon-space-before',\n\t),\n\t'declaration-block-single-line-max-declarations': importLazy(\n\t\t'./declaration-block-single-line-max-declarations',\n\t),\n\t'declaration-block-trailing-semicolon': importLazy('./declaration-block-trailing-semicolon'),\n\t'declaration-colon-newline-after': importLazy('./declaration-colon-newline-after'),\n\t'declaration-colon-space-after': importLazy('./declaration-colon-space-after'),\n\t'declaration-colon-space-before': importLazy('./declaration-colon-space-before'),\n\t'declaration-empty-line-before': importLazy('./declaration-empty-line-before'),\n\t'declaration-no-important': importLazy('./declaration-no-important'),\n\t'declaration-property-max-values': importLazy('./declaration-property-max-values'),\n\t'declaration-property-unit-allowed-list': importLazy('./declaration-property-unit-allowed-list'),\n\t'declaration-property-unit-disallowed-list': importLazy(\n\t\t'./declaration-property-unit-disallowed-list',\n\t),\n\t'declaration-property-value-allowed-list': importLazy(\n\t\t'./declaration-property-value-allowed-list',\n\t),\n\t'declaration-property-value-disallowed-list': importLazy(\n\t\t'./declaration-property-value-disallowed-list',\n\t),\n\t'font-family-no-missing-generic-family-keyword': importLazy(\n\t\t'./font-family-no-missing-generic-family-keyword',\n\t),\n\t'font-family-name-quotes': importLazy('./font-family-name-quotes'),\n\t'font-family-no-duplicate-names': importLazy('./font-family-no-duplicate-names'),\n\t'font-weight-notation': importLazy('./font-weight-notation'),\n\t'function-allowed-list': importLazy('./function-allowed-list'),\n\t'function-calc-no-unspaced-operator': importLazy('./function-calc-no-unspaced-operator'),\n\t'function-comma-newline-after': importLazy('./function-comma-newline-after'),\n\t'function-comma-newline-before': importLazy('./function-comma-newline-before'),\n\t'function-comma-space-after': importLazy('./function-comma-space-after'),\n\t'function-comma-space-before': importLazy('./function-comma-space-before'),\n\t'function-disallowed-list': importLazy('./function-disallowed-list'),\n\t'function-linear-gradient-no-nonstandard-direction': importLazy(\n\t\t'./function-linear-gradient-no-nonstandard-direction',\n\t),\n\t'function-max-empty-lines': importLazy('./function-max-empty-lines'),\n\t'function-name-case': importLazy('./function-name-case'),\n\t'function-no-unknown': importLazy('./function-no-unknown'),\n\t'function-parentheses-newline-inside': importLazy('./function-parentheses-newline-inside'),\n\t'function-parentheses-space-inside': importLazy('./function-parentheses-space-inside'),\n\t'function-url-no-scheme-relative': importLazy('./function-url-no-scheme-relative'),\n\t'function-url-quotes': importLazy('./function-url-quotes'),\n\t'function-url-scheme-allowed-list': importLazy('./function-url-scheme-allowed-list'),\n\t'function-url-scheme-disallowed-list': importLazy('./function-url-scheme-disallowed-list'),\n\t'function-whitespace-after': importLazy('./function-whitespace-after'),\n\t'hue-degree-notation': importLazy('./hue-degree-notation'),\n\t'import-notation': importLazy('./import-notation'),\n\t'keyframe-block-no-duplicate-selectors': importLazy('./keyframe-block-no-duplicate-selectors'),\n\t'keyframe-declaration-no-important': importLazy('./keyframe-declaration-no-important'),\n\t'keyframes-name-pattern': importLazy('./keyframes-name-pattern'),\n\t'length-zero-no-unit': importLazy('./length-zero-no-unit'),\n\tlinebreaks: importLazy('./linebreaks'),\n\t'max-empty-lines': importLazy('./max-empty-lines'),\n\t'max-line-length': importLazy('./max-line-length'),\n\t'max-nesting-depth': importLazy('./max-nesting-depth'),\n\t'media-feature-colon-space-after': importLazy('./media-feature-colon-space-after'),\n\t'media-feature-colon-space-before': importLazy('./media-feature-colon-space-before'),\n\t'media-feature-name-allowed-list': importLazy('./media-feature-name-allowed-list'),\n\t'media-feature-name-case': importLazy('./media-feature-name-case'),\n\t'media-feature-name-disallowed-list': importLazy('./media-feature-name-disallowed-list'),\n\t'media-feature-name-no-unknown': importLazy('./media-feature-name-no-unknown'),\n\t'media-feature-name-no-vendor-prefix': importLazy('./media-feature-name-no-vendor-prefix'),\n\t'media-feature-name-value-allowed-list': importLazy('./media-feature-name-value-allowed-list'),\n\t'media-feature-parentheses-space-inside': importLazy('./media-feature-parentheses-space-inside'),\n\t'media-feature-range-operator-space-after': importLazy(\n\t\t'./media-feature-range-operator-space-after',\n\t),\n\t'media-feature-range-operator-space-before': importLazy(\n\t\t'./media-feature-range-operator-space-before',\n\t),\n\t'media-query-list-comma-newline-after': importLazy('./media-query-list-comma-newline-after'),\n\t'media-query-list-comma-newline-before': importLazy('./media-query-list-comma-newline-before'),\n\t'media-query-list-comma-space-after': importLazy('./media-query-list-comma-space-after'),\n\t'media-query-list-comma-space-before': importLazy('./media-query-list-comma-space-before'),\n\t'named-grid-areas-no-invalid': importLazy('./named-grid-areas-no-invalid'),\n\t'no-descending-specificity': importLazy('./no-descending-specificity'),\n\t'no-duplicate-at-import-rules': importLazy('./no-duplicate-at-import-rules'),\n\t'no-duplicate-selectors': importLazy('./no-duplicate-selectors'),\n\t'no-empty-source': importLazy('./no-empty-source'),\n\t'no-empty-first-line': importLazy('./no-empty-first-line'),\n\t'no-eol-whitespace': importLazy('./no-eol-whitespace'),\n\t'no-extra-semicolons': importLazy('./no-extra-semicolons'),\n\t'no-invalid-double-slash-comments': importLazy('./no-invalid-double-slash-comments'),\n\t'no-invalid-position-at-import-rule': importLazy('./no-invalid-position-at-import-rule'),\n\t'no-irregular-whitespace': importLazy('./no-irregular-whitespace'),\n\t'no-missing-end-of-source-newline': importLazy('./no-missing-end-of-source-newline'),\n\t'no-unknown-animations': importLazy('./no-unknown-animations'),\n\t'number-leading-zero': importLazy('./number-leading-zero'),\n\t'number-max-precision': importLazy('./number-max-precision'),\n\t'number-no-trailing-zeros': importLazy('./number-no-trailing-zeros'),\n\t'property-allowed-list': importLazy('./property-allowed-list'),\n\t'property-case': importLazy('./property-case'),\n\t'property-disallowed-list': importLazy('./property-disallowed-list'),\n\t'property-no-unknown': importLazy('./property-no-unknown'),\n\t'property-no-vendor-prefix': importLazy('./property-no-vendor-prefix'),\n\t'rule-empty-line-before': importLazy('./rule-empty-line-before'),\n\t'rule-selector-property-disallowed-list': importLazy('./rule-selector-property-disallowed-list'),\n\t'selector-attribute-brackets-space-inside': importLazy(\n\t\t'./selector-attribute-brackets-space-inside',\n\t),\n\t'selector-attribute-name-disallowed-list': importLazy(\n\t\t'./selector-attribute-name-disallowed-list',\n\t),\n\t'selector-attribute-operator-allowed-list': importLazy(\n\t\t'./selector-attribute-operator-allowed-list',\n\t),\n\t'selector-attribute-operator-disallowed-list': importLazy(\n\t\t'./selector-attribute-operator-disallowed-list',\n\t),\n\t'selector-attribute-operator-space-after': importLazy(\n\t\t'./selector-attribute-operator-space-after',\n\t),\n\t'selector-attribute-operator-space-before': importLazy(\n\t\t'./selector-attribute-operator-space-before',\n\t),\n\t'selector-attribute-quotes': importLazy('./selector-attribute-quotes'),\n\t'selector-class-pattern': importLazy('./selector-class-pattern'),\n\t'selector-combinator-allowed-list': importLazy('./selector-combinator-allowed-list'),\n\t'selector-combinator-disallowed-list': importLazy('./selector-combinator-disallowed-list'),\n\t'selector-combinator-space-after': importLazy('./selector-combinator-space-after'),\n\t'selector-combinator-space-before': importLazy('./selector-combinator-space-before'),\n\t'selector-descendant-combinator-no-non-space': importLazy(\n\t\t'./selector-descendant-combinator-no-non-space',\n\t),\n\t'selector-disallowed-list': importLazy('./selector-disallowed-list'),\n\t'selector-id-pattern': importLazy('./selector-id-pattern'),\n\t'selector-list-comma-newline-after': importLazy('./selector-list-comma-newline-after'),\n\t'selector-list-comma-newline-before': importLazy('./selector-list-comma-newline-before'),\n\t'selector-list-comma-space-after': importLazy('./selector-list-comma-space-after'),\n\t'selector-list-comma-space-before': importLazy('./selector-list-comma-space-before'),\n\t'selector-max-attribute': importLazy('./selector-max-attribute'),\n\t'selector-max-class': importLazy('./selector-max-class'),\n\t'selector-max-combinators': importLazy('./selector-max-combinators'),\n\t'selector-max-compound-selectors': importLazy('./selector-max-compound-selectors'),\n\t'selector-max-empty-lines': importLazy('./selector-max-empty-lines'),\n\t'selector-max-id': importLazy('./selector-max-id'),\n\t'selector-max-pseudo-class': importLazy('./selector-max-pseudo-class'),\n\t'selector-max-specificity': importLazy('./selector-max-specificity'),\n\t'selector-max-type': importLazy('./selector-max-type'),\n\t'selector-max-universal': importLazy('./selector-max-universal'),\n\t'selector-nested-pattern': importLazy('./selector-nested-pattern'),\n\t'selector-no-qualifying-type': importLazy('./selector-no-qualifying-type'),\n\t'selector-no-vendor-prefix': importLazy('./selector-no-vendor-prefix'),\n\t'selector-not-notation': importLazy('./selector-not-notation'),\n\t'selector-pseudo-class-allowed-list': importLazy('./selector-pseudo-class-allowed-list'),\n\t'selector-pseudo-class-case': importLazy('./selector-pseudo-class-case'),\n\t'selector-pseudo-class-disallowed-list': importLazy('./selector-pseudo-class-disallowed-list'),\n\t'selector-pseudo-class-no-unknown': importLazy('./selector-pseudo-class-no-unknown'),\n\t'selector-pseudo-class-parentheses-space-inside': importLazy(\n\t\t'./selector-pseudo-class-parentheses-space-inside',\n\t),\n\t'selector-pseudo-element-allowed-list': importLazy('./selector-pseudo-element-allowed-list'),\n\t'selector-pseudo-element-case': importLazy('./selector-pseudo-element-case'),\n\t'selector-pseudo-element-colon-notation': importLazy('./selector-pseudo-element-colon-notation'),\n\t'selector-pseudo-element-disallowed-list': importLazy(\n\t\t'./selector-pseudo-element-disallowed-list',\n\t),\n\t'selector-pseudo-element-no-unknown': importLazy('./selector-pseudo-element-no-unknown'),\n\t'selector-type-case': importLazy('./selector-type-case'),\n\t'selector-type-no-unknown': importLazy('./selector-type-no-unknown'),\n\t'shorthand-property-no-redundant-values': importLazy('./shorthand-property-no-redundant-values'),\n\t'string-no-newline': importLazy('./string-no-newline'),\n\t'string-quotes': importLazy('./string-quotes'),\n\t'time-min-milliseconds': importLazy('./time-min-milliseconds'),\n\t'unicode-bom': importLazy('./unicode-bom'),\n\t'unit-allowed-list': importLazy('./unit-allowed-list'),\n\t'unit-case': importLazy('./unit-case'),\n\t'unit-disallowed-list': importLazy('./unit-disallowed-list'),\n\t'unit-no-unknown': importLazy('./unit-no-unknown'),\n\t'value-keyword-case': importLazy('./value-keyword-case'),\n\t'value-list-comma-newline-after': importLazy('./value-list-comma-newline-after'),\n\t'value-list-comma-newline-before': importLazy('./value-list-comma-newline-before'),\n\t'value-list-comma-space-after': importLazy('./value-list-comma-space-after'),\n\t'value-list-comma-space-before': importLazy('./value-list-comma-space-before'),\n\t'value-list-max-empty-lines': importLazy('./value-list-max-empty-lines'),\n\t'value-no-vendor-prefix': importLazy('./value-no-vendor-prefix'),\n\tindentation: importLazy('./indentation'),\n};\n\nmodule.exports = rules;\n","'use strict';\n\nconst rules = require('./rules');\nconst { isPlainObject } = require('./utils/validateTypes');\n\n// Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @template T\n * @template {Object} O\n * @param {import('stylelint').ConfigRuleSettings<T, O>} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the rules themselves, which will not work for plugins\n * @return {[T] | [T, O] | null}\n */\nmodule.exports = function normalizeRuleSettings(\n\trawSettings,\n\truleName,\n\t// If primaryOptionArray is not provided, we try to get it from the\n\t// rules themselves, which will not work for plugins\n\tprimaryOptionArray,\n) {\n\tif (rawSettings === null || rawSettings === undefined) {\n\t\treturn null;\n\t}\n\n\tif (!Array.isArray(rawSettings)) {\n\t\treturn [rawSettings];\n\t}\n\t// Everything below is an array ...\n\n\tif (rawSettings.length > 0 && (rawSettings[0] === null || rawSettings[0] === undefined)) {\n\t\treturn null;\n\t}\n\n\tif (primaryOptionArray === undefined) {\n\t\tconst rule = rules[ruleName];\n\n\t\tif (rule && 'primaryOptionArray' in rule) {\n\t\t\tprimaryOptionArray = rule.primaryOptionArray;\n\t\t}\n\t}\n\n\tif (!primaryOptionArray) {\n\t\treturn rawSettings;\n\t}\n\t// Everything below is a rule that CAN have an array for a primary option ...\n\t// (they might also have something else, e.g. rule-properties-order can\n\t// have the string \"alphabetical\")\n\n\tif (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n\t\treturn rawSettings;\n\t}\n\n\tif (rawSettings.length === 2 && !isPlainObject(rawSettings[0]) && isPlainObject(rawSettings[1])) {\n\t\treturn rawSettings;\n\t}\n\n\t// `T` must be an array type, but TSC thinks it's probably invalid to\n\t// cast `[T]` to `T` so we cast through `any` first.\n\treturn [/** @type {T} */ (/** @type {any} */ (rawSettings))];\n};\n","'use strict';\n\nconst configurationError = require('./configurationError');\nconst globalModules = require('global-modules');\nconst resolveFrom = require('resolve-from');\n\n/**\n * @param {string} basedir\n * @param {string} lookup\n * @param {string} [cwd]\n * @return {string}\n */\nmodule.exports = function getModulePath(basedir, lookup, cwd = process.cwd()) {\n\t// 1. Try to resolve from the provided directory\n\t// 2. Try to resolve from `cwd` or `process.cwd()`\n\t// 3. Try to resolve from global `node_modules` directory\n\tlet path = resolveFrom.silent(basedir, lookup);\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(cwd, lookup);\n\t}\n\n\tif (!path) {\n\t\tpath = resolveFrom.silent(globalModules, lookup);\n\t}\n\n\tif (!path) {\n\t\tthrow configurationError(`Could not find \"${lookup}\". Do you need a \\`configBasedir\\`?`);\n\t}\n\n\treturn path;\n};\n","'use strict';\n\nvar Path = require('path');\nvar slice = Array.prototype.slice;\n\nfunction join(/* globs */) {\n\tvar args;\n\n\targs = slice.call(arguments, 0);\n\treturn args.reduce(function (result, globs) {\n\t\treturn _apply(result, function (path) {\n\t\t\treturn _apply(globs, function (glob) {\n\t\t\t\treturn _join(path, glob);\n\t\t\t});\n\t\t});\n\t}, '');\n}\n\nfunction _apply(values, fn) {\n\tif (Array.isArray(values)) {\n\t\treturn values.reduce(function (result, value) {\n\t\t\treturn result.concat(fn(value));\n\t\t}, []);\n\t}\n\treturn fn(values);\n}\n\nfunction _join(path, glob) {\n\tvar negative, positive;\n\n\tif (glob[0] === '!') {\n\t\tpositive = glob.substr(1);\n\t\tif (path[0] === '!') {\n\t\t\tnegative = '';\n\t\t} else {\n\t\t\tnegative = '!';\n\t\t}\n\t\treturn negative + Path.join(path, positive);\n\t}\n\treturn Path.join(path, glob);\n}\n\nmodule.exports = join;\n","'use strict';\n\nconst normalizeRuleSettings = require('./normalizeRuleSettings');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction normalizeAllRuleSettings(config) {\n\tif (!config.rules) return config;\n\n\t/** @type {StylelintConfigRules} */\n\tconst normalizedRules = {};\n\n\tfor (const [ruleName, rawRuleSettings] of Object.entries(config.rules)) {\n\t\tconst rule = rules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (rule) {\n\t\t\tnormalizedRules[ruleName] = normalizeRuleSettings(\n\t\t\t\trawRuleSettings,\n\t\t\t\truleName,\n\t\t\t\trule.primaryOptionArray,\n\t\t\t);\n\t\t} else {\n\t\t\tnormalizedRules[ruleName] = [];\n\t\t}\n\t}\n\n\tconfig.rules = normalizedRules;\n\n\treturn config;\n}\n\nmodule.exports = normalizeAllRuleSettings;\n","'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst micromatch = require('micromatch');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\nasync function augmentConfigBasic(\n\tstylelint,\n\tconfig,\n\tconfigDir,\n\tallowOverrides,\n\trootConfigDir,\n\tfilePath,\n) {\n\tlet augmentedConfig = config;\n\n\tif (allowOverrides) {\n\t\taugmentedConfig = addOptions(stylelint, augmentedConfig);\n\t}\n\n\tif (filePath) {\n\t\taugmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n\t}\n\n\taugmentedConfig = await extendConfig(\n\t\tstylelint,\n\t\taugmentedConfig,\n\t\tconfigDir,\n\t\trootConfigDir,\n\t\tfilePath,\n\t);\n\n\tconst cwd = stylelint._options.cwd;\n\n\treturn absolutizePaths(augmentedConfig, configDir, cwd);\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\nfunction augmentConfigExtended(cwd) {\n\treturn async (cosmiconfigResult) => {\n\t\tif (!cosmiconfigResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\t\tconst { config } = cosmiconfigResult;\n\n\t\tconst augmentedConfig = absolutizePaths(config, configDir, cwd);\n\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t};\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n\tif (!cosmiconfigResult) {\n\t\treturn null;\n\t}\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\tlet augmentedConfig = await augmentConfigBasic(\n\t\tstylelint,\n\t\tconfig,\n\t\tconfigDir,\n\t\ttrue,\n\t\tconfigDir,\n\t\tfilePath,\n\t);\n\n\taugmentedConfig = addPluginFunctions(augmentedConfig);\n\taugmentedConfig = addProcessorFunctions(augmentedConfig);\n\n\tif (!augmentedConfig.rules) {\n\t\tthrow configurationError(\n\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t);\n\t}\n\n\taugmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n\n\treturn {\n\t\tconfig: augmentedConfig,\n\t\tfilepath: cosmiconfigResult.filepath,\n\t};\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir, cwd) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = [config.ignoreFiles].flat().map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = [config.plugins].flat().map((lookup) => getModulePath(configDir, lookup, cwd));\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n\tif (config.extends === undefined) {\n\t\treturn config;\n\t}\n\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\tconst normalizedExtends = [configExtends].flat();\n\n\tlet resultConfig = originalWithoutExtends;\n\n\tfor (const extendLookup of normalizedExtends) {\n\t\tconst extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n\t\tif (extendResult) {\n\t\t\tlet extendResultConfig = extendResult.config;\n\t\t\tconst extendConfigDir = path.dirname(extendResult.filepath || '');\n\n\t\t\textendResultConfig = await augmentConfigBasic(\n\t\t\t\tstylelint,\n\t\t\t\textendResultConfig,\n\t\t\t\textendConfigDir,\n\t\t\t\tfalse,\n\t\t\t\trootConfigDir,\n\t\t\t\tfilePath,\n\t\t\t);\n\n\t\t\tresultConfig = mergeConfigs(resultConfig, extendResultConfig);\n\t\t}\n\t}\n\n\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\t/** @type {{overrides: StylelintConfigOverride[]}} */\n\tconst overridesMerger = {};\n\n\tif (a.overrides || b.overrides) {\n\t\toverridesMerger.overrides = [];\n\n\t\tif (a.overrides) {\n\t\t\toverridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n\t\t}\n\n\t\tif (b.overrides) {\n\t\t\toverridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = {\n\t\t...a,\n\t\t...b,\n\t\t...processorMerger,\n\t\t...pluginMerger,\n\t\t...overridesMerger,\n\t\t...rulesMerger,\n\t};\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) {\n\t\treturn config;\n\t}\n\n\tconst normalizedPlugins = [config.plugins].flat();\n\n\t/** @type {StylelintConfig['pluginFunctions']} */\n\tconst pluginFunctions = {};\n\n\tfor (const pluginLookup of normalizedPlugins) {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = [pluginImport].flat();\n\n\t\tfor (const pluginRuleDefinition of normalizedPluginImport) {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t}\n\t}\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {StylelintCodeProcessor[]} */\n\tconst codeProcessors = [];\n\t/** @type {StylelintResultProcessor[]} */\n\tconst resultProcessors = [];\n\n\tfor (const processorConfig of [config.processors].flat()) {\n\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\tlet initializedProcessor;\n\n\t\tif (processorCache.has(processorKey)) {\n\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t} else {\n\t\t\tconst processorLookup =\n\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\tconst processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\tlet processor = require(processorLookup);\n\n\t\t\tprocessor = processor.default || processor;\n\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t}\n\t}\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n\tlet { overrides, ...config } = fullConfig;\n\n\tif (!overrides) {\n\t\treturn config;\n\t}\n\n\tif (!Array.isArray(overrides)) {\n\t\tthrow new TypeError(\n\t\t\t'The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t);\n\t}\n\n\tfor (const override of overrides) {\n\t\tconst { files, ...configOverrides } = override;\n\n\t\tif (!files) {\n\t\t\tthrow new Error(\n\t\t\t\t'Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t\t);\n\t\t}\n\n\t\tconst filesGlobs = [files]\n\t\t\t.flat()\n\t\t\t.map((glob) => {\n\t\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) {\n\t\t\t\t\treturn glob;\n\t\t\t\t}\n\n\t\t\t\treturn globjoin(rootConfigDir, glob);\n\t\t\t})\n\t\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\t\t.map((s) => normalizePath(s));\n\n\t\tif (micromatch.isMatch(filePath, filesGlobs, { dot: true })) {\n\t\t\tconfig = mergeConfigs(config, configOverrides);\n\t\t}\n\t}\n\n\treturn config;\n}\n\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\nfunction addOptions(stylelint, config) {\n\tconst augmentedConfig = {\n\t\t...config,\n\t};\n\n\tif (stylelint._options.ignoreDisables) {\n\t\taugmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n\t}\n\n\tif (stylelint._options.quiet) {\n\t\taugmentedConfig.quiet = stylelint._options.quiet;\n\t}\n\n\tif (stylelint._options.reportNeedlessDisables) {\n\t\taugmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n\t}\n\n\tif (stylelint._options.reportInvalidScopeDisables) {\n\t\taugmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n\t}\n\n\tif (stylelint._options.reportDescriptionlessDisables) {\n\t\taugmentedConfig.reportDescriptionlessDisables =\n\t\t\tstylelint._options.reportDescriptionlessDisables;\n\t}\n\n\tif (stylelint._options.customSyntax) {\n\t\taugmentedConfig.customSyntax = stylelint._options.customSyntax;\n\t}\n\n\treturn augmentedConfig;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull, applyOverrides };\n","'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = async function createStylelintResult(\n\tstylelint,\n\tpostcssResult,\n\tfilePath,\n\tcssSyntaxError,\n) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\tconst configForFile = await stylelint.getConfigForFile(filePath, filePath);\n\n\tconst config = configForFile === null ? {} : configForFile.config;\n\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\tif (config.resultProcessors) {\n\t\tfor (const resultProcessor of config.resultProcessors) {\n\t\t\t// Result processors might just mutate the result object,\n\t\t\t// or might return a new one\n\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\tif (returned) {\n\t\t\t\tstylelintResult = returned;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stylelintResult;\n};\n","'use strict';\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function (postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\tconst deprecationMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'deprecation',\n\t\t);\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\tconst invalidOptionMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'invalidOption',\n\t\t);\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'parseError',\n\t\t);\n\n\t\t// Remove deprecation warnings, invalid options, and parse errors from the messages\n\t\tpostcssResult.messages = postcssResult.messages.filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.stylelintType !== 'deprecation' &&\n\t\t\t\tmessage.stylelintType !== 'invalidOption' &&\n\t\t\t\tmessage.stylelintType !== 'parseError',\n\t\t);\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n\t\t\tparseErrors,\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\tendLine: message.endLine,\n\t\t\t\t\tendColumn: message.endColumn,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\tendLine: cssSyntaxError.endLine,\n\t\t\t\t\tendColumn: cssSyntaxError.endColumn,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n","import normalize from \"stylelint/lib/normalizeAllRuleSettings\";\n\nexport default async stylelint => ({\n  config: normalize(stylelint._options.config)\n});\n","let tokenizer = require('postcss/lib/tokenize')\nlet Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n  }\n}\n\nmodule.exports = SafeParser\n","let { Input } = require('postcss')\n\nlet SafeParser = require('./safe-parser')\n\nmodule.exports = function safeParse(css, opts) {\n  let input = new Input(css, opts)\n\n  let parser = new SafeParser(input)\n  parser.parse()\n\n  return parser.root\n}\n","'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\nconst path = require('path');\nconst { default: postcss } = require('postcss');\nconst { promises: fs } = require('fs');\n\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('postcss').Syntax} Syntax */\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\nconst postcssProcessor = postcss();\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\nmodule.exports = async function getPostcssResult(stylelint, options = {}) {\n\tconst cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tif (stylelint._options.syntax) {\n\t\tlet error = 'The \"syntax\" option is no longer available. ';\n\n\t\terror +=\n\t\t\tstylelint._options.syntax === 'css'\n\t\t\t\t? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default'\n\t\t\t\t: `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n\n\t\treturn Promise.reject(new Error(error));\n\t}\n\n\tconst syntax = options.customSyntax\n\t\t? getCustomSyntax(options.customSyntax)\n\t\t: cssSyntax(stylelint, options.filePath);\n\n\tconst postcssOptions = {\n\t\tfrom: options.filePath,\n\t\tsyntax,\n\t};\n\n\t/** @type {string | undefined} */\n\tlet getCode;\n\n\tif (options.code !== undefined) {\n\t\tgetCode = options.code;\n\t} else if (options.filePath) {\n\t\tgetCode = await fs.readFile(options.filePath, 'utf8');\n\t}\n\n\tif (getCode === undefined) {\n\t\treturn Promise.reject(new Error('code or filePath required'));\n\t}\n\n\tif (options.codeProcessors && options.codeProcessors.length) {\n\t\tif (stylelint._options.fix) {\n\t\t\tconsole.warn(\n\t\t\t\t'Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?',\n\t\t\t);\n\t\t\tstylelint._options.fix = false;\n\t\t}\n\n\t\tconst sourceName = options.code ? options.codeFilename : options.filePath;\n\n\t\tfor (const codeProcessor of options.codeProcessors) {\n\t\t\tgetCode = codeProcessor(getCode, sourceName);\n\t\t}\n\t}\n\n\tconst postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n\tif (options.filePath) {\n\t\tstylelint._postcssResultCache.set(options.filePath, postcssResult);\n\t}\n\n\treturn postcssResult;\n};\n\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\nfunction getCustomSyntax(customSyntax) {\n\tlet resolved;\n\n\tif (typeof customSyntax === 'string') {\n\t\ttry {\n\t\t\tresolved = require(customSyntax);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror &&\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.code === 'MODULE_NOT_FOUND' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.message.includes(customSyntax)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/*\n\t\t * PostCSS allows for syntaxes that only contain a parser, however,\n\t\t * it then expects the syntax to be set as the `parse` option.\n\t\t */\n\t\tif (!resolved.parse) {\n\t\t\tresolved = {\n\t\t\t\tparse: resolved,\n\t\t\t\tstringify: postcss.stringify,\n\t\t\t};\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tif (typeof customSyntax === 'object') {\n\t\tif (typeof customSyntax.parse === 'function') {\n\t\t\tresolved = { ...customSyntax };\n\t\t} else {\n\t\t\tthrow new TypeError(\n\t\t\t\t`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`,\n\t\t\t);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tthrow new Error(`Custom syntax must be a string or a Syntax object`);\n}\n\n/** @type {{ [key: string]: string }} */\nconst previouslyInferredExtensions = {\n\thtml: 'postcss-html',\n\tjs: '@stylelint/postcss-css-in-js',\n\tjsx: '@stylelint/postcss-css-in-js',\n\tless: 'postcss-less',\n\tmd: 'postcss-markdown',\n\tsass: 'postcss-sass',\n\tsss: 'sugarss',\n\tscss: 'postcss-scss',\n\tsvelte: 'postcss-html',\n\tts: '@stylelint/postcss-css-in-js',\n\ttsx: '@stylelint/postcss-css-in-js',\n\tvue: 'postcss-html',\n\txml: 'postcss-html',\n\txst: 'postcss-html',\n};\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\nfunction cssSyntax(stylelint, filePath) {\n\tconst fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n\tconst extensions = ['css', 'pcss', 'postcss'];\n\n\tif (previouslyInferredExtensions[fileExtension]) {\n\t\tconsole.warn(\n\t\t\t`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`,\n\t\t);\n\t}\n\n\treturn {\n\t\tparse:\n\t\t\tstylelint._options.fix && extensions.includes(fileExtension)\n\t\t\t\t? require('postcss-safe-parser')\n\t\t\t\t: postcss.parse,\n\t\tstringify: postcss.stringify,\n\t};\n}\n","export default async () => false;\n","'use strict';\n\nconst util = require('util');\n\n/**\n * @param {unknown} error\n * @returns {error is NodeJS.ErrnoException}\n */\nmodule.exports = function isPathNotFoundError(error) {\n\t// @ts-expect-error -- TS2339: Property 'code' does not exist on type 'Error'.\n\treturn util.types.isNativeError(error) && error.code === 'ENOENT';\n};\n","'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\nconst { assert, assertNumber, assertString } = require('./utils/validateTypes');\n\nconst COMMAND_PREFIX = 'stylelint-';\nconst disableCommand = `${COMMAND_PREFIX}disable`;\nconst enableCommand = `${COMMAND_PREFIX}enable`;\nconst disableLineCommand = `${COMMAND_PREFIX}disable-line`;\nconst disableNextLineCommand = `${COMMAND_PREFIX}disable-next-line`;\nconst ALL_RULES = 'all';\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('postcss').Root} PostcssRoot */\n/** @typedef {import('postcss').Document} PostcssDocument */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n\treturn {\n\t\tcomment,\n\t\tstart,\n\t\tend: end || undefined,\n\t\tstrictStart,\n\t\tstrictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n\t\tdescription,\n\t};\n}\n\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\nmodule.exports = function assignDisabledRanges(root, result) {\n\tresult.stylelint = result.stylelint || {\n\t\tdisabledRanges: {},\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t/**\n\t * Most of the functions below work via side effects mutating this object\n\t * @type {DisabledRangeObject & { all: DisabledRange[] }}\n\t */\n\tconst disabledRanges = {\n\t\t[ALL_RULES]: [],\n\t};\n\n\tresult.stylelint.disabledRanges = disabledRanges;\n\n\t// Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n\t// into a single node before passing to `checkComment`.\n\n\t/** @type {PostcssComment?} */\n\tlet inlineEnd;\n\n\troot.walkComments((comment) => {\n\t\tif (inlineEnd) {\n\t\t\t// Ignore comments already processed by grouping with a previous one.\n\t\t\tif (inlineEnd === comment) inlineEnd = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextComment = comment.next();\n\n\t\t// If any of these conditions are not met, do not merge comments.\n\t\tif (\n\t\t\t!(\n\t\t\t\t!isStandardSyntaxComment(comment) &&\n\t\t\t\tisStylelintCommand(comment) &&\n\t\t\t\tnextComment &&\n\t\t\t\tnextComment.type === 'comment' &&\n\t\t\t\t(comment.text.includes('--') || nextComment.text.startsWith('--'))\n\t\t\t)\n\t\t) {\n\t\t\tcheckComment(comment);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastLine = (comment.source && comment.source.end && comment.source.end.line) || 0;\n\t\tconst fullComment = comment.clone();\n\n\t\tlet current = nextComment;\n\n\t\twhile (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n\t\t\tconst currentLine = (current.source && current.source.end && current.source.end.line) || 0;\n\n\t\t\tif (lastLine + 1 !== currentLine) break;\n\n\t\t\tfullComment.text += `\\n${current.text}`;\n\n\t\t\tif (fullComment.source && current.source) {\n\t\t\t\tfullComment.source.end = current.source.end;\n\t\t\t}\n\n\t\t\tinlineEnd = current;\n\t\t\tconst next = current.next();\n\n\t\t\tif (!next || next.type !== 'comment') break;\n\n\t\t\tcurrent = next;\n\t\t\tlastLine = currentLine;\n\t\t}\n\n\t\tcheckComment(fullComment);\n\t});\n\n\treturn result;\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction isStylelintCommand(comment) {\n\t\treturn comment.text.startsWith(disableCommand) || comment.text.startsWith(enableCommand);\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableLineCommand(comment) {\n\t\tif (comment.source && comment.source.start) {\n\t\t\tconst line = comment.source.start.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableNextLineCommand(comment) {\n\t\tif (comment.source && comment.source.end) {\n\t\t\tconst line = comment.source.end.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableNextLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line + 1, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {string|undefined} description\n\t */\n\tfunction disableLine(comment, line, ruleName, description) {\n\t\tif (ruleIsDisabled(ALL_RULES)) {\n\t\t\tthrow comment.error('All rules have already been disabled', {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\n\t\tif (ruleName === ALL_RULES) {\n\t\t\tfor (const disabledRuleName of Object.keys(disabledRanges)) {\n\t\t\t\tif (ruleIsDisabled(disabledRuleName)) continue;\n\n\t\t\t\tconst strict = disabledRuleName === ALL_RULES;\n\n\t\t\t\tstartDisabledRange(comment, line, disabledRuleName, strict, description);\n\t\t\t\tendDisabledRange(line, disabledRuleName, strict);\n\t\t\t}\n\t\t} else {\n\t\t\tif (ruleIsDisabled(ruleName)) {\n\t\t\t\tthrow comment.error(`\"${ruleName}\" has already been disabled`, {\n\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstartDisabledRange(comment, line, ruleName, true, description);\n\t\t\tendDisabledRange(line, ruleName, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableCommand(comment) {\n\t\tconst description = getDescription(comment.text);\n\n\t\tfor (const ruleToDisable of getCommandRules(disableCommand, comment.text)) {\n\t\t\tconst isAllRules = ruleToDisable === ALL_RULES;\n\n\t\t\tif (ruleIsDisabled(ruleToDisable)) {\n\t\t\t\tthrow comment.error(\n\t\t\t\t\tisAllRules\n\t\t\t\t\t\t? 'All rules have already been disabled'\n\t\t\t\t\t\t: `\"${ruleToDisable}\" has already been disabled`,\n\t\t\t\t\t{\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (comment.source && comment.source.start) {\n\t\t\t\tconst line = comment.source.start.line;\n\n\t\t\t\tif (isAllRules) {\n\t\t\t\t\tfor (const ruleName of Object.keys(disabledRanges)) {\n\t\t\t\t\t\tstartDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartDisabledRange(comment, line, ruleToDisable, true, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processEnableCommand(comment) {\n\t\tfor (const ruleToEnable of getCommandRules(enableCommand, comment.text)) {\n\t\t\t// need fallback if endLine will be undefined\n\t\t\tconst endLine = comment.source && comment.source.end && comment.source.end.line;\n\n\t\t\tassertNumber(endLine);\n\n\t\t\tif (ruleToEnable === ALL_RULES) {\n\t\t\t\tif (\n\t\t\t\t\tObject.values(disabledRanges).every((ranges) => {\n\t\t\t\t\t\tif (ranges.length === 0) return true;\n\n\t\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\t\treturn lastRange && typeof lastRange.end === 'number';\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tthrow comment.error('No rules have been disabled', {\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\tif (!lastRange || !lastRange.end) {\n\t\t\t\t\t\tendDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n\t\t\t\t// Get a starting point from the where all rules were disabled\n\t\t\t\tdisabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(\n\t\t\t\t\t({ start, end, description }) =>\n\t\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t\t);\n\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ruleToEnable)) {\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction checkComment(comment) {\n\t\tconst text = comment.text;\n\n\t\t// Ignore comments that are not relevant commands\n\n\t\tif (text.indexOf(COMMAND_PREFIX) !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (text.startsWith(disableLineCommand)) {\n\t\t\tprocessDisableLineCommand(comment);\n\t\t} else if (text.startsWith(disableNextLineCommand)) {\n\t\t\tprocessDisableNextLineCommand(comment);\n\t\t} else if (text.startsWith(disableCommand)) {\n\t\t\tprocessDisableCommand(comment);\n\t\t} else if (text.startsWith(enableCommand)) {\n\t\t\tprocessEnableCommand(comment);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} command\n\t * @param {string} fullText\n\t * @returns {string[]}\n\t */\n\tfunction getCommandRules(command, fullText) {\n\t\t// Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n\t\tconst splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n\n\t\tassertString(splitted);\n\t\tconst rules = splitted\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.filter(Boolean)\n\t\t\t.map((r) => r.trim());\n\n\t\tif (rules.length === 0) {\n\t\t\treturn [ALL_RULES];\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * @param {string} fullText\n\t * @returns {string|undefined}\n\t */\n\tfunction getDescription(fullText) {\n\t\tconst descriptionStart = fullText.indexOf('--');\n\n\t\tif (descriptionStart === -1) return;\n\n\t\treturn fullText.slice(descriptionStart + 2).trim();\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t * @param {string|undefined} description\n\t */\n\tfunction startDisabledRange(comment, line, ruleName, strict, description) {\n\t\tconst rangeObj = createDisableRange(comment, line, strict, description);\n\n\t\tensureRuleRanges(ruleName);\n\n\t\tconst range = disabledRanges[ruleName];\n\n\t\tassert(range);\n\t\trange.push(rangeObj);\n\t}\n\n\t/**\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t */\n\tfunction endDisabledRange(line, ruleName, strict) {\n\t\tconst ranges = disabledRanges[ruleName];\n\t\tconst lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n\t\tif (!lastRangeForRule) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add an `end` prop to the last range of that rule\n\t\tlastRangeForRule.end = line;\n\t\tlastRangeForRule.strictEnd = strict;\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t */\n\tfunction ensureRuleRanges(ruleName) {\n\t\tif (!disabledRanges[ruleName]) {\n\t\t\tdisabledRanges[ruleName] = disabledRanges[ALL_RULES].map(\n\t\t\t\t({ comment, start, end, description }) =>\n\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t * @returns {boolean}\n\t */\n\tfunction ruleIsDisabled(ruleName) {\n\t\tconst ranges = disabledRanges[ruleName];\n\n\t\tif (!ranges) return false;\n\n\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\tif (!lastRange) return false;\n\n\t\tif (!lastRange.end) return true;\n\n\t\treturn false;\n\t}\n};\n","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = Array.from({ length: MAX_LEVENSHTEIN_DISTANCE });\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tfor (const existRuleName of Object.keys(rules)) {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t}\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (const [i, suggestion] of suggestions.entries()) {\n\t\tif (suggestion.length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestion);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t});\n};\n","'use strict';\n\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\nconst lintPostcssResult = require('./lintPostcssResult');\nconst path = require('path');\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = async function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst isIgnored = await stylelint.isPathIgnored(inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) return false;\n\n\t\tthrow err;\n\t});\n\n\tif (isIgnored) {\n\t\treturn options.existingPostcssResult\n\t\t\t? Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t  })\n\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t}\n\n\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\tconst cwd = stylelint._options.cwd;\n\n\tconst configForFile = await stylelint\n\t\t.getConfigForFile(configSearchPath, inputFilePath)\n\t\t.catch((err) => {\n\t\t\tif (isCodeNotFile && isPathNotFoundError(err)) return stylelint.getConfigForFile(cwd);\n\n\t\t\tthrow err;\n\t\t});\n\n\tif (!configForFile) {\n\t\treturn Promise.reject(new Error('Config file not found'));\n\t}\n\n\tconst config = configForFile.config;\n\tconst existingPostcssResult = options.existingPostcssResult;\n\n\t/** @type {StylelintPostcssResult} */\n\tconst stylelintResult = {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t};\n\n\tconst postcssResult =\n\t\texistingPostcssResult ||\n\t\t(await stylelint._getPostcssResult({\n\t\t\tcode: options.code,\n\t\t\tcodeFilename: options.codeFilename,\n\t\t\tfilePath: inputFilePath,\n\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\tcustomSyntax: config.customSyntax,\n\t\t}));\n\n\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\tstylelint: stylelintResult,\n\t});\n\n\tawait lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n\n\treturn stylelintPostcssResult;\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n","'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.ruleMetadata = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string | undefined} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (\n\t\tpostcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]\n\t);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rulesOrder = Object.keys(rules);\n\tconst ruleNames = config.rules\n\t\t? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b))\n\t\t: [];\n\n\tfor (const ruleName of ruleNames) {\n\t\tconst ruleFunction =\n\t\t\trules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ruleSettings = config.rules && config.rules[ruleName];\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\t\t// disableFix in secondary option\n\t\tconst disableFix = (secondaryOptions && secondaryOptions.disableFix === true) || false;\n\n\t\tif (disableFix) {\n\t\t\tpostcssResult.stylelint.ruleDisableFix = true;\n\t\t}\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] =\n\t\t\t(secondaryOptions && secondaryOptions.severity) || defaultSeverity;\n\t\tpostcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n\t\tpostcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\t!disableFix &&\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n","export const EOL = \"\\n\";\nexport const release = () => \"\";\n","'use strict';\n\nconst augmentConfig = require('./augmentConfig');\nconst createStylelintResult = require('./createStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst lintSource = require('./lintSource');\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @param {import('stylelint').LinterOptions} options\n * @returns {StylelintInternalApi}\n */\nfunction createStylelint(options = {}) {\n\tconst cwd = options.cwd || process.cwd();\n\n\t/** @type {StylelintInternalApi} */\n\t// @ts-expect-error -- TS2740: Type '{ _options: LinterOptions; }' is missing the following properties from type 'InternalApi'\n\tconst stylelint = { _options: { ...options, cwd } };\n\n\tstylelint._extendExplorer = cosmiconfig('', {\n\t\ttransform: augmentConfig.augmentConfigExtended(cwd),\n\t\tstopDir: STOP_DIR,\n\t});\n\n\tstylelint._specifiedConfigCache = new Map();\n\tstylelint._postcssResultCache = new Map();\n\tstylelint._createStylelintResult = createStylelintResult.bind(null, stylelint);\n\tstylelint._getPostcssResult = getPostcssResult.bind(null, stylelint);\n\tstylelint._lintSource = lintSource.bind(null, stylelint);\n\n\tstylelint.getConfigForFile = getConfigForFile.bind(null, stylelint);\n\tstylelint.isPathIgnored = isPathIgnored.bind(null, stylelint);\n\n\treturn stylelint;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').createLinter} */ (createStylelint);\n","'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n","/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n\tif (Number.isNaN(codePoint)) {\n\t\treturn false;\n\t}\n\n\t// Code points are derived from:\n\t// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\tif (\n\t\tcodePoint >= 0x1100 && (\n\t\t\tcodePoint <= 0x115F || // Hangul Jamo\n\t\t\tcodePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n\t\t\tcodePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n\t\t\t// CJK Radicals Supplement .. Enclosed CJK Letters and Months\n\t\t\t(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||\n\t\t\t// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n\t\t\t(0x3250 <= codePoint && codePoint <= 0x4DBF) ||\n\t\t\t// CJK Unified Ideographs .. Yi Radicals\n\t\t\t(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||\n\t\t\t// Hangul Jamo Extended-A\n\t\t\t(0xA960 <= codePoint && codePoint <= 0xA97C) ||\n\t\t\t// Hangul Syllables\n\t\t\t(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||\n\t\t\t// CJK Compatibility Ideographs\n\t\t\t(0xF900 <= codePoint && codePoint <= 0xFAFF) ||\n\t\t\t// Vertical Forms\n\t\t\t(0xFE10 <= codePoint && codePoint <= 0xFE19) ||\n\t\t\t// CJK Compatibility Forms .. Small Form Variants\n\t\t\t(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||\n\t\t\t// Halfwidth and Fullwidth Forms\n\t\t\t(0xFF01 <= codePoint && codePoint <= 0xFF60) ||\n\t\t\t(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||\n\t\t\t// Kana Supplement\n\t\t\t(0x1B000 <= codePoint && codePoint <= 0x1B001) ||\n\t\t\t// Enclosed Ideographic Supplement\n\t\t\t(0x1F200 <= codePoint && codePoint <= 0x1F251) ||\n\t\t\t// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n\t\t\t(0x20000 <= codePoint && codePoint <= 0x3FFFD)\n\t\t)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n","'use strict';\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\n\nconst stringWidth = string => {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tlet width = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst code = string.codePointAt(i);\n\n\t\t// Ignore control characters\n\t\tif (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (code >= 0x300 && code <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Surrogates\n\t\tif (code > 0xFFFF) {\n\t\t\ti++;\n\t\t}\n\n\t\twidth += isFullwidthCodePoint(code) ? 2 : 1;\n\t}\n\n\treturn width;\n};\n\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n","\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","'use strict';\nconst supportsColor = require('supports-color');\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n\tif (/^\\d{3,4}$/.test(versionString)) {\n\t\t// Env var doesn't always use dots. example: 4601 => 46.1.0\n\t\tconst m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n\t\treturn {\n\t\t\tmajor: 0,\n\t\t\tminor: parseInt(m[1], 10),\n\t\t\tpatch: parseInt(m[2], 10)\n\t\t};\n\t}\n\n\tconst versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n\treturn {\n\t\tmajor: versions[0],\n\t\tminor: versions[1],\n\t\tpatch: versions[2]\n\t};\n}\n\nfunction supportsHyperlink(stream) {\n\tconst {env} = process;\n\n\tif ('FORCE_HYPERLINK' in env) {\n\t\treturn !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n\t}\n\n\tif (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n\t\treturn true;\n\t}\n\n\t// If they specify no colors, they probably don't want hyperlinks.\n\tif (!supportsColor.supportsColor(stream)) {\n\t\treturn false;\n\t}\n\n\tif (stream && !stream.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn false;\n\t}\n\n\tif ('NETLIFY' in env) {\n\t\treturn true;\n\t}\n\n\tif ('CI' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\tif (version.major === 3) {\n\t\t\t\t\treturn version.minor >= 1;\n\t\t\t\t}\n\n\t\t\t\treturn version.major > 3;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif ('VTE_VERSION' in env) {\n\t\t// 0.50.0 was supposed to support hyperlinks, but throws a segfault\n\t\tif (env.VTE_VERSION === '0.50.0') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst version = parseVersion(env.VTE_VERSION);\n\t\treturn version.major > 0 || version.minor >= 50;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tsupportsHyperlink,\n\tstdout: supportsHyperlink(process.stdout),\n\tstderr: supportsHyperlink(process.stderr)\n};\n","export const isatty = () => false;\n","const supportsHyperlinks = require('supports-hyperlinks');\n\n// ANSI escapes\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\n\n/**\n * @see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n *\n * @param {string} text\n * @param {string} url\n * @returns {string}\n */\nmodule.exports = function terminalLink(text, url) {\n\tif (supportsHyperlinks.stdout) {\n\t\treturn [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n\t}\n\n\treturn text;\n};\n","'use strict';\n\nconst path = require('path');\nconst stringWidth = require('string-width');\nconst table = require('table');\nconst { yellow, dim, underline, blue, red, green } = require('picocolors');\n\nconst { assertNumber } = require('../utils/validateTypes');\nconst terminalLink = require('./terminalLink');\n\nconst MARGIN_WIDTHS = 9;\n\n/**\n * @param {string} s\n * @returns {string}\n */\nfunction nope(s) {\n\treturn s;\n}\n\nconst levelColors = {\n\tinfo: blue,\n\twarning: yellow,\n\terror: red,\n\tsuccess: nope,\n};\n\nconst symbols = {\n\tinfo: blue('ℹ'),\n\twarning: yellow('⚠'),\n\terror: red('✖'),\n\tsuccess: green('✔'),\n};\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @returns {string}\n */\nfunction deprecationsFormatter(results) {\n\tconst allDeprecationWarnings = results.flatMap((result) => result.deprecations);\n\n\tif (allDeprecationWarnings.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst seenText = new Set();\n\n\treturn allDeprecationWarnings.reduce((output, warning) => {\n\t\tif (seenText.has(warning.text)) return output;\n\n\t\tseenText.add(warning.text);\n\n\t\toutput += yellow('Deprecation Warning: ');\n\t\toutput += warning.text;\n\n\t\tif (warning.reference) {\n\t\t\toutput += dim(' See: ');\n\t\t\toutput += dim(underline(warning.reference));\n\t\t}\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {import('stylelint').LintResult[]} results\n * @return {string}\n */\nfunction invalidOptionsFormatter(results) {\n\tconst allInvalidOptionWarnings = results.flatMap((result) =>\n\t\tresult.invalidOptionWarnings.map((warning) => warning.text),\n\t);\n\tconst uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n\n\treturn uniqueInvalidOptionWarnings.reduce((output, warning) => {\n\t\toutput += red('Invalid Option: ');\n\t\toutput += warning;\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {string} fromValue\n * @param {string} cwd\n * @return {string}\n */\nfunction logFrom(fromValue, cwd) {\n\tif (fromValue.startsWith('<')) {\n\t\treturn underline(fromValue);\n\t}\n\n\tconst filePath = path.relative(cwd, fromValue).split(path.sep).join('/');\n\n\treturn terminalLink(filePath, `file://${fromValue}`);\n}\n\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\nfunction getMessageWidth(columnWidths) {\n\tconst width = columnWidths[3];\n\n\tassertNumber(width);\n\n\tif (!process.stdout.isTTY) {\n\t\treturn width;\n\t}\n\n\tconst availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n\tconst fullWidth = Object.values(columnWidths).reduce((a, b) => a + b);\n\n\t// If there is no reason to wrap the text, we won't align the last column to the right\n\tif (availableWidth > fullWidth + MARGIN_WIDTHS) {\n\t\treturn width;\n\t}\n\n\treturn availableWidth - (fullWidth - width + MARGIN_WIDTHS);\n}\n\n/**\n * @param {import('stylelint').Warning[]} messages\n * @param {string} source\n * @param {string} cwd\n * @return {string}\n */\nfunction formatter(messages, source, cwd) {\n\tif (!messages.length) return '';\n\n\tconst orderedMessages = [...messages].sort((a, b) => {\n\t\t// positionless first\n\t\tif (!a.line && b.line) return -1;\n\n\t\t// positionless first\n\t\tif (a.line && !b.line) return 1;\n\n\t\tif (a.line < b.line) return -1;\n\n\t\tif (a.line > b.line) return 1;\n\n\t\tif (a.column < b.column) return -1;\n\n\t\tif (a.column > b.column) return 1;\n\n\t\treturn 0;\n\t});\n\n\t/**\n\t * Create a list of column widths, needed to calculate\n\t * the size of the message column and if needed wrap it.\n\t * @type {{[k: string]: number}}\n\t */\n\tconst columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 };\n\n\t/**\n\t * @param {[string, string, string, string, string]} columns\n\t * @return {[string, string, string, string, string]}\n\t */\n\tfunction calculateWidths(columns) {\n\t\tfor (const [key, value] of Object.entries(columns)) {\n\t\t\tconst normalisedValue = value ? value.toString() : value;\n\t\t\tconst width = columnWidths[key];\n\n\t\t\tassertNumber(width);\n\t\t\tcolumnWidths[key] = Math.max(width, stringWidth(normalisedValue));\n\t\t}\n\n\t\treturn columns;\n\t}\n\n\tlet output = '\\n';\n\n\tif (source) {\n\t\toutput += `${logFrom(source, cwd)}\\n`;\n\t}\n\n\t/**\n\t * @param {import('stylelint').Warning} message\n\t * @return {string}\n\t */\n\tfunction formatMessageText(message) {\n\t\tlet result = message.text;\n\n\t\tresult = result\n\t\t\t// Remove all control characters (newline, tab and etc)\n\t\t\t.replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n\t\t\t.replace(/\\.$/, '');\n\n\t\tconst ruleString = ` (${message.rule})`;\n\n\t\tif (result.endsWith(ruleString)) {\n\t\t\tresult = result.slice(0, result.lastIndexOf(ruleString));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tconst cleanedMessages = orderedMessages.map((message) => {\n\t\tconst { line, column, severity } = message;\n\t\t/**\n\t\t * @type {[string, string, string, string, string]}\n\t\t */\n\t\tconst row = [\n\t\t\tline ? line.toString() : '',\n\t\t\tcolumn ? column.toString() : '',\n\t\t\tsymbols[severity] ? levelColors[severity](symbols[severity]) : severity,\n\t\t\tformatMessageText(message),\n\t\t\tdim(message.rule || ''),\n\t\t];\n\n\t\tcalculateWidths(row);\n\n\t\treturn row;\n\t});\n\n\toutput += table\n\t\t.table(cleanedMessages, {\n\t\t\tborder: table.getBorderCharacters('void'),\n\t\t\tcolumns: {\n\t\t\t\t0: { alignment: 'right', width: columnWidths[0], paddingRight: 0 },\n\t\t\t\t1: { alignment: 'left', width: columnWidths[1] },\n\t\t\t\t2: { alignment: 'center', width: columnWidths[2] },\n\t\t\t\t3: {\n\t\t\t\t\talignment: 'left',\n\t\t\t\t\twidth: getMessageWidth(columnWidths),\n\t\t\t\t\twrapWord: getMessageWidth(columnWidths) > 1,\n\t\t\t\t},\n\t\t\t\t4: { alignment: 'left', width: columnWidths[4], paddingRight: 0 },\n\t\t\t},\n\t\t\tdrawHorizontalLine: () => false,\n\t\t})\n\t\t.split('\\n')\n\t\t.map(\n\t\t\t/**\n\t\t\t * @param {string} el\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\t(el) => el.replace(/(\\d+)\\s+(\\d+)/, (_m, p1, p2) => dim(`${p1}:${p2}`)),\n\t\t)\n\t\t.join('\\n');\n\n\treturn output;\n}\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function (results, returnValue) {\n\tlet output = invalidOptionsFormatter(results);\n\n\toutput += deprecationsFormatter(results);\n\n\toutput = results.reduce((accum, result) => {\n\t\t// Treat parseErrors as warnings\n\t\tif (result.parseErrors) {\n\t\t\tfor (const error of result.parseErrors)\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\tline: error.line,\n\t\t\t\t\tcolumn: error.column,\n\t\t\t\t\trule: error.stylelintType,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${error.text} (${error.stylelintType})`,\n\t\t\t\t});\n\t\t}\n\n\t\taccum += formatter(\n\t\t\tresult.warnings,\n\t\t\tresult.source || '',\n\t\t\t(returnValue && returnValue.cwd) || process.cwd(),\n\t\t);\n\n\t\treturn accum;\n\t}, output);\n\n\t// Ensure consistent padding\n\toutput = output.trim();\n\n\tif (output !== '') {\n\t\toutput = `\\n${output}\\n\\n`;\n\t}\n\n\treturn output;\n};\n","'use strict';\n\nconst stringFormatter = require('./stringFormatter');\nconst { underline, red, yellow, dim, green } = require('picocolors');\nconst terminalLink = require('./terminalLink');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} LintResult */\n/** @typedef {import('stylelint').Warning} Warning */\n\n/**\n * @type {Formatter}\n */\nmodule.exports = function (results, returnValue) {\n\tlet output = stringFormatter(results, returnValue);\n\n\tif (output === '') {\n\t\toutput = '\\n';\n\t}\n\n\tconst sourceWord = results.length > 1 ? 'sources' : 'source';\n\tconst ignoredCount = results.filter((result) => result.ignored).length;\n\tconst checkedDisplay = ignoredCount\n\t\t? `${results.length - ignoredCount} of ${results.length}`\n\t\t: results.length;\n\n\toutput += underline(`${checkedDisplay} ${sourceWord} checked\\n`);\n\n\tfor (const result of results) {\n\t\tlet formatting = green;\n\n\t\tif (result.errored) {\n\t\t\tformatting = red;\n\t\t} else if (result.warnings.length) {\n\t\t\tformatting = yellow;\n\t\t} else if (result.ignored) {\n\t\t\tformatting = dim;\n\t\t}\n\n\t\tlet sourceText = fileLink(result.source);\n\n\t\tif (result.ignored) {\n\t\t\tsourceText += ' (ignored)';\n\t\t}\n\n\t\toutput += formatting(` ${sourceText}\\n`);\n\t}\n\n\tconst warnings = results.flatMap((r) => r.warnings);\n\tconst warningsBySeverity = groupBy(warnings, (w) => w.severity);\n\tconst problemWord = warnings.length === 1 ? 'problem' : 'problems';\n\n\toutput += underline(`\\n${warnings.length} ${problemWord} found\\n`);\n\n\tconst metadata = ruleMetadata(results);\n\n\tfor (const [severityLevel, warningList] of Object.entries(warningsBySeverity)) {\n\t\tconst warningsByRule = groupBy(warningList, (w) => w.rule);\n\n\t\toutput += ` severity level \"${severityLevel}\": ${warningList.length}\\n`;\n\n\t\tfor (const [rule, list] of Object.entries(warningsByRule)) {\n\t\t\toutput += dim(`  ${ruleLink(rule, metadata[rule])}: ${list.length}\\n`);\n\t\t}\n\t}\n\n\treturn `${output}\\n`;\n};\n\n/**\n * @param {Warning[]} array\n * @param {(w: Warning) => string} keyFn\n * @returns {Record<string, Warning[]>}\n */\nfunction groupBy(array, keyFn) {\n\t/** @type {Record<string, Warning[]>} */\n\tconst result = {};\n\n\tfor (const item of array) {\n\t\tconst key = keyFn(item);\n\t\tlet warnings = result[key];\n\n\t\tif (warnings === undefined) {\n\t\t\tresult[key] = warnings = [];\n\t\t}\n\n\t\twarnings.push(item);\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {string | undefined} source\n * @returns {string}\n */\nfunction fileLink(source) {\n\tif (!source || source.startsWith('<')) {\n\t\treturn `${source}`;\n\t}\n\n\treturn terminalLink(source, `file://${source}`);\n}\n\n/**\n * @param {LintResult[]} results\n * @returns {Record<string, { url?: string }>}\n */\nfunction ruleMetadata(results) {\n\tconst firstResult = results[0];\n\n\treturn (\n\t\t(firstResult &&\n\t\t\tfirstResult._postcssResult &&\n\t\t\tfirstResult._postcssResult.stylelint &&\n\t\t\tfirstResult._postcssResult.stylelint.ruleMetadata) ||\n\t\t{}\n\t);\n}\n\n/**\n * @param {string} rule\n * @param {{ url?: string } | undefined} metadata\n * @returns {string}\n */\nfunction ruleLink(rule, metadata) {\n\tif (metadata && metadata.url) {\n\t\treturn terminalLink(rule, metadata.url);\n\t}\n\n\treturn rule;\n}\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst unixFormatter = (results) => {\n\tconst lines = results.flatMap((result) =>\n\t\tresult.warnings.map(\n\t\t\t(warning) =>\n\t\t\t\t`${result.source}:${warning.line}:${warning.column}: ` +\n\t\t\t\t`${warning.text} [${warning.severity}]\\n`,\n\t\t),\n\t);\n\tconst total = lines.length;\n\tlet output = lines.join('');\n\n\tif (total > 0) {\n\t\toutput += `\\n${total} problem${total !== 1 ? 's' : ''}\\n`;\n\t}\n\n\treturn output;\n};\n\nmodule.exports = unixFormatter;\n","'use strict';\n\nconst _importLazy = require('import-lazy');\n\nconst importLazy = _importLazy(require);\n\n/** @type {typeof import('stylelint').formatters} */\nconst formatters = {\n\tcompact: importLazy('./compactFormatter'),\n\tjson: importLazy('./jsonFormatter'),\n\tstring: importLazy('./stringFormatter'),\n\ttap: importLazy('./tapFormatter'),\n\tunix: importLazy('./unixFormatter'),\n\tverbose: importLazy('./verboseFormatter'),\n};\n\nmodule.exports = formatters;\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst formatter = (results) =>\n\tresults\n\t\t.flatMap((result) =>\n\t\t\tresult.warnings.map(\n\t\t\t\t(warning) =>\n\t\t\t\t\t`${result.source}: ` +\n\t\t\t\t\t`line ${warning.line}, ` +\n\t\t\t\t\t`col ${warning.column}, ` +\n\t\t\t\t\t`${warning.severity} - ` +\n\t\t\t\t\t`${warning.text}`,\n\t\t\t),\n\t\t)\n\t\t.join('\\n');\n\nmodule.exports = formatter;\n","'use strict';\n\n/**\n * Omit any properties starting with `_`, which are fake-private\n *\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function jsonFormatter(results) {\n\tconst cleanedResults = results.map((result) =>\n\t\tObject.entries(result)\n\t\t\t.filter(([key]) => !key.startsWith('_'))\n\t\t\t.reduce((/** @type {{ [key: string]: any }} */ obj, [key, value]) => {\n\t\t\t\tobj[key] = value;\n\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t);\n\n\treturn JSON.stringify(cleanedResults);\n};\n","'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst tapFormatter = (results) => {\n\tconst lines = [`TAP version 13\\n1..${results.length}`];\n\n\tfor (const [index, result] of results.entries()) {\n\t\tlines.push(\n\t\t\t`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${\n\t\t\t\tresult.source\n\t\t\t}`,\n\t\t);\n\n\t\tif (result.warnings.length > 0) {\n\t\t\tlines.push('---', 'messages:');\n\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlines.push(\n\t\t\t\t\t` - message: \"${warning.text}\"`,\n\t\t\t\t\t`   severity: ${warning.severity}`,\n\t\t\t\t\t`   data:`,\n\t\t\t\t\t`     line: ${warning.line}`,\n\t\t\t\t\t`     column: ${warning.column}`,\n\t\t\t\t\t`     endLine: ${warning.endLine}`,\n\t\t\t\t\t`     endColumn: ${warning.endColumn}`,\n\t\t\t\t\t`     ruleId: ${warning.rule}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlines.push('---');\n\t\t}\n\t}\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n};\n\nmodule.exports = tapFormatter;\n","'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\nmodule.exports = (options = {}) => {\n\tconst [cwd, tailoredOptions] = isConfig(options)\n\t\t? [process.cwd(), { config: options }]\n\t\t: [options.cwd || process.cwd(), options];\n\tconst stylelint = createStylelint(tailoredOptions);\n\n\treturn {\n\t\tpostcssPlugin: 'stylelint',\n\t\tOnce(root, { result }) {\n\t\t\tlet filePath = root.source && root.source.input.file;\n\n\t\t\tif (filePath && !path.isAbsolute(filePath)) {\n\t\t\t\tfilePath = path.join(cwd, filePath);\n\t\t\t}\n\n\t\t\treturn stylelint._lintSource({\n\t\t\t\tfilePath,\n\t\t\t\texistingPostcssResult: result,\n\t\t\t});\n\t\t},\n\t};\n};\n\nmodule.exports.postcss = true;\n\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\nfunction isConfig(options) {\n\treturn 'rules' in options;\n}\n","/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n","'use strict';\n\nconst murmur = require('imurmurhash');\n\n/**\n * hash the given string\n * @param  {string} str the string to hash\n * @returns {string} the hash\n */\nmodule.exports = function hash(str) {\n\treturn murmur(str).result().toString(36);\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:file-cache');\nconst fileEntryCache = require('file-entry-cache');\nconst getCacheFile = require('./getCacheFile');\nconst path = require('path');\n\nconst DEFAULT_CACHE_LOCATION = './.stylelintcache';\nconst DEFAULT_HASH = '';\n\n/** @typedef {import('file-entry-cache').FileDescriptor[\"meta\"] & { hashOfConfig?: string }} CacheMetadata */\n\n/**\n * @param {string} [cacheLocation]\n * @param {string} [hashOfConfig]\n * @constructor\n */\nclass FileCache {\n\tconstructor(\n\t\tcacheLocation = DEFAULT_CACHE_LOCATION,\n\t\tcwd = process.cwd(),\n\t\thashOfConfig = DEFAULT_HASH,\n\t) {\n\t\tconst cacheFile = path.resolve(getCacheFile(cacheLocation, cwd));\n\n\t\tdebug(`Cache file is created at ${cacheFile}`);\n\t\tthis._fileCache = fileEntryCache.create(cacheFile);\n\t\tthis._hashOfConfig = hashOfConfig;\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t * @return {boolean}\n\t */\n\thasFileChanged(absoluteFilepath) {\n\t\t// Get file descriptor compares current metadata against cached\n\t\t// one and stores the result to \"changed\" prop.w\n\t\tconst descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);\n\t\t/** @type {CacheMetadata} */\n\t\tconst meta = descriptor.meta || {};\n\t\tconst changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig;\n\n\t\tif (!changed) {\n\t\t\tdebug(`Skip linting ${absoluteFilepath}. File hasn't changed.`);\n\t\t}\n\n\t\t// Mutate file descriptor object and store config hash to each file.\n\t\t// Running lint with different config should invalidate the cache.\n\t\tif (meta.hashOfConfig !== this._hashOfConfig) {\n\t\t\tmeta.hashOfConfig = this._hashOfConfig;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\treconcile() {\n\t\tthis._fileCache.reconcile();\n\t}\n\n\tdestroy() {\n\t\tthis._fileCache.destroy();\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t */\n\tremoveEntry(absoluteFilepath) {\n\t\tthis._fileCache.removeEntry(absoluteFilepath);\n\t}\n}\n\nmodule.exports = FileCache;\n","'use strict';\n\nconst fs = require('fs');\nconst hash = require('./hash');\nconst path = require('path');\n\n/**\n * Return the cacheFile to be used by stylelint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be `cacheFile/.cache_hashOfCWD`.\n *\n * If cacheFile points to a file or looks like a file, then it will just use that file.\n *\n * @param {string} cacheFile - The name of file to be used to store the cache\n * @param {string} cwd - Current working directory. Used for tests\n * @returns {string} Resolved path to the cache file\n */\nmodule.exports = function getCacheFile(cacheFile, cwd) {\n\t/*\n\t * Make sure path separators are normalized for environment/os.\n\t * Also, keep trailing path separator if present.\n\t */\n\tcacheFile = path.normalize(cacheFile);\n\n\tconst resolvedCacheFile = path.resolve(cwd, cacheFile);\n\t// If the last character passed is a path separator, we assume is a directory.\n\tconst looksLikeADirectory = cacheFile[cacheFile.length - 1] === path.sep;\n\n\t/**\n\t * Return the default cache file name when provided parameter is a directory.\n\t * @returns {string} - Resolved path to the cacheFile\n\t */\n\tfunction getCacheFileForDirectory() {\n\t\treturn path.join(resolvedCacheFile, `.stylelintcache_${hash(cwd)}`);\n\t}\n\n\tlet fileStats;\n\n\ttry {\n\t\tfileStats = fs.lstatSync(resolvedCacheFile);\n\t} catch {\n\t\tfileStats = null;\n\t}\n\n\tif (looksLikeADirectory || (fileStats && fileStats.isDirectory())) {\n\t\t// Return path to provided directory with generated file name.\n\t\treturn getCacheFileForDirectory();\n\t}\n\n\t// Return normalized path to cache file.\n\treturn resolvedCacheFile;\n};\n","'use strict';\n\nconst { isPathValid } = require('ignore').default;\n\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n\tconst validForIgnore = filePaths.filter(isPathValid);\n\t// Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\tconst notValidForIgnore = new Set(filePaths.filter((p) => !validForIgnore.includes(p)));\n\n\tconst filteredByIgnore = new Set(ignorer.filter(validForIgnore));\n\n\t// Preserving files order, while removing paths which were filtered by `ignore`\n\treturn filePaths.filter((p) => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};\n","'use strict';\n\nclass NoFilesFoundError extends Error {\n\t/**\n\t * @param {string|string[]} fileList\n\t */\n\tconstructor(fileList) {\n\t\tsuper();\n\n\t\tif (typeof fileList === 'string') {\n\t\t\tfileList = [fileList];\n\t\t}\n\n\t\tconst pattern = fileList.filter((i) => !i.startsWith('!')).join(', ');\n\n\t\tthis.message = `No files matching the pattern \"${pattern}\" were found.`;\n\t}\n}\n\nmodule.exports = NoFilesFoundError;\n","'use strict';\n\nclass AllFilesIgnoredError extends Error {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.message = `All input files were ignored because of the ignore pattern. Either change your input, ignore pattern or use \"--allow-empty-input\" to allow no inputs`;\n\t}\n}\n\nmodule.exports = AllFilesIgnoredError;\n","'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\nconst { isRegExp, isString } = require('./utils/validateTypes');\n\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\nmodule.exports = function (result, field) {\n\t// Files with `CssSyntaxError`s don't have `_postcssResult`s.\n\tif (!result) return null;\n\n\tconst stylelintResult = result.stylelint;\n\n\t// Files with linting errors may not have configs associated with them.\n\tif (!stylelintResult.config) return null;\n\n\tconst rawSettings = stylelintResult.config[field];\n\n\t/** @type {boolean} */\n\tlet enabled;\n\t/** @type {DisableOptions} */\n\tlet options;\n\n\tif (Array.isArray(rawSettings)) {\n\t\tenabled = rawSettings[0];\n\t\toptions = rawSettings[1] || {};\n\t} else {\n\t\tenabled = rawSettings || false;\n\t\toptions = {};\n\t}\n\n\tconst validOptions = validateOptions(\n\t\tresult,\n\t\tfield,\n\t\t{\n\t\t\tactual: enabled,\n\t\t\tpossible: [true, false],\n\t\t},\n\t\t{\n\t\t\tactual: options,\n\t\t\tpossible: {\n\t\t\t\texcept: [isString, isRegExp],\n\t\t\t},\n\t\t},\n\t);\n\n\tif (!validOptions) return null;\n\n\t// If the check is disabled with no exceptions, there's no reason to run\n\t// it at all.\n\tif (!enabled && !options.except) return null;\n\n\treturn [\n\t\tenabled,\n\t\t{\n\t\t\texcept: options.except || [],\n\t\t\tseverity: options.severity || stylelintResult.config.defaultSeverity || 'error',\n\t\t},\n\t\tstylelintResult,\n\t];\n};\n","'use strict';\n\n/**\n * If `map` already has the given `key`, returns its value. Otherwise, calls\n * `callback`, adds the result to `map` at `key`, and then returns it.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {() => V} callback\n * @returns {V}\n */\nmodule.exports = function (map, key, callback) {\n\tif (map.has(key)) return /** @type {V} */ (map.get(key));\n\n\tconst value = callback();\n\n\tmap.set(key, value);\n\n\treturn value;\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst putIfAbsent = require('./utils/putIfAbsent');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function needlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst rangeData = stylelintResult.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst disabledWarnings = stylelintResult.disabledWarnings || [];\n\n\t\t// A map from `stylelint-disable` comments to the set of rules that\n\t\t// are usefully disabled by each comment. We track this\n\t\t// comment-by-comment rather than range-by-range because ranges that\n\t\t// disable *all* rules are duplicated for each rule they apply to in\n\t\t// practice.\n\t\t/** @type {Map<PostcssComment, Set<string>>}} */\n\t\tconst usefulDisables = new Map();\n\n\t\tfor (const warning of disabledWarnings) {\n\t\t\tconst rule = warning.rule;\n\t\t\tconst ruleRanges = rangeData[rule];\n\n\t\t\tif (ruleRanges) {\n\t\t\t\tfor (const range of ruleRanges) {\n\t\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const range of rangeData.all || []) {\n\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst allRangeComments = new Set((rangeData.all || []).map((range) => range.comment));\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\t\tconst useful = usefulDisables.get(range.comment) || new Set();\n\n\t\t\t\t// Only emit a warning if this range's comment isn't useful for this rule.\n\t\t\t\t// For the special rule \"all\", only emit a warning if it's not useful for\n\t\t\t\t// *any* rules, because it covers all of them.\n\t\t\t\tif (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Needless disable for \"${rule}\"`,\n\t\t\t\t\trule: '--report-needless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\nfunction isWarningInRange(warning, range) {\n\tconst line = warning.line;\n\n\t// Need to check if range.end exist, because line number type cannot be compared to undefined\n\treturn (\n\t\trange.start <= line &&\n\t\t((range.end !== undefined && range.end >= line) || range.end === undefined)\n\t);\n}\n","'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\nmodule.exports = function (results) {\n\tfor (const result of results) {\n\t\t// File with `CssSyntaxError` don't have `_postcssResult`s.\n\t\tif (!result._postcssResult) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/** @type {{[ruleName: string]: Array<RangeType>}} */\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst config = result._postcssResult.stylelint.config;\n\n\t\tif (!config || !config.rules) continue;\n\n\t\t// If no rules actually disallow disables, don't bother looking for ranges\n\t\t// that correspond to disabled rules.\n\t\tif (!Object.values(config.rules).some((rule) => reportDisablesForRule(rule))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (!reportDisablesForRule(config.rules[rule] || [])) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" may not be disabled`,\n\t\t\t\t\trule: 'reportDisables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\nfunction reportDisablesForRule(options) {\n\tif (!options || !options[1]) return false;\n\n\treturn Boolean(options[1].reportDisables);\n}\n","'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\nconst invalidScopeDisables = require('./invalidScopeDisables');\nconst needlessDisables = require('./needlessDisables');\nconst reportDisables = require('./reportDisables');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').LinterOptions[\"maxWarnings\"]} maxWarnings */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {maxWarnings} maxWarnings\n * @param {Formatter} formatter\n * @param {string} cwd\n *\n * @returns {LinterResult}\n */\nfunction prepareReturnValue(stylelintResults, maxWarnings, formatter, cwd) {\n\treportDisables(stylelintResults);\n\tneedlessDisables(stylelintResults);\n\tinvalidScopeDisables(stylelintResults);\n\tdescriptionlessDisables(stylelintResults);\n\n\tconst errored = stylelintResults.some(\n\t\t(result) =>\n\t\t\tresult.errored ||\n\t\t\tresult.parseErrors.length > 0 ||\n\t\t\tresult.warnings.some((warning) => warning.severity === 'error'),\n\t);\n\n\t/** @type {LinterResult} */\n\tconst returnValue = {\n\t\tcwd,\n\t\terrored,\n\t\tresults: [],\n\t\toutput: '',\n\t\treportedDisables: [],\n\t};\n\n\tif (maxWarnings !== undefined) {\n\t\tconst foundWarnings = stylelintResults.reduce((count, file) => count + file.warnings.length, 0);\n\n\t\tif (foundWarnings > maxWarnings) {\n\t\t\treturnValue.maxWarningsExceeded = { maxWarnings, foundWarnings };\n\t\t}\n\t}\n\n\treturnValue.output = formatter(stylelintResults, returnValue);\n\treturnValue.results = stylelintResults;\n\n\treturn returnValue;\n}\n\nmodule.exports = prepareReturnValue;\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function invalidScopeDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst configRules = (stylelintResult.config || {}).rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tif (usedRules.has(rule)) continue;\n\n\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function descriptionlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(\n\t\t\tresult._postcssResult,\n\t\t\t'reportDescriptionlessDisables',\n\t\t);\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (range.description) continue;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) {\n\t\t\t\t\t// An 'all' rule will get copied for each individual rule. If the\n\t\t\t\t\t// configuration is `[false, {except: ['specific-rule']}]`, we\n\t\t\t\t\t// don't want to report the copies that match except, so we record\n\t\t\t\t\t// the comment as already reported.\n\t\t\t\t\tif (!enabled && rule === 'all') alreadyReported.add(range.comment);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n","'use strict';\n\nconst debug = require('debug')('stylelint:standalone');\nconst fastGlob = require('fast-glob');\nconst fs = require('fs');\nconst globby = require('globby');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\nconst createStylelint = require('./createStylelint');\nconst createStylelintResult = require('./createStylelintResult');\nconst FileCache = require('./utils/FileCache');\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst formatters = require('./formatters');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst getFormatterOptionsText = require('./utils/getFormatterOptionsText');\nconst hash = require('./utils/hash');\nconst NoFilesFoundError = require('./utils/noFilesFoundError');\nconst AllFilesIgnoredError = require('./utils/allFilesIgnoredError');\nconst { assert } = require('./utils/validateTypes');\nconst pkg = require('../package.json');\nconst prepareReturnValue = require('./prepareReturnValue');\n\nconst ALWAYS_IGNORED_GLOBS = ['**/node_modules/**'];\nconst writeFileAtomic = require('write-file-atomic');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').LinterResult} LinterResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').FormatterType} FormatterType */\n\n/**\n *\n * @param {LinterOptions} options\n * @returns {Promise<LinterResult>}\n */\nasync function standalone({\n\tallowEmptyInput = false,\n\tcache: useCache = false,\n\tcacheLocation,\n\tcode,\n\tcodeFilename,\n\tconfig,\n\tconfigBasedir,\n\tconfigFile,\n\tcustomSyntax,\n\tcwd = process.cwd(),\n\tdisableDefaultIgnores,\n\tfiles,\n\tfix,\n\tformatter,\n\tglobbyOptions,\n\tignoreDisables,\n\tignorePath,\n\tignorePattern,\n\tmaxWarnings,\n\tquiet,\n\treportDescriptionlessDisables,\n\treportInvalidScopeDisables,\n\treportNeedlessDisables,\n\tsyntax,\n}) {\n\t/** @type {FileCache} */\n\tlet fileCache;\n\tconst startTime = Date.now();\n\n\tconst isValidCode = typeof code === 'string';\n\n\tif ((!files && !isValidCode) || (files && (code || isValidCode))) {\n\t\treturn Promise.reject(\n\t\t\tnew Error('You must pass stylelint a `files` glob or a `code` string, though not both'),\n\t\t);\n\t}\n\n\t// The ignorer will be used to filter file paths after the glob is checked,\n\t// before any files are actually read\n\n\t/** @type {import('ignore').Ignore} */\n\tlet ignorer;\n\n\ttry {\n\t\tignorer = getFileIgnorer({ cwd, ignorePath, ignorePattern });\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\t/** @type {Formatter} */\n\tlet formatterFunction;\n\n\ttry {\n\t\tformatterFunction = getFormatterFunction(formatter);\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t\tignoreDisables,\n\t\tignorePath,\n\t\treportNeedlessDisables,\n\t\treportInvalidScopeDisables,\n\t\treportDescriptionlessDisables,\n\t\tsyntax,\n\t\tcustomSyntax,\n\t\tfix,\n\t\tquiet,\n\t});\n\n\tif (!files) {\n\t\tconst absoluteCodeFilename =\n\t\t\tcodeFilename !== undefined && !path.isAbsolute(codeFilename)\n\t\t\t\t? path.join(cwd, codeFilename)\n\t\t\t\t: codeFilename;\n\n\t\t// if file is ignored, return nothing\n\t\tif (\n\t\t\tabsoluteCodeFilename &&\n\t\t\t!filterFilePaths(ignorer, [path.relative(cwd, absoluteCodeFilename)]).length\n\t\t) {\n\t\t\treturn prepareReturnValue([], maxWarnings, formatterFunction, cwd);\n\t\t}\n\n\t\tlet stylelintResult;\n\n\t\ttry {\n\t\t\tconst postcssResult = await stylelint._lintSource({\n\t\t\t\tcode,\n\t\t\t\tcodeFilename: absoluteCodeFilename,\n\t\t\t});\n\n\t\t\tstylelintResult = await stylelint._createStylelintResult(postcssResult, absoluteCodeFilename);\n\t\t} catch (error) {\n\t\t\tstylelintResult = await handleError(stylelint, error);\n\t\t}\n\n\t\tconst postcssResult = stylelintResult._postcssResult;\n\t\tconst returnValue = prepareReturnValue([stylelintResult], maxWarnings, formatterFunction, cwd);\n\n\t\tif (\n\t\t\tfix &&\n\t\t\tpostcssResult &&\n\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t!postcssResult.stylelint.ruleDisableFix\n\t\t) {\n\t\t\treturnValue.output =\n\t\t\t\t!postcssResult.stylelint.disableWritingFix && postcssResult.opts\n\t\t\t\t\t? // If we're fixing, the output should be the fixed code\n\t\t\t\t\t  postcssResult.root.toString(postcssResult.opts.syntax)\n\t\t\t\t\t: // If the writing of the fix is disabled, the input code is returned as-is\n\t\t\t\t\t  code;\n\t\t}\n\n\t\treturn returnValue;\n\t}\n\n\tlet fileList = [files].flat().map((entry) => {\n\t\tconst globCWD = (globbyOptions && globbyOptions.cwd) || cwd;\n\t\tconst absolutePath = !path.isAbsolute(entry)\n\t\t\t? path.join(globCWD, entry)\n\t\t\t: path.normalize(entry);\n\n\t\tif (fs.existsSync(absolutePath)) {\n\t\t\t// This path points to a file. Return an escaped path to avoid globbing\n\t\t\treturn fastGlob.escapePath(normalizePath(entry));\n\t\t}\n\n\t\treturn entry;\n\t});\n\n\tif (!disableDefaultIgnores) {\n\t\tfileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map((glob) => `!${glob}`));\n\t}\n\n\tif (useCache) {\n\t\tconst stylelintVersion = pkg.version;\n\t\tconst hashOfConfig = hash(`${stylelintVersion}_${JSON.stringify(config || {})}`);\n\n\t\tfileCache = new FileCache(cacheLocation, cwd, hashOfConfig);\n\t} else {\n\t\t// No need to calculate hash here, we just want to delete cache file.\n\t\tfileCache = new FileCache(cacheLocation, cwd);\n\t\t// Remove cache file if cache option is disabled\n\t\tfileCache.destroy();\n\t}\n\n\tconst effectiveGlobbyOptions = {\n\t\tcwd,\n\t\t...(globbyOptions || {}),\n\t\tabsolute: true,\n\t};\n\n\tconst globCWD = effectiveGlobbyOptions.cwd;\n\n\tlet filePaths = await globby(fileList, effectiveGlobbyOptions);\n\t// Record the length of filePaths before ignore operation\n\t// Prevent prompting \"No files matching the pattern 'xx' were found.\" when .stylelintignore ignore all input files\n\tconst filePathsLengthBeforeIgnore = filePaths.length;\n\n\t// The ignorer filter needs to check paths relative to cwd\n\tfilePaths = filterFilePaths(\n\t\tignorer,\n\t\tfilePaths.map((p) => path.relative(globCWD, p)),\n\t);\n\n\tlet stylelintResults;\n\n\tif (filePaths.length) {\n\t\tlet absoluteFilePaths = filePaths.map((filePath) => {\n\t\t\tconst absoluteFilepath = !path.isAbsolute(filePath)\n\t\t\t\t? path.join(globCWD, filePath)\n\t\t\t\t: path.normalize(filePath);\n\n\t\t\treturn absoluteFilepath;\n\t\t});\n\n\t\tif (useCache) {\n\t\t\tabsoluteFilePaths = absoluteFilePaths.filter(fileCache.hasFileChanged.bind(fileCache));\n\t\t}\n\n\t\tconst getStylelintResults = absoluteFilePaths.map(async (absoluteFilepath) => {\n\t\t\tdebug(`Processing ${absoluteFilepath}`);\n\n\t\t\ttry {\n\t\t\t\tconst postcssResult = await stylelint._lintSource({\n\t\t\t\t\tfilePath: absoluteFilepath,\n\t\t\t\t});\n\n\t\t\t\tif (postcssResult.stylelint.stylelintError && useCache) {\n\t\t\t\t\tdebug(`${absoluteFilepath} contains linting errors and will not be cached.`);\n\t\t\t\t\tfileCache.removeEntry(absoluteFilepath);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * If we're fixing, save the file with changed code\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\tpostcssResult.opts &&\n\t\t\t\t\t!postcssResult.stylelint.ignored &&\n\t\t\t\t\tfix &&\n\t\t\t\t\t!postcssResult.stylelint.disableWritingFix\n\t\t\t\t) {\n\t\t\t\t\tconst fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tpostcssResult.root &&\n\t\t\t\t\t\tpostcssResult.root.source &&\n\t\t\t\t\t\tpostcssResult.root.source.input.css !== fixedCss\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait writeFileAtomic(absoluteFilepath, fixedCss);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn stylelint._createStylelintResult(postcssResult, absoluteFilepath);\n\t\t\t} catch (error) {\n\t\t\t\t// On any error, we should not cache the lint result\n\t\t\t\tfileCache.removeEntry(absoluteFilepath);\n\n\t\t\t\treturn handleError(stylelint, error, absoluteFilepath);\n\t\t\t}\n\t\t});\n\n\t\tstylelintResults = await Promise.all(getStylelintResults);\n\t} else if (allowEmptyInput) {\n\t\tstylelintResults = await Promise.all([]);\n\t} else if (filePathsLengthBeforeIgnore) {\n\t\t// All input files ignored\n\t\tstylelintResults = await Promise.reject(new AllFilesIgnoredError());\n\t} else {\n\t\tstylelintResults = await Promise.reject(new NoFilesFoundError(fileList));\n\t}\n\n\tif (useCache) {\n\t\tfileCache.reconcile();\n\t}\n\n\tconst result = prepareReturnValue(stylelintResults, maxWarnings, formatterFunction, cwd);\n\n\tdebug(`Linting complete in ${Date.now() - startTime}ms`);\n\n\treturn result;\n}\n\n/**\n * @param {FormatterType | Formatter | undefined} selected\n * @returns {Formatter}\n */\nfunction getFormatterFunction(selected) {\n\tif (typeof selected === 'string') {\n\t\tconst formatterFunction = formatters[selected];\n\n\t\tif (formatterFunction === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`You must use a valid formatter option: ${getFormatterOptionsText()} or a function`,\n\t\t\t);\n\t\t}\n\n\t\treturn formatterFunction;\n\t}\n\n\tif (typeof selected === 'function') {\n\t\treturn selected;\n\t}\n\n\tassert(formatters.json);\n\n\treturn formatters.json;\n}\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {any} error\n * @param {string} [filePath]\n * @return {Promise<StylelintResult>}\n */\nfunction handleError(stylelint, error, filePath = undefined) {\n\tif (error.name === 'CssSyntaxError') {\n\t\treturn createStylelintResult(stylelint, undefined, filePath, error);\n\t}\n\n\tthrow error;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').lint} */ (standalone);\n","'use strict';\n\nconst checkAgainstRule = require('./utils/checkAgainstRule');\nconst createPlugin = require('./createPlugin');\nconst createStylelint = require('./createStylelint');\nconst formatters = require('./formatters');\nconst postcssPlugin = require('./postcssPlugin');\nconst report = require('./utils/report');\nconst ruleMessages = require('./utils/ruleMessages');\nconst rules = require('./rules');\nconst standalone = require('./standalone');\nconst validateOptions = require('./utils/validateOptions');\nconst resolveConfig = require('./resolveConfig');\n\n/** @type {import('stylelint').PublicApi} */\nconst stylelint = Object.assign(postcssPlugin, {\n\tlint: standalone,\n\trules,\n\tformatters,\n\tcreatePlugin,\n\tresolveConfig,\n\tcreateLinter: createStylelint,\n\tutils: {\n\t\treport,\n\t\truleMessages,\n\t\tvalidateOptions,\n\t\tcheckAgainstRule,\n\t},\n});\n\nmodule.exports = stylelint;\n","'use strict';\n\nconst formatters = require('../formatters');\n\n/**\n * @param {{ useOr?: boolean }} [options={}]\n * @returns {string}\n */\nmodule.exports = function getFormatterOptionsText(options = {}) {\n\tlet output = Object.keys(formatters)\n\t\t.map((name) => `\"${name}\"`)\n\t\t.join(', ');\n\n\tif (options.useOr) {\n\t\toutput = output.replace(/, ([a-z\"]+)$/u, ' or $1');\n\t}\n\n\treturn output;\n};\n","/*!\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(path, stripTrailing) {\n  if (typeof path !== 'string') {\n    throw new TypeError('expected path to be a string');\n  }\n\n  if (path === '\\\\' || path === '/') return '/';\n\n  var len = path.length;\n  if (len <= 1) return path;\n\n  // ensure that win32 namespaces has two leading slashes, so that the path is\n  // handled properly by the win32 version of path.parse() after being normalized\n  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\n  var prefix = '';\n  if (len > 4 && path[3] === '\\\\') {\n    var ch = path[2];\n    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\n      path = path.slice(2);\n      prefix = '//';\n    }\n  }\n\n  var segs = path.split(/[/\\\\]+/);\n  if (stripTrailing !== false && segs[segs.length - 1] === '') {\n    segs.pop();\n  }\n  return prefix + segs.join('/');\n};\n","'use strict';\n\n/** @typedef {import('stylelint').Rule} StylelintRule */\n\n/**\n * @param {string} ruleName\n * @param {StylelintRule} rule\n * @returns {{ruleName: string, rule: StylelintRule}}\n */\nfunction createPlugin(ruleName, rule) {\n\treturn {\n\t\truleName,\n\t\trule,\n\t};\n}\n\nmodule.exports = /** @type {typeof import('stylelint').createPlugin} */ (createPlugin);\n","'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/**\n * Resolves the effective configuation for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} [options] - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\nmodule.exports = async function resolveConfig(\n\tfilePath,\n\t{ cwd = process.cwd(), config, configBasedir, configFile } = {},\n) {\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t});\n\n\tconst absoluteFilePath = !path.isAbsolute(filePath)\n\t\t? path.join(cwd, filePath)\n\t\t: path.normalize(filePath);\n\n\tconst configSearchPath = stylelint._options.configFile || absoluteFilePath;\n\n\tconst resolved = await stylelint.getConfigForFile(configSearchPath, absoluteFilePath);\n\n\tif (!resolved) {\n\t\treturn undefined;\n\t}\n\n\treturn resolved.config;\n};\n","'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\nfunction checkAgainstRule(options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tconst rule = rules[options.ruleName];\n\n\tif (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\t// @ts-expect-error - this error should not occur with PostCSS 8\n\tconst tmpPostcssResult = new Result();\n\n\trule(settings[0], /** @type {O} */ (settings[1]), {})(options.root, tmpPostcssResult);\n\n\tfor (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.checkAgainstRule} */ (\n\tcheckAgainstRule\n);\n"],"names":["isStandardSyntaxAtRule","atRule","nodes","params","mixin","variable","raws","afterName","report","problem","ruleName","result","message","line","node","index","endIndex","word","stylelint","ruleSeverities","customMessages","ruleMetadata","quiet","start","rangeBy","startLine","Error","ignoreDisables","config","disabledRanges","ranges","all","range","undefined","end","rules","includes","disabledWarnings","push","rule","severity","stylelintError","warningProperties","warningMessage","warn","ruleMessages","messages","newMessages","messageId","messageText","Object","entries","args","concat","arrayEqual","a","b","Array","isArray","length","every","elem","isObject","o","prototype","toString","call","isBoolean","value","Boolean","isNullish","isNumber","Number","isRegExp","RegExp","isString","String","isPlainObject","ctor","prot","constructor","hasOwnProperty","_isPlainObject","assert","console","assertFunction","Function","isFunction","assertNumber","assertString","IGNORED_OPTIONS","Set","validateOptions","optionDescriptions","noErrors","optionDescription","validate","complain","stylelintType","opts","possible","actual","optional","nothingPossible","stringify","flat","isValid","optionName","optionValue","has","possibleValue","possibility","JSON","_export_prefix_","prop","match","_export_unprefixed_","replace","rejected","name","primary","root","primaryValues","walkAtRules","vendor","toLowerCase","primaryOptionArray","meta","url","AT_RULES","SELECTORS","PROPERTIES","PROPERTY_VALUES","_export_unprefix_","p","_secondary","context","identifier","startsWith","fix","isAutoprefixable","keywordSets","uniteSets","reduce","set","nonLengthUnits","lengthUnits","units","camelCaseFunctionNames","basicKeywords","systemFontValues","fontFamilyKeywords","fontWeightRelativeKeywords","fontWeightAbsoluteKeywords","fontWeightNumericKeywords","fontWeightKeywords","animationNameKeywords","animationTimingFunctionKeywords","animationIterationCountKeywords","animationDirectionKeywords","animationFillModeKeywords","animationPlayStateKeywords","animationShorthandKeywords","levelOneAndTwoPseudoElements","levelThreeAndUpPseudoElements","shadowTreePseudoElements","webkitScrollbarPseudoElements","vendorSpecificPseudoElements","pseudoElements","aNPlusBNotationPseudoClasses","linguisticPseudoClasses","atRulePagePseudoClasses","logicalCombinationsPseudoClasses","aNPlusBOfSNotationPseudoClasses","otherPseudoClasses","vendorSpecificPseudoClasses","webkitScrollbarPseudoClasses","pseudoClasses","shorthandTimeProperties","longhandTimeProperties","timeProperties","camelCaseKeywords","counterIncrementKeywords","counterResetKeywords","gridRowKeywords","gridColumnKeywords","gridAreaKeywords","listStyleTypeKeywords","listStylePositionKeywords","listStyleImageKeywords","listStyleShorthandKeywords","fontStyleKeywords","fontVariantKeywords","fontStretchKeywords","fontSizeKeywords","lineHeightKeywords","fontShorthandKeywords","keyframeSelectorKeywords","pageMarginAtRules","atRules","deprecatedMediaFeatureNames","mediaFeatureNames","systemColors","standardHtmlTags","nonStandardHtmlTags","validMixedCaseSvgElements","matchesStringOrRegExp","input","comparison","testAgainstStringOrRegExpOrArray","inputItem","testResult","testAgainstStringOrRegExp","comparisonItem","pattern","substring","firstComparisonChar","lastComparisonChar","secondToLastComparisonChar","comparisonIsRegex","valueMatch","slice","optionsMatches","options","propertyName","secondaryOptions","ignoreAtRules","atName","expected","expectation","expectedName","toUpperCase","flattenArray","validateObjectWithArrayProps","validators","values","item","some","v","property","atRuleName","propList","find","type","hasBlock","statement","rawNodeString","before","configurationError","text","err","code","isSingleLineString","test","isWhitespace","char","whitespaceChecker","targetWhitespace","activeArgs","source","errTarget","lineCheckStr","onlyOneChar","allowIndentation","expectBefore","rejectBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","after","expectAfter","rejectAfter","expectedAfterSingleLine","rejectedAfterSingleLine","expectedAfterMultiLine","rejectedAfterMultiLine","messageFunc","expectedBefore","_activeArgs2","expectedChar","i","charAt","expectBeforeAllowingIndentation","_activeArgs","oneCharBefore","twoCharsBefore","rejectedBefore","_activeArgs3","expectedAfter","_activeArgs4","oneCharAfter","twoCharsAfter","threeCharsAfter","rejectedAfter","_activeArgs5","beforeAllowingIndentation","obj","afterOneOnly","checker","nodeString","m","_export_isRoot_","_export_isRule_","_export_isAtRule_","_export_isComment_","_export_isDeclaration_","_export_isValueFunction_","_export_hasSource_","beforeBlockString","noRawBefore","isRule","selector","isAtRule","between","blockString","hasEmptyBlock","hasEmptyLine","string","check","statementString","expectEmptyLineBefore","childNodeTypes","map","newline","spaces","split","repeat","addEmptyLineAfter","removeEmptyLinesAfter","except","walkRules","nextNonCommentNode","startNode","next","nextNode","nodeToCheck","msg","_secondaryOptions","blockIsMultiLine","statementRaws","firstWhitespaceIndex","search","newlineBefore","newlineAfter","newlineIndex","reportIndex","nodeToCheckRaws","backupCommentNextBefores","Map","reNewLine","newLineMatch","first","delete","clear","fixTarget","fixTargetRaws","ignore","statementFirst","beforeBraceNoRaw","spaceIndex","ignoreSelectors","openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","uLower","uUpper","plus","isUnicodeRange","walk","cb","bubble","max","stringifyNode","custom","buf","customResult","quote","unclosed","minus","dot","exp","EXP","ValueParser","this","prev","token","escape","escapePos","whitespacePos","parenthesesOpenPos","parent","tokens","pos","stack","balanced","sourceEndIndex","sourceIndex","indexOf","pop","parse","unit","nextCode","nextNextCode","likeNumber","number","declarationValueIndex","decl","prefix","raw","suffix","count","str","getDeclarationValue","isStandardSyntaxFunction","isStandardSyntaxColorFunction","fnNode","setDeclarationValue","LEGACY_FUNCS","LEGACY_NOTATION_FUNCS","walkDecls","needsFix","parsedValue","valueParser","isValueFunction","hasCommas","commaCount","childNode","isComma","atLeastOneSpace","whitespace","hex","unexpected","HEX","isUrlFunction","isHexColor","hasAlphaChannel","addEmptyLineBefore","getNodeLine","getPreviousNonSharedLineCommentNode","previousNode","previousNode2","getNextNonSharedLineCommentNode","nodesShareLines","isSharedLineComment","isComment","nextNonSharedLineCommentNode","parentNode","isRoot","isAfterComment","isBlocklessAtRuleAfterBlocklessAtRule","isBlocklessAtRuleAfterSameNameBlocklessAtRule","isFirstNested","parentNodes","firstNode","hasSource","openingBraceLine","isFirstNodeOfRoot","removeEmptyLinesBefore","isNested","hasEmptyLineBefore","isAtRuleAfterSameNameAtRule","IGNORED_FUNCTIONS","isIgnoredFunction","hasLessInterpolation","hasPsvInterpolation","hasScssInterpolation","hasTplInterpolation","hasInterpolation","isStandardSyntaxValue","normalizedValue","propertySets","acceptCustomIdents","r","grad","turn","rad","Math","PI","t","n","pow","round","e","u","isFinite","g","s","h","min","floor","l","d","f","c","y","exec","parseInt","substr","object","N","M","H","$","j","parsed","trim","x","rgba","brightness","isDark","isLight","toHex","toRgb","toRgbString","toHsl","toHslString","toHsv","invert","w","saturate","desaturate","grayscale","lighten","darken","rotate","hue","alpha","isEqual","S","z","cbrt","atan2","sqrt","cos","sin","parseHwbWithCommaString","endsWith","whiteness","blackness","extraArgs","colordInstance","colord","parseGrayString","lightness","lightnessWithUnit","colorObject","alphaWithUnit","forEach","extend","white","bisque","blue","cadetblue","chartreuse","chocolate","coral","antiquewhite","aqua","azure","whitesmoke","papayawhip","plum","blanchedalmond","black","gold","goldenrod","gainsboro","cornsilk","cornflowerblue","burlywood","aquamarine","beige","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkkhaki","darkgray","darkgreen","darkgrey","peachpuff","darkmagenta","darkred","darkorchid","darkorange","darkslateblue","gray","darkslategray","darkslategrey","deeppink","deepskyblue","wheat","firebrick","floralwhite","ghostwhite","darkviolet","magenta","green","dodgerblue","grey","honeydew","hotpink","blueviolet","forestgreen","lawngreen","indianred","indigo","fuchsia","brown","maroon","mediumblue","lightcoral","darkturquoise","lightcyan","ivory","lightyellow","lightsalmon","lightseagreen","linen","mediumaquamarine","lemonchiffon","lime","khaki","mediumseagreen","limegreen","mediumspringgreen","lightskyblue","lightblue","midnightblue","lightpink","mistyrose","moccasin","mintcream","lightslategray","lightslategrey","navajowhite","navy","mediumvioletred","powderblue","palegoldenrod","oldlace","paleturquoise","mediumturquoise","mediumorchid","rebeccapurple","lightsteelblue","mediumslateblue","thistle","tan","orchid","mediumpurple","purple","pink","skyblue","springgreen","palegreen","red","yellow","slateblue","lavenderblush","peru","palevioletred","violet","teal","slategray","slategrey","aliceblue","darkseagreen","darkolivegreen","greenyellow","seagreen","seashell","tomato","silver","sienna","lavender","lightgreen","orange","orangered","steelblue","royalblue","turquoise","yellowgreen","salmon","saddlebrown","sandybrown","rosybrown","darksalmon","lightgoldenrodyellow","snow","lightgrey","lightgray","dimgray","dimgrey","olivedrab","olive","toName","closest","toHwb","toHwbString","toLab","delta","abs","F","L","I","P","k","q","A","B","toLch","toLchString","_colordClass","parsers","named","original","NODE_TYPES","ignoreProperties","rawColorString","colorString","color","namedColor","isStandardSyntaxHexColor","hexMatch","hexValue","isValidHex","atRuleNameSpaceChecker","locationChecker","checkedRuleName","isStandardSyntaxComment","comment","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","walkComments","rawComment","firstFourChars","leftMatches","rightMatches","opener","leftSpace","rightSpace","closer","left","right","addWhitespaceBefore","addWhitespaceAfter","normalizedPattern","isCustomProperty","isScssVariable","isStandardSyntaxDeclaration","lang","prevNode","isDeclaration","isAfterCustomProperty","atRuleParamIndex","regexpPattern","customMediaName","customProperty","knownCustomProperties","add","isVarFunction","isDashedIdent","isStandardSyntaxProperty","SKIP","ONLY","styleSearch","callback","target","skipComments","comments","skipStrings","strings","skipFunctionNames","functionNames","skipFunctionArguments","functionArguments","skipParentheticals","parentheticals","onceOptionUsed","keys","key","openingQuote","onlyComments","onlyStrings","onlyFunctionNames","onlyFunctionArguments","onlyParentheticals","insideString","insideComment","insideSingleLineComment","insideParens","insideFunctionArguments","openingParenCount","matchCount","getMatch","ti","tl","checkResult","getMatchBase","bind","targetString","targetStringLength","startIndex","currentChar","handleMatch","isFunctionName","once","declarationBangSpaceChecker","indexOffset","declString","valueString","bangIndex","declValue","setFixed","important","targetBefore","targetAfter","val","eachDeclarationBlock","each","decls","eachDecl","ignoreDuplicates","ignoreDiffValues","ignorePrefixlessSameValues","indexDuplicate","duplicateValue","shorthandData","margin","padding","background","font","border","transition","animation","columns","flex","grid","outline","mask","shorthand","declarations","unprefixedProp","overrideables","longhandProp","props","ignoreShorthands","longhandProperties","longhandProps","longhandDeclarations","shorthandProperties","shorthandProperty","prefixedShorthandProperty","longhandDeclaration","prefixedShorthandData","sort","ruleNode","block","filter","parentRule","semicolon","last","nextDecl","checkLastNode","hasSemicolon","testAgainstString","matchesWord","containsString","declarationColonSpaceChecker","endOfPropIndex","propPlusColon","colonIndex","indexToCheck","betweenStart","sliceIndex","betweenBefore","betweenAfter","unfixed","fixed","ALPHA_PROPS","ALPHA_FUNCS","exceptProperties","optionFuncs","freeze","expFunc","fixFunc","asNumber","percentage","isPercentage","asPercentage","findAlphaInValue","slashNodeIndex","findIndex","findAlphaInFunction","toPrecision","dimension","getImportantPosition","lastIndex","isAfterStandardPropertyDeclaration","getUnitFromValueNode","blurChar","blurInterpolation","parsedUnit","propKey","propIdentifier","isValueNode","validator","propLength","isNumbery","isValidFontSize","numberUnit","isVariable","nodeTypesToCheck","findFontFamily","fontFamilies","valueNodes","postcssValueParser","children","needMergeNodesByValue","mergeCharacters","valueNode","valueLowerCase","prevPrevNode","fontFamily","lastFontFamily","secondNode","charactersBetween","process$1","cwd","env","NO_COLOR","FORCE_COLOR","argv","isColorSupported","process","platform","formatter","open","close","replaceClose","nextIndex","createColors","enabled","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","_module_exports_","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","tokenizer","content","escaped","currentToken","css","valueOf","ignoreErrors","buffer","returned","what","error","back","nextToken","ignoreUnclosed","controlChar","fromCharCode","endOfFile","position","Input","HIGHLIGHT_THEME","brackets","pico","class","hash","getTokenType","processor","terminalHighlight","join","registerInput","dependant","CssSyntaxError","column","file","plugin","super","reason","endLine","endColumn","setMessage","captureStackTrace","showSourceCode","mark","aside","lines","maxWidth","gutter","spacing","default","_export_isClean_","Symbol","_export_my_","DEFAULT_RAW","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","emptyBody","commentLeft","commentRight","Stringifier","builder","document","body","rawValue","ownSemicolon","atrule","child","own","detect","rawCache","beforeAfter","method","capitalize","rawSemicolon","rawEmptyBody","rawIndent","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","depth","step","cloneNode","cloned","Node","defaults","isClean","my","clone","append","data","remove","removeChild","stringifier","assign","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","bookmark","foundSelf","defaultType","cleanRaws","keepBetween","toJSON","_","inputs","emitInputs","inputsNextIndex","inputId","get","positionInside","positionBy","getProxyProcessor","markDirty","toProxy","proxyCache","Proxy","addToError","postcssNode","from","proxyOf","Declaration","noop","cosmiconfig","catch","SourceMapConsumer","SourceMapGenerator","_require_source_map_js_","dirname","_require_path_","PreviousMap","loadAnnotation","inline","startWith","annotation","loadMap","mapFile","consumer","consumerCache","withContent","sourcesContent","getAnnotationURL","sourceMapString","lastIndexOf","decodeInline","decodeURIComponent","lastMatch","Buffer","window","atob","fromBase64","encoding","loadFile","path","existsSync","readFileSync","fromSourceMap","isMap","prevPath","mappings","_mappings","sections","resolve","isAbsolute","fromOffsetCache","sourceMapAvailable","pathAvailable","hasBOM","mapResolve","id","size","random","nanoid","fromOffset","offset","lastLine","lineToIndex","prevIndex","mid","col","origin","pathToFileURL","to","fromUrl","originalPositionFor","URL","sourceRoot","protocol","fileURLToPath","sourceContentFor","json","_objectSpread","Rule","AtRule","Root","LazyResult","Processor","relative","sep","MapGenerator","cssString","mapOpts","previous","previousMaps","isInline","isSourcesContent","clearAnnotation","setSourcesContent","already","setSourceContent","toUrl","applyPrevMaps","applySourceMap","isAnnotation","toBase64","btoa","unescape","encodeURIComponent","addAnnotation","outputFile","eol","generateMap","generateString","addMapping","generated","absolute","encodeURI","sourcePath","noSource","mapping","generate","Comment","cleanSource","markDirtyUp","Container","iterator","getIterator","indexes","normalize","prepend","reverse","unshift","exist","splice","removeAll","replaceValues","fast","condition","sample","processed","rebuild","other","lastEach","registerParse","registerRule","registerAtRule","registerRoot","setPrototypeOf","Document","toResult","registerLazyResult","registerProcessor","printed","warnOnce","Warning","opt","Result","lastPlugin","postcssPlugin","warning","warnings","list","separators","array","current","func","inQuote","prevQuote","letter","space","selectors","SAFE_COMMENT_NEIGHBOR","empty","Parser","createTokenizer","freeSemicolon","emptyRule","endFile","init","getPosition","bracket","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","findLastWithPosition","shift","firstSpaces","precheckMissedSemicolon","stringFrom","spacesFromEnd","cache","hasWord","checkMissedSemicolon","unnamedAtrule","spacesAndCommentsFromStart","unexpectedClose","unclosedBlock","clean","lastTokenType","element","doubleColon","founded","parser","NODE_ENV","TYPE_TO_CLASS_NAME","PLUGIN_PROPS","prepare","Once","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","DocumentExit","OnceExit","NOT_VISITORS","isPromise","then","getEvents","toStack","events","eventIndex","visitors","visitorIndex","cleanMarks","postcss","stringified","syntax","helpers","plugins","toStringTag","sync","onFulfilled","onRejected","async","finally","onFinally","Promise","reject","processing","runAsync","getAsyncError","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","subRoot","visitSync","event","visitor","promise","handleError","roots","postcssVersion","pluginName","pluginVer","runtimeVer","version","visitTick","visit","registerPostcss","NoWorkResult","_processor","_css","_opts","_map","self","defineProperty","generatedCSS","generatedMap","_root","use","normalized","fromJSON","ownInputs","_excluded","inputHydrated","__proto__","_defaults$source","_objectWithoutProperties","_excluded2","initializer","warningPrinted","creator","LANG","transformer","processOpts","pluginOpts","ignoreFontFamilies","lastValue","isLastFontFamilyVariable","isFamilyNameKeyword","valueIndex","ignoreFontFamilyNames","keywords","familyNames","fontFamilyNode","family","rawFamily","operator","expectedOperatorBeforeSign","OPERATORS","OPERATOR_REGEX","ALL_OPERATORS","checkAroundOperator","operatorNode","currentNode","isBeforeOp","operatorSourceIndex","isSingleSpace","lastChar","firstChar","indexOfFirstNewLine","checkWords","operatorIndex","charBefore","charAfter","insertCharAtIndex","checkForOperatorInFirstNode","lastNode","isOperator","checkForOperatorInLastNode","foundOperatorNode","nodeIndex","currNode","nodeBefore","nodeAfter","operators","ignoreComments","invalidNamed","NORMAL_KEYWORD","WEIGHTS_WITH_KEYWORD_EQUIVALENTS","checkWeight","weightValue","weightValueNode","lowerWeightValue","findFontWeights","hasNumericFontWeight","lowerValue","checkFont","fixer","div","symb","functionCommaSpaceChecker","hasFixed","argumentStrings","getCommaCheckIndex","commaNode","commaBefore","commaDataList","checkIndex","makeMutableFontFamilies","mutableNodes","idx","newNode","rawName","hasQuotes","resetIndexes","removeQuotes","openIndex","closeIndex","addQuotes","fixedName","checkFamilyName","required","quotesRequired","recommended","quotesRecommended","fontFamilyNodes","placeIndexOnValueStart","maxAdjacentNewlines","violatedCRLFNewLinesRegex","violatedLFNewLinesRegex","allowedLFNewLinesString","allowedCRLFNewLinesString","stringValue","splittedValue","sourceIndexStart","stringifiedNode","newNodeString","updatedValue","acc","curr","ignoreFunctions","functionsList","maybeMatch","pre","post","reg","begs","beg","ai","bi","functionArgumentsSearch","functionName","parensMatch","balancedMatch","expression","expressionIndex","firstArg","trimEnd","withToPrefix","regexp","matches","isStandardDirection","getSchemeFromUrl","urlString","_unused","scheme","slashIndex","isStandardSyntaxUrl","unspacedUrlString","mapLowercaseFunctionNamesToCamelCase","needFix","functionNameLowerCase","expectedFunctionName","expectedOpeningMultiLine","rejectedOpeningMultiLine","expectedClosingMultiLine","rejectedClosingMultiLine","functionString","isMultiLine","containsNewline","openingIndex","checkBefore","getCheckBefore","fixBeforeForAlways","fixBeforeForNever","closingIndex","checkAfter","getCheckAfter","fixAfterForAlways","fixAfterForNever","expectedOpeningSingleLine","rejectedOpeningSingleLine","expectedClosingSingleLine","rejectedClosingSingleLine","isSingleLine","ACCEPTABLE_AFTER_CLOSING_PAREN","nextChar","checkClosingParen","createFixer","applyFix","whitespaceEndIndex","param","atRuleKeyframes","checkArgs","shouldHasQuotes","leftTrimmedArgs","trimStart","complaintIndex","complaintEndIndex","trimmedArg","isEmptyArgument","atRuleParamsLowerCase","setAtRuleParams","getAtRuleParams","urlFunctionFull","urlFunctionArguments","quotedUrlFunctionFirstArgument","restAtRuleParams","quotedNodeValue","isStandardSyntaxSelector","keyframeRule","normalizedSelector","keyframeName","regex","keyframesNode","emptyLines","getChars","replaceEmptyLines","firstNodeRawsBefore","rootRawsAfter","rootString","maxLines","isSpecialCase","repeatTimes","emptyLFLines","emptyCRLFLines","$1","matchStartIndex","matchEndIndex","eof","codeAfter","rootIndex","codeBefore","isEofNode","checkMatch","isStandardSyntaxRule","gobbleHex","lower","spaceTerminated","codePoint","fromCodePoint","__esModule","CONTAINS_ESCAPE","ret","gobbled","_len","arguments","_key","commentStart","lastEnd","commentEnd","_export_ensureObject_","_export_getProp_","_export_unesc_","_unesc","_interopRequireDefault","_require__$unesc_","_getProp","_require__$getProp_","_ensureObject","_require__$ensureObject_","_require__$stripComments_","_defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_proto","at","appendToPropertyAndEscape","valueEscaped","originalValue","originalEscaped","setPropertyAndEscape","setPropertyWithoutEscape","isAtPosition","stringifyProperty","valueToString","rawSpaceBefore","rawSpaceAfter","rawSpace","UNIVERSAL","ATTRIBUTE","CLASS","COMBINATOR","COMMENT","ID","NESTING","PSEUDO","ROOT","SELECTOR","STRING","TAG","_node","_require__$node_","types","_getRequireWildcardCache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","_interopRequireWildcard","_require__$types_","WeakMap","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_arrayLikeToArray","_unsupportedIterableToArray","done","TypeError","arr","len","arr2","_setPrototypeOf","_Node","subClass","superClass","_this","create","_step","_iterator","oldNode","oldIndex","_findChildAtPosition","found","atPosition","foundChild","_inferEndPosition","walkAttributes","_this2","walkClasses","_this3","walkCombinators","_this4","_this5","walkIds","_this6","walkNesting","_this7","walkPseudos","_this8","walkTags","_this9","walkUniversals","_this10","_this11","memo","_container","_require__$container_","_Container","_types","trailingComma","_error","handler","Selector","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","merge","quotes","isIdentifier","output","counter","character","extra","escapeEverything","$0","$2","wrap","_cssesc","_require_cssesc_","ClassName","_constructed","_value","Namespace","apply","qualifiedName","namespace","namespaceString","_namespace","ns","_require__$namespace_","Tag","_Namespace","Pseudo","deprecate","fn","unescapeValue","_CSSESC_QUOTE_OPTIONS","_require___$util$unesc_","WRAPPED_IN_QUOTES","warnOfDeprecatedValueAssignment","warnOfDeprecatedQuotedAssignment","warnOfDeprecatedConstructor","deprecatedUsage","quoteMark","unescaped","Attribute","_unescapeValue","handleDeprecatedContructorOpts","getQuotedValue","_determineQuoteMark","cssescopts","CSSESC_QUOTE_OPTIONS","smart","smartQuoteMark","preferredQuoteMark","setValue","_quoteMark","_syncRawValue","numSingleQuotes","numDoubleQuotes","NO_QUOTE","pref","preferCurrentQuoteMark","_handleEscapes","_spacesFor","rawSpaces","_stringFor","spaceName","defaultAttrConcat","attrSpaces","offsetOf","attributeSpaces","operatorSpaces","valueSpaces","insensitive","attrValue","quoted","qm","attribute","_unescapeValue2","_attribute","Universal","Combinator","Nesting","_export_combinator_","_export_word_","_export_comment_","_export_str_","_export_tab_","_export_newline_","_export_feed_","_export_cr_","_export_backslash_","_export_bang_","_export_slash_","_export_doubleQuote_","_export_singleQuote_","_export_space_","_export_greaterThan_","_export_pipe_","_export_equals_","_export_plus_","_export_caret_","_export_tilde_","_export_dollar_","_export_closeSquare_","_export_openSquare_","_export_closeParenthesis_","_export_openParenthesis_","_export_semicolon_","_export_colon_","_export_comma_","_export_at_","_export_asterisk_","_export_ampersand_","nextLine","nextOffset","tokenType","safe","tab","cr","feed","greaterThan","tilde","pipe","combinator","asterisk","ampersand","bang","equals","dollar","caret","openSquare","closeSquare","openParenthesis","closeParenthesis","consumeWord","_unescapable","_wordDelimiters","_require__$tokenTypes_","unescapable","wordDelimiters","hexChars","consumeEscape","hexDigits","FIELDS","TYPE","START_LINE","START_COL","END_LINE","END_COL","START_POS","END_POS","_WHITESPACE_TOKENS","_Object$assign","_require__$selectors$root_","_selector","_require__$selectors$selector_","_className","_require__$selectors$className_","_comment","_require__$selectors$comment_","_id","_require__$selectors$id_","_tag","_require__$selectors$tag_","_string","_require__$selectors$string_","_pseudo","_require__$selectors$pseudo_","_require__$selectors$attribute_","_universal","_require__$selectors$universal_","_combinator","_require__$selectors$combinator_","_nesting","_require__$selectors$nesting_","_sortAscending","_require__$sortAscending_","_tokenize","_require__$tokenize_","_require__$selectors$types_","WHITESPACE_TOKENS","WHITESPACE_EQUIV_TOKENS","tokenStart","tokenEnd","getSource","startColumn","getTokenSource","getTokenSourceSpan","startToken","endToken","unescapeProp","indexesOf","lossy","_errorGenerator","rootSource","errorGenerator","loop","errorOptions","attr","startingToken","currToken","spaceBefore","commentBefore","lastAdded","spaceAfterMeaningfulToken","prevContent","existingComment","oldRawValue","_unescaped","_oldRawValue","oldValue","insensitiveFlag","lastComment","_util","rawLastComment","rawLastValue","parseWhitespaceEquivalentTokens","stopPosition","startPosition","firstToken","lastToken","convertWhitespaceNodesToSpace","requiredSpace","lossySpace","isNamedCombinator","namedCombinator","nameRaw","nextSigTokenPos","locateNextMeaningfulToken","spaceOrDescendantSelectorNodes","_this$convertWhitespa2","_space","_rawSpace","_this$convertWhitespa3","_space2","_rawSpace2","optionalSpace","_this$convertWhitespa","missingBackslash","missingParenthesis","missingSquareBracket","prevToken","universal","nesting","parentheses","unbalanced","parenEnd","parenStart","parenValue","parseParenthesisToken","pseudo","pseudoStr","splitWord","firstCallback","hasClass","escapedDot","isKeyframesPercent","hasId","interpolations","hashIndex","indices","uniqs","ind","classNameOpts","idOpts","tagOpts","throwOnParenthesis","description","an","searchPosition","_parser","_require__$parser_","funcRes","_shouldUpdateSelector","updateSelector","_isLossy","lossless","_parseOptions","_run","transform","_runSync","ast","astSync","transformSync","processSync","tag","className","_require__$attribute_","_require__$className_","_require__$combinator_","_require__$comment_","_require__$id_","_require__$nesting_","_require__$pseudo_","_require__$root_","_require__$selector_","_require__$string_","_require__$tag_","_require__$universal_","_IS_TYPE","isNode","isPseudoElement","isPseudoClass","isPseudo","isContainer","isNamespace","isAttribute","isTag","isUniversal","isSelector","isNesting","isCombinator","isClassName","IS_TYPE","isNodeType","_constructors","_guards","_require__$processor_","_require__$selectors_","_default","isIgnoreAtRule","checkStatement","nestingDepth","ignorePseudoClasses","level","sel","extractPseudoRule","containsPseudoClassesOnly","pseudoRule","containsIgnoredPseudoClassesOnly","isCustomMediaQuery","mediaQuery","isRangeContextMediaFeature","mediaFeature","isStandardSyntaxMediaFeatureName","mediaFeatureName","_Node2","hasFilter","filterReg","parseMediaFeature","parseMediaQuery","parseMediaList","interimIndex","levelLocal","doesHaveUrl","parenthesesLv","_i2","_character","_mediaQueryString","_spaceBefore","_Container2","mediaQueryString","modesEntered","mode","lastModeIndex","mediaFeatureValue","indexLocal","stringNormalized","isCalculationEnabled","mediaFeatureValueStr","localLevel","insideSomeValue","_i","_parsers","rangeOperators","rangeContextNodeParser","nameNode","mediaParser","_require_postcss_media_query_parser_","mediaFeatureNode","parsedRangeContext","MATH_FUNCTIONS","isMathFunction","isWord","isLength","isFraction","parseFloat","isZero","regularNumber","isLineHeight","isFlex","valueNodeIndex","isLineHeightValue","mediaFeatureColonSpaceChecker","fixData","paramColonIndex","colonIndices","beforeColon","afterColon","hasComments","mediaRule","expectedFeatureName","flagMap","global","ignoreCase","multiline","dotAll","sticky","unicode","cloneRegexp","flags","flag","clonedRegexp","execall","isGlobal","subMatches","EXCLUDED_PATTERNS","ignorePattern","ignoreNonComments","skippedSubStrings","skippedSubStringsIndex","subMatch","startOfSubString","checkNewline","nextNewlineIndex","rawLineLength","excludedLength","skippedSubString","startSubString","endSubString","excluded","tryToPopSubString","lineText","nextTwoChars","linebreak","shouldHaveCR","hasError","reportNewlineError","dataToCheck","hasNewlineToVerify","hasCR","res","ignoreMediaFeatureNames","mediaQueryListCommaWhitespaceChecker","allowTrailingComments","execResult","commaIndex","checkComma","paramCommaIndex","commaIndices","beforeComma","afterComma","mediaFeatureRangeContext","unprefixedMediaFeatureName","allowedValuesKey","featureName","findMediaOperator","fixOperatorIndices","checkAfterOperator","beforeOperator","afterOperator","checkBeforeOperator","indexBoost","problems","parsedParams","resolvedNestedSelector","resolveNestedSelector","parentIsNestAtRule","parentSelectors","parentSelector","newlyResolvedSelectors","resolvedParentSelector","combinedSelector","findAtRuleContext","nodeContextLookup","contextMap","getContext","subContexts","nodeSource","baseContext","creativeGetMap","someMap","someThing","parseSelector","selectorParser","selectorContextLookup","checkSelector","selectorNode","comparisonContext","referenceSelectorNode","firstChild","nodesByCombinator","nodesAfterLastCombinator","lastCompoundSelectorWithoutPseudoClasses","selectorSpecificity","calculate","entry","specificity","priorComparableSelectors","priorEntry","compare","resolvedSelector","isKeyframeRule","firstDuplicateLine","disallowInList","shouldDisallowDuplicateInList","contextSelectorSet","resolvedSelectorList","flatMap","sortedSelectorList","selectorLine","previousDuplicatePosition","selectorListParsed","selectorForMessage","presentedSelectors","reportedSelectors","findNotContiguousOrRectangular","areas","names","namedAreas","indicesByRow","row","isContiguousAndRectangular","expectedToken","expectedSameNumber","expectedRectangle","reportSent","tokenValue","firstArea","isRectangular","notContiguousOrRectangular","atImport","imports","firstParam","restParams","uri","media","importedUris","isOnlyWhitespace","whitespacesToReject","fixString","findErrorStartIndex","lastEOLIndex","ignoreEmptyLines","isRootFirst","eolWhitespaceIndex","beforeNewlineIndex","rootNode","fixText","rawsParams","rawsSelector","rawsValue","lastEOL","reportFromIndex","eachEolWhitespace","errorIndex","fixFn","noEmptyFirstLineTest","getOffsetByNode","nodeColumn","nodeLine","rawAfterRoot","fixSemiIndices","removeIndices","rawBeforeNode","allowedSemi","rawBeforeIndexStart","rawAfterNode","rawOwnSemicolon","baseIndex","toFixed","ignoreUnits","IRREGULAR_WHITESPACES_PATTERN","issue","findIrregularWhitespace","fixPositions","fixPosition","removeTrailingZeros","invalidPosition","nodeName","expectedProp","animationName","declaredAnimations","animationNames","findAnimationName","animationNameNode","ident","neverFixPositions","alwaysFixPositions","capturingGroupIndex","addLeadingZero","removeLeadingZeros","_export_all_","allValidProperties","properties","checkPrefixed","shouldCheckPrefixed","isAfterRule","isAfterSingleLineComment","selectorTree","attributeNode","attributeName","qualifiedAttribute","selectorAttributeOperatorSpaceChecker","fixedSelector","attributeNodeString","checkOperator","rawAttr","rawAttrAfter","attrAfter","setAttrAfter","selectorKey","disallowedProperties","isKeyframeSelector","selectorValue","resolveNestedSelectors","shouldResolveNestedSelectors","fullSelector","classNode","prevChar","hasInterpolatingAmpersand","nestedSelector","getRuleSelector","selectorFixed","operatorAfter","setOperatorAfter","rawOperator","rawSpacesOperator","rawOperatorAfter","attributeSelectorString","nextCharIsSpace","fixBefore","prevCharIsSpace","fixAfter","spacesAttribute","rawAttrBefore","attrBefore","setAttrBefore","rawAfter","setAfter","isStandardSyntaxCombinator","combinatorNode","normalizeCombinator","selectorCombinatorSpaceChecker","locationType","parentParentNode","fixIndices","nextChars","indextoCheckAfter","beforeSelector","afterSelector","isContextFunctionalPseudoClass","normalisedParentName","isNonNegativeInteger","isInteger","total","ignoreAttributes","container","selectorListCommaWhitespaceChecker","nonSpaceCharacter","compoundCount","isStandardSyntaxTypeSelector","_node$parent$parent","parentType","parentValue","ignoreTypes","ignoreDescendant","ignoreChild","ignoreCompounded","ignoreNextSibling","isDescendantCombinator","hasDescendantCombinatorBefore","isChildCombinator","hasChildCombinatorBefore","hasCompoundSelector","isNextSiblingCombinator","newSelectorString","ignoreContextFunctionalPseudoClasses","HUE_FIRST_ARG_FUNCS","HUE_THIRD_ARG_FUNCS","HUE_FUNCS","findHue","isDegree","asDegree","canShrink","expectedHex","longer","shorter","hexVariant","pseudoNode","specificitySum","specificities","sum","spec","maxChildSpecificity","maxSpec","childSpecificity","nodeSpecificity","pseudoClass","shouldSkipPseudoClassArgument","simpleSpecificity","ownValue","ownSpecificity","pseudoSpecificity","maxSpecificity","expectedPseudo","selectorCharacters","selectorAST","selectorParent","selectorNodes","rightNode","getRightNodes","isCustomSelector","prevPseudoElement","prevPseudoElementValue","_require_postcss_selector_parser_","isSimpleSelector","isNot","previousNot","indentAndTrimRight","head","tail","fixComplex","second","isSimple","not","simpleSelectors","firstSelector","fixSimple","paramString","setFirstNodeSpaceBefore","setLastNodeSpaceAfter","transformSelector","pseudoElement","expectedPseudoElement","ignorePseudoElements","fixedColon","isDouble","expectedValue","correctQuote","erroneousQuote","avoidEscape","checkDeclOrAtRule","getIndex","needsEscape","fixIndex","replaceQuote","needsCorrectEscape","checkRule","ignoreNamespaces","tagNode","selectorLowerCase","svgTags","mathMLTags","isCustomElement","tagName","tagNameLowerCase","ignoreUnit","mediaNode","mediaNodes","lastMediaNode","imageSet","imageSetLastNode","checkedValue","processValue","expectedUnit","valueListCommaWhitespaceChecker","indexToCheckAfter","determineIndex","declNode","beforeValue","afterValue","time","DELAY_PROPERTIES","minimum","getDuration","valueList","isAcceptableTime","parsedTime","numTime","isIgnoredProperty","valueListList","valueListString","duration","ignoredCharacters","gridRowProps","gridColumnProps","mapLowercaseKeywordsToCamelCase","ignoreKeywords","camelCaseSvgKeywords","propLowerCase","keyword","isCounterIncrementCustomIdentValue","isCounterResetCustomIdentValue","keywordLowerCase","toLocaleLowerCase","expectedKeyword","newValueString","checkMedia","mediaName","getMediaFeatureName","checkDecl","valuePrefixes","ignoreValues","hasPrefix","baseIndentLevel","indentInsideParens","indentClosingBrace","spaceCount","indentChar","warningWord","legibleExpectation","quantifiedWarningWord","indentationLevel","getDocument","indentLevel","isSafeInteger","newIndentLevel","indentSize","getIndentLevel","tabMatch","tabCount","spaceMatch","newBaseIndentLevel","firstLine","indents","foundIndents","shortest","MAX_SAFE_INTEGER","foundIndent","fill","afterEnd","nextRoot","inferRootIndentLevel","docSource","scores","lastIndentSize","lastLeadingSpacesLength","vote","leadingSpacesLength","score","leadingSpaces","bestScore","indentSizeDate","inferDocIndentSize","getRootBaseIndentLevel","calculatedLevel","checkMultilineBit","newlineIndentLevel","parentheticalDepth","ignoreInsideParans","outsideParens","precedesClosingParenthesis","expectedIndentLevel","afterNewlineSpaceMatches","afterNewlineSpace","expectedIndentation","currentIndentation","replaceIndentation","declProp","declBetween","atRuleAfterName","atRuleParams","nodeLevel","expectedOpeningBraceIndentation","isFirstChild","lastIndexOfNewline","fixIndentation","closingBraceLevel","expectedClosingBraceIndentation","declLevel","valueLevel","checkValue","ruleLevel","paramLevel","checkAtRuleParams","searchString","replaceString","propertiesWithShorthandNotation","normalizedProp","hasIgnoredCharacters","valuesToShorthand","shortestFormString","top","bottom","lowerTop","lowerRight","lowerBottom","lowerLeft","canCondenseToOneValue","canCondenseToTwoValues","_top","_bottom","canCondenseToThreeValues","canCondense","valuesFormString","_require__$alpha_value_notation_","_require__$at_rule_allowed_list_","_require__$at_rule_disallowed_list_","_require__$at_rule_empty_line_before_","_require__$at_rule_name_case_","_require__$at_rule_name_newline_after_","_require__$at_rule_semicolon_space_before_","_require__$at_rule_name_space_after_","_require__$at_rule_no_unknown_","_require__$at_rule_no_vendor_prefix_","_require__$at_rule_property_required_list_","_require__$at_rule_semicolon_newline_after_","_require__$block_closing_brace_empty_line_before_","_require__$block_closing_brace_newline_after_","_require__$block_closing_brace_newline_before_","_require__$block_closing_brace_space_after_","_require__$block_closing_brace_space_before_","_require__$block_no_empty_","_require__$block_opening_brace_newline_after_","_require__$block_opening_brace_newline_before_","_require__$block_opening_brace_space_after_","_require__$block_opening_brace_space_before_","_require__$color_function_notation_","_require__$color_hex_alpha_","_require__$color_hex_case_","_require__$color_hex_length_","_require__$color_named_","_require__$color_no_hex_","_require__$color_no_invalid_hex_","_require__$comment_empty_line_before_","_require__$comment_no_empty_","_require__$comment_pattern_","_require__$comment_whitespace_inside_","_require__$comment_word_disallowed_list_","_require__$custom_media_pattern_","_require__$custom_property_empty_line_before_","_require__$custom_property_no_missing_var_function_","_require__$custom_property_pattern_","_require__$declaration_bang_space_after_","_require__$declaration_bang_space_before_","_require__$declaration_block_no_duplicate_custom_properties_","_require__$declaration_block_no_duplicate_properties_","_require__$declaration_block_no_redundant_longhand_properties_","_require__$declaration_block_no_shorthand_property_overrides_","_require__$declaration_block_semicolon_newline_after_","_require__$declaration_block_semicolon_newline_before_","_require__$declaration_block_semicolon_space_after_","_require__$declaration_block_semicolon_space_before_","_require__$declaration_block_single_line_max_declarations_","_require__$declaration_block_trailing_semicolon_","_require__$declaration_colon_newline_after_","_require__$declaration_colon_space_after_","_require__$declaration_colon_space_before_","_require__$declaration_empty_line_before_","_require__$declaration_no_important_","_require__$declaration_property_max_values_","_require__$declaration_property_unit_allowed_list_","_require__$declaration_property_unit_disallowed_list_","_require__$declaration_property_value_allowed_list_","_require__$declaration_property_value_disallowed_list_","_require__$font_family_no_missing_generic_family_keyword_","_require__$font_family_name_quotes_","_require__$font_family_no_duplicate_names_","_require__$font_weight_notation_","_require__$function_allowed_list_","_require__$function_calc_no_unspaced_operator_","_require__$function_comma_newline_after_","_require__$function_comma_newline_before_","_require__$function_comma_space_after_","_require__$function_comma_space_before_","_require__$function_disallowed_list_","_require__$function_linear_gradient_no_nonstandard_direction_","_require__$function_max_empty_lines_","_require__$function_name_case_","_require__$function_no_unknown_","_require__$function_parentheses_newline_inside_","_require__$function_parentheses_space_inside_","_require__$function_url_no_scheme_relative_","_require__$function_url_quotes_","_require__$function_url_scheme_allowed_list_","_require__$function_url_scheme_disallowed_list_","_require__$function_whitespace_after_","_require__$hue_degree_notation_","_require__$import_notation_","_require__$keyframe_block_no_duplicate_selectors_","_require__$keyframe_declaration_no_important_","_require__$keyframes_name_pattern_","_require__$length_zero_no_unit_","linebreaks","_require__$linebreaks_","_require__$max_empty_lines_","_require__$max_line_length_","_require__$max_nesting_depth_","_require__$media_feature_colon_space_after_","_require__$media_feature_colon_space_before_","_require__$media_feature_name_allowed_list_","_require__$media_feature_name_case_","_require__$media_feature_name_disallowed_list_","_require__$media_feature_name_no_unknown_","_require__$media_feature_name_no_vendor_prefix_","_require__$media_feature_name_value_allowed_list_","_require__$media_feature_parentheses_space_inside_","_require__$media_feature_range_operator_space_after_","_require__$media_feature_range_operator_space_before_","_require__$media_query_list_comma_newline_after_","_require__$media_query_list_comma_newline_before_","_require__$media_query_list_comma_space_after_","_require__$media_query_list_comma_space_before_","_require__$named_grid_areas_no_invalid_","_require__$no_descending_specificity_","_require__$no_duplicate_at_import_rules_","_require__$no_duplicate_selectors_","_require__$no_empty_source_","_require__$no_empty_first_line_","_require__$no_eol_whitespace_","_require__$no_extra_semicolons_","_require__$no_invalid_double_slash_comments_","_require__$no_invalid_position_at_import_rule_","_require__$no_irregular_whitespace_","_require__$no_missing_end_of_source_newline_","_require__$no_unknown_animations_","_require__$number_leading_zero_","_require__$number_max_precision_","_require__$number_no_trailing_zeros_","_require__$property_allowed_list_","_require__$property_case_","_require__$property_disallowed_list_","_require__$property_no_unknown_","_require__$property_no_vendor_prefix_","_require__$rule_empty_line_before_","_require__$rule_selector_property_disallowed_list_","_require__$selector_attribute_brackets_space_inside_","_require__$selector_attribute_name_disallowed_list_","_require__$selector_attribute_operator_allowed_list_","_require__$selector_attribute_operator_disallowed_list_","_require__$selector_attribute_operator_space_after_","_require__$selector_attribute_operator_space_before_","_require__$selector_attribute_quotes_","_require__$selector_class_pattern_","_require__$selector_combinator_allowed_list_","_require__$selector_combinator_disallowed_list_","_require__$selector_combinator_space_after_","_require__$selector_combinator_space_before_","_require__$selector_descendant_combinator_no_non_space_","_require__$selector_disallowed_list_","_require__$selector_id_pattern_","_require__$selector_list_comma_newline_after_","_require__$selector_list_comma_newline_before_","_require__$selector_list_comma_space_after_","_require__$selector_list_comma_space_before_","_require__$selector_max_attribute_","_require__$selector_max_class_","_require__$selector_max_combinators_","_require__$selector_max_compound_selectors_","_require__$selector_max_empty_lines_","_require__$selector_max_id_","_require__$selector_max_pseudo_class_","_require__$selector_max_specificity_","_require__$selector_max_type_","_require__$selector_max_universal_","_require__$selector_nested_pattern_","_require__$selector_no_qualifying_type_","_require__$selector_no_vendor_prefix_","_require__$selector_not_notation_","_require__$selector_pseudo_class_allowed_list_","_require__$selector_pseudo_class_case_","_require__$selector_pseudo_class_disallowed_list_","_require__$selector_pseudo_class_no_unknown_","_require__$selector_pseudo_class_parentheses_space_inside_","_require__$selector_pseudo_element_allowed_list_","_require__$selector_pseudo_element_case_","_require__$selector_pseudo_element_colon_notation_","_require__$selector_pseudo_element_disallowed_list_","_require__$selector_pseudo_element_no_unknown_","_require__$selector_type_case_","_require__$selector_type_no_unknown_","_require__$shorthand_property_no_redundant_values_","_require__$string_no_newline_","_require__$string_quotes_","_require__$time_min_milliseconds_","_require__$unicode_bom_","_require__$unit_allowed_list_","_require__$unit_case_","_require__$unit_disallowed_list_","_require__$unit_no_unknown_","_require__$value_keyword_case_","_require__$value_list_comma_newline_after_","_require__$value_list_comma_newline_before_","_require__$value_list_comma_space_after_","_require__$value_list_comma_space_before_","_require__$value_list_max_empty_lines_","_require__$value_no_vendor_prefix_","indentation","_require__$indentation_","normalizeRuleSettings","rawSettings","getModulePath","basedir","lookup","resolveFrom","silent","globalModules","_apply","_join","glob","positive","Path","normalizeAllRuleSettings","normalizedRules","rawRuleSettings","pluginFunctions","augmentConfigExtended","cosmiconfigResult","configDir","filepath","augmentedConfig","ignoreFiles","globs","globjoin","processors","absolutizeProcessors","absolutizePaths","createStylelintResult","postcssResult","filePath","cssSyntaxError","stylelintResult","deprecations","deprecationMessage","reference","stylelintReference","invalidOptionWarnings","invalidOptionMessage","parseErrors","errored","ignored","_postcssResult","createPartialStylelintResult","configForFile","getConfigForFile","resultProcessors","resultProcessor","_options","SafeParser","nextStart","prevEnd","_require_postcss_safe_parser_","_require_postcss$lib$lazy_result_","postcssProcessor","getPostcssResult","cached","_postcssResultCache","customSyntax","resolved","require","getCustomSyntax","fileExtension","extname","extensions","previouslyInferredExtensions","cssSyntax","postcssOptions","getCode","fs","promises","readFile","codeProcessors","sourceName","codeFilename","codeProcessor","html","js","jsx","less","md","sass","sss","scss","svelte","ts","tsx","vue","xml","xst","isPathIgnored","isPathNotFoundError","COMMAND_PREFIX","disableCommand","enableCommand","disableLineCommand","disableNextLineCommand","ALL_RULES","createDisableRange","strictStart","strictEnd","assignDisabledRanges","inlineEnd","nextComment","isStylelintCommand","checkComment","fullComment","currentLine","disableLine","ruleIsDisabled","disabledRuleName","strict","startDisabledRange","endDisabledRange","getDescription","getCommandRules","processDisableLineCommand","processDisableNextLineCommand","ruleToDisable","isAllRules","processDisableCommand","ruleToEnable","lastRange","processEnableCommand","command","fullText","splitted","descriptionStart","rangeObj","ensureRuleRanges","lastRangeForRule","peq","Uint32Array","distance","tmp","lst","pv","mv","sc","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","vlen","pb","mb","xh","ph","mh","myers_x","reportUnknownRuleNames","unknownRuleName","postcssRoot","suggestions","existRuleName","levenshtein","suggestion","extractSuggestions","rejectMessage","lintSource","existingPostcssResult","isCodeNotFile","inputFilePath","configSearchPath","configFile","_getPostcssResult","stylelintPostcssResult","stylelintOptions","postcssDoc","newlineMatch","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","performRules","rulesOrder","ruleNames","ruleFunction","ruleSettings","primaryOption","defaultSeverity","disableFix","ruleDisableFix","lintPostcssResult","_require_cosmiconfig_","STOP_DIR","createStylelint","_extendExplorer","augmentConfig","stopDir","_specifiedConfigCache","_createStylelintResult","_lintSource","stripAnsi","onlyFirst","ansiRegex","isFullwidthCodePoint","isNaN","stringWidth","width","codePointAt","hasFlag","terminatorPosition","forceColor","translateLevel","hasBasic","has256","has16m","supportsColor","haveStream","streamIsTTY","TERM","osRelease","sign","CI_NAME","TEAMCITY_VERSION","COLORTERM","TERM_PROGRAM_VERSION","TERM_PROGRAM","parseVersion","versionString","major","minor","patch","versions","supportsHyperlink","stream","FORCE_HYPERLINK","isTTY","VTE_VERSION","_export_stdout_","stdout","stderr","OSC","BEL","SEP","terminalLink","supportsHyperlinks","_require_picocolors_","levelColors","info","success","symbols","getMessageWidth","columnWidths","availableWidth","fullWidth","orderedMessages","formatMessageText","ruleString","fromValue","logFrom","cleanedMessages","normalisedValue","calculateWidths","table","getBorderCharacters","alignment","paddingRight","wrapWord","drawHorizontalLine","el","_m","p1","p2","_require__$stringFormatter_","results","returnValue","allInvalidOptionWarnings","invalidOptionsFormatter","allDeprecationWarnings","seenText","deprecationsFormatter","accum","groupBy","keyFn","fileLink","ruleLink","metadata","formatters","compact","cleanedResults","tap","unix","verbose","stringFormatter","sourceWord","ignoredCount","checkedDisplay","formatting","sourceText","warningsBySeverity","problemWord","firstResult","severityLevel","warningList","warningsByRule","tailoredOptions","isConfig","MurmurHash3","seed","h1","k1","rem","_module_","exports","murmur","FileCache","cacheLocation","hashOfConfig","cacheFile","resolvedCacheFile","looksLikeADirectory","fileStats","lstatSync","isDirectory","getCacheFile","_fileCache","fileEntryCache","_hashOfConfig","hasFileChanged","absoluteFilepath","getFileDescriptor","changed","reconcile","destroy","removeEntry","isPathValid","_require_ignore_","filterFilePaths","ignorer","filePaths","validForIgnore","notValidForIgnore","filteredByIgnore","NoFilesFoundError","fileList","AllFilesIgnoredError","validateDisableSettings","field","putIfAbsent","isWarningInRange","reportDisablesForRule","reportDisables","prepareReturnValue","stylelintResults","maxWarnings","rangeData","settings","usefulDisables","ruleRanges","allRangeComments","useful","needlessDisables","configRules","usedRules","invalidScopeDisables","alreadyReported","descriptionlessDisables","reportedDisables","foundWarnings","maxWarningsExceeded","debug","_require_debug_","ALWAYS_IGNORED_GLOBS","lint","allowEmptyInput","useCache","configBasedir","disableDefaultIgnores","files","globbyOptions","ignorePath","reportDescriptionlessDisables","reportInvalidScopeDisables","reportNeedlessDisables","fileCache","isValidCode","formatterFunction","getFileIgnorer","selected","getFormatterOptionsText","useOr","getFormatterFunction","absoluteCodeFilename","globCWD","absolutePath","fastGlob","escapePath","stripTrailing","ch","segs","normalizePath","globby","filePathsLengthBeforeIgnore","absoluteFilePaths","getStylelintResults","fixedCss","writeFileAtomic","createPlugin","resolveConfig","absoluteFilePath","createLinter","utils","checkAgainstRule","tmpPostcssResult"],"mappings":"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GAC3BzG,KAAMb,EACNU,kBACAD,EACAO,gBAAUsG,KALX,GAXD,EAsBFhF,EAAKuF,oBAAqB,EAE1BvF,EAAK7B,SAAWA,EAChB6B,EAAKO,SAAWA,EAChBP,EAAKwF,KA5CQ,CACZC,IAAK,mECMN,MAAMC,EAAW,IAAItC,IAAI,CACxB,oBACA,kBACA,iBACA,gBACA,gBACA,eACA,qBACA,gBAOKuC,EAAY,IAAIvC,IAAI,CACzB,iBACA,oBACA,oBACA,0BACA,kBACA,mBACA,kBACA,yBACA,oBACA,uBACA,qBACA,mBACA,0BACA,qBACA,gCASKwC,EAAa,IAAIxC,IAAI,CAC1B,gBACA,cACA,aACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,aACA,kBACA,sBACA,kBACA,oBACA,kBACA,mBACA,qBACA,4BACA,6BACA,eACA,oBACA,sBACA,gBACA,yBACA,0BACA,uBACA,aACA,aACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,aACA,cACA,oBACA,oBACA,oBACA,cACA,eACA,UACA,SACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,YACA,wBACA,eACA,yBACA,yBACA,YACA,cACA,oBACA,kBACA,oBACA,WACA,iBACA,eACA,iBACA,gBACA,sBACA,wBACA,qBACA,UACA,kBACA,kBACA,mBACA,qBACA,oBACA,sBACA,OACA,cACA,qBACA,qBACA,oBACA,qBACA,oBACA,YACA,iBACA,aACA,cACA,gBACA,cACA,YACA,aACA,kBACA,QACA,sBACA,oBACA,sBACA,qBACA,uBACA,cACA,qBACA,aACA,kBACA,yBACA,0BACA,uBACA,uBACA,mBACA,wBACA,eACA,gBACA,WACA,kBACA,kBACA,wBACA,uBACA,uBACA,2BACA,wBACA,gBACA,sBACA,yBACA,sBACA,mBACA,gBACA,mBACA,eACA,eACA,YACA,mBACA,kBACA,aACA,mBACA,sBACA,sBACA,6BACA,cACA,iBAaKyC,EAAkB,IAAIzC,IAAI,CAC/B,iBACA,WACA,YACA,mBACA,eACA,mBACA,YACA,gBACA,kBACA,eACA,wBACA,uBACA,mBACA,mBACA,iBACA,uBACA,iCACA,iCACA,eACA,gBACA,cACA,WACA,qBACA,kBACA,sBACA,sBACA,gCACA,gCACA,qBACA,eACA,qBACA,+BACA,+BACA,cACA,eACA,qBACA,yBACA,iBACA,sBACA,eACA,eACA,mBACA,oBACA,qBACA,sBACA,kBACA,0BACA,sBACA,sBACA,4BACA,0BACA,oCACA,oCACA,iBACA,kBACA,qBAgEQ0C,EAAA,SAACjE,GACR,OAAOA,EAAMiD,QAAQ,QAAS,GAC/B,ECzUK3G,EAAW,2BAEXoC,EAAWD,EAAanC,EAAU,CACvC4G,SAAWgB,GAAD,wCAAAjF,OAA+CiF,EAA/C,OAQL/F,EAAO,CAACiF,EAASe,EAAYC,IAC3B,CAACf,EAAM9G,KACQiF,EAAgBjF,EAAQD,EAAU,CAAE2F,OAAQmB,KAMjEC,EAAKE,aAAa1H,IACjB,IAAKD,EAAuBC,GAC3B,OAGD,MAAMsH,EAAOtH,EAAOsH,KDsPvB,IAKYkB,ECzPJlB,EAAKmB,WAAW,ODyPZD,ECrPwBlB,EDsP3BU,EAASpB,IAAT,IAAAxD,OAAiBoF,EAAWZ,kBClP9BW,EAAQG,IACX1I,EAAOsH,KAAOqB,EAA0B3I,EAAOsH,MAKhD/G,EAAO,CACNI,QAASkC,EAASwE,SAASC,GAC3BzG,KAAMb,EACNU,SACAD,SAAAA,KAJD,GArBD,EA+BF6B,EAAK7B,SAAWA,EAChB6B,EAAKO,SAAWA,EAChBP,EAAKwF,KA9CQ,CACZC,IAAK,uECXN,MAAMa,EAAc,CAAA,EAozBpB,SAASC,KAAa1F,GACrB,OAAO,IAAIuC,IAAI,IAAIvC,GAAM2F,QAAO,CAACpI,EAAQqI,IAAQ,IAAIrI,KAAWqI,IAAM,IACtE,CApzBDH,EAAYI,eAAiB,IAAItD,IAAI,CAEpC,IAEA,IACA,KAEA,MACA,OACA,OACA,MAEA,KACA,MAEA,MACA,OACA,SAGDkD,EAAYK,YAAc,IAAIvD,IAAI,CAEjC,KACA,KACA,KACA,MACA,MACA,KAEA,MACA,QACA,QACA,MACA,MACA,QACA,QACA,MACA,MACA,QACA,QACA,MACA,KACA,KACA,OACA,OACA,KAEA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,QAEA,OAGDkD,EAAYM,MAAQL,EAAUD,EAAYI,eAAgBJ,EAAYK,aAEtEL,EAAYO,uBAAyB,IAAIzD,IAAI,CAC5C,aACA,aACA,aACA,SACA,SACA,SACA,UACA,UACA,UACA,QACA,UAGDkD,EAAYQ,cAAgB,IAAI1D,IAAI,CAAC,UAAW,UAAW,SAAU,eAAgB,UAErFkD,EAAYS,iBAAmBR,EAAUD,EAAYQ,cAAe,CACnE,UACA,OACA,OACA,cACA,gBACA,eAGDR,EAAYU,mBAAqBT,EAAUD,EAAYQ,cAAe,CACrE,QACA,aACA,UACA,UACA,YACA,YACA,WACA,gBACA,eACA,eAGDR,EAAYW,2BAA6B,IAAI7D,IAAI,CAAC,SAAU,YAE5DkD,EAAYY,2BAA6B,IAAI9D,IAAI,CAAC,SAElDkD,EAAYa,0BAA4B,IAAI/D,IAAI,CAC/C,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QAGDkD,EAAYc,mBAAqBb,EAChCD,EAAYQ,cACZR,EAAYW,2BACZX,EAAYY,2BACZZ,EAAYa,2BAGbb,EAAYe,sBAAwBd,EAAUD,EAAYQ,cAAe,CAAC,SAE1ER,EAAYgB,gCAAkCf,EAAUD,EAAYQ,cAAe,CAClF,SACA,OACA,UACA,cACA,WACA,aACA,WACA,QACA,iBAGDR,EAAYiB,gCAAkC,IAAInE,IAAI,CAAC,aAEvDkD,EAAYkB,2BAA6BjB,EAAUD,EAAYQ,cAAe,CAC7E,SACA,UACA,YACA,sBAGDR,EAAYmB,0BAA4B,IAAIrE,IAAI,CAAC,OAAQ,WAAY,YAAa,SAElFkD,EAAYoB,2BAA6BnB,EAAUD,EAAYQ,cAAe,CAC7E,UACA,WAIDR,EAAYqB,2BAA6BpB,EACxCD,EAAYQ,cACZR,EAAYe,sBACZf,EAAYgB,gCACZhB,EAAYiB,gCACZjB,EAAYkB,2BACZlB,EAAYmB,0BACZnB,EAAYoB,4BAIbpB,EAAYsB,6BAA+B,IAAIxE,IAAI,CAClD,SACA,QACA,aACA,iBAGDkD,EAAYuB,8BAAgC,IAAIzE,IAAI,CACnD,SACA,QACA,aACA,eAEA,WACA,UACA,MACA,uBACA,gBACA,SACA,cACA,YACA,SACA,UACA,iBACA,gBAGDkD,EAAYwB,yBAA2B,IAAI1E,IAAI,CAAC,SAEhDkD,EAAYyB,8BAAgC,IAAI3E,IAAI,CACnD,kBACA,oBACA,2BACA,2BACA,0BACA,0BACA,kCAGDkD,EAAY0B,6BAA+B,IAAI5E,IAAI,CAClD,mBACA,mBACA,mBACA,iBACA,mBACA,oBACA,sBACA,mBACA,mBACA,aACA,YACA,YACA,aACA,WACA,iBACA,iBACA,aACA,YACA,kBACA,mBACA,cACA,YACA,YACA,uBACA,+BACA,oCACA,uBACA,8BACA,wBACA,mCACA,kCACA,uCACA,mCACA,0CACA,qCACA,oCACA,qCACA,6BACA,mCACA,mCACA,yBACA,sBACA,6BACA,4BACA,wBACA,oBACA,qCACA,8BACA,8BACA,iCACA,uBACA,iCACA,yBACA,+BACA,4BACA,gCACA,oCACA,gCACA,uBACA,yCACA,4BACA,kCACA,0CACA,oCACA,oCACA,0CACGkD,EAAYyB,gCAGhBzB,EAAY2B,eAAiB1B,EAC5BD,EAAYsB,6BACZtB,EAAYuB,8BACZvB,EAAY0B,6BACZ1B,EAAYwB,0BAGbxB,EAAY4B,6BAA+B,IAAI9E,IAAI,CAClD,aACA,kBACA,mBACA,gBAGDkD,EAAY6B,wBAA0B,IAAI/E,IAAI,CAAC,MAAO,SAEtDkD,EAAY8B,wBAA0B,IAAIhF,IAAI,CAAC,QAAS,QAAS,OAAQ,UAEzEkD,EAAY+B,iCAAmC,IAAIjF,IAAI,CAAC,MAAO,KAAM,UAAW,MAAO,UAEvFkD,EAAYgC,gCAAkC,IAAIlF,IAAI,CAAC,YAAa,mBAEpEkD,EAAYiC,mBAAqB,IAAInF,IAAI,CACxC,SACA,WACA,WACA,QACA,UACA,UACA,UACA,UACA,WACA,QACA,UACA,cACA,gBACA,QACA,eACA,gBACA,aACA,sBACA,SACA,OACA,eACA,QACA,gBACA,WACA,UACA,aACA,eACA,OACA,aACA,eAC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CA,QACA,oBACA,UACA,gBACA,eACA,kBACA,WACA,YACA,sBACA,SACA,YACA,QACA,QACA,YACA,OACA,YACA,OACA,WACA,WACA,YACA,WACA,QACA,aAIDzD,EAAY2D,4BAA8B,IAAI7G,IAAI,CACjD,sBACA,gBACA,eACA,0BACA,oBACA,mBACA,0BACA,oBACA,qBAIDkD,EAAY4D,kBAAoB3D,EAAUD,EAAY2D,4BAA6B,CAClF,YACA,cACA,eACA,QACA,cACA,cACA,eACA,gBACA,gBACA,OACA,SACA,QACA,kBACA,cACA,mBACA,YACA,kBACA,aACA,iBACA,iBACA,YACA,mBACA,YACA,kBACA,aACA,iBACA,iBACA,YACA,aACA,cACA,iBACA,kBACA,UACA,uBACA,mBACA,yBACA,+BACA,aACA,OACA,YACA,SACA,sBACA,UAID3D,EAAY6D,aAAe,IAAI/G,IAAI,CAClC,eACA,gBACA,eACA,aACA,aACA,kBACA,eACA,aACA,cACA,WACA,YACA,gBACA,iBACA,kBACA,sBACA,iBACA,WACA,OACA,WACA,YACA,mBACA,aACA,kBACA,oBACA,eACA,SACA,cACA,eAKDkD,EAAY8D,iBAAmB,IAAIhH,81BAGnCkD,EAAY+D,oBAAsB,IAAIjH,IAAI,CACzC,UACA,SACA,WACA,MACA,QACA,SACA,UACA,MACA,OACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,OACA,UACA,YACA,SACA,SACA,KACA,QAGDkD,EAAYgE,0BAA4B,IAAIlH,IAAI,CAC/C,WACA,cACA,eACA,eACA,gBACA,mBACA,WACA,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,iBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,eACA,gBACA,WACA,iBACA,iBACA,aCnyBD,IAAAmH,EAAA,SAAgDC,EAAOC,GACtD,IAAKvJ,MAAMC,QAAQqJ,GAClB,OAAOE,EAAiCF,EAAOC,GAGhD,IAAK,MAAME,KAAaH,EAAO,CAC9B,MAAMI,EA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"}